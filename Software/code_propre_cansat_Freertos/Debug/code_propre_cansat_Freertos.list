
code_propre_cansat_Freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c94  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002504  08019e78  08019e78  0001ae78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c37c  0801c37c  0001e210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c37c  0801c37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c384  0801c384  0001e210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c384  0801c384  0001d384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c388  0801c388  0001d388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0801c38c  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003eb8  20000210  0801c59c  0001e210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200040c8  0801c59c  0001f0c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034bdf  00000000  00000000  0001e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075d1  00000000  00000000  00052e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002848  00000000  00000000  0005a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f02  00000000  00000000  0005cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029645  00000000  00000000  0005eb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037484  00000000  00000000  0008817f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef1f1  00000000  00000000  000bf603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ae7f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c224  00000000  00000000  001ae838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001baa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08019e5c 	.word	0x08019e5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08019e5c 	.word	0x08019e5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800107a:	2354      	movs	r3, #84	@ 0x54
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2210      	movs	r2, #16
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4838      	ldr	r0, [pc, #224]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f006 fea0 	bl	8007dd8 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001098:	234c      	movs	r3, #76	@ 0x4c
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2211      	movs	r2, #17
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4830      	ldr	r0, [pc, #192]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f006 fe91 	bl	8007dd8 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2212      	movs	r2, #18
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	4829      	ldr	r0, [pc, #164]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f006 fe82 	bl	8007dd8 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2215      	movs	r2, #21
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f006 fe73 	bl	8007dd8 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	481a      	ldr	r0, [pc, #104]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f006 fe64 	bl	8007dd8 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2217      	movs	r2, #23
 8001126:	21d6      	movs	r1, #214	@ 0xd6
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800112a:	f006 fe55 	bl	8007dd8 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	221e      	movs	r2, #30
 8001144:	21d6      	movs	r1, #214	@ 0xd6
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001148:	f006 ff5a 	bl	8008000 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <Init_HighPerf_Mode_6_axis+0x108>)
 8001158:	f013 fdc2 	bl	8014ce0 <puts>
        }
        if (status & 0x02) {
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <Init_HighPerf_Mode_6_axis+0x10c>)
 8001168:	f013 fdba 	bl	8014ce0 <puts>
        }

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200003a0 	.word	0x200003a0
 8001178:	08019eb4 	.word	0x08019eb4
 800117c:	08019ee8 	.word	0x08019ee8

08001180 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	@ 0x38
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030b 	add.w	r3, r7, #11
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	221e      	movs	r2, #30
 800119c:	21d6      	movs	r1, #214	@ 0xd6
 800119e:	4874      	ldr	r0, [pc, #464]	@ (8001370 <Read_sensor_data+0x1f0>)
 80011a0:	f006 ff2e 	bl	8008000 <HAL_I2C_Mem_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 80011a8:	7ffb      	ldrb	r3, [r7, #31]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <Read_sensor_data+0x32>
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	e0da      	b.n	8001368 <Read_sensor_data+0x1e8>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <Read_sensor_data+0x46>
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0ce      	b.n	8001368 <Read_sensor_data+0x1e8>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ce:	e044      	b.n	800125a <Read_sensor_data+0xda>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	3311      	adds	r3, #17
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011e0:	7f3b      	ldrb	r3, [r7, #28]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 030a 	add.w	r3, r7, #10
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	21d6      	movs	r1, #214	@ 0xd6
 80011f8:	485d      	ldr	r0, [pc, #372]	@ (8001370 <Read_sensor_data+0x1f0>)
 80011fa:	f006 ff01 	bl	8008000 <HAL_I2C_Mem_Read>
 80011fe:	4603      	mov	r3, r0
 8001200:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <Read_sensor_data+0x8c>
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	e0ad      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800120c:	7efb      	ldrb	r3, [r7, #27]
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0309 	add.w	r3, r7, #9
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	21d6      	movs	r1, #214	@ 0xd6
 8001224:	4852      	ldr	r0, [pc, #328]	@ (8001370 <Read_sensor_data+0x1f0>)
 8001226:	f006 feeb 	bl	8008000 <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <Read_sensor_data+0xb8>
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	e097      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001238:	7a7b      	ldrb	r3, [r7, #9]
 800123a:	b21b      	sxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7abb      	ldrb	r3, [r7, #10]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	3328      	adds	r3, #40	@ 0x28
 800124e:	443b      	add	r3, r7
 8001250:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	3301      	adds	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	2b02      	cmp	r3, #2
 800125e:	ddb7      	ble.n	80011d0 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	e044      	b.n	80012f0 <Read_sensor_data+0x170>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	3314      	adds	r3, #20
 800126a:	b2db      	uxtb	r3, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001270:	7fbb      	ldrb	r3, [r7, #30]
 8001272:	3301      	adds	r3, #1
 8001274:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001276:	7fbb      	ldrb	r3, [r7, #30]
 8001278:	b29a      	uxth	r2, r3
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f107 030a 	add.w	r3, r7, #10
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	21d6      	movs	r1, #214	@ 0xd6
 800128e:	4838      	ldr	r0, [pc, #224]	@ (8001370 <Read_sensor_data+0x1f0>)
 8001290:	f006 feb6 	bl	8008000 <HAL_I2C_Mem_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Read_sensor_data+0x122>
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	e062      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80012a2:	7f7b      	ldrb	r3, [r7, #29]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	f107 0309 	add.w	r3, r7, #9
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	21d6      	movs	r1, #214	@ 0xd6
 80012ba:	482d      	ldr	r0, [pc, #180]	@ (8001370 <Read_sensor_data+0x1f0>)
 80012bc:	f006 fea0 	bl	8008000 <HAL_I2C_Mem_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <Read_sensor_data+0x14e>
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	e04c      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80012ce:	7a7b      	ldrb	r3, [r7, #9]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3328      	adds	r3, #40	@ 0x28
 80012e4:	443b      	add	r3, r7
 80012e6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	ddb7      	ble.n	8001266 <Read_sensor_data+0xe6>
	}
	data->AccelX =(float) accel_data[0]*1.0;
 80012f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a00 	vstr	s15, [r3]
	data->AccelY =(float) accel_data[1]*1.0;
 8001308:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a01 	vstr	s15, [r3, #4]
	data->AccelZ =(float) accel_data[2]*1.0;
 800131a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edc3 7a02 	vstr	s15, [r3, #8]
	data->GyroX = gyro_data[0];
 800132c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 8001336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 8001340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001344:	461a      	mov	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 800134a:	f000 f815 	bl	8001378 <Read_temp>
 800134e:	ec51 0b10 	vmov	r0, r1, d0
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <Read_sensor_data+0x1f4>)
 8001358:	f7fe ffbe 	bl	80002d8 <__aeabi_dsub>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200003a0 	.word	0x200003a0
 8001374:	40210000 	.word	0x40210000

08001378 <Read_temp>:

double Read_temp() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2301      	movs	r3, #1
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	2220      	movs	r2, #32
 8001390:	21d6      	movs	r1, #214	@ 0xd6
 8001392:	481f      	ldr	r0, [pc, #124]	@ (8001410 <Read_temp+0x98>)
 8001394:	f006 fe34 	bl	8008000 <HAL_I2C_Mem_Read>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2221      	movs	r2, #33	@ 0x21
 80013ae:	21d6      	movs	r1, #214	@ 0xd6
 80013b0:	4817      	ldr	r0, [pc, #92]	@ (8001410 <Read_temp+0x98>)
 80013b2:	f006 fe25 	bl	8008000 <HAL_I2C_Mem_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 80013ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8d0 	bl	8000574 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <Read_temp+0x9c>)
 80013da:	f7ff fa5f 	bl	800089c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <Read_temp+0xa0>)
 80013ec:	f7fe ff76 	bl	80002dc <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 80013f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001400:	eeb0 0a47 	vmov.f32	s0, s14
 8001404:	eef0 0a67 	vmov.f32	s1, s15
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200003a0 	.word	0x200003a0
 8001414:	40700000 	.word	0x40700000
 8001418:	40390000 	.word	0x40390000
 800141c:	00000000 	.word	0x00000000

08001420 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	if (GNSS->uartWorkingBuffer[0] == 0xB5 && GNSS->uartWorkingBuffer[1] == 0x62) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7a1b      	ldrb	r3, [r3, #8]
 800142c:	2bb5      	cmp	r3, #181	@ 0xb5
 800142e:	f040 81a6 	bne.w	800177e <GNSS_ParsePVTData+0x35e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a5b      	ldrb	r3, [r3, #9]
 8001436:	2b62      	cmp	r3, #98	@ 0x62
 8001438:	f040 81a1 	bne.w	800177e <GNSS_ParsePVTData+0x35e>
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7c9a      	ldrb	r2, [r3, #18]
 8001440:	4b9f      	ldr	r3, [pc, #636]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001442:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7c9a      	ldrb	r2, [r3, #18]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7cda      	ldrb	r2, [r3, #19]
 8001452:	4b9b      	ldr	r3, [pc, #620]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001454:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7cda      	ldrb	r2, [r3, #19]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 8001460:	4b97      	ldr	r3, [pc, #604]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7d1a      	ldrb	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7d5a      	ldrb	r2, [r3, #21]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7d9a      	ldrb	r2, [r3, #22]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7dda      	ldrb	r2, [r3, #23]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e1a      	ldrb	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

	for (int var = 0; var < 4; ++var) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b8:	e017      	b.n	80014ea <GNSS_ParsePVTData+0xca>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	331e      	adds	r3, #30
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	7a19      	ldrb	r1, [r3, #8]
 80014c4:	4a7f      	ldr	r2, [pc, #508]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	331e      	adds	r3, #30
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	7a19      	ldrb	r1, [r3, #8]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	4413      	add	r3, r2
 80014de:	3380      	adds	r3, #128	@ 0x80
 80014e0:	460a      	mov	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	3301      	adds	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	dde4      	ble.n	80014ba <GNSS_ParsePVTData+0x9a>
	}
	GNSS->lon = iLong.iLong;
 80014f0:	4b74      	ldr	r3, [pc, #464]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	67da      	str	r2, [r3, #124]	@ 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80014f8:	4b72      	ldr	r3, [pc, #456]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80016c8 <GNSS_ParsePVTData+0x2a8>
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	e017      	b.n	8001548 <GNSS_ParsePVTData+0x128>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	3322      	adds	r3, #34	@ 0x22
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	7a19      	ldrb	r1, [r3, #8]
 8001522:	4a68      	ldr	r2, [pc, #416]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	4413      	add	r3, r2
 8001528:	460a      	mov	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	3322      	adds	r3, #34	@ 0x22
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	7a19      	ldrb	r1, [r3, #8]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	4413      	add	r3, r2
 800153c:	3388      	adds	r3, #136	@ 0x88
 800153e:	460a      	mov	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	3301      	adds	r3, #1
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2b03      	cmp	r3, #3
 800154c:	dde4      	ble.n	8001518 <GNSS_ParsePVTData+0xf8>
	}
	GNSS->lat = iLong.iLong;
 800154e:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001558:	4b5a      	ldr	r3, [pc, #360]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001564:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80016c8 <GNSS_ParsePVTData+0x2a8>
 8001568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e00c      	b.n	8001592 <GNSS_ParsePVTData+0x172>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	3326      	adds	r3, #38	@ 0x26
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	7a19      	ldrb	r1, [r3, #8]
 8001582:	4a50      	ldr	r2, [pc, #320]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
 8001588:	460a      	mov	r2, r1
 800158a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	3301      	adds	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	2b03      	cmp	r3, #3
 8001596:	ddef      	ble.n	8001578 <GNSS_ParsePVTData+0x158>
	}
	GNSS->height = iLong.iLong;
 8001598:	4b4a      	ldr	r3, [pc, #296]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->fheight=(float)GNSS->height/1000.0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 80015b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98


	for (int var = 0; var < 4; ++var) {
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	e017      	b.n	80015f4 <GNSS_ParsePVTData+0x1d4>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	332a      	adds	r3, #42	@ 0x2a
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	7a19      	ldrb	r1, [r3, #8]
 80015ce:	4a3d      	ldr	r2, [pc, #244]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	4413      	add	r3, r2
 80015d4:	460a      	mov	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	332a      	adds	r3, #42	@ 0x2a
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	7a19      	ldrb	r1, [r3, #8]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	4413      	add	r3, r2
 80015e8:	33a0      	adds	r3, #160	@ 0xa0
 80015ea:	460a      	mov	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	dde4      	ble.n	80015c4 <GNSS_ParsePVTData+0x1a4>
	}
	GNSS->hMSL = iLong.iLong;
 80015fa:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001612:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 8001616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e00c      	b.n	8001640 <GNSS_ParsePVTData+0x220>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	332e      	adds	r3, #46	@ 0x2e
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	7a19      	ldrb	r1, [r3, #8]
 8001630:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	4413      	add	r3, r2
 8001636:	460a      	mov	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b03      	cmp	r3, #3
 8001644:	ddef      	ble.n	8001626 <GNSS_ParsePVTData+0x206>
	}
	GNSS->hAcc = uLong.uLong;
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GNSS->fhACC=(float)GNSS->hAcc/1000.0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165e:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 8001662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac

	for (int var = 0; var < 4; ++var) {
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	e00c      	b.n	800168c <GNSS_ParsePVTData+0x26c>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	3332      	adds	r3, #50	@ 0x32
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	7a19      	ldrb	r1, [r3, #8]
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	3301      	adds	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b03      	cmp	r3, #3
 8001690:	ddef      	ble.n	8001672 <GNSS_ParsePVTData+0x252>
	}
	GNSS->vAcc = uLong.uLong;
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016aa:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 80016ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	for (int var = 0; var < 4; ++var) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e022      	b.n	8001704 <GNSS_ParsePVTData+0x2e4>
 80016be:	bf00      	nop
 80016c0:	2000022c 	.word	0x2000022c
 80016c4:	20000234 	.word	0x20000234
 80016c8:	4b189680 	.word	0x4b189680
 80016cc:	447a0000 	.word	0x447a0000
 80016d0:	20000230 	.word	0x20000230
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3342      	adds	r3, #66	@ 0x42
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	7a19      	ldrb	r1, [r3, #8]
 80016de:	4a2c      	ldr	r2, [pc, #176]	@ (8001790 <GNSS_ParsePVTData+0x370>)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	460a      	mov	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3342      	adds	r3, #66	@ 0x42
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	7a19      	ldrb	r1, [r3, #8]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	33bc      	adds	r3, #188	@ 0xbc
 80016fa:	460a      	mov	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b03      	cmp	r3, #3
 8001708:	dde4      	ble.n	80016d4 <GNSS_ParsePVTData+0x2b4>
	}
	GNSS->gSpeed = iLong.iLong;
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <GNSS_ParsePVTData+0x370>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001722:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001794 <GNSS_ParsePVTData+0x374>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	for (int var = 0; var < 4; ++var) {
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	e00c      	b.n	8001750 <GNSS_ParsePVTData+0x330>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3346      	adds	r3, #70	@ 0x46
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	7a19      	ldrb	r1, [r3, #8]
 8001740:	4a13      	ldr	r2, [pc, #76]	@ (8001790 <GNSS_ParsePVTData+0x370>)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4413      	add	r3, r2
 8001746:	460a      	mov	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b03      	cmp	r3, #3
 8001754:	ddef      	ble.n	8001736 <GNSS_ParsePVTData+0x316>
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <GNSS_ParsePVTData+0x370>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff0a 	bl	8000574 <__aeabi_i2d>
 8001760:	a309      	add	r3, pc, #36	@ (adr r3, 8001788 <GNSS_ParsePVTData+0x368>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe ff6f 	bl	8000648 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff fa19 	bl	8000ba8 <__aeabi_d2iz>
 8001776:	4602      	mov	r2, r0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	}
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	88e368f1 	.word	0x88e368f1
 800178c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001790:	20000234 	.word	0x20000234
 8001794:	447a0000 	.word	0x447a0000

08001798 <distancecalc>:
//		manual.
	return 0;
}


float distancecalc(float lat1, float lat2, float long1, float long2,float alt1, float alt2){
 8001798:	b580      	push	{r7, lr}
 800179a:	ed2d 8b02 	vpush	{d8}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	ed87 0a05 	vstr	s0, [r7, #20]
 80017a6:	edc7 0a04 	vstr	s1, [r7, #16]
 80017aa:	ed87 1a03 	vstr	s2, [r7, #12]
 80017ae:	edc7 1a02 	vstr	s3, [r7, #8]
 80017b2:	ed87 2a01 	vstr	s4, [r7, #4]
 80017b6:	edc7 2a00 	vstr	s5, [r7]
	float distanceplat=0.0;
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
	float distance=0.0;
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
	distanceplat=(float) 6371000.0*acosf(fminf(1.0,sinf(lat1*(M_PI/180.0))*sinf(lat2*(M_PI/180.0))+cosf(lat1*(M_PI/180.0))*cosf(lat2*(M_PI/180.0))*cosf((long2-long1)*(M_PI/180.0))));
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7fe fee6 	bl	8000598 <__aeabi_f2d>
 80017cc:	a357      	add	r3, pc, #348	@ (adr r3, 800192c <distancecalc+0x194>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ff39 	bl	8000648 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff fa2b 	bl	8000c38 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	ee00 3a10 	vmov	s0, r3
 80017e8:	f017 f826 	bl	8018838 <sinf>
 80017ec:	eeb0 8a40 	vmov.f32	s16, s0
 80017f0:	6938      	ldr	r0, [r7, #16]
 80017f2:	f7fe fed1 	bl	8000598 <__aeabi_f2d>
 80017f6:	a34d      	add	r3, pc, #308	@ (adr r3, 800192c <distancecalc+0x194>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe ff24 	bl	8000648 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff fa16 	bl	8000c38 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	ee00 3a10 	vmov	s0, r3
 8001812:	f017 f811 	bl	8018838 <sinf>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7fe feba 	bl	8000598 <__aeabi_f2d>
 8001824:	a341      	add	r3, pc, #260	@ (adr r3, 800192c <distancecalc+0x194>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe ff0d 	bl	8000648 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f9ff 	bl	8000c38 <__aeabi_d2f>
 800183a:	4603      	mov	r3, r0
 800183c:	ee00 3a10 	vmov	s0, r3
 8001840:	f016 ffae 	bl	80187a0 <cosf>
 8001844:	eef0 8a40 	vmov.f32	s17, s0
 8001848:	6938      	ldr	r0, [r7, #16]
 800184a:	f7fe fea5 	bl	8000598 <__aeabi_f2d>
 800184e:	a337      	add	r3, pc, #220	@ (adr r3, 800192c <distancecalc+0x194>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fef8 	bl	8000648 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f9ea 	bl	8000c38 <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	ee00 3a10 	vmov	s0, r3
 800186a:	f016 ff99 	bl	80187a0 <cosf>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
 8001872:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001876:	ed97 7a02 	vldr	s14, [r7, #8]
 800187a:	edd7 7a03 	vldr	s15, [r7, #12]
 800187e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001882:	ee17 0a90 	vmov	r0, s15
 8001886:	f7fe fe87 	bl	8000598 <__aeabi_f2d>
 800188a:	a328      	add	r3, pc, #160	@ (adr r3, 800192c <distancecalc+0x194>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe feda 	bl	8000648 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f9cc 	bl	8000c38 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	ee00 3a10 	vmov	s0, r3
 80018a6:	f016 ff7b 	bl	80187a0 <cosf>
 80018aa:	eef0 7a40 	vmov.f32	s15, s0
 80018ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80018b2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80018b6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80018ba:	eeb0 0a67 	vmov.f32	s0, s15
 80018be:	f017 f80b 	bl	80188d8 <fminf>
 80018c2:	eef0 7a40 	vmov.f32	s15, s0
 80018c6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ca:	f016 fec7 	bl	801865c <acosf>
 80018ce:	eef0 7a40 	vmov.f32	s15, s0
 80018d2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001928 <distancecalc+0x190>
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	edc7 7a07 	vstr	s15, [r7, #28]

	distance=sqrtf(((alt2-alt1)*(alt2-alt1))+(distanceplat*distanceplat));
 80018de:	ed97 7a00 	vldr	s14, [r7]
 80018e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ea:	edd7 6a00 	vldr	s13, [r7]
 80018ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80018fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001906:	eeb0 0a67 	vmov.f32	s0, s15
 800190a:	f016 ff2b 	bl	8018764 <sqrtf>
 800190e:	ed87 0a06 	vstr	s0, [r7, #24]
	return distance;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	ee07 3a90 	vmov	s15, r3
}
 8001918:	eeb0 0a67 	vmov.f32	s0, s15
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	ecbd 8b02 	vpop	{d8}
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	4ac26d70 	.word	0x4ac26d70
 800192c:	a2529d39 	.word	0xa2529d39
 8001930:	3f91df46 	.word	0x3f91df46

08001934 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	@ 0x30
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800193a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2220      	movs	r2, #32
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f013 faff 	bl	8014f50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001952:	4b40      	ldr	r3, [pc, #256]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001954:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001958:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800195a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <MX_ADC1_Init+0x120>)
 800195c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001960:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001962:	4b3c      	ldr	r3, [pc, #240]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001968:	4b3a      	ldr	r3, [pc, #232]	@ (8001a54 <MX_ADC1_Init+0x120>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800196e:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001974:	4b37      	ldr	r3, [pc, #220]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001976:	2201      	movs	r2, #1
 8001978:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800197a:	4b36      	ldr	r3, [pc, #216]	@ (8001a54 <MX_ADC1_Init+0x120>)
 800197c:	2208      	movs	r2, #8
 800197e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001980:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001982:	2200      	movs	r2, #0
 8001984:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001986:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001988:	2201      	movs	r2, #1
 800198a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800198c:	4b31      	ldr	r3, [pc, #196]	@ (8001a54 <MX_ADC1_Init+0x120>)
 800198e:	2203      	movs	r2, #3
 8001990:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001992:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800199a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a54 <MX_ADC1_Init+0x120>)
 800199c:	2200      	movs	r2, #0
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a54 <MX_ADC1_Init+0x120>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <MX_ADC1_Init+0x120>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019ae:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <MX_ADC1_Init+0x120>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <MX_ADC1_Init+0x120>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019bc:	4825      	ldr	r0, [pc, #148]	@ (8001a54 <MX_ADC1_Init+0x120>)
 80019be:	f004 f8f7 	bl	8005bb0 <HAL_ADC_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80019c8:	f001 fa8c 	bl	8002ee4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	481f      	ldr	r0, [pc, #124]	@ (8001a54 <MX_ADC1_Init+0x120>)
 80019d8:	f005 fabc 	bl	8006f54 <HAL_ADCEx_MultiModeConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80019e2:	f001 fa7f 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <MX_ADC1_Init+0x124>)
 80019e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ea:	2306      	movs	r3, #6
 80019ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80019ee:	2307      	movs	r3, #7
 80019f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019f2:	237f      	movs	r3, #127	@ 0x7f
 80019f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019f6:	2304      	movs	r3, #4
 80019f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4814      	ldr	r0, [pc, #80]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001a04:	f004 fd44 	bl	8006490 <HAL_ADC_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001a0e:	f001 fa69 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <MX_ADC1_Init+0x128>)
 8001a14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a16:	230c      	movs	r3, #12
 8001a18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001a20:	f004 fd36 	bl	8006490 <HAL_ADC_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001a2a:	f001 fa5b 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_ADC1_Init+0x12c>)
 8001a30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a32:	2312      	movs	r3, #18
 8001a34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4806      	ldr	r0, [pc, #24]	@ (8001a54 <MX_ADC1_Init+0x120>)
 8001a3c:	f004 fd28 	bl	8006490 <HAL_ADC_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001a46:	f001 fa4d 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	@ 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000238 	.word	0x20000238
 8001a58:	cb840000 	.word	0xcb840000
 8001a5c:	c3210000 	.word	0xc3210000
 8001a60:	0c900008 	.word	0x0c900008

08001a64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b09a      	sub	sp, #104	@ 0x68
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	2244      	movs	r2, #68	@ 0x44
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f013 fa63 	bl	8014f50 <memset>
  if(adcHandle->Instance==ADC1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a92:	d167      	bne.n	8001b64 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f007 fd2f 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ab0:	f001 fa18 	bl	8002ee4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_ADC_MspInit+0x108>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b6c <HAL_ADC_MspInit+0x108>)
 8001aba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_ADC_MspInit+0x108>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <HAL_ADC_MspInit+0x108>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	4a26      	ldr	r2, [pc, #152]	@ (8001b6c <HAL_ADC_MspInit+0x108>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_ADC_MspInit+0x108>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afa:	f005 feed 	bl	80078d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b00:	4a1c      	ldr	r2, [pc, #112]	@ (8001b74 <HAL_ADC_MspInit+0x110>)
 8001b02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b06:	2205      	movs	r2, #5
 8001b08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b2e:	2220      	movs	r2, #32
 8001b30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b38:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b3a:	f005 fb8f 	bl	800725c <HAL_DMA_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001b44:	f001 f9ce 	bl	8002ee4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b4e:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <HAL_ADC_MspInit+0x10c>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2105      	movs	r1, #5
 8001b58:	2012      	movs	r0, #18
 8001b5a:	f005 fb57 	bl	800720c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b5e:	2012      	movs	r0, #18
 8001b60:	f005 fb6e 	bl	8007240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b64:	bf00      	nop
 8001b66:	3768      	adds	r7, #104	@ 0x68
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	200002a4 	.word	0x200002a4
 8001b74:	4002001c 	.word	0x4002001c

08001b78 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b8a:	f040 8097 	bne.w	8001cbc <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001b8e:	4b52      	ldr	r3, [pc, #328]	@ (8001cd8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fcee 	bl	8000574 <__aeabi_i2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	a14a      	add	r1, pc, #296	@ (adr r1, 8001cc8 <HAL_ADC_ConvCpltCallback+0x150>)
 8001b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba2:	f7fe fe7b 	bl	800089c <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7ff f843 	bl	8000c38 <__aeabi_d2f>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a49      	ldr	r2, [pc, #292]	@ (8001cdc <HAL_ADC_ConvCpltCallback+0x164>)
 8001bb6:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001bb8:	4b49      	ldr	r3, [pc, #292]	@ (8001ce0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001bba:	ed93 7a00 	vldr	s14, [r3]
 8001bbe:	4b49      	ldr	r3, [pc, #292]	@ (8001ce4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc8:	ee17 0a90 	vmov	r0, s15
 8001bcc:	f7fe fce4 	bl	8000598 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	4943      	ldr	r1, [pc, #268]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001bda:	f7fe fe5f 	bl	800089c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4690      	mov	r8, r2
 8001be4:	4699      	mov	r9, r3
 8001be6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001be8:	885b      	ldrh	r3, [r3, #2]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcc2 	bl	8000574 <__aeabi_i2d>
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	460d      	mov	r5, r1
 8001bf4:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <HAL_ADC_ConvCpltCallback+0x164>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fccd 	bl	8000598 <__aeabi_f2d>
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x174>)
 8001c04:	f7fe fe4a 	bl	800089c <__aeabi_ddiv>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fd1a 	bl	8000648 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4614      	mov	r4, r2
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ce4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fcb9 	bl	8000598 <__aeabi_f2d>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fb53 	bl	80002d8 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4640      	mov	r0, r8
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f7fe fd05 	bl	8000648 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe fff7 	bl	8000c38 <__aeabi_d2f>
 8001c4a:	ee07 0a10 	vmov	s14, r0
 8001c4e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c56:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <HAL_ADC_ConvCpltCallback+0x178>)
 8001c58:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001c5e:	889b      	ldrh	r3, [r3, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc87 	bl	8000574 <__aeabi_i2d>
 8001c66:	a31a      	add	r3, pc, #104	@ (adr r3, 8001cd0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe fe16 	bl	800089c <__aeabi_ddiv>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x174>)
 8001c7e:	f7fe fce3 	bl	8000648 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <HAL_ADC_ConvCpltCallback+0x164>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc82 	bl	8000598 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fcd4 	bl	8000648 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ffc6 	bl	8000c38 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a11      	ldr	r2, [pc, #68]	@ (8001cf4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001cb0:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	4908      	ldr	r1, [pc, #32]	@ (8001cd8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001cb6:	4810      	ldr	r0, [pc, #64]	@ (8001cf8 <HAL_ADC_ConvCpltCallback+0x180>)
 8001cb8:	f004 f8fe 	bl	8005eb8 <HAL_ADC_Start_DMA>

	}

}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cc6:	bf00      	nop
 8001cc8:	d70a3d70 	.word	0xd70a3d70
 8001ccc:	40b36323 	.word	0x40b36323
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	40affe00 	.word	0x40affe00
 8001cd8:	20000b0c 	.word	0x20000b0c
 8001cdc:	20000b18 	.word	0x20000b18
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	40590000 	.word	0x40590000
 8001cec:	40080000 	.word	0x40080000
 8001cf0:	20000b14 	.word	0x20000b14
 8001cf4:	20000b1c 	.word	0x20000b1c
 8001cf8:	20000238 	.word	0x20000238

08001cfc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b0a0      	sub	sp, #128	@ 0x80
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001d02:	2300      	movs	r3, #0
 8001d04:	67fb      	str	r3, [r7, #124]	@ 0x7c
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001d06:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00f fcab 	bl	8011666 <osMutexCreate>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4a37      	ldr	r2, [pc, #220]	@ (8001df0 <MX_FREERTOS_Init+0xf4>)
 8001d14:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityNormal, 0, 256);
 8001d16:	4b37      	ldr	r3, [pc, #220]	@ (8001df4 <MX_FREERTOS_Init+0xf8>)
 8001d18:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001d26:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f00f fc5f 	bl	80115f0 <osThreadCreate>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a30      	ldr	r2, [pc, #192]	@ (8001df8 <MX_FREERTOS_Init+0xfc>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSSParse */
  osThreadDef(GNSSParse, StartGNSSParse, osPriorityAboveNormal, 0, 256);
 8001d38:	4b30      	ldr	r3, [pc, #192]	@ (8001dfc <MX_FREERTOS_Init+0x100>)
 8001d3a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001d3e:	461d      	mov	r5, r3
 8001d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d44:	682b      	ldr	r3, [r5, #0]
 8001d46:	6023      	str	r3, [r4, #0]
  GNSSParseHandle = osThreadCreate(osThread(GNSSParse), NULL);
 8001d48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00f fc4e 	bl	80115f0 <osThreadCreate>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a2a      	ldr	r2, [pc, #168]	@ (8001e00 <MX_FREERTOS_Init+0x104>)
 8001d58:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 300);
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e04 <MX_FREERTOS_Init+0x108>)
 8001d5c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001d60:	461d      	mov	r5, r3
 8001d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d66:	682b      	ldr	r3, [r5, #0]
 8001d68:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 8001d6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00f fc3d 	bl	80115f0 <osThreadCreate>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a23      	ldr	r2, [pc, #140]	@ (8001e08 <MX_FREERTOS_Init+0x10c>)
 8001d7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo */
  osThreadDef(servo, Startservo, osPriorityHigh, 0, 256);
 8001d7c:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <MX_FREERTOS_Init+0x110>)
 8001d7e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001d82:	461d      	mov	r5, r3
 8001d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	6023      	str	r3, [r4, #0]
  servoHandle = osThreadCreate(osThread(servo), NULL);
 8001d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00f fc2c 	bl	80115f0 <osThreadCreate>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <MX_FREERTOS_Init+0x114>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* definition and creation of distancecalc */
  osThreadDef(distancecalc, Startdistancecalc, osPriorityNormal, 0, 256);
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <MX_FREERTOS_Init+0x118>)
 8001da0:	f107 0418 	add.w	r4, r7, #24
 8001da4:	461d      	mov	r5, r3
 8001da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	6023      	str	r3, [r4, #0]
  distancecalcHandle = osThreadCreate(osThread(distancecalc), NULL);
 8001dae:	f107 0318 	add.w	r3, r7, #24
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00f fc1b 	bl	80115f0 <osThreadCreate>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a16      	ldr	r2, [pc, #88]	@ (8001e18 <MX_FREERTOS_Init+0x11c>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityHigh, 0, 256);
 8001dc0:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <MX_FREERTOS_Init+0x120>)
 8001dc2:	1d3c      	adds	r4, r7, #4
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00f fc0c 	bl	80115f0 <osThreadCreate>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4a11      	ldr	r2, [pc, #68]	@ (8001e20 <MX_FREERTOS_Init+0x124>)
 8001ddc:	6013      	str	r3, [r2, #0]


#endif
#ifdef PARTIE_BAS

  osThreadSuspend(servoHandle);
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <MX_FREERTOS_Init+0x114>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00f fd85 	bl	80118f2 <osThreadSuspend>

#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001de8:	bf00      	nop
 8001dea:	3780      	adds	r7, #128	@ 0x80
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bdb0      	pop	{r4, r5, r7, pc}
 8001df0:	2000032c 	.word	0x2000032c
 8001df4:	08019f24 	.word	0x08019f24
 8001df8:	20000314 	.word	0x20000314
 8001dfc:	08019f44 	.word	0x08019f44
 8001e00:	20000318 	.word	0x20000318
 8001e04:	08019f64 	.word	0x08019f64
 8001e08:	2000031c 	.word	0x2000031c
 8001e0c:	08019f80 	.word	0x08019f80
 8001e10:	20000320 	.word	0x20000320
 8001e14:	08019fa4 	.word	0x08019fa4
 8001e18:	20000324 	.word	0x20000324
 8001e1c:	08019fc8 	.word	0x08019fc8
 8001e20:	20000328 	.word	0x20000328

08001e24 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
  /* Infinite loop */
  for(;;)
  {
	  if(pbmseeker_flag==0){
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <Startstatemachine+0x88>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d12d      	bne.n	8001e90 <Startstatemachine+0x6c>
		  if(pbmseeker==0){
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <Startstatemachine+0x8c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10e      	bne.n	8001e5a <Startstatemachine+0x36>
			  ssd1306_SetCursor(32, 40);
 8001e3c:	2128      	movs	r1, #40	@ 0x28
 8001e3e:	2020      	movs	r0, #32
 8001e40:	f001 fae6 	bl	8003410 <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f001 f9a1 	bl	800318c <ssd1306_Fill>
			  ssd1306_WriteString("OK!", Font_16x24, White);
 8001e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb4 <Startstatemachine+0x90>)
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	ca06      	ldmia	r2, {r1, r2}
 8001e50:	4819      	ldr	r0, [pc, #100]	@ (8001eb8 <Startstatemachine+0x94>)
 8001e52:	f001 fab7 	bl	80033c4 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001e56:	f001 f9b1 	bl	80031bc <ssd1306_UpdateScreen>


		  }
		  if(pbmseeker==1){
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <Startstatemachine+0x8c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10e      	bne.n	8001e80 <Startstatemachine+0x5c>
			  ssd1306_SetCursor(32, 40);
 8001e62:	2128      	movs	r1, #40	@ 0x28
 8001e64:	2020      	movs	r0, #32
 8001e66:	f001 fad3 	bl	8003410 <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f001 f98e 	bl	800318c <ssd1306_Fill>
			  ssd1306_WriteString("PB!", Font_16x24, White);
 8001e70:	4a10      	ldr	r2, [pc, #64]	@ (8001eb4 <Startstatemachine+0x90>)
 8001e72:	2301      	movs	r3, #1
 8001e74:	ca06      	ldmia	r2, {r1, r2}
 8001e76:	4811      	ldr	r0, [pc, #68]	@ (8001ebc <Startstatemachine+0x98>)
 8001e78:	f001 faa4 	bl	80033c4 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001e7c:	f001 f99e 	bl	80031bc <ssd1306_UpdateScreen>


		  }
		  vTaskDelay(pdMS_TO_TICKS(500));
 8001e80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e84:	f010 fcb2 	bl	80127ec <vTaskDelay>
		  pbmseeker_flag=1;
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <Startstatemachine+0x88>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e001      	b.n	8001e94 <Startstatemachine+0x70>
	  }
	  else{
	  statemachine();
 8001e90:	f001 fb08 	bl	80034a4 <statemachine>
	  }
	  timeindex++;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <Startstatemachine+0x9c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <Startstatemachine+0x9c>)
 8001e9c:	6013      	str	r3, [r2, #0]


#ifdef PARTIE_HAUT
#endif
	  ssd1306_UpdateScreen();
 8001e9e:	f001 f98d 	bl	80031bc <ssd1306_UpdateScreen>
    osDelay(100);
 8001ea2:	2064      	movs	r0, #100	@ 0x64
 8001ea4:	f00f fbcb 	bl	801163e <osDelay>
	  if(pbmseeker_flag==0){
 8001ea8:	e7c0      	b.n	8001e2c <Startstatemachine+0x8>
 8001eaa:	bf00      	nop
 8001eac:	2000030c 	.word	0x2000030c
 8001eb0:	20000e44 	.word	0x20000e44
 8001eb4:	20000018 	.word	0x20000018
 8001eb8:	08019fdc 	.word	0x08019fdc
 8001ebc:	08019fe0 	.word	0x08019fe0
 8001ec0:	20000e50 	.word	0x20000e50

08001ec4 <StartGNSSParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGNSSParse */
void StartGNSSParse(void const * argument)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGNSSParse */
  /* Infinite loop */
  for(;;)
  {
	  GNSS_ParsePVTData(&GNSSData);
 8001ecc:	4844      	ldr	r0, [pc, #272]	@ (8001fe0 <StartGNSSParse+0x11c>)
 8001ece:	f7ff faa7 	bl	8001420 <GNSS_ParsePVTData>
	  bmp581_read_precise_normal(&myDatabmp581);
 8001ed2:	4844      	ldr	r0, [pc, #272]	@ (8001fe4 <StartGNSSParse+0x120>)
 8001ed4:	f000 fa34 	bl	8002340 <bmp581_read_precise_normal>
	  Read_sensor_data(&myData6AXIS);
 8001ed8:	4843      	ldr	r0, [pc, #268]	@ (8001fe8 <StartGNSSParse+0x124>)
 8001eda:	f7ff f951 	bl	8001180 <Read_sensor_data>

	  if(counterrecalib>=20){
 8001ede:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <StartGNSSParse+0x128>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b13      	cmp	r3, #19
 8001ee4:	dd2f      	ble.n	8001f46 <StartGNSSParse+0x82>
		  if(GNSSData.fixType>=3){
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe0 <StartGNSSParse+0x11c>)
 8001ee8:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d927      	bls.n	8001f40 <StartGNSSParse+0x7c>
			  P0 =(double) myDatabmp581.press / powf((1 - (GNSSData.fhMSL / 44330.0f)), 5.255f);
 8001ef0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe4 <StartGNSSParse+0x120>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb4f 	bl	8000598 <__aeabi_f2d>
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	4b38      	ldr	r3, [pc, #224]	@ (8001fe0 <StartGNSSParse+0x11c>)
 8001f00:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 8001f04:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8001ff0 <StartGNSSParse+0x12c>
 8001f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f14:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8001ff4 <StartGNSSParse+0x130>
 8001f18:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1c:	f016 fbca 	bl	80186b4 <powf>
 8001f20:	ee10 3a10 	vmov	r3, s0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fb37 	bl	8000598 <__aeabi_f2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f7fe fcb3 	bl	800089c <__aeabi_ddiv>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	492f      	ldr	r1, [pc, #188]	@ (8001ff8 <StartGNSSParse+0x134>)
 8001f3c:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  counterrecalib=0;
 8001f40:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <StartGNSSParse+0x128>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
	  }

	  if(flag_calib){
 8001f46:	4b2d      	ldr	r3, [pc, #180]	@ (8001ffc <StartGNSSParse+0x138>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <StartGNSSParse+0xa0>

		  hauteur_servo=(float)(myDatabmp581.altitude-hauteur_Initiale);
 8001f4e:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <StartGNSSParse+0x120>)
 8001f50:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f54:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <StartGNSSParse+0x13c>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5e:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <StartGNSSParse+0x140>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]

	  }
//#ifdef PARTIE_HAUT
	  create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,0,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,0.0,0.0,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
 8001f64:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <StartGNSSParse+0x11c>)
 8001f66:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <StartGNSSParse+0x11c>)
 8001f6c:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <StartGNSSParse+0x11c>)
 8001f72:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <StartGNSSParse+0x120>)
 8001f78:	ed93 6a05 	vldr	s12, [r3, #20]
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <StartGNSSParse+0x144>)
 8001f7e:	edd3 5a00 	vldr	s11, [r3]
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <StartGNSSParse+0x120>)
 8001f84:	edd3 3a03 	vldr	s7, [r3, #12]
 8001f88:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <StartGNSSParse+0x124>)
 8001f8a:	ed93 4a00 	vldr	s8, [r3]
 8001f8e:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <StartGNSSParse+0x124>)
 8001f90:	edd3 4a01 	vldr	s9, [r3, #4]
 8001f94:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <StartGNSSParse+0x124>)
 8001f96:	ed93 5a02 	vldr	s10, [r3, #8]
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <StartGNSSParse+0x148>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	eeb0 3a65 	vmov.f32	s6, s11
 8001fa8:	eddf 2a19 	vldr	s5, [pc, #100]	@ 8002010 <StartGNSSParse+0x14c>
 8001fac:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 8002010 <StartGNSSParse+0x14c>
 8001fb0:	eef0 1a46 	vmov.f32	s3, s12
 8001fb4:	eeb0 1a66 	vmov.f32	s2, s13
 8001fb8:	eef0 0a47 	vmov.f32	s1, s14
 8001fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	2216      	movs	r2, #22
 8001fc4:	2182      	movs	r1, #130	@ 0x82
 8001fc6:	4813      	ldr	r0, [pc, #76]	@ (8002014 <StartGNSSParse+0x150>)
 8001fc8:	f002 f898 	bl	80040fc <create_and_send_payload>
//#endif
	  counterrecalib++;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <StartGNSSParse+0x128>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a06      	ldr	r2, [pc, #24]	@ (8001fec <StartGNSSParse+0x128>)
 8001fd4:	6013      	str	r3, [r2, #0]


    osDelay(100);
 8001fd6:	2064      	movs	r0, #100	@ 0x64
 8001fd8:	f00f fb31 	bl	801163e <osDelay>
	  GNSS_ParsePVTData(&GNSSData);
 8001fdc:	e776      	b.n	8001ecc <StartGNSSParse+0x8>
 8001fde:	bf00      	nop
 8001fe0:	20000c18 	.word	0x20000c18
 8001fe4:	20000688 	.word	0x20000688
 8001fe8:	20000668 	.word	0x20000668
 8001fec:	20000304 	.word	0x20000304
 8001ff0:	472d2a00 	.word	0x472d2a00
 8001ff4:	40a828f6 	.word	0x40a828f6
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	20000e2c 	.word	0x20000e2c
 8002000:	20000e3c 	.word	0x20000e3c
 8002004:	20000e40 	.word	0x20000e40
 8002008:	20000b14 	.word	0x20000b14
 800200c:	20000e50 	.word	0x20000e50
 8002010:	00000000 	.word	0x00000000
 8002014:	200003f4 	.word	0x200003f4

08002018 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	  //if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET){
		  //sd_detect_flag=1;
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 8002020:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <StartSdcard+0xb4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	4618      	mov	r0, r3
 800202a:	f00f fb29 	bl	8011680 <osMutexWait>
		  fres = f_mount(&FatFs, "", 1);
 800202e:	2201      	movs	r2, #1
 8002030:	4927      	ldr	r1, [pc, #156]	@ (80020d0 <StartSdcard+0xb8>)
 8002032:	4828      	ldr	r0, [pc, #160]	@ (80020d4 <StartSdcard+0xbc>)
 8002034:	f00e fa24 	bl	8010480 <f_mount>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <StartSdcard+0xc0>)
 800203e:	701a      	strb	r2, [r3, #0]
		  if (fres == FR_OK) {
 8002040:	4b25      	ldr	r3, [pc, #148]	@ (80020d8 <StartSdcard+0xc0>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d138      	bne.n	80020ba <StartSdcard+0xa2>
			  fres = f_open(&fil, "write2.txt",FA_WRITE | FA_OPEN_ALWAYS);
 8002048:	2212      	movs	r2, #18
 800204a:	4924      	ldr	r1, [pc, #144]	@ (80020dc <StartSdcard+0xc4>)
 800204c:	4824      	ldr	r0, [pc, #144]	@ (80020e0 <StartSdcard+0xc8>)
 800204e:	f00e fa7b 	bl	8010548 <f_open>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <StartSdcard+0xc0>)
 8002058:	701a      	strb	r2, [r3, #0]
			  if (fres == FR_OK) {
 800205a:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <StartSdcard+0xc0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d126      	bne.n	80020b0 <StartSdcard+0x98>
				  fres=f_lseek(&fil, f_size(&fil));
 8002062:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <StartSdcard+0xc8>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4619      	mov	r1, r3
 8002068:	481d      	ldr	r0, [pc, #116]	@ (80020e0 <StartSdcard+0xc8>)
 800206a:	f00e fe8a 	bl	8010d82 <f_lseek>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <StartSdcard+0xc0>)
 8002074:	701a      	strb	r2, [r3, #0]
				  int sizecpy=0;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
				  sizecpy=snprintf((char*)sdcardbuffer,50, "nous en somme a: %d\n\r", sd_counter);
 800207a:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <StartSdcard+0xcc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1a      	ldr	r2, [pc, #104]	@ (80020e8 <StartSdcard+0xd0>)
 8002080:	2132      	movs	r1, #50	@ 0x32
 8002082:	481a      	ldr	r0, [pc, #104]	@ (80020ec <StartSdcard+0xd4>)
 8002084:	f012 fe34 	bl	8014cf0 <sniprintf>
 8002088:	60f8      	str	r0, [r7, #12]
				  UINT bytesWrote;
				  fres = f_write(&fil,(char*)sdcardbuffer, sizecpy, &bytesWrote);
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4916      	ldr	r1, [pc, #88]	@ (80020ec <StartSdcard+0xd4>)
 8002092:	4813      	ldr	r0, [pc, #76]	@ (80020e0 <StartSdcard+0xc8>)
 8002094:	f00e fc19 	bl	80108ca <f_write>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <StartSdcard+0xc0>)
 800209e:	701a      	strb	r2, [r3, #0]
				  f_close(&fil);
 80020a0:	480f      	ldr	r0, [pc, #60]	@ (80020e0 <StartSdcard+0xc8>)
 80020a2:	f00e fe3f 	bl	8010d24 <f_close>
				  sd_counter++;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <StartSdcard+0xcc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <StartSdcard+0xcc>)
 80020ae:	6013      	str	r3, [r2, #0]

			  }
			  f_mount(NULL, "", 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	4907      	ldr	r1, [pc, #28]	@ (80020d0 <StartSdcard+0xb8>)
 80020b4:	2000      	movs	r0, #0
 80020b6:	f00e f9e3 	bl	8010480 <f_mount>
		  }
		  osMutexRelease(SDCard_mutexeHandle);
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <StartSdcard+0xb4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f00f fb2c 	bl	801171c <osMutexRelease>





    osDelay(100);
 80020c4:	2064      	movs	r0, #100	@ 0x64
 80020c6:	f00f faba 	bl	801163e <osDelay>
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 80020ca:	e7a9      	b.n	8002020 <StartSdcard+0x8>
 80020cc:	2000032c 	.word	0x2000032c
 80020d0:	08019fe4 	.word	0x08019fe4
 80020d4:	200006a0 	.word	0x200006a0
 80020d8:	200008d4 	.word	0x200008d4
 80020dc:	08019fe8 	.word	0x08019fe8
 80020e0:	200008d8 	.word	0x200008d8
 80020e4:	20000310 	.word	0x20000310
 80020e8:	08019ff4 	.word	0x08019ff4
 80020ec:	20000564 	.word	0x20000564

080020f0 <Startservo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startservo */
void Startservo(void const * argument)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startservo */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_servo_started==1){
 80020f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <Startservo+0x88>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d104      	bne.n	800210a <Startservo+0x1a>
		  stop_servo();
 8002100:	f000 ff16 	bl	8002f30 <stop_servo>
		  flag_servo_started=0;
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <Startservo+0x88>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
	  }
	  if(flag_bouton_servo==1){
 800210a:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <Startservo+0x8c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <Startservo+0x32>
		  release_mecanism();
 8002112:	f000 feed 	bl	8002ef0 <release_mecanism>
		  flag_bouton_servo=2;
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <Startservo+0x8c>)
 8002118:	2202      	movs	r2, #2
 800211a:	601a      	str	r2, [r3, #0]
		  flag_servo_started=1;
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <Startservo+0x88>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
	  }
	  if(flag_bouton_servo==0){
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <Startservo+0x8c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d107      	bne.n	800213a <Startservo+0x4a>
		  lock_mecanism();
 800212a:	f000 fef1 	bl	8002f10 <lock_mecanism>
		  flag_bouton_servo=2;
 800212e:	4b13      	ldr	r3, [pc, #76]	@ (800217c <Startservo+0x8c>)
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
		  flag_servo_started=1;
 8002134:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <Startservo+0x88>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
	  }

	  if((flag_drop==1) && (flag_calib==1)){
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <Startservo+0x90>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d115      	bne.n	800216e <Startservo+0x7e>
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <Startservo+0x94>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d111      	bne.n	800216e <Startservo+0x7e>
		  if(hauteur_servo<=60.0){
 800214a:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <Startservo+0x98>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800218c <Startservo+0x9c>
 8002154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d807      	bhi.n	800216e <Startservo+0x7e>
			  release_mecanism();
 800215e:	f000 fec7 	bl	8002ef0 <release_mecanism>
			  flag_separation=1;
 8002162:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <Startservo+0xa0>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <Startservo+0x88>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]


		  }
	  }

    osDelay(200);
 800216e:	20c8      	movs	r0, #200	@ 0xc8
 8002170:	f00f fa65 	bl	801163e <osDelay>
	  if(flag_servo_started==1){
 8002174:	e7c0      	b.n	80020f8 <Startservo+0x8>
 8002176:	bf00      	nop
 8002178:	20000e34 	.word	0x20000e34
 800217c:	20000e30 	.word	0x20000e30
 8002180:	20000e24 	.word	0x20000e24
 8002184:	20000e2c 	.word	0x20000e2c
 8002188:	20000e40 	.word	0x20000e40
 800218c:	42700000 	.word	0x42700000
 8002190:	20000e28 	.word	0x20000e28

08002194 <Startdistancecalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startdistancecalc */
void Startdistancecalc(void const * argument)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startdistancecalc */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_calib==1){
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <Startdistancecalc+0x6c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d129      	bne.n	80021f8 <Startdistancecalc+0x64>

		  if(GNSSData.fixType>=3){
 80021a4:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <Startdistancecalc+0x70>)
 80021a6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d924      	bls.n	80021f8 <Startdistancecalc+0x64>
#ifdef PARTIE_BAS
			  distance_entre_module=distancecalc(GNSSData.fLat,TOPData.latitude, GNSSData.fLon,TOPData.longitude,GNSSData.fhMSL,TOPData.hMSL);
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <Startdistancecalc+0x70>)
 80021b0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80021b4:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <Startdistancecalc+0x74>)
 80021b6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <Startdistancecalc+0x70>)
 80021bc:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <Startdistancecalc+0x74>)
 80021c2:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 80021c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <Startdistancecalc+0x70>)
 80021c8:	edd3 5a29 	vldr	s11, [r3, #164]	@ 0xa4
 80021cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <Startdistancecalc+0x74>)
 80021ce:	ed93 5a14 	vldr	s10, [r3, #80]	@ 0x50
 80021d2:	eef0 2a45 	vmov.f32	s5, s10
 80021d6:	eeb0 2a65 	vmov.f32	s4, s11
 80021da:	eef0 1a46 	vmov.f32	s3, s12
 80021de:	eeb0 1a66 	vmov.f32	s2, s13
 80021e2:	eef0 0a47 	vmov.f32	s1, s14
 80021e6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ea:	f7ff fad5 	bl	8001798 <distancecalc>
 80021ee:	eef0 7a40 	vmov.f32	s15, s0
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <Startdistancecalc+0x78>)
 80021f4:	edc3 7a00 	vstr	s15, [r3]





    osDelay(100);
 80021f8:	2064      	movs	r0, #100	@ 0x64
 80021fa:	f00f fa20 	bl	801163e <osDelay>
	  if(flag_calib==1){
 80021fe:	e7cd      	b.n	800219c <Startdistancecalc+0x8>
 8002200:	20000e2c 	.word	0x20000e2c
 8002204:	20000c18 	.word	0x20000c18
 8002208:	20000b20 	.word	0x20000b20
 800220c:	20000308 	.word	0x20000308

08002210 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(trameready==1){
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <startTarvosDecode+0x3c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d110      	bne.n	8002242 <startTarvosDecode+0x32>

		  switch(tarvos_DATA[3]){
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <startTarvosDecode+0x40>)
 8002222:	78db      	ldrb	r3, [r3, #3]
 8002224:	2b15      	cmp	r3, #21
 8002226:	d104      	bne.n	8002232 <startTarvosDecode+0x22>
#ifdef PARTIE_BAS
		  case TOP_ADDR:
			  decode_payload(&TOPData,(uint8_t *) tarvos_DATA);
 8002228:	4909      	ldr	r1, [pc, #36]	@ (8002250 <startTarvosDecode+0x40>)
 800222a:	480a      	ldr	r0, [pc, #40]	@ (8002254 <startTarvosDecode+0x44>)
 800222c:	f001 ffe0 	bl	80041f0 <decode_payload>
			  break;
 8002230:	e004      	b.n	800223c <startTarvosDecode+0x2c>
#endif
		  default:
			  decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 8002232:	4907      	ldr	r1, [pc, #28]	@ (8002250 <startTarvosDecode+0x40>)
 8002234:	4808      	ldr	r0, [pc, #32]	@ (8002258 <startTarvosDecode+0x48>)
 8002236:	f001 ffdb 	bl	80041f0 <decode_payload>

			  break;
 800223a:	bf00      	nop
		  }
		  trameready=0;
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <startTarvosDecode+0x3c>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
	  }

    osDelay(100);
 8002242:	2064      	movs	r0, #100	@ 0x64
 8002244:	f00f f9fb 	bl	801163e <osDelay>
	  if(trameready==1){
 8002248:	e7e6      	b.n	8002218 <startTarvosDecode+0x8>
 800224a:	bf00      	nop
 800224c:	20000e4c 	.word	0x20000e4c
 8002250:	20000474 	.word	0x20000474
 8002254:	20000b20 	.word	0x20000b20
 8002258:	20000b9c 	.word	0x20000b9c

0800225c <bmp581_init_precise_normal>:
uint8_t odrcheck=0;
double P0=101325.0;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af04      	add	r7, sp, #16
 8002262:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8002264:	237b      	movs	r3, #123	@ 0x7b
 8002266:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 8002268:	2369      	movs	r3, #105	@ 0x69
 800226a:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 800226c:	232b      	movs	r3, #43	@ 0x2b
 800226e:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 8002270:	2312      	movs	r3, #18
 8002272:	723b      	strb	r3, [r7, #8]
	int check=0;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8002278:	2364      	movs	r3, #100	@ 0x64
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2301      	movs	r3, #1
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f107 030b 	add.w	r3, r7, #11
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	2236      	movs	r2, #54	@ 0x36
 800228a:	218e      	movs	r1, #142	@ 0x8e
 800228c:	482a      	ldr	r0, [pc, #168]	@ (8002338 <bmp581_init_precise_normal+0xdc>)
 800228e:	f005 fda3 	bl	8007dd8 <HAL_I2C_Mem_Write>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <bmp581_init_precise_normal+0x40>
			check=1;
 8002298:	2301      	movs	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 800229c:	2364      	movs	r3, #100	@ 0x64
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	2301      	movs	r3, #1
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	f107 030a 	add.w	r3, r7, #10
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2301      	movs	r3, #1
 80022ac:	2237      	movs	r2, #55	@ 0x37
 80022ae:	218e      	movs	r1, #142	@ 0x8e
 80022b0:	4821      	ldr	r0, [pc, #132]	@ (8002338 <bmp581_init_precise_normal+0xdc>)
 80022b2:	f005 fd91 	bl	8007dd8 <HAL_I2C_Mem_Write>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <bmp581_init_precise_normal+0x64>
					check=1;
 80022bc:	2301      	movs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 80022c0:	2364      	movs	r3, #100	@ 0x64
 80022c2:	9302      	str	r3, [sp, #8]
 80022c4:	2301      	movs	r3, #1
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	f107 0309 	add.w	r3, r7, #9
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2301      	movs	r3, #1
 80022d0:	2230      	movs	r2, #48	@ 0x30
 80022d2:	218e      	movs	r1, #142	@ 0x8e
 80022d4:	4818      	ldr	r0, [pc, #96]	@ (8002338 <bmp581_init_precise_normal+0xdc>)
 80022d6:	f005 fd7f 	bl	8007dd8 <HAL_I2C_Mem_Write>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <bmp581_init_precise_normal+0x88>
				check=1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 80022e4:	2364      	movs	r3, #100	@ 0x64
 80022e6:	9302      	str	r3, [sp, #8]
 80022e8:	2301      	movs	r3, #1
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	2230      	movs	r2, #48	@ 0x30
 80022f6:	218e      	movs	r1, #142	@ 0x8e
 80022f8:	480f      	ldr	r0, [pc, #60]	@ (8002338 <bmp581_init_precise_normal+0xdc>)
 80022fa:	f005 fd6d 	bl	8007dd8 <HAL_I2C_Mem_Write>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <bmp581_init_precise_normal+0xac>
					check=1;
 8002304:	2301      	movs	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 8002308:	2364      	movs	r3, #100	@ 0x64
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2301      	movs	r3, #1
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <bmp581_init_precise_normal+0xe0>)
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2301      	movs	r3, #1
 8002316:	2238      	movs	r2, #56	@ 0x38
 8002318:	218f      	movs	r1, #143	@ 0x8f
 800231a:	4807      	ldr	r0, [pc, #28]	@ (8002338 <bmp581_init_precise_normal+0xdc>)
 800231c:	f005 fe70 	bl	8008000 <HAL_I2C_Mem_Read>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <bmp581_init_precise_normal+0xce>
					check=1;
 8002326:	2301      	movs	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
				}


	return check;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	b2db      	uxtb	r3, r3

}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000034c 	.word	0x2000034c
 800233c:	20000348 	.word	0x20000348

08002340 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	@ 0x30
 8002344:	af04      	add	r7, sp, #16
 8002346:	6078      	str	r0, [r7, #4]
		int check=0;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
		int32_t intbufferpres=0;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
//			check=1;
//		}
//		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
//			check=1;
//		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 8002354:	2364      	movs	r3, #100	@ 0x64
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	2306      	movs	r3, #6
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	221d      	movs	r2, #29
 8002366:	218f      	movs	r1, #143	@ 0x8f
 8002368:	483d      	ldr	r0, [pc, #244]	@ (8002460 <bmp581_read_precise_normal+0x120>)
 800236a:	f005 fe49 	bl	8008000 <HAL_I2C_Mem_Read>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <bmp581_read_precise_normal+0x38>
					check=1;
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
				}


		if(check==0){
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d165      	bne.n	800244a <bmp581_read_precise_normal+0x10a>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 800237e:	7bbb      	ldrb	r3, [r7, #14]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	7b7b      	ldrb	r3, [r7, #13]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	4313      	orrs	r3, r2
 8002388:	7b3a      	ldrb	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 800238e:	7c7b      	ldrb	r3, [r7, #17]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	7c3b      	ldrb	r3, [r7, #16]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4313      	orrs	r3, r2
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
		bmptemp=(double)intbuffertemp/65536.0;
 800239e:	69b8      	ldr	r0, [r7, #24]
 80023a0:	f7fe f8e8 	bl	8000574 <__aeabi_i2d>
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002464 <bmp581_read_precise_normal+0x124>)
 80023aa:	f7fe fa77 	bl	800089c <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	492d      	ldr	r1, [pc, #180]	@ (8002468 <bmp581_read_precise_normal+0x128>)
 80023b4:	e9c1 2300 	strd	r2, r3, [r1]
		bmppress=(double) intbufferpres/64.0;
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f7fe f8db 	bl	8000574 <__aeabi_i2d>
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	4b2a      	ldr	r3, [pc, #168]	@ (800246c <bmp581_read_precise_normal+0x12c>)
 80023c4:	f7fe fa6a 	bl	800089c <__aeabi_ddiv>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4928      	ldr	r1, [pc, #160]	@ (8002470 <bmp581_read_precise_normal+0x130>)
 80023ce:	e9c1 2300 	strd	r2, r3, [r1]
		bmpalt=(double) ((8.314*298.15)/(9.80665*0.028964))*log(P0/(bmppress));
 80023d2:	4b28      	ldr	r3, [pc, #160]	@ (8002474 <bmp581_read_precise_normal+0x134>)
 80023d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <bmp581_read_precise_normal+0x130>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe fa5d 	bl	800089c <__aeabi_ddiv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	ec43 2b17 	vmov	d7, r2, r3
 80023ea:	eeb0 0a47 	vmov.f32	s0, s14
 80023ee:	eef0 0a67 	vmov.f32	s1, s15
 80023f2:	f016 f8f5 	bl	80185e0 <log>
 80023f6:	ec51 0b10 	vmov	r0, r1, d0
 80023fa:	a317      	add	r3, pc, #92	@ (adr r3, 8002458 <bmp581_read_precise_normal+0x118>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fe f922 	bl	8000648 <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	491b      	ldr	r1, [pc, #108]	@ (8002478 <bmp581_read_precise_normal+0x138>)
 800240a:	e9c1 2300 	strd	r2, r3, [r1]
		bmp581->press=(float) bmppress;
 800240e:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <bmp581_read_precise_normal+0x130>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fc0e 	bl	8000c38 <__aeabi_d2f>
 800241c:	4602      	mov	r2, r0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60da      	str	r2, [r3, #12]
		bmp581->altitude=(float)bmpalt;
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <bmp581_read_precise_normal+0x138>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f7fe fc04 	bl	8000c38 <__aeabi_d2f>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	615a      	str	r2, [r3, #20]
		bmp581->temps=(float)bmptemp;
 8002436:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <bmp581_read_precise_normal+0x128>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fbfa 	bl	8000c38 <__aeabi_d2f>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	611a      	str	r2, [r3, #16]

		}

		return check;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	b2db      	uxtb	r3, r3
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	a7b85a1b 	.word	0xa7b85a1b
 800245c:	40c10b81 	.word	0x40c10b81
 8002460:	2000034c 	.word	0x2000034c
 8002464:	40f00000 	.word	0x40f00000
 8002468:	20000330 	.word	0x20000330
 800246c:	40500000 	.word	0x40500000
 8002470:	20000338 	.word	0x20000338
 8002474:	20000008 	.word	0x20000008
 8002478:	20000340 	.word	0x20000340

0800247c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002482:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <MX_DMA_Init+0x80>)
 8002484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002486:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <MX_DMA_Init+0x80>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6493      	str	r3, [r2, #72]	@ 0x48
 800248e:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <MX_DMA_Init+0x80>)
 8002490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800249a:	4b18      	ldr	r3, [pc, #96]	@ (80024fc <MX_DMA_Init+0x80>)
 800249c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249e:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <MX_DMA_Init+0x80>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <MX_DMA_Init+0x80>)
 80024a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2105      	movs	r1, #5
 80024b6:	200b      	movs	r0, #11
 80024b8:	f004 fea8 	bl	800720c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024bc:	200b      	movs	r0, #11
 80024be:	f004 febf 	bl	8007240 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2105      	movs	r1, #5
 80024c6:	200c      	movs	r0, #12
 80024c8:	f004 fea0 	bl	800720c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80024cc:	200c      	movs	r0, #12
 80024ce:	f004 feb7 	bl	8007240 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2105      	movs	r1, #5
 80024d6:	200d      	movs	r0, #13
 80024d8:	f004 fe98 	bl	800720c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80024dc:	200d      	movs	r0, #13
 80024de:	f004 feaf 	bl	8007240 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2105      	movs	r1, #5
 80024e6:	200f      	movs	r0, #15
 80024e8:	f004 fe90 	bl	800720c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80024ec:	200f      	movs	r0, #15
 80024ee:	f004 fea7 	bl	8007240 <HAL_NVIC_EnableIRQ>

}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000

08002500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	@ 0x28
 8002504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002516:	4b49      	ldr	r3, [pc, #292]	@ (800263c <MX_GPIO_Init+0x13c>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	4a48      	ldr	r2, [pc, #288]	@ (800263c <MX_GPIO_Init+0x13c>)
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002522:	4b46      	ldr	r3, [pc, #280]	@ (800263c <MX_GPIO_Init+0x13c>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b43      	ldr	r3, [pc, #268]	@ (800263c <MX_GPIO_Init+0x13c>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002532:	4a42      	ldr	r2, [pc, #264]	@ (800263c <MX_GPIO_Init+0x13c>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800253a:	4b40      	ldr	r3, [pc, #256]	@ (800263c <MX_GPIO_Init+0x13c>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002546:	4b3d      	ldr	r3, [pc, #244]	@ (800263c <MX_GPIO_Init+0x13c>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	4a3c      	ldr	r2, [pc, #240]	@ (800263c <MX_GPIO_Init+0x13c>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002552:	4b3a      	ldr	r3, [pc, #232]	@ (800263c <MX_GPIO_Init+0x13c>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	4b37      	ldr	r3, [pc, #220]	@ (800263c <MX_GPIO_Init+0x13c>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	4a36      	ldr	r2, [pc, #216]	@ (800263c <MX_GPIO_Init+0x13c>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800256a:	4b34      	ldr	r3, [pc, #208]	@ (800263c <MX_GPIO_Init+0x13c>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	2110      	movs	r1, #16
 800257a:	4831      	ldr	r0, [pc, #196]	@ (8002640 <MX_GPIO_Init+0x140>)
 800257c:	f005 fb46 	bl	8007c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002586:	482f      	ldr	r0, [pc, #188]	@ (8002644 <MX_GPIO_Init+0x144>)
 8002588:	f005 fb40 	bl	8007c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800258c:	2310      	movs	r3, #16
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002590:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a4:	f005 f998 	bl	80078d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025a8:	2310      	movs	r3, #16
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4820      	ldr	r0, [pc, #128]	@ (8002640 <MX_GPIO_Init+0x140>)
 80025c0:	f005 f98a 	bl	80078d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025c4:	2302      	movs	r3, #2
 80025c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025c8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80025cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	481a      	ldr	r0, [pc, #104]	@ (8002644 <MX_GPIO_Init+0x144>)
 80025da:	f005 f97d 	bl	80078d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025de:	2304      	movs	r3, #4
 80025e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4814      	ldr	r0, [pc, #80]	@ (8002644 <MX_GPIO_Init+0x144>)
 80025f2:	f005 f971 	bl	80078d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 80025f6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	480d      	ldr	r0, [pc, #52]	@ (8002644 <MX_GPIO_Init+0x144>)
 8002610:	f005 f962 	bl	80078d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2105      	movs	r1, #5
 8002618:	2007      	movs	r0, #7
 800261a:	f004 fdf7 	bl	800720c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800261e:	2007      	movs	r0, #7
 8002620:	f004 fe0e 	bl	8007240 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2105      	movs	r1, #5
 8002628:	200a      	movs	r0, #10
 800262a:	f004 fdef 	bl	800720c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800262e:	200a      	movs	r0, #10
 8002630:	f004 fe06 	bl	8007240 <HAL_NVIC_EnableIRQ>

}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	@ 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	48000800 	.word	0x48000800
 8002644:	48000400 	.word	0x48000400

08002648 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800264c:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <MX_I2C1_Init+0x74>)
 800264e:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <MX_I2C1_Init+0x78>)
 8002650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002654:	4a1b      	ldr	r2, [pc, #108]	@ (80026c4 <MX_I2C1_Init+0x7c>)
 8002656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002658:	4b18      	ldr	r3, [pc, #96]	@ (80026bc <MX_I2C1_Init+0x74>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800265e:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002660:	2201      	movs	r2, #1
 8002662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002664:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <MX_I2C1_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002676:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <MX_I2C1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002682:	480e      	ldr	r0, [pc, #56]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002684:	f005 fb0c 	bl	8007ca0 <HAL_I2C_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800268e:	f000 fc29 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002692:	2100      	movs	r1, #0
 8002694:	4809      	ldr	r0, [pc, #36]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002696:	f006 f88f 	bl	80087b8 <HAL_I2CEx_ConfigAnalogFilter>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026a0:	f000 fc20 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026a4:	2100      	movs	r1, #0
 80026a6:	4805      	ldr	r0, [pc, #20]	@ (80026bc <MX_I2C1_Init+0x74>)
 80026a8:	f006 f8d1 	bl	800884e <HAL_I2CEx_ConfigDigitalFilter>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026b2:	f000 fc17 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000034c 	.word	0x2000034c
 80026c0:	40005400 	.word	0x40005400
 80026c4:	20b182be 	.word	0x20b182be

080026c8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <MX_I2C3_Init+0x74>)
 80026ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002740 <MX_I2C3_Init+0x78>)
 80026d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B182BE;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <MX_I2C3_Init+0x74>)
 80026d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002744 <MX_I2C3_Init+0x7c>)
 80026d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80026d8:	4b18      	ldr	r3, [pc, #96]	@ (800273c <MX_I2C3_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026de:	4b17      	ldr	r3, [pc, #92]	@ (800273c <MX_I2C3_Init+0x74>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e4:	4b15      	ldr	r3, [pc, #84]	@ (800273c <MX_I2C3_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026ea:	4b14      	ldr	r3, [pc, #80]	@ (800273c <MX_I2C3_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026f0:	4b12      	ldr	r3, [pc, #72]	@ (800273c <MX_I2C3_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f6:	4b11      	ldr	r3, [pc, #68]	@ (800273c <MX_I2C3_Init+0x74>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <MX_I2C3_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002702:	480e      	ldr	r0, [pc, #56]	@ (800273c <MX_I2C3_Init+0x74>)
 8002704:	f005 facc 	bl	8007ca0 <HAL_I2C_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800270e:	f000 fbe9 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002712:	2100      	movs	r1, #0
 8002714:	4809      	ldr	r0, [pc, #36]	@ (800273c <MX_I2C3_Init+0x74>)
 8002716:	f006 f84f 	bl	80087b8 <HAL_I2CEx_ConfigAnalogFilter>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002720:	f000 fbe0 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002724:	2100      	movs	r1, #0
 8002726:	4805      	ldr	r0, [pc, #20]	@ (800273c <MX_I2C3_Init+0x74>)
 8002728:	f006 f891 	bl	800884e <HAL_I2CEx_ConfigDigitalFilter>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002732:	f000 fbd7 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200003a0 	.word	0x200003a0
 8002740:	40007800 	.word	0x40007800
 8002744:	20b182be 	.word	0x20b182be

08002748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b09e      	sub	sp, #120	@ 0x78
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	2244      	movs	r2, #68	@ 0x44
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f012 fbf1 	bl	8014f50 <memset>
  if(i2cHandle->Instance==I2C1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a5c      	ldr	r2, [pc, #368]	@ (80028e4 <HAL_I2C_MspInit+0x19c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d155      	bne.n	8002824 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002778:	2340      	movs	r3, #64	@ 0x40
 800277a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800277c:	2300      	movs	r3, #0
 800277e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002780:	f107 0320 	add.w	r3, r7, #32
 8002784:	4618      	mov	r0, r3
 8002786:	f006 febf 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002790:	f000 fba8 	bl	8002ee4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b54      	ldr	r3, [pc, #336]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 8002796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002798:	4a53      	ldr	r2, [pc, #332]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027a0:	4b51      	ldr	r3, [pc, #324]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	4b4e      	ldr	r3, [pc, #312]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 80027ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b0:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b8:	4b4b      	ldr	r3, [pc, #300]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 80027ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ca:	2312      	movs	r3, #18
 80027cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027d6:	2304      	movs	r3, #4
 80027d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027de:	4619      	mov	r1, r3
 80027e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e4:	f005 f878 	bl	80078d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ee:	2312      	movs	r3, #18
 80027f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027fa:	2304      	movs	r3, #4
 80027fc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002802:	4619      	mov	r1, r3
 8002804:	4839      	ldr	r0, [pc, #228]	@ (80028ec <HAL_I2C_MspInit+0x1a4>)
 8002806:	f005 f867 	bl	80078d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280e:	4a36      	ldr	r2, [pc, #216]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 8002810:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002814:	6593      	str	r3, [r2, #88]	@ 0x58
 8002816:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002822:	e05a      	b.n	80028da <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a31      	ldr	r2, [pc, #196]	@ (80028f0 <HAL_I2C_MspInit+0x1a8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d155      	bne.n	80028da <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800282e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002832:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002834:	2300      	movs	r3, #0
 8002836:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002838:	f107 0320 	add.w	r3, r7, #32
 800283c:	4618      	mov	r0, r3
 800283e:	f006 fe63 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8002848:	f000 fb4c 	bl	8002ee4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	4b26      	ldr	r3, [pc, #152]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 800284e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002850:	4a25      	ldr	r2, [pc, #148]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002858:	4b23      	ldr	r3, [pc, #140]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 800285a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002864:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 8002866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002868:	4a1f      	ldr	r2, [pc, #124]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 800286a:	f043 0304 	orr.w	r3, r3, #4
 800286e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002870:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 8002872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800287c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002880:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002882:	2312      	movs	r3, #18
 8002884:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800288e:	2302      	movs	r3, #2
 8002890:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002896:	4619      	mov	r1, r3
 8002898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800289c:	f005 f81c 	bl	80078d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a6:	2312      	movs	r3, #18
 80028a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80028b2:	2308      	movs	r3, #8
 80028b4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028ba:	4619      	mov	r1, r3
 80028bc:	480d      	ldr	r0, [pc, #52]	@ (80028f4 <HAL_I2C_MspInit+0x1ac>)
 80028be:	f005 f80b 	bl	80078d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c6:	4a08      	ldr	r2, [pc, #32]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 80028c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_I2C_MspInit+0x1a0>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
}
 80028da:	bf00      	nop
 80028dc:	3778      	adds	r7, #120	@ 0x78
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40005400 	.word	0x40005400
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48000400 	.word	0x48000400
 80028f0:	40007800 	.word	0x40007800
 80028f4:	48000800 	.word	0x48000800

080028f8 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 80028fe:	480d      	ldr	r0, [pc, #52]	@ (8002934 <LED_Init+0x3c>)
 8002900:	f007 fce2 	bl	800a2c8 <HAL_TIM_PWM_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002908:	2300      	movs	r3, #0
 800290a:	80fb      	strh	r3, [r7, #6]
 800290c:	e006      	b.n	800291c <LED_Init+0x24>
		LEDDMABUF[i]=0;
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	4a09      	ldr	r2, [pc, #36]	@ (8002938 <LED_Init+0x40>)
 8002912:	2100      	movs	r1, #0
 8002914:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	3301      	adds	r3, #1
 800291a:	80fb      	strh	r3, [r7, #6]
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002922:	d9f4      	bls.n	800290e <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <LED_Init+0x44>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]


	return halStatus;
 800292a:	797b      	ldrb	r3, [r7, #5]




}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20001358 	.word	0x20001358
 8002938:	20000ce0 	.word	0x20000ce0
 800293c:	20000e19 	.word	0x20000e19

08002940 <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b08b      	sub	sp, #44	@ 0x2c
 8002944:	af00      	add	r7, sp, #0
 8002946:	4604      	mov	r4, r0
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4623      	mov	r3, r4
 8002950:	71fb      	strb	r3, [r7, #7]
 8002952:	4603      	mov	r3, r0
 8002954:	71bb      	strb	r3, [r7, #6]
 8002956:	460b      	mov	r3, r1
 8002958:	717b      	strb	r3, [r7, #5]
 800295a:	4613      	mov	r3, r2
 800295c:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 800295e:	2300      	movs	r3, #0
 8002960:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 800296a:	797b      	ldrb	r3, [r7, #5]
 800296c:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 800296e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002972:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8002974:	793b      	ldrb	r3, [r7, #4]
 8002976:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8002978:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800297c:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	e007      	b.n	8002994 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8002984:	4a35      	ldr	r2, [pc, #212]	@ (8002a5c <LED_Setcolour+0x11c>)
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	4413      	add	r3, r2
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	3301      	adds	r3, #1
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800299a:	ddf3      	ble.n	8002984 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 800299c:	2300      	movs	r3, #0
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e032      	b.n	8002a08 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 80029a2:	2300      	movs	r3, #0
 80029a4:	77bb      	strb	r3, [r7, #30]
 80029a6:	e029      	b.n	80029fc <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e020      	b.n	80029f0 <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 80029ae:	7ffa      	ldrb	r2, [r7, #31]
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	441a      	add	r2, r3
 80029b6:	7fbb      	ldrb	r3, [r7, #30]
 80029b8:	4413      	add	r3, r2
 80029ba:	3328      	adds	r3, #40	@ 0x28
 80029bc:	443b      	add	r3, r7
 80029be:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80029c2:	461a      	mov	r2, r3
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa42 f303 	asr.w	r3, r2, r3
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 80029d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80029d4:	4a21      	ldr	r2, [pc, #132]	@ (8002a5c <LED_Setcolour+0x11c>)
 80029d6:	215a      	movs	r1, #90	@ 0x5a
 80029d8:	54d1      	strb	r1, [r2, r3]
 80029da:	e003      	b.n	80029e4 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 80029dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80029de:	4a1f      	ldr	r2, [pc, #124]	@ (8002a5c <LED_Setcolour+0x11c>)
 80029e0:	211e      	movs	r1, #30
 80029e2:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 80029e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80029e6:	3301      	adds	r3, #1
 80029e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b07      	cmp	r3, #7
 80029f4:	dddb      	ble.n	80029ae <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 80029f6:	7fbb      	ldrb	r3, [r7, #30]
 80029f8:	3301      	adds	r3, #1
 80029fa:	77bb      	strb	r3, [r7, #30]
 80029fc:	7fbb      	ldrb	r3, [r7, #30]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d9d2      	bls.n	80029a8 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8002a02:	7ffb      	ldrb	r3, [r7, #31]
 8002a04:	3301      	adds	r3, #1
 8002a06:	77fb      	strb	r3, [r7, #31]
 8002a08:	7ffb      	ldrb	r3, [r7, #31]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d9c9      	bls.n	80029a2 <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e009      	b.n	8002a28 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8002a14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a16:	4a11      	ldr	r2, [pc, #68]	@ (8002a5c <LED_Setcolour+0x11c>)
 8002a18:	2100      	movs	r1, #0
 8002a1a:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8002a1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a2e:	dbf1      	blt.n	8002a14 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	e009      	b.n	8002a4a <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8002a36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a38:	4a08      	ldr	r2, [pc, #32]	@ (8002a5c <LED_Setcolour+0x11c>)
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8002a3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a40:	3301      	adds	r3, #1
 8002a42:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	3301      	adds	r3, #1
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	ddf2      	ble.n	8002a36 <LED_Setcolour+0xf6>
		}

	LED_Update();
 8002a50:	f000 f806 	bl	8002a60 <LED_Update>

}
 8002a54:	bf00      	nop
 8002a56:	372c      	adds	r7, #44	@ 0x2c
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd90      	pop	{r4, r7, pc}
 8002a5c:	20000ce0 	.word	0x20000ce0

08002a60 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8002a66:	f240 1339 	movw	r3, #313	@ 0x139
 8002a6a:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <LED_Update+0x28>)
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	4807      	ldr	r0, [pc, #28]	@ (8002a8c <LED_Update+0x2c>)
 8002a70:	f007 fe22 	bl	800a6b8 <HAL_TIM_PWM_Start_DMA>
 8002a74:	4603      	mov	r3, r0
 8002a76:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8002a78:	2300      	movs	r3, #0
 8002a7a:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]

}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000ce0 	.word	0x20000ce0
 8002a8c:	20001358 	.word	0x20001358

08002a90 <LED_Callback>:



void LED_Callback(){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8002a94:	2104      	movs	r1, #4
 8002a96:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <LED_Callback+0x18>)
 8002a98:	f008 f826 	bl	800aae8 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	@ (8002aac <LED_Callback+0x1c>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]


}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20001358 	.word	0x20001358
 8002aac:	20000e19 	.word	0x20000e19

08002ab0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d133      	bne.n	8002b28 <HAL_GPIO_EXTI_Callback+0x78>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac6:	f005 f889 	bl	8007bdc <HAL_GPIO_ReadPin>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d109      	bne.n	8002ae4 <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x80>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 8002ad6:	f002 fdfd 	bl	80056d4 <HAL_GetTick>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0x84>)
 8002ae0:	601a      	str	r2, [r3, #0]


		}
#endif

	}
 8002ae2:	e021      	b.n	8002b28 <HAL_GPIO_EXTI_Callback+0x78>
						gros_btn_time=(HAL_GetTick()-tbtn1);
 8002ae4:	f002 fdf6 	bl	80056d4 <HAL_GetTick>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a12      	ldr	r2, [pc, #72]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0x84>)
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x80>)
 8002af4:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=400 && gros_btn_time<=2000){
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x80>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
					if(gros_btn_time>=2500 && gros_btn_time<=3500){
 8002afe:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002b06:	4293      	cmp	r3, r2
					if(gros_btn_time>=4000){
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002b10:	db07      	blt.n	8002b22 <HAL_GPIO_EXTI_Callback+0x72>
											HAL_GPIO_TogglePin(PWEN_GPIO_Port,PWEN_Pin);
 8002b12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b16:	4808      	ldr	r0, [pc, #32]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0x88>)
 8002b18:	f005 f890 	bl	8007c3c <HAL_GPIO_TogglePin>
											gros_btn_time=0;
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
					gros_btn_time=0;
 8002b22:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
	}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000e1c 	.word	0x20000e1c
 8002b34:	20000b08 	.word	0x20000b08
 8002b38:	48000400 	.word	0x48000400

08002b3c <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8002b44:	f7ff ffa4 	bl	8002a90 <LED_Callback>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b56:	f002 fd92 	bl	800567e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b5a:	f000 f967 	bl	8002e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b5e:	f7ff fccf 	bl	8002500 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b62:	f7ff fc8b 	bl	800247c <MX_DMA_Init>
  MX_ADC1_Init();
 8002b66:	f7fe fee5 	bl	8001934 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b6a:	f7ff fd6d 	bl	8002648 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002b6e:	f7ff fdab 	bl	80026c8 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002b72:	f001 fe2b 	bl	80047cc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002b76:	f001 fe73 	bl	8004860 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002b7a:	f001 fc85 	bl	8004488 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002b7e:	f001 fc0d 	bl	800439c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002b82:	f000 f9df 	bl	8002f44 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002b86:	f00b fe7f 	bl	800e888 <MX_FATFS_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <main+0x44>
    Error_Handler();
 8002b90:	f000 f9a8 	bl	8002ee4 <Error_Handler>
  }
  MX_TIM4_Init();
 8002b94:	f001 fcf0 	bl	8004578 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8002b98:	f000 fa8e 	bl	80030b8 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f000 faf5 	bl	800318c <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 8002ba2:	2128      	movs	r1, #40	@ 0x28
 8002ba4:	2020      	movs	r0, #32
 8002ba6:	f000 fc33 	bl	8003410 <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 8002baa:	4a87      	ldr	r2, [pc, #540]	@ (8002dc8 <main+0x278>)
 8002bac:	2301      	movs	r3, #1
 8002bae:	ca06      	ldmia	r2, {r1, r2}
 8002bb0:	4886      	ldr	r0, [pc, #536]	@ (8002dcc <main+0x27c>)
 8002bb2:	f000 fc07 	bl	80033c4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002bb6:	f000 fb01 	bl	80031bc <ssd1306_UpdateScreen>

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bc0:	4883      	ldr	r0, [pc, #524]	@ (8002dd0 <main+0x280>)
 8002bc2:	f005 f823 	bl	8007c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002bcc:	4880      	ldr	r0, [pc, #512]	@ (8002dd0 <main+0x280>)
 8002bce:	f005 f81d 	bl	8007c0c <HAL_GPIO_WritePin>

#endif



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	497f      	ldr	r1, [pc, #508]	@ (8002dd4 <main+0x284>)
 8002bd6:	4880      	ldr	r0, [pc, #512]	@ (8002dd8 <main+0x288>)
 8002bd8:	f003 f96e 	bl	8005eb8 <HAL_ADC_Start_DMA>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d015      	beq.n	8002c0e <main+0xbe>
	  ssd1306_SetCursor(32, 40);
 8002be2:	2128      	movs	r1, #40	@ 0x28
 8002be4:	2020      	movs	r0, #32
 8002be6:	f000 fc13 	bl	8003410 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002bea:	2000      	movs	r0, #0
 8002bec:	f000 face 	bl	800318c <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 8002bf0:	4a75      	ldr	r2, [pc, #468]	@ (8002dc8 <main+0x278>)
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	ca06      	ldmia	r2, {r1, r2}
 8002bf6:	4879      	ldr	r0, [pc, #484]	@ (8002ddc <main+0x28c>)
 8002bf8:	f000 fbe4 	bl	80033c4 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002bfc:	f000 fade 	bl	80031bc <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002c00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c04:	f002 fd72 	bl	80056ec <HAL_Delay>
 	 pbmseeker=1;
 8002c08:	4b75      	ldr	r3, [pc, #468]	@ (8002de0 <main+0x290>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 8002c0e:	2064      	movs	r0, #100	@ 0x64
 8002c10:	f002 fd6c 	bl	80056ec <HAL_Delay>
   HAL_UART_Abort(&huart1);
 8002c14:	4873      	ldr	r0, [pc, #460]	@ (8002de4 <main+0x294>)
 8002c16:	f009 fb53 	bl	800c2c0 <HAL_UART_Abort>
   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)workingbuffer, 100)!=HAL_OK){
 8002c1a:	2264      	movs	r2, #100	@ 0x64
 8002c1c:	4972      	ldr	r1, [pc, #456]	@ (8002de8 <main+0x298>)
 8002c1e:	4871      	ldr	r0, [pc, #452]	@ (8002de4 <main+0x294>)
 8002c20:	f009 fb02 	bl	800c228 <HAL_UART_Receive_DMA>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d015      	beq.n	8002c56 <main+0x106>
	   ssd1306_SetCursor(32, 40);
 8002c2a:	2128      	movs	r1, #40	@ 0x28
 8002c2c:	2020      	movs	r0, #32
 8002c2e:	f000 fbef 	bl	8003410 <ssd1306_SetCursor>
  	  ssd1306_Fill(Black);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 faaa 	bl	800318c <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 8002c38:	4a63      	ldr	r2, [pc, #396]	@ (8002dc8 <main+0x278>)
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	ca06      	ldmia	r2, {r1, r2}
 8002c3e:	486b      	ldr	r0, [pc, #428]	@ (8002dec <main+0x29c>)
 8002c40:	f000 fbc0 	bl	80033c4 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002c44:	f000 faba 	bl	80031bc <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 8002c48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c4c:	f002 fd4e 	bl	80056ec <HAL_Delay>
  	pbmseeker=1;
 8002c50:	4b63      	ldr	r3, [pc, #396]	@ (8002de0 <main+0x290>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 8002c56:	f7ff fe4f 	bl	80028f8 <LED_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <main+0x13c>
	  ssd1306_SetCursor(32, 40);
 8002c60:	2128      	movs	r1, #40	@ 0x28
 8002c62:	2020      	movs	r0, #32
 8002c64:	f000 fbd4 	bl	8003410 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f000 fa8f 	bl	800318c <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 8002c6e:	4a56      	ldr	r2, [pc, #344]	@ (8002dc8 <main+0x278>)
 8002c70:	2301      	movs	r3, #1
 8002c72:	ca06      	ldmia	r2, {r1, r2}
 8002c74:	485e      	ldr	r0, [pc, #376]	@ (8002df0 <main+0x2a0>)
 8002c76:	f000 fba5 	bl	80033c4 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002c7a:	f000 fa9f 	bl	80031bc <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002c7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c82:	f002 fd33 	bl	80056ec <HAL_Delay>
 	 pbmseeker=1;
 8002c86:	4b56      	ldr	r3, [pc, #344]	@ (8002de0 <main+0x290>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 8002c8c:	f7fe f9f0 	bl	8001070 <Init_HighPerf_Mode_6_axis>



  if(bmp581_init_precise_normal(&myDatabmp581)!=HAL_OK){
 8002c90:	4858      	ldr	r0, [pc, #352]	@ (8002df4 <main+0x2a4>)
 8002c92:	f7ff fae3 	bl	800225c <bmp581_init_precise_normal>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d015      	beq.n	8002cc8 <main+0x178>
	  ssd1306_SetCursor(32, 40);
 8002c9c:	2128      	movs	r1, #40	@ 0x28
 8002c9e:	2020      	movs	r0, #32
 8002ca0:	f000 fbb6 	bl	8003410 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f000 fa71 	bl	800318c <ssd1306_Fill>
 	  ssd1306_WriteString("bmp pbm", Font_7x10, White);
 8002caa:	4a47      	ldr	r2, [pc, #284]	@ (8002dc8 <main+0x278>)
 8002cac:	2301      	movs	r3, #1
 8002cae:	ca06      	ldmia	r2, {r1, r2}
 8002cb0:	4851      	ldr	r0, [pc, #324]	@ (8002df8 <main+0x2a8>)
 8002cb2:	f000 fb87 	bl	80033c4 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002cb6:	f000 fa81 	bl	80031bc <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002cba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cbe:	f002 fd15 	bl	80056ec <HAL_Delay>
 	 pbmseeker=1;
 8002cc2:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <main+0x290>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

   }

  //mon adresse est 1° et on envoit à 2°
#ifdef PARTIE_BAS
  if( INIT_PERM_TARVOS(BOTTOM_ADDR, GROUND_ADDR)!=HAL_OK){
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2016      	movs	r0, #22
 8002ccc:	f001 f87a 	bl	8003dc4 <INIT_PERM_TARVOS>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <main+0x1b2>
	  ssd1306_SetCursor(32, 40);
 8002cd6:	2128      	movs	r1, #40	@ 0x28
 8002cd8:	2020      	movs	r0, #32
 8002cda:	f000 fb99 	bl	8003410 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f000 fa54 	bl	800318c <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 8002ce4:	4a38      	ldr	r2, [pc, #224]	@ (8002dc8 <main+0x278>)
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	ca06      	ldmia	r2, {r1, r2}
 8002cea:	4844      	ldr	r0, [pc, #272]	@ (8002dfc <main+0x2ac>)
 8002cec:	f000 fb6a 	bl	80033c4 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002cf0:	f000 fa64 	bl	80031bc <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002cf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cf8:	f002 fcf8 	bl	80056ec <HAL_Delay>
 	 pbmseeker=1;
 8002cfc:	4b38      	ldr	r3, [pc, #224]	@ (8002de0 <main+0x290>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]


   }
#endif

  HAL_Delay(100);
 8002d02:	2064      	movs	r0, #100	@ 0x64
 8002d04:	f002 fcf2 	bl	80056ec <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8002d08:	483d      	ldr	r0, [pc, #244]	@ (8002e00 <main+0x2b0>)
 8002d0a:	f009 fad9 	bl	800c2c0 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5)!=HAL_OK){
 8002d0e:	2205      	movs	r2, #5
 8002d10:	493c      	ldr	r1, [pc, #240]	@ (8002e04 <main+0x2b4>)
 8002d12:	483b      	ldr	r0, [pc, #236]	@ (8002e00 <main+0x2b0>)
 8002d14:	f009 fa88 	bl	800c228 <HAL_UART_Receive_DMA>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d015      	beq.n	8002d4a <main+0x1fa>
	   ssd1306_SetCursor(32, 40);
 8002d1e:	2128      	movs	r1, #40	@ 0x28
 8002d20:	2020      	movs	r0, #32
 8002d22:	f000 fb75 	bl	8003410 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 fa30 	bl	800318c <ssd1306_Fill>
 	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 8002d2c:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <main+0x278>)
 8002d2e:	2301      	movs	r3, #1
 8002d30:	ca06      	ldmia	r2, {r1, r2}
 8002d32:	4835      	ldr	r0, [pc, #212]	@ (8002e08 <main+0x2b8>)
 8002d34:	f000 fb46 	bl	80033c4 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002d38:	f000 fa40 	bl	80031bc <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d40:	f002 fcd4 	bl	80056ec <HAL_Delay>
 	pbmseeker=1;
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <main+0x290>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 8002d4a:	4830      	ldr	r0, [pc, #192]	@ (8002e0c <main+0x2bc>)
 8002d4c:	f007 fa52 	bl	800a1f4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8002d50:	200a      	movs	r0, #10
 8002d52:	f002 fccb 	bl	80056ec <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 8002d56:	2201      	movs	r2, #1
 8002d58:	492d      	ldr	r1, [pc, #180]	@ (8002e10 <main+0x2c0>)
 8002d5a:	482e      	ldr	r0, [pc, #184]	@ (8002e14 <main+0x2c4>)
 8002d5c:	f00d fb90 	bl	8010480 <f_mount>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <main+0x2c8>)
 8002d66:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 8002d68:	4b2b      	ldr	r3, [pc, #172]	@ (8002e18 <main+0x2c8>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d125      	bne.n	8002dbc <main+0x26c>
  			  fres = f_mkdir("DEMO");
 8002d70:	482a      	ldr	r0, [pc, #168]	@ (8002e1c <main+0x2cc>)
 8002d72:	f00e fa59 	bl	8011228 <f_mkdir>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b27      	ldr	r3, [pc, #156]	@ (8002e18 <main+0x2c8>)
 8002d7c:	701a      	strb	r2, [r3, #0]
  			  BYTE readBuf[30];
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002d7e:	221a      	movs	r2, #26
 8002d80:	4927      	ldr	r1, [pc, #156]	@ (8002e20 <main+0x2d0>)
 8002d82:	4828      	ldr	r0, [pc, #160]	@ (8002e24 <main+0x2d4>)
 8002d84:	f00d fbe0 	bl	8010548 <f_open>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <main+0x2c8>)
 8002d8e:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 8002d90:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <main+0x2c8>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10c      	bne.n	8002db2 <main+0x262>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	220b      	movs	r2, #11
 8002d9c:	4922      	ldr	r1, [pc, #136]	@ (8002e28 <main+0x2d8>)
 8002d9e:	4821      	ldr	r0, [pc, #132]	@ (8002e24 <main+0x2d4>)
 8002da0:	f00d fd93 	bl	80108ca <f_write>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <main+0x2c8>)
 8002daa:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 8002dac:	481d      	ldr	r0, [pc, #116]	@ (8002e24 <main+0x2d4>)
 8002dae:	f00d ffb9 	bl	8010d24 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	4916      	ldr	r1, [pc, #88]	@ (8002e10 <main+0x2c0>)
 8002db6:	2000      	movs	r0, #0
 8002db8:	f00d fb62 	bl	8010480 <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002dbc:	f7fe ff9e 	bl	8001cfc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002dc0:	f00e fc0f 	bl	80115e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <main+0x274>
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	0801a00c 	.word	0x0801a00c
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	20000b0c 	.word	0x20000b0c
 8002dd8:	20000238 	.word	0x20000238
 8002ddc:	0801a014 	.word	0x0801a014
 8002de0:	20000e44 	.word	0x20000e44
 8002de4:	20001538 	.word	0x20001538
 8002de8:	200004f4 	.word	0x200004f4
 8002dec:	0801a01c 	.word	0x0801a01c
 8002df0:	0801a024 	.word	0x0801a024
 8002df4:	20000688 	.word	0x20000688
 8002df8:	0801a02c 	.word	0x0801a02c
 8002dfc:	0801a034 	.word	0x0801a034
 8002e00:	200014a4 	.word	0x200014a4
 8002e04:	200004b4 	.word	0x200004b4
 8002e08:	0801a040 	.word	0x0801a040
 8002e0c:	200013f0 	.word	0x200013f0
 8002e10:	0801a04c 	.word	0x0801a04c
 8002e14:	200006a0 	.word	0x200006a0
 8002e18:	200008d4 	.word	0x200008d4
 8002e1c:	0801a050 	.word	0x0801a050
 8002e20:	0801a058 	.word	0x0801a058
 8002e24:	200008d8 	.word	0x200008d8
 8002e28:	0801a068 	.word	0x0801a068

08002e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b094      	sub	sp, #80	@ 0x50
 8002e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e32:	f107 0318 	add.w	r3, r7, #24
 8002e36:	2238      	movs	r2, #56	@ 0x38
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f012 f888 	bl	8014f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002e52:	f005 fd49 	bl	80088e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e60:	2302      	movs	r3, #2
 8002e62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e64:	2303      	movs	r3, #3
 8002e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002e6c:	2319      	movs	r3, #25
 8002e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e70:	2302      	movs	r3, #2
 8002e72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e74:	2302      	movs	r3, #2
 8002e76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	4618      	mov	r0, r3
 8002e82:	f005 fde5 	bl	8008a50 <HAL_RCC_OscConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002e8c:	f000 f82a 	bl	8002ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e90:	230f      	movs	r3, #15
 8002e92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e94:	2303      	movs	r3, #3
 8002e96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f006 f8e3 	bl	8009074 <HAL_RCC_ClockConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002eb4:	f000 f816 	bl	8002ee4 <Error_Handler>
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3750      	adds	r7, #80	@ 0x50
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002ed2:	f002 fbed 	bl	80056b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00

08002ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
}
 8002eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <Error_Handler+0x8>

08002ef0 <release_mecanism>:




}
HAL_StatusTypeDef release_mecanism(void){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8002ef4:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <release_mecanism+0x1c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8002efc:	635a      	str	r2, [r3, #52]	@ 0x34
	 return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002efe:	2100      	movs	r1, #0
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <release_mecanism+0x1c>)
 8002f02:	f007 fa43 	bl	800a38c <HAL_TIM_PWM_Start>
 8002f06:	4603      	mov	r3, r0


}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	200013a4 	.word	0x200013a4

08002f10 <lock_mecanism>:
HAL_StatusTypeDef lock_mecanism(void){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,CLOSED_HIGH_TIME);
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <lock_mecanism+0x1c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002f1c:	635a      	str	r2, [r3, #52]	@ 0x34
	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4802      	ldr	r0, [pc, #8]	@ (8002f2c <lock_mecanism+0x1c>)
 8002f22:	f007 fa33 	bl	800a38c <HAL_TIM_PWM_Start>
 8002f26:	4603      	mov	r3, r0


}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200013a4 	.word	0x200013a4

08002f30 <stop_servo>:
void stop_servo(void){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002f34:	2100      	movs	r1, #0
 8002f36:	4802      	ldr	r0, [pc, #8]	@ (8002f40 <stop_servo+0x10>)
 8002f38:	f007 fb28 	bl	800a58c <HAL_TIM_PWM_Stop>

}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200013a4 	.word	0x200013a4

08002f44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fbc <MX_SPI1_Init+0x78>)
 8002f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f56:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f5e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f64:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f78:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f7a:	2218      	movs	r2, #24
 8002f7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f92:	2207      	movs	r2, #7
 8002f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fa2:	4805      	ldr	r0, [pc, #20]	@ (8002fb8 <MX_SPI1_Init+0x74>)
 8002fa4:	f006 fca0 	bl	80098e8 <HAL_SPI_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fae:	f7ff ff99 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000e54 	.word	0x20000e54
 8002fbc:	40013000 	.word	0x40013000

08002fc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	@ 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a17      	ldr	r2, [pc, #92]	@ (800303c <HAL_SPI_MspInit+0x7c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d128      	bne.n	8003034 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe2:	4b17      	ldr	r3, [pc, #92]	@ (8003040 <HAL_SPI_MspInit+0x80>)
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe6:	4a16      	ldr	r2, [pc, #88]	@ (8003040 <HAL_SPI_MspInit+0x80>)
 8002fe8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fee:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <HAL_SPI_MspInit+0x80>)
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <HAL_SPI_MspInit+0x80>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffe:	4a10      	ldr	r2, [pc, #64]	@ (8003040 <HAL_SPI_MspInit+0x80>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <HAL_SPI_MspInit+0x80>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003012:	23e0      	movs	r3, #224	@ 0xe0
 8003014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003022:	2305      	movs	r3, #5
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4619      	mov	r1, r3
 800302c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003030:	f004 fc52 	bl	80078d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003034:	bf00      	nop
 8003036:	3728      	adds	r7, #40	@ 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40013000 	.word	0x40013000
 8003040:	40021000 	.word	0x40021000

08003044 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af04      	add	r7, sp, #16
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	2301      	movs	r3, #1
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	1dfb      	adds	r3, r7, #7
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2301      	movs	r3, #1
 800306e:	2200      	movs	r2, #0
 8003070:	2178      	movs	r1, #120	@ 0x78
 8003072:	4803      	ldr	r0, [pc, #12]	@ (8003080 <ssd1306_WriteCommand+0x2c>)
 8003074:	f004 feb0 	bl	8007dd8 <HAL_I2C_Mem_Write>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	200003a0 	.word	0x200003a0

08003084 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af04      	add	r7, sp, #16
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f04f 32ff 	mov.w	r2, #4294967295
 8003096:	9202      	str	r2, [sp, #8]
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2301      	movs	r3, #1
 80030a0:	2240      	movs	r2, #64	@ 0x40
 80030a2:	2178      	movs	r1, #120	@ 0x78
 80030a4:	4803      	ldr	r0, [pc, #12]	@ (80030b4 <ssd1306_WriteData+0x30>)
 80030a6:	f004 fe97 	bl	8007dd8 <HAL_I2C_Mem_Write>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200003a0 	.word	0x200003a0

080030b8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80030bc:	f7ff ffc2 	bl	8003044 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80030c0:	2064      	movs	r0, #100	@ 0x64
 80030c2:	f002 fb13 	bl	80056ec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80030c6:	2000      	movs	r0, #0
 80030c8:	f000 f9ce 	bl	8003468 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80030cc:	2020      	movs	r0, #32
 80030ce:	f7ff ffc1 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7ff ffbe 	bl	8003054 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80030d8:	20b0      	movs	r0, #176	@ 0xb0
 80030da:	f7ff ffbb 	bl	8003054 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80030de:	20c8      	movs	r0, #200	@ 0xc8
 80030e0:	f7ff ffb8 	bl	8003054 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7ff ffb5 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80030ea:	2010      	movs	r0, #16
 80030ec:	f7ff ffb2 	bl	8003054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80030f0:	2040      	movs	r0, #64	@ 0x40
 80030f2:	f7ff ffaf 	bl	8003054 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80030f6:	20ff      	movs	r0, #255	@ 0xff
 80030f8:	f000 f9a2 	bl	8003440 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80030fc:	20a1      	movs	r0, #161	@ 0xa1
 80030fe:	f7ff ffa9 	bl	8003054 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003102:	20a6      	movs	r0, #166	@ 0xa6
 8003104:	f7ff ffa6 	bl	8003054 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003108:	20a8      	movs	r0, #168	@ 0xa8
 800310a:	f7ff ffa3 	bl	8003054 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800310e:	203f      	movs	r0, #63	@ 0x3f
 8003110:	f7ff ffa0 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003114:	20a4      	movs	r0, #164	@ 0xa4
 8003116:	f7ff ff9d 	bl	8003054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800311a:	20d3      	movs	r0, #211	@ 0xd3
 800311c:	f7ff ff9a 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003120:	2000      	movs	r0, #0
 8003122:	f7ff ff97 	bl	8003054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003126:	20d5      	movs	r0, #213	@ 0xd5
 8003128:	f7ff ff94 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800312c:	20f0      	movs	r0, #240	@ 0xf0
 800312e:	f7ff ff91 	bl	8003054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003132:	20d9      	movs	r0, #217	@ 0xd9
 8003134:	f7ff ff8e 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003138:	2022      	movs	r0, #34	@ 0x22
 800313a:	f7ff ff8b 	bl	8003054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800313e:	20da      	movs	r0, #218	@ 0xda
 8003140:	f7ff ff88 	bl	8003054 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003144:	2012      	movs	r0, #18
 8003146:	f7ff ff85 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800314a:	20db      	movs	r0, #219	@ 0xdb
 800314c:	f7ff ff82 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003150:	2020      	movs	r0, #32
 8003152:	f7ff ff7f 	bl	8003054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003156:	208d      	movs	r0, #141	@ 0x8d
 8003158:	f7ff ff7c 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800315c:	2014      	movs	r0, #20
 800315e:	f7ff ff79 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003162:	2001      	movs	r0, #1
 8003164:	f000 f980 	bl	8003468 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003168:	2000      	movs	r0, #0
 800316a:	f000 f80f 	bl	800318c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800316e:	f000 f825 	bl	80031bc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003172:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <ssd1306_Init+0xd0>)
 8003174:	2200      	movs	r2, #0
 8003176:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003178:	4b03      	ldr	r3, [pc, #12]	@ (8003188 <ssd1306_Init+0xd0>)
 800317a:	2200      	movs	r2, #0
 800317c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800317e:	4b02      	ldr	r3, [pc, #8]	@ (8003188 <ssd1306_Init+0xd0>)
 8003180:	2201      	movs	r2, #1
 8003182:	711a      	strb	r2, [r3, #4]
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200012b8 	.word	0x200012b8

0800318c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <ssd1306_Fill+0x14>
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <ssd1306_Fill+0x16>
 80031a0:	23ff      	movs	r3, #255	@ 0xff
 80031a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031a6:	4619      	mov	r1, r3
 80031a8:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <ssd1306_Fill+0x2c>)
 80031aa:	f011 fed1 	bl	8014f50 <memset>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000eb8 	.word	0x20000eb8

080031bc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031c2:	2300      	movs	r3, #0
 80031c4:	71fb      	strb	r3, [r7, #7]
 80031c6:	e016      	b.n	80031f6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	3b50      	subs	r3, #80	@ 0x50
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff40 	bl	8003054 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7ff ff3d 	bl	8003054 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80031da:	2010      	movs	r0, #16
 80031dc:	f7ff ff3a 	bl	8003054 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	01db      	lsls	r3, r3, #7
 80031e4:	4a08      	ldr	r2, [pc, #32]	@ (8003208 <ssd1306_UpdateScreen+0x4c>)
 80031e6:	4413      	add	r3, r2
 80031e8:	2180      	movs	r1, #128	@ 0x80
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff4a 	bl	8003084 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	3301      	adds	r3, #1
 80031f4:	71fb      	strb	r3, [r7, #7]
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	2b07      	cmp	r3, #7
 80031fa:	d9e5      	bls.n	80031c8 <ssd1306_UpdateScreen+0xc>
    }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000eb8 	.word	0x20000eb8

0800320c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
 8003216:	460b      	mov	r3, r1
 8003218:	71bb      	strb	r3, [r7, #6]
 800321a:	4613      	mov	r3, r2
 800321c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db3d      	blt.n	80032a2 <ssd1306_DrawPixel+0x96>
 8003226:	79bb      	ldrb	r3, [r7, #6]
 8003228:	2b3f      	cmp	r3, #63	@ 0x3f
 800322a:	d83a      	bhi.n	80032a2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800322c:	797b      	ldrb	r3, [r7, #5]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d11a      	bne.n	8003268 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003232:	79fa      	ldrb	r2, [r7, #7]
 8003234:	79bb      	ldrb	r3, [r7, #6]
 8003236:	08db      	lsrs	r3, r3, #3
 8003238:	b2d8      	uxtb	r0, r3
 800323a:	4603      	mov	r3, r0
 800323c:	01db      	lsls	r3, r3, #7
 800323e:	4413      	add	r3, r2
 8003240:	4a1b      	ldr	r2, [pc, #108]	@ (80032b0 <ssd1306_DrawPixel+0xa4>)
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	b25a      	sxtb	r2, r3
 8003246:	79bb      	ldrb	r3, [r7, #6]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	b25b      	sxtb	r3, r3
 8003254:	4313      	orrs	r3, r2
 8003256:	b259      	sxtb	r1, r3
 8003258:	79fa      	ldrb	r2, [r7, #7]
 800325a:	4603      	mov	r3, r0
 800325c:	01db      	lsls	r3, r3, #7
 800325e:	4413      	add	r3, r2
 8003260:	b2c9      	uxtb	r1, r1
 8003262:	4a13      	ldr	r2, [pc, #76]	@ (80032b0 <ssd1306_DrawPixel+0xa4>)
 8003264:	54d1      	strb	r1, [r2, r3]
 8003266:	e01d      	b.n	80032a4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003268:	79fa      	ldrb	r2, [r7, #7]
 800326a:	79bb      	ldrb	r3, [r7, #6]
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	b2d8      	uxtb	r0, r3
 8003270:	4603      	mov	r3, r0
 8003272:	01db      	lsls	r3, r3, #7
 8003274:	4413      	add	r3, r2
 8003276:	4a0e      	ldr	r2, [pc, #56]	@ (80032b0 <ssd1306_DrawPixel+0xa4>)
 8003278:	5cd3      	ldrb	r3, [r2, r3]
 800327a:	b25a      	sxtb	r2, r3
 800327c:	79bb      	ldrb	r3, [r7, #6]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	b25b      	sxtb	r3, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	b25b      	sxtb	r3, r3
 800328e:	4013      	ands	r3, r2
 8003290:	b259      	sxtb	r1, r3
 8003292:	79fa      	ldrb	r2, [r7, #7]
 8003294:	4603      	mov	r3, r0
 8003296:	01db      	lsls	r3, r3, #7
 8003298:	4413      	add	r3, r2
 800329a:	b2c9      	uxtb	r1, r1
 800329c:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <ssd1306_DrawPixel+0xa4>)
 800329e:	54d1      	strb	r1, [r2, r3]
 80032a0:	e000      	b.n	80032a4 <ssd1306_DrawPixel+0x98>
        return;
 80032a2:	bf00      	nop
    }
}
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000eb8 	.word	0x20000eb8

080032b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4604      	mov	r4, r0
 80032bc:	1d38      	adds	r0, r7, #4
 80032be:	e880 0006 	stmia.w	r0, {r1, r2}
 80032c2:	461a      	mov	r2, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	4613      	mov	r3, r2
 80032ca:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b1f      	cmp	r3, #31
 80032d0:	d902      	bls.n	80032d8 <ssd1306_WriteChar+0x24>
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b7e      	cmp	r3, #126	@ 0x7e
 80032d6:	d901      	bls.n	80032dc <ssd1306_WriteChar+0x28>
        return 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	e06c      	b.n	80033b6 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80032dc:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <ssd1306_WriteChar+0x10c>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	793b      	ldrb	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	2b80      	cmp	r3, #128	@ 0x80
 80032e8:	dc06      	bgt.n	80032f8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80032ea:	4b35      	ldr	r3, [pc, #212]	@ (80033c0 <ssd1306_WriteChar+0x10c>)
 80032ec:	885b      	ldrh	r3, [r3, #2]
 80032ee:	461a      	mov	r2, r3
 80032f0:	797b      	ldrb	r3, [r7, #5]
 80032f2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80032f4:	2b40      	cmp	r3, #64	@ 0x40
 80032f6:	dd01      	ble.n	80032fc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e05c      	b.n	80033b6 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e04c      	b.n	800339c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	3b20      	subs	r3, #32
 8003308:	7979      	ldrb	r1, [r7, #5]
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4619      	mov	r1, r3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	440b      	add	r3, r1
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800331c:	2300      	movs	r3, #0
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	e034      	b.n	800338c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003332:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <ssd1306_WriteChar+0x10c>)
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	4413      	add	r3, r2
 800333e:	b2d8      	uxtb	r0, r3
 8003340:	4b1f      	ldr	r3, [pc, #124]	@ (80033c0 <ssd1306_WriteChar+0x10c>)
 8003342:	885b      	ldrh	r3, [r3, #2]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4413      	add	r3, r2
 800334c:	b2db      	uxtb	r3, r3
 800334e:	7bba      	ldrb	r2, [r7, #14]
 8003350:	4619      	mov	r1, r3
 8003352:	f7ff ff5b 	bl	800320c <ssd1306_DrawPixel>
 8003356:	e016      	b.n	8003386 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003358:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <ssd1306_WriteChar+0x10c>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	4413      	add	r3, r2
 8003364:	b2d8      	uxtb	r0, r3
 8003366:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <ssd1306_WriteChar+0x10c>)
 8003368:	885b      	ldrh	r3, [r3, #2]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4413      	add	r3, r2
 8003372:	b2d9      	uxtb	r1, r3
 8003374:	7bbb      	ldrb	r3, [r7, #14]
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	f7ff ff43 	bl	800320c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	3301      	adds	r3, #1
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	793b      	ldrb	r3, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	4293      	cmp	r3, r2
 8003394:	d3c5      	bcc.n	8003322 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3301      	adds	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	797b      	ldrb	r3, [r7, #5]
 800339e:	461a      	mov	r2, r3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d3ad      	bcc.n	8003302 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <ssd1306_WriteChar+0x10c>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	793a      	ldrb	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	4b03      	ldr	r3, [pc, #12]	@ (80033c0 <ssd1306_WriteChar+0x10c>)
 80033b2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3724      	adds	r7, #36	@ 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	bf00      	nop
 80033c0:	200012b8 	.word	0x200012b8

080033c4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	1d38      	adds	r0, r7, #4
 80033ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80033d2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80033d4:	e012      	b.n	80033fc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	7818      	ldrb	r0, [r3, #0]
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	1d3a      	adds	r2, r7, #4
 80033de:	ca06      	ldmia	r2, {r1, r2}
 80033e0:	f7ff ff68 	bl	80032b4 <ssd1306_WriteChar>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d002      	beq.n	80033f6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	e008      	b.n	8003408 <ssd1306_WriteString+0x44>
        }
        str++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3301      	adds	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e8      	bne.n	80033d6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	781b      	ldrb	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	460a      	mov	r2, r1
 800341a:	71fb      	strb	r3, [r7, #7]
 800341c:	4613      	mov	r3, r2
 800341e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <ssd1306_SetCursor+0x2c>)
 8003426:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	b29a      	uxth	r2, r3
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <ssd1306_SetCursor+0x2c>)
 800342e:	805a      	strh	r2, [r3, #2]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	200012b8 	.word	0x200012b8

08003440 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800344a:	2381      	movs	r3, #129	@ 0x81
 800344c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fdff 	bl	8003054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fdfb 	bl	8003054 <ssd1306_WriteCommand>
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003478:	23af      	movs	r3, #175	@ 0xaf
 800347a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800347c:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <ssd1306_SetDisplayOn+0x38>)
 800347e:	2201      	movs	r2, #1
 8003480:	715a      	strb	r2, [r3, #5]
 8003482:	e004      	b.n	800348e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003484:	23ae      	movs	r3, #174	@ 0xae
 8003486:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <ssd1306_SetDisplayOn+0x38>)
 800348a:	2200      	movs	r2, #0
 800348c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fddf 	bl	8003054 <ssd1306_WriteCommand>
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200012b8 	.word	0x200012b8

080034a4 <statemachine>:
extern uint32_t timeindex;




void statemachine(void){
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af02      	add	r7, sp, #8

	switch(state){
 80034aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003730 <statemachine+0x28c>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	f200 8256 	bhi.w	8003960 <statemachine+0x4bc>
 80034b4:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <statemachine+0x18>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034cd 	.word	0x080034cd
 80034c0:	08003807 	.word	0x08003807
 80034c4:	08003871 	.word	0x08003871
 80034c8:	08003943 	.word	0x08003943

	case IDLE:
		ssd1306_Fill(Black);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7ff fe5d 	bl	800318c <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 80034d2:	2120      	movs	r1, #32
 80034d4:	2020      	movs	r0, #32
 80034d6:	f7ff ff9b 	bl	8003410 <ssd1306_SetCursor>
switch(screenindex){
 80034da:	4b96      	ldr	r3, [pc, #600]	@ (8003734 <statemachine+0x290>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	f200 808a 	bhi.w	80035f8 <statemachine+0x154>
 80034e4:	a201      	add	r2, pc, #4	@ (adr r2, 80034ec <statemachine+0x48>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003501 	.word	0x08003501
 80034f0:	08003539 	.word	0x08003539
 80034f4:	08003563 	.word	0x08003563
 80034f8:	0800358f 	.word	0x0800358f
 80034fc:	080035c1 	.word	0x080035c1
case 0:
	if (vbat <= 7){
 8003500:	4b8d      	ldr	r3, [pc, #564]	@ (8003738 <statemachine+0x294>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800350a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003512:	d900      	bls.n	8003516 <statemachine+0x72>
					ssd1306_WriteString("bat_low", Font_7x10, White);
					LED_Setcolour(255,0,0,255,0,0);
				}
	break;
 8003514:	e070      	b.n	80035f8 <statemachine+0x154>
					ssd1306_WriteString("bat_low", Font_7x10, White);
 8003516:	4a89      	ldr	r2, [pc, #548]	@ (800373c <statemachine+0x298>)
 8003518:	2301      	movs	r3, #1
 800351a:	ca06      	ldmia	r2, {r1, r2}
 800351c:	4888      	ldr	r0, [pc, #544]	@ (8003740 <statemachine+0x29c>)
 800351e:	f7ff ff51 	bl	80033c4 <ssd1306_WriteString>
					LED_Setcolour(255,0,0,255,0,0);
 8003522:	2300      	movs	r3, #0
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	23ff      	movs	r3, #255	@ 0xff
 800352c:	2200      	movs	r2, #0
 800352e:	2100      	movs	r1, #0
 8003530:	20ff      	movs	r0, #255	@ 0xff
 8003532:	f7ff fa05 	bl	8002940 <LED_Setcolour>
	break;
 8003536:	e05f      	b.n	80035f8 <statemachine+0x154>
case 1:
	if(flag_calib==0){
 8003538:	4b82      	ldr	r3, [pc, #520]	@ (8003744 <statemachine+0x2a0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d154      	bne.n	80035ea <statemachine+0x146>
		ssd1306_WriteString("alt_cal", Font_7x10, White);
 8003540:	4a7e      	ldr	r2, [pc, #504]	@ (800373c <statemachine+0x298>)
 8003542:	2301      	movs	r3, #1
 8003544:	ca06      	ldmia	r2, {r1, r2}
 8003546:	4880      	ldr	r0, [pc, #512]	@ (8003748 <statemachine+0x2a4>)
 8003548:	f7ff ff3c 	bl	80033c4 <ssd1306_WriteString>
		LED_Setcolour(0,255,0,0,255,0);
 800354c:	2300      	movs	r3, #0
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	23ff      	movs	r3, #255	@ 0xff
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2300      	movs	r3, #0
 8003556:	2200      	movs	r2, #0
 8003558:	21ff      	movs	r1, #255	@ 0xff
 800355a:	2000      	movs	r0, #0
 800355c:	f7ff f9f0 	bl	8002940 <LED_Setcolour>
				}
	break;
 8003560:	e043      	b.n	80035ea <statemachine+0x146>
case 2:
	if (GNSSData.fixType <= 2){
 8003562:	4b7a      	ldr	r3, [pc, #488]	@ (800374c <statemachine+0x2a8>)
 8003564:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8003568:	2b02      	cmp	r3, #2
 800356a:	d840      	bhi.n	80035ee <statemachine+0x14a>
		ssd1306_WriteString("gps_fix", Font_7x10, White);
 800356c:	4a73      	ldr	r2, [pc, #460]	@ (800373c <statemachine+0x298>)
 800356e:	2301      	movs	r3, #1
 8003570:	ca06      	ldmia	r2, {r1, r2}
 8003572:	4877      	ldr	r0, [pc, #476]	@ (8003750 <statemachine+0x2ac>)
 8003574:	f7ff ff26 	bl	80033c4 <ssd1306_WriteString>
		LED_Setcolour(255,255,0,255,255,0);
 8003578:	2300      	movs	r3, #0
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	23ff      	movs	r3, #255	@ 0xff
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	23ff      	movs	r3, #255	@ 0xff
 8003582:	2200      	movs	r2, #0
 8003584:	21ff      	movs	r1, #255	@ 0xff
 8003586:	20ff      	movs	r0, #255	@ 0xff
 8003588:	f7ff f9da 	bl	8002940 <LED_Setcolour>
				}

	break;
 800358c:	e02f      	b.n	80035ee <statemachine+0x14a>
case 3:
	if(HAL_GPIO_ReadPin(PWEN_GPIO_Port,PWEN_Pin)==0){
 800358e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003592:	4870      	ldr	r0, [pc, #448]	@ (8003754 <statemachine+0x2b0>)
 8003594:	f004 fb22 	bl	8007bdc <HAL_GPIO_ReadPin>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d129      	bne.n	80035f2 <statemachine+0x14e>
		ssd1306_WriteString("TELEPWR", Font_7x10, White);
 800359e:	4a67      	ldr	r2, [pc, #412]	@ (800373c <statemachine+0x298>)
 80035a0:	2301      	movs	r3, #1
 80035a2:	ca06      	ldmia	r2, {r1, r2}
 80035a4:	486c      	ldr	r0, [pc, #432]	@ (8003758 <statemachine+0x2b4>)
 80035a6:	f7ff ff0d 	bl	80033c4 <ssd1306_WriteString>
		LED_Setcolour(0,255,255,0,255,255);
 80035aa:	23ff      	movs	r3, #255	@ 0xff
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	23ff      	movs	r3, #255	@ 0xff
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	22ff      	movs	r2, #255	@ 0xff
 80035b6:	21ff      	movs	r1, #255	@ 0xff
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7ff f9c1 	bl	8002940 <LED_Setcolour>
	}
	break;
 80035be:	e018      	b.n	80035f2 <statemachine+0x14e>
case 4:
	if(sd_detect_flag==0){
 80035c0:	4b66      	ldr	r3, [pc, #408]	@ (800375c <statemachine+0x2b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d116      	bne.n	80035f6 <statemachine+0x152>
		ssd1306_WriteString("no_sd", Font_7x10, White);
 80035c8:	4a5c      	ldr	r2, [pc, #368]	@ (800373c <statemachine+0x298>)
 80035ca:	2301      	movs	r3, #1
 80035cc:	ca06      	ldmia	r2, {r1, r2}
 80035ce:	4864      	ldr	r0, [pc, #400]	@ (8003760 <statemachine+0x2bc>)
 80035d0:	f7ff fef8 	bl	80033c4 <ssd1306_WriteString>
		LED_Setcolour(255,0,255,255,0,255);
 80035d4:	23ff      	movs	r3, #255	@ 0xff
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	2300      	movs	r3, #0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	23ff      	movs	r3, #255	@ 0xff
 80035de:	22ff      	movs	r2, #255	@ 0xff
 80035e0:	2100      	movs	r1, #0
 80035e2:	20ff      	movs	r0, #255	@ 0xff
 80035e4:	f7ff f9ac 	bl	8002940 <LED_Setcolour>
	}
	break;
 80035e8:	e005      	b.n	80035f6 <statemachine+0x152>
	break;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <statemachine+0x154>
	break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <statemachine+0x154>
	break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <statemachine+0x154>
	break;
 80035f6:	bf00      	nop
}


ssd1306_SetCursor(32, 42);
 80035f8:	212a      	movs	r1, #42	@ 0x2a
 80035fa:	2020      	movs	r0, #32
 80035fc:	f7ff ff08 	bl	8003410 <ssd1306_SetCursor>

if(datascreenindex<=10){
 8003600:	4b58      	ldr	r3, [pc, #352]	@ (8003764 <statemachine+0x2c0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b0a      	cmp	r3, #10
 8003606:	dc1e      	bgt.n	8003646 <statemachine+0x1a2>
	ssd1306_WriteString("bmpalt:", Font_7x10, White);
 8003608:	4a4c      	ldr	r2, [pc, #304]	@ (800373c <statemachine+0x298>)
 800360a:	2301      	movs	r3, #1
 800360c:	ca06      	ldmia	r2, {r1, r2}
 800360e:	4856      	ldr	r0, [pc, #344]	@ (8003768 <statemachine+0x2c4>)
 8003610:	f7ff fed8 	bl	80033c4 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 52);
 8003614:	2134      	movs	r1, #52	@ 0x34
 8003616:	2020      	movs	r0, #32
 8003618:	f7ff fefa 	bl	8003410 <ssd1306_SetCursor>
    	snprintf((char *)screenbuffer,50,"%0.3f",myDatabmp581.altitude);
 800361c:	4b53      	ldr	r3, [pc, #332]	@ (800376c <statemachine+0x2c8>)
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ffb9 	bl	8000598 <__aeabi_f2d>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	e9cd 2300 	strd	r2, r3, [sp]
 800362e:	4a50      	ldr	r2, [pc, #320]	@ (8003770 <statemachine+0x2cc>)
 8003630:	2132      	movs	r1, #50	@ 0x32
 8003632:	4850      	ldr	r0, [pc, #320]	@ (8003774 <statemachine+0x2d0>)
 8003634:	f011 fb5c 	bl	8014cf0 <sniprintf>
    	ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 8003638:	4a40      	ldr	r2, [pc, #256]	@ (800373c <statemachine+0x298>)
 800363a:	2301      	movs	r3, #1
 800363c:	ca06      	ldmia	r2, {r1, r2}
 800363e:	484d      	ldr	r0, [pc, #308]	@ (8003774 <statemachine+0x2d0>)
 8003640:	f7ff fec0 	bl	80033c4 <ssd1306_WriteString>
 8003644:	e0ab      	b.n	800379e <statemachine+0x2fa>
}
else if(datascreenindex>10 && datascreenindex<=20){
 8003646:	4b47      	ldr	r3, [pc, #284]	@ (8003764 <statemachine+0x2c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b0a      	cmp	r3, #10
 800364c:	dd27      	ble.n	800369e <statemachine+0x1fa>
 800364e:	4b45      	ldr	r3, [pc, #276]	@ (8003764 <statemachine+0x2c0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b14      	cmp	r3, #20
 8003654:	dc23      	bgt.n	800369e <statemachine+0x1fa>
		if(flag_calib){
 8003656:	4b3b      	ldr	r3, [pc, #236]	@ (8003744 <statemachine+0x2a0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 809f 	beq.w	800379e <statemachine+0x2fa>
			ssd1306_WriteString("h_init:", Font_7x10, White);
 8003660:	4a36      	ldr	r2, [pc, #216]	@ (800373c <statemachine+0x298>)
 8003662:	2301      	movs	r3, #1
 8003664:	ca06      	ldmia	r2, {r1, r2}
 8003666:	4844      	ldr	r0, [pc, #272]	@ (8003778 <statemachine+0x2d4>)
 8003668:	f7ff feac 	bl	80033c4 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 800366c:	2134      	movs	r1, #52	@ 0x34
 800366e:	2020      	movs	r0, #32
 8003670:	f7ff fece 	bl	8003410 <ssd1306_SetCursor>
			snprintf((char *)screenbuffer,50,"%0.1f",hauteur_Initiale);
 8003674:	4b41      	ldr	r3, [pc, #260]	@ (800377c <statemachine+0x2d8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff8d 	bl	8000598 <__aeabi_f2d>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	e9cd 2300 	strd	r2, r3, [sp]
 8003686:	4a3e      	ldr	r2, [pc, #248]	@ (8003780 <statemachine+0x2dc>)
 8003688:	2132      	movs	r1, #50	@ 0x32
 800368a:	483a      	ldr	r0, [pc, #232]	@ (8003774 <statemachine+0x2d0>)
 800368c:	f011 fb30 	bl	8014cf0 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 8003690:	4a2a      	ldr	r2, [pc, #168]	@ (800373c <statemachine+0x298>)
 8003692:	2301      	movs	r3, #1
 8003694:	ca06      	ldmia	r2, {r1, r2}
 8003696:	4837      	ldr	r0, [pc, #220]	@ (8003774 <statemachine+0x2d0>)
 8003698:	f7ff fe94 	bl	80033c4 <ssd1306_WriteString>
		if(flag_calib){
 800369c:	e07f      	b.n	800379e <statemachine+0x2fa>
		}
}
else if (datascreenindex>20 && datascreenindex<=30) {
 800369e:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <statemachine+0x2c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b14      	cmp	r3, #20
 80036a4:	dd1c      	ble.n	80036e0 <statemachine+0x23c>
 80036a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003764 <statemachine+0x2c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b1e      	cmp	r3, #30
 80036ac:	dc18      	bgt.n	80036e0 <statemachine+0x23c>
    		ssd1306_WriteString("sat:", Font_7x10, White);
 80036ae:	4a23      	ldr	r2, [pc, #140]	@ (800373c <statemachine+0x298>)
 80036b0:	2301      	movs	r3, #1
 80036b2:	ca06      	ldmia	r2, {r1, r2}
 80036b4:	4833      	ldr	r0, [pc, #204]	@ (8003784 <statemachine+0x2e0>)
 80036b6:	f7ff fe85 	bl	80033c4 <ssd1306_WriteString>
    			ssd1306_SetCursor(32, 52);
 80036ba:	2134      	movs	r1, #52	@ 0x34
 80036bc:	2020      	movs	r0, #32
 80036be:	f7ff fea7 	bl	8003410 <ssd1306_SetCursor>
    		snprintf((char *)screenbuffer,50,"%d",GNSSData.numSV);
 80036c2:	4b22      	ldr	r3, [pc, #136]	@ (800374c <statemachine+0x2a8>)
 80036c4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80036c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003788 <statemachine+0x2e4>)
 80036ca:	2132      	movs	r1, #50	@ 0x32
 80036cc:	4829      	ldr	r0, [pc, #164]	@ (8003774 <statemachine+0x2d0>)
 80036ce:	f011 fb0f 	bl	8014cf0 <sniprintf>
    		ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 80036d2:	4a1a      	ldr	r2, [pc, #104]	@ (800373c <statemachine+0x298>)
 80036d4:	2301      	movs	r3, #1
 80036d6:	ca06      	ldmia	r2, {r1, r2}
 80036d8:	4826      	ldr	r0, [pc, #152]	@ (8003774 <statemachine+0x2d0>)
 80036da:	f7ff fe73 	bl	80033c4 <ssd1306_WriteString>
 80036de:	e05e      	b.n	800379e <statemachine+0x2fa>

    	}
else if (datascreenindex>30 && datascreenindex<=40){
 80036e0:	4b20      	ldr	r3, [pc, #128]	@ (8003764 <statemachine+0x2c0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b1e      	cmp	r3, #30
 80036e6:	dd57      	ble.n	8003798 <statemachine+0x2f4>
 80036e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003764 <statemachine+0x2c0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b28      	cmp	r3, #40	@ 0x28
 80036ee:	dc53      	bgt.n	8003798 <statemachine+0x2f4>
#ifdef PARTIE_HAUT
	datascreenindex=0;

#endif
#ifdef PARTIE_BAS
	ssd1306_WriteString("dist:", Font_7x10, White);
 80036f0:	4a12      	ldr	r2, [pc, #72]	@ (800373c <statemachine+0x298>)
 80036f2:	2301      	movs	r3, #1
 80036f4:	ca06      	ldmia	r2, {r1, r2}
 80036f6:	4825      	ldr	r0, [pc, #148]	@ (800378c <statemachine+0x2e8>)
 80036f8:	f7ff fe64 	bl	80033c4 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 52);
 80036fc:	2134      	movs	r1, #52	@ 0x34
 80036fe:	2020      	movs	r0, #32
 8003700:	f7ff fe86 	bl	8003410 <ssd1306_SetCursor>
	snprintf((char *)screenbuffer,50,"%f",distance_entre_module);
 8003704:	4b22      	ldr	r3, [pc, #136]	@ (8003790 <statemachine+0x2ec>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff45 	bl	8000598 <__aeabi_f2d>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	e9cd 2300 	strd	r2, r3, [sp]
 8003716:	4a1f      	ldr	r2, [pc, #124]	@ (8003794 <statemachine+0x2f0>)
 8003718:	2132      	movs	r1, #50	@ 0x32
 800371a:	4816      	ldr	r0, [pc, #88]	@ (8003774 <statemachine+0x2d0>)
 800371c:	f011 fae8 	bl	8014cf0 <sniprintf>
	ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 8003720:	4a06      	ldr	r2, [pc, #24]	@ (800373c <statemachine+0x298>)
 8003722:	2301      	movs	r3, #1
 8003724:	ca06      	ldmia	r2, {r1, r2}
 8003726:	4813      	ldr	r0, [pc, #76]	@ (8003774 <statemachine+0x2d0>)
 8003728:	f7ff fe4c 	bl	80033c4 <ssd1306_WriteString>
 800372c:	e037      	b.n	800379e <statemachine+0x2fa>
 800372e:	bf00      	nop
 8003730:	20000e20 	.word	0x20000e20
 8003734:	200012f4 	.word	0x200012f4
 8003738:	20000b1c 	.word	0x20000b1c
 800373c:	20000010 	.word	0x20000010
 8003740:	0801a074 	.word	0x0801a074
 8003744:	20000e2c 	.word	0x20000e2c
 8003748:	0801a07c 	.word	0x0801a07c
 800374c:	20000c18 	.word	0x20000c18
 8003750:	0801a084 	.word	0x0801a084
 8003754:	48000400 	.word	0x48000400
 8003758:	0801a08c 	.word	0x0801a08c
 800375c:	20000e38 	.word	0x20000e38
 8003760:	0801a094 	.word	0x0801a094
 8003764:	200012f8 	.word	0x200012f8
 8003768:	0801a09c 	.word	0x0801a09c
 800376c:	20000688 	.word	0x20000688
 8003770:	0801a0a4 	.word	0x0801a0a4
 8003774:	200012c0 	.word	0x200012c0
 8003778:	0801a0ac 	.word	0x0801a0ac
 800377c:	20000e3c 	.word	0x20000e3c
 8003780:	0801a0b4 	.word	0x0801a0b4
 8003784:	0801a0bc 	.word	0x0801a0bc
 8003788:	0801a0c4 	.word	0x0801a0c4
 800378c:	0801a0c8 	.word	0x0801a0c8
 8003790:	20000308 	.word	0x20000308
 8003794:	0801a0d0 	.word	0x0801a0d0

#endif
    	}
else{
#ifdef PARTIE_BAS
	datascreenindex=0;
 8003798:	4b73      	ldr	r3, [pc, #460]	@ (8003968 <statemachine+0x4c4>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]


}


if((flag_drop==1) && (flag_calib==1)){
 800379e:	4b73      	ldr	r3, [pc, #460]	@ (800396c <statemachine+0x4c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d109      	bne.n	80037ba <statemachine+0x316>
 80037a6:	4b72      	ldr	r3, [pc, #456]	@ (8003970 <statemachine+0x4cc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d105      	bne.n	80037ba <statemachine+0x316>

				state++;
 80037ae:	4b71      	ldr	r3, [pc, #452]	@ (8003974 <statemachine+0x4d0>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003974 <statemachine+0x4d0>)
 80037b8:	701a      	strb	r2, [r3, #0]
#ifdef PARTIE_HAUT
				create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
#endif
			}

			delaycounterforscreenindex++;
 80037ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003978 <statemachine+0x4d4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	4a6d      	ldr	r2, [pc, #436]	@ (8003978 <statemachine+0x4d4>)
 80037c2:	6013      	str	r3, [r2, #0]
			if(delaycounterforscreenindex>=5){
 80037c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003978 <statemachine+0x4d4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	dd07      	ble.n	80037dc <statemachine+0x338>
				delaycounterforscreenindex=0;
 80037cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003978 <statemachine+0x4d4>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
				screenindex++;
 80037d2:	4b6a      	ldr	r3, [pc, #424]	@ (800397c <statemachine+0x4d8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a68      	ldr	r2, [pc, #416]	@ (800397c <statemachine+0x4d8>)
 80037da:	6013      	str	r3, [r2, #0]
			}

			if(screenindex>4){
 80037dc:	4b67      	ldr	r3, [pc, #412]	@ (800397c <statemachine+0x4d8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	dd02      	ble.n	80037ea <statemachine+0x346>
				screenindex=0;
 80037e4:	4b65      	ldr	r3, [pc, #404]	@ (800397c <statemachine+0x4d8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
			}
			datascreenindex++;
 80037ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <statemachine+0x4c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003968 <statemachine+0x4c4>)
 80037f2:	6013      	str	r3, [r2, #0]
			if(datascreenindex>=30){
				datascreenindex=0;
			}
#endif
#ifdef PARTIE_BAS
			if(datascreenindex>=40){
 80037f4:	4b5c      	ldr	r3, [pc, #368]	@ (8003968 <statemachine+0x4c4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b27      	cmp	r3, #39	@ 0x27
 80037fa:	f340 80b0 	ble.w	800395e <statemachine+0x4ba>
				datascreenindex=0;
 80037fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003968 <statemachine+0x4c4>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
			}
#endif
		break;
 8003804:	e0ab      	b.n	800395e <statemachine+0x4ba>

	case PRESEPARATION:

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,0,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,0.0,0.0,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
 8003806:	4b5e      	ldr	r3, [pc, #376]	@ (8003980 <statemachine+0x4dc>)
 8003808:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800380c:	4b5c      	ldr	r3, [pc, #368]	@ (8003980 <statemachine+0x4dc>)
 800380e:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003812:	4b5b      	ldr	r3, [pc, #364]	@ (8003980 <statemachine+0x4dc>)
 8003814:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003818:	4b5a      	ldr	r3, [pc, #360]	@ (8003984 <statemachine+0x4e0>)
 800381a:	ed93 6a05 	vldr	s12, [r3, #20]
 800381e:	4b5a      	ldr	r3, [pc, #360]	@ (8003988 <statemachine+0x4e4>)
 8003820:	edd3 5a00 	vldr	s11, [r3]
 8003824:	4b57      	ldr	r3, [pc, #348]	@ (8003984 <statemachine+0x4e0>)
 8003826:	edd3 3a03 	vldr	s7, [r3, #12]
 800382a:	4b58      	ldr	r3, [pc, #352]	@ (800398c <statemachine+0x4e8>)
 800382c:	ed93 4a00 	vldr	s8, [r3]
 8003830:	4b56      	ldr	r3, [pc, #344]	@ (800398c <statemachine+0x4e8>)
 8003832:	edd3 4a01 	vldr	s9, [r3, #4]
 8003836:	4b55      	ldr	r3, [pc, #340]	@ (800398c <statemachine+0x4e8>)
 8003838:	ed93 5a02 	vldr	s10, [r3, #8]
 800383c:	4b54      	ldr	r3, [pc, #336]	@ (8003990 <statemachine+0x4ec>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	eeb0 3a65 	vmov.f32	s6, s11
 800384a:	eddf 2a52 	vldr	s5, [pc, #328]	@ 8003994 <statemachine+0x4f0>
 800384e:	ed9f 2a51 	vldr	s4, [pc, #324]	@ 8003994 <statemachine+0x4f0>
 8003852:	eef0 1a46 	vmov.f32	s3, s12
 8003856:	eeb0 1a66 	vmov.f32	s2, s13
 800385a:	eef0 0a47 	vmov.f32	s1, s14
 800385e:	eeb0 0a67 	vmov.f32	s0, s15
 8003862:	2310      	movs	r3, #16
 8003864:	2201      	movs	r2, #1
 8003866:	2182      	movs	r1, #130	@ 0x82
 8003868:	484b      	ldr	r0, [pc, #300]	@ (8003998 <statemachine+0x4f4>)
 800386a:	f000 fc47 	bl	80040fc <create_and_send_payload>

#ifdef PARTIE_HAUT
#endif
#ifdef PARTIE_BAS
#endif
		break;
 800386e:	e077      	b.n	8003960 <statemachine+0x4bc>

	case POSTSEPARATION:

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,0,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,0.0,0.0,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
 8003870:	4b43      	ldr	r3, [pc, #268]	@ (8003980 <statemachine+0x4dc>)
 8003872:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003876:	4b42      	ldr	r3, [pc, #264]	@ (8003980 <statemachine+0x4dc>)
 8003878:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 800387c:	4b40      	ldr	r3, [pc, #256]	@ (8003980 <statemachine+0x4dc>)
 800387e:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003882:	4b40      	ldr	r3, [pc, #256]	@ (8003984 <statemachine+0x4e0>)
 8003884:	ed93 6a05 	vldr	s12, [r3, #20]
 8003888:	4b3f      	ldr	r3, [pc, #252]	@ (8003988 <statemachine+0x4e4>)
 800388a:	edd3 5a00 	vldr	s11, [r3]
 800388e:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <statemachine+0x4e0>)
 8003890:	edd3 3a03 	vldr	s7, [r3, #12]
 8003894:	4b3d      	ldr	r3, [pc, #244]	@ (800398c <statemachine+0x4e8>)
 8003896:	ed93 4a00 	vldr	s8, [r3]
 800389a:	4b3c      	ldr	r3, [pc, #240]	@ (800398c <statemachine+0x4e8>)
 800389c:	edd3 4a01 	vldr	s9, [r3, #4]
 80038a0:	4b3a      	ldr	r3, [pc, #232]	@ (800398c <statemachine+0x4e8>)
 80038a2:	ed93 5a02 	vldr	s10, [r3, #8]
 80038a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003990 <statemachine+0x4ec>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	eeb0 3a65 	vmov.f32	s6, s11
 80038b4:	eddf 2a37 	vldr	s5, [pc, #220]	@ 8003994 <statemachine+0x4f0>
 80038b8:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 8003994 <statemachine+0x4f0>
 80038bc:	eef0 1a46 	vmov.f32	s3, s12
 80038c0:	eeb0 1a66 	vmov.f32	s2, s13
 80038c4:	eef0 0a47 	vmov.f32	s1, s14
 80038c8:	eeb0 0a67 	vmov.f32	s0, s15
 80038cc:	2310      	movs	r3, #16
 80038ce:	2201      	movs	r2, #1
 80038d0:	2182      	movs	r1, #130	@ 0x82
 80038d2:	4831      	ldr	r0, [pc, #196]	@ (8003998 <statemachine+0x4f4>)
 80038d4:	f000 fc12 	bl	80040fc <create_and_send_payload>
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,0,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,0.0,0.0,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
 80038d8:	4b29      	ldr	r3, [pc, #164]	@ (8003980 <statemachine+0x4dc>)
 80038da:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80038de:	4b28      	ldr	r3, [pc, #160]	@ (8003980 <statemachine+0x4dc>)
 80038e0:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 80038e4:	4b26      	ldr	r3, [pc, #152]	@ (8003980 <statemachine+0x4dc>)
 80038e6:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 80038ea:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <statemachine+0x4e0>)
 80038ec:	ed93 6a05 	vldr	s12, [r3, #20]
 80038f0:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <statemachine+0x4e4>)
 80038f2:	edd3 5a00 	vldr	s11, [r3]
 80038f6:	4b23      	ldr	r3, [pc, #140]	@ (8003984 <statemachine+0x4e0>)
 80038f8:	edd3 3a03 	vldr	s7, [r3, #12]
 80038fc:	4b23      	ldr	r3, [pc, #140]	@ (800398c <statemachine+0x4e8>)
 80038fe:	ed93 4a00 	vldr	s8, [r3]
 8003902:	4b22      	ldr	r3, [pc, #136]	@ (800398c <statemachine+0x4e8>)
 8003904:	edd3 4a01 	vldr	s9, [r3, #4]
 8003908:	4b20      	ldr	r3, [pc, #128]	@ (800398c <statemachine+0x4e8>)
 800390a:	ed93 5a02 	vldr	s10, [r3, #8]
 800390e:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <statemachine+0x4ec>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	eeb0 3a65 	vmov.f32	s6, s11
 800391c:	eddf 2a1d 	vldr	s5, [pc, #116]	@ 8003994 <statemachine+0x4f0>
 8003920:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8003994 <statemachine+0x4f0>
 8003924:	eef0 1a46 	vmov.f32	s3, s12
 8003928:	eeb0 1a66 	vmov.f32	s2, s13
 800392c:	eef0 0a47 	vmov.f32	s1, s14
 8003930:	eeb0 0a67 	vmov.f32	s0, s15
 8003934:	2310      	movs	r3, #16
 8003936:	2216      	movs	r2, #22
 8003938:	2182      	movs	r1, #130	@ 0x82
 800393a:	4817      	ldr	r0, [pc, #92]	@ (8003998 <statemachine+0x4f4>)
 800393c:	f000 fbde 	bl	80040fc <create_and_send_payload>
#endif
#ifdef PARTIE_BAS
#endif


		break;
 8003940:	e00e      	b.n	8003960 <statemachine+0x4bc>
	case FIN:

		ssd1306_Fill(Black);
 8003942:	2000      	movs	r0, #0
 8003944:	f7ff fc22 	bl	800318c <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003948:	2120      	movs	r1, #32
 800394a:	2020      	movs	r0, #32
 800394c:	f7ff fd60 	bl	8003410 <ssd1306_SetCursor>
		ssd1306_WriteString("FIN", Font_16x24, White);
 8003950:	4a12      	ldr	r2, [pc, #72]	@ (800399c <statemachine+0x4f8>)
 8003952:	2301      	movs	r3, #1
 8003954:	ca06      	ldmia	r2, {r1, r2}
 8003956:	4812      	ldr	r0, [pc, #72]	@ (80039a0 <statemachine+0x4fc>)
 8003958:	f7ff fd34 	bl	80033c4 <ssd1306_WriteString>
		break;
 800395c:	e000      	b.n	8003960 <statemachine+0x4bc>
		break;
 800395e:	bf00      	nop
	}
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200012f8 	.word	0x200012f8
 800396c:	20000e24 	.word	0x20000e24
 8003970:	20000e2c 	.word	0x20000e2c
 8003974:	20000e20 	.word	0x20000e20
 8003978:	200012fc 	.word	0x200012fc
 800397c:	200012f4 	.word	0x200012f4
 8003980:	20000c18 	.word	0x20000c18
 8003984:	20000688 	.word	0x20000688
 8003988:	20000b14 	.word	0x20000b14
 800398c:	20000668 	.word	0x20000668
 8003990:	20000e50 	.word	0x20000e50
 8003994:	00000000 	.word	0x00000000
 8003998:	200003f4 	.word	0x200003f4
 800399c:	20000018 	.word	0x20000018
 80039a0:	0801a0d4 	.word	0x0801a0d4

080039a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039aa:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <HAL_MspInit+0x50>)
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	4a11      	ldr	r2, [pc, #68]	@ (80039f4 <HAL_MspInit+0x50>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80039b6:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <HAL_MspInit+0x50>)
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <HAL_MspInit+0x50>)
 80039c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c6:	4a0b      	ldr	r2, [pc, #44]	@ (80039f4 <HAL_MspInit+0x50>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ce:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <HAL_MspInit+0x50>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	210f      	movs	r1, #15
 80039de:	f06f 0001 	mvn.w	r0, #1
 80039e2:	f003 fc13 	bl	800720c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80039e6:	f005 f823 	bl	8008a30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000

080039f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	@ 0x30
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a08:	4b2c      	ldr	r3, [pc, #176]	@ (8003abc <HAL_InitTick+0xc4>)
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003abc <HAL_InitTick+0xc4>)
 8003a0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a14:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <HAL_InitTick+0xc4>)
 8003a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a20:	f107 020c 	add.w	r2, r7, #12
 8003a24:	f107 0310 	add.w	r3, r7, #16
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f005 fcf6 	bl	800941c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003a30:	f005 fcde 	bl	80093f0 <HAL_RCC_GetPCLK2Freq>
 8003a34:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a38:	4a21      	ldr	r2, [pc, #132]	@ (8003ac0 <HAL_InitTick+0xc8>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	0c9b      	lsrs	r3, r3, #18
 8003a40:	3b01      	subs	r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003a44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <HAL_InitTick+0xcc>)
 8003a46:	4a20      	ldr	r2, [pc, #128]	@ (8003ac8 <HAL_InitTick+0xd0>)
 8003a48:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac4 <HAL_InitTick+0xcc>)
 8003a4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a50:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003a52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <HAL_InitTick+0xcc>)
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <HAL_InitTick+0xcc>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <HAL_InitTick+0xcc>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003a64:	4817      	ldr	r0, [pc, #92]	@ (8003ac4 <HAL_InitTick+0xcc>)
 8003a66:	f006 fb6d 	bl	800a144 <HAL_TIM_Base_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003a70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11b      	bne.n	8003ab0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003a78:	4812      	ldr	r0, [pc, #72]	@ (8003ac4 <HAL_InitTick+0xcc>)
 8003a7a:	f006 fbbb 	bl	800a1f4 <HAL_TIM_Base_Start_IT>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003a84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d111      	bne.n	8003ab0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a8c:	2019      	movs	r0, #25
 8003a8e:	f003 fbd7 	bl	8007240 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d808      	bhi.n	8003aaa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	2019      	movs	r0, #25
 8003a9e:	f003 fbb5 	bl	800720c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <HAL_InitTick+0xd4>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	e002      	b.n	8003ab0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3730      	adds	r7, #48	@ 0x30
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	431bde83 	.word	0x431bde83
 8003ac4:	20001300 	.word	0x20001300
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	20000028 	.word	0x20000028

08003ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ad4:	bf00      	nop
 8003ad6:	e7fd      	b.n	8003ad4 <NMI_Handler+0x4>

08003ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 32);
 8003adc:	2120      	movs	r1, #32
 8003ade:	2020      	movs	r0, #32
 8003ae0:	f7ff fc96 	bl	8003410 <ssd1306_SetCursor>
	 	  ssd1306_Fill(Black);
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7ff fb51 	bl	800318c <ssd1306_Fill>
	 	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8003aea:	4a05      	ldr	r2, [pc, #20]	@ (8003b00 <HardFault_Handler+0x28>)
 8003aec:	2301      	movs	r3, #1
 8003aee:	ca06      	ldmia	r2, {r1, r2}
 8003af0:	4804      	ldr	r0, [pc, #16]	@ (8003b04 <HardFault_Handler+0x2c>)
 8003af2:	f7ff fc67 	bl	80033c4 <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 8003af6:	f7ff fb61 	bl	80031bc <ssd1306_UpdateScreen>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003afa:	bf00      	nop
 8003afc:	e7fd      	b.n	8003afa <HardFault_Handler+0x22>
 8003afe:	bf00      	nop
 8003b00:	20000010 	.word	0x20000010
 8003b04:	0801a0d8 	.word	0x0801a0d8

08003b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <MemManage_Handler+0x4>

08003b10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b14:	bf00      	nop
 8003b16:	e7fd      	b.n	8003b14 <BusFault_Handler+0x4>

08003b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <UsageFault_Handler+0x4>

08003b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b32:	2002      	movs	r0, #2
 8003b34:	f004 f89c 	bl	8007c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003b40:	2010      	movs	r0, #16
 8003b42:	f004 f895 	bl	8007c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <DMA1_Channel1_IRQHandler+0x10>)
 8003b52:	f003 fd66 	bl	8007622 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000143c 	.word	0x2000143c

08003b60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b64:	4802      	ldr	r0, [pc, #8]	@ (8003b70 <DMA1_Channel2_IRQHandler+0x10>)
 8003b66:	f003 fd5c 	bl	8007622 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200002a4 	.word	0x200002a4

08003b74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003b78:	4802      	ldr	r0, [pc, #8]	@ (8003b84 <DMA1_Channel3_IRQHandler+0x10>)
 8003b7a:	f003 fd52 	bl	8007622 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200015cc 	.word	0x200015cc

08003b88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b8c:	4802      	ldr	r0, [pc, #8]	@ (8003b98 <DMA1_Channel5_IRQHandler+0x10>)
 8003b8e:	f003 fd48 	bl	8007622 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	2000162c 	.word	0x2000162c

08003b9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ba0:	4802      	ldr	r0, [pc, #8]	@ (8003bac <ADC1_2_IRQHandler+0x10>)
 8003ba2:	f002 fa3d 	bl	8006020 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000238 	.word	0x20000238

08003bb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bb4:	4802      	ldr	r0, [pc, #8]	@ (8003bc0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003bb6:	f007 f88f 	bl	800acd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20001300 	.word	0x20001300

08003bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bc8:	4802      	ldr	r0, [pc, #8]	@ (8003bd4 <TIM2_IRQHandler+0x10>)
 8003bca:	f007 f885 	bl	800acd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20001358 	.word	0x20001358

08003bd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003bdc:	4802      	ldr	r0, [pc, #8]	@ (8003be8 <TIM4_IRQHandler+0x10>)
 8003bde:	f007 f87b 	bl	800acd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200013f0 	.word	0x200013f0

08003bec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bf0:	4802      	ldr	r0, [pc, #8]	@ (8003bfc <USART1_IRQHandler+0x10>)
 8003bf2:	f008 fc73 	bl	800c4dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20001538 	.word	0x20001538

08003c00 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003c04:	4802      	ldr	r0, [pc, #8]	@ (8003c10 <LPUART1_IRQHandler+0x10>)
 8003c06:	f008 fc69 	bl	800c4dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200014a4 	.word	0x200014a4

08003c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return 1;
 8003c18:	2301      	movs	r3, #1
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <_kill>:

int _kill(int pid, int sig)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c2e:	f011 f9e1 	bl	8014ff4 <__errno>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2216      	movs	r2, #22
 8003c36:	601a      	str	r2, [r3, #0]
  return -1;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_exit>:

void _exit (int status)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ffe7 	bl	8003c24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <_exit+0x12>

08003c5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e00a      	b.n	8003c82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c6c:	f3af 8000 	nop.w
 8003c70:	4601      	mov	r1, r0
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	60ba      	str	r2, [r7, #8]
 8003c78:	b2ca      	uxtb	r2, r1
 8003c7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	dbf0      	blt.n	8003c6c <_read+0x12>
  }

  return len;
 8003c8a:	687b      	ldr	r3, [r7, #4]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e009      	b.n	8003cba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	60ba      	str	r2, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	dbf1      	blt.n	8003ca6 <_write+0x12>
  }
  return len;
 8003cc2:	687b      	ldr	r3, [r7, #4]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_close>:

int _close(int file)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cf4:	605a      	str	r2, [r3, #4]
  return 0;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_isatty>:

int _isatty(int file)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d0c:	2301      	movs	r3, #1
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d3c:	4a14      	ldr	r2, [pc, #80]	@ (8003d90 <_sbrk+0x5c>)
 8003d3e:	4b15      	ldr	r3, [pc, #84]	@ (8003d94 <_sbrk+0x60>)
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d48:	4b13      	ldr	r3, [pc, #76]	@ (8003d98 <_sbrk+0x64>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d50:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <_sbrk+0x64>)
 8003d52:	4a12      	ldr	r2, [pc, #72]	@ (8003d9c <_sbrk+0x68>)
 8003d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d56:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <_sbrk+0x64>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d207      	bcs.n	8003d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d64:	f011 f946 	bl	8014ff4 <__errno>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	220c      	movs	r2, #12
 8003d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d72:	e009      	b.n	8003d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d74:	4b08      	ldr	r3, [pc, #32]	@ (8003d98 <_sbrk+0x64>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d7a:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <_sbrk+0x64>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	4a05      	ldr	r2, [pc, #20]	@ (8003d98 <_sbrk+0x64>)
 8003d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d86:	68fb      	ldr	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20008000 	.word	0x20008000
 8003d94:	00000400 	.word	0x00000400
 8003d98:	2000134c 	.word	0x2000134c
 8003d9c:	200040c8 	.word	0x200040c8

08003da0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003da4:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <SystemInit+0x20>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003daa:	4a05      	ldr	r2, [pc, #20]	@ (8003dc0 <SystemInit+0x20>)
 8003dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	@ 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	460a      	mov	r2, r1
 8003dce:	71fb      	strb	r3, [r7, #7]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 8003dd4:	2306      	movs	r3, #6
 8003dd6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 8003de6:	4a6f      	ldr	r2, [pc, #444]	@ (8003fa4 <INIT_PERM_TARVOS+0x1e0>)
 8003de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003df0:	6018      	str	r0, [r3, #0]
 8003df2:	3304      	adds	r3, #4
 8003df4:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 8003df6:	4a6c      	ldr	r2, [pc, #432]	@ (8003fa8 <INIT_PERM_TARVOS+0x1e4>)
 8003df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e00:	6018      	str	r0, [r3, #0]
 8003e02:	3304      	adds	r3, #4
 8003e04:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8003e06:	4a69      	ldr	r2, [pc, #420]	@ (8003fac <INIT_PERM_TARVOS+0x1e8>)
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e10:	6018      	str	r0, [r3, #0]
 8003e12:	3304      	adds	r3, #4
 8003e14:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8003e16:	2302      	movs	r3, #2
 8003e18:	753b      	strb	r3, [r7, #20]
 8003e1a:	2309      	movs	r3, #9
 8003e1c:	757b      	strb	r3, [r7, #21]
 8003e1e:	2302      	movs	r3, #2
 8003e20:	75bb      	strb	r3, [r7, #22]
 8003e22:	230b      	movs	r3, #11
 8003e24:	75fb      	strb	r3, [r7, #23]
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	763b      	strb	r3, [r7, #24]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8003e2e:	2302      	movs	r3, #2
 8003e30:	733b      	strb	r3, [r7, #12]
 8003e32:	2309      	movs	r3, #9
 8003e34:	737b      	strb	r3, [r7, #13]
 8003e36:	2302      	movs	r3, #2
 8003e38:	73bb      	strb	r3, [r7, #14]
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	79bb      	ldrb	r3, [r7, #6]
 8003e40:	743b      	strb	r3, [r7, #16]
 8003e42:	2300      	movs	r3, #0
 8003e44:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8003e46:	4b5a      	ldr	r3, [pc, #360]	@ (8003fb0 <INIT_PERM_TARVOS+0x1ec>)
 8003e48:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 8003e4a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f8ac 	bl	8003fb8 <Get_CRC8>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 8003e66:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003e70:	2364      	movs	r3, #100	@ 0x64
 8003e72:	4850      	ldr	r0, [pc, #320]	@ (8003fb4 <INIT_PERM_TARVOS+0x1f0>)
 8003e74:	f008 f8fe 	bl	800c074 <HAL_UART_Transmit>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8003e84:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f88f 	bl	8003fb8 <Get_CRC8>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 8003ea0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003eaa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003eae:	4841      	ldr	r0, [pc, #260]	@ (8003fb4 <INIT_PERM_TARVOS+0x1f0>)
 8003eb0:	f008 f8e0 	bl	800c074 <HAL_UART_Transmit>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 8003ec0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	f107 031c 	add.w	r3, r7, #28
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f871 	bl	8003fb8 <Get_CRC8>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 8003edc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	f107 011c 	add.w	r1, r7, #28
 8003ee6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003eea:	4832      	ldr	r0, [pc, #200]	@ (8003fb4 <INIT_PERM_TARVOS+0x1f0>)
 8003eec:	f008 f8c2 	bl	800c074 <HAL_UART_Transmit>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8003efc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f853 	bl	8003fb8 <Get_CRC8>
 8003f12:	4603      	mov	r3, r0
 8003f14:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 8003f16:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	f107 0114 	add.w	r1, r7, #20
 8003f20:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003f24:	4823      	ldr	r0, [pc, #140]	@ (8003fb4 <INIT_PERM_TARVOS+0x1f0>)
 8003f26:	f008 f8a5 	bl	800c074 <HAL_UART_Transmit>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 8003f36:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f836 	bl	8003fb8 <Get_CRC8>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8003f50:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	f107 010c 	add.w	r1, r7, #12
 8003f5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003f5e:	4815      	ldr	r0, [pc, #84]	@ (8003fb4 <INIT_PERM_TARVOS+0x1f0>)
 8003f60:	f008 f888 	bl	800c074 <HAL_UART_Transmit>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8003f70:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	f107 0108 	add.w	r1, r7, #8
 8003f7a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003f7e:	480d      	ldr	r0, [pc, #52]	@ (8003fb4 <INIT_PERM_TARVOS+0x1f0>)
 8003f80:	f008 f878 	bl	800c074 <HAL_UART_Transmit>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8003f90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f94:	f001 fbaa 	bl	80056ec <HAL_Delay>
    return status;
 8003f98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3738      	adds	r7, #56	@ 0x38
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	0801a108 	.word	0x0801a108
 8003fa8:	0801a110 	.word	0x0801a110
 8003fac:	0801a118 	.word	0x0801a118
 8003fb0:	07000502 	.word	0x07000502
 8003fb4:	200014a4 	.word	0x200014a4

08003fb8 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8003fc8:	2300      	movs	r3, #0
 8003fca:	81bb      	strh	r3, [r7, #12]
 8003fcc:	e009      	b.n	8003fe2 <Get_CRC8+0x2a>
		crc ^= bufP[i];
 8003fce:	89bb      	ldrh	r3, [r7, #12]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	4053      	eors	r3, r2
 8003fda:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8003fdc:	89bb      	ldrh	r3, [r7, #12]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	81bb      	strh	r3, [r7, #12]
 8003fe2:	89ba      	ldrh	r2, [r7, #12]
 8003fe4:	887b      	ldrh	r3, [r7, #2]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d3f1      	bcc.n	8003fce <Get_CRC8+0x16>
	}
	return crc;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <SEND_DATA_NETW1>:

    return status;

}

void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8003ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	b08a      	sub	sp, #40	@ 0x28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	72fb      	strb	r3, [r7, #11]
 8004008:	4613      	mov	r3, r2
 800400a:	72bb      	strb	r3, [r7, #10]
 800400c:	466b      	mov	r3, sp
 800400e:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	1d9e      	adds	r6, r3, #6
 8004014:	1e73      	subs	r3, r6, #1
 8004016:	623b      	str	r3, [r7, #32]
 8004018:	4632      	mov	r2, r6
 800401a:	2300      	movs	r3, #0
 800401c:	4690      	mov	r8, r2
 800401e:	4699      	mov	r9, r3
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004030:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004034:	4632      	mov	r2, r6
 8004036:	2300      	movs	r3, #0
 8004038:	4614      	mov	r4, r2
 800403a:	461d      	mov	r5, r3
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	00eb      	lsls	r3, r5, #3
 8004046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404a:	00e2      	lsls	r2, r4, #3
 800404c:	4633      	mov	r3, r6
 800404e:	3307      	adds	r3, #7
 8004050:	08db      	lsrs	r3, r3, #3
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	ebad 0d03 	sub.w	sp, sp, r3
 8004058:	466b      	mov	r3, sp
 800405a:	3300      	adds	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2202      	movs	r2, #2
 8004062:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2201      	movs	r2, #1
 8004068:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	3302      	adds	r3, #2
 8004070:	b2da      	uxtb	r2, r3
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	7afa      	ldrb	r2, [r7, #11]
 800407a:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	7aba      	ldrb	r2, [r7, #10]
 8004080:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 8004082:	2300      	movs	r3, #0
 8004084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004088:	e00e      	b.n	80040a8 <SEND_DATA_NETW1+0xb0>
        trame[5 + i] = data[i];
 800408a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	441a      	add	r2, r3
 8004092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004096:	3305      	adds	r3, #5
 8004098:	7811      	ldrb	r1, [r2, #0]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 800409e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040a2:	3301      	adds	r3, #1
 80040a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80040a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	dceb      	bgt.n	800408a <SEND_DATA_NETW1+0x92>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3305      	adds	r3, #5
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	1d5c      	adds	r4, r3, #5
 80040be:	4611      	mov	r1, r2
 80040c0:	69f8      	ldr	r0, [r7, #28]
 80040c2:	f7ff ff79 	bl	8003fb8 <Get_CRC8>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 80040ce:	b2b2      	uxth	r2, r6
 80040d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040d4:	69f9      	ldr	r1, [r7, #28]
 80040d6:	4808      	ldr	r0, [pc, #32]	@ (80040f8 <SEND_DATA_NETW1+0x100>)
 80040d8:	f007 ffcc 	bl	800c074 <HAL_UART_Transmit>
    uint8_t bufferreceivetest[10];
    HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);
 80040dc:	f107 0310 	add.w	r3, r7, #16
 80040e0:	2205      	movs	r2, #5
 80040e2:	4619      	mov	r1, r3
 80040e4:	4804      	ldr	r0, [pc, #16]	@ (80040f8 <SEND_DATA_NETW1+0x100>)
 80040e6:	f008 f853 	bl	800c190 <HAL_UART_Receive_IT>
 80040ea:	46d5      	mov	sp, sl

}
 80040ec:	bf00      	nop
 80040ee:	3728      	adds	r7, #40	@ 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f6:	bf00      	nop
 80040f8:	200014a4 	.word	0x200014a4

080040fc <create_and_send_payload>:
	return status;

}

//payload size==54
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,uint8_t flag_sup,float latitude,float longitude,float hMSL,float altitude_baro,float vspeed,float hspeed,float temperature,float pression, float Accx, float Accy, float Accz, uint32_t timeindex){
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b09c      	sub	sp, #112	@ 0x70
 8004100:	af00      	add	r7, sp, #0
 8004102:	6378      	str	r0, [r7, #52]	@ 0x34
 8004104:	4608      	mov	r0, r1
 8004106:	4611      	mov	r1, r2
 8004108:	461a      	mov	r2, r3
 800410a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 800410e:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 8004112:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 8004116:	edc7 1a08 	vstr	s3, [r7, #32]
 800411a:	ed87 2a07 	vstr	s4, [r7, #28]
 800411e:	edc7 2a06 	vstr	s5, [r7, #24]
 8004122:	ed87 3a05 	vstr	s6, [r7, #20]
 8004126:	edc7 3a04 	vstr	s7, [r7, #16]
 800412a:	ed87 4a03 	vstr	s8, [r7, #12]
 800412e:	edc7 4a02 	vstr	s9, [r7, #8]
 8004132:	ed87 5a01 	vstr	s10, [r7, #4]
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800413c:	460b      	mov	r3, r1
 800413e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8004142:	4613      	mov	r3, r2
 8004144:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint8_t buffdonnee[54];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 8004146:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	b29b      	uxth	r3, r3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    buffdonnee[1] = header_code & 0xFF;
 8004152:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    buffdonnee[2] = flag_calib;
 800415a:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <create_and_send_payload+0xe8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    buffdonnee[3] = flag_drop;
 8004164:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <create_and_send_payload+0xec>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    buffdonnee[4] = flag_separation;
 800416e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ec <create_and_send_payload+0xf0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    buffdonnee[5] = flag_sup;
 8004178:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800417c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    memcpy(&buffdonnee[6],  &latitude,      sizeof(float));
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	f8c7 303e 	str.w	r3, [r7, #62]	@ 0x3e
    memcpy(&buffdonnee[10],  &longitude,     sizeof(float));
 8004186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004188:	f8c7 3042 	str.w	r3, [r7, #66]	@ 0x42
    memcpy(&buffdonnee[14], &hMSL,      sizeof(float));
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	f8c7 3046 	str.w	r3, [r7, #70]	@ 0x46
    memcpy(&buffdonnee[18], &altitude_baro, sizeof(float));
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f8c7 304a 	str.w	r3, [r7, #74]	@ 0x4a
    memcpy(&buffdonnee[22], &vspeed,        sizeof(float));
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f8c7 304e 	str.w	r3, [r7, #78]	@ 0x4e
    memcpy(&buffdonnee[26], &hspeed,        sizeof(float));
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f8c7 3052 	str.w	r3, [r7, #82]	@ 0x52
    memcpy(&buffdonnee[30], &temperature,    sizeof(float));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f8c7 3056 	str.w	r3, [r7, #86]	@ 0x56
    memcpy(&buffdonnee[34], &pression,    sizeof(float));
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f8c7 305a 	str.w	r3, [r7, #90]	@ 0x5a
    memcpy(&buffdonnee[38], &Accx,    sizeof(float));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f8c7 305e 	str.w	r3, [r7, #94]	@ 0x5e
    memcpy(&buffdonnee[42], &Accy,    sizeof(float));
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f8c7 3062 	str.w	r3, [r7, #98]	@ 0x62
    memcpy(&buffdonnee[46], &Accz,    sizeof(float));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8c7 3066 	str.w	r3, [r7, #102]	@ 0x66
    memcpy(&buffdonnee[50], &timeindex,    sizeof(uint32_t));
 80041c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041c4:	f8c7 306a 	str.w	r3, [r7, #106]	@ 0x6a

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);
 80041c8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80041cc:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80041d0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80041d4:	2336      	movs	r3, #54	@ 0x36
 80041d6:	f7ff ff0f 	bl	8003ff8 <SEND_DATA_NETW1>

}
 80041da:	bf00      	nop
 80041dc:	3770      	adds	r7, #112	@ 0x70
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000e2c 	.word	0x20000e2c
 80041e8:	20000e24 	.word	0x20000e24
 80041ec:	20000e28 	.word	0x20000e28

080041f0 <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	f040 80ba 	bne.w	8004378 <decode_payload+0x188>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b81      	cmp	r3, #129	@ 0x81
 800420c:	f040 80b4 	bne.w	8004378 <decode_payload+0x188>
		return;
	}
	if(receivingbuffer[2]!=56){
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	3302      	adds	r3, #2
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b38      	cmp	r3, #56	@ 0x38
 8004218:	f040 80b0 	bne.w	800437c <decode_payload+0x18c>
		return;
	}

	out->senderadress=receivingbuffer[3];
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	78da      	ldrb	r2, [r3, #3]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	3304      	adds	r3, #4
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b21b      	sxth	r3, r3
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	b21a      	sxth	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	3305      	adds	r3, #5
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b21b      	sxth	r3, r3
 800423a:	4313      	orrs	r3, r2
 800423c:	b21b      	sxth	r3, r3
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	799a      	ldrb	r2, [r3, #6]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	79da      	ldrb	r2, [r3, #7]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	7a1a      	ldrb	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_sup = receivingbuffer[9];
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	7a5a      	ldrb	r2, [r3, #9]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
#ifdef PARTIE_BAS
    if((out->header_code)==0x20){
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004274:	2b20      	cmp	r3, #32
 8004276:	d10d      	bne.n	8004294 <decode_payload+0xa4>

    	memcpy(&out->hMSL, &receivingbuffer[18], sizeof(float));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3350      	adds	r3, #80	@ 0x50
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	3212      	adds	r2, #18
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	601a      	str	r2, [r3, #0]
    	hauteur_Initiale=out->hMSL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004288:	4a3e      	ldr	r2, [pc, #248]	@ (8004384 <decode_payload+0x194>)
 800428a:	6013      	str	r3, [r2, #0]
    	flag_calib=1;
 800428c:	4b3e      	ldr	r3, [pc, #248]	@ (8004388 <decode_payload+0x198>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e04d      	b.n	8004330 <decode_payload+0x140>
 }
    else{
    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3348      	adds	r3, #72	@ 0x48
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	320a      	adds	r2, #10
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	334c      	adds	r3, #76	@ 0x4c
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	320e      	adds	r2, #14
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3350      	adds	r3, #80	@ 0x50
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	3212      	adds	r2, #18
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3354      	adds	r3, #84	@ 0x54
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	3216      	adds	r2, #22
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3358      	adds	r3, #88	@ 0x58
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	321a      	adds	r2, #26
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	335c      	adds	r3, #92	@ 0x5c
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	321e      	adds	r2, #30
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3360      	adds	r3, #96	@ 0x60
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	3222      	adds	r2, #34	@ 0x22
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3370      	adds	r3, #112	@ 0x70
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	3226      	adds	r2, #38	@ 0x26
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3364      	adds	r3, #100	@ 0x64
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	322a      	adds	r2, #42	@ 0x2a
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3368      	adds	r3, #104	@ 0x68
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	322e      	adds	r2, #46	@ 0x2e
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	336c      	adds	r3, #108	@ 0x6c
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	3232      	adds	r2, #50	@ 0x32
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3374      	adds	r3, #116	@ 0x74
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	3236      	adds	r2, #54	@ 0x36
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3378      	adds	r3, #120	@ 0x78
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	323a      	adds	r2, #58	@ 0x3a
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	701a      	strb	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
#endif


#ifdef PARTIE_BAS
    if(noreturn_flag1==0){
 8004330:	4b16      	ldr	r3, [pc, #88]	@ (800438c <decode_payload+0x19c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <decode_payload+0x15e>
    if(receivingbuffer[6]==1){
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	3306      	adds	r3, #6
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d102      	bne.n	8004348 <decode_payload+0x158>
    	flag_drop=1;
 8004342:	4b13      	ldr	r3, [pc, #76]	@ (8004390 <decode_payload+0x1a0>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    }
    noreturn_flag1=1;
 8004348:	4b10      	ldr	r3, [pc, #64]	@ (800438c <decode_payload+0x19c>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    }
    if(noreturn_flag2==0){
 800434e:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <decode_payload+0x1a4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <decode_payload+0x17c>
    if(receivingbuffer[7]==1){
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3307      	adds	r3, #7
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d102      	bne.n	8004366 <decode_payload+0x176>
    	flag_separation=1;
 8004360:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <decode_payload+0x1a8>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]
    }
    noreturn_flag2=1;
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <decode_payload+0x1a4>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    }

#endif

    memset((uint8_t *)receivingbuffer,0,64);
 800436c:	2240      	movs	r2, #64	@ 0x40
 800436e:	2100      	movs	r1, #0
 8004370:	6838      	ldr	r0, [r7, #0]
 8004372:	f010 fded 	bl	8014f50 <memset>
 8004376:	e002      	b.n	800437e <decode_payload+0x18e>
		return;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <decode_payload+0x18e>
		return;
 800437c:	bf00      	nop
}
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000e3c 	.word	0x20000e3c
 8004388:	20000e2c 	.word	0x20000e2c
 800438c:	20001350 	.word	0x20001350
 8004390:	20000e24 	.word	0x20000e24
 8004394:	20001354 	.word	0x20001354
 8004398:	20000e28 	.word	0x20000e28

0800439c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08e      	sub	sp, #56	@ 0x38
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b0:	f107 031c 	add.w	r3, r7, #28
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043bc:	463b      	mov	r3, r7
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	615a      	str	r2, [r3, #20]
 80043cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004484 <MX_TIM2_Init+0xe8>)
 80043d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80043d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80043d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <MX_TIM2_Init+0xe8>)
 80043d8:	2200      	movs	r2, #0
 80043da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043dc:	4b29      	ldr	r3, [pc, #164]	@ (8004484 <MX_TIM2_Init+0xe8>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 80043e2:	4b28      	ldr	r3, [pc, #160]	@ (8004484 <MX_TIM2_Init+0xe8>)
 80043e4:	2277      	movs	r2, #119	@ 0x77
 80043e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043e8:	4b26      	ldr	r3, [pc, #152]	@ (8004484 <MX_TIM2_Init+0xe8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ee:	4b25      	ldr	r3, [pc, #148]	@ (8004484 <MX_TIM2_Init+0xe8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043f4:	4823      	ldr	r0, [pc, #140]	@ (8004484 <MX_TIM2_Init+0xe8>)
 80043f6:	f005 fea5 	bl	800a144 <HAL_TIM_Base_Init>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004400:	f7fe fd70 	bl	8002ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800440a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800440e:	4619      	mov	r1, r3
 8004410:	481c      	ldr	r0, [pc, #112]	@ (8004484 <MX_TIM2_Init+0xe8>)
 8004412:	f006 fec5 	bl	800b1a0 <HAL_TIM_ConfigClockSource>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800441c:	f7fe fd62 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004420:	4818      	ldr	r0, [pc, #96]	@ (8004484 <MX_TIM2_Init+0xe8>)
 8004422:	f005 ff51 	bl	800a2c8 <HAL_TIM_PWM_Init>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800442c:	f7fe fd5a 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004434:	2300      	movs	r3, #0
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004438:	f107 031c 	add.w	r3, r7, #28
 800443c:	4619      	mov	r1, r3
 800443e:	4811      	ldr	r0, [pc, #68]	@ (8004484 <MX_TIM2_Init+0xe8>)
 8004440:	f007 fd00 	bl	800be44 <HAL_TIMEx_MasterConfigSynchronization>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800444a:	f7fe fd4b 	bl	8002ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800444e:	2360      	movs	r3, #96	@ 0x60
 8004450:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800445a:	2304      	movs	r3, #4
 800445c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800445e:	463b      	mov	r3, r7
 8004460:	2204      	movs	r2, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4807      	ldr	r0, [pc, #28]	@ (8004484 <MX_TIM2_Init+0xe8>)
 8004466:	f006 fd87 	bl	800af78 <HAL_TIM_PWM_ConfigChannel>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004470:	f7fe fd38 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004474:	4803      	ldr	r0, [pc, #12]	@ (8004484 <MX_TIM2_Init+0xe8>)
 8004476:	f000 f94f 	bl	8004718 <HAL_TIM_MspPostInit>

}
 800447a:	bf00      	nop
 800447c:	3738      	adds	r7, #56	@ 0x38
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20001358 	.word	0x20001358

08004488 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	@ 0x38
 800448c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800448e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800449c:	f107 031c 	add.w	r3, r7, #28
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044a8:	463b      	mov	r3, r7
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	615a      	str	r2, [r3, #20]
 80044b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004570 <MX_TIM3_Init+0xe8>)
 80044bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004574 <MX_TIM3_Init+0xec>)
 80044be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80044c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004570 <MX_TIM3_Init+0xe8>)
 80044c2:	2263      	movs	r2, #99	@ 0x63
 80044c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004570 <MX_TIM3_Init+0xe8>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80044cc:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <MX_TIM3_Init+0xe8>)
 80044ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80044d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d4:	4b26      	ldr	r3, [pc, #152]	@ (8004570 <MX_TIM3_Init+0xe8>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044da:	4b25      	ldr	r3, [pc, #148]	@ (8004570 <MX_TIM3_Init+0xe8>)
 80044dc:	2280      	movs	r2, #128	@ 0x80
 80044de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80044e0:	4823      	ldr	r0, [pc, #140]	@ (8004570 <MX_TIM3_Init+0xe8>)
 80044e2:	f005 fe2f 	bl	800a144 <HAL_TIM_Base_Init>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80044ec:	f7fe fcfa 	bl	8002ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044fa:	4619      	mov	r1, r3
 80044fc:	481c      	ldr	r0, [pc, #112]	@ (8004570 <MX_TIM3_Init+0xe8>)
 80044fe:	f006 fe4f 	bl	800b1a0 <HAL_TIM_ConfigClockSource>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004508:	f7fe fcec 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800450c:	4818      	ldr	r0, [pc, #96]	@ (8004570 <MX_TIM3_Init+0xe8>)
 800450e:	f005 fedb 	bl	800a2c8 <HAL_TIM_PWM_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004518:	f7fe fce4 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004520:	2300      	movs	r3, #0
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004524:	f107 031c 	add.w	r3, r7, #28
 8004528:	4619      	mov	r1, r3
 800452a:	4811      	ldr	r0, [pc, #68]	@ (8004570 <MX_TIM3_Init+0xe8>)
 800452c:	f007 fc8a 	bl	800be44 <HAL_TIMEx_MasterConfigSynchronization>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004536:	f7fe fcd5 	bl	8002ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800453a:	2360      	movs	r3, #96	@ 0x60
 800453c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800454a:	463b      	mov	r3, r7
 800454c:	2200      	movs	r2, #0
 800454e:	4619      	mov	r1, r3
 8004550:	4807      	ldr	r0, [pc, #28]	@ (8004570 <MX_TIM3_Init+0xe8>)
 8004552:	f006 fd11 	bl	800af78 <HAL_TIM_PWM_ConfigChannel>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800455c:	f7fe fcc2 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004560:	4803      	ldr	r0, [pc, #12]	@ (8004570 <MX_TIM3_Init+0xe8>)
 8004562:	f000 f8d9 	bl	8004718 <HAL_TIM_MspPostInit>

}
 8004566:	bf00      	nop
 8004568:	3738      	adds	r7, #56	@ 0x38
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	200013a4 	.word	0x200013a4
 8004574:	40000400 	.word	0x40000400

08004578 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800457e:	f107 0310 	add.w	r3, r7, #16
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004596:	4b1d      	ldr	r3, [pc, #116]	@ (800460c <MX_TIM4_Init+0x94>)
 8004598:	4a1d      	ldr	r2, [pc, #116]	@ (8004610 <MX_TIM4_Init+0x98>)
 800459a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800459c:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <MX_TIM4_Init+0x94>)
 800459e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80045a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a4:	4b19      	ldr	r3, [pc, #100]	@ (800460c <MX_TIM4_Init+0x94>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80045aa:	4b18      	ldr	r3, [pc, #96]	@ (800460c <MX_TIM4_Init+0x94>)
 80045ac:	2209      	movs	r2, #9
 80045ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b0:	4b16      	ldr	r3, [pc, #88]	@ (800460c <MX_TIM4_Init+0x94>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045b6:	4b15      	ldr	r3, [pc, #84]	@ (800460c <MX_TIM4_Init+0x94>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045bc:	4813      	ldr	r0, [pc, #76]	@ (800460c <MX_TIM4_Init+0x94>)
 80045be:	f005 fdc1 	bl	800a144 <HAL_TIM_Base_Init>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80045c8:	f7fe fc8c 	bl	8002ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80045d2:	f107 0310 	add.w	r3, r7, #16
 80045d6:	4619      	mov	r1, r3
 80045d8:	480c      	ldr	r0, [pc, #48]	@ (800460c <MX_TIM4_Init+0x94>)
 80045da:	f006 fde1 	bl	800b1a0 <HAL_TIM_ConfigClockSource>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80045e4:	f7fe fc7e 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e8:	2300      	movs	r3, #0
 80045ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4805      	ldr	r0, [pc, #20]	@ (800460c <MX_TIM4_Init+0x94>)
 80045f6:	f007 fc25 	bl	800be44 <HAL_TIMEx_MasterConfigSynchronization>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004600:	f7fe fc70 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004604:	bf00      	nop
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	200013f0 	.word	0x200013f0
 8004610:	40000800 	.word	0x40000800

08004614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004624:	d13e      	bne.n	80046a4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004626:	4b37      	ldr	r3, [pc, #220]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	4a36      	ldr	r2, [pc, #216]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6593      	str	r3, [r2, #88]	@ 0x58
 8004632:	4b34      	ldr	r3, [pc, #208]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 800463e:	4b32      	ldr	r3, [pc, #200]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 8004640:	4a32      	ldr	r2, [pc, #200]	@ (800470c <HAL_TIM_Base_MspInit+0xf8>)
 8004642:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8004644:	4b30      	ldr	r3, [pc, #192]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 8004646:	2239      	movs	r2, #57	@ 0x39
 8004648:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800464a:	4b2f      	ldr	r3, [pc, #188]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 800464c:	2210      	movs	r2, #16
 800464e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004650:	4b2d      	ldr	r3, [pc, #180]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 8004652:	2200      	movs	r2, #0
 8004654:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004656:	4b2c      	ldr	r3, [pc, #176]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 8004658:	2280      	movs	r2, #128	@ 0x80
 800465a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800465c:	4b2a      	ldr	r3, [pc, #168]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 800465e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004662:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004664:	4b28      	ldr	r3, [pc, #160]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 8004666:	2200      	movs	r2, #0
 8004668:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 800466a:	4b27      	ldr	r3, [pc, #156]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 800466c:	2200      	movs	r2, #0
 800466e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004670:	4b25      	ldr	r3, [pc, #148]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 8004672:	2200      	movs	r2, #0
 8004674:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8004676:	4824      	ldr	r0, [pc, #144]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 8004678:	f002 fdf0 	bl	800725c <HAL_DMA_Init>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8004682:	f7fe fc2f 	bl	8002ee4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1f      	ldr	r2, [pc, #124]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 800468a:	629a      	str	r2, [r3, #40]	@ 0x28
 800468c:	4a1e      	ldr	r2, [pc, #120]	@ (8004708 <HAL_TIM_Base_MspInit+0xf4>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004692:	2200      	movs	r2, #0
 8004694:	2105      	movs	r1, #5
 8004696:	201c      	movs	r0, #28
 8004698:	f002 fdb8 	bl	800720c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800469c:	201c      	movs	r0, #28
 800469e:	f002 fdcf 	bl	8007240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80046a2:	e02a      	b.n	80046fa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <HAL_TIM_Base_MspInit+0xfc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10c      	bne.n	80046c8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046ae:	4b15      	ldr	r3, [pc, #84]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	4a14      	ldr	r2, [pc, #80]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ba:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693b      	ldr	r3, [r7, #16]
}
 80046c6:	e018      	b.n	80046fa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a11      	ldr	r2, [pc, #68]	@ (8004714 <HAL_TIM_Base_MspInit+0x100>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d113      	bne.n	80046fa <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 80046d8:	f043 0304 	orr.w	r3, r3, #4
 80046dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80046de:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <HAL_TIM_Base_MspInit+0xf0>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2106      	movs	r1, #6
 80046ee:	201e      	movs	r0, #30
 80046f0:	f002 fd8c 	bl	800720c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80046f4:	201e      	movs	r0, #30
 80046f6:	f002 fda3 	bl	8007240 <HAL_NVIC_EnableIRQ>
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000
 8004708:	2000143c 	.word	0x2000143c
 800470c:	40020008 	.word	0x40020008
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800

08004718 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	@ 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004738:	d11d      	bne.n	8004776 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800473a:	4b21      	ldr	r3, [pc, #132]	@ (80047c0 <HAL_TIM_MspPostInit+0xa8>)
 800473c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473e:	4a20      	ldr	r2, [pc, #128]	@ (80047c0 <HAL_TIM_MspPostInit+0xa8>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004746:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <HAL_TIM_MspPostInit+0xa8>)
 8004748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004752:	2302      	movs	r3, #2
 8004754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004756:	2302      	movs	r3, #2
 8004758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800475e:	2301      	movs	r3, #1
 8004760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004762:	2301      	movs	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4619      	mov	r1, r3
 800476c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004770:	f003 f8b2 	bl	80078d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004774:	e020      	b.n	80047b8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a12      	ldr	r2, [pc, #72]	@ (80047c4 <HAL_TIM_MspPostInit+0xac>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d11b      	bne.n	80047b8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004780:	4b0f      	ldr	r3, [pc, #60]	@ (80047c0 <HAL_TIM_MspPostInit+0xa8>)
 8004782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004784:	4a0e      	ldr	r2, [pc, #56]	@ (80047c0 <HAL_TIM_MspPostInit+0xa8>)
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800478c:	4b0c      	ldr	r3, [pc, #48]	@ (80047c0 <HAL_TIM_MspPostInit+0xa8>)
 800478e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004798:	2340      	movs	r3, #64	@ 0x40
 800479a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a4:	2300      	movs	r3, #0
 80047a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047a8:	2302      	movs	r3, #2
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ac:	f107 0314 	add.w	r3, r7, #20
 80047b0:	4619      	mov	r1, r3
 80047b2:	4805      	ldr	r0, [pc, #20]	@ (80047c8 <HAL_TIM_MspPostInit+0xb0>)
 80047b4:	f003 f890 	bl	80078d8 <HAL_GPIO_Init>
}
 80047b8:	bf00      	nop
 80047ba:	3728      	adds	r7, #40	@ 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40000400 	.word	0x40000400
 80047c8:	48000800 	.word	0x48000800

080047cc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80047d0:	4b21      	ldr	r3, [pc, #132]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 80047d2:	4a22      	ldr	r2, [pc, #136]	@ (800485c <MX_LPUART1_UART_Init+0x90>)
 80047d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80047d6:	4b20      	ldr	r3, [pc, #128]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 80047d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80047dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047de:	4b1e      	ldr	r3, [pc, #120]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80047e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80047ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80047f0:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 80047f2:	220c      	movs	r2, #12
 80047f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047f6:	4b18      	ldr	r3, [pc, #96]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047fc:	4b16      	ldr	r3, [pc, #88]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004802:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 8004804:	2200      	movs	r2, #0
 8004806:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004808:	4b13      	ldr	r3, [pc, #76]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 800480a:	2200      	movs	r2, #0
 800480c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800480e:	4812      	ldr	r0, [pc, #72]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 8004810:	f007 fbe0 	bl	800bfd4 <HAL_UART_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800481a:	f7fe fb63 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800481e:	2100      	movs	r1, #0
 8004820:	480d      	ldr	r0, [pc, #52]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 8004822:	f009 ff66 	bl	800e6f2 <HAL_UARTEx_SetTxFifoThreshold>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800482c:	f7fe fb5a 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004830:	2100      	movs	r1, #0
 8004832:	4809      	ldr	r0, [pc, #36]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 8004834:	f009 ff9b 	bl	800e76e <HAL_UARTEx_SetRxFifoThreshold>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800483e:	f7fe fb51 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004842:	4805      	ldr	r0, [pc, #20]	@ (8004858 <MX_LPUART1_UART_Init+0x8c>)
 8004844:	f009 ff1c 	bl	800e680 <HAL_UARTEx_DisableFifoMode>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800484e:	f7fe fb49 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	200014a4 	.word	0x200014a4
 800485c:	40008000 	.word	0x40008000

08004860 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004864:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 8004866:	4a23      	ldr	r2, [pc, #140]	@ (80048f4 <MX_USART1_UART_Init+0x94>)
 8004868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800486a:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 800486c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004872:	4b1f      	ldr	r3, [pc, #124]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004878:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 800487a:	2200      	movs	r2, #0
 800487c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800487e:	4b1c      	ldr	r3, [pc, #112]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 8004880:	2200      	movs	r2, #0
 8004882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 8004886:	220c      	movs	r2, #12
 8004888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800488a:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004890:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 8004892:	2200      	movs	r2, #0
 8004894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004896:	4b16      	ldr	r3, [pc, #88]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 8004898:	2200      	movs	r2, #0
 800489a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800489c:	4b14      	ldr	r3, [pc, #80]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 800489e:	2200      	movs	r2, #0
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048a2:	4b13      	ldr	r3, [pc, #76]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048a8:	4811      	ldr	r0, [pc, #68]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 80048aa:	f007 fb93 	bl	800bfd4 <HAL_UART_Init>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80048b4:	f7fe fb16 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048b8:	2100      	movs	r1, #0
 80048ba:	480d      	ldr	r0, [pc, #52]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 80048bc:	f009 ff19 	bl	800e6f2 <HAL_UARTEx_SetTxFifoThreshold>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80048c6:	f7fe fb0d 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048ca:	2100      	movs	r1, #0
 80048cc:	4808      	ldr	r0, [pc, #32]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 80048ce:	f009 ff4e 	bl	800e76e <HAL_UARTEx_SetRxFifoThreshold>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80048d8:	f7fe fb04 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80048dc:	4804      	ldr	r0, [pc, #16]	@ (80048f0 <MX_USART1_UART_Init+0x90>)
 80048de:	f009 fecf 	bl	800e680 <HAL_UARTEx_DisableFifoMode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80048e8:	f7fe fafc 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20001538 	.word	0x20001538
 80048f4:	40013800 	.word	0x40013800

080048f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b09e      	sub	sp, #120	@ 0x78
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004910:	f107 0320 	add.w	r3, r7, #32
 8004914:	2244      	movs	r2, #68	@ 0x44
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f010 fb19 	bl	8014f50 <memset>
  if(uartHandle->Instance==LPUART1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a7e      	ldr	r2, [pc, #504]	@ (8004b1c <HAL_UART_MspInit+0x224>)
 8004924:	4293      	cmp	r3, r2
 8004926:	f040 8087 	bne.w	8004a38 <HAL_UART_MspInit+0x140>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800492a:	2320      	movs	r3, #32
 800492c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004932:	f107 0320 	add.w	r3, r7, #32
 8004936:	4618      	mov	r0, r3
 8004938:	f004 fde6 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004942:	f7fe facf 	bl	8002ee4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004946:	4b76      	ldr	r3, [pc, #472]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494a:	4a75      	ldr	r2, [pc, #468]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004952:	4b73      	ldr	r3, [pc, #460]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800495e:	4b70      	ldr	r3, [pc, #448]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004962:	4a6f      	ldr	r2, [pc, #444]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800496a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004976:	4b6a      	ldr	r3, [pc, #424]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497a:	4a69      	ldr	r2, [pc, #420]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004982:	4b67      	ldr	r3, [pc, #412]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800498e:	2308      	movs	r3, #8
 8004990:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004992:	2302      	movs	r3, #2
 8004994:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	2300      	movs	r3, #0
 8004998:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499a:	2300      	movs	r3, #0
 800499c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800499e:	230c      	movs	r3, #12
 80049a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80049a6:	4619      	mov	r1, r3
 80049a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049ac:	f002 ff94 	bl	80078d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80049b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049b4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b6:	2302      	movs	r3, #2
 80049b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049be:	2300      	movs	r3, #0
 80049c0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80049c2:	2308      	movs	r3, #8
 80049c4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80049ca:	4619      	mov	r1, r3
 80049cc:	4855      	ldr	r0, [pc, #340]	@ (8004b24 <HAL_UART_MspInit+0x22c>)
 80049ce:	f002 ff83 	bl	80078d8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 80049d2:	4b55      	ldr	r3, [pc, #340]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 80049d4:	4a55      	ldr	r2, [pc, #340]	@ (8004b2c <HAL_UART_MspInit+0x234>)
 80049d6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80049d8:	4b53      	ldr	r3, [pc, #332]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 80049da:	2222      	movs	r2, #34	@ 0x22
 80049dc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049de:	4b52      	ldr	r3, [pc, #328]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049e4:	4b50      	ldr	r3, [pc, #320]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 80049ec:	2280      	movs	r2, #128	@ 0x80
 80049ee:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80049fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 80049fe:	2220      	movs	r2, #32
 8004a00:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a02:	4b49      	ldr	r3, [pc, #292]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004a08:	4847      	ldr	r0, [pc, #284]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 8004a0a:	f002 fc27 	bl	800725c <HAL_DMA_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8004a14:	f7fe fa66 	bl	8002ee4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a43      	ldr	r2, [pc, #268]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 8004a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004a20:	4a41      	ldr	r2, [pc, #260]	@ (8004b28 <HAL_UART_MspInit+0x230>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8004a26:	2200      	movs	r2, #0
 8004a28:	2105      	movs	r1, #5
 8004a2a:	205b      	movs	r0, #91	@ 0x5b
 8004a2c:	f002 fbee 	bl	800720c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004a30:	205b      	movs	r0, #91	@ 0x5b
 8004a32:	f002 fc05 	bl	8007240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004a36:	e06c      	b.n	8004b12 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==USART1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b30 <HAL_UART_MspInit+0x238>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d167      	bne.n	8004b12 <HAL_UART_MspInit+0x21a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004a46:	2300      	movs	r3, #0
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a4a:	f107 0320 	add.w	r3, r7, #32
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f004 fd5a 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_UART_MspInit+0x166>
      Error_Handler();
 8004a5a:	f7fe fa43 	bl	8002ee4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a5e:	4b30      	ldr	r3, [pc, #192]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a62:	4a2f      	ldr	r2, [pc, #188]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a68:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a76:	4b2a      	ldr	r3, [pc, #168]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	4a29      	ldr	r2, [pc, #164]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004a7c:	f043 0302 	orr.w	r3, r3, #2
 8004a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a82:	4b27      	ldr	r3, [pc, #156]	@ (8004b20 <HAL_UART_MspInit+0x228>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a8e:	23c0      	movs	r3, #192	@ 0xc0
 8004a90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	2302      	movs	r3, #2
 8004a94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a9e:	2307      	movs	r3, #7
 8004aa0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	481e      	ldr	r0, [pc, #120]	@ (8004b24 <HAL_UART_MspInit+0x22c>)
 8004aaa:	f002 ff15 	bl	80078d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004aae:	4b21      	ldr	r3, [pc, #132]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ab0:	4a21      	ldr	r2, [pc, #132]	@ (8004b38 <HAL_UART_MspInit+0x240>)
 8004ab2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ab6:	2218      	movs	r2, #24
 8004ab8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aba:	4b1e      	ldr	r3, [pc, #120]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ac8:	2280      	movs	r2, #128	@ 0x80
 8004aca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004acc:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad2:	4b18      	ldr	r3, [pc, #96]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004ad8:	4b16      	ldr	r3, [pc, #88]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ada:	2220      	movs	r2, #32
 8004adc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ade:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004ae4:	4813      	ldr	r0, [pc, #76]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004ae6:	f002 fbb9 	bl	800725c <HAL_DMA_Init>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004af0:	f7fe f9f8 	bl	8002ee4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a0f      	ldr	r2, [pc, #60]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004af8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004afc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b34 <HAL_UART_MspInit+0x23c>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004b02:	2200      	movs	r2, #0
 8004b04:	2105      	movs	r1, #5
 8004b06:	2025      	movs	r0, #37	@ 0x25
 8004b08:	f002 fb80 	bl	800720c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b0c:	2025      	movs	r0, #37	@ 0x25
 8004b0e:	f002 fb97 	bl	8007240 <HAL_NVIC_EnableIRQ>
}
 8004b12:	bf00      	nop
 8004b14:	3778      	adds	r7, #120	@ 0x78
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40008000 	.word	0x40008000
 8004b20:	40021000 	.word	0x40021000
 8004b24:	48000400 	.word	0x48000400
 8004b28:	200015cc 	.word	0x200015cc
 8004b2c:	40020030 	.word	0x40020030
 8004b30:	40013800 	.word	0x40013800
 8004b34:	2000162c 	.word	0x2000162c
 8004b38:	40020058 	.word	0x40020058

08004b3c <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a3b      	ldr	r2, [pc, #236]	@ (8004c38 <HAL_UART_RxCpltCallback+0xfc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d114      	bne.n	8004b78 <HAL_UART_RxCpltCallback+0x3c>

		received_flag=1;
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c3c <HAL_UART_RxCpltCallback+0x100>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 8004b54:	2264      	movs	r2, #100	@ 0x64
 8004b56:	493a      	ldr	r1, [pc, #232]	@ (8004c40 <HAL_UART_RxCpltCallback+0x104>)
 8004b58:	483a      	ldr	r0, [pc, #232]	@ (8004c44 <HAL_UART_RxCpltCallback+0x108>)
 8004b5a:	f010 fa78 	bl	801504e <memcpy>
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 8004b5e:	2264      	movs	r2, #100	@ 0x64
 8004b60:	4937      	ldr	r1, [pc, #220]	@ (8004c40 <HAL_UART_RxCpltCallback+0x104>)
 8004b62:	4839      	ldr	r0, [pc, #228]	@ (8004c48 <HAL_UART_RxCpltCallback+0x10c>)
 8004b64:	f007 fb60 	bl	800c228 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8004b68:	4b38      	ldr	r3, [pc, #224]	@ (8004c4c <HAL_UART_RxCpltCallback+0x110>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b37      	ldr	r3, [pc, #220]	@ (8004c4c <HAL_UART_RxCpltCallback+0x110>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0204 	bic.w	r2, r2, #4
 8004b76:	601a      	str	r2, [r3, #0]

	}
	if(huart->Instance==LPUART1){
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a34      	ldr	r2, [pc, #208]	@ (8004c50 <HAL_UART_RxCpltCallback+0x114>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d156      	bne.n	8004c30 <HAL_UART_RxCpltCallback+0xf4>



		if(receivingflag==0){
 8004b82:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <HAL_UART_RxCpltCallback+0x118>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d122      	bne.n	8004bd0 <HAL_UART_RxCpltCallback+0x94>
		if(tarvos_RX_Buffer[1]==0x81 && tarvos_RX_Buffer[0]==0x02){
 8004b8a:	4b33      	ldr	r3, [pc, #204]	@ (8004c58 <HAL_UART_RxCpltCallback+0x11c>)
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b81      	cmp	r3, #129	@ 0x81
 8004b90:	d110      	bne.n	8004bb4 <HAL_UART_RxCpltCallback+0x78>
 8004b92:	4b31      	ldr	r3, [pc, #196]	@ (8004c58 <HAL_UART_RxCpltCallback+0x11c>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d10c      	bne.n	8004bb4 <HAL_UART_RxCpltCallback+0x78>

			memcpy((uint8_t *) tarvos_DATA,(uint8_t *)tarvos_RX_Buffer,5);
 8004b9a:	2205      	movs	r2, #5
 8004b9c:	492e      	ldr	r1, [pc, #184]	@ (8004c58 <HAL_UART_RxCpltCallback+0x11c>)
 8004b9e:	482f      	ldr	r0, [pc, #188]	@ (8004c5c <HAL_UART_RxCpltCallback+0x120>)
 8004ba0:	f010 fa55 	bl	801504e <memcpy>




			receivingflag=1;
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c54 <HAL_UART_RxCpltCallback+0x118>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
			receivingindex++;
 8004baa:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <HAL_UART_RxCpltCallback+0x124>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c60 <HAL_UART_RxCpltCallback+0x124>)
 8004bb2:	6013      	str	r3, [r2, #0]
		}

		if(tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[0]==0x02){
 8004bb4:	4b28      	ldr	r3, [pc, #160]	@ (8004c58 <HAL_UART_RxCpltCallback+0x11c>)
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b40      	cmp	r3, #64	@ 0x40
 8004bba:	d11f      	bne.n	8004bfc <HAL_UART_RxCpltCallback+0xc0>
 8004bbc:	4b26      	ldr	r3, [pc, #152]	@ (8004c58 <HAL_UART_RxCpltCallback+0x11c>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d11b      	bne.n	8004bfc <HAL_UART_RxCpltCallback+0xc0>
					memset((uint8_t *)tarvos_RX_Buffer,0,5);
 8004bc4:	2205      	movs	r2, #5
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4823      	ldr	r0, [pc, #140]	@ (8004c58 <HAL_UART_RxCpltCallback+0x11c>)
 8004bca:	f010 f9c1 	bl	8014f50 <memset>
 8004bce:	e015      	b.n	8004bfc <HAL_UART_RxCpltCallback+0xc0>
				}


		}
		else{
			if(receivingindex!=0){
 8004bd0:	4b23      	ldr	r3, [pc, #140]	@ (8004c60 <HAL_UART_RxCpltCallback+0x124>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <HAL_UART_RxCpltCallback+0xc0>
				memcpy((uint8_t *) tarvos_DATA+(5*receivingindex),(uint8_t *)tarvos_RX_Buffer,5);
 8004bd8:	4b21      	ldr	r3, [pc, #132]	@ (8004c60 <HAL_UART_RxCpltCallback+0x124>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	461a      	mov	r2, r3
 8004be4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <HAL_UART_RxCpltCallback+0x120>)
 8004be6:	4413      	add	r3, r2
 8004be8:	2205      	movs	r2, #5
 8004bea:	491b      	ldr	r1, [pc, #108]	@ (8004c58 <HAL_UART_RxCpltCallback+0x11c>)
 8004bec:	4618      	mov	r0, r3
 8004bee:	f010 fa2e 	bl	801504e <memcpy>
				receivingindex++;
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <HAL_UART_RxCpltCallback+0x124>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <HAL_UART_RxCpltCallback+0x124>)
 8004bfa:	6013      	str	r3, [r2, #0]
			}
		}

		if(receivingindex==12){
 8004bfc:	4b18      	ldr	r3, [pc, #96]	@ (8004c60 <HAL_UART_RxCpltCallback+0x124>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	d108      	bne.n	8004c16 <HAL_UART_RxCpltCallback+0xda>
			receivingindex=0;
 8004c04:	4b16      	ldr	r3, [pc, #88]	@ (8004c60 <HAL_UART_RxCpltCallback+0x124>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
			receivingflag=0;
 8004c0a:	4b12      	ldr	r3, [pc, #72]	@ (8004c54 <HAL_UART_RxCpltCallback+0x118>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
			trameready=1;
 8004c10:	4b14      	ldr	r3, [pc, #80]	@ (8004c64 <HAL_UART_RxCpltCallback+0x128>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
		}
						HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5);//on recoit par dma à nouveau 64 caractères
 8004c16:	2205      	movs	r2, #5
 8004c18:	490f      	ldr	r1, [pc, #60]	@ (8004c58 <HAL_UART_RxCpltCallback+0x11c>)
 8004c1a:	480b      	ldr	r0, [pc, #44]	@ (8004c48 <HAL_UART_RxCpltCallback+0x10c>)
 8004c1c:	f007 fb04 	bl	800c228 <HAL_UART_Receive_DMA>
						__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8004c20:	4b11      	ldr	r3, [pc, #68]	@ (8004c68 <HAL_UART_RxCpltCallback+0x12c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <HAL_UART_RxCpltCallback+0x12c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0204 	bic.w	r2, r2, #4
 8004c2e:	601a      	str	r2, [r3, #0]

		}


}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	20000e48 	.word	0x20000e48
 8004c40:	200004f4 	.word	0x200004f4
 8004c44:	20000c20 	.word	0x20000c20
 8004c48:	200014a4 	.word	0x200014a4
 8004c4c:	2000162c 	.word	0x2000162c
 8004c50:	40008000 	.word	0x40008000
 8004c54:	2000149c 	.word	0x2000149c
 8004c58:	200004b4 	.word	0x200004b4
 8004c5c:	20000474 	.word	0x20000474
 8004c60:	200014a0 	.word	0x200014a0
 8004c64:	20000e4c 	.word	0x20000e4c
 8004c68:	200015cc 	.word	0x200015cc

08004c6c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004c74:	f000 fd2e 	bl	80056d4 <HAL_GetTick>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4a04      	ldr	r2, [pc, #16]	@ (8004c8c <SPI_Timer_On+0x20>)
 8004c7c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004c7e:	4a04      	ldr	r2, [pc, #16]	@ (8004c90 <SPI_Timer_On+0x24>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6013      	str	r3, [r2, #0]
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20001690 	.word	0x20001690
 8004c90:	20001694 	.word	0x20001694

08004c94 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004c98:	f000 fd1c 	bl	80056d4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	4b06      	ldr	r3, [pc, #24]	@ (8004cb8 <SPI_Timer_Status+0x24>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	1ad2      	subs	r2, r2, r3
 8004ca4:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <SPI_Timer_Status+0x28>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	bf34      	ite	cc
 8004cac:	2301      	movcc	r3, #1
 8004cae:	2300      	movcs	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20001690 	.word	0x20001690
 8004cbc:	20001694 	.word	0x20001694

08004cc0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004cca:	f107 020f 	add.w	r2, r7, #15
 8004cce:	1df9      	adds	r1, r7, #7
 8004cd0:	2332      	movs	r3, #50	@ 0x32
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4804      	ldr	r0, [pc, #16]	@ (8004ce8 <xchg_spi+0x28>)
 8004cd8:	f004 feb1 	bl	8009a3e <HAL_SPI_TransmitReceive>
    return rxDat;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000e54 	.word	0x20000e54

08004cec <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e00a      	b.n	8004d12 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	18d4      	adds	r4, r2, r3
 8004d02:	20ff      	movs	r0, #255	@ 0xff
 8004d04:	f7ff ffdc 	bl	8004cc0 <xchg_spi>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d3f0      	bcc.n	8004cfc <rcvr_spi_multi+0x10>
	}
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd90      	pop	{r4, r7, pc}

08004d24 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e009      	b.n	8004d48 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ffbf 	bl	8004cc0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d3f1      	bcc.n	8004d34 <xmit_spi_multi+0x10>
	}
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004d62:	f000 fcb7 	bl	80056d4 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004d6c:	20ff      	movs	r0, #255	@ 0xff
 8004d6e:	f7ff ffa7 	bl	8004cc0 <xchg_spi>
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2bff      	cmp	r3, #255	@ 0xff
 8004d7a:	d007      	beq.n	8004d8c <wait_ready+0x32>
 8004d7c:	f000 fcaa 	bl	80056d4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d8ef      	bhi.n	8004d6c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2bff      	cmp	r3, #255	@ 0xff
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004da4:	2201      	movs	r2, #1
 8004da6:	2110      	movs	r1, #16
 8004da8:	4803      	ldr	r0, [pc, #12]	@ (8004db8 <despiselect+0x18>)
 8004daa:	f002 ff2f 	bl	8007c0c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004dae:	20ff      	movs	r0, #255	@ 0xff
 8004db0:	f7ff ff86 	bl	8004cc0 <xchg_spi>

}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	48000800 	.word	0x48000800

08004dbc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	4809      	ldr	r0, [pc, #36]	@ (8004dec <spiselect+0x30>)
 8004dc6:	f002 ff21 	bl	8007c0c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004dca:	20ff      	movs	r0, #255	@ 0xff
 8004dcc:	f7ff ff78 	bl	8004cc0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004dd0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004dd4:	f7ff ffc1 	bl	8004d5a <wait_ready>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <spiselect+0x26>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e002      	b.n	8004de8 <spiselect+0x2c>

	despiselect();
 8004de2:	f7ff ffdd 	bl	8004da0 <despiselect>
	return 0;	/* Timeout */
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	48000800 	.word	0x48000800

08004df0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004dfa:	20c8      	movs	r0, #200	@ 0xc8
 8004dfc:	f7ff ff36 	bl	8004c6c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004e00:	20ff      	movs	r0, #255	@ 0xff
 8004e02:	f7ff ff5d 	bl	8004cc0 <xchg_spi>
 8004e06:	4603      	mov	r3, r0
 8004e08:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2bff      	cmp	r3, #255	@ 0xff
 8004e0e:	d104      	bne.n	8004e1a <rcvr_datablock+0x2a>
 8004e10:	f7ff ff40 	bl	8004c94 <SPI_Timer_Status>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f2      	bne.n	8004e00 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	2bfe      	cmp	r3, #254	@ 0xfe
 8004e1e:	d001      	beq.n	8004e24 <rcvr_datablock+0x34>
 8004e20:	2300      	movs	r3, #0
 8004e22:	e00a      	b.n	8004e3a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ff60 	bl	8004cec <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004e2c:	20ff      	movs	r0, #255	@ 0xff
 8004e2e:	f7ff ff47 	bl	8004cc0 <xchg_spi>
 8004e32:	20ff      	movs	r0, #255	@ 0xff
 8004e34:	f7ff ff44 	bl	8004cc0 <xchg_spi>

	return 1;						/* Function succeeded */
 8004e38:	2301      	movs	r3, #1
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004e4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e52:	f7ff ff82 	bl	8004d5a <wait_ready>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <xmit_datablock+0x1e>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e01e      	b.n	8004e9e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ff2c 	bl	8004cc0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	2bfd      	cmp	r3, #253	@ 0xfd
 8004e6c:	d016      	beq.n	8004e9c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004e6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff ff56 	bl	8004d24 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004e78:	20ff      	movs	r0, #255	@ 0xff
 8004e7a:	f7ff ff21 	bl	8004cc0 <xchg_spi>
 8004e7e:	20ff      	movs	r0, #255	@ 0xff
 8004e80:	f7ff ff1e 	bl	8004cc0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004e84:	20ff      	movs	r0, #255	@ 0xff
 8004e86:	f7ff ff1b 	bl	8004cc0 <xchg_spi>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d001      	beq.n	8004e9c <xmit_datablock+0x5a>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <xmit_datablock+0x5c>
	}
	return 1;
 8004e9c:	2301      	movs	r3, #1
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	4603      	mov	r3, r0
 8004eae:	6039      	str	r1, [r7, #0]
 8004eb0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	da0e      	bge.n	8004ed8 <send_cmd+0x32>
		cmd &= 0x7F;
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ec0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	2037      	movs	r0, #55	@ 0x37
 8004ec6:	f7ff ffee 	bl	8004ea6 <send_cmd>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d901      	bls.n	8004ed8 <send_cmd+0x32>
 8004ed4:	7bbb      	ldrb	r3, [r7, #14]
 8004ed6:	e051      	b.n	8004f7c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	2b0c      	cmp	r3, #12
 8004edc:	d008      	beq.n	8004ef0 <send_cmd+0x4a>
		despiselect();
 8004ede:	f7ff ff5f 	bl	8004da0 <despiselect>
		if (!spiselect()) return 0xFF;
 8004ee2:	f7ff ff6b 	bl	8004dbc <spiselect>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <send_cmd+0x4a>
 8004eec:	23ff      	movs	r3, #255	@ 0xff
 8004eee:	e045      	b.n	8004f7c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fee1 	bl	8004cc0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	0e1b      	lsrs	r3, r3, #24
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fedb 	bl	8004cc0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fed5 	bl	8004cc0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fecf 	bl	8004cc0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff feca 	bl	8004cc0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <send_cmd+0x94>
 8004f36:	2395      	movs	r3, #149	@ 0x95
 8004f38:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d101      	bne.n	8004f44 <send_cmd+0x9e>
 8004f40:	2387      	movs	r3, #135	@ 0x87
 8004f42:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff feba 	bl	8004cc0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d102      	bne.n	8004f58 <send_cmd+0xb2>
 8004f52:	20ff      	movs	r0, #255	@ 0xff
 8004f54:	f7ff feb4 	bl	8004cc0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004f58:	230a      	movs	r3, #10
 8004f5a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004f5c:	20ff      	movs	r0, #255	@ 0xff
 8004f5e:	f7ff feaf 	bl	8004cc0 <xchg_spi>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004f66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da05      	bge.n	8004f7a <send_cmd+0xd4>
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <send_cmd+0xb6>

	return res;							/* Return received response */
 8004f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <USER_SPI_initialize+0x14>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0d6      	b.n	8005146 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004f98:	4b6d      	ldr	r3, [pc, #436]	@ (8005150 <USER_SPI_initialize+0x1cc>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <USER_SPI_initialize+0x2a>
 8004fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8005150 <USER_SPI_initialize+0x1cc>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e0cb      	b.n	8005146 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004fae:	4b69      	ldr	r3, [pc, #420]	@ (8005154 <USER_SPI_initialize+0x1d0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004fb8:	4b66      	ldr	r3, [pc, #408]	@ (8005154 <USER_SPI_initialize+0x1d0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8004fc0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004fc2:	230a      	movs	r3, #10
 8004fc4:	73fb      	strb	r3, [r7, #15]
 8004fc6:	e005      	b.n	8004fd4 <USER_SPI_initialize+0x50>
 8004fc8:	20ff      	movs	r0, #255	@ 0xff
 8004fca:	f7ff fe79 	bl	8004cc0 <xchg_spi>
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f6      	bne.n	8004fc8 <USER_SPI_initialize+0x44>

	ty = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004fde:	2100      	movs	r1, #0
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f7ff ff60 	bl	8004ea6 <send_cmd>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 808b 	bne.w	8005104 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004fee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ff2:	f7ff fe3b 	bl	8004c6c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004ff6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004ffa:	2008      	movs	r0, #8
 8004ffc:	f7ff ff53 	bl	8004ea6 <send_cmd>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d151      	bne.n	80050aa <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
 800500a:	e00d      	b.n	8005028 <USER_SPI_initialize+0xa4>
 800500c:	7bfc      	ldrb	r4, [r7, #15]
 800500e:	20ff      	movs	r0, #255	@ 0xff
 8005010:	f7ff fe56 	bl	8004cc0 <xchg_spi>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	f104 0310 	add.w	r3, r4, #16
 800501c:	443b      	add	r3, r7
 800501e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	3301      	adds	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d9ee      	bls.n	800500c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800502e:	7abb      	ldrb	r3, [r7, #10]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d167      	bne.n	8005104 <USER_SPI_initialize+0x180>
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	2baa      	cmp	r3, #170	@ 0xaa
 8005038:	d164      	bne.n	8005104 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800503a:	bf00      	nop
 800503c:	f7ff fe2a 	bl	8004c94 <SPI_Timer_Status>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <USER_SPI_initialize+0xd2>
 8005046:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800504a:	20a9      	movs	r0, #169	@ 0xa9
 800504c:	f7ff ff2b 	bl	8004ea6 <send_cmd>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f2      	bne.n	800503c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005056:	f7ff fe1d 	bl	8004c94 <SPI_Timer_Status>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d051      	beq.n	8005104 <USER_SPI_initialize+0x180>
 8005060:	2100      	movs	r1, #0
 8005062:	203a      	movs	r0, #58	@ 0x3a
 8005064:	f7ff ff1f 	bl	8004ea6 <send_cmd>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d14a      	bne.n	8005104 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]
 8005072:	e00d      	b.n	8005090 <USER_SPI_initialize+0x10c>
 8005074:	7bfc      	ldrb	r4, [r7, #15]
 8005076:	20ff      	movs	r0, #255	@ 0xff
 8005078:	f7ff fe22 	bl	8004cc0 <xchg_spi>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	f104 0310 	add.w	r3, r4, #16
 8005084:	443b      	add	r3, r7
 8005086:	f803 2c08 	strb.w	r2, [r3, #-8]
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	3301      	adds	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d9ee      	bls.n	8005074 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005096:	7a3b      	ldrb	r3, [r7, #8]
 8005098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <USER_SPI_initialize+0x120>
 80050a0:	230c      	movs	r3, #12
 80050a2:	e000      	b.n	80050a6 <USER_SPI_initialize+0x122>
 80050a4:	2304      	movs	r3, #4
 80050a6:	737b      	strb	r3, [r7, #13]
 80050a8:	e02c      	b.n	8005104 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80050aa:	2100      	movs	r1, #0
 80050ac:	20a9      	movs	r0, #169	@ 0xa9
 80050ae:	f7ff fefa 	bl	8004ea6 <send_cmd>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d804      	bhi.n	80050c2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80050b8:	2302      	movs	r3, #2
 80050ba:	737b      	strb	r3, [r7, #13]
 80050bc:	23a9      	movs	r3, #169	@ 0xa9
 80050be:	73bb      	strb	r3, [r7, #14]
 80050c0:	e003      	b.n	80050ca <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80050c2:	2301      	movs	r3, #1
 80050c4:	737b      	strb	r3, [r7, #13]
 80050c6:	2301      	movs	r3, #1
 80050c8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80050ca:	bf00      	nop
 80050cc:	f7ff fde2 	bl	8004c94 <SPI_Timer_Status>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <USER_SPI_initialize+0x162>
 80050d6:	7bbb      	ldrb	r3, [r7, #14]
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fee3 	bl	8004ea6 <send_cmd>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f2      	bne.n	80050cc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80050e6:	f7ff fdd5 	bl	8004c94 <SPI_Timer_Status>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <USER_SPI_initialize+0x17c>
 80050f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050f4:	2010      	movs	r0, #16
 80050f6:	f7ff fed6 	bl	8004ea6 <send_cmd>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <USER_SPI_initialize+0x180>
				ty = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005104:	4a14      	ldr	r2, [pc, #80]	@ (8005158 <USER_SPI_initialize+0x1d4>)
 8005106:	7b7b      	ldrb	r3, [r7, #13]
 8005108:	7013      	strb	r3, [r2, #0]
	despiselect();
 800510a:	f7ff fe49 	bl	8004da0 <despiselect>

	if (ty) {			/* OK */
 800510e:	7b7b      	ldrb	r3, [r7, #13]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d012      	beq.n	800513a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005114:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <USER_SPI_initialize+0x1d0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <USER_SPI_initialize+0x1d0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0210 	orr.w	r2, r2, #16
 8005126:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005128:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <USER_SPI_initialize+0x1cc>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	b2da      	uxtb	r2, r3
 8005134:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <USER_SPI_initialize+0x1cc>)
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e002      	b.n	8005140 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800513a:	4b05      	ldr	r3, [pc, #20]	@ (8005150 <USER_SPI_initialize+0x1cc>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005140:	4b03      	ldr	r3, [pc, #12]	@ (8005150 <USER_SPI_initialize+0x1cc>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	b2db      	uxtb	r3, r3
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bd90      	pop	{r4, r7, pc}
 800514e:	bf00      	nop
 8005150:	20000024 	.word	0x20000024
 8005154:	20000e54 	.word	0x20000e54
 8005158:	2000168c 	.word	0x2000168c

0800515c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <USER_SPI_status+0x14>
 800516c:	2301      	movs	r3, #1
 800516e:	e002      	b.n	8005176 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005170:	4b04      	ldr	r3, [pc, #16]	@ (8005184 <USER_SPI_status+0x28>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000024 	.word	0x20000024

08005188 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4603      	mov	r3, r0
 8005196:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <USER_SPI_read+0x1c>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <USER_SPI_read+0x20>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e04d      	b.n	8005244 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80051a8:	4b28      	ldr	r3, [pc, #160]	@ (800524c <USER_SPI_read+0xc4>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <USER_SPI_read+0x32>
 80051b6:	2303      	movs	r3, #3
 80051b8:	e044      	b.n	8005244 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80051ba:	4b25      	ldr	r3, [pc, #148]	@ (8005250 <USER_SPI_read+0xc8>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <USER_SPI_read+0x44>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	025b      	lsls	r3, r3, #9
 80051ca:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d111      	bne.n	80051f6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	2011      	movs	r0, #17
 80051d6:	f7ff fe66 	bl	8004ea6 <send_cmd>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d129      	bne.n	8005234 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80051e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80051e4:	68b8      	ldr	r0, [r7, #8]
 80051e6:	f7ff fe03 	bl	8004df0 <rcvr_datablock>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d021      	beq.n	8005234 <USER_SPI_read+0xac>
			count = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	e01e      	b.n	8005234 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	2012      	movs	r0, #18
 80051fa:	f7ff fe54 	bl	8004ea6 <send_cmd>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d117      	bne.n	8005234 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005208:	68b8      	ldr	r0, [r7, #8]
 800520a:	f7ff fdf1 	bl	8004df0 <rcvr_datablock>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <USER_SPI_read+0xa2>
				buff += 512;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800521a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	3b01      	subs	r3, #1
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1ed      	bne.n	8005204 <USER_SPI_read+0x7c>
 8005228:	e000      	b.n	800522c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800522a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800522c:	2100      	movs	r1, #0
 800522e:	200c      	movs	r0, #12
 8005230:	f7ff fe39 	bl	8004ea6 <send_cmd>
		}
	}
	despiselect();
 8005234:	f7ff fdb4 	bl	8004da0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	bf14      	ite	ne
 800523e:	2301      	movne	r3, #1
 8005240:	2300      	moveq	r3, #0
 8005242:	b2db      	uxtb	r3, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000024 	.word	0x20000024
 8005250:	2000168c 	.word	0x2000168c

08005254 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	4603      	mov	r3, r0
 8005262:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <USER_SPI_write+0x1c>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <USER_SPI_write+0x20>
 8005270:	2304      	movs	r3, #4
 8005272:	e063      	b.n	800533c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005274:	4b33      	ldr	r3, [pc, #204]	@ (8005344 <USER_SPI_write+0xf0>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <USER_SPI_write+0x32>
 8005282:	2303      	movs	r3, #3
 8005284:	e05a      	b.n	800533c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005286:	4b2f      	ldr	r3, [pc, #188]	@ (8005344 <USER_SPI_write+0xf0>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <USER_SPI_write+0x44>
 8005294:	2302      	movs	r3, #2
 8005296:	e051      	b.n	800533c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005298:	4b2b      	ldr	r3, [pc, #172]	@ (8005348 <USER_SPI_write+0xf4>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <USER_SPI_write+0x56>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	025b      	lsls	r3, r3, #9
 80052a8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d110      	bne.n	80052d2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	2018      	movs	r0, #24
 80052b4:	f7ff fdf7 	bl	8004ea6 <send_cmd>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d136      	bne.n	800532c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80052be:	21fe      	movs	r1, #254	@ 0xfe
 80052c0:	68b8      	ldr	r0, [r7, #8]
 80052c2:	f7ff fdbe 	bl	8004e42 <xmit_datablock>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02f      	beq.n	800532c <USER_SPI_write+0xd8>
			count = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	e02c      	b.n	800532c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80052d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <USER_SPI_write+0xf4>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f003 0306 	and.w	r3, r3, #6
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <USER_SPI_write+0x92>
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	2097      	movs	r0, #151	@ 0x97
 80052e2:	f7ff fde0 	bl	8004ea6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	2019      	movs	r0, #25
 80052ea:	f7ff fddc 	bl	8004ea6 <send_cmd>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d11b      	bne.n	800532c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80052f4:	21fc      	movs	r1, #252	@ 0xfc
 80052f6:	68b8      	ldr	r0, [r7, #8]
 80052f8:	f7ff fda3 	bl	8004e42 <xmit_datablock>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <USER_SPI_write+0xc4>
				buff += 512;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005308:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	3b01      	subs	r3, #1
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ee      	bne.n	80052f4 <USER_SPI_write+0xa0>
 8005316:	e000      	b.n	800531a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005318:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800531a:	21fd      	movs	r1, #253	@ 0xfd
 800531c:	2000      	movs	r0, #0
 800531e:	f7ff fd90 	bl	8004e42 <xmit_datablock>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <USER_SPI_write+0xd8>
 8005328:	2301      	movs	r3, #1
 800532a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800532c:	f7ff fd38 	bl	8004da0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2db      	uxtb	r3, r3
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000024 	.word	0x20000024
 8005348:	2000168c 	.word	0x2000168c

0800534c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08c      	sub	sp, #48	@ 0x30
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	603a      	str	r2, [r7, #0]
 8005356:	71fb      	strb	r3, [r7, #7]
 8005358:	460b      	mov	r3, r1
 800535a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <USER_SPI_ioctl+0x1a>
 8005362:	2304      	movs	r3, #4
 8005364:	e15a      	b.n	800561c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005366:	4baf      	ldr	r3, [pc, #700]	@ (8005624 <USER_SPI_ioctl+0x2d8>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <USER_SPI_ioctl+0x2c>
 8005374:	2303      	movs	r3, #3
 8005376:	e151      	b.n	800561c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800537e:	79bb      	ldrb	r3, [r7, #6]
 8005380:	2b04      	cmp	r3, #4
 8005382:	f200 8136 	bhi.w	80055f2 <USER_SPI_ioctl+0x2a6>
 8005386:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <USER_SPI_ioctl+0x40>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053a1 	.word	0x080053a1
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080055f3 	.word	0x080055f3
 8005398:	08005461 	.word	0x08005461
 800539c:	08005557 	.word	0x08005557
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80053a0:	f7ff fd0c 	bl	8004dbc <spiselect>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8127 	beq.w	80055fa <USER_SPI_ioctl+0x2ae>
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80053b2:	e122      	b.n	80055fa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80053b4:	2100      	movs	r1, #0
 80053b6:	2009      	movs	r0, #9
 80053b8:	f7ff fd75 	bl	8004ea6 <send_cmd>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f040 811d 	bne.w	80055fe <USER_SPI_ioctl+0x2b2>
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	2110      	movs	r1, #16
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fd10 	bl	8004df0 <rcvr_datablock>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8113 	beq.w	80055fe <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80053d8:	7b3b      	ldrb	r3, [r7, #12]
 80053da:	099b      	lsrs	r3, r3, #6
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d111      	bne.n	8005406 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80053e2:	7d7b      	ldrb	r3, [r7, #21]
 80053e4:	461a      	mov	r2, r3
 80053e6:	7d3b      	ldrb	r3, [r7, #20]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	4413      	add	r3, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	7cfb      	ldrb	r3, [r7, #19]
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80053f6:	4413      	add	r3, r2
 80053f8:	3301      	adds	r3, #1
 80053fa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	029a      	lsls	r2, r3, #10
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e028      	b.n	8005458 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005406:	7c7b      	ldrb	r3, [r7, #17]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	b2da      	uxtb	r2, r3
 800540e:	7dbb      	ldrb	r3, [r7, #22]
 8005410:	09db      	lsrs	r3, r3, #7
 8005412:	b2db      	uxtb	r3, r3
 8005414:	4413      	add	r3, r2
 8005416:	b2da      	uxtb	r2, r3
 8005418:	7d7b      	ldrb	r3, [r7, #21]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0306 	and.w	r3, r3, #6
 8005422:	b2db      	uxtb	r3, r3
 8005424:	4413      	add	r3, r2
 8005426:	b2db      	uxtb	r3, r3
 8005428:	3302      	adds	r3, #2
 800542a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800542e:	7d3b      	ldrb	r3, [r7, #20]
 8005430:	099b      	lsrs	r3, r3, #6
 8005432:	b2db      	uxtb	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	7cbb      	ldrb	r3, [r7, #18]
 800543e:	029b      	lsls	r3, r3, #10
 8005440:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005444:	4413      	add	r3, r2
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800544a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800544e:	3b09      	subs	r3, #9
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	409a      	lsls	r2, r3
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800545e:	e0ce      	b.n	80055fe <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005460:	4b71      	ldr	r3, [pc, #452]	@ (8005628 <USER_SPI_ioctl+0x2dc>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d031      	beq.n	80054d0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800546c:	2100      	movs	r1, #0
 800546e:	208d      	movs	r0, #141	@ 0x8d
 8005470:	f7ff fd19 	bl	8004ea6 <send_cmd>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	f040 80c3 	bne.w	8005602 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800547c:	20ff      	movs	r0, #255	@ 0xff
 800547e:	f7ff fc1f 	bl	8004cc0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005482:	f107 030c 	add.w	r3, r7, #12
 8005486:	2110      	movs	r1, #16
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fcb1 	bl	8004df0 <rcvr_datablock>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80b6 	beq.w	8005602 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005496:	2330      	movs	r3, #48	@ 0x30
 8005498:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800549c:	e007      	b.n	80054ae <USER_SPI_ioctl+0x162>
 800549e:	20ff      	movs	r0, #255	@ 0xff
 80054a0:	f7ff fc0e 	bl	8004cc0 <xchg_spi>
 80054a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054a8:	3b01      	subs	r3, #1
 80054aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80054ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f3      	bne.n	800549e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80054b6:	7dbb      	ldrb	r3, [r7, #22]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	2310      	movs	r3, #16
 80054c0:	fa03 f202 	lsl.w	r2, r3, r2
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80054ce:	e098      	b.n	8005602 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80054d0:	2100      	movs	r1, #0
 80054d2:	2009      	movs	r0, #9
 80054d4:	f7ff fce7 	bl	8004ea6 <send_cmd>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 8091 	bne.w	8005602 <USER_SPI_ioctl+0x2b6>
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	2110      	movs	r1, #16
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fc82 	bl	8004df0 <rcvr_datablock>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8087 	beq.w	8005602 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80054f4:	4b4c      	ldr	r3, [pc, #304]	@ (8005628 <USER_SPI_ioctl+0x2dc>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d012      	beq.n	8005526 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005500:	7dbb      	ldrb	r3, [r7, #22]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005508:	7dfa      	ldrb	r2, [r7, #23]
 800550a:	09d2      	lsrs	r2, r2, #7
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	4413      	add	r3, r2
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	7e7b      	ldrb	r3, [r7, #25]
 8005514:	099b      	lsrs	r3, r3, #6
 8005516:	b2db      	uxtb	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	461a      	mov	r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e013      	b.n	800554e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005526:	7dbb      	ldrb	r3, [r7, #22]
 8005528:	109b      	asrs	r3, r3, #2
 800552a:	b29b      	uxth	r3, r3
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	3301      	adds	r3, #1
 8005532:	7dfa      	ldrb	r2, [r7, #23]
 8005534:	00d2      	lsls	r2, r2, #3
 8005536:	f002 0218 	and.w	r2, r2, #24
 800553a:	7df9      	ldrb	r1, [r7, #23]
 800553c:	0949      	lsrs	r1, r1, #5
 800553e:	b2c9      	uxtb	r1, r1
 8005540:	440a      	add	r2, r1
 8005542:	3201      	adds	r2, #1
 8005544:	fb02 f303 	mul.w	r3, r2, r3
 8005548:	461a      	mov	r2, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005554:	e055      	b.n	8005602 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005556:	4b34      	ldr	r3, [pc, #208]	@ (8005628 <USER_SPI_ioctl+0x2dc>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	f003 0306 	and.w	r3, r3, #6
 800555e:	2b00      	cmp	r3, #0
 8005560:	d051      	beq.n	8005606 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005562:	f107 020c 	add.w	r2, r7, #12
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	210b      	movs	r1, #11
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff feee 	bl	800534c <USER_SPI_ioctl>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d149      	bne.n	800560a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005576:	7b3b      	ldrb	r3, [r7, #12]
 8005578:	099b      	lsrs	r3, r3, #6
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <USER_SPI_ioctl+0x23e>
 8005580:	7dbb      	ldrb	r3, [r7, #22]
 8005582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d041      	beq.n	800560e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800559a:	4b23      	ldr	r3, [pc, #140]	@ (8005628 <USER_SPI_ioctl+0x2dc>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d105      	bne.n	80055b2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	025b      	lsls	r3, r3, #9
 80055aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	025b      	lsls	r3, r3, #9
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80055b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055b4:	2020      	movs	r0, #32
 80055b6:	f7ff fc76 	bl	8004ea6 <send_cmd>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d128      	bne.n	8005612 <USER_SPI_ioctl+0x2c6>
 80055c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055c2:	2021      	movs	r0, #33	@ 0x21
 80055c4:	f7ff fc6f 	bl	8004ea6 <send_cmd>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d121      	bne.n	8005612 <USER_SPI_ioctl+0x2c6>
 80055ce:	2100      	movs	r1, #0
 80055d0:	2026      	movs	r0, #38	@ 0x26
 80055d2:	f7ff fc68 	bl	8004ea6 <send_cmd>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11a      	bne.n	8005612 <USER_SPI_ioctl+0x2c6>
 80055dc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80055e0:	f7ff fbbb 	bl	8004d5a <wait_ready>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d013      	beq.n	8005612 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80055f0:	e00f      	b.n	8005612 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80055f2:	2304      	movs	r3, #4
 80055f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80055f8:	e00c      	b.n	8005614 <USER_SPI_ioctl+0x2c8>
		break;
 80055fa:	bf00      	nop
 80055fc:	e00a      	b.n	8005614 <USER_SPI_ioctl+0x2c8>
		break;
 80055fe:	bf00      	nop
 8005600:	e008      	b.n	8005614 <USER_SPI_ioctl+0x2c8>
		break;
 8005602:	bf00      	nop
 8005604:	e006      	b.n	8005614 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005606:	bf00      	nop
 8005608:	e004      	b.n	8005614 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800560a:	bf00      	nop
 800560c:	e002      	b.n	8005614 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800560e:	bf00      	nop
 8005610:	e000      	b.n	8005614 <USER_SPI_ioctl+0x2c8>
		break;
 8005612:	bf00      	nop
	}

	despiselect();
 8005614:	f7ff fbc4 	bl	8004da0 <despiselect>

	return res;
 8005618:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800561c:	4618      	mov	r0, r3
 800561e:	3730      	adds	r7, #48	@ 0x30
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000024 	.word	0x20000024
 8005628:	2000168c 	.word	0x2000168c

0800562c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800562c:	480d      	ldr	r0, [pc, #52]	@ (8005664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800562e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005630:	f7fe fbb6 	bl	8003da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005634:	480c      	ldr	r0, [pc, #48]	@ (8005668 <LoopForever+0x6>)
  ldr r1, =_edata
 8005636:	490d      	ldr	r1, [pc, #52]	@ (800566c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005638:	4a0d      	ldr	r2, [pc, #52]	@ (8005670 <LoopForever+0xe>)
  movs r3, #0
 800563a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800563c:	e002      	b.n	8005644 <LoopCopyDataInit>

0800563e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800563e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005642:	3304      	adds	r3, #4

08005644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005648:	d3f9      	bcc.n	800563e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800564a:	4a0a      	ldr	r2, [pc, #40]	@ (8005674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800564c:	4c0a      	ldr	r4, [pc, #40]	@ (8005678 <LoopForever+0x16>)
  movs r3, #0
 800564e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005650:	e001      	b.n	8005656 <LoopFillZerobss>

08005652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005654:	3204      	adds	r2, #4

08005656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005658:	d3fb      	bcc.n	8005652 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800565a:	f00f fcd1 	bl	8015000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800565e:	f7fd fa77 	bl	8002b50 <main>

08005662 <LoopForever>:

LoopForever:
    b LoopForever
 8005662:	e7fe      	b.n	8005662 <LoopForever>
  ldr   r0, =_estack
 8005664:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800566c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8005670:	0801c38c 	.word	0x0801c38c
  ldr r2, =_sbss
 8005674:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8005678:	200040c8 	.word	0x200040c8

0800567c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800567c:	e7fe      	b.n	800567c <COMP1_2_3_IRQHandler>

0800567e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005688:	2003      	movs	r0, #3
 800568a:	f001 fdb4 	bl	80071f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800568e:	200f      	movs	r0, #15
 8005690:	f7fe f9b2 	bl	80039f8 <HAL_InitTick>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	71fb      	strb	r3, [r7, #7]
 800569e:	e001      	b.n	80056a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056a0:	f7fe f980 	bl	80039a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056a4:	79fb      	ldrb	r3, [r7, #7]

}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056b4:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <HAL_IncTick+0x1c>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <HAL_IncTick+0x20>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4413      	add	r3, r2
 80056be:	4a03      	ldr	r2, [pc, #12]	@ (80056cc <HAL_IncTick+0x1c>)
 80056c0:	6013      	str	r3, [r2, #0]
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20001698 	.word	0x20001698
 80056d0:	2000002c 	.word	0x2000002c

080056d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return uwTick;
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <HAL_GetTick+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20001698 	.word	0x20001698

080056ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056f4:	f7ff ffee 	bl	80056d4 <HAL_GetTick>
 80056f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d004      	beq.n	8005710 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005706:	4b09      	ldr	r3, [pc, #36]	@ (800572c <HAL_Delay+0x40>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005710:	bf00      	nop
 8005712:	f7ff ffdf 	bl	80056d4 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	429a      	cmp	r2, r3
 8005720:	d8f7      	bhi.n	8005712 <HAL_Delay+0x26>
  {
  }
}
 8005722:	bf00      	nop
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	2000002c 	.word	0x2000002c

08005730 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	609a      	str	r2, [r3, #8]
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	609a      	str	r2, [r3, #8]
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3360      	adds	r3, #96	@ 0x60
 80057aa:	461a      	mov	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4b08      	ldr	r3, [pc, #32]	@ (80057dc <LL_ADC_SetOffset+0x44>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	03fff000 	.word	0x03fff000

080057e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3360      	adds	r3, #96	@ 0x60
 80057ee:	461a      	mov	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3360      	adds	r3, #96	@ 0x60
 800581c:	461a      	mov	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	431a      	orrs	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3360      	adds	r3, #96	@ 0x60
 8005852:	461a      	mov	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	431a      	orrs	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3360      	adds	r3, #96	@ 0x60
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	431a      	orrs	r2, r3
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	615a      	str	r2, [r3, #20]
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b087      	sub	sp, #28
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3330      	adds	r3, #48	@ 0x30
 800590a:	461a      	mov	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	4413      	add	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	211f      	movs	r1, #31
 8005926:	fa01 f303 	lsl.w	r3, r1, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	401a      	ands	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	0e9b      	lsrs	r3, r3, #26
 8005932:	f003 011f 	and.w	r1, r3, #31
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	431a      	orrs	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3314      	adds	r3, #20
 8005988:	461a      	mov	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	0e5b      	lsrs	r3, r3, #25
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	4413      	add	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0d1b      	lsrs	r3, r3, #20
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2107      	movs	r1, #7
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	401a      	ands	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	0d1b      	lsrs	r3, r3, #20
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	431a      	orrs	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e8:	43db      	mvns	r3, r3
 80059ea:	401a      	ands	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f003 0318 	and.w	r3, r3, #24
 80059f2:	4908      	ldr	r1, [pc, #32]	@ (8005a14 <LL_ADC_SetChannelSingleDiff+0x44>)
 80059f4:	40d9      	lsrs	r1, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	400b      	ands	r3, r1
 80059fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fe:	431a      	orrs	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	0007ffff 	.word	0x0007ffff

08005a18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 031f 	and.w	r3, r3, #31
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6093      	str	r3, [r2, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a88:	d101      	bne.n	8005a8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005aac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ab0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ad8:	d101      	bne.n	8005ade <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b00:	f043 0201 	orr.w	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <LL_ADC_IsEnabled+0x18>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <LL_ADC_IsEnabled+0x1a>
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b4e:	f043 0204 	orr.w	r2, r3, #4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d101      	bne.n	8005b7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d101      	bne.n	8005ba0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b089      	sub	sp, #36	@ 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e167      	b.n	8005e9a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fb ff43 	bl	8001a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff3f 	bl	8005a74 <LL_ADC_IsDeepPowerDownEnabled>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff25 	bl	8005a50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff ff5a 	bl	8005ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d115      	bne.n	8005c42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff ff3e 	bl	8005a9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c20:	4ba0      	ldr	r3, [pc, #640]	@ (8005ea4 <HAL_ADC_Init+0x2f4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	099b      	lsrs	r3, r3, #6
 8005c26:	4aa0      	ldr	r2, [pc, #640]	@ (8005ea8 <HAL_ADC_Init+0x2f8>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	099b      	lsrs	r3, r3, #6
 8005c2e:	3301      	adds	r3, #1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005c34:	e002      	b.n	8005c3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f9      	bne.n	8005c36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff ff3c 	bl	8005ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c56:	f043 0210 	orr.w	r2, r3, #16
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c62:	f043 0201 	orr.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff ff75 	bl	8005b62 <LL_ADC_REG_IsConversionOngoing>
 8005c78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 8100 	bne.w	8005e88 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f040 80fc 	bne.w	8005e88 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005c98:	f043 0202 	orr.w	r2, r3, #2
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff ff35 	bl	8005b14 <LL_ADC_IsEnabled>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d111      	bne.n	8005cd4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cb0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005cb4:	f7ff ff2e 	bl	8005b14 <LL_ADC_IsEnabled>
 8005cb8:	4604      	mov	r4, r0
 8005cba:	487c      	ldr	r0, [pc, #496]	@ (8005eac <HAL_ADC_Init+0x2fc>)
 8005cbc:	f7ff ff2a 	bl	8005b14 <LL_ADC_IsEnabled>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4323      	orrs	r3, r4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4878      	ldr	r0, [pc, #480]	@ (8005eb0 <HAL_ADC_Init+0x300>)
 8005cd0:	f7ff fd2e 	bl	8005730 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7f5b      	ldrb	r3, [r3, #29]
 8005cd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005ce4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005cea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cf2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d106      	bne.n	8005d10 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d06:	3b01      	subs	r3, #1
 8005d08:	045b      	lsls	r3, r3, #17
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	4b60      	ldr	r3, [pc, #384]	@ (8005eb4 <HAL_ADC_Init+0x304>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	69b9      	ldr	r1, [r7, #24]
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff ff14 	bl	8005b88 <LL_ADC_INJ_IsConversionOngoing>
 8005d60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d16d      	bne.n	8005e44 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d16a      	bne.n	8005e44 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d8a:	f023 0302 	bic.w	r3, r3, #2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	69b9      	ldr	r1, [r7, #24]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d017      	beq.n	8005dd0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005dae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005db8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005dbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6911      	ldr	r1, [r2, #16]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005dce:	e013      	b.n	8005df8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005dde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005df4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d118      	bne.n	8005e34 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e0c:	f023 0304 	bic.w	r3, r3, #4
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e18:	4311      	orrs	r1, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005e1e:	4311      	orrs	r1, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e24:	430a      	orrs	r2, r1
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	611a      	str	r2, [r3, #16]
 8005e32:	e007      	b.n	8005e44 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10c      	bne.n	8005e66 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e52:	f023 010f 	bic.w	r1, r3, #15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e64:	e007      	b.n	8005e76 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 020f 	bic.w	r2, r2, #15
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e86:	e007      	b.n	8005e98 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8c:	f043 0210 	orr.w	r2, r3, #16
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3724      	adds	r7, #36	@ 0x24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd90      	pop	{r4, r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000020 	.word	0x20000020
 8005ea8:	053e2d63 	.word	0x053e2d63
 8005eac:	50000100 	.word	0x50000100
 8005eb0:	50000300 	.word	0x50000300
 8005eb4:	fff04007 	.word	0xfff04007

08005eb8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ec4:	4851      	ldr	r0, [pc, #324]	@ (800600c <HAL_ADC_Start_DMA+0x154>)
 8005ec6:	f7ff fda7 	bl	8005a18 <LL_ADC_GetMultimode>
 8005eca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fe46 	bl	8005b62 <LL_ADC_REG_IsConversionOngoing>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f040 808f 	bne.w	8005ffc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_ADC_Start_DMA+0x34>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e08a      	b.n	8006002 <HAL_ADC_Start_DMA+0x14a>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d002      	beq.n	8005f06 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b09      	cmp	r3, #9
 8005f04:	d173      	bne.n	8005fee <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 feb2 	bl	8006c70 <ADC_Enable>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d166      	bne.n	8005fe4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a38      	ldr	r2, [pc, #224]	@ (8006010 <HAL_ADC_Start_DMA+0x158>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d002      	beq.n	8005f3a <HAL_ADC_Start_DMA+0x82>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	e001      	b.n	8005f3e <HAL_ADC_Start_DMA+0x86>
 8005f3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d002      	beq.n	8005f4c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d006      	beq.n	8005f72 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f68:	f023 0206 	bic.w	r2, r3, #6
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005f70:	e002      	b.n	8005f78 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7c:	4a25      	ldr	r2, [pc, #148]	@ (8006014 <HAL_ADC_Start_DMA+0x15c>)
 8005f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f84:	4a24      	ldr	r2, [pc, #144]	@ (8006018 <HAL_ADC_Start_DMA+0x160>)
 8005f86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8c:	4a23      	ldr	r2, [pc, #140]	@ (800601c <HAL_ADC_Start_DMA+0x164>)
 8005f8e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	221c      	movs	r2, #28
 8005f96:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0210 	orr.w	r2, r2, #16
 8005fae:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3340      	adds	r3, #64	@ 0x40
 8005fca:	4619      	mov	r1, r3
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f001 f9ec 	bl	80073ac <HAL_DMA_Start_IT>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fdac 	bl	8005b3a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005fe2:	e00d      	b.n	8006000 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005fec:	e008      	b.n	8006000 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005ffa:	e001      	b.n	8006000 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	50000300 	.word	0x50000300
 8006010:	50000100 	.word	0x50000100
 8006014:	08006d7d 	.word	0x08006d7d
 8006018:	08006e55 	.word	0x08006e55
 800601c:	08006e71 	.word	0x08006e71

08006020 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	@ 0x28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006028:	2300      	movs	r3, #0
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800603c:	4883      	ldr	r0, [pc, #524]	@ (800624c <HAL_ADC_IRQHandler+0x22c>)
 800603e:	f7ff fceb 	bl	8005a18 <LL_ADC_GetMultimode>
 8006042:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d017      	beq.n	800607e <HAL_ADC_IRQHandler+0x5e>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d012      	beq.n	800607e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006068:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 ff65 	bl	8006f40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2202      	movs	r2, #2
 800607c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <HAL_ADC_IRQHandler+0x72>
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8085 	beq.w	80061a8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d07f      	beq.n	80061a8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d105      	bne.n	80060c0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fc05 	bl	80058d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d064      	beq.n	800619a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006250 <HAL_ADC_IRQHandler+0x230>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d002      	beq.n	80060e0 <HAL_ADC_IRQHandler+0xc0>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	e001      	b.n	80060e4 <HAL_ADC_IRQHandler+0xc4>
 80060e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d008      	beq.n	80060fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	d002      	beq.n	80060fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b09      	cmp	r3, #9
 80060fc:	d104      	bne.n	8006108 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	623b      	str	r3, [r7, #32]
 8006106:	e00d      	b.n	8006124 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a50      	ldr	r2, [pc, #320]	@ (8006250 <HAL_ADC_IRQHandler+0x230>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d002      	beq.n	8006118 <HAL_ADC_IRQHandler+0xf8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	e001      	b.n	800611c <HAL_ADC_IRQHandler+0xfc>
 8006118:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800611c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d135      	bne.n	800619a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d12e      	bne.n	800619a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fd0e 	bl	8005b62 <LL_ADC_REG_IsConversionOngoing>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11a      	bne.n	8006182 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 020c 	bic.w	r2, r2, #12
 800615a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800616c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d112      	bne.n	800619a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006178:	f043 0201 	orr.w	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006180:	e00b      	b.n	800619a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006186:	f043 0210 	orr.w	r2, r3, #16
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006192:	f043 0201 	orr.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fb fcec 	bl	8001b78 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	220c      	movs	r2, #12
 80061a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <HAL_ADC_IRQHandler+0x19c>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10b      	bne.n	80061d4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 809e 	beq.w	8006304 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 8098 	beq.w	8006304 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fbae 	bl	8005952 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80061f6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff fb69 	bl	80058d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006202:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a11      	ldr	r2, [pc, #68]	@ (8006250 <HAL_ADC_IRQHandler+0x230>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d002      	beq.n	8006214 <HAL_ADC_IRQHandler+0x1f4>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	e001      	b.n	8006218 <HAL_ADC_IRQHandler+0x1f8>
 8006214:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	4293      	cmp	r3, r2
 800621e:	d008      	beq.n	8006232 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d005      	beq.n	8006232 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b06      	cmp	r3, #6
 800622a:	d002      	beq.n	8006232 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b07      	cmp	r3, #7
 8006230:	d104      	bne.n	800623c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	e011      	b.n	8006260 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a03      	ldr	r2, [pc, #12]	@ (8006250 <HAL_ADC_IRQHandler+0x230>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d006      	beq.n	8006254 <HAL_ADC_IRQHandler+0x234>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	e005      	b.n	8006258 <HAL_ADC_IRQHandler+0x238>
 800624c:	50000300 	.word	0x50000300
 8006250:	50000100 	.word	0x50000100
 8006254:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006258:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d047      	beq.n	80062f6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_ADC_IRQHandler+0x260>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d03f      	beq.n	80062f6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800627c:	2b00      	cmp	r3, #0
 800627e:	d13a      	bne.n	80062f6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628a:	2b40      	cmp	r3, #64	@ 0x40
 800628c:	d133      	bne.n	80062f6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d12e      	bne.n	80062f6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff fc73 	bl	8005b88 <LL_ADC_INJ_IsConversionOngoing>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11a      	bne.n	80062de <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062b6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d112      	bne.n	80062f6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d4:	f043 0201 	orr.w	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80062dc:	e00b      	b.n	80062f6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e2:	f043 0210 	orr.w	r2, r3, #16
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ee:	f043 0201 	orr.w	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fdfa 	bl	8006ef0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2260      	movs	r2, #96	@ 0x60
 8006302:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d011      	beq.n	8006332 <HAL_ADC_IRQHandler+0x312>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00c      	beq.n	8006332 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f89f 	bl	8006468 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2280      	movs	r2, #128	@ 0x80
 8006330:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d012      	beq.n	8006362 <HAL_ADC_IRQHandler+0x342>
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00d      	beq.n	8006362 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fde0 	bl	8006f18 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006360:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006368:	2b00      	cmp	r3, #0
 800636a:	d012      	beq.n	8006392 <HAL_ADC_IRQHandler+0x372>
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fdd2 	bl	8006f2c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006390:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	2b00      	cmp	r3, #0
 800639a:	d036      	beq.n	800640a <HAL_ADC_IRQHandler+0x3ea>
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d031      	beq.n	800640a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80063ae:	2301      	movs	r3, #1
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b2:	e014      	b.n	80063de <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80063ba:	4825      	ldr	r0, [pc, #148]	@ (8006450 <HAL_ADC_IRQHandler+0x430>)
 80063bc:	f7ff fb3a 	bl	8005a34 <LL_ADC_GetMultiDMATransfer>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80063c6:	2301      	movs	r3, #1
 80063c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ca:	e008      	b.n	80063de <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80063da:	2301      	movs	r3, #1
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d10e      	bne.n	8006402 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f4:	f043 0202 	orr.w	r2, r3, #2
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f83d 	bl	800647c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2210      	movs	r2, #16
 8006408:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006410:	2b00      	cmp	r3, #0
 8006412:	d018      	beq.n	8006446 <HAL_ADC_IRQHandler+0x426>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800641a:	2b00      	cmp	r3, #0
 800641c:	d013      	beq.n	8006446 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006422:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642e:	f043 0208 	orr.w	r2, r3, #8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800643e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fd5f 	bl	8006f04 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006446:	bf00      	nop
 8006448:	3728      	adds	r7, #40	@ 0x28
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	50000300 	.word	0x50000300

08006454 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b0b6      	sub	sp, #216	@ 0xd8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_ADC_ConfigChannel+0x22>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e3c8      	b.n	8006c44 <HAL_ADC_ConfigChannel+0x7b4>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fb4f 	bl	8005b62 <LL_ADC_REG_IsConversionOngoing>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 83ad 	bne.w	8006c26 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	6859      	ldr	r1, [r3, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	f7ff fa0e 	bl	80058fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff fb3d 	bl	8005b62 <LL_ADC_REG_IsConversionOngoing>
 80064e8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fb49 	bl	8005b88 <LL_ADC_INJ_IsConversionOngoing>
 80064f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 81d9 	bne.w	80068b6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006504:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 81d4 	bne.w	80068b6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006516:	d10f      	bne.n	8006538 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2200      	movs	r2, #0
 8006522:	4619      	mov	r1, r3
 8006524:	f7ff fa28 	bl	8005978 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff f9bc 	bl	80058ae <LL_ADC_SetSamplingTimeCommonConfig>
 8006536:	e00e      	b.n	8006556 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	461a      	mov	r2, r3
 8006546:	f7ff fa17 	bl	8005978 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2100      	movs	r1, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff f9ac 	bl	80058ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	08db      	lsrs	r3, r3, #3
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b04      	cmp	r3, #4
 8006576:	d022      	beq.n	80065be <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	6919      	ldr	r1, [r3, #16]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006588:	f7ff f906 	bl	8005798 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6919      	ldr	r1, [r3, #16]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	461a      	mov	r2, r3
 800659a:	f7ff f952 	bl	8005842 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d102      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x124>
 80065ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065b2:	e000      	b.n	80065b6 <HAL_ADC_ConfigChannel+0x126>
 80065b4:	2300      	movs	r3, #0
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7ff f95e 	bl	8005878 <LL_ADC_SetOffsetSaturation>
 80065bc:	e17b      	b.n	80068b6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2100      	movs	r1, #0
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff f90b 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x15a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f7ff f900 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 80065e0:	4603      	mov	r3, r0
 80065e2:	0e9b      	lsrs	r3, r3, #26
 80065e4:	f003 021f 	and.w	r2, r3, #31
 80065e8:	e01e      	b.n	8006628 <HAL_ADC_ConfigChannel+0x198>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2100      	movs	r1, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff f8f5 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006600:	fa93 f3a3 	rbit	r3, r3
 8006604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800660c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006618:	2320      	movs	r3, #32
 800661a:	e004      	b.n	8006626 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800661c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006620:	fab3 f383 	clz	r3, r3
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x1b0>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	0e9b      	lsrs	r3, r3, #26
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	e018      	b.n	8006672 <HAL_ADC_ConfigChannel+0x1e2>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006648:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800664c:	fa93 f3a3 	rbit	r3, r3
 8006650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800665c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006664:	2320      	movs	r3, #32
 8006666:	e004      	b.n	8006672 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006668:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800666c:	fab3 f383 	clz	r3, r3
 8006670:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006672:	429a      	cmp	r2, r3
 8006674:	d106      	bne.n	8006684 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff f8c4 	bl	800580c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2101      	movs	r1, #1
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff f8a8 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 8006690:	4603      	mov	r3, r0
 8006692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0x220>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2101      	movs	r1, #1
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff f89d 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 80066a6:	4603      	mov	r3, r0
 80066a8:	0e9b      	lsrs	r3, r3, #26
 80066aa:	f003 021f 	and.w	r2, r3, #31
 80066ae:	e01e      	b.n	80066ee <HAL_ADC_ConfigChannel+0x25e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2101      	movs	r1, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff f892 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 80066bc:	4603      	mov	r3, r0
 80066be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80066c6:	fa93 f3a3 	rbit	r3, r3
 80066ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80066ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80066d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80066de:	2320      	movs	r3, #32
 80066e0:	e004      	b.n	80066ec <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80066e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066e6:	fab3 f383 	clz	r3, r3
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d105      	bne.n	8006706 <HAL_ADC_ConfigChannel+0x276>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	0e9b      	lsrs	r3, r3, #26
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	e018      	b.n	8006738 <HAL_ADC_ConfigChannel+0x2a8>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006712:	fa93 f3a3 	rbit	r3, r3
 8006716:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800671a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800671e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006722:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800672a:	2320      	movs	r3, #32
 800672c:	e004      	b.n	8006738 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800672e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006732:	fab3 f383 	clz	r3, r3
 8006736:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006738:	429a      	cmp	r2, r3
 800673a:	d106      	bne.n	800674a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2200      	movs	r2, #0
 8006742:	2101      	movs	r1, #1
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff f861 	bl	800580c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2102      	movs	r1, #2
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff f845 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 8006756:	4603      	mov	r3, r0
 8006758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <HAL_ADC_ConfigChannel+0x2e6>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2102      	movs	r1, #2
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff f83a 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 800676c:	4603      	mov	r3, r0
 800676e:	0e9b      	lsrs	r3, r3, #26
 8006770:	f003 021f 	and.w	r2, r3, #31
 8006774:	e01e      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x324>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2102      	movs	r1, #2
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff f82f 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 8006782:	4603      	mov	r3, r0
 8006784:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800678c:	fa93 f3a3 	rbit	r3, r3
 8006790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800679c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80067a4:	2320      	movs	r3, #32
 80067a6:	e004      	b.n	80067b2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80067a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067ac:	fab3 f383 	clz	r3, r3
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_ADC_ConfigChannel+0x33c>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	0e9b      	lsrs	r3, r3, #26
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	e016      	b.n	80067fa <HAL_ADC_ConfigChannel+0x36a>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80067d8:	fa93 f3a3 	rbit	r3, r3
 80067dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80067de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80067e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80067ec:	2320      	movs	r3, #32
 80067ee:	e004      	b.n	80067fa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80067f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067f4:	fab3 f383 	clz	r3, r3
 80067f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d106      	bne.n	800680c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	2102      	movs	r1, #2
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f800 	bl	800580c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2103      	movs	r1, #3
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe ffe4 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 8006818:	4603      	mov	r3, r0
 800681a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <HAL_ADC_ConfigChannel+0x3a8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2103      	movs	r1, #3
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe ffd9 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 800682e:	4603      	mov	r3, r0
 8006830:	0e9b      	lsrs	r3, r3, #26
 8006832:	f003 021f 	and.w	r2, r3, #31
 8006836:	e017      	b.n	8006868 <HAL_ADC_ConfigChannel+0x3d8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2103      	movs	r1, #3
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe ffce 	bl	80057e0 <LL_ADC_GetOffsetChannel>
 8006844:	4603      	mov	r3, r0
 8006846:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800684a:	fa93 f3a3 	rbit	r3, r3
 800684e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006852:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006854:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800685a:	2320      	movs	r3, #32
 800685c:	e003      	b.n	8006866 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800685e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006860:	fab3 f383 	clz	r3, r3
 8006864:	b2db      	uxtb	r3, r3
 8006866:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <HAL_ADC_ConfigChannel+0x3f0>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	0e9b      	lsrs	r3, r3, #26
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	e011      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x414>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006886:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006888:	fa93 f3a3 	rbit	r3, r3
 800688c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800688e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006890:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006898:	2320      	movs	r3, #32
 800689a:	e003      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800689c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800689e:	fab3 f383 	clz	r3, r3
 80068a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d106      	bne.n	80068b6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2200      	movs	r2, #0
 80068ae:	2103      	movs	r1, #3
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe ffab 	bl	800580c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff f92a 	bl	8005b14 <LL_ADC_IsEnabled>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f040 8140 	bne.w	8006b48 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6819      	ldr	r1, [r3, #0]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	461a      	mov	r2, r3
 80068d6:	f7ff f87b 	bl	80059d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	4a8f      	ldr	r2, [pc, #572]	@ (8006b1c <HAL_ADC_ConfigChannel+0x68c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	f040 8131 	bne.w	8006b48 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <HAL_ADC_ConfigChannel+0x47e>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	0e9b      	lsrs	r3, r3, #26
 80068fc:	3301      	adds	r3, #1
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	2b09      	cmp	r3, #9
 8006904:	bf94      	ite	ls
 8006906:	2301      	movls	r3, #1
 8006908:	2300      	movhi	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	e019      	b.n	8006942 <HAL_ADC_ConfigChannel+0x4b2>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006916:	fa93 f3a3 	rbit	r3, r3
 800691a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800691c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800691e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006926:	2320      	movs	r3, #32
 8006928:	e003      	b.n	8006932 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800692a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800692c:	fab3 f383 	clz	r3, r3
 8006930:	b2db      	uxtb	r3, r3
 8006932:	3301      	adds	r3, #1
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2b09      	cmp	r3, #9
 800693a:	bf94      	ite	ls
 800693c:	2301      	movls	r3, #1
 800693e:	2300      	movhi	r3, #0
 8006940:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006942:	2b00      	cmp	r3, #0
 8006944:	d079      	beq.n	8006a3a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694e:	2b00      	cmp	r3, #0
 8006950:	d107      	bne.n	8006962 <HAL_ADC_ConfigChannel+0x4d2>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	0e9b      	lsrs	r3, r3, #26
 8006958:	3301      	adds	r3, #1
 800695a:	069b      	lsls	r3, r3, #26
 800695c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006960:	e015      	b.n	800698e <HAL_ADC_ConfigChannel+0x4fe>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800696a:	fa93 f3a3 	rbit	r3, r3
 800696e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006972:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800697a:	2320      	movs	r3, #32
 800697c:	e003      	b.n	8006986 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800697e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006980:	fab3 f383 	clz	r3, r3
 8006984:	b2db      	uxtb	r3, r3
 8006986:	3301      	adds	r3, #1
 8006988:	069b      	lsls	r3, r3, #26
 800698a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006996:	2b00      	cmp	r3, #0
 8006998:	d109      	bne.n	80069ae <HAL_ADC_ConfigChannel+0x51e>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	0e9b      	lsrs	r3, r3, #26
 80069a0:	3301      	adds	r3, #1
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2101      	movs	r1, #1
 80069a8:	fa01 f303 	lsl.w	r3, r1, r3
 80069ac:	e017      	b.n	80069de <HAL_ADC_ConfigChannel+0x54e>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b6:	fa93 f3a3 	rbit	r3, r3
 80069ba:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80069bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80069c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80069c6:	2320      	movs	r3, #32
 80069c8:	e003      	b.n	80069d2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80069ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069cc:	fab3 f383 	clz	r3, r3
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	3301      	adds	r3, #1
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	2101      	movs	r1, #1
 80069da:	fa01 f303 	lsl.w	r3, r1, r3
 80069de:	ea42 0103 	orr.w	r1, r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <HAL_ADC_ConfigChannel+0x574>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	0e9b      	lsrs	r3, r3, #26
 80069f4:	3301      	adds	r3, #1
 80069f6:	f003 021f 	and.w	r2, r3, #31
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	051b      	lsls	r3, r3, #20
 8006a02:	e018      	b.n	8006a36 <HAL_ADC_ConfigChannel+0x5a6>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	fa93 f3a3 	rbit	r3, r3
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	e003      	b.n	8006a28 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a22:	fab3 f383 	clz	r3, r3
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	3301      	adds	r3, #1
 8006a2a:	f003 021f 	and.w	r2, r3, #31
 8006a2e:	4613      	mov	r3, r2
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4413      	add	r3, r2
 8006a34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a36:	430b      	orrs	r3, r1
 8006a38:	e081      	b.n	8006b3e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d107      	bne.n	8006a56 <HAL_ADC_ConfigChannel+0x5c6>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	0e9b      	lsrs	r3, r3, #26
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	069b      	lsls	r3, r3, #26
 8006a50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a54:	e015      	b.n	8006a82 <HAL_ADC_ConfigChannel+0x5f2>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006a6e:	2320      	movs	r3, #32
 8006a70:	e003      	b.n	8006a7a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	fab3 f383 	clz	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	069b      	lsls	r3, r3, #26
 8006a7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <HAL_ADC_ConfigChannel+0x612>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	0e9b      	lsrs	r3, r3, #26
 8006a94:	3301      	adds	r3, #1
 8006a96:	f003 031f 	and.w	r3, r3, #31
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	e017      	b.n	8006ad2 <HAL_ADC_ConfigChannel+0x642>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	fa93 f3a3 	rbit	r3, r3
 8006aae:	61fb      	str	r3, [r7, #28]
  return result;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006aba:	2320      	movs	r3, #32
 8006abc:	e003      	b.n	8006ac6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	fab3 f383 	clz	r3, r3
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	2101      	movs	r1, #1
 8006ace:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad2:	ea42 0103 	orr.w	r1, r2, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10d      	bne.n	8006afe <HAL_ADC_ConfigChannel+0x66e>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	0e9b      	lsrs	r3, r3, #26
 8006ae8:	3301      	adds	r3, #1
 8006aea:	f003 021f 	and.w	r2, r3, #31
 8006aee:	4613      	mov	r3, r2
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	4413      	add	r3, r2
 8006af4:	3b1e      	subs	r3, #30
 8006af6:	051b      	lsls	r3, r3, #20
 8006af8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006afc:	e01e      	b.n	8006b3c <HAL_ADC_ConfigChannel+0x6ac>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	fa93 f3a3 	rbit	r3, r3
 8006b0a:	613b      	str	r3, [r7, #16]
  return result;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d104      	bne.n	8006b20 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006b16:	2320      	movs	r3, #32
 8006b18:	e006      	b.n	8006b28 <HAL_ADC_ConfigChannel+0x698>
 8006b1a:	bf00      	nop
 8006b1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	fab3 f383 	clz	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	3301      	adds	r3, #1
 8006b2a:	f003 021f 	and.w	r2, r3, #31
 8006b2e:	4613      	mov	r3, r2
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	4413      	add	r3, r2
 8006b34:	3b1e      	subs	r3, #30
 8006b36:	051b      	lsls	r3, r3, #20
 8006b38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b42:	4619      	mov	r1, r3
 8006b44:	f7fe ff18 	bl	8005978 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c4c <HAL_ADC_ConfigChannel+0x7bc>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d071      	beq.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b54:	483e      	ldr	r0, [pc, #248]	@ (8006c50 <HAL_ADC_ConfigChannel+0x7c0>)
 8006b56:	f7fe fe11 	bl	800577c <LL_ADC_GetCommonPathInternalCh>
 8006b5a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a3c      	ldr	r2, [pc, #240]	@ (8006c54 <HAL_ADC_ConfigChannel+0x7c4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_ADC_ConfigChannel+0x6e2>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c58 <HAL_ADC_ConfigChannel+0x7c8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d127      	bne.n	8006bc2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d121      	bne.n	8006bc2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b86:	d157      	bne.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b90:	4619      	mov	r1, r3
 8006b92:	482f      	ldr	r0, [pc, #188]	@ (8006c50 <HAL_ADC_ConfigChannel+0x7c0>)
 8006b94:	f7fe fddf 	bl	8005756 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b98:	4b30      	ldr	r3, [pc, #192]	@ (8006c5c <HAL_ADC_ConfigChannel+0x7cc>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	099b      	lsrs	r3, r3, #6
 8006b9e:	4a30      	ldr	r2, [pc, #192]	@ (8006c60 <HAL_ADC_ConfigChannel+0x7d0>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	099b      	lsrs	r3, r3, #6
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	4613      	mov	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bb2:	e002      	b.n	8006bba <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f9      	bne.n	8006bb4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006bc0:	e03a      	b.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a27      	ldr	r2, [pc, #156]	@ (8006c64 <HAL_ADC_ConfigChannel+0x7d4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d113      	bne.n	8006bf4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006bd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10d      	bne.n	8006bf4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a22      	ldr	r2, [pc, #136]	@ (8006c68 <HAL_ADC_ConfigChannel+0x7d8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d02a      	beq.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bea:	4619      	mov	r1, r3
 8006bec:	4818      	ldr	r0, [pc, #96]	@ (8006c50 <HAL_ADC_ConfigChannel+0x7c0>)
 8006bee:	f7fe fdb2 	bl	8005756 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006bf2:	e021      	b.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c6c <HAL_ADC_ConfigChannel+0x7dc>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d11c      	bne.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d116      	bne.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a16      	ldr	r2, [pc, #88]	@ (8006c68 <HAL_ADC_ConfigChannel+0x7d8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d011      	beq.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	480c      	ldr	r0, [pc, #48]	@ (8006c50 <HAL_ADC_ConfigChannel+0x7c0>)
 8006c20:	f7fe fd99 	bl	8005756 <LL_ADC_SetCommonPathInternalCh>
 8006c24:	e008      	b.n	8006c38 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2a:	f043 0220 	orr.w	r2, r3, #32
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c40:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	37d8      	adds	r7, #216	@ 0xd8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	80080000 	.word	0x80080000
 8006c50:	50000300 	.word	0x50000300
 8006c54:	c3210000 	.word	0xc3210000
 8006c58:	90c00010 	.word	0x90c00010
 8006c5c:	20000020 	.word	0x20000020
 8006c60:	053e2d63 	.word	0x053e2d63
 8006c64:	c7520000 	.word	0xc7520000
 8006c68:	50000100 	.word	0x50000100
 8006c6c:	cb840000 	.word	0xcb840000

08006c70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe ff47 	bl	8005b14 <LL_ADC_IsEnabled>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d169      	bne.n	8006d60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	4b36      	ldr	r3, [pc, #216]	@ (8006d6c <ADC_Enable+0xfc>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00d      	beq.n	8006cb6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9e:	f043 0210 	orr.w	r2, r3, #16
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006caa:	f043 0201 	orr.w	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e055      	b.n	8006d62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe ff16 	bl	8005aec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006cc0:	482b      	ldr	r0, [pc, #172]	@ (8006d70 <ADC_Enable+0x100>)
 8006cc2:	f7fe fd5b 	bl	800577c <LL_ADC_GetCommonPathInternalCh>
 8006cc6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d013      	beq.n	8006cf8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006cd0:	4b28      	ldr	r3, [pc, #160]	@ (8006d74 <ADC_Enable+0x104>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	4a28      	ldr	r2, [pc, #160]	@ (8006d78 <ADC_Enable+0x108>)
 8006cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cdc:	099b      	lsrs	r3, r3, #6
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006cea:	e002      	b.n	8006cf2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1f9      	bne.n	8006cec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006cf8:	f7fe fcec 	bl	80056d4 <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cfe:	e028      	b.n	8006d52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe ff05 	bl	8005b14 <LL_ADC_IsEnabled>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fee9 	bl	8005aec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d1a:	f7fe fcdb 	bl	80056d4 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d914      	bls.n	8006d52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d00d      	beq.n	8006d52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3a:	f043 0210 	orr.w	r2, r3, #16
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d46:	f043 0201 	orr.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e007      	b.n	8006d62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d1cf      	bne.n	8006d00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	8000003f 	.word	0x8000003f
 8006d70:	50000300 	.word	0x50000300
 8006d74:	20000020 	.word	0x20000020
 8006d78:	053e2d63 	.word	0x053e2d63

08006d7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d14b      	bne.n	8006e2e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0308 	and.w	r3, r3, #8
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d021      	beq.n	8006df4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fd8d 	bl	80058d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d032      	beq.n	8006e26 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d12b      	bne.n	8006e26 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d11f      	bne.n	8006e26 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dea:	f043 0201 	orr.w	r2, r3, #1
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006df2:	e018      	b.n	8006e26 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d111      	bne.n	8006e26 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e1e:	f043 0201 	orr.w	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7fa fea6 	bl	8001b78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e2c:	e00e      	b.n	8006e4c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e32:	f003 0310 	and.w	r3, r3, #16
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fb1e 	bl	800647c <HAL_ADC_ErrorCallback>
}
 8006e40:	e004      	b.n	8006e4c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff faf6 	bl	8006454 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e8e:	f043 0204 	orr.w	r2, r3, #4
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff faf0 	bl	800647c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e9c:	bf00      	nop
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <LL_ADC_IsEnabled>:
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <LL_ADC_IsEnabled+0x18>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <LL_ADC_IsEnabled+0x1a>
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <LL_ADC_REG_IsConversionOngoing>:
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d101      	bne.n	8006ee2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b0a1      	sub	sp, #132	@ 0x84
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e08b      	b.n	800708a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006f7e:	2300      	movs	r3, #0
 8006f80:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f8a:	d102      	bne.n	8006f92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f8c:	4b41      	ldr	r3, [pc, #260]	@ (8007094 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	e001      	b.n	8006f96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fa0:	f043 0220 	orr.w	r2, r3, #32
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e06a      	b.n	800708a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff ff87 	bl	8006eca <LL_ADC_REG_IsConversionOngoing>
 8006fbc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff ff81 	bl	8006eca <LL_ADC_REG_IsConversionOngoing>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d14c      	bne.n	8007068 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d149      	bne.n	8007068 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006fd4:	4b30      	ldr	r3, [pc, #192]	@ (8007098 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006fd6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d028      	beq.n	8007032 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ff2:	035b      	lsls	r3, r3, #13
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ffa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ffc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007000:	f7ff ff50 	bl	8006ea4 <LL_ADC_IsEnabled>
 8007004:	4604      	mov	r4, r0
 8007006:	4823      	ldr	r0, [pc, #140]	@ (8007094 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007008:	f7ff ff4c 	bl	8006ea4 <LL_ADC_IsEnabled>
 800700c:	4603      	mov	r3, r0
 800700e:	4323      	orrs	r3, r4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d133      	bne.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800701c:	f023 030f 	bic.w	r3, r3, #15
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	6811      	ldr	r1, [r2, #0]
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	6892      	ldr	r2, [r2, #8]
 8007028:	430a      	orrs	r2, r1
 800702a:	431a      	orrs	r2, r3
 800702c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800702e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007030:	e024      	b.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800703a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800703c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800703e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007042:	f7ff ff2f 	bl	8006ea4 <LL_ADC_IsEnabled>
 8007046:	4604      	mov	r4, r0
 8007048:	4812      	ldr	r0, [pc, #72]	@ (8007094 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800704a:	f7ff ff2b 	bl	8006ea4 <LL_ADC_IsEnabled>
 800704e:	4603      	mov	r3, r0
 8007050:	4323      	orrs	r3, r4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d112      	bne.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800705e:	f023 030f 	bic.w	r3, r3, #15
 8007062:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007064:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007066:	e009      	b.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800706c:	f043 0220 	orr.w	r2, r3, #32
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800707a:	e000      	b.n	800707e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800707c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007086:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800708a:	4618      	mov	r0, r3
 800708c:	3784      	adds	r7, #132	@ 0x84
 800708e:	46bd      	mov	sp, r7
 8007090:	bd90      	pop	{r4, r7, pc}
 8007092:	bf00      	nop
 8007094:	50000100 	.word	0x50000100
 8007098:	50000300 	.word	0x50000300

0800709c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070ac:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <__NVIC_SetPriorityGrouping+0x44>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070b8:	4013      	ands	r3, r2
 80070ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070ce:	4a04      	ldr	r2, [pc, #16]	@ (80070e0 <__NVIC_SetPriorityGrouping+0x44>)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	60d3      	str	r3, [r2, #12]
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	e000ed00 	.word	0xe000ed00

080070e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070e8:	4b04      	ldr	r3, [pc, #16]	@ (80070fc <__NVIC_GetPriorityGrouping+0x18>)
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	f003 0307 	and.w	r3, r3, #7
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	e000ed00 	.word	0xe000ed00

08007100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800710a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710e:	2b00      	cmp	r3, #0
 8007110:	db0b      	blt.n	800712a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	f003 021f 	and.w	r2, r3, #31
 8007118:	4907      	ldr	r1, [pc, #28]	@ (8007138 <__NVIC_EnableIRQ+0x38>)
 800711a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	2001      	movs	r0, #1
 8007122:	fa00 f202 	lsl.w	r2, r0, r2
 8007126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	e000e100 	.word	0xe000e100

0800713c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714c:	2b00      	cmp	r3, #0
 800714e:	db0a      	blt.n	8007166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	490c      	ldr	r1, [pc, #48]	@ (8007188 <__NVIC_SetPriority+0x4c>)
 8007156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715a:	0112      	lsls	r2, r2, #4
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	440b      	add	r3, r1
 8007160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007164:	e00a      	b.n	800717c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	4908      	ldr	r1, [pc, #32]	@ (800718c <__NVIC_SetPriority+0x50>)
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	3b04      	subs	r3, #4
 8007174:	0112      	lsls	r2, r2, #4
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	440b      	add	r3, r1
 800717a:	761a      	strb	r2, [r3, #24]
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	e000e100 	.word	0xe000e100
 800718c:	e000ed00 	.word	0xe000ed00

08007190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007190:	b480      	push	{r7}
 8007192:	b089      	sub	sp, #36	@ 0x24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f1c3 0307 	rsb	r3, r3, #7
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	bf28      	it	cs
 80071ae:	2304      	movcs	r3, #4
 80071b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	3304      	adds	r3, #4
 80071b6:	2b06      	cmp	r3, #6
 80071b8:	d902      	bls.n	80071c0 <NVIC_EncodePriority+0x30>
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	3b03      	subs	r3, #3
 80071be:	e000      	b.n	80071c2 <NVIC_EncodePriority+0x32>
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071c4:	f04f 32ff 	mov.w	r2, #4294967295
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	43da      	mvns	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	401a      	ands	r2, r3
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071d8:	f04f 31ff 	mov.w	r1, #4294967295
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	fa01 f303 	lsl.w	r3, r1, r3
 80071e2:	43d9      	mvns	r1, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071e8:	4313      	orrs	r3, r2
         );
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3724      	adds	r7, #36	@ 0x24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff ff4c 	bl	800709c <__NVIC_SetPriorityGrouping>
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800721a:	f7ff ff63 	bl	80070e4 <__NVIC_GetPriorityGrouping>
 800721e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	6978      	ldr	r0, [r7, #20]
 8007226:	f7ff ffb3 	bl	8007190 <NVIC_EncodePriority>
 800722a:	4602      	mov	r2, r0
 800722c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff ff82 	bl	800713c <__NVIC_SetPriority>
}
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800724a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff ff56 	bl	8007100 <__NVIC_EnableIRQ>
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e08d      	b.n	800738a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	4b47      	ldr	r3, [pc, #284]	@ (8007394 <HAL_DMA_Init+0x138>)
 8007276:	429a      	cmp	r2, r3
 8007278:	d80f      	bhi.n	800729a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	4b45      	ldr	r3, [pc, #276]	@ (8007398 <HAL_DMA_Init+0x13c>)
 8007282:	4413      	add	r3, r2
 8007284:	4a45      	ldr	r2, [pc, #276]	@ (800739c <HAL_DMA_Init+0x140>)
 8007286:	fba2 2303 	umull	r2, r3, r2, r3
 800728a:	091b      	lsrs	r3, r3, #4
 800728c:	009a      	lsls	r2, r3, #2
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a42      	ldr	r2, [pc, #264]	@ (80073a0 <HAL_DMA_Init+0x144>)
 8007296:	641a      	str	r2, [r3, #64]	@ 0x40
 8007298:	e00e      	b.n	80072b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	4b40      	ldr	r3, [pc, #256]	@ (80073a4 <HAL_DMA_Init+0x148>)
 80072a2:	4413      	add	r3, r2
 80072a4:	4a3d      	ldr	r2, [pc, #244]	@ (800739c <HAL_DMA_Init+0x140>)
 80072a6:	fba2 2303 	umull	r2, r3, r2, r3
 80072aa:	091b      	lsrs	r3, r3, #4
 80072ac:	009a      	lsls	r2, r3, #2
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a3c      	ldr	r2, [pc, #240]	@ (80073a8 <HAL_DMA_Init+0x14c>)
 80072b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80072ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80072dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa82 	bl	8007814 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007318:	d102      	bne.n	8007320 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007334:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <HAL_DMA_Init+0x104>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b04      	cmp	r3, #4
 8007344:	d80c      	bhi.n	8007360 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 faa2 	bl	8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800735c:	605a      	str	r2, [r3, #4]
 800735e:	e008      	b.n	8007372 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40020407 	.word	0x40020407
 8007398:	bffdfff8 	.word	0xbffdfff8
 800739c:	cccccccd 	.word	0xcccccccd
 80073a0:	40020000 	.word	0x40020000
 80073a4:	bffdfbf8 	.word	0xbffdfbf8
 80073a8:	40020400 	.word	0x40020400

080073ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_DMA_Start_IT+0x20>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e066      	b.n	800749a <HAL_DMA_Start_IT+0xee>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d155      	bne.n	800748c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0201 	bic.w	r2, r2, #1
 80073fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f9c7 	bl	8007798 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740e:	2b00      	cmp	r3, #0
 8007410:	d008      	beq.n	8007424 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f042 020e 	orr.w	r2, r2, #14
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	e00f      	b.n	8007444 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0204 	bic.w	r2, r2, #4
 8007432:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 020a 	orr.w	r2, r2, #10
 8007442:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800745c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007460:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007466:	2b00      	cmp	r3, #0
 8007468:	d007      	beq.n	800747a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007474:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007478:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f042 0201 	orr.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	e005      	b.n	8007498 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007494:	2302      	movs	r3, #2
 8007496:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d005      	beq.n	80074c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2204      	movs	r2, #4
 80074be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
 80074c4:	e037      	b.n	8007536 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 020e 	bic.w	r2, r2, #14
 80074d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0201 	bic.w	r2, r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fa:	f003 021f 	and.w	r2, r3, #31
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	2101      	movs	r1, #1
 8007504:	fa01 f202 	lsl.w	r2, r1, r2
 8007508:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007512:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00c      	beq.n	8007536 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007526:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800752a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007534:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d00d      	beq.n	8007588 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2204      	movs	r2, #4
 8007570:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	73fb      	strb	r3, [r7, #15]
 8007586:	e047      	b.n	8007618 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 020e 	bic.w	r2, r2, #14
 8007596:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075bc:	f003 021f 	and.w	r2, r3, #31
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c4:	2101      	movs	r1, #1
 80075c6:	fa01 f202 	lsl.w	r2, r1, r2
 80075ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80075d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00c      	beq.n	80075f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80075f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	4798      	blx	r3
    }
  }
  return status;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763e:	f003 031f 	and.w	r3, r3, #31
 8007642:	2204      	movs	r2, #4
 8007644:	409a      	lsls	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4013      	ands	r3, r2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d026      	beq.n	800769c <HAL_DMA_IRQHandler+0x7a>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d021      	beq.n	800769c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d107      	bne.n	8007676 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0204 	bic.w	r2, r2, #4
 8007674:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767a:	f003 021f 	and.w	r2, r3, #31
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	2104      	movs	r1, #4
 8007684:	fa01 f202 	lsl.w	r2, r1, r2
 8007688:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768e:	2b00      	cmp	r3, #0
 8007690:	d071      	beq.n	8007776 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800769a:	e06c      	b.n	8007776 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2202      	movs	r2, #2
 80076a6:	409a      	lsls	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d02e      	beq.n	800770e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d029      	beq.n	800770e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 020a 	bic.w	r2, r2, #10
 80076d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e4:	f003 021f 	and.w	r2, r3, #31
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ec:	2102      	movs	r1, #2
 80076ee:	fa01 f202 	lsl.w	r2, r1, r2
 80076f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d038      	beq.n	8007776 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800770c:	e033      	b.n	8007776 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007712:	f003 031f 	and.w	r3, r3, #31
 8007716:	2208      	movs	r2, #8
 8007718:	409a      	lsls	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4013      	ands	r3, r2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02a      	beq.n	8007778 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d025      	beq.n	8007778 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 020e 	bic.w	r2, r2, #14
 800773a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007740:	f003 021f 	and.w	r2, r3, #31
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	2101      	movs	r1, #1
 800774a:	fa01 f202 	lsl.w	r2, r1, r2
 800774e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007776:	bf00      	nop
 8007778:	bf00      	nop
}
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80077ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80077c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c6:	f003 021f 	and.w	r2, r3, #31
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	2101      	movs	r1, #1
 80077d0:	fa01 f202 	lsl.w	r2, r1, r2
 80077d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d108      	bne.n	80077f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80077f6:	e007      	b.n	8007808 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	60da      	str	r2, [r3, #12]
}
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	4b16      	ldr	r3, [pc, #88]	@ (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007824:	429a      	cmp	r2, r3
 8007826:	d802      	bhi.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007828:	4b15      	ldr	r3, [pc, #84]	@ (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	e001      	b.n	8007832 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800782e:	4b15      	ldr	r3, [pc, #84]	@ (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007830:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	3b08      	subs	r3, #8
 800783e:	4a12      	ldr	r2, [pc, #72]	@ (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	091b      	lsrs	r3, r3, #4
 8007846:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784c:	089b      	lsrs	r3, r3, #2
 800784e:	009a      	lsls	r2, r3, #2
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	4413      	add	r3, r2
 8007854:	461a      	mov	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a0b      	ldr	r2, [pc, #44]	@ (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800785e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	2201      	movs	r2, #1
 8007868:	409a      	lsls	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40020407 	.word	0x40020407
 8007880:	40020800 	.word	0x40020800
 8007884:	40020820 	.word	0x40020820
 8007888:	cccccccd 	.word	0xcccccccd
 800788c:	40020880 	.word	0x40020880

08007890 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	461a      	mov	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a08      	ldr	r2, [pc, #32]	@ (80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80078b2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2201      	movs	r2, #1
 80078be:	409a      	lsls	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80078c4:	bf00      	nop
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	1000823f 	.word	0x1000823f
 80078d4:	40020940 	.word	0x40020940

080078d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80078e6:	e15a      	b.n	8007b9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	2101      	movs	r1, #1
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	fa01 f303 	lsl.w	r3, r1, r3
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 814c 	beq.w	8007b98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f003 0303 	and.w	r3, r3, #3
 8007908:	2b01      	cmp	r3, #1
 800790a:	d005      	beq.n	8007918 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007914:	2b02      	cmp	r3, #2
 8007916:	d130      	bne.n	800797a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	2203      	movs	r2, #3
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	43db      	mvns	r3, r3
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4013      	ands	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800794e:	2201      	movs	r2, #1
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	fa02 f303 	lsl.w	r3, r2, r3
 8007956:	43db      	mvns	r3, r3
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4013      	ands	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	091b      	lsrs	r3, r3, #4
 8007964:	f003 0201 	and.w	r2, r3, #1
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d017      	beq.n	80079b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	2203      	movs	r2, #3
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	43db      	mvns	r3, r3
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4013      	ands	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d123      	bne.n	8007a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	08da      	lsrs	r2, r3, #3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3208      	adds	r2, #8
 80079ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	220f      	movs	r2, #15
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	43db      	mvns	r3, r3
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4013      	ands	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	691a      	ldr	r2, [r3, #16]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	08da      	lsrs	r2, r3, #3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3208      	adds	r2, #8
 8007a04:	6939      	ldr	r1, [r7, #16]
 8007a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	2203      	movs	r2, #3
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	43db      	mvns	r3, r3
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f003 0203 	and.w	r2, r3, #3
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80a6 	beq.w	8007b98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8007bbc <HAL_GPIO_Init+0x2e4>)
 8007a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a50:	4a5a      	ldr	r2, [pc, #360]	@ (8007bbc <HAL_GPIO_Init+0x2e4>)
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	6613      	str	r3, [r2, #96]	@ 0x60
 8007a58:	4b58      	ldr	r3, [pc, #352]	@ (8007bbc <HAL_GPIO_Init+0x2e4>)
 8007a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	60bb      	str	r3, [r7, #8]
 8007a62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a64:	4a56      	ldr	r2, [pc, #344]	@ (8007bc0 <HAL_GPIO_Init+0x2e8>)
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	089b      	lsrs	r3, r3, #2
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f003 0303 	and.w	r3, r3, #3
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	220f      	movs	r2, #15
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	43db      	mvns	r3, r3
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4013      	ands	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007a8e:	d01f      	beq.n	8007ad0 <HAL_GPIO_Init+0x1f8>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a4c      	ldr	r2, [pc, #304]	@ (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d019      	beq.n	8007acc <HAL_GPIO_Init+0x1f4>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a4b      	ldr	r2, [pc, #300]	@ (8007bc8 <HAL_GPIO_Init+0x2f0>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <HAL_GPIO_Init+0x1f0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8007bcc <HAL_GPIO_Init+0x2f4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00d      	beq.n	8007ac4 <HAL_GPIO_Init+0x1ec>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a49      	ldr	r2, [pc, #292]	@ (8007bd0 <HAL_GPIO_Init+0x2f8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d007      	beq.n	8007ac0 <HAL_GPIO_Init+0x1e8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a48      	ldr	r2, [pc, #288]	@ (8007bd4 <HAL_GPIO_Init+0x2fc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d101      	bne.n	8007abc <HAL_GPIO_Init+0x1e4>
 8007ab8:	2305      	movs	r3, #5
 8007aba:	e00a      	b.n	8007ad2 <HAL_GPIO_Init+0x1fa>
 8007abc:	2306      	movs	r3, #6
 8007abe:	e008      	b.n	8007ad2 <HAL_GPIO_Init+0x1fa>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	e006      	b.n	8007ad2 <HAL_GPIO_Init+0x1fa>
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e004      	b.n	8007ad2 <HAL_GPIO_Init+0x1fa>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e002      	b.n	8007ad2 <HAL_GPIO_Init+0x1fa>
 8007acc:	2301      	movs	r3, #1
 8007ace:	e000      	b.n	8007ad2 <HAL_GPIO_Init+0x1fa>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	f002 0203 	and.w	r2, r2, #3
 8007ad8:	0092      	lsls	r2, r2, #2
 8007ada:	4093      	lsls	r3, r2
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ae2:	4937      	ldr	r1, [pc, #220]	@ (8007bc0 <HAL_GPIO_Init+0x2e8>)
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	089b      	lsrs	r3, r3, #2
 8007ae8:	3302      	adds	r3, #2
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007af0:	4b39      	ldr	r3, [pc, #228]	@ (8007bd8 <HAL_GPIO_Init+0x300>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	43db      	mvns	r3, r3
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4013      	ands	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b14:	4a30      	ldr	r2, [pc, #192]	@ (8007bd8 <HAL_GPIO_Init+0x300>)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd8 <HAL_GPIO_Init+0x300>)
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	43db      	mvns	r3, r3
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4013      	ands	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007b3e:	4a26      	ldr	r2, [pc, #152]	@ (8007bd8 <HAL_GPIO_Init+0x300>)
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007b44:	4b24      	ldr	r3, [pc, #144]	@ (8007bd8 <HAL_GPIO_Init+0x300>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4013      	ands	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b68:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd8 <HAL_GPIO_Init+0x300>)
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd8 <HAL_GPIO_Init+0x300>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	43db      	mvns	r3, r3
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b92:	4a11      	ldr	r2, [pc, #68]	@ (8007bd8 <HAL_GPIO_Init+0x300>)
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f47f ae9d 	bne.w	80078e8 <HAL_GPIO_Init+0x10>
  }
}
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	371c      	adds	r7, #28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	40010000 	.word	0x40010000
 8007bc4:	48000400 	.word	0x48000400
 8007bc8:	48000800 	.word	0x48000800
 8007bcc:	48000c00 	.word	0x48000c00
 8007bd0:	48001000 	.word	0x48001000
 8007bd4:	48001400 	.word	0x48001400
 8007bd8:	40010400 	.word	0x40010400

08007bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	887b      	ldrh	r3, [r7, #2]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]
 8007bf8:	e001      	b.n	8007bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	807b      	strh	r3, [r7, #2]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c1c:	787b      	ldrb	r3, [r7, #1]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c22:	887a      	ldrh	r2, [r7, #2]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c28:	e002      	b.n	8007c30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c2a:	887a      	ldrh	r2, [r7, #2]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c4e:	887a      	ldrh	r2, [r7, #2]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4013      	ands	r3, r2
 8007c54:	041a      	lsls	r2, r3, #16
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	43d9      	mvns	r1, r3
 8007c5a:	887b      	ldrh	r3, [r7, #2]
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	619a      	str	r2, [r3, #24]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c7a:	4b08      	ldr	r3, [pc, #32]	@ (8007c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c7c:	695a      	ldr	r2, [r3, #20]
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	4013      	ands	r3, r2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c86:	4a05      	ldr	r2, [pc, #20]	@ (8007c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c88:	88fb      	ldrh	r3, [r7, #6]
 8007c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fa ff0e 	bl	8002ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e08d      	b.n	8007dce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fa fd3e 	bl	8002748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2224      	movs	r2, #36	@ 0x24
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007cf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d107      	bne.n	8007d1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d16:	609a      	str	r2, [r3, #8]
 8007d18:	e006      	b.n	8007d28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007d26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d108      	bne.n	8007d42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d3e:	605a      	str	r2, [r3, #4]
 8007d40:	e007      	b.n	8007d52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69d9      	ldr	r1, [r3, #28]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1a      	ldr	r2, [r3, #32]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0201 	orr.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af02      	add	r7, sp, #8
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	4608      	mov	r0, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	461a      	mov	r2, r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	817b      	strh	r3, [r7, #10]
 8007dea:	460b      	mov	r3, r1
 8007dec:	813b      	strh	r3, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	f040 80f9 	bne.w	8007ff2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <HAL_I2C_Mem_Write+0x34>
 8007e06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d105      	bne.n	8007e18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e0ed      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_I2C_Mem_Write+0x4e>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e0e6      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x21c>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e2e:	f7fd fc51 	bl	80056d4 <HAL_GetTick>
 8007e32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	2319      	movs	r3, #25
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fac3 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e0d1      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2221      	movs	r2, #33	@ 0x21
 8007e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2240      	movs	r2, #64	@ 0x40
 8007e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6a3a      	ldr	r2, [r7, #32]
 8007e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e78:	88f8      	ldrh	r0, [r7, #6]
 8007e7a:	893a      	ldrh	r2, [r7, #8]
 8007e7c:	8979      	ldrh	r1, [r7, #10]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4603      	mov	r3, r0
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 f9d3 	bl	8008234 <I2C_RequestMemoryWrite>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0a9      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2bff      	cmp	r3, #255	@ 0xff
 8007ea8:	d90e      	bls.n	8007ec8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	22ff      	movs	r2, #255	@ 0xff
 8007eae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	8979      	ldrh	r1, [r7, #10]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fc47 	bl	8008754 <I2C_TransferConfig>
 8007ec6:	e00f      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	8979      	ldrh	r1, [r7, #10]
 8007eda:	2300      	movs	r3, #0
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 fc36 	bl	8008754 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fac6 	bl	800847e <I2C_WaitOnTXISFlagUntilTimeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e07b      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d034      	beq.n	8007fa0 <HAL_I2C_Mem_Write+0x1c8>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d130      	bne.n	8007fa0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f44:	2200      	movs	r2, #0
 8007f46:	2180      	movs	r1, #128	@ 0x80
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fa3f 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e04d      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2bff      	cmp	r3, #255	@ 0xff
 8007f60:	d90e      	bls.n	8007f80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	22ff      	movs	r2, #255	@ 0xff
 8007f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	8979      	ldrh	r1, [r7, #10]
 8007f70:	2300      	movs	r3, #0
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fbeb 	bl	8008754 <I2C_TransferConfig>
 8007f7e:	e00f      	b.n	8007fa0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	8979      	ldrh	r1, [r7, #10]
 8007f92:	2300      	movs	r3, #0
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fbda 	bl	8008754 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d19e      	bne.n	8007ee8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 faac 	bl	800850c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e01a      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6859      	ldr	r1, [r3, #4]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ffc <HAL_I2C_Mem_Write+0x224>)
 8007fd2:	400b      	ands	r3, r1
 8007fd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e000      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007ff2:	2302      	movs	r3, #2
  }
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	fe00e800 	.word	0xfe00e800

08008000 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	461a      	mov	r2, r3
 800800e:	4603      	mov	r3, r0
 8008010:	817b      	strh	r3, [r7, #10]
 8008012:	460b      	mov	r3, r1
 8008014:	813b      	strh	r3, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b20      	cmp	r3, #32
 8008024:	f040 80fd 	bne.w	8008222 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <HAL_I2C_Mem_Read+0x34>
 800802e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d105      	bne.n	8008040 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800803a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e0f1      	b.n	8008224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_I2C_Mem_Read+0x4e>
 800804a:	2302      	movs	r3, #2
 800804c:	e0ea      	b.n	8008224 <HAL_I2C_Mem_Read+0x224>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008056:	f7fd fb3d 	bl	80056d4 <HAL_GetTick>
 800805a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	2319      	movs	r3, #25
 8008062:	2201      	movs	r2, #1
 8008064:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f9af 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e0d5      	b.n	8008224 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2222      	movs	r2, #34	@ 0x22
 800807c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2240      	movs	r2, #64	@ 0x40
 8008084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a3a      	ldr	r2, [r7, #32]
 8008092:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080a0:	88f8      	ldrh	r0, [r7, #6]
 80080a2:	893a      	ldrh	r2, [r7, #8]
 80080a4:	8979      	ldrh	r1, [r7, #10]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4603      	mov	r3, r0
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f913 	bl	80082dc <I2C_RequestMemoryRead>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e0ad      	b.n	8008224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2bff      	cmp	r3, #255	@ 0xff
 80080d0:	d90e      	bls.n	80080f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	22ff      	movs	r2, #255	@ 0xff
 80080d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	8979      	ldrh	r1, [r7, #10]
 80080e0:	4b52      	ldr	r3, [pc, #328]	@ (800822c <HAL_I2C_Mem_Read+0x22c>)
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fb33 	bl	8008754 <I2C_TransferConfig>
 80080ee:	e00f      	b.n	8008110 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	8979      	ldrh	r1, [r7, #10]
 8008102:	4b4a      	ldr	r3, [pc, #296]	@ (800822c <HAL_I2C_Mem_Read+0x22c>)
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fb22 	bl	8008754 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008116:	2200      	movs	r2, #0
 8008118:	2104      	movs	r1, #4
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f956 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e07c      	b.n	8008224 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d034      	beq.n	80081d0 <HAL_I2C_Mem_Read+0x1d0>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800816a:	2b00      	cmp	r3, #0
 800816c:	d130      	bne.n	80081d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008174:	2200      	movs	r2, #0
 8008176:	2180      	movs	r1, #128	@ 0x80
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f927 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e04d      	b.n	8008224 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800818c:	b29b      	uxth	r3, r3
 800818e:	2bff      	cmp	r3, #255	@ 0xff
 8008190:	d90e      	bls.n	80081b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	22ff      	movs	r2, #255	@ 0xff
 8008196:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800819c:	b2da      	uxtb	r2, r3
 800819e:	8979      	ldrh	r1, [r7, #10]
 80081a0:	2300      	movs	r3, #0
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fad3 	bl	8008754 <I2C_TransferConfig>
 80081ae:	e00f      	b.n	80081d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	8979      	ldrh	r1, [r7, #10]
 80081c2:	2300      	movs	r3, #0
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fac2 	bl	8008754 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d19a      	bne.n	8008110 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 f994 	bl	800850c <I2C_WaitOnSTOPFlagUntilTimeout>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e01a      	b.n	8008224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2220      	movs	r2, #32
 80081f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6859      	ldr	r1, [r3, #4]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	4b0b      	ldr	r3, [pc, #44]	@ (8008230 <HAL_I2C_Mem_Read+0x230>)
 8008202:	400b      	ands	r3, r1
 8008204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2220      	movs	r2, #32
 800820a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	e000      	b.n	8008224 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008222:	2302      	movs	r3, #2
  }
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	80002400 	.word	0x80002400
 8008230:	fe00e800 	.word	0xfe00e800

08008234 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af02      	add	r7, sp, #8
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	4608      	mov	r0, r1
 800823e:	4611      	mov	r1, r2
 8008240:	461a      	mov	r2, r3
 8008242:	4603      	mov	r3, r0
 8008244:	817b      	strh	r3, [r7, #10]
 8008246:	460b      	mov	r3, r1
 8008248:	813b      	strh	r3, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	b2da      	uxtb	r2, r3
 8008252:	8979      	ldrh	r1, [r7, #10]
 8008254:	4b20      	ldr	r3, [pc, #128]	@ (80082d8 <I2C_RequestMemoryWrite+0xa4>)
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 fa79 	bl	8008754 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	69b9      	ldr	r1, [r7, #24]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 f909 	bl	800847e <I2C_WaitOnTXISFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e02c      	b.n	80082d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008276:	88fb      	ldrh	r3, [r7, #6]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d105      	bne.n	8008288 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800827c:	893b      	ldrh	r3, [r7, #8]
 800827e:	b2da      	uxtb	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	629a      	str	r2, [r3, #40]	@ 0x28
 8008286:	e015      	b.n	80082b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008288:	893b      	ldrh	r3, [r7, #8]
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	b29b      	uxth	r3, r3
 800828e:	b2da      	uxtb	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	69b9      	ldr	r1, [r7, #24]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 f8ef 	bl	800847e <I2C_WaitOnTXISFlagUntilTimeout>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e012      	b.n	80082d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082aa:	893b      	ldrh	r3, [r7, #8]
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2200      	movs	r2, #0
 80082bc:	2180      	movs	r1, #128	@ 0x80
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 f884 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	80002000 	.word	0x80002000

080082dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	4603      	mov	r3, r0
 80082ec:	817b      	strh	r3, [r7, #10]
 80082ee:	460b      	mov	r3, r1
 80082f0:	813b      	strh	r3, [r7, #8]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	8979      	ldrh	r1, [r7, #10]
 80082fc:	4b20      	ldr	r3, [pc, #128]	@ (8008380 <I2C_RequestMemoryRead+0xa4>)
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	2300      	movs	r3, #0
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fa26 	bl	8008754 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	69b9      	ldr	r1, [r7, #24]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f8b6 	bl	800847e <I2C_WaitOnTXISFlagUntilTimeout>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e02c      	b.n	8008376 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800831c:	88fb      	ldrh	r3, [r7, #6]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d105      	bne.n	800832e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	b2da      	uxtb	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	629a      	str	r2, [r3, #40]	@ 0x28
 800832c:	e015      	b.n	800835a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800832e:	893b      	ldrh	r3, [r7, #8]
 8008330:	0a1b      	lsrs	r3, r3, #8
 8008332:	b29b      	uxth	r3, r3
 8008334:	b2da      	uxtb	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800833c:	69fa      	ldr	r2, [r7, #28]
 800833e:	69b9      	ldr	r1, [r7, #24]
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 f89c 	bl	800847e <I2C_WaitOnTXISFlagUntilTimeout>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e012      	b.n	8008376 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008350:	893b      	ldrh	r3, [r7, #8]
 8008352:	b2da      	uxtb	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	2200      	movs	r2, #0
 8008362:	2140      	movs	r1, #64	@ 0x40
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 f831 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e000      	b.n	8008376 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	80002000 	.word	0x80002000

08008384 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b02      	cmp	r3, #2
 8008398:	d103      	bne.n	80083a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2200      	movs	r2, #0
 80083a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d007      	beq.n	80083c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	619a      	str	r2, [r3, #24]
  }
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	4613      	mov	r3, r2
 80083da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083dc:	e03b      	b.n	8008456 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 f8d6 	bl	8008594 <I2C_IsErrorOccurred>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e041      	b.n	8008476 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d02d      	beq.n	8008456 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fa:	f7fd f96b 	bl	80056d4 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d302      	bcc.n	8008410 <I2C_WaitOnFlagUntilTimeout+0x44>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d122      	bne.n	8008456 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	4013      	ands	r3, r2
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	429a      	cmp	r2, r3
 800841e:	bf0c      	ite	eq
 8008420:	2301      	moveq	r3, #1
 8008422:	2300      	movne	r3, #0
 8008424:	b2db      	uxtb	r3, r3
 8008426:	461a      	mov	r2, r3
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	429a      	cmp	r2, r3
 800842c:	d113      	bne.n	8008456 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008432:	f043 0220 	orr.w	r2, r3, #32
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2220      	movs	r2, #32
 800843e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e00f      	b.n	8008476 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	699a      	ldr	r2, [r3, #24]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4013      	ands	r3, r2
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	429a      	cmp	r2, r3
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	429a      	cmp	r2, r3
 8008472:	d0b4      	beq.n	80083de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800848a:	e033      	b.n	80084f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f87f 	bl	8008594 <I2C_IsErrorOccurred>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e031      	b.n	8008504 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a6:	d025      	beq.n	80084f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a8:	f7fd f914 	bl	80056d4 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d302      	bcc.n	80084be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d11a      	bne.n	80084f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d013      	beq.n	80084f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d0:	f043 0220 	orr.w	r2, r3, #32
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e007      	b.n	8008504 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d1c4      	bne.n	800848c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008518:	e02f      	b.n	800857a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f838 	bl	8008594 <I2C_IsErrorOccurred>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e02d      	b.n	800858a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852e:	f7fd f8d1 	bl	80056d4 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	429a      	cmp	r2, r3
 800853c:	d302      	bcc.n	8008544 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d11a      	bne.n	800857a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b20      	cmp	r3, #32
 8008550:	d013      	beq.n	800857a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008556:	f043 0220 	orr.w	r2, r3, #32
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e007      	b.n	800858a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	2b20      	cmp	r3, #32
 8008586:	d1c8      	bne.n	800851a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08a      	sub	sp, #40	@ 0x28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d068      	beq.n	8008692 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2210      	movs	r2, #16
 80085c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085c8:	e049      	b.n	800865e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d0:	d045      	beq.n	800865e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80085d2:	f7fd f87f 	bl	80056d4 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d302      	bcc.n	80085e8 <I2C_IsErrorOccurred+0x54>
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d13a      	bne.n	800865e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800860a:	d121      	bne.n	8008650 <I2C_IsErrorOccurred+0xbc>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008612:	d01d      	beq.n	8008650 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008614:	7cfb      	ldrb	r3, [r7, #19]
 8008616:	2b20      	cmp	r3, #32
 8008618:	d01a      	beq.n	8008650 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008628:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800862a:	f7fd f853 	bl	80056d4 <HAL_GetTick>
 800862e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008630:	e00e      	b.n	8008650 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008632:	f7fd f84f 	bl	80056d4 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b19      	cmp	r3, #25
 800863e:	d907      	bls.n	8008650 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	f043 0320 	orr.w	r3, r3, #32
 8008646:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800864e:	e006      	b.n	800865e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b20      	cmp	r3, #32
 800865c:	d1e9      	bne.n	8008632 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b20      	cmp	r3, #32
 800866a:	d003      	beq.n	8008674 <I2C_IsErrorOccurred+0xe0>
 800866c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0aa      	beq.n	80085ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008678:	2b00      	cmp	r3, #0
 800867a:	d103      	bne.n	8008684 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2220      	movs	r2, #32
 8008682:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	f043 0304 	orr.w	r3, r3, #4
 800868a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	f043 0301 	orr.w	r3, r3, #1
 80086aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00b      	beq.n	80086de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	f043 0308 	orr.w	r3, r3, #8
 80086cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80086d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	f043 0302 	orr.w	r3, r3, #2
 80086ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01c      	beq.n	8008742 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7ff fe3b 	bl	8008384 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6859      	ldr	r1, [r3, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <I2C_IsErrorOccurred+0x1bc>)
 800871a:	400b      	ands	r3, r1
 800871c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2220      	movs	r2, #32
 800872e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008746:	4618      	mov	r0, r3
 8008748:	3728      	adds	r7, #40	@ 0x28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	fe00e800 	.word	0xfe00e800

08008754 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	607b      	str	r3, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	817b      	strh	r3, [r7, #10]
 8008762:	4613      	mov	r3, r2
 8008764:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008766:	897b      	ldrh	r3, [r7, #10]
 8008768:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800876c:	7a7b      	ldrb	r3, [r7, #9]
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008774:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	4313      	orrs	r3, r2
 800877e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008782:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	0d5b      	lsrs	r3, r3, #21
 800878e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008792:	4b08      	ldr	r3, [pc, #32]	@ (80087b4 <I2C_TransferConfig+0x60>)
 8008794:	430b      	orrs	r3, r1
 8008796:	43db      	mvns	r3, r3
 8008798:	ea02 0103 	and.w	r1, r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80087a6:	bf00      	nop
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	03ff63ff 	.word	0x03ff63ff

080087b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d138      	bne.n	8008840 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80087d8:	2302      	movs	r3, #2
 80087da:	e032      	b.n	8008842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2224      	movs	r2, #36	@ 0x24
 80087e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 0201 	bic.w	r2, r2, #1
 80087fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800880a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6819      	ldr	r1, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	e000      	b.n	8008842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008840:	2302      	movs	r3, #2
  }
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b20      	cmp	r3, #32
 8008862:	d139      	bne.n	80088d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800886e:	2302      	movs	r3, #2
 8008870:	e033      	b.n	80088da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2224      	movs	r2, #36	@ 0x24
 800887e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0201 	bic.w	r2, r2, #1
 8008890:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80088a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	021b      	lsls	r3, r3, #8
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0201 	orr.w	r2, r2, #1
 80088c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e000      	b.n	80088da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80088d8:	2302      	movs	r3, #2
  }
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d141      	bne.n	800897a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80088f6:	4b4b      	ldr	r3, [pc, #300]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80088fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008902:	d131      	bne.n	8008968 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008904:	4b47      	ldr	r3, [pc, #284]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800890a:	4a46      	ldr	r2, [pc, #280]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800890c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008914:	4b43      	ldr	r3, [pc, #268]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800891c:	4a41      	ldr	r2, [pc, #260]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800891e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008924:	4b40      	ldr	r3, [pc, #256]	@ (8008a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2232      	movs	r2, #50	@ 0x32
 800892a:	fb02 f303 	mul.w	r3, r2, r3
 800892e:	4a3f      	ldr	r2, [pc, #252]	@ (8008a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008930:	fba2 2303 	umull	r2, r3, r2, r3
 8008934:	0c9b      	lsrs	r3, r3, #18
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800893a:	e002      	b.n	8008942 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3b01      	subs	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008942:	4b38      	ldr	r3, [pc, #224]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800894a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800894e:	d102      	bne.n	8008956 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1f2      	bne.n	800893c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008956:	4b33      	ldr	r3, [pc, #204]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800895e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008962:	d158      	bne.n	8008a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e057      	b.n	8008a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008968:	4b2e      	ldr	r3, [pc, #184]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800896a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800896e:	4a2d      	ldr	r2, [pc, #180]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008978:	e04d      	b.n	8008a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008980:	d141      	bne.n	8008a06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008982:	4b28      	ldr	r3, [pc, #160]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800898a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800898e:	d131      	bne.n	80089f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008990:	4b24      	ldr	r3, [pc, #144]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008996:	4a23      	ldr	r2, [pc, #140]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800899c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80089a0:	4b20      	ldr	r3, [pc, #128]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80089a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80089ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80089b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2232      	movs	r2, #50	@ 0x32
 80089b6:	fb02 f303 	mul.w	r3, r2, r3
 80089ba:	4a1c      	ldr	r2, [pc, #112]	@ (8008a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80089bc:	fba2 2303 	umull	r2, r3, r2, r3
 80089c0:	0c9b      	lsrs	r3, r3, #18
 80089c2:	3301      	adds	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80089c6:	e002      	b.n	80089ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80089ce:	4b15      	ldr	r3, [pc, #84]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089da:	d102      	bne.n	80089e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1f2      	bne.n	80089c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089e2:	4b10      	ldr	r3, [pc, #64]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ee:	d112      	bne.n	8008a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e011      	b.n	8008a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008a04:	e007      	b.n	8008a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008a06:	4b07      	ldr	r3, [pc, #28]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a0e:	4a05      	ldr	r2, [pc, #20]	@ (8008a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	40007000 	.word	0x40007000
 8008a28:	20000020 	.word	0x20000020
 8008a2c:	431bde83 	.word	0x431bde83

08008a30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008a34:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	4a04      	ldr	r2, [pc, #16]	@ (8008a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a3e:	6093      	str	r3, [r2, #8]
}
 8008a40:	bf00      	nop
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	40007000 	.word	0x40007000

08008a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e2fe      	b.n	8009060 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d075      	beq.n	8008b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a6e:	4b97      	ldr	r3, [pc, #604]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 030c 	and.w	r3, r3, #12
 8008a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a78:	4b94      	ldr	r3, [pc, #592]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0303 	and.w	r3, r3, #3
 8008a80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d102      	bne.n	8008a8e <HAL_RCC_OscConfig+0x3e>
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d002      	beq.n	8008a94 <HAL_RCC_OscConfig+0x44>
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d10b      	bne.n	8008aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a94:	4b8d      	ldr	r3, [pc, #564]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05b      	beq.n	8008b58 <HAL_RCC_OscConfig+0x108>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d157      	bne.n	8008b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e2d9      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ab4:	d106      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x74>
 8008ab6:	4b85      	ldr	r3, [pc, #532]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a84      	ldr	r2, [pc, #528]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	e01d      	b.n	8008b00 <HAL_RCC_OscConfig+0xb0>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008acc:	d10c      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x98>
 8008ace:	4b7f      	ldr	r3, [pc, #508]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	4b7c      	ldr	r3, [pc, #496]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a7b      	ldr	r2, [pc, #492]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	e00b      	b.n	8008b00 <HAL_RCC_OscConfig+0xb0>
 8008ae8:	4b78      	ldr	r3, [pc, #480]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a77      	ldr	r2, [pc, #476]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	4b75      	ldr	r3, [pc, #468]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a74      	ldr	r2, [pc, #464]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d013      	beq.n	8008b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b08:	f7fc fde4 	bl	80056d4 <HAL_GetTick>
 8008b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b0e:	e008      	b.n	8008b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b10:	f7fc fde0 	bl	80056d4 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b64      	cmp	r3, #100	@ 0x64
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e29e      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b22:	4b6a      	ldr	r3, [pc, #424]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0f0      	beq.n	8008b10 <HAL_RCC_OscConfig+0xc0>
 8008b2e:	e014      	b.n	8008b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b30:	f7fc fdd0 	bl	80056d4 <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b38:	f7fc fdcc 	bl	80056d4 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b64      	cmp	r3, #100	@ 0x64
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e28a      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b4a:	4b60      	ldr	r3, [pc, #384]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1f0      	bne.n	8008b38 <HAL_RCC_OscConfig+0xe8>
 8008b56:	e000      	b.n	8008b5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d075      	beq.n	8008c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b66:	4b59      	ldr	r3, [pc, #356]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 030c 	and.w	r3, r3, #12
 8008b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b70:	4b56      	ldr	r3, [pc, #344]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f003 0303 	and.w	r3, r3, #3
 8008b78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b0c      	cmp	r3, #12
 8008b7e:	d102      	bne.n	8008b86 <HAL_RCC_OscConfig+0x136>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d002      	beq.n	8008b8c <HAL_RCC_OscConfig+0x13c>
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d11f      	bne.n	8008bcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x154>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e25d      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ba4:	4b49      	ldr	r3, [pc, #292]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	061b      	lsls	r3, r3, #24
 8008bb2:	4946      	ldr	r1, [pc, #280]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008bb8:	4b45      	ldr	r3, [pc, #276]	@ (8008cd0 <HAL_RCC_OscConfig+0x280>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fa ff1b 	bl	80039f8 <HAL_InitTick>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d043      	beq.n	8008c50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e249      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d023      	beq.n	8008c1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be0:	f7fc fd78 	bl	80056d4 <HAL_GetTick>
 8008be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008be8:	f7fc fd74 	bl	80056d4 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e232      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bfa:	4b34      	ldr	r3, [pc, #208]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0f0      	beq.n	8008be8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c06:	4b31      	ldr	r3, [pc, #196]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	061b      	lsls	r3, r3, #24
 8008c14:	492d      	ldr	r1, [pc, #180]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008c16:	4313      	orrs	r3, r2
 8008c18:	604b      	str	r3, [r1, #4]
 8008c1a:	e01a      	b.n	8008c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a2a      	ldr	r2, [pc, #168]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c28:	f7fc fd54 	bl	80056d4 <HAL_GetTick>
 8008c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c30:	f7fc fd50 	bl	80056d4 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e20e      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c42:	4b22      	ldr	r3, [pc, #136]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x1e0>
 8008c4e:	e000      	b.n	8008c52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d041      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01c      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c66:	4b19      	ldr	r3, [pc, #100]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c6c:	4a17      	ldr	r2, [pc, #92]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008c6e:	f043 0301 	orr.w	r3, r3, #1
 8008c72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c76:	f7fc fd2d 	bl	80056d4 <HAL_GetTick>
 8008c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c7c:	e008      	b.n	8008c90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c7e:	f7fc fd29 	bl	80056d4 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d901      	bls.n	8008c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e1e7      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c90:	4b0e      	ldr	r3, [pc, #56]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0ef      	beq.n	8008c7e <HAL_RCC_OscConfig+0x22e>
 8008c9e:	e020      	b.n	8008ce2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ca6:	4a09      	ldr	r2, [pc, #36]	@ (8008ccc <HAL_RCC_OscConfig+0x27c>)
 8008ca8:	f023 0301 	bic.w	r3, r3, #1
 8008cac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb0:	f7fc fd10 	bl	80056d4 <HAL_GetTick>
 8008cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cb6:	e00d      	b.n	8008cd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cb8:	f7fc fd0c 	bl	80056d4 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d906      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e1ca      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
 8008cca:	bf00      	nop
 8008ccc:	40021000 	.word	0x40021000
 8008cd0:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1ea      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80a6 	beq.w	8008e3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008cf4:	4b84      	ldr	r3, [pc, #528]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <HAL_RCC_OscConfig+0x2b4>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e000      	b.n	8008d06 <HAL_RCC_OscConfig+0x2b6>
 8008d04:	2300      	movs	r3, #0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00d      	beq.n	8008d26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d16:	4b7c      	ldr	r3, [pc, #496]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008d22:	2301      	movs	r3, #1
 8008d24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d26:	4b79      	ldr	r3, [pc, #484]	@ (8008f0c <HAL_RCC_OscConfig+0x4bc>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d118      	bne.n	8008d64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d32:	4b76      	ldr	r3, [pc, #472]	@ (8008f0c <HAL_RCC_OscConfig+0x4bc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a75      	ldr	r2, [pc, #468]	@ (8008f0c <HAL_RCC_OscConfig+0x4bc>)
 8008d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d3e:	f7fc fcc9 	bl	80056d4 <HAL_GetTick>
 8008d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d44:	e008      	b.n	8008d58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d46:	f7fc fcc5 	bl	80056d4 <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d901      	bls.n	8008d58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e183      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d58:	4b6c      	ldr	r3, [pc, #432]	@ (8008f0c <HAL_RCC_OscConfig+0x4bc>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0f0      	beq.n	8008d46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d108      	bne.n	8008d7e <HAL_RCC_OscConfig+0x32e>
 8008d6c:	4b66      	ldr	r3, [pc, #408]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d72:	4a65      	ldr	r2, [pc, #404]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d7c:	e024      	b.n	8008dc8 <HAL_RCC_OscConfig+0x378>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2b05      	cmp	r3, #5
 8008d84:	d110      	bne.n	8008da8 <HAL_RCC_OscConfig+0x358>
 8008d86:	4b60      	ldr	r3, [pc, #384]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d8c:	4a5e      	ldr	r2, [pc, #376]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d8e:	f043 0304 	orr.w	r3, r3, #4
 8008d92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d96:	4b5c      	ldr	r3, [pc, #368]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008d9e:	f043 0301 	orr.w	r3, r3, #1
 8008da2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008da6:	e00f      	b.n	8008dc8 <HAL_RCC_OscConfig+0x378>
 8008da8:	4b57      	ldr	r3, [pc, #348]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dae:	4a56      	ldr	r2, [pc, #344]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008db0:	f023 0301 	bic.w	r3, r3, #1
 8008db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008db8:	4b53      	ldr	r3, [pc, #332]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dbe:	4a52      	ldr	r2, [pc, #328]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008dc0:	f023 0304 	bic.w	r3, r3, #4
 8008dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d016      	beq.n	8008dfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd0:	f7fc fc80 	bl	80056d4 <HAL_GetTick>
 8008dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dd6:	e00a      	b.n	8008dee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dd8:	f7fc fc7c 	bl	80056d4 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e138      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dee:	4b46      	ldr	r3, [pc, #280]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0ed      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x388>
 8008dfc:	e015      	b.n	8008e2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dfe:	f7fc fc69 	bl	80056d4 <HAL_GetTick>
 8008e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e04:	e00a      	b.n	8008e1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e06:	f7fc fc65 	bl	80056d4 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e121      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1ed      	bne.n	8008e06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e2a:	7ffb      	ldrb	r3, [r7, #31]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d105      	bne.n	8008e3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e30:	4b35      	ldr	r3, [pc, #212]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e34:	4a34      	ldr	r2, [pc, #208]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0320 	and.w	r3, r3, #32
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d03c      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01c      	beq.n	8008e8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e50:	4b2d      	ldr	r3, [pc, #180]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e56:	4a2c      	ldr	r2, [pc, #176]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008e58:	f043 0301 	orr.w	r3, r3, #1
 8008e5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e60:	f7fc fc38 	bl	80056d4 <HAL_GetTick>
 8008e64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e66:	e008      	b.n	8008e7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e68:	f7fc fc34 	bl	80056d4 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e0f2      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e7a:	4b23      	ldr	r3, [pc, #140]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0ef      	beq.n	8008e68 <HAL_RCC_OscConfig+0x418>
 8008e88:	e01b      	b.n	8008ec2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e90:	4a1d      	ldr	r2, [pc, #116]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008e92:	f023 0301 	bic.w	r3, r3, #1
 8008e96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e9a:	f7fc fc1b 	bl	80056d4 <HAL_GetTick>
 8008e9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ea0:	e008      	b.n	8008eb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ea2:	f7fc fc17 	bl	80056d4 <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d901      	bls.n	8008eb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e0d5      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008eb4:	4b14      	ldr	r3, [pc, #80]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1ef      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 80c9 	beq.w	800905e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 030c 	and.w	r3, r3, #12
 8008ed4:	2b0c      	cmp	r3, #12
 8008ed6:	f000 8083 	beq.w	8008fe0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d15e      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ee2:	4b09      	ldr	r3, [pc, #36]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a08      	ldr	r2, [pc, #32]	@ (8008f08 <HAL_RCC_OscConfig+0x4b8>)
 8008ee8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eee:	f7fc fbf1 	bl	80056d4 <HAL_GetTick>
 8008ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ef4:	e00c      	b.n	8008f10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ef6:	f7fc fbed 	bl	80056d4 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d905      	bls.n	8008f10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e0ab      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
 8008f08:	40021000 	.word	0x40021000
 8008f0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f10:	4b55      	ldr	r3, [pc, #340]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1ec      	bne.n	8008ef6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f1c:	4b52      	ldr	r3, [pc, #328]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	4b52      	ldr	r3, [pc, #328]	@ (800906c <HAL_RCC_OscConfig+0x61c>)
 8008f22:	4013      	ands	r3, r2
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	6a11      	ldr	r1, [r2, #32]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f2c:	3a01      	subs	r2, #1
 8008f2e:	0112      	lsls	r2, r2, #4
 8008f30:	4311      	orrs	r1, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f36:	0212      	lsls	r2, r2, #8
 8008f38:	4311      	orrs	r1, r2
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008f3e:	0852      	lsrs	r2, r2, #1
 8008f40:	3a01      	subs	r2, #1
 8008f42:	0552      	lsls	r2, r2, #21
 8008f44:	4311      	orrs	r1, r2
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f4a:	0852      	lsrs	r2, r2, #1
 8008f4c:	3a01      	subs	r2, #1
 8008f4e:	0652      	lsls	r2, r2, #25
 8008f50:	4311      	orrs	r1, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f56:	06d2      	lsls	r2, r2, #27
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	4943      	ldr	r1, [pc, #268]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f60:	4b41      	ldr	r3, [pc, #260]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a40      	ldr	r2, [pc, #256]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	4a3d      	ldr	r2, [pc, #244]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f78:	f7fc fbac 	bl	80056d4 <HAL_GetTick>
 8008f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f7e:	e008      	b.n	8008f92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f80:	f7fc fba8 	bl	80056d4 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e066      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f92:	4b35      	ldr	r3, [pc, #212]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0f0      	beq.n	8008f80 <HAL_RCC_OscConfig+0x530>
 8008f9e:	e05e      	b.n	800905e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fa0:	4b31      	ldr	r3, [pc, #196]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a30      	ldr	r2, [pc, #192]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fac:	f7fc fb92 	bl	80056d4 <HAL_GetTick>
 8008fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fb4:	f7fc fb8e 	bl	80056d4 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e04c      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fc6:	4b28      	ldr	r3, [pc, #160]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f0      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008fd2:	4b25      	ldr	r3, [pc, #148]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	4924      	ldr	r1, [pc, #144]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008fd8:	4b25      	ldr	r3, [pc, #148]	@ (8009070 <HAL_RCC_OscConfig+0x620>)
 8008fda:	4013      	ands	r3, r2
 8008fdc:	60cb      	str	r3, [r1, #12]
 8008fde:	e03e      	b.n	800905e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e039      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008fec:	4b1e      	ldr	r3, [pc, #120]	@ (8009068 <HAL_RCC_OscConfig+0x618>)
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f003 0203 	and.w	r2, r3, #3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d12c      	bne.n	800905a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	3b01      	subs	r3, #1
 800900c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800900e:	429a      	cmp	r2, r3
 8009010:	d123      	bne.n	800905a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800901e:	429a      	cmp	r2, r3
 8009020:	d11b      	bne.n	800905a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800902e:	429a      	cmp	r2, r3
 8009030:	d113      	bne.n	800905a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903c:	085b      	lsrs	r3, r3, #1
 800903e:	3b01      	subs	r3, #1
 8009040:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009042:	429a      	cmp	r2, r3
 8009044:	d109      	bne.n	800905a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	3b01      	subs	r3, #1
 8009054:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009056:	429a      	cmp	r2, r3
 8009058:	d001      	beq.n	800905e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e000      	b.n	8009060 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3720      	adds	r7, #32
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	40021000 	.word	0x40021000
 800906c:	019f800c 	.word	0x019f800c
 8009070:	feeefffc 	.word	0xfeeefffc

08009074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e11e      	b.n	80092ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800908c:	4b91      	ldr	r3, [pc, #580]	@ (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d910      	bls.n	80090bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909a:	4b8e      	ldr	r3, [pc, #568]	@ (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f023 020f 	bic.w	r2, r3, #15
 80090a2:	498c      	ldr	r1, [pc, #560]	@ (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090aa:	4b8a      	ldr	r3, [pc, #552]	@ (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d001      	beq.n	80090bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e106      	b.n	80092ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d073      	beq.n	80091b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d129      	bne.n	8009124 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090d0:	4b81      	ldr	r3, [pc, #516]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e0f4      	b.n	80092ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80090e0:	f000 f9ce 	bl	8009480 <RCC_GetSysClockFreqFromPLLSource>
 80090e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	4a7c      	ldr	r2, [pc, #496]	@ (80092dc <HAL_RCC_ClockConfig+0x268>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d93f      	bls.n	800916e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80090ee:	4b7a      	ldr	r3, [pc, #488]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d009      	beq.n	800910e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009102:	2b00      	cmp	r3, #0
 8009104:	d033      	beq.n	800916e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800910a:	2b00      	cmp	r3, #0
 800910c:	d12f      	bne.n	800916e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800910e:	4b72      	ldr	r3, [pc, #456]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009116:	4a70      	ldr	r2, [pc, #448]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 8009118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800911e:	2380      	movs	r3, #128	@ 0x80
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	e024      	b.n	800916e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2b02      	cmp	r3, #2
 800912a:	d107      	bne.n	800913c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800912c:	4b6a      	ldr	r3, [pc, #424]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d109      	bne.n	800914c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0c6      	b.n	80092ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800913c:	4b66      	ldr	r3, [pc, #408]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e0be      	b.n	80092ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800914c:	f000 f8ce 	bl	80092ec <HAL_RCC_GetSysClockFreq>
 8009150:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	4a61      	ldr	r2, [pc, #388]	@ (80092dc <HAL_RCC_ClockConfig+0x268>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d909      	bls.n	800916e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800915a:	4b5f      	ldr	r3, [pc, #380]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009162:	4a5d      	ldr	r2, [pc, #372]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 8009164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009168:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800916a:	2380      	movs	r3, #128	@ 0x80
 800916c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800916e:	4b5a      	ldr	r3, [pc, #360]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f023 0203 	bic.w	r2, r3, #3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	4957      	ldr	r1, [pc, #348]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800917c:	4313      	orrs	r3, r2
 800917e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009180:	f7fc faa8 	bl	80056d4 <HAL_GetTick>
 8009184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009186:	e00a      	b.n	800919e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009188:	f7fc faa4 	bl	80056d4 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009196:	4293      	cmp	r3, r2
 8009198:	d901      	bls.n	800919e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e095      	b.n	80092ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800919e:	4b4e      	ldr	r3, [pc, #312]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 020c 	and.w	r2, r3, #12
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d1eb      	bne.n	8009188 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d023      	beq.n	8009204 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091c8:	4b43      	ldr	r3, [pc, #268]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	4a42      	ldr	r2, [pc, #264]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80091ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80091d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0308 	and.w	r3, r3, #8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80091e0:	4b3d      	ldr	r3, [pc, #244]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80091e8:	4a3b      	ldr	r2, [pc, #236]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80091ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80091ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091f0:	4b39      	ldr	r3, [pc, #228]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	4936      	ldr	r1, [pc, #216]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	608b      	str	r3, [r1, #8]
 8009202:	e008      	b.n	8009216 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2b80      	cmp	r3, #128	@ 0x80
 8009208:	d105      	bne.n	8009216 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800920a:	4b33      	ldr	r3, [pc, #204]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	4a32      	ldr	r2, [pc, #200]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 8009210:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009214:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009216:	4b2f      	ldr	r3, [pc, #188]	@ (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d21d      	bcs.n	8009260 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009224:	4b2b      	ldr	r3, [pc, #172]	@ (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f023 020f 	bic.w	r2, r3, #15
 800922c:	4929      	ldr	r1, [pc, #164]	@ (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	4313      	orrs	r3, r2
 8009232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009234:	f7fc fa4e 	bl	80056d4 <HAL_GetTick>
 8009238:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800923a:	e00a      	b.n	8009252 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800923c:	f7fc fa4a 	bl	80056d4 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800924a:	4293      	cmp	r3, r2
 800924c:	d901      	bls.n	8009252 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e03b      	b.n	80092ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009252:	4b20      	ldr	r3, [pc, #128]	@ (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	429a      	cmp	r2, r3
 800925e:	d1ed      	bne.n	800923c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0304 	and.w	r3, r3, #4
 8009268:	2b00      	cmp	r3, #0
 800926a:	d008      	beq.n	800927e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800926c:	4b1a      	ldr	r3, [pc, #104]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	4917      	ldr	r1, [pc, #92]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800927a:	4313      	orrs	r3, r2
 800927c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800928a:	4b13      	ldr	r3, [pc, #76]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	490f      	ldr	r1, [pc, #60]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 800929a:	4313      	orrs	r3, r2
 800929c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800929e:	f000 f825 	bl	80092ec <HAL_RCC_GetSysClockFreq>
 80092a2:	4602      	mov	r2, r0
 80092a4:	4b0c      	ldr	r3, [pc, #48]	@ (80092d8 <HAL_RCC_ClockConfig+0x264>)
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	091b      	lsrs	r3, r3, #4
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	490c      	ldr	r1, [pc, #48]	@ (80092e0 <HAL_RCC_ClockConfig+0x26c>)
 80092b0:	5ccb      	ldrb	r3, [r1, r3]
 80092b2:	f003 031f 	and.w	r3, r3, #31
 80092b6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ba:	4a0a      	ldr	r2, [pc, #40]	@ (80092e4 <HAL_RCC_ClockConfig+0x270>)
 80092bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80092be:	4b0a      	ldr	r3, [pc, #40]	@ (80092e8 <HAL_RCC_ClockConfig+0x274>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fa fb98 	bl	80039f8 <HAL_InitTick>
 80092c8:	4603      	mov	r3, r0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40022000 	.word	0x40022000
 80092d8:	40021000 	.word	0x40021000
 80092dc:	04c4b400 	.word	0x04c4b400
 80092e0:	0801baa8 	.word	0x0801baa8
 80092e4:	20000020 	.word	0x20000020
 80092e8:	20000028 	.word	0x20000028

080092ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80092f2:	4b2c      	ldr	r3, [pc, #176]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 030c 	and.w	r3, r3, #12
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d102      	bne.n	8009304 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80092fe:	4b2a      	ldr	r3, [pc, #168]	@ (80093a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009300:	613b      	str	r3, [r7, #16]
 8009302:	e047      	b.n	8009394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009304:	4b27      	ldr	r3, [pc, #156]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f003 030c 	and.w	r3, r3, #12
 800930c:	2b08      	cmp	r3, #8
 800930e:	d102      	bne.n	8009316 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009310:	4b25      	ldr	r3, [pc, #148]	@ (80093a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	e03e      	b.n	8009394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009316:	4b23      	ldr	r3, [pc, #140]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 030c 	and.w	r3, r3, #12
 800931e:	2b0c      	cmp	r3, #12
 8009320:	d136      	bne.n	8009390 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009322:	4b20      	ldr	r3, [pc, #128]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800932c:	4b1d      	ldr	r3, [pc, #116]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	091b      	lsrs	r3, r3, #4
 8009332:	f003 030f 	and.w	r3, r3, #15
 8009336:	3301      	adds	r3, #1
 8009338:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b03      	cmp	r3, #3
 800933e:	d10c      	bne.n	800935a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009340:	4a19      	ldr	r2, [pc, #100]	@ (80093a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	fbb2 f3f3 	udiv	r3, r2, r3
 8009348:	4a16      	ldr	r2, [pc, #88]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800934a:	68d2      	ldr	r2, [r2, #12]
 800934c:	0a12      	lsrs	r2, r2, #8
 800934e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009352:	fb02 f303 	mul.w	r3, r2, r3
 8009356:	617b      	str	r3, [r7, #20]
      break;
 8009358:	e00c      	b.n	8009374 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800935a:	4a13      	ldr	r2, [pc, #76]	@ (80093a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009362:	4a10      	ldr	r2, [pc, #64]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009364:	68d2      	ldr	r2, [r2, #12]
 8009366:	0a12      	lsrs	r2, r2, #8
 8009368:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800936c:	fb02 f303 	mul.w	r3, r2, r3
 8009370:	617b      	str	r3, [r7, #20]
      break;
 8009372:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009374:	4b0b      	ldr	r3, [pc, #44]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	0e5b      	lsrs	r3, r3, #25
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	3301      	adds	r3, #1
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	fbb2 f3f3 	udiv	r3, r2, r3
 800938c:	613b      	str	r3, [r7, #16]
 800938e:	e001      	b.n	8009394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009394:	693b      	ldr	r3, [r7, #16]
}
 8009396:	4618      	mov	r0, r3
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	40021000 	.word	0x40021000
 80093a8:	00f42400 	.word	0x00f42400

080093ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093b0:	4b03      	ldr	r3, [pc, #12]	@ (80093c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80093b2:	681b      	ldr	r3, [r3, #0]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	20000020 	.word	0x20000020

080093c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80093c8:	f7ff fff0 	bl	80093ac <HAL_RCC_GetHCLKFreq>
 80093cc:	4602      	mov	r2, r0
 80093ce:	4b06      	ldr	r3, [pc, #24]	@ (80093e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	0a1b      	lsrs	r3, r3, #8
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	4904      	ldr	r1, [pc, #16]	@ (80093ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80093da:	5ccb      	ldrb	r3, [r1, r3]
 80093dc:	f003 031f 	and.w	r3, r3, #31
 80093e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	40021000 	.word	0x40021000
 80093ec:	0801bab8 	.word	0x0801bab8

080093f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80093f4:	f7ff ffda 	bl	80093ac <HAL_RCC_GetHCLKFreq>
 80093f8:	4602      	mov	r2, r0
 80093fa:	4b06      	ldr	r3, [pc, #24]	@ (8009414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	0adb      	lsrs	r3, r3, #11
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	4904      	ldr	r1, [pc, #16]	@ (8009418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009406:	5ccb      	ldrb	r3, [r1, r3]
 8009408:	f003 031f 	and.w	r3, r3, #31
 800940c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009410:	4618      	mov	r0, r3
 8009412:	bd80      	pop	{r7, pc}
 8009414:	40021000 	.word	0x40021000
 8009418:	0801bab8 	.word	0x0801bab8

0800941c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	220f      	movs	r2, #15
 800942a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800942c:	4b12      	ldr	r3, [pc, #72]	@ (8009478 <HAL_RCC_GetClockConfig+0x5c>)
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f003 0203 	and.w	r2, r3, #3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009438:	4b0f      	ldr	r3, [pc, #60]	@ (8009478 <HAL_RCC_GetClockConfig+0x5c>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009444:	4b0c      	ldr	r3, [pc, #48]	@ (8009478 <HAL_RCC_GetClockConfig+0x5c>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009450:	4b09      	ldr	r3, [pc, #36]	@ (8009478 <HAL_RCC_GetClockConfig+0x5c>)
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	08db      	lsrs	r3, r3, #3
 8009456:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800945e:	4b07      	ldr	r3, [pc, #28]	@ (800947c <HAL_RCC_GetClockConfig+0x60>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 020f 	and.w	r2, r3, #15
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	601a      	str	r2, [r3, #0]
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	40021000 	.word	0x40021000
 800947c:	40022000 	.word	0x40022000

08009480 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009486:	4b1e      	ldr	r3, [pc, #120]	@ (8009500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009490:	4b1b      	ldr	r3, [pc, #108]	@ (8009500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	091b      	lsrs	r3, r3, #4
 8009496:	f003 030f 	and.w	r3, r3, #15
 800949a:	3301      	adds	r3, #1
 800949c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d10c      	bne.n	80094be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094a4:	4a17      	ldr	r2, [pc, #92]	@ (8009504 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ac:	4a14      	ldr	r2, [pc, #80]	@ (8009500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80094ae:	68d2      	ldr	r2, [r2, #12]
 80094b0:	0a12      	lsrs	r2, r2, #8
 80094b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094b6:	fb02 f303 	mul.w	r3, r2, r3
 80094ba:	617b      	str	r3, [r7, #20]
    break;
 80094bc:	e00c      	b.n	80094d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094be:	4a11      	ldr	r2, [pc, #68]	@ (8009504 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c6:	4a0e      	ldr	r2, [pc, #56]	@ (8009500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80094c8:	68d2      	ldr	r2, [r2, #12]
 80094ca:	0a12      	lsrs	r2, r2, #8
 80094cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094d0:	fb02 f303 	mul.w	r3, r2, r3
 80094d4:	617b      	str	r3, [r7, #20]
    break;
 80094d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80094d8:	4b09      	ldr	r3, [pc, #36]	@ (8009500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	0e5b      	lsrs	r3, r3, #25
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	3301      	adds	r3, #1
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80094f2:	687b      	ldr	r3, [r7, #4]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	40021000 	.word	0x40021000
 8009504:	00f42400 	.word	0x00f42400

08009508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009510:	2300      	movs	r3, #0
 8009512:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009514:	2300      	movs	r3, #0
 8009516:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8098 	beq.w	8009656 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009526:	2300      	movs	r3, #0
 8009528:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800952a:	4b43      	ldr	r3, [pc, #268]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800952c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10d      	bne.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009536:	4b40      	ldr	r3, [pc, #256]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800953a:	4a3f      	ldr	r2, [pc, #252]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800953c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009540:	6593      	str	r3, [r2, #88]	@ 0x58
 8009542:	4b3d      	ldr	r3, [pc, #244]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800954a:	60bb      	str	r3, [r7, #8]
 800954c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800954e:	2301      	movs	r3, #1
 8009550:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009552:	4b3a      	ldr	r3, [pc, #232]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a39      	ldr	r2, [pc, #228]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800955c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800955e:	f7fc f8b9 	bl	80056d4 <HAL_GetTick>
 8009562:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009564:	e009      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009566:	f7fc f8b5 	bl	80056d4 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d902      	bls.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	74fb      	strb	r3, [r7, #19]
        break;
 8009578:	e005      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800957a:	4b30      	ldr	r3, [pc, #192]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0ef      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009586:	7cfb      	ldrb	r3, [r7, #19]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d159      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800958c:	4b2a      	ldr	r3, [pc, #168]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800958e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009596:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d01e      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d019      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095a8:	4b23      	ldr	r3, [pc, #140]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095b4:	4b20      	ldr	r3, [pc, #128]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80095d4:	4a18      	ldr	r2, [pc, #96]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d016      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e6:	f7fc f875 	bl	80056d4 <HAL_GetTick>
 80095ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095ec:	e00b      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ee:	f7fc f871 	bl	80056d4 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d902      	bls.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	74fb      	strb	r3, [r7, #19]
            break;
 8009604:	e006      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009606:	4b0c      	ldr	r3, [pc, #48]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0ec      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009614:	7cfb      	ldrb	r3, [r7, #19]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10b      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800961a:	4b07      	ldr	r3, [pc, #28]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800961c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009628:	4903      	ldr	r1, [pc, #12]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800962a:	4313      	orrs	r3, r2
 800962c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009630:	e008      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009632:	7cfb      	ldrb	r3, [r7, #19]
 8009634:	74bb      	strb	r3, [r7, #18]
 8009636:	e005      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009638:	40021000 	.word	0x40021000
 800963c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009640:	7cfb      	ldrb	r3, [r7, #19]
 8009642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009644:	7c7b      	ldrb	r3, [r7, #17]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d105      	bne.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800964a:	4ba6      	ldr	r3, [pc, #664]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800964c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800964e:	4aa5      	ldr	r2, [pc, #660]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009654:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009662:	4ba0      	ldr	r3, [pc, #640]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009668:	f023 0203 	bic.w	r2, r3, #3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	499c      	ldr	r1, [pc, #624]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009672:	4313      	orrs	r3, r2
 8009674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009684:	4b97      	ldr	r3, [pc, #604]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800968a:	f023 020c 	bic.w	r2, r3, #12
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	4994      	ldr	r1, [pc, #592]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0304 	and.w	r3, r3, #4
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80096a6:	4b8f      	ldr	r3, [pc, #572]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80096a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	498b      	ldr	r1, [pc, #556]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0308 	and.w	r3, r3, #8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80096c8:	4b86      	ldr	r3, [pc, #536]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80096ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	4983      	ldr	r1, [pc, #524]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0320 	and.w	r3, r3, #32
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096ea:	4b7e      	ldr	r3, [pc, #504]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80096ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	497a      	ldr	r1, [pc, #488]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00a      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800970c:	4b75      	ldr	r3, [pc, #468]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800970e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009712:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	4972      	ldr	r1, [pc, #456]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800971c:	4313      	orrs	r3, r2
 800971e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800972e:	4b6d      	ldr	r3, [pc, #436]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009734:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	4969      	ldr	r1, [pc, #420]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800973e:	4313      	orrs	r3, r2
 8009740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009750:	4b64      	ldr	r3, [pc, #400]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009756:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	4961      	ldr	r1, [pc, #388]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009760:	4313      	orrs	r3, r2
 8009762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009772:	4b5c      	ldr	r3, [pc, #368]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009780:	4958      	ldr	r1, [pc, #352]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009782:	4313      	orrs	r3, r2
 8009784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009790:	2b00      	cmp	r3, #0
 8009792:	d015      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009794:	4b53      	ldr	r3, [pc, #332]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800979a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a2:	4950      	ldr	r1, [pc, #320]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097b2:	d105      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097b4:	4b4b      	ldr	r3, [pc, #300]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	4a4a      	ldr	r2, [pc, #296]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097be:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d015      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80097cc:	4b45      	ldr	r3, [pc, #276]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	4942      	ldr	r1, [pc, #264]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097ea:	d105      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097ec:	4b3d      	ldr	r3, [pc, #244]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	4a3c      	ldr	r2, [pc, #240]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097f6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d015      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009804:	4b37      	ldr	r3, [pc, #220]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009812:	4934      	ldr	r1, [pc, #208]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009814:	4313      	orrs	r3, r2
 8009816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009822:	d105      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009824:	4b2f      	ldr	r3, [pc, #188]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	4a2e      	ldr	r2, [pc, #184]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800982a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800982e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d015      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800983c:	4b29      	ldr	r3, [pc, #164]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800983e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009842:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984a:	4926      	ldr	r1, [pc, #152]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800984c:	4313      	orrs	r3, r2
 800984e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800985a:	d105      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800985c:	4b21      	ldr	r3, [pc, #132]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	4a20      	ldr	r2, [pc, #128]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009866:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d015      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009874:	4b1b      	ldr	r3, [pc, #108]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800987a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009882:	4918      	ldr	r1, [pc, #96]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009884:	4313      	orrs	r3, r2
 8009886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800988e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009892:	d105      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009894:	4b13      	ldr	r3, [pc, #76]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4a12      	ldr	r2, [pc, #72]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800989a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800989e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d015      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80098ac:	4b0d      	ldr	r3, [pc, #52]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ba:	490a      	ldr	r1, [pc, #40]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098ca:	d105      	bne.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	4a04      	ldr	r2, [pc, #16]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80098d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40021000 	.word	0x40021000

080098e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e09d      	b.n	8009a36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d108      	bne.n	8009914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800990a:	d009      	beq.n	8009920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	61da      	str	r2, [r3, #28]
 8009912:	e005      	b.n	8009920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d106      	bne.n	8009940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7f9 fb40 	bl	8002fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009960:	d902      	bls.n	8009968 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	e002      	b.n	800996e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800996c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009976:	d007      	beq.n	8009988 <HAL_SPI_Init+0xa0>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009980:	d002      	beq.n	8009988 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009998:	431a      	orrs	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ca:	ea42 0103 	orr.w	r1, r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	0c1b      	lsrs	r3, r3, #16
 80099e4:	f003 0204 	and.w	r2, r3, #4
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ec:	f003 0310 	and.w	r3, r3, #16
 80099f0:	431a      	orrs	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099f6:	f003 0308 	and.w	r3, r3, #8
 80099fa:	431a      	orrs	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009a04:	ea42 0103 	orr.w	r1, r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	430a      	orrs	r2, r1
 8009a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69da      	ldr	r2, [r3, #28]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b08a      	sub	sp, #40	@ 0x28
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a50:	f7fb fe40 	bl	80056d4 <HAL_GetTick>
 8009a54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009a64:	887b      	ldrh	r3, [r7, #2]
 8009a66:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009a68:	887b      	ldrh	r3, [r7, #2]
 8009a6a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a6c:	7ffb      	ldrb	r3, [r7, #31]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d00c      	beq.n	8009a8c <HAL_SPI_TransmitReceive+0x4e>
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a78:	d106      	bne.n	8009a88 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <HAL_SPI_TransmitReceive+0x4a>
 8009a82:	7ffb      	ldrb	r3, [r7, #31]
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d001      	beq.n	8009a8c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009a88:	2302      	movs	r3, #2
 8009a8a:	e1f3      	b.n	8009e74 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d005      	beq.n	8009a9e <HAL_SPI_TransmitReceive+0x60>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <HAL_SPI_TransmitReceive+0x60>
 8009a98:	887b      	ldrh	r3, [r7, #2]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e1e8      	b.n	8009e74 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d101      	bne.n	8009ab0 <HAL_SPI_TransmitReceive+0x72>
 8009aac:	2302      	movs	r3, #2
 8009aae:	e1e1      	b.n	8009e74 <HAL_SPI_TransmitReceive+0x436>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d003      	beq.n	8009acc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2205      	movs	r2, #5
 8009ac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	887a      	ldrh	r2, [r7, #2]
 8009adc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	887a      	ldrh	r2, [r7, #2]
 8009ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	887a      	ldrh	r2, [r7, #2]
 8009af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	887a      	ldrh	r2, [r7, #2]
 8009af8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b0e:	d802      	bhi.n	8009b16 <HAL_SPI_TransmitReceive+0xd8>
 8009b10:	8abb      	ldrh	r3, [r7, #20]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d908      	bls.n	8009b28 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009b24:	605a      	str	r2, [r3, #4]
 8009b26:	e007      	b.n	8009b38 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009b36:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b42:	2b40      	cmp	r3, #64	@ 0x40
 8009b44:	d007      	beq.n	8009b56 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b5e:	f240 8083 	bls.w	8009c68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <HAL_SPI_TransmitReceive+0x132>
 8009b6a:	8afb      	ldrh	r3, [r7, #22]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d16f      	bne.n	8009c50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b74:	881a      	ldrh	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b80:	1c9a      	adds	r2, r3, #2
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b94:	e05c      	b.n	8009c50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d11b      	bne.n	8009bdc <HAL_SPI_TransmitReceive+0x19e>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d016      	beq.n	8009bdc <HAL_SPI_TransmitReceive+0x19e>
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d113      	bne.n	8009bdc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb8:	881a      	ldrh	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc4:	1c9a      	adds	r2, r3, #2
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d11c      	bne.n	8009c24 <HAL_SPI_TransmitReceive+0x1e6>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d016      	beq.n	8009c24 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68da      	ldr	r2, [r3, #12]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c00:	b292      	uxth	r2, r2
 8009c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c08:	1c9a      	adds	r2, r3, #2
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	3b01      	subs	r3, #1
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c20:	2301      	movs	r3, #1
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c24:	f7fb fd56 	bl	80056d4 <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d80d      	bhi.n	8009c50 <HAL_SPI_TransmitReceive+0x212>
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3a:	d009      	beq.n	8009c50 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e111      	b.n	8009e74 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d19d      	bne.n	8009b96 <HAL_SPI_TransmitReceive+0x158>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d197      	bne.n	8009b96 <HAL_SPI_TransmitReceive+0x158>
 8009c66:	e0e5      	b.n	8009e34 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <HAL_SPI_TransmitReceive+0x23a>
 8009c70:	8afb      	ldrh	r3, [r7, #22]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	f040 80d1 	bne.w	8009e1a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d912      	bls.n	8009ca8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c86:	881a      	ldrh	r2, [r3, #0]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c92:	1c9a      	adds	r2, r3, #2
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	3b02      	subs	r3, #2
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ca6:	e0b8      	b.n	8009e1a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	330c      	adds	r3, #12
 8009cb2:	7812      	ldrb	r2, [r2, #0]
 8009cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cce:	e0a4      	b.n	8009e1a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d134      	bne.n	8009d48 <HAL_SPI_TransmitReceive+0x30a>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d02f      	beq.n	8009d48 <HAL_SPI_TransmitReceive+0x30a>
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d12c      	bne.n	8009d48 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d912      	bls.n	8009d1e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfc:	881a      	ldrh	r2, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d08:	1c9a      	adds	r2, r3, #2
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	3b02      	subs	r3, #2
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d1c:	e012      	b.n	8009d44 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	330c      	adds	r3, #12
 8009d28:	7812      	ldrb	r2, [r2, #0]
 8009d2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d148      	bne.n	8009de8 <HAL_SPI_TransmitReceive+0x3aa>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d042      	beq.n	8009de8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d923      	bls.n	8009db6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d78:	b292      	uxth	r2, r2
 8009d7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d80:	1c9a      	adds	r2, r3, #2
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	3b02      	subs	r3, #2
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d81f      	bhi.n	8009de4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009db2:	605a      	str	r2, [r3, #4]
 8009db4:	e016      	b.n	8009de4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f103 020c 	add.w	r2, r3, #12
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc2:	7812      	ldrb	r2, [r2, #0]
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009de4:	2301      	movs	r3, #1
 8009de6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009de8:	f7fb fc74 	bl	80056d4 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d803      	bhi.n	8009e00 <HAL_SPI_TransmitReceive+0x3c2>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfe:	d102      	bne.n	8009e06 <HAL_SPI_TransmitReceive+0x3c8>
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d109      	bne.n	8009e1a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e02c      	b.n	8009e74 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f47f af55 	bne.w	8009cd0 <HAL_SPI_TransmitReceive+0x292>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f47f af4e 	bne.w	8009cd0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e34:	6a3a      	ldr	r2, [r7, #32]
 8009e36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 f93d 	bl	800a0b8 <SPI_EndRxTxTransaction>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d008      	beq.n	8009e56 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2220      	movs	r2, #32
 8009e48:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e00e      	b.n	8009e74 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009e72:	2300      	movs	r3, #0
  }
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3728      	adds	r7, #40	@ 0x28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e8c:	f7fb fc22 	bl	80056d4 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e94:	1a9b      	subs	r3, r3, r2
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	4413      	add	r3, r2
 8009e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e9c:	f7fb fc1a 	bl	80056d4 <HAL_GetTick>
 8009ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009ea2:	4b39      	ldr	r3, [pc, #228]	@ (8009f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	015b      	lsls	r3, r3, #5
 8009ea8:	0d1b      	lsrs	r3, r3, #20
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	fb02 f303 	mul.w	r3, r2, r3
 8009eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009eb2:	e054      	b.n	8009f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d050      	beq.n	8009f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ebc:	f7fb fc0a 	bl	80056d4 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	69fa      	ldr	r2, [r7, #28]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d902      	bls.n	8009ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d13d      	bne.n	8009f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009eea:	d111      	bne.n	8009f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ef4:	d004      	beq.n	8009f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009efe:	d107      	bne.n	8009f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f18:	d10f      	bne.n	8009f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e017      	b.n	8009f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	4013      	ands	r3, r2
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	bf0c      	ite	eq
 8009f6e:	2301      	moveq	r3, #1
 8009f70:	2300      	movne	r3, #0
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	461a      	mov	r2, r3
 8009f76:	79fb      	ldrb	r3, [r7, #7]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d19b      	bne.n	8009eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3720      	adds	r7, #32
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20000020 	.word	0x20000020

08009f8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	@ 0x28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
 8009f98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009f9e:	f7fb fb99 	bl	80056d4 <HAL_GetTick>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	4413      	add	r3, r2
 8009fac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009fae:	f7fb fb91 	bl	80056d4 <HAL_GetTick>
 8009fb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	330c      	adds	r3, #12
 8009fba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009fbc:	4b3d      	ldr	r3, [pc, #244]	@ (800a0b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	00da      	lsls	r2, r3, #3
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	0d1b      	lsrs	r3, r3, #20
 8009fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fce:	fb02 f303 	mul.w	r3, r2, r3
 8009fd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009fd4:	e060      	b.n	800a098 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009fdc:	d107      	bne.n	8009fee <SPI_WaitFifoStateUntilTimeout+0x62>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d104      	bne.n	8009fee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff4:	d050      	beq.n	800a098 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ff6:	f7fb fb6d 	bl	80056d4 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a002:	429a      	cmp	r2, r3
 800a004:	d902      	bls.n	800a00c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d13d      	bne.n	800a088 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a01a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a024:	d111      	bne.n	800a04a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a02e:	d004      	beq.n	800a03a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a038:	d107      	bne.n	800a04a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a048:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a052:	d10f      	bne.n	800a074 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a072:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e010      	b.n	800a0aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	3b01      	subs	r3, #1
 800a096:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689a      	ldr	r2, [r3, #8]
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d196      	bne.n	8009fd6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3728      	adds	r7, #40	@ 0x28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000020 	.word	0x20000020

0800a0b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7ff ff5b 	bl	8009f8c <SPI_WaitFifoStateUntilTimeout>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0e0:	f043 0220 	orr.w	r2, r3, #32
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e027      	b.n	800a13c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2180      	movs	r1, #128	@ 0x80
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f7ff fec0 	bl	8009e7c <SPI_WaitFlagStateUntilTimeout>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d007      	beq.n	800a112 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a106:	f043 0220 	orr.w	r2, r3, #32
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e014      	b.n	800a13c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2200      	movs	r2, #0
 800a11a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7ff ff34 	bl	8009f8c <SPI_WaitFifoStateUntilTimeout>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d007      	beq.n	800a13a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a12e:	f043 0220 	orr.w	r2, r3, #32
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e000      	b.n	800a13c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e049      	b.n	800a1ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7fa fa52 	bl	8004614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2202      	movs	r2, #2
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f001 fa0a 	bl	800b59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b01      	cmp	r3, #1
 800a206:	d001      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e04a      	b.n	800a2a2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a21      	ldr	r2, [pc, #132]	@ (800a2b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d018      	beq.n	800a260 <HAL_TIM_Base_Start_IT+0x6c>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a236:	d013      	beq.n	800a260 <HAL_TIM_Base_Start_IT+0x6c>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00e      	beq.n	800a260 <HAL_TIM_Base_Start_IT+0x6c>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d009      	beq.n	800a260 <HAL_TIM_Base_Start_IT+0x6c>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1a      	ldr	r2, [pc, #104]	@ (800a2bc <HAL_TIM_Base_Start_IT+0xc8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <HAL_TIM_Base_Start_IT+0x6c>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a19      	ldr	r2, [pc, #100]	@ (800a2c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d115      	bne.n	800a28c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	4b17      	ldr	r3, [pc, #92]	@ (800a2c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a268:	4013      	ands	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b06      	cmp	r3, #6
 800a270:	d015      	beq.n	800a29e <HAL_TIM_Base_Start_IT+0xaa>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a278:	d011      	beq.n	800a29e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f042 0201 	orr.w	r2, r2, #1
 800a288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a28a:	e008      	b.n	800a29e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f042 0201 	orr.w	r2, r2, #1
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	e000      	b.n	800a2a0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a29e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	40012c00 	.word	0x40012c00
 800a2b4:	40000400 	.word	0x40000400
 800a2b8:	40000800 	.word	0x40000800
 800a2bc:	40013400 	.word	0x40013400
 800a2c0:	40014000 	.word	0x40014000
 800a2c4:	00010007 	.word	0x00010007

0800a2c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e049      	b.n	800a36e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f841 	bl	800a376 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3304      	adds	r3, #4
 800a304:	4619      	mov	r1, r3
 800a306:	4610      	mov	r0, r2
 800a308:	f001 f948 	bl	800b59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
	...

0800a38c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d109      	bne.n	800a3b0 <HAL_TIM_PWM_Start+0x24>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	bf14      	ite	ne
 800a3a8:	2301      	movne	r3, #1
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	e03c      	b.n	800a42a <HAL_TIM_PWM_Start+0x9e>
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d109      	bne.n	800a3ca <HAL_TIM_PWM_Start+0x3e>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	bf14      	ite	ne
 800a3c2:	2301      	movne	r3, #1
 800a3c4:	2300      	moveq	r3, #0
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	e02f      	b.n	800a42a <HAL_TIM_PWM_Start+0x9e>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b08      	cmp	r3, #8
 800a3ce:	d109      	bne.n	800a3e4 <HAL_TIM_PWM_Start+0x58>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	bf14      	ite	ne
 800a3dc:	2301      	movne	r3, #1
 800a3de:	2300      	moveq	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	e022      	b.n	800a42a <HAL_TIM_PWM_Start+0x9e>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2b0c      	cmp	r3, #12
 800a3e8:	d109      	bne.n	800a3fe <HAL_TIM_PWM_Start+0x72>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	bf14      	ite	ne
 800a3f6:	2301      	movne	r3, #1
 800a3f8:	2300      	moveq	r3, #0
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	e015      	b.n	800a42a <HAL_TIM_PWM_Start+0x9e>
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b10      	cmp	r3, #16
 800a402:	d109      	bne.n	800a418 <HAL_TIM_PWM_Start+0x8c>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	bf14      	ite	ne
 800a410:	2301      	movne	r3, #1
 800a412:	2300      	moveq	r3, #0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	e008      	b.n	800a42a <HAL_TIM_PWM_Start+0x9e>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b01      	cmp	r3, #1
 800a422:	bf14      	ite	ne
 800a424:	2301      	movne	r3, #1
 800a426:	2300      	moveq	r3, #0
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e097      	b.n	800a562 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d104      	bne.n	800a442 <HAL_TIM_PWM_Start+0xb6>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a440:	e023      	b.n	800a48a <HAL_TIM_PWM_Start+0xfe>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b04      	cmp	r3, #4
 800a446:	d104      	bne.n	800a452 <HAL_TIM_PWM_Start+0xc6>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a450:	e01b      	b.n	800a48a <HAL_TIM_PWM_Start+0xfe>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b08      	cmp	r3, #8
 800a456:	d104      	bne.n	800a462 <HAL_TIM_PWM_Start+0xd6>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a460:	e013      	b.n	800a48a <HAL_TIM_PWM_Start+0xfe>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b0c      	cmp	r3, #12
 800a466:	d104      	bne.n	800a472 <HAL_TIM_PWM_Start+0xe6>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a470:	e00b      	b.n	800a48a <HAL_TIM_PWM_Start+0xfe>
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b10      	cmp	r3, #16
 800a476:	d104      	bne.n	800a482 <HAL_TIM_PWM_Start+0xf6>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2202      	movs	r2, #2
 800a47c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a480:	e003      	b.n	800a48a <HAL_TIM_PWM_Start+0xfe>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2202      	movs	r2, #2
 800a486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2201      	movs	r2, #1
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	4618      	mov	r0, r3
 800a494:	f001 fcb0 	bl	800bdf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a33      	ldr	r2, [pc, #204]	@ (800a56c <HAL_TIM_PWM_Start+0x1e0>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d013      	beq.n	800a4ca <HAL_TIM_PWM_Start+0x13e>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a32      	ldr	r2, [pc, #200]	@ (800a570 <HAL_TIM_PWM_Start+0x1e4>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d00e      	beq.n	800a4ca <HAL_TIM_PWM_Start+0x13e>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a30      	ldr	r2, [pc, #192]	@ (800a574 <HAL_TIM_PWM_Start+0x1e8>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d009      	beq.n	800a4ca <HAL_TIM_PWM_Start+0x13e>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a2f      	ldr	r2, [pc, #188]	@ (800a578 <HAL_TIM_PWM_Start+0x1ec>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d004      	beq.n	800a4ca <HAL_TIM_PWM_Start+0x13e>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a2d      	ldr	r2, [pc, #180]	@ (800a57c <HAL_TIM_PWM_Start+0x1f0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d101      	bne.n	800a4ce <HAL_TIM_PWM_Start+0x142>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e000      	b.n	800a4d0 <HAL_TIM_PWM_Start+0x144>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d007      	beq.n	800a4e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a20      	ldr	r2, [pc, #128]	@ (800a56c <HAL_TIM_PWM_Start+0x1e0>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d018      	beq.n	800a520 <HAL_TIM_PWM_Start+0x194>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f6:	d013      	beq.n	800a520 <HAL_TIM_PWM_Start+0x194>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a20      	ldr	r2, [pc, #128]	@ (800a580 <HAL_TIM_PWM_Start+0x1f4>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00e      	beq.n	800a520 <HAL_TIM_PWM_Start+0x194>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a1f      	ldr	r2, [pc, #124]	@ (800a584 <HAL_TIM_PWM_Start+0x1f8>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d009      	beq.n	800a520 <HAL_TIM_PWM_Start+0x194>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a17      	ldr	r2, [pc, #92]	@ (800a570 <HAL_TIM_PWM_Start+0x1e4>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d004      	beq.n	800a520 <HAL_TIM_PWM_Start+0x194>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a16      	ldr	r2, [pc, #88]	@ (800a574 <HAL_TIM_PWM_Start+0x1e8>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d115      	bne.n	800a54c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	4b18      	ldr	r3, [pc, #96]	@ (800a588 <HAL_TIM_PWM_Start+0x1fc>)
 800a528:	4013      	ands	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b06      	cmp	r3, #6
 800a530:	d015      	beq.n	800a55e <HAL_TIM_PWM_Start+0x1d2>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a538:	d011      	beq.n	800a55e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0201 	orr.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a54a:	e008      	b.n	800a55e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f042 0201 	orr.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	e000      	b.n	800a560 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a55e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	40012c00 	.word	0x40012c00
 800a570:	40013400 	.word	0x40013400
 800a574:	40014000 	.word	0x40014000
 800a578:	40014400 	.word	0x40014400
 800a57c:	40014800 	.word	0x40014800
 800a580:	40000400 	.word	0x40000400
 800a584:	40000800 	.word	0x40000800
 800a588:	00010007 	.word	0x00010007

0800a58c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2200      	movs	r2, #0
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f001 fc2a 	bl	800bdf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a3e      	ldr	r2, [pc, #248]	@ (800a6a4 <HAL_TIM_PWM_Stop+0x118>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d013      	beq.n	800a5d6 <HAL_TIM_PWM_Stop+0x4a>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a3d      	ldr	r2, [pc, #244]	@ (800a6a8 <HAL_TIM_PWM_Stop+0x11c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d00e      	beq.n	800a5d6 <HAL_TIM_PWM_Stop+0x4a>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a3b      	ldr	r2, [pc, #236]	@ (800a6ac <HAL_TIM_PWM_Stop+0x120>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d009      	beq.n	800a5d6 <HAL_TIM_PWM_Stop+0x4a>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a3a      	ldr	r2, [pc, #232]	@ (800a6b0 <HAL_TIM_PWM_Stop+0x124>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d004      	beq.n	800a5d6 <HAL_TIM_PWM_Stop+0x4a>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a38      	ldr	r2, [pc, #224]	@ (800a6b4 <HAL_TIM_PWM_Stop+0x128>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d101      	bne.n	800a5da <HAL_TIM_PWM_Stop+0x4e>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e000      	b.n	800a5dc <HAL_TIM_PWM_Stop+0x50>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d017      	beq.n	800a610 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6a1a      	ldr	r2, [r3, #32]
 800a5e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10f      	bne.n	800a610 <HAL_TIM_PWM_Stop+0x84>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6a1a      	ldr	r2, [r3, #32]
 800a5f6:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d107      	bne.n	800a610 <HAL_TIM_PWM_Stop+0x84>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a60e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6a1a      	ldr	r2, [r3, #32]
 800a616:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a61a:	4013      	ands	r3, r2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10f      	bne.n	800a640 <HAL_TIM_PWM_Stop+0xb4>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6a1a      	ldr	r2, [r3, #32]
 800a626:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a62a:	4013      	ands	r3, r2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d107      	bne.n	800a640 <HAL_TIM_PWM_Stop+0xb4>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f022 0201 	bic.w	r2, r2, #1
 800a63e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d104      	bne.n	800a650 <HAL_TIM_PWM_Stop+0xc4>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a64e:	e023      	b.n	800a698 <HAL_TIM_PWM_Stop+0x10c>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2b04      	cmp	r3, #4
 800a654:	d104      	bne.n	800a660 <HAL_TIM_PWM_Stop+0xd4>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a65e:	e01b      	b.n	800a698 <HAL_TIM_PWM_Stop+0x10c>
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b08      	cmp	r3, #8
 800a664:	d104      	bne.n	800a670 <HAL_TIM_PWM_Stop+0xe4>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a66e:	e013      	b.n	800a698 <HAL_TIM_PWM_Stop+0x10c>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b0c      	cmp	r3, #12
 800a674:	d104      	bne.n	800a680 <HAL_TIM_PWM_Stop+0xf4>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a67e:	e00b      	b.n	800a698 <HAL_TIM_PWM_Stop+0x10c>
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2b10      	cmp	r3, #16
 800a684:	d104      	bne.n	800a690 <HAL_TIM_PWM_Stop+0x104>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a68e:	e003      	b.n	800a698 <HAL_TIM_PWM_Stop+0x10c>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	40012c00 	.word	0x40012c00
 800a6a8:	40013400 	.word	0x40013400
 800a6ac:	40014000 	.word	0x40014000
 800a6b0:	40014400 	.word	0x40014400
 800a6b4:	40014800 	.word	0x40014800

0800a6b8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <HAL_TIM_PWM_Start_DMA+0x2c>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	bf0c      	ite	eq
 800a6dc:	2301      	moveq	r3, #1
 800a6de:	2300      	movne	r3, #0
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	e03c      	b.n	800a75e <HAL_TIM_PWM_Start_DMA+0xa6>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d109      	bne.n	800a6fe <HAL_TIM_PWM_Start_DMA+0x46>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	bf0c      	ite	eq
 800a6f6:	2301      	moveq	r3, #1
 800a6f8:	2300      	movne	r3, #0
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	e02f      	b.n	800a75e <HAL_TIM_PWM_Start_DMA+0xa6>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b08      	cmp	r3, #8
 800a702:	d109      	bne.n	800a718 <HAL_TIM_PWM_Start_DMA+0x60>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	bf0c      	ite	eq
 800a710:	2301      	moveq	r3, #1
 800a712:	2300      	movne	r3, #0
 800a714:	b2db      	uxtb	r3, r3
 800a716:	e022      	b.n	800a75e <HAL_TIM_PWM_Start_DMA+0xa6>
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b0c      	cmp	r3, #12
 800a71c:	d109      	bne.n	800a732 <HAL_TIM_PWM_Start_DMA+0x7a>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b02      	cmp	r3, #2
 800a728:	bf0c      	ite	eq
 800a72a:	2301      	moveq	r3, #1
 800a72c:	2300      	movne	r3, #0
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	e015      	b.n	800a75e <HAL_TIM_PWM_Start_DMA+0xa6>
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b10      	cmp	r3, #16
 800a736:	d109      	bne.n	800a74c <HAL_TIM_PWM_Start_DMA+0x94>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b02      	cmp	r3, #2
 800a742:	bf0c      	ite	eq
 800a744:	2301      	moveq	r3, #1
 800a746:	2300      	movne	r3, #0
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	e008      	b.n	800a75e <HAL_TIM_PWM_Start_DMA+0xa6>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b02      	cmp	r3, #2
 800a756:	bf0c      	ite	eq
 800a758:	2301      	moveq	r3, #1
 800a75a:	2300      	movne	r3, #0
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800a762:	2302      	movs	r3, #2
 800a764:	e1a6      	b.n	800aab4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <HAL_TIM_PWM_Start_DMA+0xc8>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b01      	cmp	r3, #1
 800a776:	bf0c      	ite	eq
 800a778:	2301      	moveq	r3, #1
 800a77a:	2300      	movne	r3, #0
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	e03c      	b.n	800a7fa <HAL_TIM_PWM_Start_DMA+0x142>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b04      	cmp	r3, #4
 800a784:	d109      	bne.n	800a79a <HAL_TIM_PWM_Start_DMA+0xe2>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b01      	cmp	r3, #1
 800a790:	bf0c      	ite	eq
 800a792:	2301      	moveq	r3, #1
 800a794:	2300      	movne	r3, #0
 800a796:	b2db      	uxtb	r3, r3
 800a798:	e02f      	b.n	800a7fa <HAL_TIM_PWM_Start_DMA+0x142>
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b08      	cmp	r3, #8
 800a79e:	d109      	bne.n	800a7b4 <HAL_TIM_PWM_Start_DMA+0xfc>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	bf0c      	ite	eq
 800a7ac:	2301      	moveq	r3, #1
 800a7ae:	2300      	movne	r3, #0
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	e022      	b.n	800a7fa <HAL_TIM_PWM_Start_DMA+0x142>
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b0c      	cmp	r3, #12
 800a7b8:	d109      	bne.n	800a7ce <HAL_TIM_PWM_Start_DMA+0x116>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	bf0c      	ite	eq
 800a7c6:	2301      	moveq	r3, #1
 800a7c8:	2300      	movne	r3, #0
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	e015      	b.n	800a7fa <HAL_TIM_PWM_Start_DMA+0x142>
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2b10      	cmp	r3, #16
 800a7d2:	d109      	bne.n	800a7e8 <HAL_TIM_PWM_Start_DMA+0x130>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	bf0c      	ite	eq
 800a7e0:	2301      	moveq	r3, #1
 800a7e2:	2300      	movne	r3, #0
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	e008      	b.n	800a7fa <HAL_TIM_PWM_Start_DMA+0x142>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	bf0c      	ite	eq
 800a7f4:	2301      	moveq	r3, #1
 800a7f6:	2300      	movne	r3, #0
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d034      	beq.n	800a868 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <HAL_TIM_PWM_Start_DMA+0x152>
 800a804:	887b      	ldrh	r3, [r7, #2]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e152      	b.n	800aab4 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d104      	bne.n	800a81e <HAL_TIM_PWM_Start_DMA+0x166>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a81c:	e026      	b.n	800a86c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b04      	cmp	r3, #4
 800a822:	d104      	bne.n	800a82e <HAL_TIM_PWM_Start_DMA+0x176>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2202      	movs	r2, #2
 800a828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a82c:	e01e      	b.n	800a86c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2b08      	cmp	r3, #8
 800a832:	d104      	bne.n	800a83e <HAL_TIM_PWM_Start_DMA+0x186>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2202      	movs	r2, #2
 800a838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a83c:	e016      	b.n	800a86c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b0c      	cmp	r3, #12
 800a842:	d104      	bne.n	800a84e <HAL_TIM_PWM_Start_DMA+0x196>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a84c:	e00e      	b.n	800a86c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b10      	cmp	r3, #16
 800a852:	d104      	bne.n	800a85e <HAL_TIM_PWM_Start_DMA+0x1a6>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2202      	movs	r2, #2
 800a858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a85c:	e006      	b.n	800a86c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2202      	movs	r2, #2
 800a862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a866:	e001      	b.n	800a86c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e123      	b.n	800aab4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b0c      	cmp	r3, #12
 800a870:	f200 80ae 	bhi.w	800a9d0 <HAL_TIM_PWM_Start_DMA+0x318>
 800a874:	a201      	add	r2, pc, #4	@ (adr r2, 800a87c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800a876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87a:	bf00      	nop
 800a87c:	0800a8b1 	.word	0x0800a8b1
 800a880:	0800a9d1 	.word	0x0800a9d1
 800a884:	0800a9d1 	.word	0x0800a9d1
 800a888:	0800a9d1 	.word	0x0800a9d1
 800a88c:	0800a8f9 	.word	0x0800a8f9
 800a890:	0800a9d1 	.word	0x0800a9d1
 800a894:	0800a9d1 	.word	0x0800a9d1
 800a898:	0800a9d1 	.word	0x0800a9d1
 800a89c:	0800a941 	.word	0x0800a941
 800a8a0:	0800a9d1 	.word	0x0800a9d1
 800a8a4:	0800a9d1 	.word	0x0800a9d1
 800a8a8:	0800a9d1 	.word	0x0800a9d1
 800a8ac:	0800a989 	.word	0x0800a989
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b4:	4a81      	ldr	r2, [pc, #516]	@ (800aabc <HAL_TIM_PWM_Start_DMA+0x404>)
 800a8b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8bc:	4a80      	ldr	r2, [pc, #512]	@ (800aac0 <HAL_TIM_PWM_Start_DMA+0x408>)
 800a8be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c4:	4a7f      	ldr	r2, [pc, #508]	@ (800aac4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800a8c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a8cc:	6879      	ldr	r1, [r7, #4]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3334      	adds	r3, #52	@ 0x34
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	887b      	ldrh	r3, [r7, #2]
 800a8d8:	f7fc fd68 	bl	80073ac <HAL_DMA_Start_IT>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e0e6      	b.n	800aab4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68da      	ldr	r2, [r3, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8f4:	60da      	str	r2, [r3, #12]
      break;
 800a8f6:	e06e      	b.n	800a9d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fc:	4a6f      	ldr	r2, [pc, #444]	@ (800aabc <HAL_TIM_PWM_Start_DMA+0x404>)
 800a8fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a904:	4a6e      	ldr	r2, [pc, #440]	@ (800aac0 <HAL_TIM_PWM_Start_DMA+0x408>)
 800a906:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a90c:	4a6d      	ldr	r2, [pc, #436]	@ (800aac4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800a90e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3338      	adds	r3, #56	@ 0x38
 800a91c:	461a      	mov	r2, r3
 800a91e:	887b      	ldrh	r3, [r7, #2]
 800a920:	f7fc fd44 	bl	80073ac <HAL_DMA_Start_IT>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e0c2      	b.n	800aab4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68da      	ldr	r2, [r3, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a93c:	60da      	str	r2, [r3, #12]
      break;
 800a93e:	e04a      	b.n	800a9d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a944:	4a5d      	ldr	r2, [pc, #372]	@ (800aabc <HAL_TIM_PWM_Start_DMA+0x404>)
 800a946:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94c:	4a5c      	ldr	r2, [pc, #368]	@ (800aac0 <HAL_TIM_PWM_Start_DMA+0x408>)
 800a94e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a954:	4a5b      	ldr	r2, [pc, #364]	@ (800aac4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800a956:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a95c:	6879      	ldr	r1, [r7, #4]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	333c      	adds	r3, #60	@ 0x3c
 800a964:	461a      	mov	r2, r3
 800a966:	887b      	ldrh	r3, [r7, #2]
 800a968:	f7fc fd20 	bl	80073ac <HAL_DMA_Start_IT>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e09e      	b.n	800aab4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68da      	ldr	r2, [r3, #12]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a984:	60da      	str	r2, [r3, #12]
      break;
 800a986:	e026      	b.n	800a9d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a98c:	4a4b      	ldr	r2, [pc, #300]	@ (800aabc <HAL_TIM_PWM_Start_DMA+0x404>)
 800a98e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a994:	4a4a      	ldr	r2, [pc, #296]	@ (800aac0 <HAL_TIM_PWM_Start_DMA+0x408>)
 800a996:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a99c:	4a49      	ldr	r2, [pc, #292]	@ (800aac4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800a99e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3340      	adds	r3, #64	@ 0x40
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	887b      	ldrh	r3, [r7, #2]
 800a9b0:	f7fc fcfc 	bl	80073ac <HAL_DMA_Start_IT>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e07a      	b.n	800aab4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68da      	ldr	r2, [r3, #12]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a9cc:	60da      	str	r2, [r3, #12]
      break;
 800a9ce:	e002      	b.n	800a9d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9d4:	bf00      	nop
  }

  if (status == HAL_OK)
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d16a      	bne.n	800aab2 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 fa07 	bl	800bdf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a36      	ldr	r2, [pc, #216]	@ (800aac8 <HAL_TIM_PWM_Start_DMA+0x410>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d013      	beq.n	800aa1c <HAL_TIM_PWM_Start_DMA+0x364>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a34      	ldr	r2, [pc, #208]	@ (800aacc <HAL_TIM_PWM_Start_DMA+0x414>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00e      	beq.n	800aa1c <HAL_TIM_PWM_Start_DMA+0x364>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a33      	ldr	r2, [pc, #204]	@ (800aad0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d009      	beq.n	800aa1c <HAL_TIM_PWM_Start_DMA+0x364>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a31      	ldr	r2, [pc, #196]	@ (800aad4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d004      	beq.n	800aa1c <HAL_TIM_PWM_Start_DMA+0x364>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a30      	ldr	r2, [pc, #192]	@ (800aad8 <HAL_TIM_PWM_Start_DMA+0x420>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d101      	bne.n	800aa20 <HAL_TIM_PWM_Start_DMA+0x368>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e000      	b.n	800aa22 <HAL_TIM_PWM_Start_DMA+0x36a>
 800aa20:	2300      	movs	r3, #0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d007      	beq.n	800aa36 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aa34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a23      	ldr	r2, [pc, #140]	@ (800aac8 <HAL_TIM_PWM_Start_DMA+0x410>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d018      	beq.n	800aa72 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa48:	d013      	beq.n	800aa72 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a23      	ldr	r2, [pc, #140]	@ (800aadc <HAL_TIM_PWM_Start_DMA+0x424>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d00e      	beq.n	800aa72 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a21      	ldr	r2, [pc, #132]	@ (800aae0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d009      	beq.n	800aa72 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a1a      	ldr	r2, [pc, #104]	@ (800aacc <HAL_TIM_PWM_Start_DMA+0x414>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d004      	beq.n	800aa72 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a18      	ldr	r2, [pc, #96]	@ (800aad0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d115      	bne.n	800aa9e <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	4b1a      	ldr	r3, [pc, #104]	@ (800aae4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b06      	cmp	r3, #6
 800aa82:	d015      	beq.n	800aab0 <HAL_TIM_PWM_Start_DMA+0x3f8>
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa8a:	d011      	beq.n	800aab0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0201 	orr.w	r2, r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa9c:	e008      	b.n	800aab0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f042 0201 	orr.w	r2, r2, #1
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	e000      	b.n	800aab2 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	0800b48b 	.word	0x0800b48b
 800aac0:	0800b533 	.word	0x0800b533
 800aac4:	0800b3f9 	.word	0x0800b3f9
 800aac8:	40012c00 	.word	0x40012c00
 800aacc:	40013400 	.word	0x40013400
 800aad0:	40014000 	.word	0x40014000
 800aad4:	40014400 	.word	0x40014400
 800aad8:	40014800 	.word	0x40014800
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40000800 	.word	0x40000800
 800aae4:	00010007 	.word	0x00010007

0800aae8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b0c      	cmp	r3, #12
 800aafa:	d855      	bhi.n	800aba8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800aafc:	a201      	add	r2, pc, #4	@ (adr r2, 800ab04 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab39 	.word	0x0800ab39
 800ab08:	0800aba9 	.word	0x0800aba9
 800ab0c:	0800aba9 	.word	0x0800aba9
 800ab10:	0800aba9 	.word	0x0800aba9
 800ab14:	0800ab55 	.word	0x0800ab55
 800ab18:	0800aba9 	.word	0x0800aba9
 800ab1c:	0800aba9 	.word	0x0800aba9
 800ab20:	0800aba9 	.word	0x0800aba9
 800ab24:	0800ab71 	.word	0x0800ab71
 800ab28:	0800aba9 	.word	0x0800aba9
 800ab2c:	0800aba9 	.word	0x0800aba9
 800ab30:	0800aba9 	.word	0x0800aba9
 800ab34:	0800ab8d 	.word	0x0800ab8d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68da      	ldr	r2, [r3, #12]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ab46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fc fd01 	bl	8007554 <HAL_DMA_Abort_IT>
      break;
 800ab52:	e02c      	b.n	800abae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68da      	ldr	r2, [r3, #12]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fc fcf3 	bl	8007554 <HAL_DMA_Abort_IT>
      break;
 800ab6e:	e01e      	b.n	800abae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68da      	ldr	r2, [r3, #12]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fc fce5 	bl	8007554 <HAL_DMA_Abort_IT>
      break;
 800ab8a:	e010      	b.n	800abae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ab9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fc fcd7 	bl	8007554 <HAL_DMA_Abort_IT>
      break;
 800aba6:	e002      	b.n	800abae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	73fb      	strb	r3, [r7, #15]
      break;
 800abac:	bf00      	nop
  }

  if (status == HAL_OK)
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f040 8081 	bne.w	800acb8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2200      	movs	r2, #0
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 f91a 	bl	800bdf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a3e      	ldr	r2, [pc, #248]	@ (800acc4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d013      	beq.n	800abf6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a3d      	ldr	r2, [pc, #244]	@ (800acc8 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d00e      	beq.n	800abf6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a3b      	ldr	r2, [pc, #236]	@ (800accc <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d009      	beq.n	800abf6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a3a      	ldr	r2, [pc, #232]	@ (800acd0 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d004      	beq.n	800abf6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a38      	ldr	r2, [pc, #224]	@ (800acd4 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d101      	bne.n	800abfa <HAL_TIM_PWM_Stop_DMA+0x112>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e000      	b.n	800abfc <HAL_TIM_PWM_Stop_DMA+0x114>
 800abfa:	2300      	movs	r3, #0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d017      	beq.n	800ac30 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6a1a      	ldr	r2, [r3, #32]
 800ac06:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10f      	bne.n	800ac30 <HAL_TIM_PWM_Stop_DMA+0x148>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6a1a      	ldr	r2, [r3, #32]
 800ac16:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d107      	bne.n	800ac30 <HAL_TIM_PWM_Stop_DMA+0x148>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ac2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6a1a      	ldr	r2, [r3, #32]
 800ac36:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10f      	bne.n	800ac60 <HAL_TIM_PWM_Stop_DMA+0x178>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6a1a      	ldr	r2, [r3, #32]
 800ac46:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d107      	bne.n	800ac60 <HAL_TIM_PWM_Stop_DMA+0x178>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 0201 	bic.w	r2, r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d104      	bne.n	800ac70 <HAL_TIM_PWM_Stop_DMA+0x188>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac6e:	e023      	b.n	800acb8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b04      	cmp	r3, #4
 800ac74:	d104      	bne.n	800ac80 <HAL_TIM_PWM_Stop_DMA+0x198>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac7e:	e01b      	b.n	800acb8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2b08      	cmp	r3, #8
 800ac84:	d104      	bne.n	800ac90 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac8e:	e013      	b.n	800acb8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	2b0c      	cmp	r3, #12
 800ac94:	d104      	bne.n	800aca0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac9e:	e00b      	b.n	800acb8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2b10      	cmp	r3, #16
 800aca4:	d104      	bne.n	800acb0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acae:	e003      	b.n	800acb8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	40012c00 	.word	0x40012c00
 800acc8:	40013400 	.word	0x40013400
 800accc:	40014000 	.word	0x40014000
 800acd0:	40014400 	.word	0x40014400
 800acd4:	40014800 	.word	0x40014800

0800acd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	f003 0302 	and.w	r3, r3, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d020      	beq.n	800ad3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d01b      	beq.n	800ad3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f06f 0202 	mvn.w	r2, #2
 800ad0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fb40 	bl	800b3a8 <HAL_TIM_IC_CaptureCallback>
 800ad28:	e005      	b.n	800ad36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fb32 	bl	800b394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7f7 ff03 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d020      	beq.n	800ad88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01b      	beq.n	800ad88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f06f 0204 	mvn.w	r2, #4
 800ad58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fb1a 	bl	800b3a8 <HAL_TIM_IC_CaptureCallback>
 800ad74:	e005      	b.n	800ad82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fb0c 	bl	800b394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7f7 fedd 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f003 0308 	and.w	r3, r3, #8
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d020      	beq.n	800add4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f003 0308 	and.w	r3, r3, #8
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01b      	beq.n	800add4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f06f 0208 	mvn.w	r2, #8
 800ada4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2204      	movs	r2, #4
 800adaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 faf4 	bl	800b3a8 <HAL_TIM_IC_CaptureCallback>
 800adc0:	e005      	b.n	800adce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fae6 	bl	800b394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7f7 feb7 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	f003 0310 	and.w	r3, r3, #16
 800adda:	2b00      	cmp	r3, #0
 800addc:	d020      	beq.n	800ae20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01b      	beq.n	800ae20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f06f 0210 	mvn.w	r2, #16
 800adf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2208      	movs	r2, #8
 800adf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 face 	bl	800b3a8 <HAL_TIM_IC_CaptureCallback>
 800ae0c:	e005      	b.n	800ae1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fac0 	bl	800b394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7f7 fe91 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00c      	beq.n	800ae44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d007      	beq.n	800ae44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f06f 0201 	mvn.w	r2, #1
 800ae3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7f8 f83e 	bl	8002ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d104      	bne.n	800ae58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00c      	beq.n	800ae72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d007      	beq.n	800ae72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ae6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 f875 	bl	800bf5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00c      	beq.n	800ae96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d007      	beq.n	800ae96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f001 f86d 	bl	800bf70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00c      	beq.n	800aeba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d007      	beq.n	800aeba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aeb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fa8b 	bl	800b3d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00c      	beq.n	800aede <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d007      	beq.n	800aede <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f06f 0220 	mvn.w	r2, #32
 800aed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 f835 	bl	800bf48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00c      	beq.n	800af02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800aefa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 f841 	bl	800bf84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00c      	beq.n	800af26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800af1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 f839 	bl	800bf98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00c      	beq.n	800af4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d007      	beq.n	800af4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800af42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f001 f831 	bl	800bfac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00c      	beq.n	800af6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800af66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f001 f829 	bl	800bfc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af6e:	bf00      	nop
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d101      	bne.n	800af96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af92:	2302      	movs	r3, #2
 800af94:	e0ff      	b.n	800b196 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b14      	cmp	r3, #20
 800afa2:	f200 80f0 	bhi.w	800b186 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800afa6:	a201      	add	r2, pc, #4	@ (adr r2, 800afac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800afa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afac:	0800b001 	.word	0x0800b001
 800afb0:	0800b187 	.word	0x0800b187
 800afb4:	0800b187 	.word	0x0800b187
 800afb8:	0800b187 	.word	0x0800b187
 800afbc:	0800b041 	.word	0x0800b041
 800afc0:	0800b187 	.word	0x0800b187
 800afc4:	0800b187 	.word	0x0800b187
 800afc8:	0800b187 	.word	0x0800b187
 800afcc:	0800b083 	.word	0x0800b083
 800afd0:	0800b187 	.word	0x0800b187
 800afd4:	0800b187 	.word	0x0800b187
 800afd8:	0800b187 	.word	0x0800b187
 800afdc:	0800b0c3 	.word	0x0800b0c3
 800afe0:	0800b187 	.word	0x0800b187
 800afe4:	0800b187 	.word	0x0800b187
 800afe8:	0800b187 	.word	0x0800b187
 800afec:	0800b105 	.word	0x0800b105
 800aff0:	0800b187 	.word	0x0800b187
 800aff4:	0800b187 	.word	0x0800b187
 800aff8:	0800b187 	.word	0x0800b187
 800affc:	0800b145 	.word	0x0800b145
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68b9      	ldr	r1, [r7, #8]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fb64 	bl	800b6d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699a      	ldr	r2, [r3, #24]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0208 	orr.w	r2, r2, #8
 800b01a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	699a      	ldr	r2, [r3, #24]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0204 	bic.w	r2, r2, #4
 800b02a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6999      	ldr	r1, [r3, #24]
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	691a      	ldr	r2, [r3, #16]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	619a      	str	r2, [r3, #24]
      break;
 800b03e:	e0a5      	b.n	800b18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fbd4 	bl	800b7f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	699a      	ldr	r2, [r3, #24]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b05a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	699a      	ldr	r2, [r3, #24]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b06a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6999      	ldr	r1, [r3, #24]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	021a      	lsls	r2, r3, #8
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	619a      	str	r2, [r3, #24]
      break;
 800b080:	e084      	b.n	800b18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68b9      	ldr	r1, [r7, #8]
 800b088:	4618      	mov	r0, r3
 800b08a:	f000 fc3d 	bl	800b908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69da      	ldr	r2, [r3, #28]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f042 0208 	orr.w	r2, r2, #8
 800b09c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69da      	ldr	r2, [r3, #28]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f022 0204 	bic.w	r2, r2, #4
 800b0ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	69d9      	ldr	r1, [r3, #28]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	691a      	ldr	r2, [r3, #16]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	61da      	str	r2, [r3, #28]
      break;
 800b0c0:	e064      	b.n	800b18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68b9      	ldr	r1, [r7, #8]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fca5 	bl	800ba18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	69da      	ldr	r2, [r3, #28]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69da      	ldr	r2, [r3, #28]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	69d9      	ldr	r1, [r3, #28]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	021a      	lsls	r2, r3, #8
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	430a      	orrs	r2, r1
 800b100:	61da      	str	r2, [r3, #28]
      break;
 800b102:	e043      	b.n	800b18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fd0e 	bl	800bb2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f042 0208 	orr.w	r2, r2, #8
 800b11e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f022 0204 	bic.w	r2, r2, #4
 800b12e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	691a      	ldr	r2, [r3, #16]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b142:	e023      	b.n	800b18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 fd52 	bl	800bbf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b15e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b16e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	021a      	lsls	r2, r3, #8
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	430a      	orrs	r2, r1
 800b182:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b184:	e002      	b.n	800b18c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	75fb      	strb	r3, [r7, #23]
      break;
 800b18a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop

0800b1a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d101      	bne.n	800b1bc <HAL_TIM_ConfigClockSource+0x1c>
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	e0de      	b.n	800b37a <HAL_TIM_ConfigClockSource+0x1da>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b1da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b1de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a63      	ldr	r2, [pc, #396]	@ (800b384 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	f000 80a9 	beq.w	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b1fc:	4a61      	ldr	r2, [pc, #388]	@ (800b384 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	f200 80ae 	bhi.w	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b204:	4a60      	ldr	r2, [pc, #384]	@ (800b388 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b206:	4293      	cmp	r3, r2
 800b208:	f000 80a1 	beq.w	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b20c:	4a5e      	ldr	r2, [pc, #376]	@ (800b388 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	f200 80a6 	bhi.w	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b214:	4a5d      	ldr	r2, [pc, #372]	@ (800b38c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b216:	4293      	cmp	r3, r2
 800b218:	f000 8099 	beq.w	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b21c:	4a5b      	ldr	r2, [pc, #364]	@ (800b38c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	f200 809e 	bhi.w	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b224:	4a5a      	ldr	r2, [pc, #360]	@ (800b390 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b226:	4293      	cmp	r3, r2
 800b228:	f000 8091 	beq.w	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b22c:	4a58      	ldr	r2, [pc, #352]	@ (800b390 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	f200 8096 	bhi.w	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b234:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b238:	f000 8089 	beq.w	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b23c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b240:	f200 808e 	bhi.w	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b248:	d03e      	beq.n	800b2c8 <HAL_TIM_ConfigClockSource+0x128>
 800b24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b24e:	f200 8087 	bhi.w	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b256:	f000 8086 	beq.w	800b366 <HAL_TIM_ConfigClockSource+0x1c6>
 800b25a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b25e:	d87f      	bhi.n	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b260:	2b70      	cmp	r3, #112	@ 0x70
 800b262:	d01a      	beq.n	800b29a <HAL_TIM_ConfigClockSource+0xfa>
 800b264:	2b70      	cmp	r3, #112	@ 0x70
 800b266:	d87b      	bhi.n	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b268:	2b60      	cmp	r3, #96	@ 0x60
 800b26a:	d050      	beq.n	800b30e <HAL_TIM_ConfigClockSource+0x16e>
 800b26c:	2b60      	cmp	r3, #96	@ 0x60
 800b26e:	d877      	bhi.n	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b270:	2b50      	cmp	r3, #80	@ 0x50
 800b272:	d03c      	beq.n	800b2ee <HAL_TIM_ConfigClockSource+0x14e>
 800b274:	2b50      	cmp	r3, #80	@ 0x50
 800b276:	d873      	bhi.n	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b278:	2b40      	cmp	r3, #64	@ 0x40
 800b27a:	d058      	beq.n	800b32e <HAL_TIM_ConfigClockSource+0x18e>
 800b27c:	2b40      	cmp	r3, #64	@ 0x40
 800b27e:	d86f      	bhi.n	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b280:	2b30      	cmp	r3, #48	@ 0x30
 800b282:	d064      	beq.n	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b284:	2b30      	cmp	r3, #48	@ 0x30
 800b286:	d86b      	bhi.n	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b288:	2b20      	cmp	r3, #32
 800b28a:	d060      	beq.n	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b28c:	2b20      	cmp	r3, #32
 800b28e:	d867      	bhi.n	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
 800b290:	2b00      	cmp	r3, #0
 800b292:	d05c      	beq.n	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b294:	2b10      	cmp	r3, #16
 800b296:	d05a      	beq.n	800b34e <HAL_TIM_ConfigClockSource+0x1ae>
 800b298:	e062      	b.n	800b360 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2aa:	f000 fd85 	bl	800bdb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	609a      	str	r2, [r3, #8]
      break;
 800b2c6:	e04f      	b.n	800b368 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2d8:	f000 fd6e 	bl	800bdb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	689a      	ldr	r2, [r3, #8]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b2ea:	609a      	str	r2, [r3, #8]
      break;
 800b2ec:	e03c      	b.n	800b368 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f000 fce0 	bl	800bcc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2150      	movs	r1, #80	@ 0x50
 800b306:	4618      	mov	r0, r3
 800b308:	f000 fd39 	bl	800bd7e <TIM_ITRx_SetConfig>
      break;
 800b30c:	e02c      	b.n	800b368 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b31a:	461a      	mov	r2, r3
 800b31c:	f000 fcff 	bl	800bd1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2160      	movs	r1, #96	@ 0x60
 800b326:	4618      	mov	r0, r3
 800b328:	f000 fd29 	bl	800bd7e <TIM_ITRx_SetConfig>
      break;
 800b32c:	e01c      	b.n	800b368 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b33a:	461a      	mov	r2, r3
 800b33c:	f000 fcc0 	bl	800bcc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2140      	movs	r1, #64	@ 0x40
 800b346:	4618      	mov	r0, r3
 800b348:	f000 fd19 	bl	800bd7e <TIM_ITRx_SetConfig>
      break;
 800b34c:	e00c      	b.n	800b368 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4619      	mov	r1, r3
 800b358:	4610      	mov	r0, r2
 800b35a:	f000 fd10 	bl	800bd7e <TIM_ITRx_SetConfig>
      break;
 800b35e:	e003      	b.n	800b368 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	73fb      	strb	r3, [r7, #15]
      break;
 800b364:	e000      	b.n	800b368 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800b366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b378:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	00100070 	.word	0x00100070
 800b388:	00100040 	.word	0x00100040
 800b38c:	00100030 	.word	0x00100030
 800b390:	00100020 	.word	0x00100020

0800b394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3d8:	bf00      	nop
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b404:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d107      	bne.n	800b420 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2201      	movs	r2, #1
 800b414:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b41e:	e02a      	b.n	800b476 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d107      	bne.n	800b43a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2202      	movs	r2, #2
 800b42e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b438:	e01d      	b.n	800b476 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d107      	bne.n	800b454 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2204      	movs	r2, #4
 800b448:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b452:	e010      	b.n	800b476 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d107      	bne.n	800b46e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2208      	movs	r2, #8
 800b462:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b46c:	e003      	b.n	800b476 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f7ff ffb4 	bl	800b3e4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	771a      	strb	r2, [r3, #28]
}
 800b482:	bf00      	nop
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b496:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d10b      	bne.n	800b4ba <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d136      	bne.n	800b51e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4b8:	e031      	b.n	800b51e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d10b      	bne.n	800b4dc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d125      	bne.n	800b51e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4da:	e020      	b.n	800b51e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d10b      	bne.n	800b4fe <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2204      	movs	r2, #4
 800b4ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	69db      	ldr	r3, [r3, #28]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d114      	bne.n	800b51e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4fc:	e00f      	b.n	800b51e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	429a      	cmp	r2, r3
 800b506:	d10a      	bne.n	800b51e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2208      	movs	r2, #8
 800b50c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d103      	bne.n	800b51e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f7f7 fb0c 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	771a      	strb	r2, [r3, #28]
}
 800b52a:	bf00      	nop
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	429a      	cmp	r2, r3
 800b548:	d103      	bne.n	800b552 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	771a      	strb	r2, [r3, #28]
 800b550:	e019      	b.n	800b586 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d103      	bne.n	800b564 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2202      	movs	r2, #2
 800b560:	771a      	strb	r2, [r3, #28]
 800b562:	e010      	b.n	800b586 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d103      	bne.n	800b576 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2204      	movs	r2, #4
 800b572:	771a      	strb	r2, [r3, #28]
 800b574:	e007      	b.n	800b586 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d102      	bne.n	800b586 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2208      	movs	r2, #8
 800b584:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7ff ff18 	bl	800b3bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	771a      	strb	r2, [r3, #28]
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a42      	ldr	r2, [pc, #264]	@ (800b6b8 <TIM_Base_SetConfig+0x11c>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d00f      	beq.n	800b5d4 <TIM_Base_SetConfig+0x38>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ba:	d00b      	beq.n	800b5d4 <TIM_Base_SetConfig+0x38>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a3f      	ldr	r2, [pc, #252]	@ (800b6bc <TIM_Base_SetConfig+0x120>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d007      	beq.n	800b5d4 <TIM_Base_SetConfig+0x38>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a3e      	ldr	r2, [pc, #248]	@ (800b6c0 <TIM_Base_SetConfig+0x124>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d003      	beq.n	800b5d4 <TIM_Base_SetConfig+0x38>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a3d      	ldr	r2, [pc, #244]	@ (800b6c4 <TIM_Base_SetConfig+0x128>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d108      	bne.n	800b5e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a33      	ldr	r2, [pc, #204]	@ (800b6b8 <TIM_Base_SetConfig+0x11c>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d01b      	beq.n	800b626 <TIM_Base_SetConfig+0x8a>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5f4:	d017      	beq.n	800b626 <TIM_Base_SetConfig+0x8a>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a30      	ldr	r2, [pc, #192]	@ (800b6bc <TIM_Base_SetConfig+0x120>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d013      	beq.n	800b626 <TIM_Base_SetConfig+0x8a>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a2f      	ldr	r2, [pc, #188]	@ (800b6c0 <TIM_Base_SetConfig+0x124>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d00f      	beq.n	800b626 <TIM_Base_SetConfig+0x8a>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a2e      	ldr	r2, [pc, #184]	@ (800b6c4 <TIM_Base_SetConfig+0x128>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d00b      	beq.n	800b626 <TIM_Base_SetConfig+0x8a>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a2d      	ldr	r2, [pc, #180]	@ (800b6c8 <TIM_Base_SetConfig+0x12c>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d007      	beq.n	800b626 <TIM_Base_SetConfig+0x8a>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a2c      	ldr	r2, [pc, #176]	@ (800b6cc <TIM_Base_SetConfig+0x130>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d003      	beq.n	800b626 <TIM_Base_SetConfig+0x8a>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a2b      	ldr	r2, [pc, #172]	@ (800b6d0 <TIM_Base_SetConfig+0x134>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d108      	bne.n	800b638 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b62c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	4313      	orrs	r3, r2
 800b636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	4313      	orrs	r3, r2
 800b644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a16      	ldr	r2, [pc, #88]	@ (800b6b8 <TIM_Base_SetConfig+0x11c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d00f      	beq.n	800b684 <TIM_Base_SetConfig+0xe8>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a17      	ldr	r2, [pc, #92]	@ (800b6c4 <TIM_Base_SetConfig+0x128>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00b      	beq.n	800b684 <TIM_Base_SetConfig+0xe8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a16      	ldr	r2, [pc, #88]	@ (800b6c8 <TIM_Base_SetConfig+0x12c>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d007      	beq.n	800b684 <TIM_Base_SetConfig+0xe8>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a15      	ldr	r2, [pc, #84]	@ (800b6cc <TIM_Base_SetConfig+0x130>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_Base_SetConfig+0xe8>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a14      	ldr	r2, [pc, #80]	@ (800b6d0 <TIM_Base_SetConfig+0x134>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d103      	bne.n	800b68c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	691a      	ldr	r2, [r3, #16]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d105      	bne.n	800b6aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	f023 0201 	bic.w	r2, r3, #1
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	611a      	str	r2, [r3, #16]
  }
}
 800b6aa:	bf00      	nop
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	40012c00 	.word	0x40012c00
 800b6bc:	40000400 	.word	0x40000400
 800b6c0:	40000800 	.word	0x40000800
 800b6c4:	40013400 	.word	0x40013400
 800b6c8:	40014000 	.word	0x40014000
 800b6cc:	40014400 	.word	0x40014400
 800b6d0:	40014800 	.word	0x40014800

0800b6d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b087      	sub	sp, #28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a1b      	ldr	r3, [r3, #32]
 800b6e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	f023 0201 	bic.w	r2, r3, #1
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f023 0303 	bic.w	r3, r3, #3
 800b70e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	4313      	orrs	r3, r2
 800b718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f023 0302 	bic.w	r3, r3, #2
 800b720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	4313      	orrs	r3, r2
 800b72a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a2c      	ldr	r2, [pc, #176]	@ (800b7e0 <TIM_OC1_SetConfig+0x10c>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d00f      	beq.n	800b754 <TIM_OC1_SetConfig+0x80>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a2b      	ldr	r2, [pc, #172]	@ (800b7e4 <TIM_OC1_SetConfig+0x110>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d00b      	beq.n	800b754 <TIM_OC1_SetConfig+0x80>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7e8 <TIM_OC1_SetConfig+0x114>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d007      	beq.n	800b754 <TIM_OC1_SetConfig+0x80>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a29      	ldr	r2, [pc, #164]	@ (800b7ec <TIM_OC1_SetConfig+0x118>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d003      	beq.n	800b754 <TIM_OC1_SetConfig+0x80>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a28      	ldr	r2, [pc, #160]	@ (800b7f0 <TIM_OC1_SetConfig+0x11c>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d10c      	bne.n	800b76e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	f023 0308 	bic.w	r3, r3, #8
 800b75a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	4313      	orrs	r3, r2
 800b764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f023 0304 	bic.w	r3, r3, #4
 800b76c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a1b      	ldr	r2, [pc, #108]	@ (800b7e0 <TIM_OC1_SetConfig+0x10c>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d00f      	beq.n	800b796 <TIM_OC1_SetConfig+0xc2>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a1a      	ldr	r2, [pc, #104]	@ (800b7e4 <TIM_OC1_SetConfig+0x110>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d00b      	beq.n	800b796 <TIM_OC1_SetConfig+0xc2>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a19      	ldr	r2, [pc, #100]	@ (800b7e8 <TIM_OC1_SetConfig+0x114>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d007      	beq.n	800b796 <TIM_OC1_SetConfig+0xc2>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a18      	ldr	r2, [pc, #96]	@ (800b7ec <TIM_OC1_SetConfig+0x118>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d003      	beq.n	800b796 <TIM_OC1_SetConfig+0xc2>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a17      	ldr	r2, [pc, #92]	@ (800b7f0 <TIM_OC1_SetConfig+0x11c>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d111      	bne.n	800b7ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b79c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	693a      	ldr	r2, [r7, #16]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	693a      	ldr	r2, [r7, #16]
 800b7be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	685a      	ldr	r2, [r3, #4]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	621a      	str	r2, [r3, #32]
}
 800b7d4:	bf00      	nop
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	40012c00 	.word	0x40012c00
 800b7e4:	40013400 	.word	0x40013400
 800b7e8:	40014000 	.word	0x40014000
 800b7ec:	40014400 	.word	0x40014400
 800b7f0:	40014800 	.word	0x40014800

0800b7f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	f023 0210 	bic.w	r2, r3, #16
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b82e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	021b      	lsls	r3, r3, #8
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f023 0320 	bic.w	r3, r3, #32
 800b842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	011b      	lsls	r3, r3, #4
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a28      	ldr	r2, [pc, #160]	@ (800b8f4 <TIM_OC2_SetConfig+0x100>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d003      	beq.n	800b860 <TIM_OC2_SetConfig+0x6c>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a27      	ldr	r2, [pc, #156]	@ (800b8f8 <TIM_OC2_SetConfig+0x104>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d10d      	bne.n	800b87c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	4313      	orrs	r3, r2
 800b872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b87a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f4 <TIM_OC2_SetConfig+0x100>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d00f      	beq.n	800b8a4 <TIM_OC2_SetConfig+0xb0>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a1c      	ldr	r2, [pc, #112]	@ (800b8f8 <TIM_OC2_SetConfig+0x104>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d00b      	beq.n	800b8a4 <TIM_OC2_SetConfig+0xb0>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4a1b      	ldr	r2, [pc, #108]	@ (800b8fc <TIM_OC2_SetConfig+0x108>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d007      	beq.n	800b8a4 <TIM_OC2_SetConfig+0xb0>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a1a      	ldr	r2, [pc, #104]	@ (800b900 <TIM_OC2_SetConfig+0x10c>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d003      	beq.n	800b8a4 <TIM_OC2_SetConfig+0xb0>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a19      	ldr	r2, [pc, #100]	@ (800b904 <TIM_OC2_SetConfig+0x110>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d113      	bne.n	800b8cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b8aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	699b      	ldr	r3, [r3, #24]
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	621a      	str	r2, [r3, #32]
}
 800b8e6:	bf00      	nop
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	40012c00 	.word	0x40012c00
 800b8f8:	40013400 	.word	0x40013400
 800b8fc:	40014000 	.word	0x40014000
 800b900:	40014400 	.word	0x40014400
 800b904:	40014800 	.word	0x40014800

0800b908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b93a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f023 0303 	bic.w	r3, r3, #3
 800b942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	021b      	lsls	r3, r3, #8
 800b95c:	697a      	ldr	r2, [r7, #20]
 800b95e:	4313      	orrs	r3, r2
 800b960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a27      	ldr	r2, [pc, #156]	@ (800ba04 <TIM_OC3_SetConfig+0xfc>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d003      	beq.n	800b972 <TIM_OC3_SetConfig+0x6a>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a26      	ldr	r2, [pc, #152]	@ (800ba08 <TIM_OC3_SetConfig+0x100>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d10d      	bne.n	800b98e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	021b      	lsls	r3, r3, #8
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	4313      	orrs	r3, r2
 800b984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b98c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a1c      	ldr	r2, [pc, #112]	@ (800ba04 <TIM_OC3_SetConfig+0xfc>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d00f      	beq.n	800b9b6 <TIM_OC3_SetConfig+0xae>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a1b      	ldr	r2, [pc, #108]	@ (800ba08 <TIM_OC3_SetConfig+0x100>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d00b      	beq.n	800b9b6 <TIM_OC3_SetConfig+0xae>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a1a      	ldr	r2, [pc, #104]	@ (800ba0c <TIM_OC3_SetConfig+0x104>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d007      	beq.n	800b9b6 <TIM_OC3_SetConfig+0xae>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a19      	ldr	r2, [pc, #100]	@ (800ba10 <TIM_OC3_SetConfig+0x108>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d003      	beq.n	800b9b6 <TIM_OC3_SetConfig+0xae>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a18      	ldr	r2, [pc, #96]	@ (800ba14 <TIM_OC3_SetConfig+0x10c>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d113      	bne.n	800b9de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b9c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	011b      	lsls	r3, r3, #4
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	621a      	str	r2, [r3, #32]
}
 800b9f8:	bf00      	nop
 800b9fa:	371c      	adds	r7, #28
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	40012c00 	.word	0x40012c00
 800ba08:	40013400 	.word	0x40013400
 800ba0c:	40014000 	.word	0x40014000
 800ba10:	40014400 	.word	0x40014400
 800ba14:	40014800 	.word	0x40014800

0800ba18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	021b      	lsls	r3, r3, #8
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	031b      	lsls	r3, r3, #12
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	4313      	orrs	r3, r2
 800ba72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a28      	ldr	r2, [pc, #160]	@ (800bb18 <TIM_OC4_SetConfig+0x100>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d003      	beq.n	800ba84 <TIM_OC4_SetConfig+0x6c>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a27      	ldr	r2, [pc, #156]	@ (800bb1c <TIM_OC4_SetConfig+0x104>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d10d      	bne.n	800baa0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ba8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	031b      	lsls	r3, r3, #12
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a1d      	ldr	r2, [pc, #116]	@ (800bb18 <TIM_OC4_SetConfig+0x100>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d00f      	beq.n	800bac8 <TIM_OC4_SetConfig+0xb0>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a1c      	ldr	r2, [pc, #112]	@ (800bb1c <TIM_OC4_SetConfig+0x104>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d00b      	beq.n	800bac8 <TIM_OC4_SetConfig+0xb0>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a1b      	ldr	r2, [pc, #108]	@ (800bb20 <TIM_OC4_SetConfig+0x108>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d007      	beq.n	800bac8 <TIM_OC4_SetConfig+0xb0>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a1a      	ldr	r2, [pc, #104]	@ (800bb24 <TIM_OC4_SetConfig+0x10c>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d003      	beq.n	800bac8 <TIM_OC4_SetConfig+0xb0>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a19      	ldr	r2, [pc, #100]	@ (800bb28 <TIM_OC4_SetConfig+0x110>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d113      	bne.n	800baf0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bace:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bad6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	019b      	lsls	r3, r3, #6
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	019b      	lsls	r3, r3, #6
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	4313      	orrs	r3, r2
 800baee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	693a      	ldr	r2, [r7, #16]
 800baf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	621a      	str	r2, [r3, #32]
}
 800bb0a:	bf00      	nop
 800bb0c:	371c      	adds	r7, #28
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	40012c00 	.word	0x40012c00
 800bb1c:	40013400 	.word	0x40013400
 800bb20:	40014000 	.word	0x40014000
 800bb24:	40014400 	.word	0x40014400
 800bb28:	40014800 	.word	0x40014800

0800bb2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bb70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	041b      	lsls	r3, r3, #16
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4a17      	ldr	r2, [pc, #92]	@ (800bbe0 <TIM_OC5_SetConfig+0xb4>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d00f      	beq.n	800bba6 <TIM_OC5_SetConfig+0x7a>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a16      	ldr	r2, [pc, #88]	@ (800bbe4 <TIM_OC5_SetConfig+0xb8>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d00b      	beq.n	800bba6 <TIM_OC5_SetConfig+0x7a>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a15      	ldr	r2, [pc, #84]	@ (800bbe8 <TIM_OC5_SetConfig+0xbc>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d007      	beq.n	800bba6 <TIM_OC5_SetConfig+0x7a>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a14      	ldr	r2, [pc, #80]	@ (800bbec <TIM_OC5_SetConfig+0xc0>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d003      	beq.n	800bba6 <TIM_OC5_SetConfig+0x7a>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a13      	ldr	r2, [pc, #76]	@ (800bbf0 <TIM_OC5_SetConfig+0xc4>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d109      	bne.n	800bbba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	021b      	lsls	r3, r3, #8
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	621a      	str	r2, [r3, #32]
}
 800bbd4:	bf00      	nop
 800bbd6:	371c      	adds	r7, #28
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	40012c00 	.word	0x40012c00
 800bbe4:	40013400 	.word	0x40013400
 800bbe8:	40014000 	.word	0x40014000
 800bbec:	40014400 	.word	0x40014400
 800bbf0:	40014800 	.word	0x40014800

0800bbf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a1b      	ldr	r3, [r3, #32]
 800bc08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	021b      	lsls	r3, r3, #8
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	051b      	lsls	r3, r3, #20
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a18      	ldr	r2, [pc, #96]	@ (800bcac <TIM_OC6_SetConfig+0xb8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d00f      	beq.n	800bc70 <TIM_OC6_SetConfig+0x7c>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a17      	ldr	r2, [pc, #92]	@ (800bcb0 <TIM_OC6_SetConfig+0xbc>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d00b      	beq.n	800bc70 <TIM_OC6_SetConfig+0x7c>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a16      	ldr	r2, [pc, #88]	@ (800bcb4 <TIM_OC6_SetConfig+0xc0>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d007      	beq.n	800bc70 <TIM_OC6_SetConfig+0x7c>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a15      	ldr	r2, [pc, #84]	@ (800bcb8 <TIM_OC6_SetConfig+0xc4>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d003      	beq.n	800bc70 <TIM_OC6_SetConfig+0x7c>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a14      	ldr	r2, [pc, #80]	@ (800bcbc <TIM_OC6_SetConfig+0xc8>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d109      	bne.n	800bc84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	029b      	lsls	r3, r3, #10
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	621a      	str	r2, [r3, #32]
}
 800bc9e:	bf00      	nop
 800bca0:	371c      	adds	r7, #28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	40012c00 	.word	0x40012c00
 800bcb0:	40013400 	.word	0x40013400
 800bcb4:	40014000 	.word	0x40014000
 800bcb8:	40014400 	.word	0x40014400
 800bcbc:	40014800 	.word	0x40014800

0800bcc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b087      	sub	sp, #28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	f023 0201 	bic.w	r2, r3, #1
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bcea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	011b      	lsls	r3, r3, #4
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f023 030a 	bic.w	r3, r3, #10
 800bcfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	621a      	str	r2, [r3, #32]
}
 800bd12:	bf00      	nop
 800bd14:	371c      	adds	r7, #28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b087      	sub	sp, #28
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	60f8      	str	r0, [r7, #12]
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	f023 0210 	bic.w	r2, r3, #16
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bd48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	031b      	lsls	r3, r3, #12
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bd5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	011b      	lsls	r3, r3, #4
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	621a      	str	r2, [r3, #32]
}
 800bd72:	bf00      	nop
 800bd74:	371c      	adds	r7, #28
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b085      	sub	sp, #20
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bd94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	f043 0307 	orr.w	r3, r3, #7
 800bda4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	609a      	str	r2, [r3, #8]
}
 800bdac:	bf00      	nop
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b087      	sub	sp, #28
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
 800bdc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	021a      	lsls	r2, r3, #8
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	431a      	orrs	r2, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	609a      	str	r2, [r3, #8]
}
 800bdec:	bf00      	nop
 800bdee:	371c      	adds	r7, #28
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b087      	sub	sp, #28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	f003 031f 	and.w	r3, r3, #31
 800be0a:	2201      	movs	r2, #1
 800be0c:	fa02 f303 	lsl.w	r3, r2, r3
 800be10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6a1a      	ldr	r2, [r3, #32]
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	43db      	mvns	r3, r3
 800be1a:	401a      	ands	r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6a1a      	ldr	r2, [r3, #32]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	f003 031f 	and.w	r3, r3, #31
 800be2a:	6879      	ldr	r1, [r7, #4]
 800be2c:	fa01 f303 	lsl.w	r3, r1, r3
 800be30:	431a      	orrs	r2, r3
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	621a      	str	r2, [r3, #32]
}
 800be36:	bf00      	nop
 800be38:	371c      	adds	r7, #28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
	...

0800be44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be54:	2b01      	cmp	r3, #1
 800be56:	d101      	bne.n	800be5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be58:	2302      	movs	r3, #2
 800be5a:	e065      	b.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a2c      	ldr	r2, [pc, #176]	@ (800bf34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d004      	beq.n	800be90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a2b      	ldr	r2, [pc, #172]	@ (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d108      	bne.n	800bea2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800be96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a1b      	ldr	r2, [pc, #108]	@ (800bf34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d018      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bed2:	d013      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a18      	ldr	r2, [pc, #96]	@ (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d00e      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a17      	ldr	r2, [pc, #92]	@ (800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d009      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a12      	ldr	r2, [pc, #72]	@ (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d004      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a13      	ldr	r2, [pc, #76]	@ (800bf44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d10c      	bne.n	800bf16 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	40012c00 	.word	0x40012c00
 800bf38:	40013400 	.word	0x40013400
 800bf3c:	40000400 	.word	0x40000400
 800bf40:	40000800 	.word	0x40000800
 800bf44:	40014000 	.word	0x40014000

0800bf48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d101      	bne.n	800bfe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e042      	b.n	800c06c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f7f8 fc7d 	bl	80048f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2224      	movs	r2, #36	@ 0x24
 800c002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 0201 	bic.w	r2, r2, #1
 800c014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f001 f894 	bl	800d14c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fdc5 	bl	800cbb4 <UART_SetConfig>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d101      	bne.n	800c034 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e01b      	b.n	800c06c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689a      	ldr	r2, [r3, #8]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f042 0201 	orr.w	r2, r2, #1
 800c062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f001 f913 	bl	800d290 <UART_CheckIdleState>
 800c06a:	4603      	mov	r3, r0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08a      	sub	sp, #40	@ 0x28
 800c078:	af02      	add	r7, sp, #8
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	603b      	str	r3, [r7, #0]
 800c080:	4613      	mov	r3, r2
 800c082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c08a:	2b20      	cmp	r3, #32
 800c08c:	d17b      	bne.n	800c186 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <HAL_UART_Transmit+0x26>
 800c094:	88fb      	ldrh	r3, [r7, #6]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e074      	b.n	800c188 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2221      	movs	r2, #33	@ 0x21
 800c0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0ae:	f7f9 fb11 	bl	80056d4 <HAL_GetTick>
 800c0b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	88fa      	ldrh	r2, [r7, #6]
 800c0b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	88fa      	ldrh	r2, [r7, #6]
 800c0c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0cc:	d108      	bne.n	800c0e0 <HAL_UART_Transmit+0x6c>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d104      	bne.n	800c0e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	61bb      	str	r3, [r7, #24]
 800c0de:	e003      	b.n	800c0e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c0e8:	e030      	b.n	800c14c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	2180      	movs	r1, #128	@ 0x80
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f001 f975 	bl	800d3e4 <UART_WaitOnFlagUntilTimeout>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2220      	movs	r2, #32
 800c104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e03d      	b.n	800c188 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	461a      	mov	r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c120:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	3302      	adds	r3, #2
 800c126:	61bb      	str	r3, [r7, #24]
 800c128:	e007      	b.n	800c13a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	781a      	ldrb	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	3301      	adds	r3, #1
 800c138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c140:	b29b      	uxth	r3, r3
 800c142:	3b01      	subs	r3, #1
 800c144:	b29a      	uxth	r2, r3
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c152:	b29b      	uxth	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1c8      	bne.n	800c0ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	2200      	movs	r2, #0
 800c160:	2140      	movs	r1, #64	@ 0x40
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f001 f93e 	bl	800d3e4 <UART_WaitOnFlagUntilTimeout>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2220      	movs	r2, #32
 800c172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c176:	2303      	movs	r3, #3
 800c178:	e006      	b.n	800c188 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	e000      	b.n	800c188 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c186:	2302      	movs	r3, #2
  }
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08a      	sub	sp, #40	@ 0x28
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	4613      	mov	r3, r2
 800c19c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	d137      	bne.n	800c218 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <HAL_UART_Receive_IT+0x24>
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e030      	b.n	800c21a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a18      	ldr	r2, [pc, #96]	@ (800c224 <HAL_UART_Receive_IT+0x94>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d01f      	beq.n	800c208 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d018      	beq.n	800c208 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	e853 3f00 	ldrex	r3, [r3]
 800c1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	623b      	str	r3, [r7, #32]
 800c1f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f8:	69f9      	ldr	r1, [r7, #28]
 800c1fa:	6a3a      	ldr	r2, [r7, #32]
 800c1fc:	e841 2300 	strex	r3, r2, [r1]
 800c200:	61bb      	str	r3, [r7, #24]
   return(result);
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1e6      	bne.n	800c1d6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c208:	88fb      	ldrh	r3, [r7, #6]
 800c20a:	461a      	mov	r2, r3
 800c20c:	68b9      	ldr	r1, [r7, #8]
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f001 f956 	bl	800d4c0 <UART_Start_Receive_IT>
 800c214:	4603      	mov	r3, r0
 800c216:	e000      	b.n	800c21a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c218:	2302      	movs	r3, #2
  }
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3728      	adds	r7, #40	@ 0x28
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	40008000 	.word	0x40008000

0800c228 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08a      	sub	sp, #40	@ 0x28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	4613      	mov	r3, r2
 800c234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c23c:	2b20      	cmp	r3, #32
 800c23e:	d137      	bne.n	800c2b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <HAL_UART_Receive_DMA+0x24>
 800c246:	88fb      	ldrh	r3, [r7, #6]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e030      	b.n	800c2b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a18      	ldr	r2, [pc, #96]	@ (800c2bc <HAL_UART_Receive_DMA+0x94>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d01f      	beq.n	800c2a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d018      	beq.n	800c2a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	613b      	str	r3, [r7, #16]
   return(result);
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c282:	627b      	str	r3, [r7, #36]	@ 0x24
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	461a      	mov	r2, r3
 800c28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28c:	623b      	str	r3, [r7, #32]
 800c28e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	69f9      	ldr	r1, [r7, #28]
 800c292:	6a3a      	ldr	r2, [r7, #32]
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	61bb      	str	r3, [r7, #24]
   return(result);
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e6      	bne.n	800c26e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c2a0:	88fb      	ldrh	r3, [r7, #6]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f001 fa2c 	bl	800d704 <UART_Start_Receive_DMA>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	e000      	b.n	800c2b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c2b0:	2302      	movs	r3, #2
  }
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3728      	adds	r7, #40	@ 0x28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	40008000 	.word	0x40008000

0800c2c0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b0a0      	sub	sp, #128	@ 0x80
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c2d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2d8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800c2dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c2e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2e8:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c2ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c2f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e6      	bne.n	800c2c8 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3308      	adds	r3, #8
 800c300:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c30a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c30c:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800c310:	f023 0301 	bic.w	r3, r3, #1
 800c314:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3308      	adds	r3, #8
 800c31c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c31e:	657a      	str	r2, [r7, #84]	@ 0x54
 800c320:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c324:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c326:	e841 2300 	strex	r3, r2, [r1]
 800c32a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c32c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e3      	bne.n	800c2fa <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c336:	2b01      	cmp	r3, #1
 800c338:	d118      	bne.n	800c36c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c342:	e853 3f00 	ldrex	r3, [r3]
 800c346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34a:	f023 0310 	bic.w	r3, r3, #16
 800c34e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	461a      	mov	r2, r3
 800c356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c358:	643b      	str	r3, [r7, #64]	@ 0x40
 800c35a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c35e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e6      	bne.n	800c33a <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c376:	2b80      	cmp	r3, #128	@ 0x80
 800c378:	d137      	bne.n	800c3ea <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3308      	adds	r3, #8
 800c380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c382:	6a3b      	ldr	r3, [r7, #32]
 800c384:	e853 3f00 	ldrex	r3, [r3]
 800c388:	61fb      	str	r3, [r7, #28]
   return(result);
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c390:	673b      	str	r3, [r7, #112]	@ 0x70
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3308      	adds	r3, #8
 800c398:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c39a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c39c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3a2:	e841 2300 	strex	r3, r2, [r1]
 800c3a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e5      	bne.n	800c37a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d019      	beq.n	800c3ea <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fb f86d 	bl	80074a2 <HAL_DMA_Abort>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00d      	beq.n	800c3ea <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fb f9d4 	bl	8007780 <HAL_DMA_GetError>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b20      	cmp	r3, #32
 800c3dc:	d105      	bne.n	800c3ea <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2210      	movs	r2, #16
 800c3e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	e073      	b.n	800c4d2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3f4:	2b40      	cmp	r3, #64	@ 0x40
 800c3f6:	d13b      	bne.n	800c470 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	e853 3f00 	ldrex	r3, [r3]
 800c406:	60bb      	str	r3, [r7, #8]
   return(result);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c40e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3308      	adds	r3, #8
 800c416:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c418:	61ba      	str	r2, [r7, #24]
 800c41a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	6979      	ldr	r1, [r7, #20]
 800c41e:	69ba      	ldr	r2, [r7, #24]
 800c420:	e841 2300 	strex	r3, r2, [r1]
 800c424:	613b      	str	r3, [r7, #16]
   return(result);
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1e5      	bne.n	800c3f8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c432:	2b00      	cmp	r3, #0
 800c434:	d01c      	beq.n	800c470 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c43c:	2200      	movs	r2, #0
 800c43e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c446:	4618      	mov	r0, r3
 800c448:	f7fb f82b 	bl	80074a2 <HAL_DMA_Abort>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00e      	beq.n	800c470 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fb f991 	bl	8007780 <HAL_DMA_GetError>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b20      	cmp	r3, #32
 800c462:	d105      	bne.n	800c470 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2210      	movs	r2, #16
 800c468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e030      	b.n	800c4d2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	220f      	movs	r2, #15
 800c486:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c48c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c490:	d107      	bne.n	800c4a2 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	699a      	ldr	r2, [r3, #24]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f042 0210 	orr.w	r2, r2, #16
 800c4a0:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	699a      	ldr	r2, [r3, #24]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f042 0208 	orr.w	r2, r2, #8
 800c4b0:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2220      	movs	r2, #32
 800c4b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2220      	movs	r2, #32
 800c4be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3780      	adds	r7, #128	@ 0x80
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
	...

0800c4dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b0ba      	sub	sp, #232	@ 0xe8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c506:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c50a:	4013      	ands	r3, r2
 800c50c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c514:	2b00      	cmp	r3, #0
 800c516:	d11b      	bne.n	800c550 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c51c:	f003 0320 	and.w	r3, r3, #32
 800c520:	2b00      	cmp	r3, #0
 800c522:	d015      	beq.n	800c550 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c528:	f003 0320 	and.w	r3, r3, #32
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d105      	bne.n	800c53c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d009      	beq.n	800c550 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c540:	2b00      	cmp	r3, #0
 800c542:	f000 8300 	beq.w	800cb46 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	4798      	blx	r3
      }
      return;
 800c54e:	e2fa      	b.n	800cb46 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 8123 	beq.w	800c7a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c55a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c55e:	4b8d      	ldr	r3, [pc, #564]	@ (800c794 <HAL_UART_IRQHandler+0x2b8>)
 800c560:	4013      	ands	r3, r2
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c56a:	4b8b      	ldr	r3, [pc, #556]	@ (800c798 <HAL_UART_IRQHandler+0x2bc>)
 800c56c:	4013      	ands	r3, r2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 8116 	beq.w	800c7a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c578:	f003 0301 	and.w	r3, r3, #1
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d011      	beq.n	800c5a4 <HAL_UART_IRQHandler+0xc8>
 800c580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00b      	beq.n	800c5a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2201      	movs	r2, #1
 800c592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c59a:	f043 0201 	orr.w	r2, r3, #1
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5a8:	f003 0302 	and.w	r3, r3, #2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d011      	beq.n	800c5d4 <HAL_UART_IRQHandler+0xf8>
 800c5b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5ca:	f043 0204 	orr.w	r2, r3, #4
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d011      	beq.n	800c604 <HAL_UART_IRQHandler+0x128>
 800c5e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00b      	beq.n	800c604 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2204      	movs	r2, #4
 800c5f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5fa:	f043 0202 	orr.w	r2, r3, #2
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c608:	f003 0308 	and.w	r3, r3, #8
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d017      	beq.n	800c640 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c614:	f003 0320 	and.w	r3, r3, #32
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d105      	bne.n	800c628 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c61c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c620:	4b5c      	ldr	r3, [pc, #368]	@ (800c794 <HAL_UART_IRQHandler+0x2b8>)
 800c622:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00b      	beq.n	800c640 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2208      	movs	r2, #8
 800c62e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c636:	f043 0208 	orr.w	r2, r3, #8
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d012      	beq.n	800c672 <HAL_UART_IRQHandler+0x196>
 800c64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00c      	beq.n	800c672 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c668:	f043 0220 	orr.w	r2, r3, #32
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 8266 	beq.w	800cb4a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b00      	cmp	r3, #0
 800c688:	d013      	beq.n	800c6b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c68e:	f003 0320 	and.w	r3, r3, #32
 800c692:	2b00      	cmp	r3, #0
 800c694:	d105      	bne.n	800c6a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c69a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d007      	beq.n	800c6b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c6:	2b40      	cmp	r3, #64	@ 0x40
 800c6c8:	d005      	beq.n	800c6d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c6ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c6ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d054      	beq.n	800c780 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 f8fb 	bl	800d8d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6e6:	2b40      	cmp	r3, #64	@ 0x40
 800c6e8:	d146      	bne.n	800c778 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3308      	adds	r3, #8
 800c712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c716:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c71a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c72e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1d9      	bne.n	800c6ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d017      	beq.n	800c770 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c746:	4a15      	ldr	r2, [pc, #84]	@ (800c79c <HAL_UART_IRQHandler+0x2c0>)
 800c748:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c750:	4618      	mov	r0, r3
 800c752:	f7fa feff 	bl	8007554 <HAL_DMA_Abort_IT>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d019      	beq.n	800c790 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c76a:	4610      	mov	r0, r2
 800c76c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c76e:	e00f      	b.n	800c790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fa09 	bl	800cb88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c776:	e00b      	b.n	800c790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fa05 	bl	800cb88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c77e:	e007      	b.n	800c790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fa01 	bl	800cb88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c78e:	e1dc      	b.n	800cb4a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c790:	bf00      	nop
    return;
 800c792:	e1da      	b.n	800cb4a <HAL_UART_IRQHandler+0x66e>
 800c794:	10000001 	.word	0x10000001
 800c798:	04000120 	.word	0x04000120
 800c79c:	0800db89 	.word	0x0800db89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	f040 8170 	bne.w	800ca8a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ae:	f003 0310 	and.w	r3, r3, #16
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f000 8169 	beq.w	800ca8a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7bc:	f003 0310 	and.w	r3, r3, #16
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 8162 	beq.w	800ca8a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2210      	movs	r2, #16
 800c7cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d8:	2b40      	cmp	r3, #64	@ 0x40
 800c7da:	f040 80d8 	bne.w	800c98e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 80af 	beq.w	800c954 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c7fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c800:	429a      	cmp	r2, r3
 800c802:	f080 80a7 	bcs.w	800c954 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c80c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 0320 	and.w	r3, r3, #32
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f040 8087 	bne.w	800c932 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c830:	e853 3f00 	ldrex	r3, [r3]
 800c834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c838:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c83c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	461a      	mov	r2, r3
 800c84a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c84e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c852:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c856:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c85a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c85e:	e841 2300 	strex	r3, r2, [r1]
 800c862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1da      	bne.n	800c824 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3308      	adds	r3, #8
 800c874:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c878:	e853 3f00 	ldrex	r3, [r3]
 800c87c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c87e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c880:	f023 0301 	bic.w	r3, r3, #1
 800c884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	3308      	adds	r3, #8
 800c88e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c892:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c896:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c898:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c89a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c89e:	e841 2300 	strex	r3, r2, [r1]
 800c8a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1e1      	bne.n	800c86e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8b4:	e853 3f00 	ldrex	r3, [r3]
 800c8b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c8ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c8d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c8dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e3      	bne.n	800c8aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2220      	movs	r2, #32
 800c8e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8f8:	e853 3f00 	ldrex	r3, [r3]
 800c8fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c900:	f023 0310 	bic.w	r3, r3, #16
 800c904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	461a      	mov	r2, r3
 800c90e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c912:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c914:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c916:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c918:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c91a:	e841 2300 	strex	r3, r2, [r1]
 800c91e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1e4      	bne.n	800c8f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fa fdb8 	bl	80074a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2202      	movs	r2, #2
 800c936:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c944:	b29b      	uxth	r3, r3
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	b29b      	uxth	r3, r3
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f925 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c952:	e0fc      	b.n	800cb4e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c95a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c95e:	429a      	cmp	r2, r3
 800c960:	f040 80f5 	bne.w	800cb4e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 0320 	and.w	r3, r3, #32
 800c972:	2b20      	cmp	r3, #32
 800c974:	f040 80eb 	bne.w	800cb4e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2202      	movs	r2, #2
 800c97c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f908 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
      return;
 800c98c:	e0df      	b.n	800cb4e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	1ad3      	subs	r3, r2, r3
 800c99e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 80d1 	beq.w	800cb52 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800c9b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 80cc 	beq.w	800cb52 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c2:	e853 3f00 	ldrex	r3, [r3]
 800c9c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9e4:	e841 2300 	strex	r3, r2, [r1]
 800c9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e4      	bne.n	800c9ba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fa:	e853 3f00 	ldrex	r3, [r3]
 800c9fe:	623b      	str	r3, [r7, #32]
   return(result);
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca06:	f023 0301 	bic.w	r3, r3, #1
 800ca0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	3308      	adds	r3, #8
 800ca14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ca18:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca20:	e841 2300 	strex	r3, r2, [r1]
 800ca24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1e1      	bne.n	800c9f0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2220      	movs	r2, #32
 800ca30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	e853 3f00 	ldrex	r3, [r3]
 800ca4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f023 0310 	bic.w	r3, r3, #16
 800ca54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ca62:	61fb      	str	r3, [r7, #28]
 800ca64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca66:	69b9      	ldr	r1, [r7, #24]
 800ca68:	69fa      	ldr	r2, [r7, #28]
 800ca6a:	e841 2300 	strex	r3, r2, [r1]
 800ca6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1e4      	bne.n	800ca40 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2202      	movs	r2, #2
 800ca7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f88a 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca88:	e063      	b.n	800cb52 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00e      	beq.n	800cab4 <HAL_UART_IRQHandler+0x5d8>
 800ca96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d008      	beq.n	800cab4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800caaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f001 fdc9 	bl	800e644 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cab2:	e051      	b.n	800cb58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d014      	beq.n	800caea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d105      	bne.n	800cad8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d008      	beq.n	800caea <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d03a      	beq.n	800cb56 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	4798      	blx	r3
    }
    return;
 800cae8:	e035      	b.n	800cb56 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800caea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d009      	beq.n	800cb0a <HAL_UART_IRQHandler+0x62e>
 800caf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cafa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d003      	beq.n	800cb0a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f001 f852 	bl	800dbac <UART_EndTransmit_IT>
    return;
 800cb08:	e026      	b.n	800cb58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d009      	beq.n	800cb2a <HAL_UART_IRQHandler+0x64e>
 800cb16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f001 fda2 	bl	800e66c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb28:	e016      	b.n	800cb58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d010      	beq.n	800cb58 <HAL_UART_IRQHandler+0x67c>
 800cb36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	da0c      	bge.n	800cb58 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f001 fd8a 	bl	800e658 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb44:	e008      	b.n	800cb58 <HAL_UART_IRQHandler+0x67c>
      return;
 800cb46:	bf00      	nop
 800cb48:	e006      	b.n	800cb58 <HAL_UART_IRQHandler+0x67c>
    return;
 800cb4a:	bf00      	nop
 800cb4c:	e004      	b.n	800cb58 <HAL_UART_IRQHandler+0x67c>
      return;
 800cb4e:	bf00      	nop
 800cb50:	e002      	b.n	800cb58 <HAL_UART_IRQHandler+0x67c>
      return;
 800cb52:	bf00      	nop
 800cb54:	e000      	b.n	800cb58 <HAL_UART_IRQHandler+0x67c>
    return;
 800cb56:	bf00      	nop
  }
}
 800cb58:	37e8      	adds	r7, #232	@ 0xe8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop

0800cb60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cb7c:	bf00      	nop
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb90:	bf00      	nop
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	460b      	mov	r3, r1
 800cba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbb8:	b08c      	sub	sp, #48	@ 0x30
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	689a      	ldr	r2, [r3, #8]
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	69db      	ldr	r3, [r3, #28]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	4bab      	ldr	r3, [pc, #684]	@ (800ce90 <UART_SetConfig+0x2dc>)
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	6812      	ldr	r2, [r2, #0]
 800cbea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbec:	430b      	orrs	r3, r1
 800cbee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	430a      	orrs	r2, r1
 800cc04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4aa0      	ldr	r2, [pc, #640]	@ (800ce94 <UART_SetConfig+0x2e0>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d004      	beq.n	800cc20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cc2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	6812      	ldr	r2, [r2, #0]
 800cc32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc34:	430b      	orrs	r3, r1
 800cc36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc3e:	f023 010f 	bic.w	r1, r3, #15
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a91      	ldr	r2, [pc, #580]	@ (800ce98 <UART_SetConfig+0x2e4>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d125      	bne.n	800cca4 <UART_SetConfig+0xf0>
 800cc58:	4b90      	ldr	r3, [pc, #576]	@ (800ce9c <UART_SetConfig+0x2e8>)
 800cc5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc5e:	f003 0303 	and.w	r3, r3, #3
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d81a      	bhi.n	800cc9c <UART_SetConfig+0xe8>
 800cc66:	a201      	add	r2, pc, #4	@ (adr r2, 800cc6c <UART_SetConfig+0xb8>)
 800cc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6c:	0800cc7d 	.word	0x0800cc7d
 800cc70:	0800cc8d 	.word	0x0800cc8d
 800cc74:	0800cc85 	.word	0x0800cc85
 800cc78:	0800cc95 	.word	0x0800cc95
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc82:	e0d6      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cc84:	2302      	movs	r3, #2
 800cc86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc8a:	e0d2      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cc8c:	2304      	movs	r3, #4
 800cc8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc92:	e0ce      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cc94:	2308      	movs	r3, #8
 800cc96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc9a:	e0ca      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cc9c:	2310      	movs	r3, #16
 800cc9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cca2:	e0c6      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a7d      	ldr	r2, [pc, #500]	@ (800cea0 <UART_SetConfig+0x2ec>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d138      	bne.n	800cd20 <UART_SetConfig+0x16c>
 800ccae:	4b7b      	ldr	r3, [pc, #492]	@ (800ce9c <UART_SetConfig+0x2e8>)
 800ccb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccb4:	f003 030c 	and.w	r3, r3, #12
 800ccb8:	2b0c      	cmp	r3, #12
 800ccba:	d82d      	bhi.n	800cd18 <UART_SetConfig+0x164>
 800ccbc:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc4 <UART_SetConfig+0x110>)
 800ccbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc2:	bf00      	nop
 800ccc4:	0800ccf9 	.word	0x0800ccf9
 800ccc8:	0800cd19 	.word	0x0800cd19
 800cccc:	0800cd19 	.word	0x0800cd19
 800ccd0:	0800cd19 	.word	0x0800cd19
 800ccd4:	0800cd09 	.word	0x0800cd09
 800ccd8:	0800cd19 	.word	0x0800cd19
 800ccdc:	0800cd19 	.word	0x0800cd19
 800cce0:	0800cd19 	.word	0x0800cd19
 800cce4:	0800cd01 	.word	0x0800cd01
 800cce8:	0800cd19 	.word	0x0800cd19
 800ccec:	0800cd19 	.word	0x0800cd19
 800ccf0:	0800cd19 	.word	0x0800cd19
 800ccf4:	0800cd11 	.word	0x0800cd11
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccfe:	e098      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd00:	2302      	movs	r3, #2
 800cd02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd06:	e094      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd08:	2304      	movs	r3, #4
 800cd0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd0e:	e090      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd10:	2308      	movs	r3, #8
 800cd12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd16:	e08c      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd18:	2310      	movs	r3, #16
 800cd1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd1e:	e088      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a5f      	ldr	r2, [pc, #380]	@ (800cea4 <UART_SetConfig+0x2f0>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d125      	bne.n	800cd76 <UART_SetConfig+0x1c2>
 800cd2a:	4b5c      	ldr	r3, [pc, #368]	@ (800ce9c <UART_SetConfig+0x2e8>)
 800cd2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cd34:	2b30      	cmp	r3, #48	@ 0x30
 800cd36:	d016      	beq.n	800cd66 <UART_SetConfig+0x1b2>
 800cd38:	2b30      	cmp	r3, #48	@ 0x30
 800cd3a:	d818      	bhi.n	800cd6e <UART_SetConfig+0x1ba>
 800cd3c:	2b20      	cmp	r3, #32
 800cd3e:	d00a      	beq.n	800cd56 <UART_SetConfig+0x1a2>
 800cd40:	2b20      	cmp	r3, #32
 800cd42:	d814      	bhi.n	800cd6e <UART_SetConfig+0x1ba>
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <UART_SetConfig+0x19a>
 800cd48:	2b10      	cmp	r3, #16
 800cd4a:	d008      	beq.n	800cd5e <UART_SetConfig+0x1aa>
 800cd4c:	e00f      	b.n	800cd6e <UART_SetConfig+0x1ba>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd54:	e06d      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd56:	2302      	movs	r3, #2
 800cd58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd5c:	e069      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd5e:	2304      	movs	r3, #4
 800cd60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd64:	e065      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd66:	2308      	movs	r3, #8
 800cd68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd6c:	e061      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd6e:	2310      	movs	r3, #16
 800cd70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd74:	e05d      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a4b      	ldr	r2, [pc, #300]	@ (800cea8 <UART_SetConfig+0x2f4>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d125      	bne.n	800cdcc <UART_SetConfig+0x218>
 800cd80:	4b46      	ldr	r3, [pc, #280]	@ (800ce9c <UART_SetConfig+0x2e8>)
 800cd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cd8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd8c:	d016      	beq.n	800cdbc <UART_SetConfig+0x208>
 800cd8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd90:	d818      	bhi.n	800cdc4 <UART_SetConfig+0x210>
 800cd92:	2b80      	cmp	r3, #128	@ 0x80
 800cd94:	d00a      	beq.n	800cdac <UART_SetConfig+0x1f8>
 800cd96:	2b80      	cmp	r3, #128	@ 0x80
 800cd98:	d814      	bhi.n	800cdc4 <UART_SetConfig+0x210>
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d002      	beq.n	800cda4 <UART_SetConfig+0x1f0>
 800cd9e:	2b40      	cmp	r3, #64	@ 0x40
 800cda0:	d008      	beq.n	800cdb4 <UART_SetConfig+0x200>
 800cda2:	e00f      	b.n	800cdc4 <UART_SetConfig+0x210>
 800cda4:	2300      	movs	r3, #0
 800cda6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdaa:	e042      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cdac:	2302      	movs	r3, #2
 800cdae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdb2:	e03e      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cdb4:	2304      	movs	r3, #4
 800cdb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdba:	e03a      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cdbc:	2308      	movs	r3, #8
 800cdbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdc2:	e036      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cdc4:	2310      	movs	r3, #16
 800cdc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdca:	e032      	b.n	800ce32 <UART_SetConfig+0x27e>
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a30      	ldr	r2, [pc, #192]	@ (800ce94 <UART_SetConfig+0x2e0>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d12a      	bne.n	800ce2c <UART_SetConfig+0x278>
 800cdd6:	4b31      	ldr	r3, [pc, #196]	@ (800ce9c <UART_SetConfig+0x2e8>)
 800cdd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cddc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cde0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cde4:	d01a      	beq.n	800ce1c <UART_SetConfig+0x268>
 800cde6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cdea:	d81b      	bhi.n	800ce24 <UART_SetConfig+0x270>
 800cdec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdf0:	d00c      	beq.n	800ce0c <UART_SetConfig+0x258>
 800cdf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdf6:	d815      	bhi.n	800ce24 <UART_SetConfig+0x270>
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d003      	beq.n	800ce04 <UART_SetConfig+0x250>
 800cdfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce00:	d008      	beq.n	800ce14 <UART_SetConfig+0x260>
 800ce02:	e00f      	b.n	800ce24 <UART_SetConfig+0x270>
 800ce04:	2300      	movs	r3, #0
 800ce06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce0a:	e012      	b.n	800ce32 <UART_SetConfig+0x27e>
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce12:	e00e      	b.n	800ce32 <UART_SetConfig+0x27e>
 800ce14:	2304      	movs	r3, #4
 800ce16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce1a:	e00a      	b.n	800ce32 <UART_SetConfig+0x27e>
 800ce1c:	2308      	movs	r3, #8
 800ce1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce22:	e006      	b.n	800ce32 <UART_SetConfig+0x27e>
 800ce24:	2310      	movs	r3, #16
 800ce26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce2a:	e002      	b.n	800ce32 <UART_SetConfig+0x27e>
 800ce2c:	2310      	movs	r3, #16
 800ce2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a17      	ldr	r2, [pc, #92]	@ (800ce94 <UART_SetConfig+0x2e0>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	f040 80a8 	bne.w	800cf8e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ce42:	2b08      	cmp	r3, #8
 800ce44:	d834      	bhi.n	800ceb0 <UART_SetConfig+0x2fc>
 800ce46:	a201      	add	r2, pc, #4	@ (adr r2, 800ce4c <UART_SetConfig+0x298>)
 800ce48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4c:	0800ce71 	.word	0x0800ce71
 800ce50:	0800ceb1 	.word	0x0800ceb1
 800ce54:	0800ce79 	.word	0x0800ce79
 800ce58:	0800ceb1 	.word	0x0800ceb1
 800ce5c:	0800ce7f 	.word	0x0800ce7f
 800ce60:	0800ceb1 	.word	0x0800ceb1
 800ce64:	0800ceb1 	.word	0x0800ceb1
 800ce68:	0800ceb1 	.word	0x0800ceb1
 800ce6c:	0800ce87 	.word	0x0800ce87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce70:	f7fc faa8 	bl	80093c4 <HAL_RCC_GetPCLK1Freq>
 800ce74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ce76:	e021      	b.n	800cebc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce78:	4b0c      	ldr	r3, [pc, #48]	@ (800ceac <UART_SetConfig+0x2f8>)
 800ce7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ce7c:	e01e      	b.n	800cebc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce7e:	f7fc fa35 	bl	80092ec <HAL_RCC_GetSysClockFreq>
 800ce82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ce84:	e01a      	b.n	800cebc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ce8c:	e016      	b.n	800cebc <UART_SetConfig+0x308>
 800ce8e:	bf00      	nop
 800ce90:	cfff69f3 	.word	0xcfff69f3
 800ce94:	40008000 	.word	0x40008000
 800ce98:	40013800 	.word	0x40013800
 800ce9c:	40021000 	.word	0x40021000
 800cea0:	40004400 	.word	0x40004400
 800cea4:	40004800 	.word	0x40004800
 800cea8:	40004c00 	.word	0x40004c00
 800ceac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ceba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 812a 	beq.w	800d118 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec8:	4a9e      	ldr	r2, [pc, #632]	@ (800d144 <UART_SetConfig+0x590>)
 800ceca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cece:	461a      	mov	r2, r3
 800ced0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ced6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	685a      	ldr	r2, [r3, #4]
 800cedc:	4613      	mov	r3, r2
 800cede:	005b      	lsls	r3, r3, #1
 800cee0:	4413      	add	r3, r2
 800cee2:	69ba      	ldr	r2, [r7, #24]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d305      	bcc.n	800cef4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d903      	bls.n	800cefc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cefa:	e10d      	b.n	800d118 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefe:	2200      	movs	r2, #0
 800cf00:	60bb      	str	r3, [r7, #8]
 800cf02:	60fa      	str	r2, [r7, #12]
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf08:	4a8e      	ldr	r2, [pc, #568]	@ (800d144 <UART_SetConfig+0x590>)
 800cf0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	2200      	movs	r2, #0
 800cf12:	603b      	str	r3, [r7, #0]
 800cf14:	607a      	str	r2, [r7, #4]
 800cf16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf1e:	f7f3 fedb 	bl	8000cd8 <__aeabi_uldivmod>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4610      	mov	r0, r2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f04f 0200 	mov.w	r2, #0
 800cf2e:	f04f 0300 	mov.w	r3, #0
 800cf32:	020b      	lsls	r3, r1, #8
 800cf34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf38:	0202      	lsls	r2, r0, #8
 800cf3a:	6979      	ldr	r1, [r7, #20]
 800cf3c:	6849      	ldr	r1, [r1, #4]
 800cf3e:	0849      	lsrs	r1, r1, #1
 800cf40:	2000      	movs	r0, #0
 800cf42:	460c      	mov	r4, r1
 800cf44:	4605      	mov	r5, r0
 800cf46:	eb12 0804 	adds.w	r8, r2, r4
 800cf4a:	eb43 0905 	adc.w	r9, r3, r5
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	469a      	mov	sl, r3
 800cf56:	4693      	mov	fp, r2
 800cf58:	4652      	mov	r2, sl
 800cf5a:	465b      	mov	r3, fp
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	4649      	mov	r1, r9
 800cf60:	f7f3 feba 	bl	8000cd8 <__aeabi_uldivmod>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	4613      	mov	r3, r2
 800cf6a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf72:	d308      	bcc.n	800cf86 <UART_SetConfig+0x3d2>
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf7a:	d204      	bcs.n	800cf86 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6a3a      	ldr	r2, [r7, #32]
 800cf82:	60da      	str	r2, [r3, #12]
 800cf84:	e0c8      	b.n	800d118 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cf8c:	e0c4      	b.n	800d118 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	69db      	ldr	r3, [r3, #28]
 800cf92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf96:	d167      	bne.n	800d068 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800cf98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf9c:	2b08      	cmp	r3, #8
 800cf9e:	d828      	bhi.n	800cff2 <UART_SetConfig+0x43e>
 800cfa0:	a201      	add	r2, pc, #4	@ (adr r2, 800cfa8 <UART_SetConfig+0x3f4>)
 800cfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa6:	bf00      	nop
 800cfa8:	0800cfcd 	.word	0x0800cfcd
 800cfac:	0800cfd5 	.word	0x0800cfd5
 800cfb0:	0800cfdd 	.word	0x0800cfdd
 800cfb4:	0800cff3 	.word	0x0800cff3
 800cfb8:	0800cfe3 	.word	0x0800cfe3
 800cfbc:	0800cff3 	.word	0x0800cff3
 800cfc0:	0800cff3 	.word	0x0800cff3
 800cfc4:	0800cff3 	.word	0x0800cff3
 800cfc8:	0800cfeb 	.word	0x0800cfeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfcc:	f7fc f9fa 	bl	80093c4 <HAL_RCC_GetPCLK1Freq>
 800cfd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cfd2:	e014      	b.n	800cffe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfd4:	f7fc fa0c 	bl	80093f0 <HAL_RCC_GetPCLK2Freq>
 800cfd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cfda:	e010      	b.n	800cffe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfdc:	4b5a      	ldr	r3, [pc, #360]	@ (800d148 <UART_SetConfig+0x594>)
 800cfde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cfe0:	e00d      	b.n	800cffe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfe2:	f7fc f983 	bl	80092ec <HAL_RCC_GetSysClockFreq>
 800cfe6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cfe8:	e009      	b.n	800cffe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cff0:	e005      	b.n	800cffe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800cff2:	2300      	movs	r3, #0
 800cff4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d000:	2b00      	cmp	r3, #0
 800d002:	f000 8089 	beq.w	800d118 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d00a:	4a4e      	ldr	r2, [pc, #312]	@ (800d144 <UART_SetConfig+0x590>)
 800d00c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d010:	461a      	mov	r2, r3
 800d012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d014:	fbb3 f3f2 	udiv	r3, r3, r2
 800d018:	005a      	lsls	r2, r3, #1
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	085b      	lsrs	r3, r3, #1
 800d020:	441a      	add	r2, r3
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	fbb2 f3f3 	udiv	r3, r2, r3
 800d02a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d02c:	6a3b      	ldr	r3, [r7, #32]
 800d02e:	2b0f      	cmp	r3, #15
 800d030:	d916      	bls.n	800d060 <UART_SetConfig+0x4ac>
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d038:	d212      	bcs.n	800d060 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d03a:	6a3b      	ldr	r3, [r7, #32]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	f023 030f 	bic.w	r3, r3, #15
 800d042:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	085b      	lsrs	r3, r3, #1
 800d048:	b29b      	uxth	r3, r3
 800d04a:	f003 0307 	and.w	r3, r3, #7
 800d04e:	b29a      	uxth	r2, r3
 800d050:	8bfb      	ldrh	r3, [r7, #30]
 800d052:	4313      	orrs	r3, r2
 800d054:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	8bfa      	ldrh	r2, [r7, #30]
 800d05c:	60da      	str	r2, [r3, #12]
 800d05e:	e05b      	b.n	800d118 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d060:	2301      	movs	r3, #1
 800d062:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d066:	e057      	b.n	800d118 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d068:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d06c:	2b08      	cmp	r3, #8
 800d06e:	d828      	bhi.n	800d0c2 <UART_SetConfig+0x50e>
 800d070:	a201      	add	r2, pc, #4	@ (adr r2, 800d078 <UART_SetConfig+0x4c4>)
 800d072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d076:	bf00      	nop
 800d078:	0800d09d 	.word	0x0800d09d
 800d07c:	0800d0a5 	.word	0x0800d0a5
 800d080:	0800d0ad 	.word	0x0800d0ad
 800d084:	0800d0c3 	.word	0x0800d0c3
 800d088:	0800d0b3 	.word	0x0800d0b3
 800d08c:	0800d0c3 	.word	0x0800d0c3
 800d090:	0800d0c3 	.word	0x0800d0c3
 800d094:	0800d0c3 	.word	0x0800d0c3
 800d098:	0800d0bb 	.word	0x0800d0bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d09c:	f7fc f992 	bl	80093c4 <HAL_RCC_GetPCLK1Freq>
 800d0a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0a2:	e014      	b.n	800d0ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0a4:	f7fc f9a4 	bl	80093f0 <HAL_RCC_GetPCLK2Freq>
 800d0a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0aa:	e010      	b.n	800d0ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0ac:	4b26      	ldr	r3, [pc, #152]	@ (800d148 <UART_SetConfig+0x594>)
 800d0ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0b0:	e00d      	b.n	800d0ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0b2:	f7fc f91b 	bl	80092ec <HAL_RCC_GetSysClockFreq>
 800d0b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0b8:	e009      	b.n	800d0ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0c0:	e005      	b.n	800d0ce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d0cc:	bf00      	nop
    }

    if (pclk != 0U)
 800d0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d021      	beq.n	800d118 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d8:	4a1a      	ldr	r2, [pc, #104]	@ (800d144 <UART_SetConfig+0x590>)
 800d0da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	085b      	lsrs	r3, r3, #1
 800d0ec:	441a      	add	r2, r3
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	2b0f      	cmp	r3, #15
 800d0fc:	d909      	bls.n	800d112 <UART_SetConfig+0x55e>
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d104:	d205      	bcs.n	800d112 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	b29a      	uxth	r2, r3
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	60da      	str	r2, [r3, #12]
 800d110:	e002      	b.n	800d118 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2201      	movs	r2, #1
 800d124:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2200      	movs	r2, #0
 800d12c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2200      	movs	r2, #0
 800d132:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d134:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3730      	adds	r7, #48	@ 0x30
 800d13c:	46bd      	mov	sp, r7
 800d13e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d142:	bf00      	nop
 800d144:	0801bac0 	.word	0x0801bac0
 800d148:	00f42400 	.word	0x00f42400

0800d14c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d158:	f003 0308 	and.w	r3, r3, #8
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00a      	beq.n	800d176 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	430a      	orrs	r2, r1
 800d174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00a      	beq.n	800d198 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	430a      	orrs	r2, r1
 800d196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00a      	beq.n	800d1ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	430a      	orrs	r2, r1
 800d1b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1be:	f003 0304 	and.w	r3, r3, #4
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00a      	beq.n	800d1dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	430a      	orrs	r2, r1
 800d1da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1e0:	f003 0310 	and.w	r3, r3, #16
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00a      	beq.n	800d1fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d202:	f003 0320 	and.w	r3, r3, #32
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00a      	beq.n	800d220 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	430a      	orrs	r2, r1
 800d21e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d01a      	beq.n	800d262 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	430a      	orrs	r2, r1
 800d240:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d24a:	d10a      	bne.n	800d262 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	430a      	orrs	r2, r1
 800d260:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00a      	beq.n	800d284 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	430a      	orrs	r2, r1
 800d282:	605a      	str	r2, [r3, #4]
  }
}
 800d284:	bf00      	nop
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b098      	sub	sp, #96	@ 0x60
 800d294:	af02      	add	r7, sp, #8
 800d296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d2a0:	f7f8 fa18 	bl	80056d4 <HAL_GetTick>
 800d2a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f003 0308 	and.w	r3, r3, #8
 800d2b0:	2b08      	cmp	r3, #8
 800d2b2:	d12f      	bne.n	800d314 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 f88e 	bl	800d3e4 <UART_WaitOnFlagUntilTimeout>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d022      	beq.n	800d314 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d6:	e853 3f00 	ldrex	r3, [r3]
 800d2da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d2f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2f4:	e841 2300 	strex	r3, r2, [r1]
 800d2f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1e6      	bne.n	800d2ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2220      	movs	r2, #32
 800d304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d310:	2303      	movs	r3, #3
 800d312:	e063      	b.n	800d3dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f003 0304 	and.w	r3, r3, #4
 800d31e:	2b04      	cmp	r3, #4
 800d320:	d149      	bne.n	800d3b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d322:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d32a:	2200      	movs	r2, #0
 800d32c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f857 	bl	800d3e4 <UART_WaitOnFlagUntilTimeout>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d03c      	beq.n	800d3b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d344:	e853 3f00 	ldrex	r3, [r3]
 800d348:	623b      	str	r3, [r7, #32]
   return(result);
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	461a      	mov	r2, r3
 800d358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d35a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d35c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d362:	e841 2300 	strex	r3, r2, [r1]
 800d366:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1e6      	bne.n	800d33c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3308      	adds	r3, #8
 800d374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	e853 3f00 	ldrex	r3, [r3]
 800d37c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f023 0301 	bic.w	r3, r3, #1
 800d384:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	3308      	adds	r3, #8
 800d38c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d38e:	61fa      	str	r2, [r7, #28]
 800d390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d392:	69b9      	ldr	r1, [r7, #24]
 800d394:	69fa      	ldr	r2, [r7, #28]
 800d396:	e841 2300 	strex	r3, r2, [r1]
 800d39a:	617b      	str	r3, [r7, #20]
   return(result);
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1e5      	bne.n	800d36e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2220      	movs	r2, #32
 800d3a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3b2:	2303      	movs	r3, #3
 800d3b4:	e012      	b.n	800d3dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2220      	movs	r2, #32
 800d3ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2220      	movs	r2, #32
 800d3c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3758      	adds	r7, #88	@ 0x58
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	603b      	str	r3, [r7, #0]
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3f4:	e04f      	b.n	800d496 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fc:	d04b      	beq.n	800d496 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3fe:	f7f8 f969 	bl	80056d4 <HAL_GetTick>
 800d402:	4602      	mov	r2, r0
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d302      	bcc.n	800d414 <UART_WaitOnFlagUntilTimeout+0x30>
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d101      	bne.n	800d418 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d414:	2303      	movs	r3, #3
 800d416:	e04e      	b.n	800d4b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f003 0304 	and.w	r3, r3, #4
 800d422:	2b00      	cmp	r3, #0
 800d424:	d037      	beq.n	800d496 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	2b80      	cmp	r3, #128	@ 0x80
 800d42a:	d034      	beq.n	800d496 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	2b40      	cmp	r3, #64	@ 0x40
 800d430:	d031      	beq.n	800d496 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	69db      	ldr	r3, [r3, #28]
 800d438:	f003 0308 	and.w	r3, r3, #8
 800d43c:	2b08      	cmp	r3, #8
 800d43e:	d110      	bne.n	800d462 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2208      	movs	r2, #8
 800d446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f000 fa42 	bl	800d8d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2208      	movs	r2, #8
 800d452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	e029      	b.n	800d4b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	69db      	ldr	r3, [r3, #28]
 800d468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d46c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d470:	d111      	bne.n	800d496 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d47a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f000 fa28 	bl	800d8d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2220      	movs	r2, #32
 800d486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2200      	movs	r2, #0
 800d48e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d492:	2303      	movs	r3, #3
 800d494:	e00f      	b.n	800d4b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	69da      	ldr	r2, [r3, #28]
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	4013      	ands	r3, r2
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	bf0c      	ite	eq
 800d4a6:	2301      	moveq	r3, #1
 800d4a8:	2300      	movne	r3, #0
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	79fb      	ldrb	r3, [r7, #7]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d0a0      	beq.n	800d3f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
	...

0800d4c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b0a3      	sub	sp, #140	@ 0x8c
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	68ba      	ldr	r2, [r7, #8]
 800d4d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	88fa      	ldrh	r2, [r7, #6]
 800d4d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	88fa      	ldrh	r2, [r7, #6]
 800d4e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4f2:	d10e      	bne.n	800d512 <UART_Start_Receive_IT+0x52>
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d105      	bne.n	800d508 <UART_Start_Receive_IT+0x48>
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d502:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d506:	e02d      	b.n	800d564 <UART_Start_Receive_IT+0xa4>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	22ff      	movs	r2, #255	@ 0xff
 800d50c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d510:	e028      	b.n	800d564 <UART_Start_Receive_IT+0xa4>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10d      	bne.n	800d536 <UART_Start_Receive_IT+0x76>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d104      	bne.n	800d52c <UART_Start_Receive_IT+0x6c>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	22ff      	movs	r2, #255	@ 0xff
 800d526:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d52a:	e01b      	b.n	800d564 <UART_Start_Receive_IT+0xa4>
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	227f      	movs	r2, #127	@ 0x7f
 800d530:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d534:	e016      	b.n	800d564 <UART_Start_Receive_IT+0xa4>
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d53e:	d10d      	bne.n	800d55c <UART_Start_Receive_IT+0x9c>
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d104      	bne.n	800d552 <UART_Start_Receive_IT+0x92>
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	227f      	movs	r2, #127	@ 0x7f
 800d54c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d550:	e008      	b.n	800d564 <UART_Start_Receive_IT+0xa4>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	223f      	movs	r2, #63	@ 0x3f
 800d556:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d55a:	e003      	b.n	800d564 <UART_Start_Receive_IT+0xa4>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2222      	movs	r2, #34	@ 0x22
 800d570:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3308      	adds	r3, #8
 800d57a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d57e:	e853 3f00 	ldrex	r3, [r3]
 800d582:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d584:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d586:	f043 0301 	orr.w	r3, r3, #1
 800d58a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	3308      	adds	r3, #8
 800d594:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d598:	673a      	str	r2, [r7, #112]	@ 0x70
 800d59a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d59e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d5a0:	e841 2300 	strex	r3, r2, [r1]
 800d5a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d5a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1e3      	bne.n	800d574 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d5b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5b4:	d14f      	bne.n	800d656 <UART_Start_Receive_IT+0x196>
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d5bc:	88fa      	ldrh	r2, [r7, #6]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d349      	bcc.n	800d656 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5ca:	d107      	bne.n	800d5dc <UART_Start_Receive_IT+0x11c>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d103      	bne.n	800d5dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4a47      	ldr	r2, [pc, #284]	@ (800d6f4 <UART_Start_Receive_IT+0x234>)
 800d5d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800d5da:	e002      	b.n	800d5e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	4a46      	ldr	r2, [pc, #280]	@ (800d6f8 <UART_Start_Receive_IT+0x238>)
 800d5e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	691b      	ldr	r3, [r3, #16]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01a      	beq.n	800d620 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5f2:	e853 3f00 	ldrex	r3, [r3]
 800d5f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d5f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	461a      	mov	r2, r3
 800d608:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d60c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d60e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d610:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d612:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d614:	e841 2300 	strex	r3, r2, [r1]
 800d618:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d61a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1e4      	bne.n	800d5ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3308      	adds	r3, #8
 800d626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d62a:	e853 3f00 	ldrex	r3, [r3]
 800d62e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d636:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3308      	adds	r3, #8
 800d63e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d640:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d642:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d644:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d648:	e841 2300 	strex	r3, r2, [r1]
 800d64c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d64e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e5      	bne.n	800d620 <UART_Start_Receive_IT+0x160>
 800d654:	e046      	b.n	800d6e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d65e:	d107      	bne.n	800d670 <UART_Start_Receive_IT+0x1b0>
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d103      	bne.n	800d670 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	4a24      	ldr	r2, [pc, #144]	@ (800d6fc <UART_Start_Receive_IT+0x23c>)
 800d66c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d66e:	e002      	b.n	800d676 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	4a23      	ldr	r2, [pc, #140]	@ (800d700 <UART_Start_Receive_IT+0x240>)
 800d674:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d019      	beq.n	800d6b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d686:	e853 3f00 	ldrex	r3, [r3]
 800d68a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d692:	677b      	str	r3, [r7, #116]	@ 0x74
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	461a      	mov	r2, r3
 800d69a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d69e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d6a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6a4:	e841 2300 	strex	r3, r2, [r1]
 800d6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1e6      	bne.n	800d67e <UART_Start_Receive_IT+0x1be>
 800d6b0:	e018      	b.n	800d6e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	e853 3f00 	ldrex	r3, [r3]
 800d6be:	613b      	str	r3, [r7, #16]
   return(result);
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	f043 0320 	orr.w	r3, r3, #32
 800d6c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6d0:	623b      	str	r3, [r7, #32]
 800d6d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d4:	69f9      	ldr	r1, [r7, #28]
 800d6d6:	6a3a      	ldr	r2, [r7, #32]
 800d6d8:	e841 2300 	strex	r3, r2, [r1]
 800d6dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1e6      	bne.n	800d6b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	378c      	adds	r7, #140	@ 0x8c
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	0800e2d9 	.word	0x0800e2d9
 800d6f8:	0800df75 	.word	0x0800df75
 800d6fc:	0800ddbd 	.word	0x0800ddbd
 800d700:	0800dc05 	.word	0x0800dc05

0800d704 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b096      	sub	sp, #88	@ 0x58
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	4613      	mov	r3, r2
 800d710:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	88fa      	ldrh	r2, [r7, #6]
 800d71c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2222      	movs	r2, #34	@ 0x22
 800d72c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d736:	2b00      	cmp	r3, #0
 800d738:	d02d      	beq.n	800d796 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d740:	4a40      	ldr	r2, [pc, #256]	@ (800d844 <UART_Start_Receive_DMA+0x140>)
 800d742:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d74a:	4a3f      	ldr	r2, [pc, #252]	@ (800d848 <UART_Start_Receive_DMA+0x144>)
 800d74c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d754:	4a3d      	ldr	r2, [pc, #244]	@ (800d84c <UART_Start_Receive_DMA+0x148>)
 800d756:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d75e:	2200      	movs	r2, #0
 800d760:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3324      	adds	r3, #36	@ 0x24
 800d76e:	4619      	mov	r1, r3
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d774:	461a      	mov	r2, r3
 800d776:	88fb      	ldrh	r3, [r7, #6]
 800d778:	f7f9 fe18 	bl	80073ac <HAL_DMA_Start_IT>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d009      	beq.n	800d796 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2210      	movs	r2, #16
 800d786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2220      	movs	r2, #32
 800d78e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	e051      	b.n	800d83a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d018      	beq.n	800d7d0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7a6:	e853 3f00 	ldrex	r3, [r3]
 800d7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7be:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7c4:	e841 2300 	strex	r3, r2, [r1]
 800d7c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1e6      	bne.n	800d79e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7da:	e853 3f00 	ldrex	r3, [r3]
 800d7de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e2:	f043 0301 	orr.w	r3, r3, #1
 800d7e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3308      	adds	r3, #8
 800d7ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d7f0:	637a      	str	r2, [r7, #52]	@ 0x34
 800d7f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d7f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7f8:	e841 2300 	strex	r3, r2, [r1]
 800d7fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1e5      	bne.n	800d7d0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	3308      	adds	r3, #8
 800d80a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	e853 3f00 	ldrex	r3, [r3]
 800d812:	613b      	str	r3, [r7, #16]
   return(result);
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3308      	adds	r3, #8
 800d822:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d824:	623a      	str	r2, [r7, #32]
 800d826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d828:	69f9      	ldr	r1, [r7, #28]
 800d82a:	6a3a      	ldr	r2, [r7, #32]
 800d82c:	e841 2300 	strex	r3, r2, [r1]
 800d830:	61bb      	str	r3, [r7, #24]
   return(result);
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1e5      	bne.n	800d804 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3758      	adds	r7, #88	@ 0x58
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	0800d99f 	.word	0x0800d99f
 800d848:	0800dacb 	.word	0x0800dacb
 800d84c:	0800db09 	.word	0x0800db09

0800d850 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d850:	b480      	push	{r7}
 800d852:	b08f      	sub	sp, #60	@ 0x3c
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	e853 3f00 	ldrex	r3, [r3]
 800d864:	61fb      	str	r3, [r7, #28]
   return(result);
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d86c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d878:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d87c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d87e:	e841 2300 	strex	r3, r2, [r1]
 800d882:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1e6      	bne.n	800d858 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3308      	adds	r3, #8
 800d890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	e853 3f00 	ldrex	r3, [r3]
 800d898:	60bb      	str	r3, [r7, #8]
   return(result);
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d8a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8aa:	61ba      	str	r2, [r7, #24]
 800d8ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ae:	6979      	ldr	r1, [r7, #20]
 800d8b0:	69ba      	ldr	r2, [r7, #24]
 800d8b2:	e841 2300 	strex	r3, r2, [r1]
 800d8b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1e5      	bne.n	800d88a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2220      	movs	r2, #32
 800d8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d8c6:	bf00      	nop
 800d8c8:	373c      	adds	r7, #60	@ 0x3c
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b095      	sub	sp, #84	@ 0x54
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8e2:	e853 3f00 	ldrex	r3, [r3]
 800d8e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d8fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d900:	e841 2300 	strex	r3, r2, [r1]
 800d904:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1e6      	bne.n	800d8da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	3308      	adds	r3, #8
 800d912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d914:	6a3b      	ldr	r3, [r7, #32]
 800d916:	e853 3f00 	ldrex	r3, [r3]
 800d91a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d922:	f023 0301 	bic.w	r3, r3, #1
 800d926:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	3308      	adds	r3, #8
 800d92e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d932:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d938:	e841 2300 	strex	r3, r2, [r1]
 800d93c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1e3      	bne.n	800d90c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d118      	bne.n	800d97e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	e853 3f00 	ldrex	r3, [r3]
 800d958:	60bb      	str	r3, [r7, #8]
   return(result);
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	f023 0310 	bic.w	r3, r3, #16
 800d960:	647b      	str	r3, [r7, #68]	@ 0x44
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	461a      	mov	r2, r3
 800d968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d96a:	61bb      	str	r3, [r7, #24]
 800d96c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96e:	6979      	ldr	r1, [r7, #20]
 800d970:	69ba      	ldr	r2, [r7, #24]
 800d972:	e841 2300 	strex	r3, r2, [r1]
 800d976:	613b      	str	r3, [r7, #16]
   return(result);
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1e6      	bne.n	800d94c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2220      	movs	r2, #32
 800d982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d992:	bf00      	nop
 800d994:	3754      	adds	r7, #84	@ 0x54
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b09c      	sub	sp, #112	@ 0x70
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f003 0320 	and.w	r3, r3, #32
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d171      	bne.n	800da9e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d9ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9ca:	e853 3f00 	ldrex	r3, [r3]
 800d9ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d9d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	461a      	mov	r2, r3
 800d9de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d9e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d9e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9e8:	e841 2300 	strex	r3, r2, [r1]
 800d9ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d9ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1e6      	bne.n	800d9c2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	3308      	adds	r3, #8
 800d9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9fe:	e853 3f00 	ldrex	r3, [r3]
 800da02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da06:	f023 0301 	bic.w	r3, r3, #1
 800da0a:	667b      	str	r3, [r7, #100]	@ 0x64
 800da0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3308      	adds	r3, #8
 800da12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800da14:	647a      	str	r2, [r7, #68]	@ 0x44
 800da16:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da1c:	e841 2300 	strex	r3, r2, [r1]
 800da20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1e5      	bne.n	800d9f4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3308      	adds	r3, #8
 800da2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da32:	e853 3f00 	ldrex	r3, [r3]
 800da36:	623b      	str	r3, [r7, #32]
   return(result);
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da3e:	663b      	str	r3, [r7, #96]	@ 0x60
 800da40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3308      	adds	r3, #8
 800da46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800da48:	633a      	str	r2, [r7, #48]	@ 0x30
 800da4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da50:	e841 2300 	strex	r3, r2, [r1]
 800da54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e5      	bne.n	800da28 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da5e:	2220      	movs	r2, #32
 800da60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d118      	bne.n	800da9e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	e853 3f00 	ldrex	r3, [r3]
 800da78:	60fb      	str	r3, [r7, #12]
   return(result);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f023 0310 	bic.w	r3, r3, #16
 800da80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	461a      	mov	r2, r3
 800da88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da8a:	61fb      	str	r3, [r7, #28]
 800da8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da8e:	69b9      	ldr	r1, [r7, #24]
 800da90:	69fa      	ldr	r2, [r7, #28]
 800da92:	e841 2300 	strex	r3, r2, [r1]
 800da96:	617b      	str	r3, [r7, #20]
   return(result);
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1e6      	bne.n	800da6c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daa0:	2200      	movs	r2, #0
 800daa2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d107      	bne.n	800dabc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800daac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dab2:	4619      	mov	r1, r3
 800dab4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dab6:	f7ff f871 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daba:	e002      	b.n	800dac2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800dabc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dabe:	f7f7 f83d 	bl	8004b3c <HAL_UART_RxCpltCallback>
}
 800dac2:	bf00      	nop
 800dac4:	3770      	adds	r7, #112	@ 0x70
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2201      	movs	r2, #1
 800dadc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d109      	bne.n	800dafa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800daec:	085b      	lsrs	r3, r3, #1
 800daee:	b29b      	uxth	r3, r3
 800daf0:	4619      	mov	r1, r3
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f7ff f852 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daf8:	e002      	b.n	800db00 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff f83a 	bl	800cb74 <HAL_UART_RxHalfCpltCallback>
}
 800db00:	bf00      	nop
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db14:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db1c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db24:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db30:	2b80      	cmp	r3, #128	@ 0x80
 800db32:	d109      	bne.n	800db48 <UART_DMAError+0x40>
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2b21      	cmp	r3, #33	@ 0x21
 800db38:	d106      	bne.n	800db48 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800db42:	6978      	ldr	r0, [r7, #20]
 800db44:	f7ff fe84 	bl	800d850 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db52:	2b40      	cmp	r3, #64	@ 0x40
 800db54:	d109      	bne.n	800db6a <UART_DMAError+0x62>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2b22      	cmp	r3, #34	@ 0x22
 800db5a:	d106      	bne.n	800db6a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	2200      	movs	r2, #0
 800db60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800db64:	6978      	ldr	r0, [r7, #20]
 800db66:	f7ff feb4 	bl	800d8d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db70:	f043 0210 	orr.w	r2, r3, #16
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db7a:	6978      	ldr	r0, [r7, #20]
 800db7c:	f7ff f804 	bl	800cb88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db80:	bf00      	nop
 800db82:	3718      	adds	r7, #24
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2200      	movs	r2, #0
 800db9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f7fe fff2 	bl	800cb88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dba4:	bf00      	nop
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b088      	sub	sp, #32
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	e853 3f00 	ldrex	r3, [r3]
 800dbc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbc8:	61fb      	str	r3, [r7, #28]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	61bb      	str	r3, [r7, #24]
 800dbd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd6:	6979      	ldr	r1, [r7, #20]
 800dbd8:	69ba      	ldr	r2, [r7, #24]
 800dbda:	e841 2300 	strex	r3, r2, [r1]
 800dbde:	613b      	str	r3, [r7, #16]
   return(result);
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1e6      	bne.n	800dbb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2220      	movs	r2, #32
 800dbea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7fe ffb3 	bl	800cb60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbfa:	bf00      	nop
 800dbfc:	3720      	adds	r7, #32
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b09c      	sub	sp, #112	@ 0x70
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc1c:	2b22      	cmp	r3, #34	@ 0x22
 800dc1e:	f040 80be 	bne.w	800dd9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dc2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800dc30:	b2d9      	uxtb	r1, r3
 800dc32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc3c:	400a      	ands	r2, r1
 800dc3e:	b2d2      	uxtb	r2, r2
 800dc40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc46:	1c5a      	adds	r2, r3, #1
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	3b01      	subs	r3, #1
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f040 80a1 	bne.w	800ddae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc74:	e853 3f00 	ldrex	r3, [r3]
 800dc78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dc7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dc90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dc92:	e841 2300 	strex	r3, r2, [r1]
 800dc96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1e6      	bne.n	800dc6c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3308      	adds	r3, #8
 800dca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca8:	e853 3f00 	ldrex	r3, [r3]
 800dcac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dcae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcb0:	f023 0301 	bic.w	r3, r3, #1
 800dcb4:	667b      	str	r3, [r7, #100]	@ 0x64
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	3308      	adds	r3, #8
 800dcbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dcbe:	647a      	str	r2, [r7, #68]	@ 0x44
 800dcc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dcc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dcc6:	e841 2300 	strex	r3, r2, [r1]
 800dcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1e5      	bne.n	800dc9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2220      	movs	r2, #32
 800dcd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a33      	ldr	r2, [pc, #204]	@ (800ddb8 <UART_RxISR_8BIT+0x1b4>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d01f      	beq.n	800dd30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d018      	beq.n	800dd30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd06:	e853 3f00 	ldrex	r3, [r3]
 800dd0a:	623b      	str	r3, [r7, #32]
   return(result);
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dd12:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd24:	e841 2300 	strex	r3, r2, [r1]
 800dd28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1e6      	bne.n	800dcfe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d12e      	bne.n	800dd96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	e853 3f00 	ldrex	r3, [r3]
 800dd4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f023 0310 	bic.w	r3, r3, #16
 800dd52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	461a      	mov	r2, r3
 800dd5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd5c:	61fb      	str	r3, [r7, #28]
 800dd5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd60:	69b9      	ldr	r1, [r7, #24]
 800dd62:	69fa      	ldr	r2, [r7, #28]
 800dd64:	e841 2300 	strex	r3, r2, [r1]
 800dd68:	617b      	str	r3, [r7, #20]
   return(result);
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1e6      	bne.n	800dd3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	f003 0310 	and.w	r3, r3, #16
 800dd7a:	2b10      	cmp	r3, #16
 800dd7c:	d103      	bne.n	800dd86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2210      	movs	r2, #16
 800dd84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7fe ff04 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dd94:	e00b      	b.n	800ddae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7f6 fed0 	bl	8004b3c <HAL_UART_RxCpltCallback>
}
 800dd9c:	e007      	b.n	800ddae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	699a      	ldr	r2, [r3, #24]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f042 0208 	orr.w	r2, r2, #8
 800ddac:	619a      	str	r2, [r3, #24]
}
 800ddae:	bf00      	nop
 800ddb0:	3770      	adds	r7, #112	@ 0x70
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	40008000 	.word	0x40008000

0800ddbc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b09c      	sub	sp, #112	@ 0x70
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ddca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ddd4:	2b22      	cmp	r3, #34	@ 0x22
 800ddd6:	f040 80be 	bne.w	800df56 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dde8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ddea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ddee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ddf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddfe:	1c9a      	adds	r2, r3, #2
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	3b01      	subs	r3, #1
 800de0e:	b29a      	uxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f040 80a1 	bne.w	800df66 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de2c:	e853 3f00 	ldrex	r3, [r3]
 800de30:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800de32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de38:	667b      	str	r3, [r7, #100]	@ 0x64
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	461a      	mov	r2, r3
 800de40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de42:	657b      	str	r3, [r7, #84]	@ 0x54
 800de44:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800de48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800de4a:	e841 2300 	strex	r3, r2, [r1]
 800de4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800de50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1e6      	bne.n	800de24 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	3308      	adds	r3, #8
 800de5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de60:	e853 3f00 	ldrex	r3, [r3]
 800de64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800de66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de68:	f023 0301 	bic.w	r3, r3, #1
 800de6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	3308      	adds	r3, #8
 800de74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800de76:	643a      	str	r2, [r7, #64]	@ 0x40
 800de78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de7e:	e841 2300 	strex	r3, r2, [r1]
 800de82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1e5      	bne.n	800de56 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2220      	movs	r2, #32
 800de8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a33      	ldr	r2, [pc, #204]	@ (800df70 <UART_RxISR_16BIT+0x1b4>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d01f      	beq.n	800dee8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d018      	beq.n	800dee8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	e853 3f00 	ldrex	r3, [r3]
 800dec2:	61fb      	str	r3, [r7, #28]
   return(result);
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800deca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	461a      	mov	r2, r3
 800ded2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ded4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ded6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800deda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dedc:	e841 2300 	strex	r3, r2, [r1]
 800dee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d1e6      	bne.n	800deb6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deec:	2b01      	cmp	r3, #1
 800deee:	d12e      	bne.n	800df4e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	e853 3f00 	ldrex	r3, [r3]
 800df02:	60bb      	str	r3, [r7, #8]
   return(result);
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	f023 0310 	bic.w	r3, r3, #16
 800df0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	461a      	mov	r2, r3
 800df12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df14:	61bb      	str	r3, [r7, #24]
 800df16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df18:	6979      	ldr	r1, [r7, #20]
 800df1a:	69ba      	ldr	r2, [r7, #24]
 800df1c:	e841 2300 	strex	r3, r2, [r1]
 800df20:	613b      	str	r3, [r7, #16]
   return(result);
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1e6      	bne.n	800def6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	69db      	ldr	r3, [r3, #28]
 800df2e:	f003 0310 	and.w	r3, r3, #16
 800df32:	2b10      	cmp	r3, #16
 800df34:	d103      	bne.n	800df3e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2210      	movs	r2, #16
 800df3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df44:	4619      	mov	r1, r3
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7fe fe28 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df4c:	e00b      	b.n	800df66 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7f6 fdf4 	bl	8004b3c <HAL_UART_RxCpltCallback>
}
 800df54:	e007      	b.n	800df66 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	699a      	ldr	r2, [r3, #24]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f042 0208 	orr.w	r2, r2, #8
 800df64:	619a      	str	r2, [r3, #24]
}
 800df66:	bf00      	nop
 800df68:	3770      	adds	r7, #112	@ 0x70
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	40008000 	.word	0x40008000

0800df74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b0ac      	sub	sp, #176	@ 0xb0
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df82:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	69db      	ldr	r3, [r3, #28]
 800df8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dfaa:	2b22      	cmp	r3, #34	@ 0x22
 800dfac:	f040 8183 	bne.w	800e2b6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dfb6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dfba:	e126      	b.n	800e20a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfc2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dfc6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800dfca:	b2d9      	uxtb	r1, r3
 800dfcc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800dfd0:	b2da      	uxtb	r2, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfd6:	400a      	ands	r2, r1
 800dfd8:	b2d2      	uxtb	r2, r2
 800dfda:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfe0:	1c5a      	adds	r2, r3, #1
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	3b01      	subs	r3, #1
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	69db      	ldr	r3, [r3, #28]
 800dffe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e006:	f003 0307 	and.w	r3, r3, #7
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d053      	beq.n	800e0b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e00e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	2b00      	cmp	r3, #0
 800e018:	d011      	beq.n	800e03e <UART_RxISR_8BIT_FIFOEN+0xca>
 800e01a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00b      	beq.n	800e03e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2201      	movs	r2, #1
 800e02c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e034:	f043 0201 	orr.w	r2, r3, #1
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e03e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e042:	f003 0302 	and.w	r3, r3, #2
 800e046:	2b00      	cmp	r3, #0
 800e048:	d011      	beq.n	800e06e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e04a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e04e:	f003 0301 	and.w	r3, r3, #1
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00b      	beq.n	800e06e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2202      	movs	r2, #2
 800e05c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e064:	f043 0204 	orr.w	r2, r3, #4
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e06e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e072:	f003 0304 	and.w	r3, r3, #4
 800e076:	2b00      	cmp	r3, #0
 800e078:	d011      	beq.n	800e09e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e07a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e07e:	f003 0301 	and.w	r3, r3, #1
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00b      	beq.n	800e09e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2204      	movs	r2, #4
 800e08c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e094:	f043 0202 	orr.w	r2, r3, #2
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d006      	beq.n	800e0b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7fe fd6d 	bl	800cb88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f040 80a3 	bne.w	800e20a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e0cc:	e853 3f00 	ldrex	r3, [r3]
 800e0d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e0d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e0e8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e0ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e0ee:	e841 2300 	strex	r3, r2, [r1]
 800e0f2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e0f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1e4      	bne.n	800e0c4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	3308      	adds	r3, #8
 800e100:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e104:	e853 3f00 	ldrex	r3, [r3]
 800e108:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e10a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e10c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e110:	f023 0301 	bic.w	r3, r3, #1
 800e114:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	3308      	adds	r3, #8
 800e11e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e122:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e124:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e126:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e128:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e12a:	e841 2300 	strex	r3, r2, [r1]
 800e12e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e130:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1e1      	bne.n	800e0fa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2220      	movs	r2, #32
 800e13a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a60      	ldr	r2, [pc, #384]	@ (800e2d0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d021      	beq.n	800e198 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d01a      	beq.n	800e198 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e16a:	e853 3f00 	ldrex	r3, [r3]
 800e16e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e172:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	461a      	mov	r2, r3
 800e180:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e184:	657b      	str	r3, [r7, #84]	@ 0x54
 800e186:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e188:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e18a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e18c:	e841 2300 	strex	r3, r2, [r1]
 800e190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1e4      	bne.n	800e162 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d130      	bne.n	800e202 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ae:	e853 3f00 	ldrex	r3, [r3]
 800e1b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b6:	f023 0310 	bic.w	r3, r3, #16
 800e1ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1d0:	e841 2300 	strex	r3, r2, [r1]
 800e1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1e4      	bne.n	800e1a6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	69db      	ldr	r3, [r3, #28]
 800e1e2:	f003 0310 	and.w	r3, r3, #16
 800e1e6:	2b10      	cmp	r3, #16
 800e1e8:	d103      	bne.n	800e1f2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2210      	movs	r2, #16
 800e1f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7fe fcce 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e200:	e00e      	b.n	800e220 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7f6 fc9a 	bl	8004b3c <HAL_UART_RxCpltCallback>
        break;
 800e208:	e00a      	b.n	800e220 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e20a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d006      	beq.n	800e220 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800e212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e216:	f003 0320 	and.w	r3, r3, #32
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f47f aece 	bne.w	800dfbc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e226:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e22a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d049      	beq.n	800e2c6 <UART_RxISR_8BIT_FIFOEN+0x352>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e238:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d242      	bcs.n	800e2c6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3308      	adds	r3, #8
 800e246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	e853 3f00 	ldrex	r3, [r3]
 800e24e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	3308      	adds	r3, #8
 800e260:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e26a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e26c:	e841 2300 	strex	r3, r2, [r1]
 800e270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1e3      	bne.n	800e240 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4a16      	ldr	r2, [pc, #88]	@ (800e2d4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800e27c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	e853 3f00 	ldrex	r3, [r3]
 800e28a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	f043 0320 	orr.w	r3, r3, #32
 800e292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	461a      	mov	r2, r3
 800e29c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e2a0:	61bb      	str	r3, [r7, #24]
 800e2a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a4:	6979      	ldr	r1, [r7, #20]
 800e2a6:	69ba      	ldr	r2, [r7, #24]
 800e2a8:	e841 2300 	strex	r3, r2, [r1]
 800e2ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1e4      	bne.n	800e27e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2b4:	e007      	b.n	800e2c6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	699a      	ldr	r2, [r3, #24]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f042 0208 	orr.w	r2, r2, #8
 800e2c4:	619a      	str	r2, [r3, #24]
}
 800e2c6:	bf00      	nop
 800e2c8:	37b0      	adds	r7, #176	@ 0xb0
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	40008000 	.word	0x40008000
 800e2d4:	0800dc05 	.word	0x0800dc05

0800e2d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b0ae      	sub	sp, #184	@ 0xb8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e2e6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	69db      	ldr	r3, [r3, #28]
 800e2f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e30e:	2b22      	cmp	r3, #34	@ 0x22
 800e310:	f040 8187 	bne.w	800e622 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e31a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e31e:	e12a      	b.n	800e576 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e326:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e32e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e332:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e336:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e33a:	4013      	ands	r3, r2
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e342:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e348:	1c9a      	adds	r2, r3, #2
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e354:	b29b      	uxth	r3, r3
 800e356:	3b01      	subs	r3, #1
 800e358:	b29a      	uxth	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	69db      	ldr	r3, [r3, #28]
 800e366:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e36a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e36e:	f003 0307 	and.w	r3, r3, #7
 800e372:	2b00      	cmp	r3, #0
 800e374:	d053      	beq.n	800e41e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e37a:	f003 0301 	and.w	r3, r3, #1
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d011      	beq.n	800e3a6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2201      	movs	r2, #1
 800e394:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e39c:	f043 0201 	orr.w	r2, r3, #1
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e3aa:	f003 0302 	and.w	r3, r3, #2
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d011      	beq.n	800e3d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e3b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e3b6:	f003 0301 	and.w	r3, r3, #1
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00b      	beq.n	800e3d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2202      	movs	r2, #2
 800e3c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3cc:	f043 0204 	orr.w	r2, r3, #4
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e3da:	f003 0304 	and.w	r3, r3, #4
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d011      	beq.n	800e406 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e3e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e3e6:	f003 0301 	and.w	r3, r3, #1
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00b      	beq.n	800e406 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2204      	movs	r2, #4
 800e3f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3fc:	f043 0202 	orr.w	r2, r3, #2
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d006      	beq.n	800e41e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7fe fbb9 	bl	800cb88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e424:	b29b      	uxth	r3, r3
 800e426:	2b00      	cmp	r3, #0
 800e428:	f040 80a5 	bne.w	800e576 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e434:	e853 3f00 	ldrex	r3, [r3]
 800e438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e43a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e43c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e440:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	461a      	mov	r2, r3
 800e44a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e44e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e452:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e45a:	e841 2300 	strex	r3, r2, [r1]
 800e45e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1e2      	bne.n	800e42c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3308      	adds	r3, #8
 800e46c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e470:	e853 3f00 	ldrex	r3, [r3]
 800e474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e47c:	f023 0301 	bic.w	r3, r3, #1
 800e480:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	3308      	adds	r3, #8
 800e48a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e48e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e490:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e492:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e494:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e496:	e841 2300 	strex	r3, r2, [r1]
 800e49a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e49c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1e1      	bne.n	800e466 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2220      	movs	r2, #32
 800e4a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a60      	ldr	r2, [pc, #384]	@ (800e63c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d021      	beq.n	800e504 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d01a      	beq.n	800e504 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4d6:	e853 3f00 	ldrex	r3, [r3]
 800e4da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e4dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e4e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e4f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e4f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4f8:	e841 2300 	strex	r3, r2, [r1]
 800e4fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e4fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1e4      	bne.n	800e4ce <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d130      	bne.n	800e56e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51a:	e853 3f00 	ldrex	r3, [r3]
 800e51e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e522:	f023 0310 	bic.w	r3, r3, #16
 800e526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	461a      	mov	r2, r3
 800e530:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e534:	647b      	str	r3, [r7, #68]	@ 0x44
 800e536:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e538:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e53a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e53c:	e841 2300 	strex	r3, r2, [r1]
 800e540:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d1e4      	bne.n	800e512 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	69db      	ldr	r3, [r3, #28]
 800e54e:	f003 0310 	and.w	r3, r3, #16
 800e552:	2b10      	cmp	r3, #16
 800e554:	d103      	bne.n	800e55e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2210      	movs	r2, #16
 800e55c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7fe fb18 	bl	800cb9c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e56c:	e00e      	b.n	800e58c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7f6 fae4 	bl	8004b3c <HAL_UART_RxCpltCallback>
        break;
 800e574:	e00a      	b.n	800e58c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e576:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d006      	beq.n	800e58c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800e57e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e582:	f003 0320 	and.w	r3, r3, #32
 800e586:	2b00      	cmp	r3, #0
 800e588:	f47f aeca 	bne.w	800e320 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e592:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e596:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d049      	beq.n	800e632 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e5a4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d242      	bcs.n	800e632 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b6:	e853 3f00 	ldrex	r3, [r3]
 800e5ba:	623b      	str	r3, [r7, #32]
   return(result);
 800e5bc:	6a3b      	ldr	r3, [r7, #32]
 800e5be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e5c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3308      	adds	r3, #8
 800e5cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e5d0:	633a      	str	r2, [r7, #48]	@ 0x30
 800e5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5d8:	e841 2300 	strex	r3, r2, [r1]
 800e5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d1e3      	bne.n	800e5ac <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a16      	ldr	r2, [pc, #88]	@ (800e640 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800e5e8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f043 0320 	orr.w	r3, r3, #32
 800e5fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	461a      	mov	r2, r3
 800e608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e60c:	61fb      	str	r3, [r7, #28]
 800e60e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e610:	69b9      	ldr	r1, [r7, #24]
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	e841 2300 	strex	r3, r2, [r1]
 800e618:	617b      	str	r3, [r7, #20]
   return(result);
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1e4      	bne.n	800e5ea <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e620:	e007      	b.n	800e632 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	699a      	ldr	r2, [r3, #24]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f042 0208 	orr.w	r2, r2, #8
 800e630:	619a      	str	r2, [r3, #24]
}
 800e632:	bf00      	nop
 800e634:	37b8      	adds	r7, #184	@ 0xb8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	40008000 	.word	0x40008000
 800e640:	0800ddbd 	.word	0x0800ddbd

0800e644 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e680:	b480      	push	{r7}
 800e682:	b085      	sub	sp, #20
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d101      	bne.n	800e696 <HAL_UARTEx_DisableFifoMode+0x16>
 800e692:	2302      	movs	r3, #2
 800e694:	e027      	b.n	800e6e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2224      	movs	r2, #36	@ 0x24
 800e6a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f022 0201 	bic.w	r2, r2, #1
 800e6bc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e6c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2220      	movs	r2, #32
 800e6d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3714      	adds	r7, #20
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b084      	sub	sp, #16
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e702:	2b01      	cmp	r3, #1
 800e704:	d101      	bne.n	800e70a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e706:	2302      	movs	r3, #2
 800e708:	e02d      	b.n	800e766 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2201      	movs	r2, #1
 800e70e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2224      	movs	r2, #36	@ 0x24
 800e716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f022 0201 	bic.w	r2, r2, #1
 800e730:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	430a      	orrs	r2, r1
 800e744:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f850 	bl	800e7ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2220      	movs	r2, #32
 800e758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
 800e776:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d101      	bne.n	800e786 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e782:	2302      	movs	r3, #2
 800e784:	e02d      	b.n	800e7e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2224      	movs	r2, #36	@ 0x24
 800e792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f022 0201 	bic.w	r2, r2, #1
 800e7ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	430a      	orrs	r2, r1
 800e7c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f812 	bl	800e7ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2220      	movs	r2, #32
 800e7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
	...

0800e7ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d108      	bne.n	800e80e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2201      	movs	r2, #1
 800e800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2201      	movs	r2, #1
 800e808:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e80c:	e031      	b.n	800e872 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e80e:	2308      	movs	r3, #8
 800e810:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e812:	2308      	movs	r3, #8
 800e814:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	0e5b      	lsrs	r3, r3, #25
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	f003 0307 	and.w	r3, r3, #7
 800e824:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	0f5b      	lsrs	r3, r3, #29
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	f003 0307 	and.w	r3, r3, #7
 800e834:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e836:	7bbb      	ldrb	r3, [r7, #14]
 800e838:	7b3a      	ldrb	r2, [r7, #12]
 800e83a:	4911      	ldr	r1, [pc, #68]	@ (800e880 <UARTEx_SetNbDataToProcess+0x94>)
 800e83c:	5c8a      	ldrb	r2, [r1, r2]
 800e83e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e842:	7b3a      	ldrb	r2, [r7, #12]
 800e844:	490f      	ldr	r1, [pc, #60]	@ (800e884 <UARTEx_SetNbDataToProcess+0x98>)
 800e846:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e848:	fb93 f3f2 	sdiv	r3, r3, r2
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e854:	7bfb      	ldrb	r3, [r7, #15]
 800e856:	7b7a      	ldrb	r2, [r7, #13]
 800e858:	4909      	ldr	r1, [pc, #36]	@ (800e880 <UARTEx_SetNbDataToProcess+0x94>)
 800e85a:	5c8a      	ldrb	r2, [r1, r2]
 800e85c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e860:	7b7a      	ldrb	r2, [r7, #13]
 800e862:	4908      	ldr	r1, [pc, #32]	@ (800e884 <UARTEx_SetNbDataToProcess+0x98>)
 800e864:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e866:	fb93 f3f2 	sdiv	r3, r3, r2
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e872:	bf00      	nop
 800e874:	3714      	adds	r7, #20
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop
 800e880:	0801bad8 	.word	0x0801bad8
 800e884:	0801bae0 	.word	0x0801bae0

0800e888 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800e88c:	4907      	ldr	r1, [pc, #28]	@ (800e8ac <MX_FATFS_Init+0x24>)
 800e88e:	4808      	ldr	r0, [pc, #32]	@ (800e8b0 <MX_FATFS_Init+0x28>)
 800e890:	f002 fe24 	bl	80114dc <FATFS_LinkDriver>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d002      	beq.n	800e8a0 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800e89a:	f04f 33ff 	mov.w	r3, #4294967295
 800e89e:	e003      	b.n	800e8a8 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800e8a0:	4b04      	ldr	r3, [pc, #16]	@ (800e8b4 <MX_FATFS_Init+0x2c>)
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800e8a6:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	2000169c 	.word	0x2000169c
 800e8b0:	20000030 	.word	0x20000030
 800e8b4:	200016a0 	.word	0x200016a0

0800e8b8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e8bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7f6 fb55 	bl	8004f84 <USER_SPI_initialize>
 800e8da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800e8ee:	79fb      	ldrb	r3, [r7, #7]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7f6 fc33 	bl	800515c <USER_SPI_status>
 800e8f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	60b9      	str	r1, [r7, #8]
 800e908:	607a      	str	r2, [r7, #4]
 800e90a:	603b      	str	r3, [r7, #0]
 800e90c:	4603      	mov	r3, r0
 800e90e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800e910:	7bf8      	ldrb	r0, [r7, #15]
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	68b9      	ldr	r1, [r7, #8]
 800e918:	f7f6 fc36 	bl	8005188 <USER_SPI_read>
 800e91c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b084      	sub	sp, #16
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
 800e930:	603b      	str	r3, [r7, #0]
 800e932:	4603      	mov	r3, r0
 800e934:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800e936:	7bf8      	ldrb	r0, [r7, #15]
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	68b9      	ldr	r1, [r7, #8]
 800e93e:	f7f6 fc89 	bl	8005254 <USER_SPI_write>
 800e942:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	4603      	mov	r3, r0
 800e954:	603a      	str	r2, [r7, #0]
 800e956:	71fb      	strb	r3, [r7, #7]
 800e958:	460b      	mov	r3, r1
 800e95a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800e95c:	79b9      	ldrb	r1, [r7, #6]
 800e95e:	79fb      	ldrb	r3, [r7, #7]
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	4618      	mov	r0, r3
 800e964:	f7f6 fcf2 	bl	800534c <USER_SPI_ioctl>
 800e968:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
	...

0800e974 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e97e:	79fb      	ldrb	r3, [r7, #7]
 800e980:	4a08      	ldr	r2, [pc, #32]	@ (800e9a4 <disk_status+0x30>)
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	4413      	add	r3, r2
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	79fa      	ldrb	r2, [r7, #7]
 800e98c:	4905      	ldr	r1, [pc, #20]	@ (800e9a4 <disk_status+0x30>)
 800e98e:	440a      	add	r2, r1
 800e990:	7a12      	ldrb	r2, [r2, #8]
 800e992:	4610      	mov	r0, r2
 800e994:	4798      	blx	r3
 800e996:	4603      	mov	r3, r0
 800e998:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	200016cc 	.word	0x200016cc

0800e9a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e9b6:	79fb      	ldrb	r3, [r7, #7]
 800e9b8:	4a0d      	ldr	r2, [pc, #52]	@ (800e9f0 <disk_initialize+0x48>)
 800e9ba:	5cd3      	ldrb	r3, [r2, r3]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d111      	bne.n	800e9e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e9c0:	79fb      	ldrb	r3, [r7, #7]
 800e9c2:	4a0b      	ldr	r2, [pc, #44]	@ (800e9f0 <disk_initialize+0x48>)
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e9c8:	79fb      	ldrb	r3, [r7, #7]
 800e9ca:	4a09      	ldr	r2, [pc, #36]	@ (800e9f0 <disk_initialize+0x48>)
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	4413      	add	r3, r2
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	79fa      	ldrb	r2, [r7, #7]
 800e9d6:	4906      	ldr	r1, [pc, #24]	@ (800e9f0 <disk_initialize+0x48>)
 800e9d8:	440a      	add	r2, r1
 800e9da:	7a12      	ldrb	r2, [r2, #8]
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4798      	blx	r3
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	200016cc 	.word	0x200016cc

0800e9f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e9f4:	b590      	push	{r4, r7, lr}
 800e9f6:	b087      	sub	sp, #28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60b9      	str	r1, [r7, #8]
 800e9fc:	607a      	str	r2, [r7, #4]
 800e9fe:	603b      	str	r3, [r7, #0]
 800ea00:	4603      	mov	r3, r0
 800ea02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
 800ea06:	4a0a      	ldr	r2, [pc, #40]	@ (800ea30 <disk_read+0x3c>)
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4413      	add	r3, r2
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	689c      	ldr	r4, [r3, #8]
 800ea10:	7bfb      	ldrb	r3, [r7, #15]
 800ea12:	4a07      	ldr	r2, [pc, #28]	@ (800ea30 <disk_read+0x3c>)
 800ea14:	4413      	add	r3, r2
 800ea16:	7a18      	ldrb	r0, [r3, #8]
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	68b9      	ldr	r1, [r7, #8]
 800ea1e:	47a0      	blx	r4
 800ea20:	4603      	mov	r3, r0
 800ea22:	75fb      	strb	r3, [r7, #23]
  return res;
 800ea24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	371c      	adds	r7, #28
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd90      	pop	{r4, r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	200016cc 	.word	0x200016cc

0800ea34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ea34:	b590      	push	{r4, r7, lr}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60b9      	str	r1, [r7, #8]
 800ea3c:	607a      	str	r2, [r7, #4]
 800ea3e:	603b      	str	r3, [r7, #0]
 800ea40:	4603      	mov	r3, r0
 800ea42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
 800ea46:	4a0a      	ldr	r2, [pc, #40]	@ (800ea70 <disk_write+0x3c>)
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	4413      	add	r3, r2
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	68dc      	ldr	r4, [r3, #12]
 800ea50:	7bfb      	ldrb	r3, [r7, #15]
 800ea52:	4a07      	ldr	r2, [pc, #28]	@ (800ea70 <disk_write+0x3c>)
 800ea54:	4413      	add	r3, r2
 800ea56:	7a18      	ldrb	r0, [r3, #8]
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	68b9      	ldr	r1, [r7, #8]
 800ea5e:	47a0      	blx	r4
 800ea60:	4603      	mov	r3, r0
 800ea62:	75fb      	strb	r3, [r7, #23]
  return res;
 800ea64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	371c      	adds	r7, #28
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd90      	pop	{r4, r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	200016cc 	.word	0x200016cc

0800ea74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	603a      	str	r2, [r7, #0]
 800ea7e:	71fb      	strb	r3, [r7, #7]
 800ea80:	460b      	mov	r3, r1
 800ea82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ea84:	79fb      	ldrb	r3, [r7, #7]
 800ea86:	4a09      	ldr	r2, [pc, #36]	@ (800eaac <disk_ioctl+0x38>)
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4413      	add	r3, r2
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	691b      	ldr	r3, [r3, #16]
 800ea90:	79fa      	ldrb	r2, [r7, #7]
 800ea92:	4906      	ldr	r1, [pc, #24]	@ (800eaac <disk_ioctl+0x38>)
 800ea94:	440a      	add	r2, r1
 800ea96:	7a10      	ldrb	r0, [r2, #8]
 800ea98:	79b9      	ldrb	r1, [r7, #6]
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	4798      	blx	r3
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	73fb      	strb	r3, [r7, #15]
  return res;
 800eaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	200016cc 	.word	0x200016cc

0800eab0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eab0:	b480      	push	{r7}
 800eab2:	b085      	sub	sp, #20
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3301      	adds	r3, #1
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800eac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eac4:	021b      	lsls	r3, r3, #8
 800eac6:	b21a      	sxth	r2, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	b21b      	sxth	r3, r3
 800eace:	4313      	orrs	r3, r2
 800ead0:	b21b      	sxth	r3, r3
 800ead2:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ead4:	89fb      	ldrh	r3, [r7, #14]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3714      	adds	r7, #20
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800eae2:	b480      	push	{r7}
 800eae4:	b085      	sub	sp, #20
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	3303      	adds	r3, #3
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	021b      	lsls	r3, r3, #8
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	3202      	adds	r2, #2
 800eafa:	7812      	ldrb	r2, [r2, #0]
 800eafc:	4313      	orrs	r3, r2
 800eafe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	021b      	lsls	r3, r3, #8
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	3201      	adds	r2, #1
 800eb08:	7812      	ldrb	r2, [r2, #0]
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	021b      	lsls	r3, r3, #8
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	7812      	ldrb	r2, [r2, #0]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	60fb      	str	r3, [r7, #12]
	return rv;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	460b      	mov	r3, r1
 800eb32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	607a      	str	r2, [r7, #4]
 800eb3a:	887a      	ldrh	r2, [r7, #2]
 800eb3c:	b2d2      	uxtb	r2, r2
 800eb3e:	701a      	strb	r2, [r3, #0]
 800eb40:	887b      	ldrh	r3, [r7, #2]
 800eb42:	0a1b      	lsrs	r3, r3, #8
 800eb44:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	1c5a      	adds	r2, r3, #1
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	887a      	ldrh	r2, [r7, #2]
 800eb4e:	b2d2      	uxtb	r2, r2
 800eb50:	701a      	strb	r2, [r3, #0]
}
 800eb52:	bf00      	nop
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr

0800eb5e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800eb5e:	b480      	push	{r7}
 800eb60:	b083      	sub	sp, #12
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	1c5a      	adds	r2, r3, #1
 800eb6c:	607a      	str	r2, [r7, #4]
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	b2d2      	uxtb	r2, r2
 800eb72:	701a      	strb	r2, [r3, #0]
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	0a1b      	lsrs	r3, r3, #8
 800eb78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	607a      	str	r2, [r7, #4]
 800eb80:	683a      	ldr	r2, [r7, #0]
 800eb82:	b2d2      	uxtb	r2, r2
 800eb84:	701a      	strb	r2, [r3, #0]
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	0a1b      	lsrs	r3, r3, #8
 800eb8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	1c5a      	adds	r2, r3, #1
 800eb90:	607a      	str	r2, [r7, #4]
 800eb92:	683a      	ldr	r2, [r7, #0]
 800eb94:	b2d2      	uxtb	r2, r2
 800eb96:	701a      	strb	r2, [r3, #0]
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	0a1b      	lsrs	r3, r3, #8
 800eb9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	1c5a      	adds	r2, r3, #1
 800eba2:	607a      	str	r2, [r7, #4]
 800eba4:	683a      	ldr	r2, [r7, #0]
 800eba6:	b2d2      	uxtb	r2, r2
 800eba8:	701a      	strb	r2, [r3, #0]
}
 800ebaa:	bf00      	nop
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr

0800ebb6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ebb6:	b480      	push	{r7}
 800ebb8:	b087      	sub	sp, #28
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	60f8      	str	r0, [r7, #12]
 800ebbe:	60b9      	str	r1, [r7, #8]
 800ebc0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00d      	beq.n	800ebec <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	1c53      	adds	r3, r2, #1
 800ebd4:	613b      	str	r3, [r7, #16]
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	1c59      	adds	r1, r3, #1
 800ebda:	6179      	str	r1, [r7, #20]
 800ebdc:	7812      	ldrb	r2, [r2, #0]
 800ebde:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	607b      	str	r3, [r7, #4]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1f1      	bne.n	800ebd0 <mem_cpy+0x1a>
	}
}
 800ebec:	bf00      	nop
 800ebee:	371c      	adds	r7, #28
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ebf8:	b480      	push	{r7}
 800ebfa:	b087      	sub	sp, #28
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	1c5a      	adds	r2, r3, #1
 800ec0c:	617a      	str	r2, [r7, #20]
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	b2d2      	uxtb	r2, r2
 800ec12:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	3b01      	subs	r3, #1
 800ec18:	607b      	str	r3, [r7, #4]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1f3      	bne.n	800ec08 <mem_set+0x10>
}
 800ec20:	bf00      	nop
 800ec22:	bf00      	nop
 800ec24:	371c      	adds	r7, #28
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr

0800ec2e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ec2e:	b480      	push	{r7}
 800ec30:	b089      	sub	sp, #36	@ 0x24
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	60f8      	str	r0, [r7, #12]
 800ec36:	60b9      	str	r1, [r7, #8]
 800ec38:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	61fb      	str	r3, [r7, #28]
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ec42:	2300      	movs	r3, #0
 800ec44:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	1c5a      	adds	r2, r3, #1
 800ec4a:	61fa      	str	r2, [r7, #28]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	4619      	mov	r1, r3
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	61ba      	str	r2, [r7, #24]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	1acb      	subs	r3, r1, r3
 800ec5a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	3b01      	subs	r3, #1
 800ec60:	607b      	str	r3, [r7, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d002      	beq.n	800ec6e <mem_cmp+0x40>
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d0eb      	beq.n	800ec46 <mem_cmp+0x18>

	return r;
 800ec6e:	697b      	ldr	r3, [r7, #20]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3724      	adds	r7, #36	@ 0x24
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ec86:	e002      	b.n	800ec8e <chk_chr+0x12>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	607b      	str	r3, [r7, #4]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d005      	beq.n	800eca2 <chk_chr+0x26>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d1f2      	bne.n	800ec88 <chk_chr+0xc>
	return *str;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	781b      	ldrb	r3, [r3, #0]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	370c      	adds	r7, #12
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b082      	sub	sp, #8
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d009      	beq.n	800ecd4 <lock_fs+0x22>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f002 fc42 	bl	801154e <ff_req_grant>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d001      	beq.n	800ecd4 <lock_fs+0x22>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e000      	b.n	800ecd6 <lock_fs+0x24>
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b082      	sub	sp, #8
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
 800ece6:	460b      	mov	r3, r1
 800ece8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00d      	beq.n	800ed0c <unlock_fs+0x2e>
 800ecf0:	78fb      	ldrb	r3, [r7, #3]
 800ecf2:	2b0c      	cmp	r3, #12
 800ecf4:	d00a      	beq.n	800ed0c <unlock_fs+0x2e>
 800ecf6:	78fb      	ldrb	r3, [r7, #3]
 800ecf8:	2b0b      	cmp	r3, #11
 800ecfa:	d007      	beq.n	800ed0c <unlock_fs+0x2e>
 800ecfc:	78fb      	ldrb	r3, [r7, #3]
 800ecfe:	2b0f      	cmp	r3, #15
 800ed00:	d004      	beq.n	800ed0c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f002 fc36 	bl	8011578 <ff_rel_grant>
	}
}
 800ed0c:	bf00      	nop
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b085      	sub	sp, #20
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ed1e:	2300      	movs	r3, #0
 800ed20:	60bb      	str	r3, [r7, #8]
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	60fb      	str	r3, [r7, #12]
 800ed26:	e029      	b.n	800ed7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ed28:	4a27      	ldr	r2, [pc, #156]	@ (800edc8 <chk_lock+0xb4>)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	011b      	lsls	r3, r3, #4
 800ed2e:	4413      	add	r3, r2
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d01d      	beq.n	800ed72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ed36:	4a24      	ldr	r2, [pc, #144]	@ (800edc8 <chk_lock+0xb4>)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	011b      	lsls	r3, r3, #4
 800ed3c:	4413      	add	r3, r2
 800ed3e:	681a      	ldr	r2, [r3, #0]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d116      	bne.n	800ed76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ed48:	4a1f      	ldr	r2, [pc, #124]	@ (800edc8 <chk_lock+0xb4>)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	011b      	lsls	r3, r3, #4
 800ed4e:	4413      	add	r3, r2
 800ed50:	3304      	adds	r3, #4
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d10c      	bne.n	800ed76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ed5c:	4a1a      	ldr	r2, [pc, #104]	@ (800edc8 <chk_lock+0xb4>)
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	011b      	lsls	r3, r3, #4
 800ed62:	4413      	add	r3, r2
 800ed64:	3308      	adds	r3, #8
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d102      	bne.n	800ed76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ed70:	e007      	b.n	800ed82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ed72:	2301      	movs	r3, #1
 800ed74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d9d2      	bls.n	800ed28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d109      	bne.n	800ed9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d102      	bne.n	800ed94 <chk_lock+0x80>
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d101      	bne.n	800ed98 <chk_lock+0x84>
 800ed94:	2300      	movs	r3, #0
 800ed96:	e010      	b.n	800edba <chk_lock+0xa6>
 800ed98:	2312      	movs	r3, #18
 800ed9a:	e00e      	b.n	800edba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d108      	bne.n	800edb4 <chk_lock+0xa0>
 800eda2:	4a09      	ldr	r2, [pc, #36]	@ (800edc8 <chk_lock+0xb4>)
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	011b      	lsls	r3, r3, #4
 800eda8:	4413      	add	r3, r2
 800edaa:	330c      	adds	r3, #12
 800edac:	881b      	ldrh	r3, [r3, #0]
 800edae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800edb2:	d101      	bne.n	800edb8 <chk_lock+0xa4>
 800edb4:	2310      	movs	r3, #16
 800edb6:	e000      	b.n	800edba <chk_lock+0xa6>
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3714      	adds	r7, #20
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	200016ac 	.word	0x200016ac

0800edcc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800edd2:	2300      	movs	r3, #0
 800edd4:	607b      	str	r3, [r7, #4]
 800edd6:	e002      	b.n	800edde <enq_lock+0x12>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	3301      	adds	r3, #1
 800eddc:	607b      	str	r3, [r7, #4]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d806      	bhi.n	800edf2 <enq_lock+0x26>
 800ede4:	4a09      	ldr	r2, [pc, #36]	@ (800ee0c <enq_lock+0x40>)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	011b      	lsls	r3, r3, #4
 800edea:	4413      	add	r3, r2
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d1f2      	bne.n	800edd8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	bf14      	ite	ne
 800edf8:	2301      	movne	r3, #1
 800edfa:	2300      	moveq	r3, #0
 800edfc:	b2db      	uxtb	r3, r3
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	200016ac 	.word	0x200016ac

0800ee10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	60fb      	str	r3, [r7, #12]
 800ee1e:	e01f      	b.n	800ee60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ee20:	4a41      	ldr	r2, [pc, #260]	@ (800ef28 <inc_lock+0x118>)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	011b      	lsls	r3, r3, #4
 800ee26:	4413      	add	r3, r2
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d113      	bne.n	800ee5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ee32:	4a3d      	ldr	r2, [pc, #244]	@ (800ef28 <inc_lock+0x118>)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	011b      	lsls	r3, r3, #4
 800ee38:	4413      	add	r3, r2
 800ee3a:	3304      	adds	r3, #4
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d109      	bne.n	800ee5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ee46:	4a38      	ldr	r2, [pc, #224]	@ (800ef28 <inc_lock+0x118>)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	4413      	add	r3, r2
 800ee4e:	3308      	adds	r3, #8
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d006      	beq.n	800ee68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d9dc      	bls.n	800ee20 <inc_lock+0x10>
 800ee66:	e000      	b.n	800ee6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ee68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2b02      	cmp	r3, #2
 800ee6e:	d132      	bne.n	800eed6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	e002      	b.n	800ee7c <inc_lock+0x6c>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	60fb      	str	r3, [r7, #12]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d806      	bhi.n	800ee90 <inc_lock+0x80>
 800ee82:	4a29      	ldr	r2, [pc, #164]	@ (800ef28 <inc_lock+0x118>)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	011b      	lsls	r3, r3, #4
 800ee88:	4413      	add	r3, r2
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1f2      	bne.n	800ee76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b02      	cmp	r3, #2
 800ee94:	d101      	bne.n	800ee9a <inc_lock+0x8a>
 800ee96:	2300      	movs	r3, #0
 800ee98:	e040      	b.n	800ef1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	4922      	ldr	r1, [pc, #136]	@ (800ef28 <inc_lock+0x118>)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	011b      	lsls	r3, r3, #4
 800eea4:	440b      	add	r3, r1
 800eea6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	689a      	ldr	r2, [r3, #8]
 800eeac:	491e      	ldr	r1, [pc, #120]	@ (800ef28 <inc_lock+0x118>)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	011b      	lsls	r3, r3, #4
 800eeb2:	440b      	add	r3, r1
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	695a      	ldr	r2, [r3, #20]
 800eebc:	491a      	ldr	r1, [pc, #104]	@ (800ef28 <inc_lock+0x118>)
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	011b      	lsls	r3, r3, #4
 800eec2:	440b      	add	r3, r1
 800eec4:	3308      	adds	r3, #8
 800eec6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eec8:	4a17      	ldr	r2, [pc, #92]	@ (800ef28 <inc_lock+0x118>)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	011b      	lsls	r3, r3, #4
 800eece:	4413      	add	r3, r2
 800eed0:	330c      	adds	r3, #12
 800eed2:	2200      	movs	r2, #0
 800eed4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d009      	beq.n	800eef0 <inc_lock+0xe0>
 800eedc:	4a12      	ldr	r2, [pc, #72]	@ (800ef28 <inc_lock+0x118>)
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	011b      	lsls	r3, r3, #4
 800eee2:	4413      	add	r3, r2
 800eee4:	330c      	adds	r3, #12
 800eee6:	881b      	ldrh	r3, [r3, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d001      	beq.n	800eef0 <inc_lock+0xe0>
 800eeec:	2300      	movs	r3, #0
 800eeee:	e015      	b.n	800ef1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d108      	bne.n	800ef08 <inc_lock+0xf8>
 800eef6:	4a0c      	ldr	r2, [pc, #48]	@ (800ef28 <inc_lock+0x118>)
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	011b      	lsls	r3, r3, #4
 800eefc:	4413      	add	r3, r2
 800eefe:	330c      	adds	r3, #12
 800ef00:	881b      	ldrh	r3, [r3, #0]
 800ef02:	3301      	adds	r3, #1
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	e001      	b.n	800ef0c <inc_lock+0xfc>
 800ef08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ef0c:	4906      	ldr	r1, [pc, #24]	@ (800ef28 <inc_lock+0x118>)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	011b      	lsls	r3, r3, #4
 800ef12:	440b      	add	r3, r1
 800ef14:	330c      	adds	r3, #12
 800ef16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	3301      	adds	r3, #1
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3714      	adds	r7, #20
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	200016ac 	.word	0x200016ac

0800ef2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3b01      	subs	r3, #1
 800ef38:	607b      	str	r3, [r7, #4]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d825      	bhi.n	800ef8c <dec_lock+0x60>
		n = Files[i].ctr;
 800ef40:	4a17      	ldr	r2, [pc, #92]	@ (800efa0 <dec_lock+0x74>)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	011b      	lsls	r3, r3, #4
 800ef46:	4413      	add	r3, r2
 800ef48:	330c      	adds	r3, #12
 800ef4a:	881b      	ldrh	r3, [r3, #0]
 800ef4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ef4e:	89fb      	ldrh	r3, [r7, #14]
 800ef50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef54:	d101      	bne.n	800ef5a <dec_lock+0x2e>
 800ef56:	2300      	movs	r3, #0
 800ef58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ef5a:	89fb      	ldrh	r3, [r7, #14]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <dec_lock+0x3a>
 800ef60:	89fb      	ldrh	r3, [r7, #14]
 800ef62:	3b01      	subs	r3, #1
 800ef64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ef66:	4a0e      	ldr	r2, [pc, #56]	@ (800efa0 <dec_lock+0x74>)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	011b      	lsls	r3, r3, #4
 800ef6c:	4413      	add	r3, r2
 800ef6e:	330c      	adds	r3, #12
 800ef70:	89fa      	ldrh	r2, [r7, #14]
 800ef72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ef74:	89fb      	ldrh	r3, [r7, #14]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d105      	bne.n	800ef86 <dec_lock+0x5a>
 800ef7a:	4a09      	ldr	r2, [pc, #36]	@ (800efa0 <dec_lock+0x74>)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	011b      	lsls	r3, r3, #4
 800ef80:	4413      	add	r3, r2
 800ef82:	2200      	movs	r2, #0
 800ef84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ef86:	2300      	movs	r3, #0
 800ef88:	737b      	strb	r3, [r7, #13]
 800ef8a:	e001      	b.n	800ef90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ef8c:	2302      	movs	r3, #2
 800ef8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ef90:	7b7b      	ldrb	r3, [r7, #13]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	200016ac 	.word	0x200016ac

0800efa4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800efac:	2300      	movs	r3, #0
 800efae:	60fb      	str	r3, [r7, #12]
 800efb0:	e010      	b.n	800efd4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800efb2:	4a0d      	ldr	r2, [pc, #52]	@ (800efe8 <clear_lock+0x44>)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	011b      	lsls	r3, r3, #4
 800efb8:	4413      	add	r3, r2
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d105      	bne.n	800efce <clear_lock+0x2a>
 800efc2:	4a09      	ldr	r2, [pc, #36]	@ (800efe8 <clear_lock+0x44>)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	011b      	lsls	r3, r3, #4
 800efc8:	4413      	add	r3, r2
 800efca:	2200      	movs	r2, #0
 800efcc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3301      	adds	r3, #1
 800efd2:	60fb      	str	r3, [r7, #12]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d9eb      	bls.n	800efb2 <clear_lock+0xe>
	}
}
 800efda:	bf00      	nop
 800efdc:	bf00      	nop
 800efde:	3714      	adds	r7, #20
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr
 800efe8:	200016ac 	.word	0x200016ac

0800efec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b086      	sub	sp, #24
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	78db      	ldrb	r3, [r3, #3]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d034      	beq.n	800f06a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f004:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	7858      	ldrb	r0, [r3, #1]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f010:	2301      	movs	r3, #1
 800f012:	697a      	ldr	r2, [r7, #20]
 800f014:	f7ff fd0e 	bl	800ea34 <disk_write>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d002      	beq.n	800f024 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f01e:	2301      	movs	r3, #1
 800f020:	73fb      	strb	r3, [r7, #15]
 800f022:	e022      	b.n	800f06a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2200      	movs	r2, #0
 800f028:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02e:	697a      	ldr	r2, [r7, #20]
 800f030:	1ad2      	subs	r2, r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	69db      	ldr	r3, [r3, #28]
 800f036:	429a      	cmp	r2, r3
 800f038:	d217      	bcs.n	800f06a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	789b      	ldrb	r3, [r3, #2]
 800f03e:	613b      	str	r3, [r7, #16]
 800f040:	e010      	b.n	800f064 <sync_window+0x78>
					wsect += fs->fsize;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	69db      	ldr	r3, [r3, #28]
 800f046:	697a      	ldr	r2, [r7, #20]
 800f048:	4413      	add	r3, r2
 800f04a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	7858      	ldrb	r0, [r3, #1]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f056:	2301      	movs	r3, #1
 800f058:	697a      	ldr	r2, [r7, #20]
 800f05a:	f7ff fceb 	bl	800ea34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	3b01      	subs	r3, #1
 800f062:	613b      	str	r3, [r7, #16]
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	2b01      	cmp	r3, #1
 800f068:	d8eb      	bhi.n	800f042 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3718      	adds	r7, #24
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f07e:	2300      	movs	r3, #0
 800f080:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d01b      	beq.n	800f0c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f7ff ffad 	bl	800efec <sync_window>
 800f092:	4603      	mov	r3, r0
 800f094:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f096:	7bfb      	ldrb	r3, [r7, #15]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d113      	bne.n	800f0c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	7858      	ldrb	r0, [r3, #1]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	683a      	ldr	r2, [r7, #0]
 800f0aa:	f7ff fca3 	bl	800e9f4 <disk_read>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d004      	beq.n	800f0be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	683a      	ldr	r2, [r7, #0]
 800f0c2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
	...

0800f0d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7ff ff87 	bl	800efec <sync_window>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f0e2:	7bfb      	ldrb	r3, [r7, #15]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d158      	bne.n	800f19a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	2b03      	cmp	r3, #3
 800f0ee:	d148      	bne.n	800f182 <sync_fs+0xb2>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	791b      	ldrb	r3, [r3, #4]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d144      	bne.n	800f182 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	3334      	adds	r3, #52	@ 0x34
 800f0fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f100:	2100      	movs	r1, #0
 800f102:	4618      	mov	r0, r3
 800f104:	f7ff fd78 	bl	800ebf8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	3334      	adds	r3, #52	@ 0x34
 800f10c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f110:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f114:	4618      	mov	r0, r3
 800f116:	f7ff fd07 	bl	800eb28 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	3334      	adds	r3, #52	@ 0x34
 800f11e:	4921      	ldr	r1, [pc, #132]	@ (800f1a4 <sync_fs+0xd4>)
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fd1c 	bl	800eb5e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	3334      	adds	r3, #52	@ 0x34
 800f12a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f12e:	491e      	ldr	r1, [pc, #120]	@ (800f1a8 <sync_fs+0xd8>)
 800f130:	4618      	mov	r0, r3
 800f132:	f7ff fd14 	bl	800eb5e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	3334      	adds	r3, #52	@ 0x34
 800f13a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	695b      	ldr	r3, [r3, #20]
 800f142:	4619      	mov	r1, r3
 800f144:	4610      	mov	r0, r2
 800f146:	f7ff fd0a 	bl	800eb5e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	3334      	adds	r3, #52	@ 0x34
 800f14e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	691b      	ldr	r3, [r3, #16]
 800f156:	4619      	mov	r1, r3
 800f158:	4610      	mov	r0, r2
 800f15a:	f7ff fd00 	bl	800eb5e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	1c5a      	adds	r2, r3, #1
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	7858      	ldrb	r0, [r3, #1]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f176:	2301      	movs	r3, #1
 800f178:	f7ff fc5c 	bl	800ea34 <disk_write>
			fs->fsi_flag = 0;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	785b      	ldrb	r3, [r3, #1]
 800f186:	2200      	movs	r2, #0
 800f188:	2100      	movs	r1, #0
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fc72 	bl	800ea74 <disk_ioctl>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <sync_fs+0xca>
 800f196:	2301      	movs	r3, #1
 800f198:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	41615252 	.word	0x41615252
 800f1a8:	61417272 	.word	0x61417272

0800f1ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	3b02      	subs	r3, #2
 800f1ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	699b      	ldr	r3, [r3, #24]
 800f1c0:	3b02      	subs	r3, #2
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d301      	bcc.n	800f1cc <clust2sect+0x20>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	e008      	b.n	800f1de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	895b      	ldrh	r3, [r3, #10]
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	fb03 f202 	mul.w	r2, r3, r2
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1dc:	4413      	add	r3, r2
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b086      	sub	sp, #24
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
 800f1f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d904      	bls.n	800f20a <get_fat+0x20>
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	699b      	ldr	r3, [r3, #24]
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	429a      	cmp	r2, r3
 800f208:	d302      	bcc.n	800f210 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f20a:	2301      	movs	r3, #1
 800f20c:	617b      	str	r3, [r7, #20]
 800f20e:	e08e      	b.n	800f32e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f210:	f04f 33ff 	mov.w	r3, #4294967295
 800f214:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	2b03      	cmp	r3, #3
 800f21c:	d061      	beq.n	800f2e2 <get_fat+0xf8>
 800f21e:	2b03      	cmp	r3, #3
 800f220:	dc7b      	bgt.n	800f31a <get_fat+0x130>
 800f222:	2b01      	cmp	r3, #1
 800f224:	d002      	beq.n	800f22c <get_fat+0x42>
 800f226:	2b02      	cmp	r3, #2
 800f228:	d041      	beq.n	800f2ae <get_fat+0xc4>
 800f22a:	e076      	b.n	800f31a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	085b      	lsrs	r3, r3, #1
 800f234:	68fa      	ldr	r2, [r7, #12]
 800f236:	4413      	add	r3, r2
 800f238:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	0a5b      	lsrs	r3, r3, #9
 800f242:	4413      	add	r3, r2
 800f244:	4619      	mov	r1, r3
 800f246:	6938      	ldr	r0, [r7, #16]
 800f248:	f7ff ff14 	bl	800f074 <move_window>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d166      	bne.n	800f320 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	1c5a      	adds	r2, r3, #1
 800f256:	60fa      	str	r2, [r7, #12]
 800f258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	4413      	add	r3, r2
 800f260:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f264:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	0a5b      	lsrs	r3, r3, #9
 800f26e:	4413      	add	r3, r2
 800f270:	4619      	mov	r1, r3
 800f272:	6938      	ldr	r0, [r7, #16]
 800f274:	f7ff fefe 	bl	800f074 <move_window>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d152      	bne.n	800f324 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f284:	693a      	ldr	r2, [r7, #16]
 800f286:	4413      	add	r3, r2
 800f288:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f28c:	021b      	lsls	r3, r3, #8
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	4313      	orrs	r3, r2
 800f292:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	f003 0301 	and.w	r3, r3, #1
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d002      	beq.n	800f2a4 <get_fat+0xba>
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	091b      	lsrs	r3, r3, #4
 800f2a2:	e002      	b.n	800f2aa <get_fat+0xc0>
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f2aa:	617b      	str	r3, [r7, #20]
			break;
 800f2ac:	e03f      	b.n	800f32e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	0a1b      	lsrs	r3, r3, #8
 800f2b6:	4413      	add	r3, r2
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	6938      	ldr	r0, [r7, #16]
 800f2bc:	f7ff feda 	bl	800f074 <move_window>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d130      	bne.n	800f328 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f2d4:	4413      	add	r3, r2
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff fbea 	bl	800eab0 <ld_word>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	617b      	str	r3, [r7, #20]
			break;
 800f2e0:	e025      	b.n	800f32e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	09db      	lsrs	r3, r3, #7
 800f2ea:	4413      	add	r3, r2
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	6938      	ldr	r0, [r7, #16]
 800f2f0:	f7ff fec0 	bl	800f074 <move_window>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d118      	bne.n	800f32c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f308:	4413      	add	r3, r2
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7ff fbe9 	bl	800eae2 <ld_dword>
 800f310:	4603      	mov	r3, r0
 800f312:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f316:	617b      	str	r3, [r7, #20]
			break;
 800f318:	e009      	b.n	800f32e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f31a:	2301      	movs	r3, #1
 800f31c:	617b      	str	r3, [r7, #20]
 800f31e:	e006      	b.n	800f32e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f320:	bf00      	nop
 800f322:	e004      	b.n	800f32e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f324:	bf00      	nop
 800f326:	e002      	b.n	800f32e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f328:	bf00      	nop
 800f32a:	e000      	b.n	800f32e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f32c:	bf00      	nop
		}
	}

	return val;
 800f32e:	697b      	ldr	r3, [r7, #20]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3718      	adds	r7, #24
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f338:	b590      	push	{r4, r7, lr}
 800f33a:	b089      	sub	sp, #36	@ 0x24
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f344:	2302      	movs	r3, #2
 800f346:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	f240 80d9 	bls.w	800f502 <put_fat+0x1ca>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	699b      	ldr	r3, [r3, #24]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	429a      	cmp	r2, r3
 800f358:	f080 80d3 	bcs.w	800f502 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	2b03      	cmp	r3, #3
 800f362:	f000 8096 	beq.w	800f492 <put_fat+0x15a>
 800f366:	2b03      	cmp	r3, #3
 800f368:	f300 80cb 	bgt.w	800f502 <put_fat+0x1ca>
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d002      	beq.n	800f376 <put_fat+0x3e>
 800f370:	2b02      	cmp	r3, #2
 800f372:	d06e      	beq.n	800f452 <put_fat+0x11a>
 800f374:	e0c5      	b.n	800f502 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	61bb      	str	r3, [r7, #24]
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	085b      	lsrs	r3, r3, #1
 800f37e:	69ba      	ldr	r2, [r7, #24]
 800f380:	4413      	add	r3, r2
 800f382:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	0a5b      	lsrs	r3, r3, #9
 800f38c:	4413      	add	r3, r2
 800f38e:	4619      	mov	r1, r3
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f7ff fe6f 	bl	800f074 <move_window>
 800f396:	4603      	mov	r3, r0
 800f398:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f39a:	7ffb      	ldrb	r3, [r7, #31]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f040 80a9 	bne.w	800f4f4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	1c59      	adds	r1, r3, #1
 800f3ac:	61b9      	str	r1, [r7, #24]
 800f3ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3b2:	4413      	add	r3, r2
 800f3b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	f003 0301 	and.w	r3, r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00d      	beq.n	800f3dc <put_fat+0xa4>
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	b25b      	sxtb	r3, r3
 800f3c6:	f003 030f 	and.w	r3, r3, #15
 800f3ca:	b25a      	sxtb	r2, r3
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	b25b      	sxtb	r3, r3
 800f3d0:	011b      	lsls	r3, r3, #4
 800f3d2:	b25b      	sxtb	r3, r3
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	b25b      	sxtb	r3, r3
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	e001      	b.n	800f3e0 <put_fat+0xa8>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	697a      	ldr	r2, [r7, #20]
 800f3e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	0a5b      	lsrs	r3, r3, #9
 800f3f2:	4413      	add	r3, r2
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f7ff fe3c 	bl	800f074 <move_window>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f400:	7ffb      	ldrb	r3, [r7, #31]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d178      	bne.n	800f4f8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f412:	4413      	add	r3, r2
 800f414:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	f003 0301 	and.w	r3, r3, #1
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d003      	beq.n	800f428 <put_fat+0xf0>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	091b      	lsrs	r3, r3, #4
 800f424:	b2db      	uxtb	r3, r3
 800f426:	e00e      	b.n	800f446 <put_fat+0x10e>
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	b25b      	sxtb	r3, r3
 800f42e:	f023 030f 	bic.w	r3, r3, #15
 800f432:	b25a      	sxtb	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	0a1b      	lsrs	r3, r3, #8
 800f438:	b25b      	sxtb	r3, r3
 800f43a:	f003 030f 	and.w	r3, r3, #15
 800f43e:	b25b      	sxtb	r3, r3
 800f440:	4313      	orrs	r3, r2
 800f442:	b25b      	sxtb	r3, r3
 800f444:	b2db      	uxtb	r3, r3
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2201      	movs	r2, #1
 800f44e:	70da      	strb	r2, [r3, #3]
			break;
 800f450:	e057      	b.n	800f502 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	0a1b      	lsrs	r3, r3, #8
 800f45a:	4413      	add	r3, r2
 800f45c:	4619      	mov	r1, r3
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f7ff fe08 	bl	800f074 <move_window>
 800f464:	4603      	mov	r3, r0
 800f466:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f468:	7ffb      	ldrb	r3, [r7, #31]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d146      	bne.n	800f4fc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	005b      	lsls	r3, r3, #1
 800f478:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f47c:	4413      	add	r3, r2
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	b292      	uxth	r2, r2
 800f482:	4611      	mov	r1, r2
 800f484:	4618      	mov	r0, r3
 800f486:	f7ff fb4f 	bl	800eb28 <st_word>
			fs->wflag = 1;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2201      	movs	r2, #1
 800f48e:	70da      	strb	r2, [r3, #3]
			break;
 800f490:	e037      	b.n	800f502 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	09db      	lsrs	r3, r3, #7
 800f49a:	4413      	add	r3, r2
 800f49c:	4619      	mov	r1, r3
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f7ff fde8 	bl	800f074 <move_window>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f4a8:	7ffb      	ldrb	r3, [r7, #31]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d128      	bne.n	800f500 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f4c2:	4413      	add	r3, r2
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7ff fb0c 	bl	800eae2 <ld_dword>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f4d0:	4323      	orrs	r3, r4
 800f4d2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	009b      	lsls	r3, r3, #2
 800f4de:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f4e2:	4413      	add	r3, r2
 800f4e4:	6879      	ldr	r1, [r7, #4]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff fb39 	bl	800eb5e <st_dword>
			fs->wflag = 1;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	70da      	strb	r2, [r3, #3]
			break;
 800f4f2:	e006      	b.n	800f502 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f4f4:	bf00      	nop
 800f4f6:	e004      	b.n	800f502 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f4f8:	bf00      	nop
 800f4fa:	e002      	b.n	800f502 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f4fc:	bf00      	nop
 800f4fe:	e000      	b.n	800f502 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f500:	bf00      	nop
		}
	}
	return res;
 800f502:	7ffb      	ldrb	r3, [r7, #31]
}
 800f504:	4618      	mov	r0, r3
 800f506:	3724      	adds	r7, #36	@ 0x24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd90      	pop	{r4, r7, pc}

0800f50c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b088      	sub	sp, #32
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d904      	bls.n	800f532 <remove_chain+0x26>
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	699b      	ldr	r3, [r3, #24]
 800f52c:	68ba      	ldr	r2, [r7, #8]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d301      	bcc.n	800f536 <remove_chain+0x2a>
 800f532:	2302      	movs	r3, #2
 800f534:	e04b      	b.n	800f5ce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00c      	beq.n	800f556 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f53c:	f04f 32ff 	mov.w	r2, #4294967295
 800f540:	6879      	ldr	r1, [r7, #4]
 800f542:	69b8      	ldr	r0, [r7, #24]
 800f544:	f7ff fef8 	bl	800f338 <put_fat>
 800f548:	4603      	mov	r3, r0
 800f54a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f54c:	7ffb      	ldrb	r3, [r7, #31]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <remove_chain+0x4a>
 800f552:	7ffb      	ldrb	r3, [r7, #31]
 800f554:	e03b      	b.n	800f5ce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f556:	68b9      	ldr	r1, [r7, #8]
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f7ff fe46 	bl	800f1ea <get_fat>
 800f55e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d031      	beq.n	800f5ca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <remove_chain+0x64>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e02e      	b.n	800f5ce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f576:	d101      	bne.n	800f57c <remove_chain+0x70>
 800f578:	2301      	movs	r3, #1
 800f57a:	e028      	b.n	800f5ce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f57c:	2200      	movs	r2, #0
 800f57e:	68b9      	ldr	r1, [r7, #8]
 800f580:	69b8      	ldr	r0, [r7, #24]
 800f582:	f7ff fed9 	bl	800f338 <put_fat>
 800f586:	4603      	mov	r3, r0
 800f588:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f58a:	7ffb      	ldrb	r3, [r7, #31]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d001      	beq.n	800f594 <remove_chain+0x88>
 800f590:	7ffb      	ldrb	r3, [r7, #31]
 800f592:	e01c      	b.n	800f5ce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	695a      	ldr	r2, [r3, #20]
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	699b      	ldr	r3, [r3, #24]
 800f59c:	3b02      	subs	r3, #2
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d20b      	bcs.n	800f5ba <remove_chain+0xae>
			fs->free_clst++;
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	695b      	ldr	r3, [r3, #20]
 800f5a6:	1c5a      	adds	r2, r3, #1
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	791b      	ldrb	r3, [r3, #4]
 800f5b0:	f043 0301 	orr.w	r3, r3, #1
 800f5b4:	b2da      	uxtb	r2, r3
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	68ba      	ldr	r2, [r7, #8]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d3c6      	bcc.n	800f556 <remove_chain+0x4a>
 800f5c8:	e000      	b.n	800f5cc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f5ca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f5cc:	2300      	movs	r3, #0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3720      	adds	r7, #32
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b088      	sub	sp, #32
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d10d      	bne.n	800f608 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d004      	beq.n	800f602 <create_chain+0x2c>
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	699b      	ldr	r3, [r3, #24]
 800f5fc:	69ba      	ldr	r2, [r7, #24]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d31b      	bcc.n	800f63a <create_chain+0x64>
 800f602:	2301      	movs	r3, #1
 800f604:	61bb      	str	r3, [r7, #24]
 800f606:	e018      	b.n	800f63a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f608:	6839      	ldr	r1, [r7, #0]
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f7ff fded 	bl	800f1ea <get_fat>
 800f610:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2b01      	cmp	r3, #1
 800f616:	d801      	bhi.n	800f61c <create_chain+0x46>
 800f618:	2301      	movs	r3, #1
 800f61a:	e070      	b.n	800f6fe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f622:	d101      	bne.n	800f628 <create_chain+0x52>
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	e06a      	b.n	800f6fe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	699b      	ldr	r3, [r3, #24]
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d201      	bcs.n	800f636 <create_chain+0x60>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	e063      	b.n	800f6fe <create_chain+0x128>
		scl = clst;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	3301      	adds	r3, #1
 800f642:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	699b      	ldr	r3, [r3, #24]
 800f648:	69fa      	ldr	r2, [r7, #28]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d307      	bcc.n	800f65e <create_chain+0x88>
				ncl = 2;
 800f64e:	2302      	movs	r3, #2
 800f650:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f652:	69fa      	ldr	r2, [r7, #28]
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	429a      	cmp	r2, r3
 800f658:	d901      	bls.n	800f65e <create_chain+0x88>
 800f65a:	2300      	movs	r3, #0
 800f65c:	e04f      	b.n	800f6fe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f65e:	69f9      	ldr	r1, [r7, #28]
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7ff fdc2 	bl	800f1ea <get_fat>
 800f666:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00e      	beq.n	800f68c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d003      	beq.n	800f67c <create_chain+0xa6>
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f67a:	d101      	bne.n	800f680 <create_chain+0xaa>
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	e03e      	b.n	800f6fe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f680:	69fa      	ldr	r2, [r7, #28]
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	429a      	cmp	r2, r3
 800f686:	d1da      	bne.n	800f63e <create_chain+0x68>
 800f688:	2300      	movs	r3, #0
 800f68a:	e038      	b.n	800f6fe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f68c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f68e:	f04f 32ff 	mov.w	r2, #4294967295
 800f692:	69f9      	ldr	r1, [r7, #28]
 800f694:	6938      	ldr	r0, [r7, #16]
 800f696:	f7ff fe4f 	bl	800f338 <put_fat>
 800f69a:	4603      	mov	r3, r0
 800f69c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f69e:	7dfb      	ldrb	r3, [r7, #23]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d109      	bne.n	800f6b8 <create_chain+0xe2>
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d006      	beq.n	800f6b8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f6aa:	69fa      	ldr	r2, [r7, #28]
 800f6ac:	6839      	ldr	r1, [r7, #0]
 800f6ae:	6938      	ldr	r0, [r7, #16]
 800f6b0:	f7ff fe42 	bl	800f338 <put_fat>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f6b8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d116      	bne.n	800f6ec <create_chain+0x116>
		fs->last_clst = ncl;
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	69fa      	ldr	r2, [r7, #28]
 800f6c2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	695a      	ldr	r2, [r3, #20]
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	699b      	ldr	r3, [r3, #24]
 800f6cc:	3b02      	subs	r3, #2
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d804      	bhi.n	800f6dc <create_chain+0x106>
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	695b      	ldr	r3, [r3, #20]
 800f6d6:	1e5a      	subs	r2, r3, #1
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	791b      	ldrb	r3, [r3, #4]
 800f6e0:	f043 0301 	orr.w	r3, r3, #1
 800f6e4:	b2da      	uxtb	r2, r3
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	711a      	strb	r2, [r3, #4]
 800f6ea:	e007      	b.n	800f6fc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f6ec:	7dfb      	ldrb	r3, [r7, #23]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d102      	bne.n	800f6f8 <create_chain+0x122>
 800f6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f6:	e000      	b.n	800f6fa <create_chain+0x124>
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f6fc:	69fb      	ldr	r3, [r7, #28]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3720      	adds	r7, #32
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}

0800f706 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f706:	b480      	push	{r7}
 800f708:	b087      	sub	sp, #28
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
 800f70e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f71a:	3304      	adds	r3, #4
 800f71c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	0a5b      	lsrs	r3, r3, #9
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	8952      	ldrh	r2, [r2, #10]
 800f726:	fbb3 f3f2 	udiv	r3, r3, r2
 800f72a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	1d1a      	adds	r2, r3, #4
 800f730:	613a      	str	r2, [r7, #16]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d101      	bne.n	800f740 <clmt_clust+0x3a>
 800f73c:	2300      	movs	r3, #0
 800f73e:	e010      	b.n	800f762 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f740:	697a      	ldr	r2, [r7, #20]
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	429a      	cmp	r2, r3
 800f746:	d307      	bcc.n	800f758 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f748:	697a      	ldr	r2, [r7, #20]
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	617b      	str	r3, [r7, #20]
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	3304      	adds	r3, #4
 800f754:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f756:	e7e9      	b.n	800f72c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f758:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	4413      	add	r3, r2
}
 800f762:	4618      	mov	r0, r3
 800f764:	371c      	adds	r7, #28
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr

0800f76e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f76e:	b580      	push	{r7, lr}
 800f770:	b086      	sub	sp, #24
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
 800f776:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f784:	d204      	bcs.n	800f790 <dir_sdi+0x22>
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	f003 031f 	and.w	r3, r3, #31
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d001      	beq.n	800f794 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f790:	2302      	movs	r3, #2
 800f792:	e063      	b.n	800f85c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	683a      	ldr	r2, [r7, #0]
 800f798:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <dir_sdi+0x46>
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	d902      	bls.n	800f7b4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7b2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d10c      	bne.n	800f7d4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	095b      	lsrs	r3, r3, #5
 800f7be:	693a      	ldr	r2, [r7, #16]
 800f7c0:	8912      	ldrh	r2, [r2, #8]
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d301      	bcc.n	800f7ca <dir_sdi+0x5c>
 800f7c6:	2302      	movs	r3, #2
 800f7c8:	e048      	b.n	800f85c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	61da      	str	r2, [r3, #28]
 800f7d2:	e029      	b.n	800f828 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	895b      	ldrh	r3, [r3, #10]
 800f7d8:	025b      	lsls	r3, r3, #9
 800f7da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f7dc:	e019      	b.n	800f812 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6979      	ldr	r1, [r7, #20]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7ff fd01 	bl	800f1ea <get_fat>
 800f7e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f0:	d101      	bne.n	800f7f6 <dir_sdi+0x88>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e032      	b.n	800f85c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d904      	bls.n	800f806 <dir_sdi+0x98>
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	699b      	ldr	r3, [r3, #24]
 800f800:	697a      	ldr	r2, [r7, #20]
 800f802:	429a      	cmp	r2, r3
 800f804:	d301      	bcc.n	800f80a <dir_sdi+0x9c>
 800f806:	2302      	movs	r3, #2
 800f808:	e028      	b.n	800f85c <dir_sdi+0xee>
			ofs -= csz;
 800f80a:	683a      	ldr	r2, [r7, #0]
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	429a      	cmp	r2, r3
 800f818:	d2e1      	bcs.n	800f7de <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f81a:	6979      	ldr	r1, [r7, #20]
 800f81c:	6938      	ldr	r0, [r7, #16]
 800f81e:	f7ff fcc5 	bl	800f1ac <clust2sect>
 800f822:	4602      	mov	r2, r0
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	69db      	ldr	r3, [r3, #28]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d101      	bne.n	800f83a <dir_sdi+0xcc>
 800f836:	2302      	movs	r3, #2
 800f838:	e010      	b.n	800f85c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	69da      	ldr	r2, [r3, #28]
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	0a5b      	lsrs	r3, r3, #9
 800f842:	441a      	add	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f854:	441a      	add	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3718      	adds	r7, #24
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	695b      	ldr	r3, [r3, #20]
 800f878:	3320      	adds	r3, #32
 800f87a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	69db      	ldr	r3, [r3, #28]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d003      	beq.n	800f88c <dir_next+0x28>
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f88a:	d301      	bcc.n	800f890 <dir_next+0x2c>
 800f88c:	2304      	movs	r3, #4
 800f88e:	e0aa      	b.n	800f9e6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f896:	2b00      	cmp	r3, #0
 800f898:	f040 8098 	bne.w	800f9cc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	69db      	ldr	r3, [r3, #28]
 800f8a0:	1c5a      	adds	r2, r3, #1
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	699b      	ldr	r3, [r3, #24]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10b      	bne.n	800f8c6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	095b      	lsrs	r3, r3, #5
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	8912      	ldrh	r2, [r2, #8]
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	f0c0 8088 	bcc.w	800f9cc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	61da      	str	r2, [r3, #28]
 800f8c2:	2304      	movs	r3, #4
 800f8c4:	e08f      	b.n	800f9e6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	0a5b      	lsrs	r3, r3, #9
 800f8ca:	68fa      	ldr	r2, [r7, #12]
 800f8cc:	8952      	ldrh	r2, [r2, #10]
 800f8ce:	3a01      	subs	r2, #1
 800f8d0:	4013      	ands	r3, r2
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d17a      	bne.n	800f9cc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4610      	mov	r0, r2
 800f8e0:	f7ff fc83 	bl	800f1ea <get_fat>
 800f8e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d801      	bhi.n	800f8f0 <dir_next+0x8c>
 800f8ec:	2302      	movs	r3, #2
 800f8ee:	e07a      	b.n	800f9e6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f6:	d101      	bne.n	800f8fc <dir_next+0x98>
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e074      	b.n	800f9e6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	699b      	ldr	r3, [r3, #24]
 800f900:	697a      	ldr	r2, [r7, #20]
 800f902:	429a      	cmp	r2, r3
 800f904:	d358      	bcc.n	800f9b8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d104      	bne.n	800f916 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	61da      	str	r2, [r3, #28]
 800f912:	2304      	movs	r3, #4
 800f914:	e067      	b.n	800f9e6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	699b      	ldr	r3, [r3, #24]
 800f91c:	4619      	mov	r1, r3
 800f91e:	4610      	mov	r0, r2
 800f920:	f7ff fe59 	bl	800f5d6 <create_chain>
 800f924:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d101      	bne.n	800f930 <dir_next+0xcc>
 800f92c:	2307      	movs	r3, #7
 800f92e:	e05a      	b.n	800f9e6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	2b01      	cmp	r3, #1
 800f934:	d101      	bne.n	800f93a <dir_next+0xd6>
 800f936:	2302      	movs	r3, #2
 800f938:	e055      	b.n	800f9e6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f940:	d101      	bne.n	800f946 <dir_next+0xe2>
 800f942:	2301      	movs	r3, #1
 800f944:	e04f      	b.n	800f9e6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f946:	68f8      	ldr	r0, [r7, #12]
 800f948:	f7ff fb50 	bl	800efec <sync_window>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d001      	beq.n	800f956 <dir_next+0xf2>
 800f952:	2301      	movs	r3, #1
 800f954:	e047      	b.n	800f9e6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	3334      	adds	r3, #52	@ 0x34
 800f95a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f95e:	2100      	movs	r1, #0
 800f960:	4618      	mov	r0, r3
 800f962:	f7ff f949 	bl	800ebf8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f966:	2300      	movs	r3, #0
 800f968:	613b      	str	r3, [r7, #16]
 800f96a:	6979      	ldr	r1, [r7, #20]
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f7ff fc1d 	bl	800f1ac <clust2sect>
 800f972:	4602      	mov	r2, r0
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	631a      	str	r2, [r3, #48]	@ 0x30
 800f978:	e012      	b.n	800f9a0 <dir_next+0x13c>
						fs->wflag = 1;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2201      	movs	r2, #1
 800f97e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7ff fb33 	bl	800efec <sync_window>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d001      	beq.n	800f990 <dir_next+0x12c>
 800f98c:	2301      	movs	r3, #1
 800f98e:	e02a      	b.n	800f9e6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	3301      	adds	r3, #1
 800f994:	613b      	str	r3, [r7, #16]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f99a:	1c5a      	adds	r2, r3, #1
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	631a      	str	r2, [r3, #48]	@ 0x30
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	895b      	ldrh	r3, [r3, #10]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d3e6      	bcc.n	800f97a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	1ad2      	subs	r2, r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f9be:	6979      	ldr	r1, [r7, #20]
 800f9c0:	68f8      	ldr	r0, [r7, #12]
 800f9c2:	f7ff fbf3 	bl	800f1ac <clust2sect>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9de:	441a      	add	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f9e4:	2300      	movs	r3, #0
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3718      	adds	r7, #24
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b086      	sub	sp, #24
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
 800f9f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f9fe:	2100      	movs	r1, #0
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f7ff feb4 	bl	800f76e <dir_sdi>
 800fa06:	4603      	mov	r3, r0
 800fa08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d12b      	bne.n	800fa68 <dir_alloc+0x7a>
		n = 0;
 800fa10:	2300      	movs	r3, #0
 800fa12:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	69db      	ldr	r3, [r3, #28]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f7ff fb2a 	bl	800f074 <move_window>
 800fa20:	4603      	mov	r3, r0
 800fa22:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fa24:	7dfb      	ldrb	r3, [r7, #23]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d11d      	bne.n	800fa66 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	2be5      	cmp	r3, #229	@ 0xe5
 800fa32:	d004      	beq.n	800fa3e <dir_alloc+0x50>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6a1b      	ldr	r3, [r3, #32]
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d107      	bne.n	800fa4e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	3301      	adds	r3, #1
 800fa42:	613b      	str	r3, [r7, #16]
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d102      	bne.n	800fa52 <dir_alloc+0x64>
 800fa4c:	e00c      	b.n	800fa68 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fa4e:	2300      	movs	r3, #0
 800fa50:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fa52:	2101      	movs	r1, #1
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f7ff ff05 	bl	800f864 <dir_next>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d0d7      	beq.n	800fa14 <dir_alloc+0x26>
 800fa64:	e000      	b.n	800fa68 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fa66:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	d101      	bne.n	800fa72 <dir_alloc+0x84>
 800fa6e:	2307      	movs	r3, #7
 800fa70:	75fb      	strb	r3, [r7, #23]
	return res;
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3718      	adds	r7, #24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b084      	sub	sp, #16
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	331a      	adds	r3, #26
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7ff f810 	bl	800eab0 <ld_word>
 800fa90:	4603      	mov	r3, r0
 800fa92:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	2b03      	cmp	r3, #3
 800fa9a:	d109      	bne.n	800fab0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	3314      	adds	r3, #20
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7ff f805 	bl	800eab0 <ld_word>
 800faa6:	4603      	mov	r3, r0
 800faa8:	041b      	lsls	r3, r3, #16
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	4313      	orrs	r3, r2
 800faae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fab0:	68fb      	ldr	r3, [r7, #12]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b084      	sub	sp, #16
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	60f8      	str	r0, [r7, #12]
 800fac2:	60b9      	str	r1, [r7, #8]
 800fac4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	331a      	adds	r3, #26
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	b292      	uxth	r2, r2
 800face:	4611      	mov	r1, r2
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7ff f829 	bl	800eb28 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	2b03      	cmp	r3, #3
 800fadc:	d109      	bne.n	800faf2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	f103 0214 	add.w	r2, r3, #20
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	0c1b      	lsrs	r3, r3, #16
 800fae8:	b29b      	uxth	r3, r3
 800faea:	4619      	mov	r1, r3
 800faec:	4610      	mov	r0, r2
 800faee:	f7ff f81b 	bl	800eb28 <st_word>
	}
}
 800faf2:	bf00      	nop
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b086      	sub	sp, #24
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fb08:	2100      	movs	r1, #0
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7ff fe2f 	bl	800f76e <dir_sdi>
 800fb10:	4603      	mov	r3, r0
 800fb12:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fb14:	7dfb      	ldrb	r3, [r7, #23]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <dir_find+0x24>
 800fb1a:	7dfb      	ldrb	r3, [r7, #23]
 800fb1c:	e03e      	b.n	800fb9c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	69db      	ldr	r3, [r3, #28]
 800fb22:	4619      	mov	r1, r3
 800fb24:	6938      	ldr	r0, [r7, #16]
 800fb26:	f7ff faa5 	bl	800f074 <move_window>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fb2e:	7dfb      	ldrb	r3, [r7, #23]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d12f      	bne.n	800fb94 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6a1b      	ldr	r3, [r3, #32]
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fb3c:	7bfb      	ldrb	r3, [r7, #15]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d102      	bne.n	800fb48 <dir_find+0x4e>
 800fb42:	2304      	movs	r3, #4
 800fb44:	75fb      	strb	r3, [r7, #23]
 800fb46:	e028      	b.n	800fb9a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6a1b      	ldr	r3, [r3, #32]
 800fb4c:	330b      	adds	r3, #11
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb54:	b2da      	uxtb	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a1b      	ldr	r3, [r3, #32]
 800fb5e:	330b      	adds	r3, #11
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	f003 0308 	and.w	r3, r3, #8
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d10a      	bne.n	800fb80 <dir_find+0x86>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a18      	ldr	r0, [r3, #32]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	3324      	adds	r3, #36	@ 0x24
 800fb72:	220b      	movs	r2, #11
 800fb74:	4619      	mov	r1, r3
 800fb76:	f7ff f85a 	bl	800ec2e <mem_cmp>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00b      	beq.n	800fb98 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb80:	2100      	movs	r1, #0
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7ff fe6e 	bl	800f864 <dir_next>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fb8c:	7dfb      	ldrb	r3, [r7, #23]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d0c5      	beq.n	800fb1e <dir_find+0x24>
 800fb92:	e002      	b.n	800fb9a <dir_find+0xa0>
		if (res != FR_OK) break;
 800fb94:	bf00      	nop
 800fb96:	e000      	b.n	800fb9a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb98:	bf00      	nop

	return res;
 800fb9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fbb2:	2101      	movs	r1, #1
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7ff ff1a 	bl	800f9ee <dir_alloc>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fbbe:	7bfb      	ldrb	r3, [r7, #15]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d11c      	bne.n	800fbfe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	69db      	ldr	r3, [r3, #28]
 800fbc8:	4619      	mov	r1, r3
 800fbca:	68b8      	ldr	r0, [r7, #8]
 800fbcc:	f7ff fa52 	bl	800f074 <move_window>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d111      	bne.n	800fbfe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a1b      	ldr	r3, [r3, #32]
 800fbde:	2220      	movs	r2, #32
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7ff f808 	bl	800ebf8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6a18      	ldr	r0, [r3, #32]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3324      	adds	r3, #36	@ 0x24
 800fbf0:	220b      	movs	r2, #11
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	f7fe ffdf 	bl	800ebb6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3710      	adds	r7, #16
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b088      	sub	sp, #32
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	3324      	adds	r3, #36	@ 0x24
 800fc1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fc1e:	220b      	movs	r2, #11
 800fc20:	2120      	movs	r1, #32
 800fc22:	68b8      	ldr	r0, [r7, #8]
 800fc24:	f7fe ffe8 	bl	800ebf8 <mem_set>
	si = i = 0; ni = 8;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	613b      	str	r3, [r7, #16]
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	61fb      	str	r3, [r7, #28]
 800fc30:	2308      	movs	r3, #8
 800fc32:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	1c5a      	adds	r2, r3, #1
 800fc38:	61fa      	str	r2, [r7, #28]
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fc42:	7efb      	ldrb	r3, [r7, #27]
 800fc44:	2b20      	cmp	r3, #32
 800fc46:	d94e      	bls.n	800fce6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fc48:	7efb      	ldrb	r3, [r7, #27]
 800fc4a:	2b2f      	cmp	r3, #47	@ 0x2f
 800fc4c:	d006      	beq.n	800fc5c <create_name+0x54>
 800fc4e:	7efb      	ldrb	r3, [r7, #27]
 800fc50:	2b5c      	cmp	r3, #92	@ 0x5c
 800fc52:	d110      	bne.n	800fc76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fc54:	e002      	b.n	800fc5c <create_name+0x54>
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	61fb      	str	r3, [r7, #28]
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	4413      	add	r3, r2
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	2b2f      	cmp	r3, #47	@ 0x2f
 800fc66:	d0f6      	beq.n	800fc56 <create_name+0x4e>
 800fc68:	68fa      	ldr	r2, [r7, #12]
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	2b5c      	cmp	r3, #92	@ 0x5c
 800fc72:	d0f0      	beq.n	800fc56 <create_name+0x4e>
			break;
 800fc74:	e038      	b.n	800fce8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fc76:	7efb      	ldrb	r3, [r7, #27]
 800fc78:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc7a:	d003      	beq.n	800fc84 <create_name+0x7c>
 800fc7c:	693a      	ldr	r2, [r7, #16]
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d30c      	bcc.n	800fc9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2b0b      	cmp	r3, #11
 800fc88:	d002      	beq.n	800fc90 <create_name+0x88>
 800fc8a:	7efb      	ldrb	r3, [r7, #27]
 800fc8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc8e:	d001      	beq.n	800fc94 <create_name+0x8c>
 800fc90:	2306      	movs	r3, #6
 800fc92:	e044      	b.n	800fd1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fc94:	2308      	movs	r3, #8
 800fc96:	613b      	str	r3, [r7, #16]
 800fc98:	230b      	movs	r3, #11
 800fc9a:	617b      	str	r3, [r7, #20]
			continue;
 800fc9c:	e022      	b.n	800fce4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fc9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	da04      	bge.n	800fcb0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fca6:	7efb      	ldrb	r3, [r7, #27]
 800fca8:	3b80      	subs	r3, #128	@ 0x80
 800fcaa:	4a1f      	ldr	r2, [pc, #124]	@ (800fd28 <create_name+0x120>)
 800fcac:	5cd3      	ldrb	r3, [r2, r3]
 800fcae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fcb0:	7efb      	ldrb	r3, [r7, #27]
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	481d      	ldr	r0, [pc, #116]	@ (800fd2c <create_name+0x124>)
 800fcb6:	f7fe ffe1 	bl	800ec7c <chk_chr>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d001      	beq.n	800fcc4 <create_name+0xbc>
 800fcc0:	2306      	movs	r3, #6
 800fcc2:	e02c      	b.n	800fd1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fcc4:	7efb      	ldrb	r3, [r7, #27]
 800fcc6:	2b60      	cmp	r3, #96	@ 0x60
 800fcc8:	d905      	bls.n	800fcd6 <create_name+0xce>
 800fcca:	7efb      	ldrb	r3, [r7, #27]
 800fccc:	2b7a      	cmp	r3, #122	@ 0x7a
 800fcce:	d802      	bhi.n	800fcd6 <create_name+0xce>
 800fcd0:	7efb      	ldrb	r3, [r7, #27]
 800fcd2:	3b20      	subs	r3, #32
 800fcd4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	1c5a      	adds	r2, r3, #1
 800fcda:	613a      	str	r2, [r7, #16]
 800fcdc:	68ba      	ldr	r2, [r7, #8]
 800fcde:	4413      	add	r3, r2
 800fce0:	7efa      	ldrb	r2, [r7, #27]
 800fce2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fce4:	e7a6      	b.n	800fc34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fce6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	441a      	add	r2, r3
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d101      	bne.n	800fcfc <create_name+0xf4>
 800fcf8:	2306      	movs	r3, #6
 800fcfa:	e010      	b.n	800fd1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2be5      	cmp	r3, #229	@ 0xe5
 800fd02:	d102      	bne.n	800fd0a <create_name+0x102>
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	2205      	movs	r2, #5
 800fd08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fd0a:	7efb      	ldrb	r3, [r7, #27]
 800fd0c:	2b20      	cmp	r3, #32
 800fd0e:	d801      	bhi.n	800fd14 <create_name+0x10c>
 800fd10:	2204      	movs	r2, #4
 800fd12:	e000      	b.n	800fd16 <create_name+0x10e>
 800fd14:	2200      	movs	r2, #0
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	330b      	adds	r3, #11
 800fd1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fd1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3720      	adds	r7, #32
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	0801bae8 	.word	0x0801bae8
 800fd2c:	0801a120 	.word	0x0801a120

0800fd30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b086      	sub	sp, #24
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fd44:	e002      	b.n	800fd4c <follow_path+0x1c>
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	2b2f      	cmp	r3, #47	@ 0x2f
 800fd52:	d0f8      	beq.n	800fd46 <follow_path+0x16>
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b5c      	cmp	r3, #92	@ 0x5c
 800fd5a:	d0f4      	beq.n	800fd46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	2b1f      	cmp	r3, #31
 800fd68:	d80a      	bhi.n	800fd80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2280      	movs	r2, #128	@ 0x80
 800fd6e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800fd72:	2100      	movs	r1, #0
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7ff fcfa 	bl	800f76e <dir_sdi>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	75fb      	strb	r3, [r7, #23]
 800fd7e:	e043      	b.n	800fe08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd80:	463b      	mov	r3, r7
 800fd82:	4619      	mov	r1, r3
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7ff ff3f 	bl	800fc08 <create_name>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fd8e:	7dfb      	ldrb	r3, [r7, #23]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d134      	bne.n	800fdfe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7ff feb0 	bl	800fafa <dir_find>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fda4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fda6:	7dfb      	ldrb	r3, [r7, #23]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00a      	beq.n	800fdc2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fdac:	7dfb      	ldrb	r3, [r7, #23]
 800fdae:	2b04      	cmp	r3, #4
 800fdb0:	d127      	bne.n	800fe02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fdb2:	7afb      	ldrb	r3, [r7, #11]
 800fdb4:	f003 0304 	and.w	r3, r3, #4
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d122      	bne.n	800fe02 <follow_path+0xd2>
 800fdbc:	2305      	movs	r3, #5
 800fdbe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fdc0:	e01f      	b.n	800fe02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fdc2:	7afb      	ldrb	r3, [r7, #11]
 800fdc4:	f003 0304 	and.w	r3, r3, #4
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d11c      	bne.n	800fe06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	799b      	ldrb	r3, [r3, #6]
 800fdd0:	f003 0310 	and.w	r3, r3, #16
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d102      	bne.n	800fdde <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fdd8:	2305      	movs	r3, #5
 800fdda:	75fb      	strb	r3, [r7, #23]
 800fddc:	e014      	b.n	800fe08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	695b      	ldr	r3, [r3, #20]
 800fde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdec:	4413      	add	r3, r2
 800fdee:	4619      	mov	r1, r3
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	f7ff fe43 	bl	800fa7c <ld_clust>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fdfc:	e7c0      	b.n	800fd80 <follow_path+0x50>
			if (res != FR_OK) break;
 800fdfe:	bf00      	nop
 800fe00:	e002      	b.n	800fe08 <follow_path+0xd8>
				break;
 800fe02:	bf00      	nop
 800fe04:	e000      	b.n	800fe08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fe06:	bf00      	nop
			}
		}
	}

	return res;
 800fe08:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3718      	adds	r7, #24
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fe12:	b480      	push	{r7}
 800fe14:	b087      	sub	sp, #28
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fe1a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d031      	beq.n	800fe8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	617b      	str	r3, [r7, #20]
 800fe2e:	e002      	b.n	800fe36 <get_ldnumber+0x24>
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	3301      	adds	r3, #1
 800fe34:	617b      	str	r3, [r7, #20]
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	2b20      	cmp	r3, #32
 800fe3c:	d903      	bls.n	800fe46 <get_ldnumber+0x34>
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	2b3a      	cmp	r3, #58	@ 0x3a
 800fe44:	d1f4      	bne.n	800fe30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	2b3a      	cmp	r3, #58	@ 0x3a
 800fe4c:	d11c      	bne.n	800fe88 <get_ldnumber+0x76>
			tp = *path;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	1c5a      	adds	r2, r3, #1
 800fe58:	60fa      	str	r2, [r7, #12]
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	3b30      	subs	r3, #48	@ 0x30
 800fe5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2b09      	cmp	r3, #9
 800fe64:	d80e      	bhi.n	800fe84 <get_ldnumber+0x72>
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d10a      	bne.n	800fe84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d107      	bne.n	800fe84 <get_ldnumber+0x72>
					vol = (int)i;
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	617b      	str	r3, [r7, #20]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	e002      	b.n	800fe8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fe88:	2300      	movs	r3, #0
 800fe8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fe8c:	693b      	ldr	r3, [r7, #16]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	371c      	adds	r7, #28
 800fe92:	46bd      	mov	sp, r7
 800fe94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe98:	4770      	bx	lr
	...

0800fe9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	70da      	strb	r2, [r3, #3]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f04f 32ff 	mov.w	r2, #4294967295
 800feb2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f7ff f8dc 	bl	800f074 <move_window>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d001      	beq.n	800fec6 <check_fs+0x2a>
 800fec2:	2304      	movs	r3, #4
 800fec4:	e038      	b.n	800ff38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	3334      	adds	r3, #52	@ 0x34
 800feca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fe fdee 	bl	800eab0 <ld_word>
 800fed4:	4603      	mov	r3, r0
 800fed6:	461a      	mov	r2, r3
 800fed8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fedc:	429a      	cmp	r2, r3
 800fede:	d001      	beq.n	800fee4 <check_fs+0x48>
 800fee0:	2303      	movs	r3, #3
 800fee2:	e029      	b.n	800ff38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800feea:	2be9      	cmp	r3, #233	@ 0xe9
 800feec:	d009      	beq.n	800ff02 <check_fs+0x66>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fef4:	2beb      	cmp	r3, #235	@ 0xeb
 800fef6:	d11e      	bne.n	800ff36 <check_fs+0x9a>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800fefe:	2b90      	cmp	r3, #144	@ 0x90
 800ff00:	d119      	bne.n	800ff36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	3334      	adds	r3, #52	@ 0x34
 800ff06:	3336      	adds	r3, #54	@ 0x36
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7fe fdea 	bl	800eae2 <ld_dword>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ff14:	4a0a      	ldr	r2, [pc, #40]	@ (800ff40 <check_fs+0xa4>)
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d101      	bne.n	800ff1e <check_fs+0x82>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	e00c      	b.n	800ff38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3334      	adds	r3, #52	@ 0x34
 800ff22:	3352      	adds	r3, #82	@ 0x52
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fe fddc 	bl	800eae2 <ld_dword>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	4a05      	ldr	r2, [pc, #20]	@ (800ff44 <check_fs+0xa8>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d101      	bne.n	800ff36 <check_fs+0x9a>
 800ff32:	2300      	movs	r3, #0
 800ff34:	e000      	b.n	800ff38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ff36:	2302      	movs	r3, #2
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	00544146 	.word	0x00544146
 800ff44:	33544146 	.word	0x33544146

0800ff48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b096      	sub	sp, #88	@ 0x58
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	4613      	mov	r3, r2
 800ff54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f7ff ff58 	bl	800fe12 <get_ldnumber>
 800ff62:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ff64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	da01      	bge.n	800ff6e <find_volume+0x26>
 800ff6a:	230b      	movs	r3, #11
 800ff6c:	e235      	b.n	80103da <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ff6e:	4aa5      	ldr	r2, [pc, #660]	@ (8010204 <find_volume+0x2bc>)
 800ff70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff76:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ff78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d101      	bne.n	800ff82 <find_volume+0x3a>
 800ff7e:	230c      	movs	r3, #12
 800ff80:	e22b      	b.n	80103da <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800ff82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ff84:	f7fe fe95 	bl	800ecb2 <lock_fs>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d101      	bne.n	800ff92 <find_volume+0x4a>
 800ff8e:	230f      	movs	r3, #15
 800ff90:	e223      	b.n	80103da <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ff98:	79fb      	ldrb	r3, [r7, #7]
 800ff9a:	f023 0301 	bic.w	r3, r3, #1
 800ff9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ffa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d01a      	beq.n	800ffde <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffaa:	785b      	ldrb	r3, [r3, #1]
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe fce1 	bl	800e974 <disk_status>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ffb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ffbc:	f003 0301 	and.w	r3, r3, #1
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d10c      	bne.n	800ffde <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ffc4:	79fb      	ldrb	r3, [r7, #7]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d007      	beq.n	800ffda <find_volume+0x92>
 800ffca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ffce:	f003 0304 	and.w	r3, r3, #4
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d001      	beq.n	800ffda <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ffd6:	230a      	movs	r3, #10
 800ffd8:	e1ff      	b.n	80103da <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800ffda:	2300      	movs	r3, #0
 800ffdc:	e1fd      	b.n	80103da <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ffde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ffe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ffec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffee:	785b      	ldrb	r3, [r3, #1]
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7fe fcd9 	bl	800e9a8 <disk_initialize>
 800fff6:	4603      	mov	r3, r0
 800fff8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fffc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010000:	f003 0301 	and.w	r3, r3, #1
 8010004:	2b00      	cmp	r3, #0
 8010006:	d001      	beq.n	801000c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010008:	2303      	movs	r3, #3
 801000a:	e1e6      	b.n	80103da <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801000c:	79fb      	ldrb	r3, [r7, #7]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d007      	beq.n	8010022 <find_volume+0xda>
 8010012:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010016:	f003 0304 	and.w	r3, r3, #4
 801001a:	2b00      	cmp	r3, #0
 801001c:	d001      	beq.n	8010022 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801001e:	230a      	movs	r3, #10
 8010020:	e1db      	b.n	80103da <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010022:	2300      	movs	r3, #0
 8010024:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010026:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010028:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801002a:	f7ff ff37 	bl	800fe9c <check_fs>
 801002e:	4603      	mov	r3, r0
 8010030:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010034:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010038:	2b02      	cmp	r3, #2
 801003a:	d149      	bne.n	80100d0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801003c:	2300      	movs	r3, #0
 801003e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010040:	e01e      	b.n	8010080 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010044:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801004a:	011b      	lsls	r3, r3, #4
 801004c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010050:	4413      	add	r3, r2
 8010052:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010056:	3304      	adds	r3, #4
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d006      	beq.n	801006c <find_volume+0x124>
 801005e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010060:	3308      	adds	r3, #8
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fd3d 	bl	800eae2 <ld_dword>
 8010068:	4602      	mov	r2, r0
 801006a:	e000      	b.n	801006e <find_volume+0x126>
 801006c:	2200      	movs	r2, #0
 801006e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	3358      	adds	r3, #88	@ 0x58
 8010074:	443b      	add	r3, r7
 8010076:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801007a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801007c:	3301      	adds	r3, #1
 801007e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010082:	2b03      	cmp	r3, #3
 8010084:	d9dd      	bls.n	8010042 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010086:	2300      	movs	r3, #0
 8010088:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801008a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801008c:	2b00      	cmp	r3, #0
 801008e:	d002      	beq.n	8010096 <find_volume+0x14e>
 8010090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010092:	3b01      	subs	r3, #1
 8010094:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	3358      	adds	r3, #88	@ 0x58
 801009c:	443b      	add	r3, r7
 801009e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80100a2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80100a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d005      	beq.n	80100b6 <find_volume+0x16e>
 80100aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80100ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80100ae:	f7ff fef5 	bl	800fe9c <check_fs>
 80100b2:	4603      	mov	r3, r0
 80100b4:	e000      	b.n	80100b8 <find_volume+0x170>
 80100b6:	2303      	movs	r3, #3
 80100b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80100bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d905      	bls.n	80100d0 <find_volume+0x188>
 80100c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80100c6:	3301      	adds	r3, #1
 80100c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80100ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80100cc:	2b03      	cmp	r3, #3
 80100ce:	d9e2      	bls.n	8010096 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80100d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80100d4:	2b04      	cmp	r3, #4
 80100d6:	d101      	bne.n	80100dc <find_volume+0x194>
 80100d8:	2301      	movs	r3, #1
 80100da:	e17e      	b.n	80103da <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80100dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d901      	bls.n	80100e8 <find_volume+0x1a0>
 80100e4:	230d      	movs	r3, #13
 80100e6:	e178      	b.n	80103da <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80100e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ea:	3334      	adds	r3, #52	@ 0x34
 80100ec:	330b      	adds	r3, #11
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fe fcde 	bl	800eab0 <ld_word>
 80100f4:	4603      	mov	r3, r0
 80100f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100fa:	d001      	beq.n	8010100 <find_volume+0x1b8>
 80100fc:	230d      	movs	r3, #13
 80100fe:	e16c      	b.n	80103da <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010102:	3334      	adds	r3, #52	@ 0x34
 8010104:	3316      	adds	r3, #22
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe fcd2 	bl	800eab0 <ld_word>
 801010c:	4603      	mov	r3, r0
 801010e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010112:	2b00      	cmp	r3, #0
 8010114:	d106      	bne.n	8010124 <find_volume+0x1dc>
 8010116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010118:	3334      	adds	r3, #52	@ 0x34
 801011a:	3324      	adds	r3, #36	@ 0x24
 801011c:	4618      	mov	r0, r3
 801011e:	f7fe fce0 	bl	800eae2 <ld_dword>
 8010122:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010128:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801012a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010132:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010136:	789b      	ldrb	r3, [r3, #2]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d005      	beq.n	8010148 <find_volume+0x200>
 801013c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013e:	789b      	ldrb	r3, [r3, #2]
 8010140:	2b02      	cmp	r3, #2
 8010142:	d001      	beq.n	8010148 <find_volume+0x200>
 8010144:	230d      	movs	r3, #13
 8010146:	e148      	b.n	80103da <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014a:	789b      	ldrb	r3, [r3, #2]
 801014c:	461a      	mov	r2, r3
 801014e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010150:	fb02 f303 	mul.w	r3, r2, r3
 8010154:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801015c:	461a      	mov	r2, r3
 801015e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010160:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010164:	895b      	ldrh	r3, [r3, #10]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d008      	beq.n	801017c <find_volume+0x234>
 801016a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801016c:	895b      	ldrh	r3, [r3, #10]
 801016e:	461a      	mov	r2, r3
 8010170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010172:	895b      	ldrh	r3, [r3, #10]
 8010174:	3b01      	subs	r3, #1
 8010176:	4013      	ands	r3, r2
 8010178:	2b00      	cmp	r3, #0
 801017a:	d001      	beq.n	8010180 <find_volume+0x238>
 801017c:	230d      	movs	r3, #13
 801017e:	e12c      	b.n	80103da <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010182:	3334      	adds	r3, #52	@ 0x34
 8010184:	3311      	adds	r3, #17
 8010186:	4618      	mov	r0, r3
 8010188:	f7fe fc92 	bl	800eab0 <ld_word>
 801018c:	4603      	mov	r3, r0
 801018e:	461a      	mov	r2, r3
 8010190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010192:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010196:	891b      	ldrh	r3, [r3, #8]
 8010198:	f003 030f 	and.w	r3, r3, #15
 801019c:	b29b      	uxth	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d001      	beq.n	80101a6 <find_volume+0x25e>
 80101a2:	230d      	movs	r3, #13
 80101a4:	e119      	b.n	80103da <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80101a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a8:	3334      	adds	r3, #52	@ 0x34
 80101aa:	3313      	adds	r3, #19
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7fe fc7f 	bl	800eab0 <ld_word>
 80101b2:	4603      	mov	r3, r0
 80101b4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80101b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d106      	bne.n	80101ca <find_volume+0x282>
 80101bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101be:	3334      	adds	r3, #52	@ 0x34
 80101c0:	3320      	adds	r3, #32
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fe fc8d 	bl	800eae2 <ld_dword>
 80101c8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80101ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101cc:	3334      	adds	r3, #52	@ 0x34
 80101ce:	330e      	adds	r3, #14
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe fc6d 	bl	800eab0 <ld_word>
 80101d6:	4603      	mov	r3, r0
 80101d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80101da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d101      	bne.n	80101e4 <find_volume+0x29c>
 80101e0:	230d      	movs	r3, #13
 80101e2:	e0fa      	b.n	80103da <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80101e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80101e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101e8:	4413      	add	r3, r2
 80101ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101ec:	8912      	ldrh	r2, [r2, #8]
 80101ee:	0912      	lsrs	r2, r2, #4
 80101f0:	b292      	uxth	r2, r2
 80101f2:	4413      	add	r3, r2
 80101f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80101f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d204      	bcs.n	8010208 <find_volume+0x2c0>
 80101fe:	230d      	movs	r3, #13
 8010200:	e0eb      	b.n	80103da <find_volume+0x492>
 8010202:	bf00      	nop
 8010204:	200016a4 	.word	0x200016a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010208:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801020a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801020c:	1ad3      	subs	r3, r2, r3
 801020e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010210:	8952      	ldrh	r2, [r2, #10]
 8010212:	fbb3 f3f2 	udiv	r3, r3, r2
 8010216:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021a:	2b00      	cmp	r3, #0
 801021c:	d101      	bne.n	8010222 <find_volume+0x2da>
 801021e:	230d      	movs	r3, #13
 8010220:	e0db      	b.n	80103da <find_volume+0x492>
		fmt = FS_FAT32;
 8010222:	2303      	movs	r3, #3
 8010224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801022a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801022e:	4293      	cmp	r3, r2
 8010230:	d802      	bhi.n	8010238 <find_volume+0x2f0>
 8010232:	2302      	movs	r3, #2
 8010234:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801023e:	4293      	cmp	r3, r2
 8010240:	d802      	bhi.n	8010248 <find_volume+0x300>
 8010242:	2301      	movs	r3, #1
 8010244:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801024a:	1c9a      	adds	r2, r3, #2
 801024c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801024e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010252:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010254:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010256:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801025a:	441a      	add	r2, r3
 801025c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801025e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010260:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010264:	441a      	add	r2, r3
 8010266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010268:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801026a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801026e:	2b03      	cmp	r3, #3
 8010270:	d11e      	bne.n	80102b0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010274:	3334      	adds	r3, #52	@ 0x34
 8010276:	332a      	adds	r3, #42	@ 0x2a
 8010278:	4618      	mov	r0, r3
 801027a:	f7fe fc19 	bl	800eab0 <ld_word>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d001      	beq.n	8010288 <find_volume+0x340>
 8010284:	230d      	movs	r3, #13
 8010286:	e0a8      	b.n	80103da <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801028a:	891b      	ldrh	r3, [r3, #8]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d001      	beq.n	8010294 <find_volume+0x34c>
 8010290:	230d      	movs	r3, #13
 8010292:	e0a2      	b.n	80103da <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010296:	3334      	adds	r3, #52	@ 0x34
 8010298:	332c      	adds	r3, #44	@ 0x2c
 801029a:	4618      	mov	r0, r3
 801029c:	f7fe fc21 	bl	800eae2 <ld_dword>
 80102a0:	4602      	mov	r2, r0
 80102a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80102a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a8:	699b      	ldr	r3, [r3, #24]
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80102ae:	e01f      	b.n	80102f0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80102b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b2:	891b      	ldrh	r3, [r3, #8]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d101      	bne.n	80102bc <find_volume+0x374>
 80102b8:	230d      	movs	r3, #13
 80102ba:	e08e      	b.n	80103da <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80102bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102c2:	441a      	add	r2, r3
 80102c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80102c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d103      	bne.n	80102d8 <find_volume+0x390>
 80102d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d2:	699b      	ldr	r3, [r3, #24]
 80102d4:	005b      	lsls	r3, r3, #1
 80102d6:	e00a      	b.n	80102ee <find_volume+0x3a6>
 80102d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102da:	699a      	ldr	r2, [r3, #24]
 80102dc:	4613      	mov	r3, r2
 80102de:	005b      	lsls	r3, r3, #1
 80102e0:	4413      	add	r3, r2
 80102e2:	085a      	lsrs	r2, r3, #1
 80102e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e6:	699b      	ldr	r3, [r3, #24]
 80102e8:	f003 0301 	and.w	r3, r3, #1
 80102ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80102ee:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80102f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f2:	69da      	ldr	r2, [r3, #28]
 80102f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102f6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80102fa:	0a5b      	lsrs	r3, r3, #9
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d201      	bcs.n	8010304 <find_volume+0x3bc>
 8010300:	230d      	movs	r3, #13
 8010302:	e06a      	b.n	80103da <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010306:	f04f 32ff 	mov.w	r2, #4294967295
 801030a:	615a      	str	r2, [r3, #20]
 801030c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801030e:	695a      	ldr	r2, [r3, #20]
 8010310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010312:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010316:	2280      	movs	r2, #128	@ 0x80
 8010318:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801031a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801031e:	2b03      	cmp	r3, #3
 8010320:	d149      	bne.n	80103b6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010324:	3334      	adds	r3, #52	@ 0x34
 8010326:	3330      	adds	r3, #48	@ 0x30
 8010328:	4618      	mov	r0, r3
 801032a:	f7fe fbc1 	bl	800eab0 <ld_word>
 801032e:	4603      	mov	r3, r0
 8010330:	2b01      	cmp	r3, #1
 8010332:	d140      	bne.n	80103b6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010336:	3301      	adds	r3, #1
 8010338:	4619      	mov	r1, r3
 801033a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801033c:	f7fe fe9a 	bl	800f074 <move_window>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d137      	bne.n	80103b6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010348:	2200      	movs	r2, #0
 801034a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801034c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801034e:	3334      	adds	r3, #52	@ 0x34
 8010350:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010354:	4618      	mov	r0, r3
 8010356:	f7fe fbab 	bl	800eab0 <ld_word>
 801035a:	4603      	mov	r3, r0
 801035c:	461a      	mov	r2, r3
 801035e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010362:	429a      	cmp	r2, r3
 8010364:	d127      	bne.n	80103b6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010368:	3334      	adds	r3, #52	@ 0x34
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe fbb9 	bl	800eae2 <ld_dword>
 8010370:	4603      	mov	r3, r0
 8010372:	4a1c      	ldr	r2, [pc, #112]	@ (80103e4 <find_volume+0x49c>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d11e      	bne.n	80103b6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801037a:	3334      	adds	r3, #52	@ 0x34
 801037c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010380:	4618      	mov	r0, r3
 8010382:	f7fe fbae 	bl	800eae2 <ld_dword>
 8010386:	4603      	mov	r3, r0
 8010388:	4a17      	ldr	r2, [pc, #92]	@ (80103e8 <find_volume+0x4a0>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d113      	bne.n	80103b6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801038e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010390:	3334      	adds	r3, #52	@ 0x34
 8010392:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010396:	4618      	mov	r0, r3
 8010398:	f7fe fba3 	bl	800eae2 <ld_dword>
 801039c:	4602      	mov	r2, r0
 801039e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80103a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a4:	3334      	adds	r3, #52	@ 0x34
 80103a6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fe fb99 	bl	800eae2 <ld_dword>
 80103b0:	4602      	mov	r2, r0
 80103b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80103b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80103bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80103be:	4b0b      	ldr	r3, [pc, #44]	@ (80103ec <find_volume+0x4a4>)
 80103c0:	881b      	ldrh	r3, [r3, #0]
 80103c2:	3301      	adds	r3, #1
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	4b09      	ldr	r3, [pc, #36]	@ (80103ec <find_volume+0x4a4>)
 80103c8:	801a      	strh	r2, [r3, #0]
 80103ca:	4b08      	ldr	r3, [pc, #32]	@ (80103ec <find_volume+0x4a4>)
 80103cc:	881a      	ldrh	r2, [r3, #0]
 80103ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80103d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80103d4:	f7fe fde6 	bl	800efa4 <clear_lock>
#endif
	return FR_OK;
 80103d8:	2300      	movs	r3, #0
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3758      	adds	r7, #88	@ 0x58
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	41615252 	.word	0x41615252
 80103e8:	61417272 	.word	0x61417272
 80103ec:	200016a8 	.word	0x200016a8

080103f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80103fa:	2309      	movs	r3, #9
 80103fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d02e      	beq.n	8010462 <validate+0x72>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d02a      	beq.n	8010462 <validate+0x72>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d025      	beq.n	8010462 <validate+0x72>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	889a      	ldrh	r2, [r3, #4]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	88db      	ldrh	r3, [r3, #6]
 8010420:	429a      	cmp	r2, r3
 8010422:	d11e      	bne.n	8010462 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4618      	mov	r0, r3
 801042a:	f7fe fc42 	bl	800ecb2 <lock_fs>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d014      	beq.n	801045e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	785b      	ldrb	r3, [r3, #1]
 801043a:	4618      	mov	r0, r3
 801043c:	f7fe fa9a 	bl	800e974 <disk_status>
 8010440:	4603      	mov	r3, r0
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	2b00      	cmp	r3, #0
 8010448:	d102      	bne.n	8010450 <validate+0x60>
				res = FR_OK;
 801044a:	2300      	movs	r3, #0
 801044c:	73fb      	strb	r3, [r7, #15]
 801044e:	e008      	b.n	8010462 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2100      	movs	r1, #0
 8010456:	4618      	mov	r0, r3
 8010458:	f7fe fc41 	bl	800ecde <unlock_fs>
 801045c:	e001      	b.n	8010462 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801045e:	230f      	movs	r3, #15
 8010460:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010462:	7bfb      	ldrb	r3, [r7, #15]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d102      	bne.n	801046e <validate+0x7e>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	e000      	b.n	8010470 <validate+0x80>
 801046e:	2300      	movs	r3, #0
 8010470:	683a      	ldr	r2, [r7, #0]
 8010472:	6013      	str	r3, [r2, #0]
	return res;
 8010474:	7bfb      	ldrb	r3, [r7, #15]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
	...

08010480 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	4613      	mov	r3, r2
 801048c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010492:	f107 0310 	add.w	r3, r7, #16
 8010496:	4618      	mov	r0, r3
 8010498:	f7ff fcbb 	bl	800fe12 <get_ldnumber>
 801049c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	da01      	bge.n	80104a8 <f_mount+0x28>
 80104a4:	230b      	movs	r3, #11
 80104a6:	e048      	b.n	801053a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80104a8:	4a26      	ldr	r2, [pc, #152]	@ (8010544 <f_mount+0xc4>)
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00f      	beq.n	80104d8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80104b8:	69b8      	ldr	r0, [r7, #24]
 80104ba:	f7fe fd73 	bl	800efa4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f001 f837 	bl	8011536 <ff_del_syncobj>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d101      	bne.n	80104d2 <f_mount+0x52>
 80104ce:	2302      	movs	r3, #2
 80104d0:	e033      	b.n	801053a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80104d2:	69bb      	ldr	r3, [r7, #24]
 80104d4:	2200      	movs	r2, #0
 80104d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d00f      	beq.n	80104fe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2200      	movs	r2, #0
 80104e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	b2da      	uxtb	r2, r3
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	330c      	adds	r3, #12
 80104ec:	4619      	mov	r1, r3
 80104ee:	4610      	mov	r0, r2
 80104f0:	f001 f803 	bl	80114fa <ff_cre_syncobj>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d101      	bne.n	80104fe <f_mount+0x7e>
 80104fa:	2302      	movs	r3, #2
 80104fc:	e01d      	b.n	801053a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80104fe:	68fa      	ldr	r2, [r7, #12]
 8010500:	4910      	ldr	r1, [pc, #64]	@ (8010544 <f_mount+0xc4>)
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d002      	beq.n	8010514 <f_mount+0x94>
 801050e:	79fb      	ldrb	r3, [r7, #7]
 8010510:	2b01      	cmp	r3, #1
 8010512:	d001      	beq.n	8010518 <f_mount+0x98>
 8010514:	2300      	movs	r3, #0
 8010516:	e010      	b.n	801053a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010518:	f107 010c 	add.w	r1, r7, #12
 801051c:	f107 0308 	add.w	r3, r7, #8
 8010520:	2200      	movs	r2, #0
 8010522:	4618      	mov	r0, r3
 8010524:	f7ff fd10 	bl	800ff48 <find_volume>
 8010528:	4603      	mov	r3, r0
 801052a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	7dfa      	ldrb	r2, [r7, #23]
 8010530:	4611      	mov	r1, r2
 8010532:	4618      	mov	r0, r3
 8010534:	f7fe fbd3 	bl	800ecde <unlock_fs>
 8010538:	7dfb      	ldrb	r3, [r7, #23]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3720      	adds	r7, #32
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	200016a4 	.word	0x200016a4

08010548 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b098      	sub	sp, #96	@ 0x60
 801054c:	af00      	add	r7, sp, #0
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	4613      	mov	r3, r2
 8010554:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d101      	bne.n	8010560 <f_open+0x18>
 801055c:	2309      	movs	r3, #9
 801055e:	e1b0      	b.n	80108c2 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010560:	79fb      	ldrb	r3, [r7, #7]
 8010562:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010566:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010568:	79fa      	ldrb	r2, [r7, #7]
 801056a:	f107 0110 	add.w	r1, r7, #16
 801056e:	f107 0308 	add.w	r3, r7, #8
 8010572:	4618      	mov	r0, r3
 8010574:	f7ff fce8 	bl	800ff48 <find_volume>
 8010578:	4603      	mov	r3, r0
 801057a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801057e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010582:	2b00      	cmp	r3, #0
 8010584:	f040 818d 	bne.w	80108a2 <f_open+0x35a>
		dj.obj.fs = fs;
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801058c:	68ba      	ldr	r2, [r7, #8]
 801058e:	f107 0314 	add.w	r3, r7, #20
 8010592:	4611      	mov	r1, r2
 8010594:	4618      	mov	r0, r3
 8010596:	f7ff fbcb 	bl	800fd30 <follow_path>
 801059a:	4603      	mov	r3, r0
 801059c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80105a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d118      	bne.n	80105da <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80105a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80105ac:	b25b      	sxtb	r3, r3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	da03      	bge.n	80105ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80105b2:	2306      	movs	r3, #6
 80105b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80105b8:	e00f      	b.n	80105da <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80105ba:	79fb      	ldrb	r3, [r7, #7]
 80105bc:	2b01      	cmp	r3, #1
 80105be:	bf8c      	ite	hi
 80105c0:	2301      	movhi	r3, #1
 80105c2:	2300      	movls	r3, #0
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	461a      	mov	r2, r3
 80105c8:	f107 0314 	add.w	r3, r7, #20
 80105cc:	4611      	mov	r1, r2
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fe fba0 	bl	800ed14 <chk_lock>
 80105d4:	4603      	mov	r3, r0
 80105d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80105da:	79fb      	ldrb	r3, [r7, #7]
 80105dc:	f003 031c 	and.w	r3, r3, #28
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d07f      	beq.n	80106e4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80105e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d017      	beq.n	801061c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80105ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80105f0:	2b04      	cmp	r3, #4
 80105f2:	d10e      	bne.n	8010612 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80105f4:	f7fe fbea 	bl	800edcc <enq_lock>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d006      	beq.n	801060c <f_open+0xc4>
 80105fe:	f107 0314 	add.w	r3, r7, #20
 8010602:	4618      	mov	r0, r3
 8010604:	f7ff face 	bl	800fba4 <dir_register>
 8010608:	4603      	mov	r3, r0
 801060a:	e000      	b.n	801060e <f_open+0xc6>
 801060c:	2312      	movs	r3, #18
 801060e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010612:	79fb      	ldrb	r3, [r7, #7]
 8010614:	f043 0308 	orr.w	r3, r3, #8
 8010618:	71fb      	strb	r3, [r7, #7]
 801061a:	e010      	b.n	801063e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801061c:	7ebb      	ldrb	r3, [r7, #26]
 801061e:	f003 0311 	and.w	r3, r3, #17
 8010622:	2b00      	cmp	r3, #0
 8010624:	d003      	beq.n	801062e <f_open+0xe6>
					res = FR_DENIED;
 8010626:	2307      	movs	r3, #7
 8010628:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801062c:	e007      	b.n	801063e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801062e:	79fb      	ldrb	r3, [r7, #7]
 8010630:	f003 0304 	and.w	r3, r3, #4
 8010634:	2b00      	cmp	r3, #0
 8010636:	d002      	beq.n	801063e <f_open+0xf6>
 8010638:	2308      	movs	r3, #8
 801063a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801063e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010642:	2b00      	cmp	r3, #0
 8010644:	d168      	bne.n	8010718 <f_open+0x1d0>
 8010646:	79fb      	ldrb	r3, [r7, #7]
 8010648:	f003 0308 	and.w	r3, r3, #8
 801064c:	2b00      	cmp	r3, #0
 801064e:	d063      	beq.n	8010718 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010650:	f7fe f932 	bl	800e8b8 <get_fattime>
 8010654:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010658:	330e      	adds	r3, #14
 801065a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801065c:	4618      	mov	r0, r3
 801065e:	f7fe fa7e 	bl	800eb5e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010664:	3316      	adds	r3, #22
 8010666:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010668:	4618      	mov	r0, r3
 801066a:	f7fe fa78 	bl	800eb5e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801066e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010670:	330b      	adds	r3, #11
 8010672:	2220      	movs	r2, #32
 8010674:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801067a:	4611      	mov	r1, r2
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff f9fd 	bl	800fa7c <ld_clust>
 8010682:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010688:	2200      	movs	r2, #0
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff fa15 	bl	800faba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010692:	331c      	adds	r3, #28
 8010694:	2100      	movs	r1, #0
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fa61 	bl	800eb5e <st_dword>
					fs->wflag = 1;
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	2201      	movs	r2, #1
 80106a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80106a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d037      	beq.n	8010718 <f_open+0x1d0>
						dw = fs->winsect;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106ac:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80106ae:	f107 0314 	add.w	r3, r7, #20
 80106b2:	2200      	movs	r2, #0
 80106b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe ff28 	bl	800f50c <remove_chain>
 80106bc:	4603      	mov	r3, r0
 80106be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80106c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d126      	bne.n	8010718 <f_open+0x1d0>
							res = move_window(fs, dw);
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fe fcd0 	bl	800f074 <move_window>
 80106d4:	4603      	mov	r3, r0
 80106d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80106de:	3a01      	subs	r2, #1
 80106e0:	611a      	str	r2, [r3, #16]
 80106e2:	e019      	b.n	8010718 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80106e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d115      	bne.n	8010718 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80106ec:	7ebb      	ldrb	r3, [r7, #26]
 80106ee:	f003 0310 	and.w	r3, r3, #16
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d003      	beq.n	80106fe <f_open+0x1b6>
					res = FR_NO_FILE;
 80106f6:	2304      	movs	r3, #4
 80106f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80106fc:	e00c      	b.n	8010718 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80106fe:	79fb      	ldrb	r3, [r7, #7]
 8010700:	f003 0302 	and.w	r3, r3, #2
 8010704:	2b00      	cmp	r3, #0
 8010706:	d007      	beq.n	8010718 <f_open+0x1d0>
 8010708:	7ebb      	ldrb	r3, [r7, #26]
 801070a:	f003 0301 	and.w	r3, r3, #1
 801070e:	2b00      	cmp	r3, #0
 8010710:	d002      	beq.n	8010718 <f_open+0x1d0>
						res = FR_DENIED;
 8010712:	2307      	movs	r3, #7
 8010714:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010718:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801071c:	2b00      	cmp	r3, #0
 801071e:	d126      	bne.n	801076e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010720:	79fb      	ldrb	r3, [r7, #7]
 8010722:	f003 0308 	and.w	r3, r3, #8
 8010726:	2b00      	cmp	r3, #0
 8010728:	d003      	beq.n	8010732 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801072a:	79fb      	ldrb	r3, [r7, #7]
 801072c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010730:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801073a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010740:	79fb      	ldrb	r3, [r7, #7]
 8010742:	2b01      	cmp	r3, #1
 8010744:	bf8c      	ite	hi
 8010746:	2301      	movhi	r3, #1
 8010748:	2300      	movls	r3, #0
 801074a:	b2db      	uxtb	r3, r3
 801074c:	461a      	mov	r2, r3
 801074e:	f107 0314 	add.w	r3, r7, #20
 8010752:	4611      	mov	r1, r2
 8010754:	4618      	mov	r0, r3
 8010756:	f7fe fb5b 	bl	800ee10 <inc_lock>
 801075a:	4602      	mov	r2, r0
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d102      	bne.n	801076e <f_open+0x226>
 8010768:	2302      	movs	r3, #2
 801076a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801076e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010772:	2b00      	cmp	r3, #0
 8010774:	f040 8095 	bne.w	80108a2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801077c:	4611      	mov	r1, r2
 801077e:	4618      	mov	r0, r3
 8010780:	f7ff f97c 	bl	800fa7c <ld_clust>
 8010784:	4602      	mov	r2, r0
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801078a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801078c:	331c      	adds	r3, #28
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe f9a7 	bl	800eae2 <ld_dword>
 8010794:	4602      	mov	r2, r0
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2200      	movs	r2, #0
 801079e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80107a0:	693a      	ldr	r2, [r7, #16]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	88da      	ldrh	r2, [r3, #6]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	79fa      	ldrb	r2, [r7, #7]
 80107b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2200      	movs	r2, #0
 80107b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2200      	movs	r2, #0
 80107c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	3330      	adds	r3, #48	@ 0x30
 80107ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107ce:	2100      	movs	r1, #0
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7fe fa11 	bl	800ebf8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80107d6:	79fb      	ldrb	r3, [r7, #7]
 80107d8:	f003 0320 	and.w	r3, r3, #32
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d060      	beq.n	80108a2 <f_open+0x35a>
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	68db      	ldr	r3, [r3, #12]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d05c      	beq.n	80108a2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	68da      	ldr	r2, [r3, #12]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	895b      	ldrh	r3, [r3, #10]
 80107f4:	025b      	lsls	r3, r3, #9
 80107f6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	689b      	ldr	r3, [r3, #8]
 80107fc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	657b      	str	r3, [r7, #84]	@ 0x54
 8010804:	e016      	b.n	8010834 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801080a:	4618      	mov	r0, r3
 801080c:	f7fe fced 	bl	800f1ea <get_fat>
 8010810:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010814:	2b01      	cmp	r3, #1
 8010816:	d802      	bhi.n	801081e <f_open+0x2d6>
 8010818:	2302      	movs	r3, #2
 801081a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801081e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010824:	d102      	bne.n	801082c <f_open+0x2e4>
 8010826:	2301      	movs	r3, #1
 8010828:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801082c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801082e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	657b      	str	r3, [r7, #84]	@ 0x54
 8010834:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010838:	2b00      	cmp	r3, #0
 801083a:	d103      	bne.n	8010844 <f_open+0x2fc>
 801083c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801083e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010840:	429a      	cmp	r2, r3
 8010842:	d8e0      	bhi.n	8010806 <f_open+0x2be>
				}
				fp->clust = clst;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010848:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801084a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801084e:	2b00      	cmp	r3, #0
 8010850:	d127      	bne.n	80108a2 <f_open+0x35a>
 8010852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010858:	2b00      	cmp	r3, #0
 801085a:	d022      	beq.n	80108a2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010860:	4618      	mov	r0, r3
 8010862:	f7fe fca3 	bl	800f1ac <clust2sect>
 8010866:	6478      	str	r0, [r7, #68]	@ 0x44
 8010868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801086a:	2b00      	cmp	r3, #0
 801086c:	d103      	bne.n	8010876 <f_open+0x32e>
						res = FR_INT_ERR;
 801086e:	2302      	movs	r3, #2
 8010870:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010874:	e015      	b.n	80108a2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010878:	0a5a      	lsrs	r2, r3, #9
 801087a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801087c:	441a      	add	r2, r3
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	7858      	ldrb	r0, [r3, #1]
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6a1a      	ldr	r2, [r3, #32]
 8010890:	2301      	movs	r3, #1
 8010892:	f7fe f8af 	bl	800e9f4 <disk_read>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <f_open+0x35a>
 801089c:	2301      	movs	r3, #1
 801089e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80108a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d002      	beq.n	80108b0 <f_open+0x368>
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2200      	movs	r2, #0
 80108ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80108b6:	4611      	mov	r1, r2
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fe fa10 	bl	800ecde <unlock_fs>
 80108be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3760      	adds	r7, #96	@ 0x60
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}

080108ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80108ca:	b580      	push	{r7, lr}
 80108cc:	b08c      	sub	sp, #48	@ 0x30
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	60f8      	str	r0, [r7, #12]
 80108d2:	60b9      	str	r1, [r7, #8]
 80108d4:	607a      	str	r2, [r7, #4]
 80108d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	2200      	movs	r2, #0
 80108e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f107 0210 	add.w	r2, r7, #16
 80108e8:	4611      	mov	r1, r2
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7ff fd80 	bl	80103f0 <validate>
 80108f0:	4603      	mov	r3, r0
 80108f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80108f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d107      	bne.n	801090e <f_write+0x44>
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	7d5b      	ldrb	r3, [r3, #21]
 8010902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801090a:	2b00      	cmp	r3, #0
 801090c:	d009      	beq.n	8010922 <f_write+0x58>
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010914:	4611      	mov	r1, r2
 8010916:	4618      	mov	r0, r3
 8010918:	f7fe f9e1 	bl	800ecde <unlock_fs>
 801091c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010920:	e173      	b.n	8010c0a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	7d1b      	ldrb	r3, [r3, #20]
 8010926:	f003 0302 	and.w	r3, r3, #2
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <f_write+0x72>
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	2107      	movs	r1, #7
 8010932:	4618      	mov	r0, r3
 8010934:	f7fe f9d3 	bl	800ecde <unlock_fs>
 8010938:	2307      	movs	r3, #7
 801093a:	e166      	b.n	8010c0a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	699a      	ldr	r2, [r3, #24]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	441a      	add	r2, r3
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	699b      	ldr	r3, [r3, #24]
 8010948:	429a      	cmp	r2, r3
 801094a:	f080 814b 	bcs.w	8010be4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	43db      	mvns	r3, r3
 8010954:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010956:	e145      	b.n	8010be4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	699b      	ldr	r3, [r3, #24]
 801095c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010960:	2b00      	cmp	r3, #0
 8010962:	f040 8101 	bne.w	8010b68 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	0a5b      	lsrs	r3, r3, #9
 801096c:	693a      	ldr	r2, [r7, #16]
 801096e:	8952      	ldrh	r2, [r2, #10]
 8010970:	3a01      	subs	r2, #1
 8010972:	4013      	ands	r3, r2
 8010974:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d14d      	bne.n	8010a18 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	699b      	ldr	r3, [r3, #24]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d10c      	bne.n	801099e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801098a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801098c:	2b00      	cmp	r3, #0
 801098e:	d11a      	bne.n	80109c6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2100      	movs	r1, #0
 8010994:	4618      	mov	r0, r3
 8010996:	f7fe fe1e 	bl	800f5d6 <create_chain>
 801099a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801099c:	e013      	b.n	80109c6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d007      	beq.n	80109b6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	699b      	ldr	r3, [r3, #24]
 80109aa:	4619      	mov	r1, r3
 80109ac:	68f8      	ldr	r0, [r7, #12]
 80109ae:	f7fe feaa 	bl	800f706 <clmt_clust>
 80109b2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80109b4:	e007      	b.n	80109c6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80109b6:	68fa      	ldr	r2, [r7, #12]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	69db      	ldr	r3, [r3, #28]
 80109bc:	4619      	mov	r1, r3
 80109be:	4610      	mov	r0, r2
 80109c0:	f7fe fe09 	bl	800f5d6 <create_chain>
 80109c4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80109c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f000 8110 	beq.w	8010bee <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80109ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d109      	bne.n	80109e8 <f_write+0x11e>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2202      	movs	r2, #2
 80109d8:	755a      	strb	r2, [r3, #21]
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	2102      	movs	r1, #2
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fe f97d 	bl	800ecde <unlock_fs>
 80109e4:	2302      	movs	r3, #2
 80109e6:	e110      	b.n	8010c0a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80109e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ee:	d109      	bne.n	8010a04 <f_write+0x13a>
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2201      	movs	r2, #1
 80109f4:	755a      	strb	r2, [r3, #21]
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	2101      	movs	r1, #1
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fe f96f 	bl	800ecde <unlock_fs>
 8010a00:	2301      	movs	r3, #1
 8010a02:	e102      	b.n	8010c0a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a08:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d102      	bne.n	8010a18 <f_write+0x14e>
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a16:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	7d1b      	ldrb	r3, [r3, #20]
 8010a1c:	b25b      	sxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	da1d      	bge.n	8010a5e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	7858      	ldrb	r0, [r3, #1]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6a1a      	ldr	r2, [r3, #32]
 8010a30:	2301      	movs	r3, #1
 8010a32:	f7fd ffff 	bl	800ea34 <disk_write>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d009      	beq.n	8010a50 <f_write+0x186>
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	755a      	strb	r2, [r3, #21]
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	2101      	movs	r1, #1
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7fe f949 	bl	800ecde <unlock_fs>
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	e0dc      	b.n	8010c0a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	7d1b      	ldrb	r3, [r3, #20]
 8010a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a58:	b2da      	uxtb	r2, r3
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010a5e:	693a      	ldr	r2, [r7, #16]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	69db      	ldr	r3, [r3, #28]
 8010a64:	4619      	mov	r1, r3
 8010a66:	4610      	mov	r0, r2
 8010a68:	f7fe fba0 	bl	800f1ac <clust2sect>
 8010a6c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d109      	bne.n	8010a88 <f_write+0x1be>
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2202      	movs	r2, #2
 8010a78:	755a      	strb	r2, [r3, #21]
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	2102      	movs	r1, #2
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fe f92d 	bl	800ecde <unlock_fs>
 8010a84:	2302      	movs	r3, #2
 8010a86:	e0c0      	b.n	8010c0a <f_write+0x340>
			sect += csect;
 8010a88:	697a      	ldr	r2, [r7, #20]
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	0a5b      	lsrs	r3, r3, #9
 8010a94:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d041      	beq.n	8010b20 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010a9c:	69ba      	ldr	r2, [r7, #24]
 8010a9e:	6a3b      	ldr	r3, [r7, #32]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	693a      	ldr	r2, [r7, #16]
 8010aa4:	8952      	ldrh	r2, [r2, #10]
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d905      	bls.n	8010ab6 <f_write+0x1ec>
					cc = fs->csize - csect;
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	895b      	ldrh	r3, [r3, #10]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	69bb      	ldr	r3, [r7, #24]
 8010ab2:	1ad3      	subs	r3, r2, r3
 8010ab4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	7858      	ldrb	r0, [r3, #1]
 8010aba:	6a3b      	ldr	r3, [r7, #32]
 8010abc:	697a      	ldr	r2, [r7, #20]
 8010abe:	69f9      	ldr	r1, [r7, #28]
 8010ac0:	f7fd ffb8 	bl	800ea34 <disk_write>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d009      	beq.n	8010ade <f_write+0x214>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2201      	movs	r2, #1
 8010ace:	755a      	strb	r2, [r3, #21]
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	2101      	movs	r1, #1
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fe f902 	bl	800ecde <unlock_fs>
 8010ada:	2301      	movs	r3, #1
 8010adc:	e095      	b.n	8010c0a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6a1a      	ldr	r2, [r3, #32]
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	1ad3      	subs	r3, r2, r3
 8010ae6:	6a3a      	ldr	r2, [r7, #32]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d915      	bls.n	8010b18 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6a1a      	ldr	r2, [r3, #32]
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	1ad3      	subs	r3, r2, r3
 8010afa:	025b      	lsls	r3, r3, #9
 8010afc:	69fa      	ldr	r2, [r7, #28]
 8010afe:	4413      	add	r3, r2
 8010b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b04:	4619      	mov	r1, r3
 8010b06:	f7fe f856 	bl	800ebb6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	7d1b      	ldrb	r3, [r3, #20]
 8010b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b12:	b2da      	uxtb	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010b18:	6a3b      	ldr	r3, [r7, #32]
 8010b1a:	025b      	lsls	r3, r3, #9
 8010b1c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010b1e:	e044      	b.n	8010baa <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	6a1b      	ldr	r3, [r3, #32]
 8010b24:	697a      	ldr	r2, [r7, #20]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d01b      	beq.n	8010b62 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	699a      	ldr	r2, [r3, #24]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d215      	bcs.n	8010b62 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	7858      	ldrb	r0, [r3, #1]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010b40:	2301      	movs	r3, #1
 8010b42:	697a      	ldr	r2, [r7, #20]
 8010b44:	f7fd ff56 	bl	800e9f4 <disk_read>
 8010b48:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d009      	beq.n	8010b62 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2201      	movs	r2, #1
 8010b52:	755a      	strb	r2, [r3, #21]
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	2101      	movs	r1, #1
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7fe f8c0 	bl	800ecde <unlock_fs>
 8010b5e:	2301      	movs	r3, #1
 8010b60:	e053      	b.n	8010c0a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	697a      	ldr	r2, [r7, #20]
 8010b66:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	699b      	ldr	r3, [r3, #24]
 8010b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b70:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010b74:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d901      	bls.n	8010b82 <f_write+0x2b8>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	699b      	ldr	r3, [r3, #24]
 8010b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b90:	4413      	add	r3, r2
 8010b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b94:	69f9      	ldr	r1, [r7, #28]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe f80d 	bl	800ebb6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	7d1b      	ldrb	r3, [r3, #20]
 8010ba0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010baa:	69fa      	ldr	r2, [r7, #28]
 8010bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bae:	4413      	add	r3, r2
 8010bb0:	61fb      	str	r3, [r7, #28]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	699a      	ldr	r2, [r3, #24]
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb8:	441a      	add	r2, r3
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	619a      	str	r2, [r3, #24]
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	68da      	ldr	r2, [r3, #12]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	bf38      	it	cc
 8010bca:	461a      	movcc	r2, r3
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	60da      	str	r2, [r3, #12]
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bd6:	441a      	add	r2, r3
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	601a      	str	r2, [r3, #0]
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f47f aeb6 	bne.w	8010958 <f_write+0x8e>
 8010bec:	e000      	b.n	8010bf0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	7d1b      	ldrb	r3, [r3, #20]
 8010bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	2100      	movs	r1, #0
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fe f86b 	bl	800ecde <unlock_fs>
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3730      	adds	r7, #48	@ 0x30
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b086      	sub	sp, #24
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f107 0208 	add.w	r2, r7, #8
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7ff fbe4 	bl	80103f0 <validate>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010c2c:	7dfb      	ldrb	r3, [r7, #23]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d16d      	bne.n	8010d0e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	7d1b      	ldrb	r3, [r3, #20]
 8010c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d067      	beq.n	8010d0e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	7d1b      	ldrb	r3, [r3, #20]
 8010c42:	b25b      	sxtb	r3, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	da1a      	bge.n	8010c7e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	7858      	ldrb	r0, [r3, #1]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a1a      	ldr	r2, [r3, #32]
 8010c56:	2301      	movs	r3, #1
 8010c58:	f7fd feec 	bl	800ea34 <disk_write>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d006      	beq.n	8010c70 <f_sync+0x5e>
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	2101      	movs	r1, #1
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7fe f839 	bl	800ecde <unlock_fs>
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e055      	b.n	8010d1c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	7d1b      	ldrb	r3, [r3, #20]
 8010c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c78:	b2da      	uxtb	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010c7e:	f7fd fe1b 	bl	800e8b8 <get_fattime>
 8010c82:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010c84:	68ba      	ldr	r2, [r7, #8]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	4610      	mov	r0, r2
 8010c8e:	f7fe f9f1 	bl	800f074 <move_window>
 8010c92:	4603      	mov	r3, r0
 8010c94:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010c96:	7dfb      	ldrb	r3, [r7, #23]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d138      	bne.n	8010d0e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ca0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	330b      	adds	r3, #11
 8010ca6:	781a      	ldrb	r2, [r3, #0]
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	330b      	adds	r3, #11
 8010cac:	f042 0220 	orr.w	r2, r2, #32
 8010cb0:	b2d2      	uxtb	r2, r2
 8010cb2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6818      	ldr	r0, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	689b      	ldr	r3, [r3, #8]
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	68f9      	ldr	r1, [r7, #12]
 8010cc0:	f7fe fefb 	bl	800faba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f103 021c 	add.w	r2, r3, #28
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	4610      	mov	r0, r2
 8010cd2:	f7fd ff44 	bl	800eb5e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	3316      	adds	r3, #22
 8010cda:	6939      	ldr	r1, [r7, #16]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fd ff3e 	bl	800eb5e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	3312      	adds	r3, #18
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fd ff1d 	bl	800eb28 <st_word>
					fs->wflag = 1;
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fe f9ea 	bl	800f0d0 <sync_fs>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	7d1b      	ldrb	r3, [r3, #20]
 8010d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d08:	b2da      	uxtb	r2, r3
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	7dfa      	ldrb	r2, [r7, #23]
 8010d12:	4611      	mov	r1, r2
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7fd ffe2 	bl	800ecde <unlock_fs>
 8010d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3718      	adds	r7, #24
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7ff ff70 	bl	8010c12 <f_sync>
 8010d32:	4603      	mov	r3, r0
 8010d34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010d36:	7bfb      	ldrb	r3, [r7, #15]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d11d      	bne.n	8010d78 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f107 0208 	add.w	r2, r7, #8
 8010d42:	4611      	mov	r1, r2
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7ff fb53 	bl	80103f0 <validate>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010d4e:	7bfb      	ldrb	r3, [r7, #15]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d111      	bne.n	8010d78 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	691b      	ldr	r3, [r3, #16]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fe f8e7 	bl	800ef2c <dec_lock>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010d62:	7bfb      	ldrb	r3, [r7, #15]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d102      	bne.n	8010d6e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	2100      	movs	r1, #0
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7fd ffb3 	bl	800ecde <unlock_fs>
#endif
		}
	}
	return res;
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b090      	sub	sp, #64	@ 0x40
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
 8010d8a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f107 0208 	add.w	r2, r7, #8
 8010d92:	4611      	mov	r1, r2
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7ff fb2b 	bl	80103f0 <validate>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010da0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d103      	bne.n	8010db0 <f_lseek+0x2e>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	7d5b      	ldrb	r3, [r3, #21]
 8010dac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010db0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d009      	beq.n	8010dcc <f_lseek+0x4a>
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010dbe:	4611      	mov	r1, r2
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7fd ff8c 	bl	800ecde <unlock_fs>
 8010dc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010dca:	e229      	b.n	8011220 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f000 80ea 	beq.w	8010faa <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ddc:	d164      	bne.n	8010ea8 <f_lseek+0x126>
			tbl = fp->cltbl;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010de2:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de6:	1d1a      	adds	r2, r3, #4
 8010de8:	627a      	str	r2, [r7, #36]	@ 0x24
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	617b      	str	r3, [r7, #20]
 8010dee:	2302      	movs	r3, #2
 8010df0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d044      	beq.n	8010e88 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e00:	613b      	str	r3, [r7, #16]
 8010e02:	2300      	movs	r3, #0
 8010e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e08:	3302      	adds	r3, #2
 8010e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0e:	60fb      	str	r3, [r7, #12]
 8010e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e12:	3301      	adds	r3, #1
 8010e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fe f9e5 	bl	800f1ea <get_fat>
 8010e20:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d809      	bhi.n	8010e3c <f_lseek+0xba>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2202      	movs	r2, #2
 8010e2c:	755a      	strb	r2, [r3, #21]
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	2102      	movs	r1, #2
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fd ff53 	bl	800ecde <unlock_fs>
 8010e38:	2302      	movs	r3, #2
 8010e3a:	e1f1      	b.n	8011220 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e42:	d109      	bne.n	8010e58 <f_lseek+0xd6>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2201      	movs	r2, #1
 8010e48:	755a      	strb	r2, [r3, #21]
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	2101      	movs	r1, #1
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7fd ff45 	bl	800ecde <unlock_fs>
 8010e54:	2301      	movs	r3, #1
 8010e56:	e1e3      	b.n	8011220 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d0d4      	beq.n	8010e0c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d809      	bhi.n	8010e7e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e6c:	1d1a      	adds	r2, r3, #4
 8010e6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e76:	1d1a      	adds	r2, r3, #4
 8010e78:	627a      	str	r2, [r7, #36]	@ 0x24
 8010e7a:	693a      	ldr	r2, [r7, #16]
 8010e7c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	699b      	ldr	r3, [r3, #24]
 8010e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d3ba      	bcc.n	8010dfe <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e8e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010e90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d803      	bhi.n	8010ea0 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8010e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	601a      	str	r2, [r3, #0]
 8010e9e:	e1b6      	b.n	801120e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010ea0:	2311      	movs	r3, #17
 8010ea2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010ea6:	e1b2      	b.n	801120e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	683a      	ldr	r2, [r7, #0]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d902      	bls.n	8010eb8 <f_lseek+0x136>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 81a4 	beq.w	801120e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	4619      	mov	r1, r3
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7fe fc1a 	bl	800f706 <clmt_clust>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	69db      	ldr	r3, [r3, #28]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	f7fe f963 	bl	800f1ac <clust2sect>
 8010ee6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d109      	bne.n	8010f02 <f_lseek+0x180>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2202      	movs	r2, #2
 8010ef2:	755a      	strb	r2, [r3, #21]
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	2102      	movs	r1, #2
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fd fef0 	bl	800ecde <unlock_fs>
 8010efe:	2302      	movs	r3, #2
 8010f00:	e18e      	b.n	8011220 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	0a5b      	lsrs	r3, r3, #9
 8010f08:	68ba      	ldr	r2, [r7, #8]
 8010f0a:	8952      	ldrh	r2, [r2, #10]
 8010f0c:	3a01      	subs	r2, #1
 8010f0e:	4013      	ands	r3, r2
 8010f10:	69ba      	ldr	r2, [r7, #24]
 8010f12:	4413      	add	r3, r2
 8010f14:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	699b      	ldr	r3, [r3, #24]
 8010f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	f000 8175 	beq.w	801120e <f_lseek+0x48c>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6a1b      	ldr	r3, [r3, #32]
 8010f28:	69ba      	ldr	r2, [r7, #24]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	f000 816f 	beq.w	801120e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	7d1b      	ldrb	r3, [r3, #20]
 8010f34:	b25b      	sxtb	r3, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	da1d      	bge.n	8010f76 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	7858      	ldrb	r0, [r3, #1]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6a1a      	ldr	r2, [r3, #32]
 8010f48:	2301      	movs	r3, #1
 8010f4a:	f7fd fd73 	bl	800ea34 <disk_write>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d009      	beq.n	8010f68 <f_lseek+0x1e6>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2201      	movs	r2, #1
 8010f58:	755a      	strb	r2, [r3, #21]
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	2101      	movs	r1, #1
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fd febd 	bl	800ecde <unlock_fs>
 8010f64:	2301      	movs	r3, #1
 8010f66:	e15b      	b.n	8011220 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	7d1b      	ldrb	r3, [r3, #20]
 8010f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	7858      	ldrb	r0, [r3, #1]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010f80:	2301      	movs	r3, #1
 8010f82:	69ba      	ldr	r2, [r7, #24]
 8010f84:	f7fd fd36 	bl	800e9f4 <disk_read>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d009      	beq.n	8010fa2 <f_lseek+0x220>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2201      	movs	r2, #1
 8010f92:	755a      	strb	r2, [r3, #21]
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	2101      	movs	r1, #1
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7fd fea0 	bl	800ecde <unlock_fs>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e13e      	b.n	8011220 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	69ba      	ldr	r2, [r7, #24]
 8010fa6:	621a      	str	r2, [r3, #32]
 8010fa8:	e131      	b.n	801120e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	683a      	ldr	r2, [r7, #0]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d908      	bls.n	8010fc6 <f_lseek+0x244>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	7d1b      	ldrb	r3, [r3, #20]
 8010fb8:	f003 0302 	and.w	r3, r3, #2
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d102      	bne.n	8010fc6 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	699b      	ldr	r3, [r3, #24]
 8010fca:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010fd4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f000 80c0 	beq.w	801115e <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	895b      	ldrh	r3, [r3, #10]
 8010fe2:	025b      	lsls	r3, r3, #9
 8010fe4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010fe6:	6a3b      	ldr	r3, [r7, #32]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d01b      	beq.n	8011024 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	1e5a      	subs	r2, r3, #1
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8010ff6:	6a3b      	ldr	r3, [r7, #32]
 8010ff8:	1e59      	subs	r1, r3, #1
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011000:	429a      	cmp	r2, r3
 8011002:	d30f      	bcc.n	8011024 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011004:	6a3b      	ldr	r3, [r7, #32]
 8011006:	1e5a      	subs	r2, r3, #1
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	425b      	negs	r3, r3
 801100c:	401a      	ands	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	699b      	ldr	r3, [r3, #24]
 8011016:	683a      	ldr	r2, [r7, #0]
 8011018:	1ad3      	subs	r3, r2, r3
 801101a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	69db      	ldr	r3, [r3, #28]
 8011020:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011022:	e02c      	b.n	801107e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	689b      	ldr	r3, [r3, #8]
 8011028:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801102a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801102c:	2b00      	cmp	r3, #0
 801102e:	d123      	bne.n	8011078 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2100      	movs	r1, #0
 8011034:	4618      	mov	r0, r3
 8011036:	f7fe face 	bl	800f5d6 <create_chain>
 801103a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801103c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801103e:	2b01      	cmp	r3, #1
 8011040:	d109      	bne.n	8011056 <f_lseek+0x2d4>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2202      	movs	r2, #2
 8011046:	755a      	strb	r2, [r3, #21]
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	2102      	movs	r1, #2
 801104c:	4618      	mov	r0, r3
 801104e:	f7fd fe46 	bl	800ecde <unlock_fs>
 8011052:	2302      	movs	r3, #2
 8011054:	e0e4      	b.n	8011220 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011058:	f1b3 3fff 	cmp.w	r3, #4294967295
 801105c:	d109      	bne.n	8011072 <f_lseek+0x2f0>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2201      	movs	r2, #1
 8011062:	755a      	strb	r2, [r3, #21]
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	2101      	movs	r1, #1
 8011068:	4618      	mov	r0, r3
 801106a:	f7fd fe38 	bl	800ecde <unlock_fs>
 801106e:	2301      	movs	r3, #1
 8011070:	e0d6      	b.n	8011220 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011076:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801107c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801107e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011080:	2b00      	cmp	r3, #0
 8011082:	d06c      	beq.n	801115e <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011084:	e044      	b.n	8011110 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011086:	683a      	ldr	r2, [r7, #0]
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	603b      	str	r3, [r7, #0]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	699a      	ldr	r2, [r3, #24]
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	441a      	add	r2, r3
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	7d1b      	ldrb	r3, [r3, #20]
 801109e:	f003 0302 	and.w	r3, r3, #2
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00b      	beq.n	80110be <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fe fa93 	bl	800f5d6 <create_chain>
 80110b0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80110b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d108      	bne.n	80110ca <f_lseek+0x348>
							ofs = 0; break;
 80110b8:	2300      	movs	r3, #0
 80110ba:	603b      	str	r3, [r7, #0]
 80110bc:	e02c      	b.n	8011118 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fe f891 	bl	800f1ea <get_fat>
 80110c8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80110ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110d0:	d109      	bne.n	80110e6 <f_lseek+0x364>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2201      	movs	r2, #1
 80110d6:	755a      	strb	r2, [r3, #21]
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	2101      	movs	r1, #1
 80110dc:	4618      	mov	r0, r3
 80110de:	f7fd fdfe 	bl	800ecde <unlock_fs>
 80110e2:	2301      	movs	r3, #1
 80110e4:	e09c      	b.n	8011220 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80110e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d904      	bls.n	80110f6 <f_lseek+0x374>
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	699b      	ldr	r3, [r3, #24]
 80110f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d309      	bcc.n	801110a <f_lseek+0x388>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2202      	movs	r2, #2
 80110fa:	755a      	strb	r2, [r3, #21]
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	2102      	movs	r1, #2
 8011100:	4618      	mov	r0, r3
 8011102:	f7fd fdec 	bl	800ecde <unlock_fs>
 8011106:	2302      	movs	r3, #2
 8011108:	e08a      	b.n	8011220 <f_lseek+0x49e>
					fp->clust = clst;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801110e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011110:	683a      	ldr	r2, [r7, #0]
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	429a      	cmp	r2, r3
 8011116:	d8b6      	bhi.n	8011086 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	699a      	ldr	r2, [r3, #24]
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	441a      	add	r2, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801112a:	2b00      	cmp	r3, #0
 801112c:	d017      	beq.n	801115e <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011132:	4618      	mov	r0, r3
 8011134:	f7fe f83a 	bl	800f1ac <clust2sect>
 8011138:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801113a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801113c:	2b00      	cmp	r3, #0
 801113e:	d109      	bne.n	8011154 <f_lseek+0x3d2>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2202      	movs	r2, #2
 8011144:	755a      	strb	r2, [r3, #21]
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	2102      	movs	r1, #2
 801114a:	4618      	mov	r0, r3
 801114c:	f7fd fdc7 	bl	800ecde <unlock_fs>
 8011150:	2302      	movs	r3, #2
 8011152:	e065      	b.n	8011220 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	0a5b      	lsrs	r3, r3, #9
 8011158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801115a:	4413      	add	r3, r2
 801115c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	699a      	ldr	r2, [r3, #24]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	429a      	cmp	r2, r3
 8011168:	d90a      	bls.n	8011180 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	699a      	ldr	r2, [r3, #24]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	7d1b      	ldrb	r3, [r3, #20]
 8011176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801117a:	b2da      	uxtb	r2, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	699b      	ldr	r3, [r3, #24]
 8011184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011188:	2b00      	cmp	r3, #0
 801118a:	d040      	beq.n	801120e <f_lseek+0x48c>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6a1b      	ldr	r3, [r3, #32]
 8011190:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011192:	429a      	cmp	r2, r3
 8011194:	d03b      	beq.n	801120e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	7d1b      	ldrb	r3, [r3, #20]
 801119a:	b25b      	sxtb	r3, r3
 801119c:	2b00      	cmp	r3, #0
 801119e:	da1d      	bge.n	80111dc <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	7858      	ldrb	r0, [r3, #1]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6a1a      	ldr	r2, [r3, #32]
 80111ae:	2301      	movs	r3, #1
 80111b0:	f7fd fc40 	bl	800ea34 <disk_write>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d009      	beq.n	80111ce <f_lseek+0x44c>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2201      	movs	r2, #1
 80111be:	755a      	strb	r2, [r3, #21]
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	2101      	movs	r1, #1
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fd fd8a 	bl	800ecde <unlock_fs>
 80111ca:	2301      	movs	r3, #1
 80111cc:	e028      	b.n	8011220 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	7d1b      	ldrb	r3, [r3, #20]
 80111d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111d6:	b2da      	uxtb	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	7858      	ldrb	r0, [r3, #1]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80111e6:	2301      	movs	r3, #1
 80111e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111ea:	f7fd fc03 	bl	800e9f4 <disk_read>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d009      	beq.n	8011208 <f_lseek+0x486>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2201      	movs	r2, #1
 80111f8:	755a      	strb	r2, [r3, #21]
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	2101      	movs	r1, #1
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fd fd6d 	bl	800ecde <unlock_fs>
 8011204:	2301      	movs	r3, #1
 8011206:	e00b      	b.n	8011220 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801120c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011214:	4611      	mov	r1, r2
 8011216:	4618      	mov	r0, r3
 8011218:	f7fd fd61 	bl	800ecde <unlock_fs>
 801121c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011220:	4618      	mov	r0, r3
 8011222:	3740      	adds	r7, #64	@ 0x40
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b096      	sub	sp, #88	@ 0x58
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011230:	f107 0108 	add.w	r1, r7, #8
 8011234:	1d3b      	adds	r3, r7, #4
 8011236:	2202      	movs	r2, #2
 8011238:	4618      	mov	r0, r3
 801123a:	f7fe fe85 	bl	800ff48 <find_volume>
 801123e:	4603      	mov	r3, r0
 8011240:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011248:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801124c:	2b00      	cmp	r3, #0
 801124e:	f040 80ec 	bne.w	801142a <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011252:	687a      	ldr	r2, [r7, #4]
 8011254:	f107 030c 	add.w	r3, r7, #12
 8011258:	4611      	mov	r1, r2
 801125a:	4618      	mov	r0, r3
 801125c:	f7fe fd68 	bl	800fd30 <follow_path>
 8011260:	4603      	mov	r3, r0
 8011262:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011266:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801126a:	2b00      	cmp	r3, #0
 801126c:	d102      	bne.n	8011274 <f_mkdir+0x4c>
 801126e:	2308      	movs	r3, #8
 8011270:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011274:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011278:	2b04      	cmp	r3, #4
 801127a:	f040 80d6 	bne.w	801142a <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801127e:	f107 030c 	add.w	r3, r7, #12
 8011282:	2100      	movs	r1, #0
 8011284:	4618      	mov	r0, r3
 8011286:	f7fe f9a6 	bl	800f5d6 <create_chain>
 801128a:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	895b      	ldrh	r3, [r3, #10]
 8011290:	025b      	lsls	r3, r3, #9
 8011292:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011294:	2300      	movs	r3, #0
 8011296:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801129a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801129c:	2b00      	cmp	r3, #0
 801129e:	d102      	bne.n	80112a6 <f_mkdir+0x7e>
 80112a0:	2307      	movs	r3, #7
 80112a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80112a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d102      	bne.n	80112b2 <f_mkdir+0x8a>
 80112ac:	2302      	movs	r3, #2
 80112ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80112b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b8:	d102      	bne.n	80112c0 <f_mkdir+0x98>
 80112ba:	2301      	movs	r3, #1
 80112bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80112c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d106      	bne.n	80112d6 <f_mkdir+0xae>
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fd fe8e 	bl	800efec <sync_window>
 80112d0:	4603      	mov	r3, r0
 80112d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 80112d6:	f7fd faef 	bl	800e8b8 <get_fattime>
 80112da:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80112dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d16a      	bne.n	80113ba <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fd ff5f 	bl	800f1ac <clust2sect>
 80112ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	3334      	adds	r3, #52	@ 0x34
 80112f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 80112f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112fa:	2100      	movs	r1, #0
 80112fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80112fe:	f7fd fc7b 	bl	800ebf8 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011302:	220b      	movs	r2, #11
 8011304:	2120      	movs	r1, #32
 8011306:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011308:	f7fd fc76 	bl	800ebf8 <mem_set>
					dir[DIR_Name] = '.';
 801130c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801130e:	222e      	movs	r2, #46	@ 0x2e
 8011310:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011314:	330b      	adds	r3, #11
 8011316:	2210      	movs	r2, #16
 8011318:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801131a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801131c:	3316      	adds	r3, #22
 801131e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011320:	4618      	mov	r0, r3
 8011322:	f7fd fc1c 	bl	800eb5e <st_dword>
					st_clust(fs, dir, dcl);
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801132a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801132c:	4618      	mov	r0, r3
 801132e:	f7fe fbc4 	bl	800faba <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011334:	3320      	adds	r3, #32
 8011336:	2220      	movs	r2, #32
 8011338:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801133a:	4618      	mov	r0, r3
 801133c:	f7fd fc3b 	bl	800ebb6 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011342:	3321      	adds	r3, #33	@ 0x21
 8011344:	222e      	movs	r2, #46	@ 0x2e
 8011346:	701a      	strb	r2, [r3, #0]
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	2b03      	cmp	r3, #3
 8011352:	d106      	bne.n	8011362 <f_mkdir+0x13a>
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801135a:	429a      	cmp	r2, r3
 801135c:	d101      	bne.n	8011362 <f_mkdir+0x13a>
 801135e:	2300      	movs	r3, #0
 8011360:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011362:	68b8      	ldr	r0, [r7, #8]
 8011364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011366:	3320      	adds	r3, #32
 8011368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801136a:	4619      	mov	r1, r3
 801136c:	f7fe fba5 	bl	800faba <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	895b      	ldrh	r3, [r3, #10]
 8011374:	653b      	str	r3, [r7, #80]	@ 0x50
 8011376:	e01b      	b.n	80113b0 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8011378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801137a:	1c5a      	adds	r2, r3, #1
 801137c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801137e:	68ba      	ldr	r2, [r7, #8]
 8011380:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	2201      	movs	r2, #1
 8011386:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	4618      	mov	r0, r3
 801138c:	f7fd fe2e 	bl	800efec <sync_window>
 8011390:	4603      	mov	r3, r0
 8011392:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8011396:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801139a:	2b00      	cmp	r3, #0
 801139c:	d10c      	bne.n	80113b8 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 801139e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113a2:	2100      	movs	r1, #0
 80113a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80113a6:	f7fd fc27 	bl	800ebf8 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80113aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113ac:	3b01      	subs	r3, #1
 80113ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80113b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1e0      	bne.n	8011378 <f_mkdir+0x150>
 80113b6:	e000      	b.n	80113ba <f_mkdir+0x192>
					if (res != FR_OK) break;
 80113b8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80113ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d107      	bne.n	80113d2 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80113c2:	f107 030c 	add.w	r3, r7, #12
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7fe fbec 	bl	800fba4 <dir_register>
 80113cc:	4603      	mov	r3, r0
 80113ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 80113d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d120      	bne.n	801141c <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80113da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80113de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113e0:	3316      	adds	r3, #22
 80113e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fd fbba 	bl	800eb5e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fe fb62 	bl	800faba <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80113f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113f8:	330b      	adds	r3, #11
 80113fa:	2210      	movs	r2, #16
 80113fc:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	2201      	movs	r2, #1
 8011402:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011404:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011408:	2b00      	cmp	r3, #0
 801140a:	d10e      	bne.n	801142a <f_mkdir+0x202>
					res = sync_fs(fs);
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	4618      	mov	r0, r3
 8011410:	f7fd fe5e 	bl	800f0d0 <sync_fs>
 8011414:	4603      	mov	r3, r0
 8011416:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 801141a:	e006      	b.n	801142a <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801141c:	f107 030c 	add.w	r3, r7, #12
 8011420:	2200      	movs	r2, #0
 8011422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011424:	4618      	mov	r0, r3
 8011426:	f7fe f871 	bl	800f50c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011430:	4611      	mov	r1, r2
 8011432:	4618      	mov	r0, r3
 8011434:	f7fd fc53 	bl	800ecde <unlock_fs>
 8011438:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 801143c:	4618      	mov	r0, r3
 801143e:	3758      	adds	r7, #88	@ 0x58
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011444:	b480      	push	{r7}
 8011446:	b087      	sub	sp, #28
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	4613      	mov	r3, r2
 8011450:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011452:	2301      	movs	r3, #1
 8011454:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011456:	2300      	movs	r3, #0
 8011458:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801145a:	4b1f      	ldr	r3, [pc, #124]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 801145c:	7a5b      	ldrb	r3, [r3, #9]
 801145e:	b2db      	uxtb	r3, r3
 8011460:	2b00      	cmp	r3, #0
 8011462:	d131      	bne.n	80114c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011464:	4b1c      	ldr	r3, [pc, #112]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 8011466:	7a5b      	ldrb	r3, [r3, #9]
 8011468:	b2db      	uxtb	r3, r3
 801146a:	461a      	mov	r2, r3
 801146c:	4b1a      	ldr	r3, [pc, #104]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 801146e:	2100      	movs	r1, #0
 8011470:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011472:	4b19      	ldr	r3, [pc, #100]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 8011474:	7a5b      	ldrb	r3, [r3, #9]
 8011476:	b2db      	uxtb	r3, r3
 8011478:	4a17      	ldr	r2, [pc, #92]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 801147a:	009b      	lsls	r3, r3, #2
 801147c:	4413      	add	r3, r2
 801147e:	68fa      	ldr	r2, [r7, #12]
 8011480:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011482:	4b15      	ldr	r3, [pc, #84]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 8011484:	7a5b      	ldrb	r3, [r3, #9]
 8011486:	b2db      	uxtb	r3, r3
 8011488:	461a      	mov	r2, r3
 801148a:	4b13      	ldr	r3, [pc, #76]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 801148c:	4413      	add	r3, r2
 801148e:	79fa      	ldrb	r2, [r7, #7]
 8011490:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011492:	4b11      	ldr	r3, [pc, #68]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 8011494:	7a5b      	ldrb	r3, [r3, #9]
 8011496:	b2db      	uxtb	r3, r3
 8011498:	1c5a      	adds	r2, r3, #1
 801149a:	b2d1      	uxtb	r1, r2
 801149c:	4a0e      	ldr	r2, [pc, #56]	@ (80114d8 <FATFS_LinkDriverEx+0x94>)
 801149e:	7251      	strb	r1, [r2, #9]
 80114a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80114a2:	7dbb      	ldrb	r3, [r7, #22]
 80114a4:	3330      	adds	r3, #48	@ 0x30
 80114a6:	b2da      	uxtb	r2, r3
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	3301      	adds	r3, #1
 80114b0:	223a      	movs	r2, #58	@ 0x3a
 80114b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	3302      	adds	r3, #2
 80114b8:	222f      	movs	r2, #47	@ 0x2f
 80114ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	3303      	adds	r3, #3
 80114c0:	2200      	movs	r2, #0
 80114c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80114c4:	2300      	movs	r3, #0
 80114c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80114c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	371c      	adds	r7, #28
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	200016cc 	.word	0x200016cc

080114dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80114e6:	2200      	movs	r2, #0
 80114e8:	6839      	ldr	r1, [r7, #0]
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7ff ffaa 	bl	8011444 <FATFS_LinkDriverEx>
 80114f0:	4603      	mov	r3, r0
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3708      	adds	r7, #8
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b084      	sub	sp, #16
 80114fe:	af00      	add	r7, sp, #0
 8011500:	4603      	mov	r3, r0
 8011502:	6039      	str	r1, [r7, #0]
 8011504:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011506:	2300      	movs	r3, #0
 8011508:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801150a:	f107 0308 	add.w	r3, r7, #8
 801150e:	2101      	movs	r1, #1
 8011510:	4618      	mov	r0, r3
 8011512:	f000 f939 	bl	8011788 <osSemaphoreCreate>
 8011516:	4602      	mov	r2, r0
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	bf14      	ite	ne
 8011524:	2301      	movne	r3, #1
 8011526:	2300      	moveq	r3, #0
 8011528:	b2db      	uxtb	r3, r3
 801152a:	60fb      	str	r3, [r7, #12]

    return ret;
 801152c:	68fb      	ldr	r3, [r7, #12]
}
 801152e:	4618      	mov	r0, r3
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011536:	b580      	push	{r7, lr}
 8011538:	b082      	sub	sp, #8
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 f9c4 	bl	80118cc <osSemaphoreDelete>
#endif
    return 1;
 8011544:	2301      	movs	r3, #1
}
 8011546:	4618      	mov	r0, r3
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b084      	sub	sp, #16
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011556:	2300      	movs	r3, #0
 8011558:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801155a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f000 f930 	bl	80117c4 <osSemaphoreWait>
 8011564:	4603      	mov	r3, r0
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801156a:	2301      	movs	r3, #1
 801156c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801156e:	68fb      	ldr	r3, [r7, #12]
}
 8011570:	4618      	mov	r0, r3
 8011572:	3710      	adds	r7, #16
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}

08011578 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f000 f96d 	bl	8011860 <osSemaphoreRelease>
#endif
}
 8011586:	bf00      	nop
 8011588:	3708      	adds	r7, #8
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}

0801158e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801158e:	b480      	push	{r7}
 8011590:	b085      	sub	sp, #20
 8011592:	af00      	add	r7, sp, #0
 8011594:	4603      	mov	r3, r0
 8011596:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011598:	2300      	movs	r3, #0
 801159a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801159c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115a0:	2b84      	cmp	r3, #132	@ 0x84
 80115a2:	d005      	beq.n	80115b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80115a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	4413      	add	r3, r2
 80115ac:	3303      	adds	r3, #3
 80115ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80115b0:	68fb      	ldr	r3, [r7, #12]
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3714      	adds	r7, #20
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80115be:	b480      	push	{r7}
 80115c0:	b083      	sub	sp, #12
 80115c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115c4:	f3ef 8305 	mrs	r3, IPSR
 80115c8:	607b      	str	r3, [r7, #4]
  return(result);
 80115ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	bf14      	ite	ne
 80115d0:	2301      	movne	r3, #1
 80115d2:	2300      	moveq	r3, #0
 80115d4:	b2db      	uxtb	r3, r3
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	370c      	adds	r7, #12
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr

080115e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80115e2:	b580      	push	{r7, lr}
 80115e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80115e6:	f001 f9cb 	bl	8012980 <vTaskStartScheduler>
  
  return osOK;
 80115ea:	2300      	movs	r3, #0
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80115f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115f2:	b087      	sub	sp, #28
 80115f4:	af02      	add	r7, sp, #8
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	685c      	ldr	r4, [r3, #4]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011606:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801160e:	4618      	mov	r0, r3
 8011610:	f7ff ffbd 	bl	801158e <makeFreeRtosPriority>
 8011614:	4602      	mov	r2, r0
 8011616:	f107 030c 	add.w	r3, r7, #12
 801161a:	9301      	str	r3, [sp, #4]
 801161c:	9200      	str	r2, [sp, #0]
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	4632      	mov	r2, r6
 8011622:	4629      	mov	r1, r5
 8011624:	4620      	mov	r0, r4
 8011626:	f000 ffad 	bl	8012584 <xTaskCreate>
 801162a:	4603      	mov	r3, r0
 801162c:	2b01      	cmp	r3, #1
 801162e:	d001      	beq.n	8011634 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8011630:	2300      	movs	r3, #0
 8011632:	e000      	b.n	8011636 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011634:	68fb      	ldr	r3, [r7, #12]
}
 8011636:	4618      	mov	r0, r3
 8011638:	3714      	adds	r7, #20
 801163a:	46bd      	mov	sp, r7
 801163c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801163e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801163e:	b580      	push	{r7, lr}
 8011640:	b084      	sub	sp, #16
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d001      	beq.n	8011654 <osDelay+0x16>
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	e000      	b.n	8011656 <osDelay+0x18>
 8011654:	2301      	movs	r3, #1
 8011656:	4618      	mov	r0, r3
 8011658:	f001 f8c8 	bl	80127ec <vTaskDelay>
  
  return osOK;
 801165c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801165e:	4618      	mov	r0, r3
 8011660:	3710      	adds	r7, #16
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011666:	b580      	push	{r7, lr}
 8011668:	b082      	sub	sp, #8
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 801166e:	2001      	movs	r0, #1
 8011670:	f000 fada 	bl	8011c28 <xQueueCreateMutex>
 8011674:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8011676:	4618      	mov	r0, r3
 8011678:	3708      	adds	r7, #8
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
	...

08011680 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801168a:	2300      	movs	r3, #0
 801168c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d101      	bne.n	8011698 <osMutexWait+0x18>
    return osErrorParameter;
 8011694:	2380      	movs	r3, #128	@ 0x80
 8011696:	e03a      	b.n	801170e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011698:	2300      	movs	r3, #0
 801169a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116a2:	d103      	bne.n	80116ac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80116a4:	f04f 33ff 	mov.w	r3, #4294967295
 80116a8:	60fb      	str	r3, [r7, #12]
 80116aa:	e009      	b.n	80116c0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d006      	beq.n	80116c0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d101      	bne.n	80116c0 <osMutexWait+0x40>
      ticks = 1;
 80116bc:	2301      	movs	r3, #1
 80116be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80116c0:	f7ff ff7d 	bl	80115be <inHandlerMode>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d017      	beq.n	80116fa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80116ca:	f107 0308 	add.w	r3, r7, #8
 80116ce:	461a      	mov	r2, r3
 80116d0:	2100      	movs	r1, #0
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f000 fd62 	bl	801219c <xQueueReceiveFromISR>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b01      	cmp	r3, #1
 80116dc:	d001      	beq.n	80116e2 <osMutexWait+0x62>
      return osErrorOS;
 80116de:	23ff      	movs	r3, #255	@ 0xff
 80116e0:	e015      	b.n	801170e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d011      	beq.n	801170c <osMutexWait+0x8c>
 80116e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011718 <osMutexWait+0x98>)
 80116ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116ee:	601a      	str	r2, [r3, #0]
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	f3bf 8f6f 	isb	sy
 80116f8:	e008      	b.n	801170c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80116fa:	68f9      	ldr	r1, [r7, #12]
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f000 fc3d 	bl	8011f7c <xQueueSemaphoreTake>
 8011702:	4603      	mov	r3, r0
 8011704:	2b01      	cmp	r3, #1
 8011706:	d001      	beq.n	801170c <osMutexWait+0x8c>
    return osErrorOS;
 8011708:	23ff      	movs	r3, #255	@ 0xff
 801170a:	e000      	b.n	801170e <osMutexWait+0x8e>
  }
  
  return osOK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	e000ed04 	.word	0xe000ed04

0801171c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011724:	2300      	movs	r3, #0
 8011726:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011728:	2300      	movs	r3, #0
 801172a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 801172c:	f7ff ff47 	bl	80115be <inHandlerMode>
 8011730:	4603      	mov	r3, r0
 8011732:	2b00      	cmp	r3, #0
 8011734:	d016      	beq.n	8011764 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011736:	f107 0308 	add.w	r3, r7, #8
 801173a:	4619      	mov	r1, r3
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f000 fb8d 	bl	8011e5c <xQueueGiveFromISR>
 8011742:	4603      	mov	r3, r0
 8011744:	2b01      	cmp	r3, #1
 8011746:	d001      	beq.n	801174c <osMutexRelease+0x30>
      return osErrorOS;
 8011748:	23ff      	movs	r3, #255	@ 0xff
 801174a:	e017      	b.n	801177c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d013      	beq.n	801177a <osMutexRelease+0x5e>
 8011752:	4b0c      	ldr	r3, [pc, #48]	@ (8011784 <osMutexRelease+0x68>)
 8011754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011758:	601a      	str	r2, [r3, #0]
 801175a:	f3bf 8f4f 	dsb	sy
 801175e:	f3bf 8f6f 	isb	sy
 8011762:	e00a      	b.n	801177a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011764:	2300      	movs	r3, #0
 8011766:	2200      	movs	r2, #0
 8011768:	2100      	movs	r1, #0
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 fa74 	bl	8011c58 <xQueueGenericSend>
 8011770:	4603      	mov	r3, r0
 8011772:	2b01      	cmp	r3, #1
 8011774:	d001      	beq.n	801177a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011776:	23ff      	movs	r3, #255	@ 0xff
 8011778:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801177a:	68fb      	ldr	r3, [r7, #12]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3710      	adds	r7, #16
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	e000ed04 	.word	0xe000ed04

08011788 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d110      	bne.n	80117ba <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8011798:	2203      	movs	r2, #3
 801179a:	2100      	movs	r1, #0
 801179c:	2001      	movs	r0, #1
 801179e:	f000 f9d3 	bl	8011b48 <xQueueGenericCreate>
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d005      	beq.n	80117b6 <osSemaphoreCreate+0x2e>
 80117aa:	2300      	movs	r3, #0
 80117ac:	2200      	movs	r2, #0
 80117ae:	2100      	movs	r1, #0
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f000 fa51 	bl	8011c58 <xQueueGenericSend>
    return sema;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	e000      	b.n	80117bc <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80117ba:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80117ce:	2300      	movs	r3, #0
 80117d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d101      	bne.n	80117dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80117d8:	2380      	movs	r3, #128	@ 0x80
 80117da:	e03a      	b.n	8011852 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80117dc:	2300      	movs	r3, #0
 80117de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e6:	d103      	bne.n	80117f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80117e8:	f04f 33ff 	mov.w	r3, #4294967295
 80117ec:	60fb      	str	r3, [r7, #12]
 80117ee:	e009      	b.n	8011804 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d006      	beq.n	8011804 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d101      	bne.n	8011804 <osSemaphoreWait+0x40>
      ticks = 1;
 8011800:	2301      	movs	r3, #1
 8011802:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011804:	f7ff fedb 	bl	80115be <inHandlerMode>
 8011808:	4603      	mov	r3, r0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d017      	beq.n	801183e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801180e:	f107 0308 	add.w	r3, r7, #8
 8011812:	461a      	mov	r2, r3
 8011814:	2100      	movs	r1, #0
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 fcc0 	bl	801219c <xQueueReceiveFromISR>
 801181c:	4603      	mov	r3, r0
 801181e:	2b01      	cmp	r3, #1
 8011820:	d001      	beq.n	8011826 <osSemaphoreWait+0x62>
      return osErrorOS;
 8011822:	23ff      	movs	r3, #255	@ 0xff
 8011824:	e015      	b.n	8011852 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d011      	beq.n	8011850 <osSemaphoreWait+0x8c>
 801182c:	4b0b      	ldr	r3, [pc, #44]	@ (801185c <osSemaphoreWait+0x98>)
 801182e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	f3bf 8f4f 	dsb	sy
 8011838:	f3bf 8f6f 	isb	sy
 801183c:	e008      	b.n	8011850 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801183e:	68f9      	ldr	r1, [r7, #12]
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 fb9b 	bl	8011f7c <xQueueSemaphoreTake>
 8011846:	4603      	mov	r3, r0
 8011848:	2b01      	cmp	r3, #1
 801184a:	d001      	beq.n	8011850 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801184c:	23ff      	movs	r3, #255	@ 0xff
 801184e:	e000      	b.n	8011852 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011850:	2300      	movs	r3, #0
}
 8011852:	4618      	mov	r0, r3
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	e000ed04 	.word	0xe000ed04

08011860 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011868:	2300      	movs	r3, #0
 801186a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801186c:	2300      	movs	r3, #0
 801186e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011870:	f7ff fea5 	bl	80115be <inHandlerMode>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d016      	beq.n	80118a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801187a:	f107 0308 	add.w	r3, r7, #8
 801187e:	4619      	mov	r1, r3
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f000 faeb 	bl	8011e5c <xQueueGiveFromISR>
 8011886:	4603      	mov	r3, r0
 8011888:	2b01      	cmp	r3, #1
 801188a:	d001      	beq.n	8011890 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801188c:	23ff      	movs	r3, #255	@ 0xff
 801188e:	e017      	b.n	80118c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d013      	beq.n	80118be <osSemaphoreRelease+0x5e>
 8011896:	4b0c      	ldr	r3, [pc, #48]	@ (80118c8 <osSemaphoreRelease+0x68>)
 8011898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	f3bf 8f4f 	dsb	sy
 80118a2:	f3bf 8f6f 	isb	sy
 80118a6:	e00a      	b.n	80118be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80118a8:	2300      	movs	r3, #0
 80118aa:	2200      	movs	r2, #0
 80118ac:	2100      	movs	r1, #0
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 f9d2 	bl	8011c58 <xQueueGenericSend>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b01      	cmp	r3, #1
 80118b8:	d001      	beq.n	80118be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80118ba:	23ff      	movs	r3, #255	@ 0xff
 80118bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80118be:	68fb      	ldr	r3, [r7, #12]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3710      	adds	r7, #16
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	e000ed04 	.word	0xe000ed04

080118cc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80118d4:	f7ff fe73 	bl	80115be <inHandlerMode>
 80118d8:	4603      	mov	r3, r0
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d001      	beq.n	80118e2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80118de:	2382      	movs	r3, #130	@ 0x82
 80118e0:	e003      	b.n	80118ea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fcdc 	bl	80122a0 <vQueueDelete>

  return osOK; 
 80118e8:	2300      	movs	r3, #0
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3708      	adds	r7, #8
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}

080118f2 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b082      	sub	sp, #8
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f000 ffac 	bl	8012858 <vTaskSuspend>
  
  return osOK;
 8011900:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8011902:	4618      	mov	r0, r3
 8011904:	3708      	adds	r7, #8
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}

0801190a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801190a:	b480      	push	{r7}
 801190c:	b083      	sub	sp, #12
 801190e:	af00      	add	r7, sp, #0
 8011910:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f103 0208 	add.w	r2, r3, #8
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f04f 32ff 	mov.w	r2, #4294967295
 8011922:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f103 0208 	add.w	r2, r3, #8
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f103 0208 	add.w	r2, r3, #8
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801193e:	bf00      	nop
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr

0801194a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801194a:	b480      	push	{r7}
 801194c:	b083      	sub	sp, #12
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2200      	movs	r2, #0
 8011956:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011958:	bf00      	nop
 801195a:	370c      	adds	r7, #12
 801195c:	46bd      	mov	sp, r7
 801195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011962:	4770      	bx	lr

08011964 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011964:	b480      	push	{r7}
 8011966:	b085      	sub	sp, #20
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	689a      	ldr	r2, [r3, #8]
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	689b      	ldr	r3, [r3, #8]
 8011986:	683a      	ldr	r2, [r7, #0]
 8011988:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	683a      	ldr	r2, [r7, #0]
 801198e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	1c5a      	adds	r2, r3, #1
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	601a      	str	r2, [r3, #0]
}
 80119a0:	bf00      	nop
 80119a2:	3714      	adds	r7, #20
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr

080119ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c2:	d103      	bne.n	80119cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	691b      	ldr	r3, [r3, #16]
 80119c8:	60fb      	str	r3, [r7, #12]
 80119ca:	e00c      	b.n	80119e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	3308      	adds	r3, #8
 80119d0:	60fb      	str	r3, [r7, #12]
 80119d2:	e002      	b.n	80119da <vListInsert+0x2e>
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	60fb      	str	r3, [r7, #12]
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	68ba      	ldr	r2, [r7, #8]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d2f6      	bcs.n	80119d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	685a      	ldr	r2, [r3, #4]
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	683a      	ldr	r2, [r7, #0]
 80119f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	683a      	ldr	r2, [r7, #0]
 8011a00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	1c5a      	adds	r2, r3, #1
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	601a      	str	r2, [r3, #0]
}
 8011a12:	bf00      	nop
 8011a14:	3714      	adds	r7, #20
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr

08011a1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a1e:	b480      	push	{r7}
 8011a20:	b085      	sub	sp, #20
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	691b      	ldr	r3, [r3, #16]
 8011a2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	6892      	ldr	r2, [r2, #8]
 8011a34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	689b      	ldr	r3, [r3, #8]
 8011a3a:	687a      	ldr	r2, [r7, #4]
 8011a3c:	6852      	ldr	r2, [r2, #4]
 8011a3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d103      	bne.n	8011a52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	689a      	ldr	r2, [r3, #8]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2200      	movs	r2, #0
 8011a56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	1e5a      	subs	r2, r3, #1
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	681b      	ldr	r3, [r3, #0]
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3714      	adds	r7, #20
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a70:	4770      	bx	lr
	...

08011a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10b      	bne.n	8011aa0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011a9a:	bf00      	nop
 8011a9c:	bf00      	nop
 8011a9e:	e7fd      	b.n	8011a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011aa0:	f001 fe92 	bl	80137c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011aac:	68f9      	ldr	r1, [r7, #12]
 8011aae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011ab0:	fb01 f303 	mul.w	r3, r1, r3
 8011ab4:	441a      	add	r2, r3
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2200      	movs	r2, #0
 8011abe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ad0:	3b01      	subs	r3, #1
 8011ad2:	68f9      	ldr	r1, [r7, #12]
 8011ad4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011ad6:	fb01 f303 	mul.w	r3, r1, r3
 8011ada:	441a      	add	r2, r3
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	22ff      	movs	r2, #255	@ 0xff
 8011ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	22ff      	movs	r2, #255	@ 0xff
 8011aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d114      	bne.n	8011b20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	691b      	ldr	r3, [r3, #16]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d01a      	beq.n	8011b34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	3310      	adds	r3, #16
 8011b02:	4618      	mov	r0, r3
 8011b04:	f001 f96c 	bl	8012de0 <xTaskRemoveFromEventList>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d012      	beq.n	8011b34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b44 <xQueueGenericReset+0xd0>)
 8011b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b14:	601a      	str	r2, [r3, #0]
 8011b16:	f3bf 8f4f 	dsb	sy
 8011b1a:	f3bf 8f6f 	isb	sy
 8011b1e:	e009      	b.n	8011b34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	3310      	adds	r3, #16
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7ff fef0 	bl	801190a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	3324      	adds	r3, #36	@ 0x24
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7ff feeb 	bl	801190a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011b34:	f001 fe7a 	bl	801382c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011b38:	2301      	movs	r3, #1
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	e000ed04 	.word	0xe000ed04

08011b48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b08a      	sub	sp, #40	@ 0x28
 8011b4c:	af02      	add	r7, sp, #8
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	4613      	mov	r3, r2
 8011b54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d10b      	bne.n	8011b74 <xQueueGenericCreate+0x2c>
	__asm volatile
 8011b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b60:	f383 8811 	msr	BASEPRI, r3
 8011b64:	f3bf 8f6f 	isb	sy
 8011b68:	f3bf 8f4f 	dsb	sy
 8011b6c:	613b      	str	r3, [r7, #16]
}
 8011b6e:	bf00      	nop
 8011b70:	bf00      	nop
 8011b72:	e7fd      	b.n	8011b70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	68ba      	ldr	r2, [r7, #8]
 8011b78:	fb02 f303 	mul.w	r3, r2, r3
 8011b7c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	3348      	adds	r3, #72	@ 0x48
 8011b82:	4618      	mov	r0, r3
 8011b84:	f001 ff42 	bl	8013a0c <pvPortMalloc>
 8011b88:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00d      	beq.n	8011bac <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	3348      	adds	r3, #72	@ 0x48
 8011b98:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011b9a:	79fa      	ldrb	r2, [r7, #7]
 8011b9c:	69bb      	ldr	r3, [r7, #24]
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	697a      	ldr	r2, [r7, #20]
 8011ba4:	68b9      	ldr	r1, [r7, #8]
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f000 f805 	bl	8011bb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011bac:	69bb      	ldr	r3, [r7, #24]
	}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3720      	adds	r7, #32
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b084      	sub	sp, #16
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	60f8      	str	r0, [r7, #12]
 8011bbe:	60b9      	str	r1, [r7, #8]
 8011bc0:	607a      	str	r2, [r7, #4]
 8011bc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d103      	bne.n	8011bd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	69ba      	ldr	r2, [r7, #24]
 8011bce:	601a      	str	r2, [r3, #0]
 8011bd0:	e002      	b.n	8011bd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	68fa      	ldr	r2, [r7, #12]
 8011bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011bde:	69bb      	ldr	r3, [r7, #24]
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011be4:	2101      	movs	r1, #1
 8011be6:	69b8      	ldr	r0, [r7, #24]
 8011be8:	f7ff ff44 	bl	8011a74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011bec:	bf00      	nop
 8011bee:	3710      	adds	r7, #16
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d00e      	beq.n	8011c20 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2200      	movs	r2, #0
 8011c06:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011c14:	2300      	movs	r3, #0
 8011c16:	2200      	movs	r2, #0
 8011c18:	2100      	movs	r1, #0
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f000 f81c 	bl	8011c58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011c20:	bf00      	nop
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b086      	sub	sp, #24
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	4603      	mov	r3, r0
 8011c30:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011c32:	2301      	movs	r3, #1
 8011c34:	617b      	str	r3, [r7, #20]
 8011c36:	2300      	movs	r3, #0
 8011c38:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011c3a:	79fb      	ldrb	r3, [r7, #7]
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	6939      	ldr	r1, [r7, #16]
 8011c40:	6978      	ldr	r0, [r7, #20]
 8011c42:	f7ff ff81 	bl	8011b48 <xQueueGenericCreate>
 8011c46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011c48:	68f8      	ldr	r0, [r7, #12]
 8011c4a:	f7ff ffd3 	bl	8011bf4 <prvInitialiseMutex>

		return xNewQueue;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
	}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3718      	adds	r7, #24
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b08e      	sub	sp, #56	@ 0x38
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
 8011c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011c66:	2300      	movs	r3, #0
 8011c68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d10b      	bne.n	8011c8c <xQueueGenericSend+0x34>
	__asm volatile
 8011c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c78:	f383 8811 	msr	BASEPRI, r3
 8011c7c:	f3bf 8f6f 	isb	sy
 8011c80:	f3bf 8f4f 	dsb	sy
 8011c84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011c86:	bf00      	nop
 8011c88:	bf00      	nop
 8011c8a:	e7fd      	b.n	8011c88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d103      	bne.n	8011c9a <xQueueGenericSend+0x42>
 8011c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d101      	bne.n	8011c9e <xQueueGenericSend+0x46>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e000      	b.n	8011ca0 <xQueueGenericSend+0x48>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d10b      	bne.n	8011cbc <xQueueGenericSend+0x64>
	__asm volatile
 8011ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ca8:	f383 8811 	msr	BASEPRI, r3
 8011cac:	f3bf 8f6f 	isb	sy
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011cb6:	bf00      	nop
 8011cb8:	bf00      	nop
 8011cba:	e7fd      	b.n	8011cb8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	2b02      	cmp	r3, #2
 8011cc0:	d103      	bne.n	8011cca <xQueueGenericSend+0x72>
 8011cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d101      	bne.n	8011cce <xQueueGenericSend+0x76>
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e000      	b.n	8011cd0 <xQueueGenericSend+0x78>
 8011cce:	2300      	movs	r3, #0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d10b      	bne.n	8011cec <xQueueGenericSend+0x94>
	__asm volatile
 8011cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cd8:	f383 8811 	msr	BASEPRI, r3
 8011cdc:	f3bf 8f6f 	isb	sy
 8011ce0:	f3bf 8f4f 	dsb	sy
 8011ce4:	623b      	str	r3, [r7, #32]
}
 8011ce6:	bf00      	nop
 8011ce8:	bf00      	nop
 8011cea:	e7fd      	b.n	8011ce8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011cec:	f001 fa18 	bl	8013120 <xTaskGetSchedulerState>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d102      	bne.n	8011cfc <xQueueGenericSend+0xa4>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d101      	bne.n	8011d00 <xQueueGenericSend+0xa8>
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	e000      	b.n	8011d02 <xQueueGenericSend+0xaa>
 8011d00:	2300      	movs	r3, #0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10b      	bne.n	8011d1e <xQueueGenericSend+0xc6>
	__asm volatile
 8011d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d0a:	f383 8811 	msr	BASEPRI, r3
 8011d0e:	f3bf 8f6f 	isb	sy
 8011d12:	f3bf 8f4f 	dsb	sy
 8011d16:	61fb      	str	r3, [r7, #28]
}
 8011d18:	bf00      	nop
 8011d1a:	bf00      	nop
 8011d1c:	e7fd      	b.n	8011d1a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d1e:	f001 fd53 	bl	80137c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d302      	bcc.n	8011d34 <xQueueGenericSend+0xdc>
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	2b02      	cmp	r3, #2
 8011d32:	d129      	bne.n	8011d88 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d34:	683a      	ldr	r2, [r7, #0]
 8011d36:	68b9      	ldr	r1, [r7, #8]
 8011d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d3a:	f000 fae8 	bl	801230e <prvCopyDataToQueue>
 8011d3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d010      	beq.n	8011d6a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d4a:	3324      	adds	r3, #36	@ 0x24
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f001 f847 	bl	8012de0 <xTaskRemoveFromEventList>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d013      	beq.n	8011d80 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011d58:	4b3f      	ldr	r3, [pc, #252]	@ (8011e58 <xQueueGenericSend+0x200>)
 8011d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d5e:	601a      	str	r2, [r3, #0]
 8011d60:	f3bf 8f4f 	dsb	sy
 8011d64:	f3bf 8f6f 	isb	sy
 8011d68:	e00a      	b.n	8011d80 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d007      	beq.n	8011d80 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011d70:	4b39      	ldr	r3, [pc, #228]	@ (8011e58 <xQueueGenericSend+0x200>)
 8011d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d76:	601a      	str	r2, [r3, #0]
 8011d78:	f3bf 8f4f 	dsb	sy
 8011d7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011d80:	f001 fd54 	bl	801382c <vPortExitCritical>
				return pdPASS;
 8011d84:	2301      	movs	r3, #1
 8011d86:	e063      	b.n	8011e50 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d103      	bne.n	8011d96 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011d8e:	f001 fd4d 	bl	801382c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011d92:	2300      	movs	r3, #0
 8011d94:	e05c      	b.n	8011e50 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d106      	bne.n	8011daa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011d9c:	f107 0314 	add.w	r3, r7, #20
 8011da0:	4618      	mov	r0, r3
 8011da2:	f001 f881 	bl	8012ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011da6:	2301      	movs	r3, #1
 8011da8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011daa:	f001 fd3f 	bl	801382c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011dae:	f000 fe2f 	bl	8012a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011db2:	f001 fd09 	bl	80137c8 <vPortEnterCritical>
 8011db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011dbc:	b25b      	sxtb	r3, r3
 8011dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc2:	d103      	bne.n	8011dcc <xQueueGenericSend+0x174>
 8011dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011dd2:	b25b      	sxtb	r3, r3
 8011dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd8:	d103      	bne.n	8011de2 <xQueueGenericSend+0x18a>
 8011dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011de2:	f001 fd23 	bl	801382c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011de6:	1d3a      	adds	r2, r7, #4
 8011de8:	f107 0314 	add.w	r3, r7, #20
 8011dec:	4611      	mov	r1, r2
 8011dee:	4618      	mov	r0, r3
 8011df0:	f001 f870 	bl	8012ed4 <xTaskCheckForTimeOut>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d124      	bne.n	8011e44 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011dfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011dfc:	f000 fb7f 	bl	80124fe <prvIsQueueFull>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d018      	beq.n	8011e38 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e08:	3310      	adds	r3, #16
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f000 ffc0 	bl	8012d94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011e14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e16:	f000 fb0a 	bl	801242e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011e1a:	f000 fe07 	bl	8012a2c <xTaskResumeAll>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	f47f af7c 	bne.w	8011d1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011e26:	4b0c      	ldr	r3, [pc, #48]	@ (8011e58 <xQueueGenericSend+0x200>)
 8011e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e2c:	601a      	str	r2, [r3, #0]
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	f3bf 8f6f 	isb	sy
 8011e36:	e772      	b.n	8011d1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011e38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e3a:	f000 faf8 	bl	801242e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e3e:	f000 fdf5 	bl	8012a2c <xTaskResumeAll>
 8011e42:	e76c      	b.n	8011d1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e46:	f000 faf2 	bl	801242e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e4a:	f000 fdef 	bl	8012a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011e4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3738      	adds	r7, #56	@ 0x38
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	e000ed04 	.word	0xe000ed04

08011e5c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b08e      	sub	sp, #56	@ 0x38
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10b      	bne.n	8011e88 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e74:	f383 8811 	msr	BASEPRI, r3
 8011e78:	f3bf 8f6f 	isb	sy
 8011e7c:	f3bf 8f4f 	dsb	sy
 8011e80:	623b      	str	r3, [r7, #32]
}
 8011e82:	bf00      	nop
 8011e84:	bf00      	nop
 8011e86:	e7fd      	b.n	8011e84 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00b      	beq.n	8011ea8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8011e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e94:	f383 8811 	msr	BASEPRI, r3
 8011e98:	f3bf 8f6f 	isb	sy
 8011e9c:	f3bf 8f4f 	dsb	sy
 8011ea0:	61fb      	str	r3, [r7, #28]
}
 8011ea2:	bf00      	nop
 8011ea4:	bf00      	nop
 8011ea6:	e7fd      	b.n	8011ea4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d103      	bne.n	8011eb8 <xQueueGiveFromISR+0x5c>
 8011eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d101      	bne.n	8011ebc <xQueueGiveFromISR+0x60>
 8011eb8:	2301      	movs	r3, #1
 8011eba:	e000      	b.n	8011ebe <xQueueGiveFromISR+0x62>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d10b      	bne.n	8011eda <xQueueGiveFromISR+0x7e>
	__asm volatile
 8011ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ec6:	f383 8811 	msr	BASEPRI, r3
 8011eca:	f3bf 8f6f 	isb	sy
 8011ece:	f3bf 8f4f 	dsb	sy
 8011ed2:	61bb      	str	r3, [r7, #24]
}
 8011ed4:	bf00      	nop
 8011ed6:	bf00      	nop
 8011ed8:	e7fd      	b.n	8011ed6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011eda:	f001 fd55 	bl	8013988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011ede:	f3ef 8211 	mrs	r2, BASEPRI
 8011ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ee6:	f383 8811 	msr	BASEPRI, r3
 8011eea:	f3bf 8f6f 	isb	sy
 8011eee:	f3bf 8f4f 	dsb	sy
 8011ef2:	617a      	str	r2, [r7, #20]
 8011ef4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011ef6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011efe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d22b      	bcs.n	8011f62 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f16:	1c5a      	adds	r2, r3, #1
 8011f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f1a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011f1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f24:	d112      	bne.n	8011f4c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d016      	beq.n	8011f5c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f30:	3324      	adds	r3, #36	@ 0x24
 8011f32:	4618      	mov	r0, r3
 8011f34:	f000 ff54 	bl	8012de0 <xTaskRemoveFromEventList>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d00e      	beq.n	8011f5c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d00b      	beq.n	8011f5c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	2201      	movs	r2, #1
 8011f48:	601a      	str	r2, [r3, #0]
 8011f4a:	e007      	b.n	8011f5c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f50:	3301      	adds	r3, #1
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	b25a      	sxtb	r2, r3
 8011f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f60:	e001      	b.n	8011f66 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011f62:	2300      	movs	r3, #0
 8011f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f68:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011f70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3738      	adds	r7, #56	@ 0x38
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b08e      	sub	sp, #56	@ 0x38
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011f86:	2300      	movs	r3, #0
 8011f88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d10b      	bne.n	8011fb0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8011f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f9c:	f383 8811 	msr	BASEPRI, r3
 8011fa0:	f3bf 8f6f 	isb	sy
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	623b      	str	r3, [r7, #32]
}
 8011faa:	bf00      	nop
 8011fac:	bf00      	nop
 8011fae:	e7fd      	b.n	8011fac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d00b      	beq.n	8011fd0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fbc:	f383 8811 	msr	BASEPRI, r3
 8011fc0:	f3bf 8f6f 	isb	sy
 8011fc4:	f3bf 8f4f 	dsb	sy
 8011fc8:	61fb      	str	r3, [r7, #28]
}
 8011fca:	bf00      	nop
 8011fcc:	bf00      	nop
 8011fce:	e7fd      	b.n	8011fcc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011fd0:	f001 f8a6 	bl	8013120 <xTaskGetSchedulerState>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d102      	bne.n	8011fe0 <xQueueSemaphoreTake+0x64>
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d101      	bne.n	8011fe4 <xQueueSemaphoreTake+0x68>
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	e000      	b.n	8011fe6 <xQueueSemaphoreTake+0x6a>
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d10b      	bne.n	8012002 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8011fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fee:	f383 8811 	msr	BASEPRI, r3
 8011ff2:	f3bf 8f6f 	isb	sy
 8011ff6:	f3bf 8f4f 	dsb	sy
 8011ffa:	61bb      	str	r3, [r7, #24]
}
 8011ffc:	bf00      	nop
 8011ffe:	bf00      	nop
 8012000:	e7fd      	b.n	8011ffe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012002:	f001 fbe1 	bl	80137c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801200a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801200c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200e:	2b00      	cmp	r3, #0
 8012010:	d024      	beq.n	801205c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012014:	1e5a      	subs	r2, r3, #1
 8012016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012018:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801201a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d104      	bne.n	801202c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012022:	f001 fa29 	bl	8013478 <pvTaskIncrementMutexHeldCount>
 8012026:	4602      	mov	r2, r0
 8012028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801202a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801202c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801202e:	691b      	ldr	r3, [r3, #16]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d00f      	beq.n	8012054 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012036:	3310      	adds	r3, #16
 8012038:	4618      	mov	r0, r3
 801203a:	f000 fed1 	bl	8012de0 <xTaskRemoveFromEventList>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	d007      	beq.n	8012054 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012044:	4b54      	ldr	r3, [pc, #336]	@ (8012198 <xQueueSemaphoreTake+0x21c>)
 8012046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801204a:	601a      	str	r2, [r3, #0]
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012054:	f001 fbea 	bl	801382c <vPortExitCritical>
				return pdPASS;
 8012058:	2301      	movs	r3, #1
 801205a:	e098      	b.n	801218e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d112      	bne.n	8012088 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00b      	beq.n	8012080 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8012068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801206c:	f383 8811 	msr	BASEPRI, r3
 8012070:	f3bf 8f6f 	isb	sy
 8012074:	f3bf 8f4f 	dsb	sy
 8012078:	617b      	str	r3, [r7, #20]
}
 801207a:	bf00      	nop
 801207c:	bf00      	nop
 801207e:	e7fd      	b.n	801207c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012080:	f001 fbd4 	bl	801382c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012084:	2300      	movs	r3, #0
 8012086:	e082      	b.n	801218e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801208a:	2b00      	cmp	r3, #0
 801208c:	d106      	bne.n	801209c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801208e:	f107 030c 	add.w	r3, r7, #12
 8012092:	4618      	mov	r0, r3
 8012094:	f000 ff08 	bl	8012ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012098:	2301      	movs	r3, #1
 801209a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801209c:	f001 fbc6 	bl	801382c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80120a0:	f000 fcb6 	bl	8012a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80120a4:	f001 fb90 	bl	80137c8 <vPortEnterCritical>
 80120a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80120ae:	b25b      	sxtb	r3, r3
 80120b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b4:	d103      	bne.n	80120be <xQueueSemaphoreTake+0x142>
 80120b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80120be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80120c4:	b25b      	sxtb	r3, r3
 80120c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ca:	d103      	bne.n	80120d4 <xQueueSemaphoreTake+0x158>
 80120cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120ce:	2200      	movs	r2, #0
 80120d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80120d4:	f001 fbaa 	bl	801382c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80120d8:	463a      	mov	r2, r7
 80120da:	f107 030c 	add.w	r3, r7, #12
 80120de:	4611      	mov	r1, r2
 80120e0:	4618      	mov	r0, r3
 80120e2:	f000 fef7 	bl	8012ed4 <xTaskCheckForTimeOut>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d132      	bne.n	8012152 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80120ee:	f000 f9f0 	bl	80124d2 <prvIsQueueEmpty>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d026      	beq.n	8012146 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80120f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d109      	bne.n	8012114 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012100:	f001 fb62 	bl	80137c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	4618      	mov	r0, r3
 801210a:	f001 f827 	bl	801315c <xTaskPriorityInherit>
 801210e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012110:	f001 fb8c 	bl	801382c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012116:	3324      	adds	r3, #36	@ 0x24
 8012118:	683a      	ldr	r2, [r7, #0]
 801211a:	4611      	mov	r1, r2
 801211c:	4618      	mov	r0, r3
 801211e:	f000 fe39 	bl	8012d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012122:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012124:	f000 f983 	bl	801242e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012128:	f000 fc80 	bl	8012a2c <xTaskResumeAll>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	f47f af67 	bne.w	8012002 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012134:	4b18      	ldr	r3, [pc, #96]	@ (8012198 <xQueueSemaphoreTake+0x21c>)
 8012136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	f3bf 8f6f 	isb	sy
 8012144:	e75d      	b.n	8012002 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012146:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012148:	f000 f971 	bl	801242e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801214c:	f000 fc6e 	bl	8012a2c <xTaskResumeAll>
 8012150:	e757      	b.n	8012002 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012152:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012154:	f000 f96b 	bl	801242e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012158:	f000 fc68 	bl	8012a2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801215c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801215e:	f000 f9b8 	bl	80124d2 <prvIsQueueEmpty>
 8012162:	4603      	mov	r3, r0
 8012164:	2b00      	cmp	r3, #0
 8012166:	f43f af4c 	beq.w	8012002 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801216a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801216c:	2b00      	cmp	r3, #0
 801216e:	d00d      	beq.n	801218c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012170:	f001 fb2a 	bl	80137c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012174:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012176:	f000 f8b2 	bl	80122de <prvGetDisinheritPriorityAfterTimeout>
 801217a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801217c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801217e:	689b      	ldr	r3, [r3, #8]
 8012180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012182:	4618      	mov	r0, r3
 8012184:	f001 f8e8 	bl	8013358 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012188:	f001 fb50 	bl	801382c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801218c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801218e:	4618      	mov	r0, r3
 8012190:	3738      	adds	r7, #56	@ 0x38
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	e000ed04 	.word	0xe000ed04

0801219c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b08e      	sub	sp, #56	@ 0x38
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80121ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d10b      	bne.n	80121ca <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80121b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121b6:	f383 8811 	msr	BASEPRI, r3
 80121ba:	f3bf 8f6f 	isb	sy
 80121be:	f3bf 8f4f 	dsb	sy
 80121c2:	623b      	str	r3, [r7, #32]
}
 80121c4:	bf00      	nop
 80121c6:	bf00      	nop
 80121c8:	e7fd      	b.n	80121c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d103      	bne.n	80121d8 <xQueueReceiveFromISR+0x3c>
 80121d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d101      	bne.n	80121dc <xQueueReceiveFromISR+0x40>
 80121d8:	2301      	movs	r3, #1
 80121da:	e000      	b.n	80121de <xQueueReceiveFromISR+0x42>
 80121dc:	2300      	movs	r3, #0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10b      	bne.n	80121fa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80121e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121e6:	f383 8811 	msr	BASEPRI, r3
 80121ea:	f3bf 8f6f 	isb	sy
 80121ee:	f3bf 8f4f 	dsb	sy
 80121f2:	61fb      	str	r3, [r7, #28]
}
 80121f4:	bf00      	nop
 80121f6:	bf00      	nop
 80121f8:	e7fd      	b.n	80121f6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121fa:	f001 fbc5 	bl	8013988 <vPortValidateInterruptPriority>
	__asm volatile
 80121fe:	f3ef 8211 	mrs	r2, BASEPRI
 8012202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012206:	f383 8811 	msr	BASEPRI, r3
 801220a:	f3bf 8f6f 	isb	sy
 801220e:	f3bf 8f4f 	dsb	sy
 8012212:	61ba      	str	r2, [r7, #24]
 8012214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012218:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801221a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801221c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801221e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012222:	2b00      	cmp	r3, #0
 8012224:	d02f      	beq.n	8012286 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801222c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012230:	68b9      	ldr	r1, [r7, #8]
 8012232:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012234:	f000 f8d5 	bl	80123e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801223a:	1e5a      	subs	r2, r3, #1
 801223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801223e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012240:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012248:	d112      	bne.n	8012270 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801224a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801224c:	691b      	ldr	r3, [r3, #16]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d016      	beq.n	8012280 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012254:	3310      	adds	r3, #16
 8012256:	4618      	mov	r0, r3
 8012258:	f000 fdc2 	bl	8012de0 <xTaskRemoveFromEventList>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00e      	beq.n	8012280 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d00b      	beq.n	8012280 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2201      	movs	r2, #1
 801226c:	601a      	str	r2, [r3, #0]
 801226e:	e007      	b.n	8012280 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012274:	3301      	adds	r3, #1
 8012276:	b2db      	uxtb	r3, r3
 8012278:	b25a      	sxtb	r2, r3
 801227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801227c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8012280:	2301      	movs	r3, #1
 8012282:	637b      	str	r3, [r7, #52]	@ 0x34
 8012284:	e001      	b.n	801228a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8012286:	2300      	movs	r3, #0
 8012288:	637b      	str	r3, [r7, #52]	@ 0x34
 801228a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801228c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	f383 8811 	msr	BASEPRI, r3
}
 8012294:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012298:	4618      	mov	r0, r3
 801229a:	3738      	adds	r7, #56	@ 0x38
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d10b      	bne.n	80122ca <vQueueDelete+0x2a>
	__asm volatile
 80122b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122b6:	f383 8811 	msr	BASEPRI, r3
 80122ba:	f3bf 8f6f 	isb	sy
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	60bb      	str	r3, [r7, #8]
}
 80122c4:	bf00      	nop
 80122c6:	bf00      	nop
 80122c8:	e7fd      	b.n	80122c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80122ca:	68f8      	ldr	r0, [r7, #12]
 80122cc:	f000 f930 	bl	8012530 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f001 fc69 	bl	8013ba8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80122d6:	bf00      	nop
 80122d8:	3710      	adds	r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80122de:	b480      	push	{r7}
 80122e0:	b085      	sub	sp, #20
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d006      	beq.n	80122fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f1c3 0307 	rsb	r3, r3, #7
 80122f8:	60fb      	str	r3, [r7, #12]
 80122fa:	e001      	b.n	8012300 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80122fc:	2300      	movs	r3, #0
 80122fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012300:	68fb      	ldr	r3, [r7, #12]
	}
 8012302:	4618      	mov	r0, r3
 8012304:	3714      	adds	r7, #20
 8012306:	46bd      	mov	sp, r7
 8012308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230c:	4770      	bx	lr

0801230e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801230e:	b580      	push	{r7, lr}
 8012310:	b086      	sub	sp, #24
 8012312:	af00      	add	r7, sp, #0
 8012314:	60f8      	str	r0, [r7, #12]
 8012316:	60b9      	str	r1, [r7, #8]
 8012318:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801231a:	2300      	movs	r3, #0
 801231c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012322:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10d      	bne.n	8012348 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d14d      	bne.n	80123d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	689b      	ldr	r3, [r3, #8]
 8012338:	4618      	mov	r0, r3
 801233a:	f000 ff85 	bl	8013248 <xTaskPriorityDisinherit>
 801233e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2200      	movs	r2, #0
 8012344:	609a      	str	r2, [r3, #8]
 8012346:	e043      	b.n	80123d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d119      	bne.n	8012382 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	6858      	ldr	r0, [r3, #4]
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012356:	461a      	mov	r2, r3
 8012358:	68b9      	ldr	r1, [r7, #8]
 801235a:	f002 fe78 	bl	801504e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	685a      	ldr	r2, [r3, #4]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012366:	441a      	add	r2, r3
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	685a      	ldr	r2, [r3, #4]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	689b      	ldr	r3, [r3, #8]
 8012374:	429a      	cmp	r2, r3
 8012376:	d32b      	bcc.n	80123d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	605a      	str	r2, [r3, #4]
 8012380:	e026      	b.n	80123d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	68d8      	ldr	r0, [r3, #12]
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801238a:	461a      	mov	r2, r3
 801238c:	68b9      	ldr	r1, [r7, #8]
 801238e:	f002 fe5e 	bl	801504e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	68da      	ldr	r2, [r3, #12]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801239a:	425b      	negs	r3, r3
 801239c:	441a      	add	r2, r3
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	68da      	ldr	r2, [r3, #12]
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d207      	bcs.n	80123be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	689a      	ldr	r2, [r3, #8]
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123b6:	425b      	negs	r3, r3
 80123b8:	441a      	add	r2, r3
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2b02      	cmp	r3, #2
 80123c2:	d105      	bne.n	80123d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d002      	beq.n	80123d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	3b01      	subs	r3, #1
 80123ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	1c5a      	adds	r2, r3, #1
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80123d8:	697b      	ldr	r3, [r7, #20]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3718      	adds	r7, #24
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}

080123e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80123e2:	b580      	push	{r7, lr}
 80123e4:	b082      	sub	sp, #8
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
 80123ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d018      	beq.n	8012426 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	68da      	ldr	r2, [r3, #12]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123fc:	441a      	add	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	68da      	ldr	r2, [r3, #12]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	689b      	ldr	r3, [r3, #8]
 801240a:	429a      	cmp	r2, r3
 801240c:	d303      	bcc.n	8012416 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	68d9      	ldr	r1, [r3, #12]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801241e:	461a      	mov	r2, r3
 8012420:	6838      	ldr	r0, [r7, #0]
 8012422:	f002 fe14 	bl	801504e <memcpy>
	}
}
 8012426:	bf00      	nop
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b084      	sub	sp, #16
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012436:	f001 f9c7 	bl	80137c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012440:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012442:	e011      	b.n	8012468 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012448:	2b00      	cmp	r3, #0
 801244a:	d012      	beq.n	8012472 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	3324      	adds	r3, #36	@ 0x24
 8012450:	4618      	mov	r0, r3
 8012452:	f000 fcc5 	bl	8012de0 <xTaskRemoveFromEventList>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d001      	beq.n	8012460 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801245c:	f000 fd9e 	bl	8012f9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012460:	7bfb      	ldrb	r3, [r7, #15]
 8012462:	3b01      	subs	r3, #1
 8012464:	b2db      	uxtb	r3, r3
 8012466:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801246c:	2b00      	cmp	r3, #0
 801246e:	dce9      	bgt.n	8012444 <prvUnlockQueue+0x16>
 8012470:	e000      	b.n	8012474 <prvUnlockQueue+0x46>
					break;
 8012472:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	22ff      	movs	r2, #255	@ 0xff
 8012478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801247c:	f001 f9d6 	bl	801382c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012480:	f001 f9a2 	bl	80137c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801248a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801248c:	e011      	b.n	80124b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	691b      	ldr	r3, [r3, #16]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d012      	beq.n	80124bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	3310      	adds	r3, #16
 801249a:	4618      	mov	r0, r3
 801249c:	f000 fca0 	bl	8012de0 <xTaskRemoveFromEventList>
 80124a0:	4603      	mov	r3, r0
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d001      	beq.n	80124aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80124a6:	f000 fd79 	bl	8012f9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80124aa:	7bbb      	ldrb	r3, [r7, #14]
 80124ac:	3b01      	subs	r3, #1
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	dce9      	bgt.n	801248e <prvUnlockQueue+0x60>
 80124ba:	e000      	b.n	80124be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80124bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	22ff      	movs	r2, #255	@ 0xff
 80124c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80124c6:	f001 f9b1 	bl	801382c <vPortExitCritical>
}
 80124ca:	bf00      	nop
 80124cc:	3710      	adds	r7, #16
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}

080124d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b084      	sub	sp, #16
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80124da:	f001 f975 	bl	80137c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d102      	bne.n	80124ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80124e6:	2301      	movs	r3, #1
 80124e8:	60fb      	str	r3, [r7, #12]
 80124ea:	e001      	b.n	80124f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80124ec:	2300      	movs	r3, #0
 80124ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80124f0:	f001 f99c 	bl	801382c <vPortExitCritical>

	return xReturn;
 80124f4:	68fb      	ldr	r3, [r7, #12]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b084      	sub	sp, #16
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012506:	f001 f95f 	bl	80137c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012512:	429a      	cmp	r2, r3
 8012514:	d102      	bne.n	801251c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012516:	2301      	movs	r3, #1
 8012518:	60fb      	str	r3, [r7, #12]
 801251a:	e001      	b.n	8012520 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801251c:	2300      	movs	r3, #0
 801251e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012520:	f001 f984 	bl	801382c <vPortExitCritical>

	return xReturn;
 8012524:	68fb      	ldr	r3, [r7, #12]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3710      	adds	r7, #16
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
	...

08012530 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012530:	b480      	push	{r7}
 8012532:	b085      	sub	sp, #20
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012538:	2300      	movs	r3, #0
 801253a:	60fb      	str	r3, [r7, #12]
 801253c:	e016      	b.n	801256c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801253e:	4a10      	ldr	r2, [pc, #64]	@ (8012580 <vQueueUnregisterQueue+0x50>)
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	00db      	lsls	r3, r3, #3
 8012544:	4413      	add	r3, r2
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	429a      	cmp	r2, r3
 801254c:	d10b      	bne.n	8012566 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801254e:	4a0c      	ldr	r2, [pc, #48]	@ (8012580 <vQueueUnregisterQueue+0x50>)
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2100      	movs	r1, #0
 8012554:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012558:	4a09      	ldr	r2, [pc, #36]	@ (8012580 <vQueueUnregisterQueue+0x50>)
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	00db      	lsls	r3, r3, #3
 801255e:	4413      	add	r3, r2
 8012560:	2200      	movs	r2, #0
 8012562:	605a      	str	r2, [r3, #4]
				break;
 8012564:	e006      	b.n	8012574 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	3301      	adds	r3, #1
 801256a:	60fb      	str	r3, [r7, #12]
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b07      	cmp	r3, #7
 8012570:	d9e5      	bls.n	801253e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012572:	bf00      	nop
 8012574:	bf00      	nop
 8012576:	3714      	adds	r7, #20
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr
 8012580:	200016d8 	.word	0x200016d8

08012584 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012584:	b580      	push	{r7, lr}
 8012586:	b08c      	sub	sp, #48	@ 0x30
 8012588:	af04      	add	r7, sp, #16
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	603b      	str	r3, [r7, #0]
 8012590:	4613      	mov	r3, r2
 8012592:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012594:	88fb      	ldrh	r3, [r7, #6]
 8012596:	009b      	lsls	r3, r3, #2
 8012598:	4618      	mov	r0, r3
 801259a:	f001 fa37 	bl	8013a0c <pvPortMalloc>
 801259e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00e      	beq.n	80125c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80125a6:	2054      	movs	r0, #84	@ 0x54
 80125a8:	f001 fa30 	bl	8013a0c <pvPortMalloc>
 80125ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d003      	beq.n	80125bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	697a      	ldr	r2, [r7, #20]
 80125b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80125ba:	e005      	b.n	80125c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80125bc:	6978      	ldr	r0, [r7, #20]
 80125be:	f001 faf3 	bl	8013ba8 <vPortFree>
 80125c2:	e001      	b.n	80125c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d013      	beq.n	80125f6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80125ce:	88fa      	ldrh	r2, [r7, #6]
 80125d0:	2300      	movs	r3, #0
 80125d2:	9303      	str	r3, [sp, #12]
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	9302      	str	r3, [sp, #8]
 80125d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125da:	9301      	str	r3, [sp, #4]
 80125dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125de:	9300      	str	r3, [sp, #0]
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	68b9      	ldr	r1, [r7, #8]
 80125e4:	68f8      	ldr	r0, [r7, #12]
 80125e6:	f000 f80e 	bl	8012606 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80125ea:	69f8      	ldr	r0, [r7, #28]
 80125ec:	f000 f894 	bl	8012718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80125f0:	2301      	movs	r3, #1
 80125f2:	61bb      	str	r3, [r7, #24]
 80125f4:	e002      	b.n	80125fc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80125f6:	f04f 33ff 	mov.w	r3, #4294967295
 80125fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80125fc:	69bb      	ldr	r3, [r7, #24]
	}
 80125fe:	4618      	mov	r0, r3
 8012600:	3720      	adds	r7, #32
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012606:	b580      	push	{r7, lr}
 8012608:	b088      	sub	sp, #32
 801260a:	af00      	add	r7, sp, #0
 801260c:	60f8      	str	r0, [r7, #12]
 801260e:	60b9      	str	r1, [r7, #8]
 8012610:	607a      	str	r2, [r7, #4]
 8012612:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801261e:	3b01      	subs	r3, #1
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	4413      	add	r3, r2
 8012624:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012626:	69bb      	ldr	r3, [r7, #24]
 8012628:	f023 0307 	bic.w	r3, r3, #7
 801262c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	f003 0307 	and.w	r3, r3, #7
 8012634:	2b00      	cmp	r3, #0
 8012636:	d00b      	beq.n	8012650 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8012638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801263c:	f383 8811 	msr	BASEPRI, r3
 8012640:	f3bf 8f6f 	isb	sy
 8012644:	f3bf 8f4f 	dsb	sy
 8012648:	617b      	str	r3, [r7, #20]
}
 801264a:	bf00      	nop
 801264c:	bf00      	nop
 801264e:	e7fd      	b.n	801264c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d01f      	beq.n	8012696 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012656:	2300      	movs	r3, #0
 8012658:	61fb      	str	r3, [r7, #28]
 801265a:	e012      	b.n	8012682 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801265c:	68ba      	ldr	r2, [r7, #8]
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	4413      	add	r3, r2
 8012662:	7819      	ldrb	r1, [r3, #0]
 8012664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012666:	69fb      	ldr	r3, [r7, #28]
 8012668:	4413      	add	r3, r2
 801266a:	3334      	adds	r3, #52	@ 0x34
 801266c:	460a      	mov	r2, r1
 801266e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012670:	68ba      	ldr	r2, [r7, #8]
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	4413      	add	r3, r2
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d006      	beq.n	801268a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	3301      	adds	r3, #1
 8012680:	61fb      	str	r3, [r7, #28]
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	2b0f      	cmp	r3, #15
 8012686:	d9e9      	bls.n	801265c <prvInitialiseNewTask+0x56>
 8012688:	e000      	b.n	801268c <prvInitialiseNewTask+0x86>
			{
				break;
 801268a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801268c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801268e:	2200      	movs	r2, #0
 8012690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012694:	e003      	b.n	801269e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012698:	2200      	movs	r2, #0
 801269a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a0:	2b06      	cmp	r3, #6
 80126a2:	d901      	bls.n	80126a8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80126a4:	2306      	movs	r3, #6
 80126a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80126a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80126ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126b2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80126b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126b6:	2200      	movs	r2, #0
 80126b8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80126ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126bc:	3304      	adds	r3, #4
 80126be:	4618      	mov	r0, r3
 80126c0:	f7ff f943 	bl	801194a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80126c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126c6:	3318      	adds	r3, #24
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7ff f93e 	bl	801194a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80126ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80126d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126d6:	f1c3 0207 	rsb	r2, r3, #7
 80126da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80126de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80126e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80126e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126e6:	2200      	movs	r2, #0
 80126e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80126ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126ec:	2200      	movs	r2, #0
 80126ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80126f2:	683a      	ldr	r2, [r7, #0]
 80126f4:	68f9      	ldr	r1, [r7, #12]
 80126f6:	69b8      	ldr	r0, [r7, #24]
 80126f8:	f000 ff38 	bl	801356c <pxPortInitialiseStack>
 80126fc:	4602      	mov	r2, r0
 80126fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012700:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801270a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801270c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801270e:	bf00      	nop
 8012710:	3720      	adds	r7, #32
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
	...

08012718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012720:	f001 f852 	bl	80137c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012724:	4b2a      	ldr	r3, [pc, #168]	@ (80127d0 <prvAddNewTaskToReadyList+0xb8>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	3301      	adds	r3, #1
 801272a:	4a29      	ldr	r2, [pc, #164]	@ (80127d0 <prvAddNewTaskToReadyList+0xb8>)
 801272c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801272e:	4b29      	ldr	r3, [pc, #164]	@ (80127d4 <prvAddNewTaskToReadyList+0xbc>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d109      	bne.n	801274a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012736:	4a27      	ldr	r2, [pc, #156]	@ (80127d4 <prvAddNewTaskToReadyList+0xbc>)
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801273c:	4b24      	ldr	r3, [pc, #144]	@ (80127d0 <prvAddNewTaskToReadyList+0xb8>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b01      	cmp	r3, #1
 8012742:	d110      	bne.n	8012766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012744:	f000 fc4e 	bl	8012fe4 <prvInitialiseTaskLists>
 8012748:	e00d      	b.n	8012766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801274a:	4b23      	ldr	r3, [pc, #140]	@ (80127d8 <prvAddNewTaskToReadyList+0xc0>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d109      	bne.n	8012766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012752:	4b20      	ldr	r3, [pc, #128]	@ (80127d4 <prvAddNewTaskToReadyList+0xbc>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801275c:	429a      	cmp	r2, r3
 801275e:	d802      	bhi.n	8012766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012760:	4a1c      	ldr	r2, [pc, #112]	@ (80127d4 <prvAddNewTaskToReadyList+0xbc>)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012766:	4b1d      	ldr	r3, [pc, #116]	@ (80127dc <prvAddNewTaskToReadyList+0xc4>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	3301      	adds	r3, #1
 801276c:	4a1b      	ldr	r2, [pc, #108]	@ (80127dc <prvAddNewTaskToReadyList+0xc4>)
 801276e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012774:	2201      	movs	r2, #1
 8012776:	409a      	lsls	r2, r3
 8012778:	4b19      	ldr	r3, [pc, #100]	@ (80127e0 <prvAddNewTaskToReadyList+0xc8>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	4313      	orrs	r3, r2
 801277e:	4a18      	ldr	r2, [pc, #96]	@ (80127e0 <prvAddNewTaskToReadyList+0xc8>)
 8012780:	6013      	str	r3, [r2, #0]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012786:	4613      	mov	r3, r2
 8012788:	009b      	lsls	r3, r3, #2
 801278a:	4413      	add	r3, r2
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	4a15      	ldr	r2, [pc, #84]	@ (80127e4 <prvAddNewTaskToReadyList+0xcc>)
 8012790:	441a      	add	r2, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	3304      	adds	r3, #4
 8012796:	4619      	mov	r1, r3
 8012798:	4610      	mov	r0, r2
 801279a:	f7ff f8e3 	bl	8011964 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801279e:	f001 f845 	bl	801382c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80127a2:	4b0d      	ldr	r3, [pc, #52]	@ (80127d8 <prvAddNewTaskToReadyList+0xc0>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d00e      	beq.n	80127c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80127aa:	4b0a      	ldr	r3, [pc, #40]	@ (80127d4 <prvAddNewTaskToReadyList+0xbc>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d207      	bcs.n	80127c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80127b8:	4b0b      	ldr	r3, [pc, #44]	@ (80127e8 <prvAddNewTaskToReadyList+0xd0>)
 80127ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127be:	601a      	str	r2, [r3, #0]
 80127c0:	f3bf 8f4f 	dsb	sy
 80127c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80127c8:	bf00      	nop
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	20001818 	.word	0x20001818
 80127d4:	20001718 	.word	0x20001718
 80127d8:	20001824 	.word	0x20001824
 80127dc:	20001834 	.word	0x20001834
 80127e0:	20001820 	.word	0x20001820
 80127e4:	2000171c 	.word	0x2000171c
 80127e8:	e000ed04 	.word	0xe000ed04

080127ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80127f4:	2300      	movs	r3, #0
 80127f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d018      	beq.n	8012830 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80127fe:	4b14      	ldr	r3, [pc, #80]	@ (8012850 <vTaskDelay+0x64>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d00b      	beq.n	801281e <vTaskDelay+0x32>
	__asm volatile
 8012806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801280a:	f383 8811 	msr	BASEPRI, r3
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f3bf 8f4f 	dsb	sy
 8012816:	60bb      	str	r3, [r7, #8]
}
 8012818:	bf00      	nop
 801281a:	bf00      	nop
 801281c:	e7fd      	b.n	801281a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801281e:	f000 f8f7 	bl	8012a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012822:	2100      	movs	r1, #0
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f000 fe3b 	bl	80134a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801282a:	f000 f8ff 	bl	8012a2c <xTaskResumeAll>
 801282e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d107      	bne.n	8012846 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012836:	4b07      	ldr	r3, [pc, #28]	@ (8012854 <vTaskDelay+0x68>)
 8012838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801283c:	601a      	str	r2, [r3, #0]
 801283e:	f3bf 8f4f 	dsb	sy
 8012842:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012846:	bf00      	nop
 8012848:	3710      	adds	r7, #16
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	20001840 	.word	0x20001840
 8012854:	e000ed04 	.word	0xe000ed04

08012858 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012860:	f000 ffb2 	bl	80137c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d102      	bne.n	8012870 <vTaskSuspend+0x18>
 801286a:	4b3d      	ldr	r3, [pc, #244]	@ (8012960 <vTaskSuspend+0x108>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	e000      	b.n	8012872 <vTaskSuspend+0x1a>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	3304      	adds	r3, #4
 8012878:	4618      	mov	r0, r3
 801287a:	f7ff f8d0 	bl	8011a1e <uxListRemove>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	d115      	bne.n	80128b0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012888:	4936      	ldr	r1, [pc, #216]	@ (8012964 <vTaskSuspend+0x10c>)
 801288a:	4613      	mov	r3, r2
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	4413      	add	r3, r2
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	440b      	add	r3, r1
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d10a      	bne.n	80128b0 <vTaskSuspend+0x58>
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801289e:	2201      	movs	r2, #1
 80128a0:	fa02 f303 	lsl.w	r3, r2, r3
 80128a4:	43da      	mvns	r2, r3
 80128a6:	4b30      	ldr	r3, [pc, #192]	@ (8012968 <vTaskSuspend+0x110>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4013      	ands	r3, r2
 80128ac:	4a2e      	ldr	r2, [pc, #184]	@ (8012968 <vTaskSuspend+0x110>)
 80128ae:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d004      	beq.n	80128c2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	3318      	adds	r3, #24
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff f8ae 	bl	8011a1e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	3304      	adds	r3, #4
 80128c6:	4619      	mov	r1, r3
 80128c8:	4828      	ldr	r0, [pc, #160]	@ (801296c <vTaskSuspend+0x114>)
 80128ca:	f7ff f84b 	bl	8011964 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d103      	bne.n	80128e2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	2200      	movs	r2, #0
 80128de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80128e2:	f000 ffa3 	bl	801382c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80128e6:	4b22      	ldr	r3, [pc, #136]	@ (8012970 <vTaskSuspend+0x118>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d005      	beq.n	80128fa <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80128ee:	f000 ff6b 	bl	80137c8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80128f2:	f000 fbf5 	bl	80130e0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80128f6:	f000 ff99 	bl	801382c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80128fa:	4b19      	ldr	r3, [pc, #100]	@ (8012960 <vTaskSuspend+0x108>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	68fa      	ldr	r2, [r7, #12]
 8012900:	429a      	cmp	r2, r3
 8012902:	d128      	bne.n	8012956 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8012904:	4b1a      	ldr	r3, [pc, #104]	@ (8012970 <vTaskSuspend+0x118>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d018      	beq.n	801293e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801290c:	4b19      	ldr	r3, [pc, #100]	@ (8012974 <vTaskSuspend+0x11c>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d00b      	beq.n	801292c <vTaskSuspend+0xd4>
	__asm volatile
 8012914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012918:	f383 8811 	msr	BASEPRI, r3
 801291c:	f3bf 8f6f 	isb	sy
 8012920:	f3bf 8f4f 	dsb	sy
 8012924:	60bb      	str	r3, [r7, #8]
}
 8012926:	bf00      	nop
 8012928:	bf00      	nop
 801292a:	e7fd      	b.n	8012928 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801292c:	4b12      	ldr	r3, [pc, #72]	@ (8012978 <vTaskSuspend+0x120>)
 801292e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012932:	601a      	str	r2, [r3, #0]
 8012934:	f3bf 8f4f 	dsb	sy
 8012938:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801293c:	e00b      	b.n	8012956 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801293e:	4b0b      	ldr	r3, [pc, #44]	@ (801296c <vTaskSuspend+0x114>)
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	4b0e      	ldr	r3, [pc, #56]	@ (801297c <vTaskSuspend+0x124>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	429a      	cmp	r2, r3
 8012948:	d103      	bne.n	8012952 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 801294a:	4b05      	ldr	r3, [pc, #20]	@ (8012960 <vTaskSuspend+0x108>)
 801294c:	2200      	movs	r2, #0
 801294e:	601a      	str	r2, [r3, #0]
	}
 8012950:	e001      	b.n	8012956 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8012952:	f000 f9c3 	bl	8012cdc <vTaskSwitchContext>
	}
 8012956:	bf00      	nop
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	20001718 	.word	0x20001718
 8012964:	2000171c 	.word	0x2000171c
 8012968:	20001820 	.word	0x20001820
 801296c:	20001804 	.word	0x20001804
 8012970:	20001824 	.word	0x20001824
 8012974:	20001840 	.word	0x20001840
 8012978:	e000ed04 	.word	0xe000ed04
 801297c:	20001818 	.word	0x20001818

08012980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b086      	sub	sp, #24
 8012984:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8012986:	4b1c      	ldr	r3, [pc, #112]	@ (80129f8 <vTaskStartScheduler+0x78>)
 8012988:	9301      	str	r3, [sp, #4]
 801298a:	2300      	movs	r3, #0
 801298c:	9300      	str	r3, [sp, #0]
 801298e:	2300      	movs	r3, #0
 8012990:	2280      	movs	r2, #128	@ 0x80
 8012992:	491a      	ldr	r1, [pc, #104]	@ (80129fc <vTaskStartScheduler+0x7c>)
 8012994:	481a      	ldr	r0, [pc, #104]	@ (8012a00 <vTaskStartScheduler+0x80>)
 8012996:	f7ff fdf5 	bl	8012584 <xTaskCreate>
 801299a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d116      	bne.n	80129d0 <vTaskStartScheduler+0x50>
	__asm volatile
 80129a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129a6:	f383 8811 	msr	BASEPRI, r3
 80129aa:	f3bf 8f6f 	isb	sy
 80129ae:	f3bf 8f4f 	dsb	sy
 80129b2:	60bb      	str	r3, [r7, #8]
}
 80129b4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80129b6:	4b13      	ldr	r3, [pc, #76]	@ (8012a04 <vTaskStartScheduler+0x84>)
 80129b8:	f04f 32ff 	mov.w	r2, #4294967295
 80129bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80129be:	4b12      	ldr	r3, [pc, #72]	@ (8012a08 <vTaskStartScheduler+0x88>)
 80129c0:	2201      	movs	r2, #1
 80129c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80129c4:	4b11      	ldr	r3, [pc, #68]	@ (8012a0c <vTaskStartScheduler+0x8c>)
 80129c6:	2200      	movs	r2, #0
 80129c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80129ca:	f000 fe59 	bl	8013680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80129ce:	e00f      	b.n	80129f0 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129d6:	d10b      	bne.n	80129f0 <vTaskStartScheduler+0x70>
	__asm volatile
 80129d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129dc:	f383 8811 	msr	BASEPRI, r3
 80129e0:	f3bf 8f6f 	isb	sy
 80129e4:	f3bf 8f4f 	dsb	sy
 80129e8:	607b      	str	r3, [r7, #4]
}
 80129ea:	bf00      	nop
 80129ec:	bf00      	nop
 80129ee:	e7fd      	b.n	80129ec <vTaskStartScheduler+0x6c>
}
 80129f0:	bf00      	nop
 80129f2:	3710      	adds	r7, #16
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	2000183c 	.word	0x2000183c
 80129fc:	0801a164 	.word	0x0801a164
 8012a00:	08012fb5 	.word	0x08012fb5
 8012a04:	20001838 	.word	0x20001838
 8012a08:	20001824 	.word	0x20001824
 8012a0c:	2000181c 	.word	0x2000181c

08012a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012a10:	b480      	push	{r7}
 8012a12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012a14:	4b04      	ldr	r3, [pc, #16]	@ (8012a28 <vTaskSuspendAll+0x18>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	3301      	adds	r3, #1
 8012a1a:	4a03      	ldr	r2, [pc, #12]	@ (8012a28 <vTaskSuspendAll+0x18>)
 8012a1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012a1e:	bf00      	nop
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr
 8012a28:	20001840 	.word	0x20001840

08012a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012a32:	2300      	movs	r3, #0
 8012a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012a36:	2300      	movs	r3, #0
 8012a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012a3a:	4b42      	ldr	r3, [pc, #264]	@ (8012b44 <xTaskResumeAll+0x118>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d10b      	bne.n	8012a5a <xTaskResumeAll+0x2e>
	__asm volatile
 8012a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a46:	f383 8811 	msr	BASEPRI, r3
 8012a4a:	f3bf 8f6f 	isb	sy
 8012a4e:	f3bf 8f4f 	dsb	sy
 8012a52:	603b      	str	r3, [r7, #0]
}
 8012a54:	bf00      	nop
 8012a56:	bf00      	nop
 8012a58:	e7fd      	b.n	8012a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012a5a:	f000 feb5 	bl	80137c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012a5e:	4b39      	ldr	r3, [pc, #228]	@ (8012b44 <xTaskResumeAll+0x118>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	3b01      	subs	r3, #1
 8012a64:	4a37      	ldr	r2, [pc, #220]	@ (8012b44 <xTaskResumeAll+0x118>)
 8012a66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a68:	4b36      	ldr	r3, [pc, #216]	@ (8012b44 <xTaskResumeAll+0x118>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d161      	bne.n	8012b34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012a70:	4b35      	ldr	r3, [pc, #212]	@ (8012b48 <xTaskResumeAll+0x11c>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d05d      	beq.n	8012b34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a78:	e02e      	b.n	8012ad8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a7a:	4b34      	ldr	r3, [pc, #208]	@ (8012b4c <xTaskResumeAll+0x120>)
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	3318      	adds	r3, #24
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fe ffc9 	bl	8011a1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	3304      	adds	r3, #4
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7fe ffc4 	bl	8011a1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a9a:	2201      	movs	r2, #1
 8012a9c:	409a      	lsls	r2, r3
 8012a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8012b50 <xTaskResumeAll+0x124>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	4313      	orrs	r3, r2
 8012aa4:	4a2a      	ldr	r2, [pc, #168]	@ (8012b50 <xTaskResumeAll+0x124>)
 8012aa6:	6013      	str	r3, [r2, #0]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012aac:	4613      	mov	r3, r2
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	4413      	add	r3, r2
 8012ab2:	009b      	lsls	r3, r3, #2
 8012ab4:	4a27      	ldr	r2, [pc, #156]	@ (8012b54 <xTaskResumeAll+0x128>)
 8012ab6:	441a      	add	r2, r3
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	3304      	adds	r3, #4
 8012abc:	4619      	mov	r1, r3
 8012abe:	4610      	mov	r0, r2
 8012ac0:	f7fe ff50 	bl	8011964 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ac8:	4b23      	ldr	r3, [pc, #140]	@ (8012b58 <xTaskResumeAll+0x12c>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d302      	bcc.n	8012ad8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012ad2:	4b22      	ldr	r3, [pc, #136]	@ (8012b5c <xTaskResumeAll+0x130>)
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8012b4c <xTaskResumeAll+0x120>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d1cc      	bne.n	8012a7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d001      	beq.n	8012aea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012ae6:	f000 fafb 	bl	80130e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012aea:	4b1d      	ldr	r3, [pc, #116]	@ (8012b60 <xTaskResumeAll+0x134>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d010      	beq.n	8012b18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012af6:	f000 f837 	bl	8012b68 <xTaskIncrementTick>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d002      	beq.n	8012b06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012b00:	4b16      	ldr	r3, [pc, #88]	@ (8012b5c <xTaskResumeAll+0x130>)
 8012b02:	2201      	movs	r2, #1
 8012b04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	3b01      	subs	r3, #1
 8012b0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1f1      	bne.n	8012af6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012b12:	4b13      	ldr	r3, [pc, #76]	@ (8012b60 <xTaskResumeAll+0x134>)
 8012b14:	2200      	movs	r2, #0
 8012b16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012b18:	4b10      	ldr	r3, [pc, #64]	@ (8012b5c <xTaskResumeAll+0x130>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d009      	beq.n	8012b34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012b20:	2301      	movs	r3, #1
 8012b22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012b24:	4b0f      	ldr	r3, [pc, #60]	@ (8012b64 <xTaskResumeAll+0x138>)
 8012b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b2a:	601a      	str	r2, [r3, #0]
 8012b2c:	f3bf 8f4f 	dsb	sy
 8012b30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012b34:	f000 fe7a 	bl	801382c <vPortExitCritical>

	return xAlreadyYielded;
 8012b38:	68bb      	ldr	r3, [r7, #8]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	20001840 	.word	0x20001840
 8012b48:	20001818 	.word	0x20001818
 8012b4c:	200017d8 	.word	0x200017d8
 8012b50:	20001820 	.word	0x20001820
 8012b54:	2000171c 	.word	0x2000171c
 8012b58:	20001718 	.word	0x20001718
 8012b5c:	2000182c 	.word	0x2000182c
 8012b60:	20001828 	.word	0x20001828
 8012b64:	e000ed04 	.word	0xe000ed04

08012b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b72:	4b4f      	ldr	r3, [pc, #316]	@ (8012cb0 <xTaskIncrementTick+0x148>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	f040 808f 	bne.w	8012c9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8012cb4 <xTaskIncrementTick+0x14c>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	3301      	adds	r3, #1
 8012b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012b84:	4a4b      	ldr	r2, [pc, #300]	@ (8012cb4 <xTaskIncrementTick+0x14c>)
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d121      	bne.n	8012bd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012b90:	4b49      	ldr	r3, [pc, #292]	@ (8012cb8 <xTaskIncrementTick+0x150>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d00b      	beq.n	8012bb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8012b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b9e:	f383 8811 	msr	BASEPRI, r3
 8012ba2:	f3bf 8f6f 	isb	sy
 8012ba6:	f3bf 8f4f 	dsb	sy
 8012baa:	603b      	str	r3, [r7, #0]
}
 8012bac:	bf00      	nop
 8012bae:	bf00      	nop
 8012bb0:	e7fd      	b.n	8012bae <xTaskIncrementTick+0x46>
 8012bb2:	4b41      	ldr	r3, [pc, #260]	@ (8012cb8 <xTaskIncrementTick+0x150>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	60fb      	str	r3, [r7, #12]
 8012bb8:	4b40      	ldr	r3, [pc, #256]	@ (8012cbc <xTaskIncrementTick+0x154>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8012cb8 <xTaskIncrementTick+0x150>)
 8012bbe:	6013      	str	r3, [r2, #0]
 8012bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8012cbc <xTaskIncrementTick+0x154>)
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	6013      	str	r3, [r2, #0]
 8012bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8012cc0 <xTaskIncrementTick+0x158>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	3301      	adds	r3, #1
 8012bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8012cc0 <xTaskIncrementTick+0x158>)
 8012bce:	6013      	str	r3, [r2, #0]
 8012bd0:	f000 fa86 	bl	80130e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8012cc4 <xTaskIncrementTick+0x15c>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	693a      	ldr	r2, [r7, #16]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d348      	bcc.n	8012c70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012bde:	4b36      	ldr	r3, [pc, #216]	@ (8012cb8 <xTaskIncrementTick+0x150>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d104      	bne.n	8012bf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012be8:	4b36      	ldr	r3, [pc, #216]	@ (8012cc4 <xTaskIncrementTick+0x15c>)
 8012bea:	f04f 32ff 	mov.w	r2, #4294967295
 8012bee:	601a      	str	r2, [r3, #0]
					break;
 8012bf0:	e03e      	b.n	8012c70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bf2:	4b31      	ldr	r3, [pc, #196]	@ (8012cb8 <xTaskIncrementTick+0x150>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	68db      	ldr	r3, [r3, #12]
 8012bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012c02:	693a      	ldr	r2, [r7, #16]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d203      	bcs.n	8012c12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8012cc4 <xTaskIncrementTick+0x15c>)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012c10:	e02e      	b.n	8012c70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	3304      	adds	r3, #4
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7fe ff01 	bl	8011a1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d004      	beq.n	8012c2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	3318      	adds	r3, #24
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7fe fef8 	bl	8011a1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c32:	2201      	movs	r2, #1
 8012c34:	409a      	lsls	r2, r3
 8012c36:	4b24      	ldr	r3, [pc, #144]	@ (8012cc8 <xTaskIncrementTick+0x160>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	4a22      	ldr	r2, [pc, #136]	@ (8012cc8 <xTaskIncrementTick+0x160>)
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c44:	4613      	mov	r3, r2
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	4413      	add	r3, r2
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8012ccc <xTaskIncrementTick+0x164>)
 8012c4e:	441a      	add	r2, r3
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	3304      	adds	r3, #4
 8012c54:	4619      	mov	r1, r3
 8012c56:	4610      	mov	r0, r2
 8012c58:	f7fe fe84 	bl	8011964 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c60:	4b1b      	ldr	r3, [pc, #108]	@ (8012cd0 <xTaskIncrementTick+0x168>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d3b9      	bcc.n	8012bde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c6e:	e7b6      	b.n	8012bde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012c70:	4b17      	ldr	r3, [pc, #92]	@ (8012cd0 <xTaskIncrementTick+0x168>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c76:	4915      	ldr	r1, [pc, #84]	@ (8012ccc <xTaskIncrementTick+0x164>)
 8012c78:	4613      	mov	r3, r2
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	4413      	add	r3, r2
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	440b      	add	r3, r1
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d901      	bls.n	8012c8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012c8c:	4b11      	ldr	r3, [pc, #68]	@ (8012cd4 <xTaskIncrementTick+0x16c>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d007      	beq.n	8012ca4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012c94:	2301      	movs	r3, #1
 8012c96:	617b      	str	r3, [r7, #20]
 8012c98:	e004      	b.n	8012ca4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8012cd8 <xTaskIncrementTick+0x170>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8012cd8 <xTaskIncrementTick+0x170>)
 8012ca2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012ca4:	697b      	ldr	r3, [r7, #20]
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3718      	adds	r7, #24
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	20001840 	.word	0x20001840
 8012cb4:	2000181c 	.word	0x2000181c
 8012cb8:	200017d0 	.word	0x200017d0
 8012cbc:	200017d4 	.word	0x200017d4
 8012cc0:	20001830 	.word	0x20001830
 8012cc4:	20001838 	.word	0x20001838
 8012cc8:	20001820 	.word	0x20001820
 8012ccc:	2000171c 	.word	0x2000171c
 8012cd0:	20001718 	.word	0x20001718
 8012cd4:	2000182c 	.word	0x2000182c
 8012cd8:	20001828 	.word	0x20001828

08012cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b087      	sub	sp, #28
 8012ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012ce2:	4b27      	ldr	r3, [pc, #156]	@ (8012d80 <vTaskSwitchContext+0xa4>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d003      	beq.n	8012cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012cea:	4b26      	ldr	r3, [pc, #152]	@ (8012d84 <vTaskSwitchContext+0xa8>)
 8012cec:	2201      	movs	r2, #1
 8012cee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012cf0:	e040      	b.n	8012d74 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012cf2:	4b24      	ldr	r3, [pc, #144]	@ (8012d84 <vTaskSwitchContext+0xa8>)
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cf8:	4b23      	ldr	r3, [pc, #140]	@ (8012d88 <vTaskSwitchContext+0xac>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	fab3 f383 	clz	r3, r3
 8012d04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012d06:	7afb      	ldrb	r3, [r7, #11]
 8012d08:	f1c3 031f 	rsb	r3, r3, #31
 8012d0c:	617b      	str	r3, [r7, #20]
 8012d0e:	491f      	ldr	r1, [pc, #124]	@ (8012d8c <vTaskSwitchContext+0xb0>)
 8012d10:	697a      	ldr	r2, [r7, #20]
 8012d12:	4613      	mov	r3, r2
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	4413      	add	r3, r2
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	440b      	add	r3, r1
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d10b      	bne.n	8012d3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8012d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d26:	f383 8811 	msr	BASEPRI, r3
 8012d2a:	f3bf 8f6f 	isb	sy
 8012d2e:	f3bf 8f4f 	dsb	sy
 8012d32:	607b      	str	r3, [r7, #4]
}
 8012d34:	bf00      	nop
 8012d36:	bf00      	nop
 8012d38:	e7fd      	b.n	8012d36 <vTaskSwitchContext+0x5a>
 8012d3a:	697a      	ldr	r2, [r7, #20]
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	009b      	lsls	r3, r3, #2
 8012d40:	4413      	add	r3, r2
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	4a11      	ldr	r2, [pc, #68]	@ (8012d8c <vTaskSwitchContext+0xb0>)
 8012d46:	4413      	add	r3, r2
 8012d48:	613b      	str	r3, [r7, #16]
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	685a      	ldr	r2, [r3, #4]
 8012d50:	693b      	ldr	r3, [r7, #16]
 8012d52:	605a      	str	r2, [r3, #4]
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	685a      	ldr	r2, [r3, #4]
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	3308      	adds	r3, #8
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d104      	bne.n	8012d6a <vTaskSwitchContext+0x8e>
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	685a      	ldr	r2, [r3, #4]
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	605a      	str	r2, [r3, #4]
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	4a07      	ldr	r2, [pc, #28]	@ (8012d90 <vTaskSwitchContext+0xb4>)
 8012d72:	6013      	str	r3, [r2, #0]
}
 8012d74:	bf00      	nop
 8012d76:	371c      	adds	r7, #28
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7e:	4770      	bx	lr
 8012d80:	20001840 	.word	0x20001840
 8012d84:	2000182c 	.word	0x2000182c
 8012d88:	20001820 	.word	0x20001820
 8012d8c:	2000171c 	.word	0x2000171c
 8012d90:	20001718 	.word	0x20001718

08012d94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b084      	sub	sp, #16
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d10b      	bne.n	8012dbc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012da8:	f383 8811 	msr	BASEPRI, r3
 8012dac:	f3bf 8f6f 	isb	sy
 8012db0:	f3bf 8f4f 	dsb	sy
 8012db4:	60fb      	str	r3, [r7, #12]
}
 8012db6:	bf00      	nop
 8012db8:	bf00      	nop
 8012dba:	e7fd      	b.n	8012db8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012dbc:	4b07      	ldr	r3, [pc, #28]	@ (8012ddc <vTaskPlaceOnEventList+0x48>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	3318      	adds	r3, #24
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f7fe fdf1 	bl	80119ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012dca:	2101      	movs	r1, #1
 8012dcc:	6838      	ldr	r0, [r7, #0]
 8012dce:	f000 fb67 	bl	80134a0 <prvAddCurrentTaskToDelayedList>
}
 8012dd2:	bf00      	nop
 8012dd4:	3710      	adds	r7, #16
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	20001718 	.word	0x20001718

08012de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b086      	sub	sp, #24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d10b      	bne.n	8012e0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dfa:	f383 8811 	msr	BASEPRI, r3
 8012dfe:	f3bf 8f6f 	isb	sy
 8012e02:	f3bf 8f4f 	dsb	sy
 8012e06:	60fb      	str	r3, [r7, #12]
}
 8012e08:	bf00      	nop
 8012e0a:	bf00      	nop
 8012e0c:	e7fd      	b.n	8012e0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	3318      	adds	r3, #24
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fe fe03 	bl	8011a1e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e18:	4b1d      	ldr	r3, [pc, #116]	@ (8012e90 <xTaskRemoveFromEventList+0xb0>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d11c      	bne.n	8012e5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	3304      	adds	r3, #4
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7fe fdfa 	bl	8011a1e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e2e:	2201      	movs	r2, #1
 8012e30:	409a      	lsls	r2, r3
 8012e32:	4b18      	ldr	r3, [pc, #96]	@ (8012e94 <xTaskRemoveFromEventList+0xb4>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	4313      	orrs	r3, r2
 8012e38:	4a16      	ldr	r2, [pc, #88]	@ (8012e94 <xTaskRemoveFromEventList+0xb4>)
 8012e3a:	6013      	str	r3, [r2, #0]
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e40:	4613      	mov	r3, r2
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	4413      	add	r3, r2
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	4a13      	ldr	r2, [pc, #76]	@ (8012e98 <xTaskRemoveFromEventList+0xb8>)
 8012e4a:	441a      	add	r2, r3
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	3304      	adds	r3, #4
 8012e50:	4619      	mov	r1, r3
 8012e52:	4610      	mov	r0, r2
 8012e54:	f7fe fd86 	bl	8011964 <vListInsertEnd>
 8012e58:	e005      	b.n	8012e66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	3318      	adds	r3, #24
 8012e5e:	4619      	mov	r1, r3
 8012e60:	480e      	ldr	r0, [pc, #56]	@ (8012e9c <xTaskRemoveFromEventList+0xbc>)
 8012e62:	f7fe fd7f 	bl	8011964 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ea0 <xTaskRemoveFromEventList+0xc0>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d905      	bls.n	8012e80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012e74:	2301      	movs	r3, #1
 8012e76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012e78:	4b0a      	ldr	r3, [pc, #40]	@ (8012ea4 <xTaskRemoveFromEventList+0xc4>)
 8012e7a:	2201      	movs	r2, #1
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	e001      	b.n	8012e84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012e80:	2300      	movs	r3, #0
 8012e82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012e84:	697b      	ldr	r3, [r7, #20]
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3718      	adds	r7, #24
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	20001840 	.word	0x20001840
 8012e94:	20001820 	.word	0x20001820
 8012e98:	2000171c 	.word	0x2000171c
 8012e9c:	200017d8 	.word	0x200017d8
 8012ea0:	20001718 	.word	0x20001718
 8012ea4:	2000182c 	.word	0x2000182c

08012ea8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b083      	sub	sp, #12
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012eb0:	4b06      	ldr	r3, [pc, #24]	@ (8012ecc <vTaskInternalSetTimeOutState+0x24>)
 8012eb2:	681a      	ldr	r2, [r3, #0]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012eb8:	4b05      	ldr	r3, [pc, #20]	@ (8012ed0 <vTaskInternalSetTimeOutState+0x28>)
 8012eba:	681a      	ldr	r2, [r3, #0]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	605a      	str	r2, [r3, #4]
}
 8012ec0:	bf00      	nop
 8012ec2:	370c      	adds	r7, #12
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eca:	4770      	bx	lr
 8012ecc:	20001830 	.word	0x20001830
 8012ed0:	2000181c 	.word	0x2000181c

08012ed4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b088      	sub	sp, #32
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d10b      	bne.n	8012efc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ee8:	f383 8811 	msr	BASEPRI, r3
 8012eec:	f3bf 8f6f 	isb	sy
 8012ef0:	f3bf 8f4f 	dsb	sy
 8012ef4:	613b      	str	r3, [r7, #16]
}
 8012ef6:	bf00      	nop
 8012ef8:	bf00      	nop
 8012efa:	e7fd      	b.n	8012ef8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d10b      	bne.n	8012f1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f06:	f383 8811 	msr	BASEPRI, r3
 8012f0a:	f3bf 8f6f 	isb	sy
 8012f0e:	f3bf 8f4f 	dsb	sy
 8012f12:	60fb      	str	r3, [r7, #12]
}
 8012f14:	bf00      	nop
 8012f16:	bf00      	nop
 8012f18:	e7fd      	b.n	8012f16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012f1a:	f000 fc55 	bl	80137c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8012f94 <xTaskCheckForTimeOut+0xc0>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	69ba      	ldr	r2, [r7, #24]
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f36:	d102      	bne.n	8012f3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	61fb      	str	r3, [r7, #28]
 8012f3c:	e023      	b.n	8012f86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681a      	ldr	r2, [r3, #0]
 8012f42:	4b15      	ldr	r3, [pc, #84]	@ (8012f98 <xTaskCheckForTimeOut+0xc4>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d007      	beq.n	8012f5a <xTaskCheckForTimeOut+0x86>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	69ba      	ldr	r2, [r7, #24]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d302      	bcc.n	8012f5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012f54:	2301      	movs	r3, #1
 8012f56:	61fb      	str	r3, [r7, #28]
 8012f58:	e015      	b.n	8012f86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	697a      	ldr	r2, [r7, #20]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d20b      	bcs.n	8012f7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	1ad2      	subs	r2, r2, r3
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f7ff ff99 	bl	8012ea8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012f76:	2300      	movs	r3, #0
 8012f78:	61fb      	str	r3, [r7, #28]
 8012f7a:	e004      	b.n	8012f86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012f82:	2301      	movs	r3, #1
 8012f84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012f86:	f000 fc51 	bl	801382c <vPortExitCritical>

	return xReturn;
 8012f8a:	69fb      	ldr	r3, [r7, #28]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	3720      	adds	r7, #32
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	2000181c 	.word	0x2000181c
 8012f98:	20001830 	.word	0x20001830

08012f9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012fa0:	4b03      	ldr	r3, [pc, #12]	@ (8012fb0 <vTaskMissedYield+0x14>)
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	601a      	str	r2, [r3, #0]
}
 8012fa6:	bf00      	nop
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr
 8012fb0:	2000182c 	.word	0x2000182c

08012fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012fbc:	f000 f852 	bl	8013064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012fc0:	4b06      	ldr	r3, [pc, #24]	@ (8012fdc <prvIdleTask+0x28>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d9f9      	bls.n	8012fbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8012fc8:	4b05      	ldr	r3, [pc, #20]	@ (8012fe0 <prvIdleTask+0x2c>)
 8012fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fce:	601a      	str	r2, [r3, #0]
 8012fd0:	f3bf 8f4f 	dsb	sy
 8012fd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012fd8:	e7f0      	b.n	8012fbc <prvIdleTask+0x8>
 8012fda:	bf00      	nop
 8012fdc:	2000171c 	.word	0x2000171c
 8012fe0:	e000ed04 	.word	0xe000ed04

08012fe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012fea:	2300      	movs	r3, #0
 8012fec:	607b      	str	r3, [r7, #4]
 8012fee:	e00c      	b.n	801300a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	009b      	lsls	r3, r3, #2
 8012ff6:	4413      	add	r3, r2
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	4a12      	ldr	r2, [pc, #72]	@ (8013044 <prvInitialiseTaskLists+0x60>)
 8012ffc:	4413      	add	r3, r2
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fe fc83 	bl	801190a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	3301      	adds	r3, #1
 8013008:	607b      	str	r3, [r7, #4]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b06      	cmp	r3, #6
 801300e:	d9ef      	bls.n	8012ff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013010:	480d      	ldr	r0, [pc, #52]	@ (8013048 <prvInitialiseTaskLists+0x64>)
 8013012:	f7fe fc7a 	bl	801190a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013016:	480d      	ldr	r0, [pc, #52]	@ (801304c <prvInitialiseTaskLists+0x68>)
 8013018:	f7fe fc77 	bl	801190a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801301c:	480c      	ldr	r0, [pc, #48]	@ (8013050 <prvInitialiseTaskLists+0x6c>)
 801301e:	f7fe fc74 	bl	801190a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013022:	480c      	ldr	r0, [pc, #48]	@ (8013054 <prvInitialiseTaskLists+0x70>)
 8013024:	f7fe fc71 	bl	801190a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013028:	480b      	ldr	r0, [pc, #44]	@ (8013058 <prvInitialiseTaskLists+0x74>)
 801302a:	f7fe fc6e 	bl	801190a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801302e:	4b0b      	ldr	r3, [pc, #44]	@ (801305c <prvInitialiseTaskLists+0x78>)
 8013030:	4a05      	ldr	r2, [pc, #20]	@ (8013048 <prvInitialiseTaskLists+0x64>)
 8013032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013034:	4b0a      	ldr	r3, [pc, #40]	@ (8013060 <prvInitialiseTaskLists+0x7c>)
 8013036:	4a05      	ldr	r2, [pc, #20]	@ (801304c <prvInitialiseTaskLists+0x68>)
 8013038:	601a      	str	r2, [r3, #0]
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	2000171c 	.word	0x2000171c
 8013048:	200017a8 	.word	0x200017a8
 801304c:	200017bc 	.word	0x200017bc
 8013050:	200017d8 	.word	0x200017d8
 8013054:	200017ec 	.word	0x200017ec
 8013058:	20001804 	.word	0x20001804
 801305c:	200017d0 	.word	0x200017d0
 8013060:	200017d4 	.word	0x200017d4

08013064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801306a:	e019      	b.n	80130a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801306c:	f000 fbac 	bl	80137c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013070:	4b10      	ldr	r3, [pc, #64]	@ (80130b4 <prvCheckTasksWaitingTermination+0x50>)
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	68db      	ldr	r3, [r3, #12]
 8013076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	3304      	adds	r3, #4
 801307c:	4618      	mov	r0, r3
 801307e:	f7fe fcce 	bl	8011a1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013082:	4b0d      	ldr	r3, [pc, #52]	@ (80130b8 <prvCheckTasksWaitingTermination+0x54>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	3b01      	subs	r3, #1
 8013088:	4a0b      	ldr	r2, [pc, #44]	@ (80130b8 <prvCheckTasksWaitingTermination+0x54>)
 801308a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801308c:	4b0b      	ldr	r3, [pc, #44]	@ (80130bc <prvCheckTasksWaitingTermination+0x58>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	3b01      	subs	r3, #1
 8013092:	4a0a      	ldr	r2, [pc, #40]	@ (80130bc <prvCheckTasksWaitingTermination+0x58>)
 8013094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013096:	f000 fbc9 	bl	801382c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f000 f810 	bl	80130c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80130a0:	4b06      	ldr	r3, [pc, #24]	@ (80130bc <prvCheckTasksWaitingTermination+0x58>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d1e1      	bne.n	801306c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80130a8:	bf00      	nop
 80130aa:	bf00      	nop
 80130ac:	3708      	adds	r7, #8
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
 80130b2:	bf00      	nop
 80130b4:	200017ec 	.word	0x200017ec
 80130b8:	20001818 	.word	0x20001818
 80130bc:	20001800 	.word	0x20001800

080130c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130cc:	4618      	mov	r0, r3
 80130ce:	f000 fd6b 	bl	8013ba8 <vPortFree>
			vPortFree( pxTCB );
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 fd68 	bl	8013ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80130d8:	bf00      	nop
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}

080130e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80130e0:	b480      	push	{r7}
 80130e2:	b083      	sub	sp, #12
 80130e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130e6:	4b0c      	ldr	r3, [pc, #48]	@ (8013118 <prvResetNextTaskUnblockTime+0x38>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d104      	bne.n	80130fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80130f0:	4b0a      	ldr	r3, [pc, #40]	@ (801311c <prvResetNextTaskUnblockTime+0x3c>)
 80130f2:	f04f 32ff 	mov.w	r2, #4294967295
 80130f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80130f8:	e008      	b.n	801310c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130fa:	4b07      	ldr	r3, [pc, #28]	@ (8013118 <prvResetNextTaskUnblockTime+0x38>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	68db      	ldr	r3, [r3, #12]
 8013102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	4a04      	ldr	r2, [pc, #16]	@ (801311c <prvResetNextTaskUnblockTime+0x3c>)
 801310a:	6013      	str	r3, [r2, #0]
}
 801310c:	bf00      	nop
 801310e:	370c      	adds	r7, #12
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr
 8013118:	200017d0 	.word	0x200017d0
 801311c:	20001838 	.word	0x20001838

08013120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013126:	4b0b      	ldr	r3, [pc, #44]	@ (8013154 <xTaskGetSchedulerState+0x34>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d102      	bne.n	8013134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801312e:	2301      	movs	r3, #1
 8013130:	607b      	str	r3, [r7, #4]
 8013132:	e008      	b.n	8013146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013134:	4b08      	ldr	r3, [pc, #32]	@ (8013158 <xTaskGetSchedulerState+0x38>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d102      	bne.n	8013142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801313c:	2302      	movs	r3, #2
 801313e:	607b      	str	r3, [r7, #4]
 8013140:	e001      	b.n	8013146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013142:	2300      	movs	r3, #0
 8013144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013146:	687b      	ldr	r3, [r7, #4]
	}
 8013148:	4618      	mov	r0, r3
 801314a:	370c      	adds	r7, #12
 801314c:	46bd      	mov	sp, r7
 801314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013152:	4770      	bx	lr
 8013154:	20001824 	.word	0x20001824
 8013158:	20001840 	.word	0x20001840

0801315c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013168:	2300      	movs	r3, #0
 801316a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d05e      	beq.n	8013230 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013176:	4b31      	ldr	r3, [pc, #196]	@ (801323c <xTaskPriorityInherit+0xe0>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801317c:	429a      	cmp	r2, r3
 801317e:	d24e      	bcs.n	801321e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	699b      	ldr	r3, [r3, #24]
 8013184:	2b00      	cmp	r3, #0
 8013186:	db06      	blt.n	8013196 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013188:	4b2c      	ldr	r3, [pc, #176]	@ (801323c <xTaskPriorityInherit+0xe0>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801318e:	f1c3 0207 	rsb	r2, r3, #7
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	6959      	ldr	r1, [r3, #20]
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801319e:	4613      	mov	r3, r2
 80131a0:	009b      	lsls	r3, r3, #2
 80131a2:	4413      	add	r3, r2
 80131a4:	009b      	lsls	r3, r3, #2
 80131a6:	4a26      	ldr	r2, [pc, #152]	@ (8013240 <xTaskPriorityInherit+0xe4>)
 80131a8:	4413      	add	r3, r2
 80131aa:	4299      	cmp	r1, r3
 80131ac:	d12f      	bne.n	801320e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	3304      	adds	r3, #4
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fe fc33 	bl	8011a1e <uxListRemove>
 80131b8:	4603      	mov	r3, r0
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d10a      	bne.n	80131d4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131c2:	2201      	movs	r2, #1
 80131c4:	fa02 f303 	lsl.w	r3, r2, r3
 80131c8:	43da      	mvns	r2, r3
 80131ca:	4b1e      	ldr	r3, [pc, #120]	@ (8013244 <xTaskPriorityInherit+0xe8>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4013      	ands	r3, r2
 80131d0:	4a1c      	ldr	r2, [pc, #112]	@ (8013244 <xTaskPriorityInherit+0xe8>)
 80131d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80131d4:	4b19      	ldr	r3, [pc, #100]	@ (801323c <xTaskPriorityInherit+0xe0>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131e2:	2201      	movs	r2, #1
 80131e4:	409a      	lsls	r2, r3
 80131e6:	4b17      	ldr	r3, [pc, #92]	@ (8013244 <xTaskPriorityInherit+0xe8>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4313      	orrs	r3, r2
 80131ec:	4a15      	ldr	r2, [pc, #84]	@ (8013244 <xTaskPriorityInherit+0xe8>)
 80131ee:	6013      	str	r3, [r2, #0]
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131f4:	4613      	mov	r3, r2
 80131f6:	009b      	lsls	r3, r3, #2
 80131f8:	4413      	add	r3, r2
 80131fa:	009b      	lsls	r3, r3, #2
 80131fc:	4a10      	ldr	r2, [pc, #64]	@ (8013240 <xTaskPriorityInherit+0xe4>)
 80131fe:	441a      	add	r2, r3
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	3304      	adds	r3, #4
 8013204:	4619      	mov	r1, r3
 8013206:	4610      	mov	r0, r2
 8013208:	f7fe fbac 	bl	8011964 <vListInsertEnd>
 801320c:	e004      	b.n	8013218 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801320e:	4b0b      	ldr	r3, [pc, #44]	@ (801323c <xTaskPriorityInherit+0xe0>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013218:	2301      	movs	r3, #1
 801321a:	60fb      	str	r3, [r7, #12]
 801321c:	e008      	b.n	8013230 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013222:	4b06      	ldr	r3, [pc, #24]	@ (801323c <xTaskPriorityInherit+0xe0>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013228:	429a      	cmp	r2, r3
 801322a:	d201      	bcs.n	8013230 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801322c:	2301      	movs	r3, #1
 801322e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013230:	68fb      	ldr	r3, [r7, #12]
	}
 8013232:	4618      	mov	r0, r3
 8013234:	3710      	adds	r7, #16
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	20001718 	.word	0x20001718
 8013240:	2000171c 	.word	0x2000171c
 8013244:	20001820 	.word	0x20001820

08013248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013248:	b580      	push	{r7, lr}
 801324a:	b086      	sub	sp, #24
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013254:	2300      	movs	r3, #0
 8013256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d070      	beq.n	8013340 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801325e:	4b3b      	ldr	r3, [pc, #236]	@ (801334c <xTaskPriorityDisinherit+0x104>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	693a      	ldr	r2, [r7, #16]
 8013264:	429a      	cmp	r2, r3
 8013266:	d00b      	beq.n	8013280 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8013268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801326c:	f383 8811 	msr	BASEPRI, r3
 8013270:	f3bf 8f6f 	isb	sy
 8013274:	f3bf 8f4f 	dsb	sy
 8013278:	60fb      	str	r3, [r7, #12]
}
 801327a:	bf00      	nop
 801327c:	bf00      	nop
 801327e:	e7fd      	b.n	801327c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013284:	2b00      	cmp	r3, #0
 8013286:	d10b      	bne.n	80132a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8013288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801328c:	f383 8811 	msr	BASEPRI, r3
 8013290:	f3bf 8f6f 	isb	sy
 8013294:	f3bf 8f4f 	dsb	sy
 8013298:	60bb      	str	r3, [r7, #8]
}
 801329a:	bf00      	nop
 801329c:	bf00      	nop
 801329e:	e7fd      	b.n	801329c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80132a4:	1e5a      	subs	r2, r3, #1
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d044      	beq.n	8013340 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d140      	bne.n	8013340 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	3304      	adds	r3, #4
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fe fbab 	bl	8011a1e <uxListRemove>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d115      	bne.n	80132fa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132d2:	491f      	ldr	r1, [pc, #124]	@ (8013350 <xTaskPriorityDisinherit+0x108>)
 80132d4:	4613      	mov	r3, r2
 80132d6:	009b      	lsls	r3, r3, #2
 80132d8:	4413      	add	r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	440b      	add	r3, r1
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d10a      	bne.n	80132fa <xTaskPriorityDisinherit+0xb2>
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132e8:	2201      	movs	r2, #1
 80132ea:	fa02 f303 	lsl.w	r3, r2, r3
 80132ee:	43da      	mvns	r2, r3
 80132f0:	4b18      	ldr	r3, [pc, #96]	@ (8013354 <xTaskPriorityDisinherit+0x10c>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	4013      	ands	r3, r2
 80132f6:	4a17      	ldr	r2, [pc, #92]	@ (8013354 <xTaskPriorityDisinherit+0x10c>)
 80132f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013306:	f1c3 0207 	rsb	r2, r3, #7
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013312:	2201      	movs	r2, #1
 8013314:	409a      	lsls	r2, r3
 8013316:	4b0f      	ldr	r3, [pc, #60]	@ (8013354 <xTaskPriorityDisinherit+0x10c>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	4313      	orrs	r3, r2
 801331c:	4a0d      	ldr	r2, [pc, #52]	@ (8013354 <xTaskPriorityDisinherit+0x10c>)
 801331e:	6013      	str	r3, [r2, #0]
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013324:	4613      	mov	r3, r2
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	4413      	add	r3, r2
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	4a08      	ldr	r2, [pc, #32]	@ (8013350 <xTaskPriorityDisinherit+0x108>)
 801332e:	441a      	add	r2, r3
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	3304      	adds	r3, #4
 8013334:	4619      	mov	r1, r3
 8013336:	4610      	mov	r0, r2
 8013338:	f7fe fb14 	bl	8011964 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801333c:	2301      	movs	r3, #1
 801333e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013340:	697b      	ldr	r3, [r7, #20]
	}
 8013342:	4618      	mov	r0, r3
 8013344:	3718      	adds	r7, #24
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	20001718 	.word	0x20001718
 8013350:	2000171c 	.word	0x2000171c
 8013354:	20001820 	.word	0x20001820

08013358 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013358:	b580      	push	{r7, lr}
 801335a:	b088      	sub	sp, #32
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013366:	2301      	movs	r3, #1
 8013368:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d079      	beq.n	8013464 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013374:	2b00      	cmp	r3, #0
 8013376:	d10b      	bne.n	8013390 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8013378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801337c:	f383 8811 	msr	BASEPRI, r3
 8013380:	f3bf 8f6f 	isb	sy
 8013384:	f3bf 8f4f 	dsb	sy
 8013388:	60fb      	str	r3, [r7, #12]
}
 801338a:	bf00      	nop
 801338c:	bf00      	nop
 801338e:	e7fd      	b.n	801338c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013390:	69bb      	ldr	r3, [r7, #24]
 8013392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013394:	683a      	ldr	r2, [r7, #0]
 8013396:	429a      	cmp	r2, r3
 8013398:	d902      	bls.n	80133a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	61fb      	str	r3, [r7, #28]
 801339e:	e002      	b.n	80133a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80133a0:	69bb      	ldr	r3, [r7, #24]
 80133a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133aa:	69fa      	ldr	r2, [r7, #28]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d059      	beq.n	8013464 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80133b4:	697a      	ldr	r2, [r7, #20]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d154      	bne.n	8013464 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80133ba:	4b2c      	ldr	r3, [pc, #176]	@ (801346c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	69ba      	ldr	r2, [r7, #24]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d10b      	bne.n	80133dc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80133c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c8:	f383 8811 	msr	BASEPRI, r3
 80133cc:	f3bf 8f6f 	isb	sy
 80133d0:	f3bf 8f4f 	dsb	sy
 80133d4:	60bb      	str	r3, [r7, #8]
}
 80133d6:	bf00      	nop
 80133d8:	bf00      	nop
 80133da:	e7fd      	b.n	80133d8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	69fa      	ldr	r2, [r7, #28]
 80133e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	699b      	ldr	r3, [r3, #24]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	db04      	blt.n	80133fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133f0:	69fb      	ldr	r3, [r7, #28]
 80133f2:	f1c3 0207 	rsb	r2, r3, #7
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80133fa:	69bb      	ldr	r3, [r7, #24]
 80133fc:	6959      	ldr	r1, [r3, #20]
 80133fe:	693a      	ldr	r2, [r7, #16]
 8013400:	4613      	mov	r3, r2
 8013402:	009b      	lsls	r3, r3, #2
 8013404:	4413      	add	r3, r2
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	4a19      	ldr	r2, [pc, #100]	@ (8013470 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801340a:	4413      	add	r3, r2
 801340c:	4299      	cmp	r1, r3
 801340e:	d129      	bne.n	8013464 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	3304      	adds	r3, #4
 8013414:	4618      	mov	r0, r3
 8013416:	f7fe fb02 	bl	8011a1e <uxListRemove>
 801341a:	4603      	mov	r3, r0
 801341c:	2b00      	cmp	r3, #0
 801341e:	d10a      	bne.n	8013436 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013424:	2201      	movs	r2, #1
 8013426:	fa02 f303 	lsl.w	r3, r2, r3
 801342a:	43da      	mvns	r2, r3
 801342c:	4b11      	ldr	r3, [pc, #68]	@ (8013474 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4013      	ands	r3, r2
 8013432:	4a10      	ldr	r2, [pc, #64]	@ (8013474 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013434:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801343a:	2201      	movs	r2, #1
 801343c:	409a      	lsls	r2, r3
 801343e:	4b0d      	ldr	r3, [pc, #52]	@ (8013474 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	4313      	orrs	r3, r2
 8013444:	4a0b      	ldr	r2, [pc, #44]	@ (8013474 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013446:	6013      	str	r3, [r2, #0]
 8013448:	69bb      	ldr	r3, [r7, #24]
 801344a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801344c:	4613      	mov	r3, r2
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	4413      	add	r3, r2
 8013452:	009b      	lsls	r3, r3, #2
 8013454:	4a06      	ldr	r2, [pc, #24]	@ (8013470 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013456:	441a      	add	r2, r3
 8013458:	69bb      	ldr	r3, [r7, #24]
 801345a:	3304      	adds	r3, #4
 801345c:	4619      	mov	r1, r3
 801345e:	4610      	mov	r0, r2
 8013460:	f7fe fa80 	bl	8011964 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013464:	bf00      	nop
 8013466:	3720      	adds	r7, #32
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	20001718 	.word	0x20001718
 8013470:	2000171c 	.word	0x2000171c
 8013474:	20001820 	.word	0x20001820

08013478 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013478:	b480      	push	{r7}
 801347a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801347c:	4b07      	ldr	r3, [pc, #28]	@ (801349c <pvTaskIncrementMutexHeldCount+0x24>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d004      	beq.n	801348e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013484:	4b05      	ldr	r3, [pc, #20]	@ (801349c <pvTaskIncrementMutexHeldCount+0x24>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801348a:	3201      	adds	r2, #1
 801348c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801348e:	4b03      	ldr	r3, [pc, #12]	@ (801349c <pvTaskIncrementMutexHeldCount+0x24>)
 8013490:	681b      	ldr	r3, [r3, #0]
	}
 8013492:	4618      	mov	r0, r3
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr
 801349c:	20001718 	.word	0x20001718

080134a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80134aa:	4b29      	ldr	r3, [pc, #164]	@ (8013550 <prvAddCurrentTaskToDelayedList+0xb0>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134b0:	4b28      	ldr	r3, [pc, #160]	@ (8013554 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	3304      	adds	r3, #4
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7fe fab1 	bl	8011a1e <uxListRemove>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d10b      	bne.n	80134da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80134c2:	4b24      	ldr	r3, [pc, #144]	@ (8013554 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134c8:	2201      	movs	r2, #1
 80134ca:	fa02 f303 	lsl.w	r3, r2, r3
 80134ce:	43da      	mvns	r2, r3
 80134d0:	4b21      	ldr	r3, [pc, #132]	@ (8013558 <prvAddCurrentTaskToDelayedList+0xb8>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	4013      	ands	r3, r2
 80134d6:	4a20      	ldr	r2, [pc, #128]	@ (8013558 <prvAddCurrentTaskToDelayedList+0xb8>)
 80134d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134e0:	d10a      	bne.n	80134f8 <prvAddCurrentTaskToDelayedList+0x58>
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d007      	beq.n	80134f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80134e8:	4b1a      	ldr	r3, [pc, #104]	@ (8013554 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	3304      	adds	r3, #4
 80134ee:	4619      	mov	r1, r3
 80134f0:	481a      	ldr	r0, [pc, #104]	@ (801355c <prvAddCurrentTaskToDelayedList+0xbc>)
 80134f2:	f7fe fa37 	bl	8011964 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80134f6:	e026      	b.n	8013546 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80134f8:	68fa      	ldr	r2, [r7, #12]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4413      	add	r3, r2
 80134fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013500:	4b14      	ldr	r3, [pc, #80]	@ (8013554 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013508:	68ba      	ldr	r2, [r7, #8]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	429a      	cmp	r2, r3
 801350e:	d209      	bcs.n	8013524 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013510:	4b13      	ldr	r3, [pc, #76]	@ (8013560 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	4b0f      	ldr	r3, [pc, #60]	@ (8013554 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	3304      	adds	r3, #4
 801351a:	4619      	mov	r1, r3
 801351c:	4610      	mov	r0, r2
 801351e:	f7fe fa45 	bl	80119ac <vListInsert>
}
 8013522:	e010      	b.n	8013546 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013524:	4b0f      	ldr	r3, [pc, #60]	@ (8013564 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013526:	681a      	ldr	r2, [r3, #0]
 8013528:	4b0a      	ldr	r3, [pc, #40]	@ (8013554 <prvAddCurrentTaskToDelayedList+0xb4>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	3304      	adds	r3, #4
 801352e:	4619      	mov	r1, r3
 8013530:	4610      	mov	r0, r2
 8013532:	f7fe fa3b 	bl	80119ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013536:	4b0c      	ldr	r3, [pc, #48]	@ (8013568 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	68ba      	ldr	r2, [r7, #8]
 801353c:	429a      	cmp	r2, r3
 801353e:	d202      	bcs.n	8013546 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013540:	4a09      	ldr	r2, [pc, #36]	@ (8013568 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	6013      	str	r3, [r2, #0]
}
 8013546:	bf00      	nop
 8013548:	3710      	adds	r7, #16
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	2000181c 	.word	0x2000181c
 8013554:	20001718 	.word	0x20001718
 8013558:	20001820 	.word	0x20001820
 801355c:	20001804 	.word	0x20001804
 8013560:	200017d4 	.word	0x200017d4
 8013564:	200017d0 	.word	0x200017d0
 8013568:	20001838 	.word	0x20001838

0801356c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801356c:	b480      	push	{r7}
 801356e:	b085      	sub	sp, #20
 8013570:	af00      	add	r7, sp, #0
 8013572:	60f8      	str	r0, [r7, #12]
 8013574:	60b9      	str	r1, [r7, #8]
 8013576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	3b04      	subs	r3, #4
 801357c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	3b04      	subs	r3, #4
 801358a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	f023 0201 	bic.w	r2, r3, #1
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	3b04      	subs	r3, #4
 801359a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801359c:	4a0c      	ldr	r2, [pc, #48]	@ (80135d0 <pxPortInitialiseStack+0x64>)
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	3b14      	subs	r3, #20
 80135a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	3b04      	subs	r3, #4
 80135b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f06f 0202 	mvn.w	r2, #2
 80135ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	3b20      	subs	r3, #32
 80135c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80135c2:	68fb      	ldr	r3, [r7, #12]
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3714      	adds	r7, #20
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr
 80135d0:	080135d5 	.word	0x080135d5

080135d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80135d4:	b480      	push	{r7}
 80135d6:	b085      	sub	sp, #20
 80135d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80135da:	2300      	movs	r3, #0
 80135dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80135de:	4b13      	ldr	r3, [pc, #76]	@ (801362c <prvTaskExitError+0x58>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135e6:	d00b      	beq.n	8013600 <prvTaskExitError+0x2c>
	__asm volatile
 80135e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	60fb      	str	r3, [r7, #12]
}
 80135fa:	bf00      	nop
 80135fc:	bf00      	nop
 80135fe:	e7fd      	b.n	80135fc <prvTaskExitError+0x28>
	__asm volatile
 8013600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013604:	f383 8811 	msr	BASEPRI, r3
 8013608:	f3bf 8f6f 	isb	sy
 801360c:	f3bf 8f4f 	dsb	sy
 8013610:	60bb      	str	r3, [r7, #8]
}
 8013612:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013614:	bf00      	nop
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d0fc      	beq.n	8013616 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801361c:	bf00      	nop
 801361e:	bf00      	nop
 8013620:	3714      	adds	r7, #20
 8013622:	46bd      	mov	sp, r7
 8013624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013628:	4770      	bx	lr
 801362a:	bf00      	nop
 801362c:	20000044 	.word	0x20000044

08013630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013630:	4b07      	ldr	r3, [pc, #28]	@ (8013650 <pxCurrentTCBConst2>)
 8013632:	6819      	ldr	r1, [r3, #0]
 8013634:	6808      	ldr	r0, [r1, #0]
 8013636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801363a:	f380 8809 	msr	PSP, r0
 801363e:	f3bf 8f6f 	isb	sy
 8013642:	f04f 0000 	mov.w	r0, #0
 8013646:	f380 8811 	msr	BASEPRI, r0
 801364a:	4770      	bx	lr
 801364c:	f3af 8000 	nop.w

08013650 <pxCurrentTCBConst2>:
 8013650:	20001718 	.word	0x20001718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013654:	bf00      	nop
 8013656:	bf00      	nop

08013658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013658:	4808      	ldr	r0, [pc, #32]	@ (801367c <prvPortStartFirstTask+0x24>)
 801365a:	6800      	ldr	r0, [r0, #0]
 801365c:	6800      	ldr	r0, [r0, #0]
 801365e:	f380 8808 	msr	MSP, r0
 8013662:	f04f 0000 	mov.w	r0, #0
 8013666:	f380 8814 	msr	CONTROL, r0
 801366a:	b662      	cpsie	i
 801366c:	b661      	cpsie	f
 801366e:	f3bf 8f4f 	dsb	sy
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	df00      	svc	0
 8013678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801367a:	bf00      	nop
 801367c:	e000ed08 	.word	0xe000ed08

08013680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013686:	4b47      	ldr	r3, [pc, #284]	@ (80137a4 <xPortStartScheduler+0x124>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4a47      	ldr	r2, [pc, #284]	@ (80137a8 <xPortStartScheduler+0x128>)
 801368c:	4293      	cmp	r3, r2
 801368e:	d10b      	bne.n	80136a8 <xPortStartScheduler+0x28>
	__asm volatile
 8013690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013694:	f383 8811 	msr	BASEPRI, r3
 8013698:	f3bf 8f6f 	isb	sy
 801369c:	f3bf 8f4f 	dsb	sy
 80136a0:	60fb      	str	r3, [r7, #12]
}
 80136a2:	bf00      	nop
 80136a4:	bf00      	nop
 80136a6:	e7fd      	b.n	80136a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80136a8:	4b3e      	ldr	r3, [pc, #248]	@ (80137a4 <xPortStartScheduler+0x124>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	4a3f      	ldr	r2, [pc, #252]	@ (80137ac <xPortStartScheduler+0x12c>)
 80136ae:	4293      	cmp	r3, r2
 80136b0:	d10b      	bne.n	80136ca <xPortStartScheduler+0x4a>
	__asm volatile
 80136b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136b6:	f383 8811 	msr	BASEPRI, r3
 80136ba:	f3bf 8f6f 	isb	sy
 80136be:	f3bf 8f4f 	dsb	sy
 80136c2:	613b      	str	r3, [r7, #16]
}
 80136c4:	bf00      	nop
 80136c6:	bf00      	nop
 80136c8:	e7fd      	b.n	80136c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80136ca:	4b39      	ldr	r3, [pc, #228]	@ (80137b0 <xPortStartScheduler+0x130>)
 80136cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	22ff      	movs	r2, #255	@ 0xff
 80136da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80136e4:	78fb      	ldrb	r3, [r7, #3]
 80136e6:	b2db      	uxtb	r3, r3
 80136e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80136ec:	b2da      	uxtb	r2, r3
 80136ee:	4b31      	ldr	r3, [pc, #196]	@ (80137b4 <xPortStartScheduler+0x134>)
 80136f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80136f2:	4b31      	ldr	r3, [pc, #196]	@ (80137b8 <xPortStartScheduler+0x138>)
 80136f4:	2207      	movs	r2, #7
 80136f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80136f8:	e009      	b.n	801370e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80136fa:	4b2f      	ldr	r3, [pc, #188]	@ (80137b8 <xPortStartScheduler+0x138>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	3b01      	subs	r3, #1
 8013700:	4a2d      	ldr	r2, [pc, #180]	@ (80137b8 <xPortStartScheduler+0x138>)
 8013702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013704:	78fb      	ldrb	r3, [r7, #3]
 8013706:	b2db      	uxtb	r3, r3
 8013708:	005b      	lsls	r3, r3, #1
 801370a:	b2db      	uxtb	r3, r3
 801370c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801370e:	78fb      	ldrb	r3, [r7, #3]
 8013710:	b2db      	uxtb	r3, r3
 8013712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013716:	2b80      	cmp	r3, #128	@ 0x80
 8013718:	d0ef      	beq.n	80136fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801371a:	4b27      	ldr	r3, [pc, #156]	@ (80137b8 <xPortStartScheduler+0x138>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	f1c3 0307 	rsb	r3, r3, #7
 8013722:	2b04      	cmp	r3, #4
 8013724:	d00b      	beq.n	801373e <xPortStartScheduler+0xbe>
	__asm volatile
 8013726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801372a:	f383 8811 	msr	BASEPRI, r3
 801372e:	f3bf 8f6f 	isb	sy
 8013732:	f3bf 8f4f 	dsb	sy
 8013736:	60bb      	str	r3, [r7, #8]
}
 8013738:	bf00      	nop
 801373a:	bf00      	nop
 801373c:	e7fd      	b.n	801373a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801373e:	4b1e      	ldr	r3, [pc, #120]	@ (80137b8 <xPortStartScheduler+0x138>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	021b      	lsls	r3, r3, #8
 8013744:	4a1c      	ldr	r2, [pc, #112]	@ (80137b8 <xPortStartScheduler+0x138>)
 8013746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013748:	4b1b      	ldr	r3, [pc, #108]	@ (80137b8 <xPortStartScheduler+0x138>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013750:	4a19      	ldr	r2, [pc, #100]	@ (80137b8 <xPortStartScheduler+0x138>)
 8013752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	b2da      	uxtb	r2, r3
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801375c:	4b17      	ldr	r3, [pc, #92]	@ (80137bc <xPortStartScheduler+0x13c>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4a16      	ldr	r2, [pc, #88]	@ (80137bc <xPortStartScheduler+0x13c>)
 8013762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013768:	4b14      	ldr	r3, [pc, #80]	@ (80137bc <xPortStartScheduler+0x13c>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	4a13      	ldr	r2, [pc, #76]	@ (80137bc <xPortStartScheduler+0x13c>)
 801376e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013774:	f000 f8da 	bl	801392c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013778:	4b11      	ldr	r3, [pc, #68]	@ (80137c0 <xPortStartScheduler+0x140>)
 801377a:	2200      	movs	r2, #0
 801377c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801377e:	f000 f8f9 	bl	8013974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013782:	4b10      	ldr	r3, [pc, #64]	@ (80137c4 <xPortStartScheduler+0x144>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	4a0f      	ldr	r2, [pc, #60]	@ (80137c4 <xPortStartScheduler+0x144>)
 8013788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801378c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801378e:	f7ff ff63 	bl	8013658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013792:	f7ff faa3 	bl	8012cdc <vTaskSwitchContext>
	prvTaskExitError();
 8013796:	f7ff ff1d 	bl	80135d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801379a:	2300      	movs	r3, #0
}
 801379c:	4618      	mov	r0, r3
 801379e:	3718      	adds	r7, #24
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}
 80137a4:	e000ed00 	.word	0xe000ed00
 80137a8:	410fc271 	.word	0x410fc271
 80137ac:	410fc270 	.word	0x410fc270
 80137b0:	e000e400 	.word	0xe000e400
 80137b4:	20001844 	.word	0x20001844
 80137b8:	20001848 	.word	0x20001848
 80137bc:	e000ed20 	.word	0xe000ed20
 80137c0:	20000044 	.word	0x20000044
 80137c4:	e000ef34 	.word	0xe000ef34

080137c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
	__asm volatile
 80137ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137d2:	f383 8811 	msr	BASEPRI, r3
 80137d6:	f3bf 8f6f 	isb	sy
 80137da:	f3bf 8f4f 	dsb	sy
 80137de:	607b      	str	r3, [r7, #4]
}
 80137e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80137e2:	4b10      	ldr	r3, [pc, #64]	@ (8013824 <vPortEnterCritical+0x5c>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	3301      	adds	r3, #1
 80137e8:	4a0e      	ldr	r2, [pc, #56]	@ (8013824 <vPortEnterCritical+0x5c>)
 80137ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80137ec:	4b0d      	ldr	r3, [pc, #52]	@ (8013824 <vPortEnterCritical+0x5c>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d110      	bne.n	8013816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80137f4:	4b0c      	ldr	r3, [pc, #48]	@ (8013828 <vPortEnterCritical+0x60>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d00b      	beq.n	8013816 <vPortEnterCritical+0x4e>
	__asm volatile
 80137fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013802:	f383 8811 	msr	BASEPRI, r3
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	603b      	str	r3, [r7, #0]
}
 8013810:	bf00      	nop
 8013812:	bf00      	nop
 8013814:	e7fd      	b.n	8013812 <vPortEnterCritical+0x4a>
	}
}
 8013816:	bf00      	nop
 8013818:	370c      	adds	r7, #12
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr
 8013822:	bf00      	nop
 8013824:	20000044 	.word	0x20000044
 8013828:	e000ed04 	.word	0xe000ed04

0801382c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801382c:	b480      	push	{r7}
 801382e:	b083      	sub	sp, #12
 8013830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013832:	4b12      	ldr	r3, [pc, #72]	@ (801387c <vPortExitCritical+0x50>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d10b      	bne.n	8013852 <vPortExitCritical+0x26>
	__asm volatile
 801383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801383e:	f383 8811 	msr	BASEPRI, r3
 8013842:	f3bf 8f6f 	isb	sy
 8013846:	f3bf 8f4f 	dsb	sy
 801384a:	607b      	str	r3, [r7, #4]
}
 801384c:	bf00      	nop
 801384e:	bf00      	nop
 8013850:	e7fd      	b.n	801384e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013852:	4b0a      	ldr	r3, [pc, #40]	@ (801387c <vPortExitCritical+0x50>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	3b01      	subs	r3, #1
 8013858:	4a08      	ldr	r2, [pc, #32]	@ (801387c <vPortExitCritical+0x50>)
 801385a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801385c:	4b07      	ldr	r3, [pc, #28]	@ (801387c <vPortExitCritical+0x50>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d105      	bne.n	8013870 <vPortExitCritical+0x44>
 8013864:	2300      	movs	r3, #0
 8013866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	f383 8811 	msr	BASEPRI, r3
}
 801386e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013870:	bf00      	nop
 8013872:	370c      	adds	r7, #12
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr
 801387c:	20000044 	.word	0x20000044

08013880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013880:	f3ef 8009 	mrs	r0, PSP
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	4b15      	ldr	r3, [pc, #84]	@ (80138e0 <pxCurrentTCBConst>)
 801388a:	681a      	ldr	r2, [r3, #0]
 801388c:	f01e 0f10 	tst.w	lr, #16
 8013890:	bf08      	it	eq
 8013892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801389a:	6010      	str	r0, [r2, #0]
 801389c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80138a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80138a4:	f380 8811 	msr	BASEPRI, r0
 80138a8:	f3bf 8f4f 	dsb	sy
 80138ac:	f3bf 8f6f 	isb	sy
 80138b0:	f7ff fa14 	bl	8012cdc <vTaskSwitchContext>
 80138b4:	f04f 0000 	mov.w	r0, #0
 80138b8:	f380 8811 	msr	BASEPRI, r0
 80138bc:	bc09      	pop	{r0, r3}
 80138be:	6819      	ldr	r1, [r3, #0]
 80138c0:	6808      	ldr	r0, [r1, #0]
 80138c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c6:	f01e 0f10 	tst.w	lr, #16
 80138ca:	bf08      	it	eq
 80138cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80138d0:	f380 8809 	msr	PSP, r0
 80138d4:	f3bf 8f6f 	isb	sy
 80138d8:	4770      	bx	lr
 80138da:	bf00      	nop
 80138dc:	f3af 8000 	nop.w

080138e0 <pxCurrentTCBConst>:
 80138e0:	20001718 	.word	0x20001718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80138e4:	bf00      	nop
 80138e6:	bf00      	nop

080138e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
	__asm volatile
 80138ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138f2:	f383 8811 	msr	BASEPRI, r3
 80138f6:	f3bf 8f6f 	isb	sy
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	607b      	str	r3, [r7, #4]
}
 8013900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013902:	f7ff f931 	bl	8012b68 <xTaskIncrementTick>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d003      	beq.n	8013914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801390c:	4b06      	ldr	r3, [pc, #24]	@ (8013928 <SysTick_Handler+0x40>)
 801390e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013912:	601a      	str	r2, [r3, #0]
 8013914:	2300      	movs	r3, #0
 8013916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	f383 8811 	msr	BASEPRI, r3
}
 801391e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013920:	bf00      	nop
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	e000ed04 	.word	0xe000ed04

0801392c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801392c:	b480      	push	{r7}
 801392e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013930:	4b0b      	ldr	r3, [pc, #44]	@ (8013960 <vPortSetupTimerInterrupt+0x34>)
 8013932:	2200      	movs	r2, #0
 8013934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013936:	4b0b      	ldr	r3, [pc, #44]	@ (8013964 <vPortSetupTimerInterrupt+0x38>)
 8013938:	2200      	movs	r2, #0
 801393a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801393c:	4b0a      	ldr	r3, [pc, #40]	@ (8013968 <vPortSetupTimerInterrupt+0x3c>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4a0a      	ldr	r2, [pc, #40]	@ (801396c <vPortSetupTimerInterrupt+0x40>)
 8013942:	fba2 2303 	umull	r2, r3, r2, r3
 8013946:	099b      	lsrs	r3, r3, #6
 8013948:	4a09      	ldr	r2, [pc, #36]	@ (8013970 <vPortSetupTimerInterrupt+0x44>)
 801394a:	3b01      	subs	r3, #1
 801394c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801394e:	4b04      	ldr	r3, [pc, #16]	@ (8013960 <vPortSetupTimerInterrupt+0x34>)
 8013950:	2207      	movs	r2, #7
 8013952:	601a      	str	r2, [r3, #0]
}
 8013954:	bf00      	nop
 8013956:	46bd      	mov	sp, r7
 8013958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395c:	4770      	bx	lr
 801395e:	bf00      	nop
 8013960:	e000e010 	.word	0xe000e010
 8013964:	e000e018 	.word	0xe000e018
 8013968:	20000020 	.word	0x20000020
 801396c:	10624dd3 	.word	0x10624dd3
 8013970:	e000e014 	.word	0xe000e014

08013974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013984 <vPortEnableVFP+0x10>
 8013978:	6801      	ldr	r1, [r0, #0]
 801397a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801397e:	6001      	str	r1, [r0, #0]
 8013980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013982:	bf00      	nop
 8013984:	e000ed88 	.word	0xe000ed88

08013988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013988:	b480      	push	{r7}
 801398a:	b085      	sub	sp, #20
 801398c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801398e:	f3ef 8305 	mrs	r3, IPSR
 8013992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2b0f      	cmp	r3, #15
 8013998:	d915      	bls.n	80139c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801399a:	4a18      	ldr	r2, [pc, #96]	@ (80139fc <vPortValidateInterruptPriority+0x74>)
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	4413      	add	r3, r2
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80139a4:	4b16      	ldr	r3, [pc, #88]	@ (8013a00 <vPortValidateInterruptPriority+0x78>)
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	7afa      	ldrb	r2, [r7, #11]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d20b      	bcs.n	80139c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80139ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139b2:	f383 8811 	msr	BASEPRI, r3
 80139b6:	f3bf 8f6f 	isb	sy
 80139ba:	f3bf 8f4f 	dsb	sy
 80139be:	607b      	str	r3, [r7, #4]
}
 80139c0:	bf00      	nop
 80139c2:	bf00      	nop
 80139c4:	e7fd      	b.n	80139c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80139c6:	4b0f      	ldr	r3, [pc, #60]	@ (8013a04 <vPortValidateInterruptPriority+0x7c>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80139ce:	4b0e      	ldr	r3, [pc, #56]	@ (8013a08 <vPortValidateInterruptPriority+0x80>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d90b      	bls.n	80139ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80139d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139da:	f383 8811 	msr	BASEPRI, r3
 80139de:	f3bf 8f6f 	isb	sy
 80139e2:	f3bf 8f4f 	dsb	sy
 80139e6:	603b      	str	r3, [r7, #0]
}
 80139e8:	bf00      	nop
 80139ea:	bf00      	nop
 80139ec:	e7fd      	b.n	80139ea <vPortValidateInterruptPriority+0x62>
	}
 80139ee:	bf00      	nop
 80139f0:	3714      	adds	r7, #20
 80139f2:	46bd      	mov	sp, r7
 80139f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop
 80139fc:	e000e3f0 	.word	0xe000e3f0
 8013a00:	20001844 	.word	0x20001844
 8013a04:	e000ed0c 	.word	0xe000ed0c
 8013a08:	20001848 	.word	0x20001848

08013a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b08a      	sub	sp, #40	@ 0x28
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013a14:	2300      	movs	r3, #0
 8013a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013a18:	f7fe fffa 	bl	8012a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8013b90 <pvPortMalloc+0x184>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d101      	bne.n	8013a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013a24:	f000 f924 	bl	8013c70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013a28:	4b5a      	ldr	r3, [pc, #360]	@ (8013b94 <pvPortMalloc+0x188>)
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	4013      	ands	r3, r2
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	f040 8095 	bne.w	8013b60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d01e      	beq.n	8013a7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013a3c:	2208      	movs	r2, #8
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	4413      	add	r3, r2
 8013a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f003 0307 	and.w	r3, r3, #7
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d015      	beq.n	8013a7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f023 0307 	bic.w	r3, r3, #7
 8013a54:	3308      	adds	r3, #8
 8013a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f003 0307 	and.w	r3, r3, #7
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d00b      	beq.n	8013a7a <pvPortMalloc+0x6e>
	__asm volatile
 8013a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a66:	f383 8811 	msr	BASEPRI, r3
 8013a6a:	f3bf 8f6f 	isb	sy
 8013a6e:	f3bf 8f4f 	dsb	sy
 8013a72:	617b      	str	r3, [r7, #20]
}
 8013a74:	bf00      	nop
 8013a76:	bf00      	nop
 8013a78:	e7fd      	b.n	8013a76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d06f      	beq.n	8013b60 <pvPortMalloc+0x154>
 8013a80:	4b45      	ldr	r3, [pc, #276]	@ (8013b98 <pvPortMalloc+0x18c>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d86a      	bhi.n	8013b60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013a8a:	4b44      	ldr	r3, [pc, #272]	@ (8013b9c <pvPortMalloc+0x190>)
 8013a8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013a8e:	4b43      	ldr	r3, [pc, #268]	@ (8013b9c <pvPortMalloc+0x190>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013a94:	e004      	b.n	8013aa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	687a      	ldr	r2, [r7, #4]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d903      	bls.n	8013ab2 <pvPortMalloc+0xa6>
 8013aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d1f1      	bne.n	8013a96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013ab2:	4b37      	ldr	r3, [pc, #220]	@ (8013b90 <pvPortMalloc+0x184>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d051      	beq.n	8013b60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013abc:	6a3b      	ldr	r3, [r7, #32]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	2208      	movs	r2, #8
 8013ac2:	4413      	add	r3, r2
 8013ac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	6a3b      	ldr	r3, [r7, #32]
 8013acc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad0:	685a      	ldr	r2, [r3, #4]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	1ad2      	subs	r2, r2, r3
 8013ad6:	2308      	movs	r3, #8
 8013ad8:	005b      	lsls	r3, r3, #1
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d920      	bls.n	8013b20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	4413      	add	r3, r2
 8013ae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ae6:	69bb      	ldr	r3, [r7, #24]
 8013ae8:	f003 0307 	and.w	r3, r3, #7
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00b      	beq.n	8013b08 <pvPortMalloc+0xfc>
	__asm volatile
 8013af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013af4:	f383 8811 	msr	BASEPRI, r3
 8013af8:	f3bf 8f6f 	isb	sy
 8013afc:	f3bf 8f4f 	dsb	sy
 8013b00:	613b      	str	r3, [r7, #16]
}
 8013b02:	bf00      	nop
 8013b04:	bf00      	nop
 8013b06:	e7fd      	b.n	8013b04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b0a:	685a      	ldr	r2, [r3, #4]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	1ad2      	subs	r2, r2, r3
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b16:	687a      	ldr	r2, [r7, #4]
 8013b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013b1a:	69b8      	ldr	r0, [r7, #24]
 8013b1c:	f000 f90a 	bl	8013d34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013b20:	4b1d      	ldr	r3, [pc, #116]	@ (8013b98 <pvPortMalloc+0x18c>)
 8013b22:	681a      	ldr	r2, [r3, #0]
 8013b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	1ad3      	subs	r3, r2, r3
 8013b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8013b98 <pvPortMalloc+0x18c>)
 8013b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8013b98 <pvPortMalloc+0x18c>)
 8013b30:	681a      	ldr	r2, [r3, #0]
 8013b32:	4b1b      	ldr	r3, [pc, #108]	@ (8013ba0 <pvPortMalloc+0x194>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d203      	bcs.n	8013b42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013b3a:	4b17      	ldr	r3, [pc, #92]	@ (8013b98 <pvPortMalloc+0x18c>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	4a18      	ldr	r2, [pc, #96]	@ (8013ba0 <pvPortMalloc+0x194>)
 8013b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b44:	685a      	ldr	r2, [r3, #4]
 8013b46:	4b13      	ldr	r3, [pc, #76]	@ (8013b94 <pvPortMalloc+0x188>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	431a      	orrs	r2, r3
 8013b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b52:	2200      	movs	r2, #0
 8013b54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013b56:	4b13      	ldr	r3, [pc, #76]	@ (8013ba4 <pvPortMalloc+0x198>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	4a11      	ldr	r2, [pc, #68]	@ (8013ba4 <pvPortMalloc+0x198>)
 8013b5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013b60:	f7fe ff64 	bl	8012a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	f003 0307 	and.w	r3, r3, #7
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d00b      	beq.n	8013b86 <pvPortMalloc+0x17a>
	__asm volatile
 8013b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b72:	f383 8811 	msr	BASEPRI, r3
 8013b76:	f3bf 8f6f 	isb	sy
 8013b7a:	f3bf 8f4f 	dsb	sy
 8013b7e:	60fb      	str	r3, [r7, #12]
}
 8013b80:	bf00      	nop
 8013b82:	bf00      	nop
 8013b84:	e7fd      	b.n	8013b82 <pvPortMalloc+0x176>
	return pvReturn;
 8013b86:	69fb      	ldr	r3, [r7, #28]
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3728      	adds	r7, #40	@ 0x28
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	20003f64 	.word	0x20003f64
 8013b94:	20003f78 	.word	0x20003f78
 8013b98:	20003f68 	.word	0x20003f68
 8013b9c:	20003f5c 	.word	0x20003f5c
 8013ba0:	20003f6c 	.word	0x20003f6c
 8013ba4:	20003f70 	.word	0x20003f70

08013ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b086      	sub	sp, #24
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d04f      	beq.n	8013c5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013bba:	2308      	movs	r3, #8
 8013bbc:	425b      	negs	r3, r3
 8013bbe:	697a      	ldr	r2, [r7, #20]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	685a      	ldr	r2, [r3, #4]
 8013bcc:	4b25      	ldr	r3, [pc, #148]	@ (8013c64 <vPortFree+0xbc>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4013      	ands	r3, r2
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d10b      	bne.n	8013bee <vPortFree+0x46>
	__asm volatile
 8013bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bda:	f383 8811 	msr	BASEPRI, r3
 8013bde:	f3bf 8f6f 	isb	sy
 8013be2:	f3bf 8f4f 	dsb	sy
 8013be6:	60fb      	str	r3, [r7, #12]
}
 8013be8:	bf00      	nop
 8013bea:	bf00      	nop
 8013bec:	e7fd      	b.n	8013bea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00b      	beq.n	8013c0e <vPortFree+0x66>
	__asm volatile
 8013bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bfa:	f383 8811 	msr	BASEPRI, r3
 8013bfe:	f3bf 8f6f 	isb	sy
 8013c02:	f3bf 8f4f 	dsb	sy
 8013c06:	60bb      	str	r3, [r7, #8]
}
 8013c08:	bf00      	nop
 8013c0a:	bf00      	nop
 8013c0c:	e7fd      	b.n	8013c0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	685a      	ldr	r2, [r3, #4]
 8013c12:	4b14      	ldr	r3, [pc, #80]	@ (8013c64 <vPortFree+0xbc>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	4013      	ands	r3, r2
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d01e      	beq.n	8013c5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d11a      	bne.n	8013c5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	685a      	ldr	r2, [r3, #4]
 8013c28:	4b0e      	ldr	r3, [pc, #56]	@ (8013c64 <vPortFree+0xbc>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	43db      	mvns	r3, r3
 8013c2e:	401a      	ands	r2, r3
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013c34:	f7fe feec 	bl	8012a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	685a      	ldr	r2, [r3, #4]
 8013c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8013c68 <vPortFree+0xc0>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	4413      	add	r3, r2
 8013c42:	4a09      	ldr	r2, [pc, #36]	@ (8013c68 <vPortFree+0xc0>)
 8013c44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013c46:	6938      	ldr	r0, [r7, #16]
 8013c48:	f000 f874 	bl	8013d34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013c4c:	4b07      	ldr	r3, [pc, #28]	@ (8013c6c <vPortFree+0xc4>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	3301      	adds	r3, #1
 8013c52:	4a06      	ldr	r2, [pc, #24]	@ (8013c6c <vPortFree+0xc4>)
 8013c54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013c56:	f7fe fee9 	bl	8012a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013c5a:	bf00      	nop
 8013c5c:	3718      	adds	r7, #24
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	20003f78 	.word	0x20003f78
 8013c68:	20003f68 	.word	0x20003f68
 8013c6c:	20003f74 	.word	0x20003f74

08013c70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013c70:	b480      	push	{r7}
 8013c72:	b085      	sub	sp, #20
 8013c74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013c76:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013c7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013c7c:	4b27      	ldr	r3, [pc, #156]	@ (8013d1c <prvHeapInit+0xac>)
 8013c7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	f003 0307 	and.w	r3, r3, #7
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d00c      	beq.n	8013ca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	3307      	adds	r3, #7
 8013c8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f023 0307 	bic.w	r3, r3, #7
 8013c96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013c98:	68ba      	ldr	r2, [r7, #8]
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	1ad3      	subs	r3, r2, r3
 8013c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8013d1c <prvHeapInit+0xac>)
 8013ca0:	4413      	add	r3, r2
 8013ca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8013d20 <prvHeapInit+0xb0>)
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013cae:	4b1c      	ldr	r3, [pc, #112]	@ (8013d20 <prvHeapInit+0xb0>)
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	68ba      	ldr	r2, [r7, #8]
 8013cb8:	4413      	add	r3, r2
 8013cba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013cbc:	2208      	movs	r2, #8
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	1a9b      	subs	r3, r3, r2
 8013cc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	f023 0307 	bic.w	r3, r3, #7
 8013cca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	4a15      	ldr	r2, [pc, #84]	@ (8013d24 <prvHeapInit+0xb4>)
 8013cd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013cd2:	4b14      	ldr	r3, [pc, #80]	@ (8013d24 <prvHeapInit+0xb4>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013cda:	4b12      	ldr	r3, [pc, #72]	@ (8013d24 <prvHeapInit+0xb4>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	68fa      	ldr	r2, [r7, #12]
 8013cea:	1ad2      	subs	r2, r2, r3
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8013d24 <prvHeapInit+0xb4>)
 8013cf2:	681a      	ldr	r2, [r3, #0]
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	685b      	ldr	r3, [r3, #4]
 8013cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8013d28 <prvHeapInit+0xb8>)
 8013cfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	685b      	ldr	r3, [r3, #4]
 8013d04:	4a09      	ldr	r2, [pc, #36]	@ (8013d2c <prvHeapInit+0xbc>)
 8013d06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013d08:	4b09      	ldr	r3, [pc, #36]	@ (8013d30 <prvHeapInit+0xc0>)
 8013d0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013d0e:	601a      	str	r2, [r3, #0]
}
 8013d10:	bf00      	nop
 8013d12:	3714      	adds	r7, #20
 8013d14:	46bd      	mov	sp, r7
 8013d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1a:	4770      	bx	lr
 8013d1c:	2000184c 	.word	0x2000184c
 8013d20:	20003f5c 	.word	0x20003f5c
 8013d24:	20003f64 	.word	0x20003f64
 8013d28:	20003f6c 	.word	0x20003f6c
 8013d2c:	20003f68 	.word	0x20003f68
 8013d30:	20003f78 	.word	0x20003f78

08013d34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013d34:	b480      	push	{r7}
 8013d36:	b085      	sub	sp, #20
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013d3c:	4b28      	ldr	r3, [pc, #160]	@ (8013de0 <prvInsertBlockIntoFreeList+0xac>)
 8013d3e:	60fb      	str	r3, [r7, #12]
 8013d40:	e002      	b.n	8013d48 <prvInsertBlockIntoFreeList+0x14>
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	60fb      	str	r3, [r7, #12]
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	687a      	ldr	r2, [r7, #4]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d8f7      	bhi.n	8013d42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	685b      	ldr	r3, [r3, #4]
 8013d5a:	68ba      	ldr	r2, [r7, #8]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	687a      	ldr	r2, [r7, #4]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d108      	bne.n	8013d76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	685a      	ldr	r2, [r3, #4]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	441a      	add	r2, r3
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	685b      	ldr	r3, [r3, #4]
 8013d7e:	68ba      	ldr	r2, [r7, #8]
 8013d80:	441a      	add	r2, r3
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d118      	bne.n	8013dbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681a      	ldr	r2, [r3, #0]
 8013d8e:	4b15      	ldr	r3, [pc, #84]	@ (8013de4 <prvInsertBlockIntoFreeList+0xb0>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d00d      	beq.n	8013db2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	685a      	ldr	r2, [r3, #4]
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	441a      	add	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	681a      	ldr	r2, [r3, #0]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	601a      	str	r2, [r3, #0]
 8013db0:	e008      	b.n	8013dc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013db2:	4b0c      	ldr	r3, [pc, #48]	@ (8013de4 <prvInsertBlockIntoFreeList+0xb0>)
 8013db4:	681a      	ldr	r2, [r3, #0]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	601a      	str	r2, [r3, #0]
 8013dba:	e003      	b.n	8013dc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d002      	beq.n	8013dd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	687a      	ldr	r2, [r7, #4]
 8013dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013dd2:	bf00      	nop
 8013dd4:	3714      	adds	r7, #20
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr
 8013dde:	bf00      	nop
 8013de0:	20003f5c 	.word	0x20003f5c
 8013de4:	20003f64 	.word	0x20003f64

08013de8 <__cvt>:
 8013de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013dec:	ec57 6b10 	vmov	r6, r7, d0
 8013df0:	2f00      	cmp	r7, #0
 8013df2:	460c      	mov	r4, r1
 8013df4:	4619      	mov	r1, r3
 8013df6:	463b      	mov	r3, r7
 8013df8:	bfbb      	ittet	lt
 8013dfa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013dfe:	461f      	movlt	r7, r3
 8013e00:	2300      	movge	r3, #0
 8013e02:	232d      	movlt	r3, #45	@ 0x2d
 8013e04:	700b      	strb	r3, [r1, #0]
 8013e06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013e0c:	4691      	mov	r9, r2
 8013e0e:	f023 0820 	bic.w	r8, r3, #32
 8013e12:	bfbc      	itt	lt
 8013e14:	4632      	movlt	r2, r6
 8013e16:	4616      	movlt	r6, r2
 8013e18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013e1c:	d005      	beq.n	8013e2a <__cvt+0x42>
 8013e1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013e22:	d100      	bne.n	8013e26 <__cvt+0x3e>
 8013e24:	3401      	adds	r4, #1
 8013e26:	2102      	movs	r1, #2
 8013e28:	e000      	b.n	8013e2c <__cvt+0x44>
 8013e2a:	2103      	movs	r1, #3
 8013e2c:	ab03      	add	r3, sp, #12
 8013e2e:	9301      	str	r3, [sp, #4]
 8013e30:	ab02      	add	r3, sp, #8
 8013e32:	9300      	str	r3, [sp, #0]
 8013e34:	ec47 6b10 	vmov	d0, r6, r7
 8013e38:	4653      	mov	r3, sl
 8013e3a:	4622      	mov	r2, r4
 8013e3c:	f001 f9a4 	bl	8015188 <_dtoa_r>
 8013e40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013e44:	4605      	mov	r5, r0
 8013e46:	d119      	bne.n	8013e7c <__cvt+0x94>
 8013e48:	f019 0f01 	tst.w	r9, #1
 8013e4c:	d00e      	beq.n	8013e6c <__cvt+0x84>
 8013e4e:	eb00 0904 	add.w	r9, r0, r4
 8013e52:	2200      	movs	r2, #0
 8013e54:	2300      	movs	r3, #0
 8013e56:	4630      	mov	r0, r6
 8013e58:	4639      	mov	r1, r7
 8013e5a:	f7ec fe5d 	bl	8000b18 <__aeabi_dcmpeq>
 8013e5e:	b108      	cbz	r0, 8013e64 <__cvt+0x7c>
 8013e60:	f8cd 900c 	str.w	r9, [sp, #12]
 8013e64:	2230      	movs	r2, #48	@ 0x30
 8013e66:	9b03      	ldr	r3, [sp, #12]
 8013e68:	454b      	cmp	r3, r9
 8013e6a:	d31e      	bcc.n	8013eaa <__cvt+0xc2>
 8013e6c:	9b03      	ldr	r3, [sp, #12]
 8013e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e70:	1b5b      	subs	r3, r3, r5
 8013e72:	4628      	mov	r0, r5
 8013e74:	6013      	str	r3, [r2, #0]
 8013e76:	b004      	add	sp, #16
 8013e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013e80:	eb00 0904 	add.w	r9, r0, r4
 8013e84:	d1e5      	bne.n	8013e52 <__cvt+0x6a>
 8013e86:	7803      	ldrb	r3, [r0, #0]
 8013e88:	2b30      	cmp	r3, #48	@ 0x30
 8013e8a:	d10a      	bne.n	8013ea2 <__cvt+0xba>
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2300      	movs	r3, #0
 8013e90:	4630      	mov	r0, r6
 8013e92:	4639      	mov	r1, r7
 8013e94:	f7ec fe40 	bl	8000b18 <__aeabi_dcmpeq>
 8013e98:	b918      	cbnz	r0, 8013ea2 <__cvt+0xba>
 8013e9a:	f1c4 0401 	rsb	r4, r4, #1
 8013e9e:	f8ca 4000 	str.w	r4, [sl]
 8013ea2:	f8da 3000 	ldr.w	r3, [sl]
 8013ea6:	4499      	add	r9, r3
 8013ea8:	e7d3      	b.n	8013e52 <__cvt+0x6a>
 8013eaa:	1c59      	adds	r1, r3, #1
 8013eac:	9103      	str	r1, [sp, #12]
 8013eae:	701a      	strb	r2, [r3, #0]
 8013eb0:	e7d9      	b.n	8013e66 <__cvt+0x7e>

08013eb2 <__exponent>:
 8013eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013eb4:	2900      	cmp	r1, #0
 8013eb6:	bfba      	itte	lt
 8013eb8:	4249      	neglt	r1, r1
 8013eba:	232d      	movlt	r3, #45	@ 0x2d
 8013ebc:	232b      	movge	r3, #43	@ 0x2b
 8013ebe:	2909      	cmp	r1, #9
 8013ec0:	7002      	strb	r2, [r0, #0]
 8013ec2:	7043      	strb	r3, [r0, #1]
 8013ec4:	dd29      	ble.n	8013f1a <__exponent+0x68>
 8013ec6:	f10d 0307 	add.w	r3, sp, #7
 8013eca:	461d      	mov	r5, r3
 8013ecc:	270a      	movs	r7, #10
 8013ece:	461a      	mov	r2, r3
 8013ed0:	fbb1 f6f7 	udiv	r6, r1, r7
 8013ed4:	fb07 1416 	mls	r4, r7, r6, r1
 8013ed8:	3430      	adds	r4, #48	@ 0x30
 8013eda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013ede:	460c      	mov	r4, r1
 8013ee0:	2c63      	cmp	r4, #99	@ 0x63
 8013ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8013ee6:	4631      	mov	r1, r6
 8013ee8:	dcf1      	bgt.n	8013ece <__exponent+0x1c>
 8013eea:	3130      	adds	r1, #48	@ 0x30
 8013eec:	1e94      	subs	r4, r2, #2
 8013eee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013ef2:	1c41      	adds	r1, r0, #1
 8013ef4:	4623      	mov	r3, r4
 8013ef6:	42ab      	cmp	r3, r5
 8013ef8:	d30a      	bcc.n	8013f10 <__exponent+0x5e>
 8013efa:	f10d 0309 	add.w	r3, sp, #9
 8013efe:	1a9b      	subs	r3, r3, r2
 8013f00:	42ac      	cmp	r4, r5
 8013f02:	bf88      	it	hi
 8013f04:	2300      	movhi	r3, #0
 8013f06:	3302      	adds	r3, #2
 8013f08:	4403      	add	r3, r0
 8013f0a:	1a18      	subs	r0, r3, r0
 8013f0c:	b003      	add	sp, #12
 8013f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013f14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013f18:	e7ed      	b.n	8013ef6 <__exponent+0x44>
 8013f1a:	2330      	movs	r3, #48	@ 0x30
 8013f1c:	3130      	adds	r1, #48	@ 0x30
 8013f1e:	7083      	strb	r3, [r0, #2]
 8013f20:	70c1      	strb	r1, [r0, #3]
 8013f22:	1d03      	adds	r3, r0, #4
 8013f24:	e7f1      	b.n	8013f0a <__exponent+0x58>
	...

08013f28 <_printf_float>:
 8013f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f2c:	b08d      	sub	sp, #52	@ 0x34
 8013f2e:	460c      	mov	r4, r1
 8013f30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013f34:	4616      	mov	r6, r2
 8013f36:	461f      	mov	r7, r3
 8013f38:	4605      	mov	r5, r0
 8013f3a:	f001 f811 	bl	8014f60 <_localeconv_r>
 8013f3e:	6803      	ldr	r3, [r0, #0]
 8013f40:	9304      	str	r3, [sp, #16]
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7ec f9bc 	bl	80002c0 <strlen>
 8013f48:	2300      	movs	r3, #0
 8013f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8013f50:	9005      	str	r0, [sp, #20]
 8013f52:	3307      	adds	r3, #7
 8013f54:	f023 0307 	bic.w	r3, r3, #7
 8013f58:	f103 0208 	add.w	r2, r3, #8
 8013f5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013f60:	f8d4 b000 	ldr.w	fp, [r4]
 8013f64:	f8c8 2000 	str.w	r2, [r8]
 8013f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013f6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013f70:	9307      	str	r3, [sp, #28]
 8013f72:	f8cd 8018 	str.w	r8, [sp, #24]
 8013f76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f7e:	4b9c      	ldr	r3, [pc, #624]	@ (80141f0 <_printf_float+0x2c8>)
 8013f80:	f04f 32ff 	mov.w	r2, #4294967295
 8013f84:	f7ec fdfa 	bl	8000b7c <__aeabi_dcmpun>
 8013f88:	bb70      	cbnz	r0, 8013fe8 <_printf_float+0xc0>
 8013f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f8e:	4b98      	ldr	r3, [pc, #608]	@ (80141f0 <_printf_float+0x2c8>)
 8013f90:	f04f 32ff 	mov.w	r2, #4294967295
 8013f94:	f7ec fdd4 	bl	8000b40 <__aeabi_dcmple>
 8013f98:	bb30      	cbnz	r0, 8013fe8 <_printf_float+0xc0>
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	4640      	mov	r0, r8
 8013fa0:	4649      	mov	r1, r9
 8013fa2:	f7ec fdc3 	bl	8000b2c <__aeabi_dcmplt>
 8013fa6:	b110      	cbz	r0, 8013fae <_printf_float+0x86>
 8013fa8:	232d      	movs	r3, #45	@ 0x2d
 8013faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013fae:	4a91      	ldr	r2, [pc, #580]	@ (80141f4 <_printf_float+0x2cc>)
 8013fb0:	4b91      	ldr	r3, [pc, #580]	@ (80141f8 <_printf_float+0x2d0>)
 8013fb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013fb6:	bf8c      	ite	hi
 8013fb8:	4690      	movhi	r8, r2
 8013fba:	4698      	movls	r8, r3
 8013fbc:	2303      	movs	r3, #3
 8013fbe:	6123      	str	r3, [r4, #16]
 8013fc0:	f02b 0304 	bic.w	r3, fp, #4
 8013fc4:	6023      	str	r3, [r4, #0]
 8013fc6:	f04f 0900 	mov.w	r9, #0
 8013fca:	9700      	str	r7, [sp, #0]
 8013fcc:	4633      	mov	r3, r6
 8013fce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013fd0:	4621      	mov	r1, r4
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	f000 f9d2 	bl	801437c <_printf_common>
 8013fd8:	3001      	adds	r0, #1
 8013fda:	f040 808d 	bne.w	80140f8 <_printf_float+0x1d0>
 8013fde:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe2:	b00d      	add	sp, #52	@ 0x34
 8013fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe8:	4642      	mov	r2, r8
 8013fea:	464b      	mov	r3, r9
 8013fec:	4640      	mov	r0, r8
 8013fee:	4649      	mov	r1, r9
 8013ff0:	f7ec fdc4 	bl	8000b7c <__aeabi_dcmpun>
 8013ff4:	b140      	cbz	r0, 8014008 <_printf_float+0xe0>
 8013ff6:	464b      	mov	r3, r9
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	bfbc      	itt	lt
 8013ffc:	232d      	movlt	r3, #45	@ 0x2d
 8013ffe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014002:	4a7e      	ldr	r2, [pc, #504]	@ (80141fc <_printf_float+0x2d4>)
 8014004:	4b7e      	ldr	r3, [pc, #504]	@ (8014200 <_printf_float+0x2d8>)
 8014006:	e7d4      	b.n	8013fb2 <_printf_float+0x8a>
 8014008:	6863      	ldr	r3, [r4, #4]
 801400a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801400e:	9206      	str	r2, [sp, #24]
 8014010:	1c5a      	adds	r2, r3, #1
 8014012:	d13b      	bne.n	801408c <_printf_float+0x164>
 8014014:	2306      	movs	r3, #6
 8014016:	6063      	str	r3, [r4, #4]
 8014018:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801401c:	2300      	movs	r3, #0
 801401e:	6022      	str	r2, [r4, #0]
 8014020:	9303      	str	r3, [sp, #12]
 8014022:	ab0a      	add	r3, sp, #40	@ 0x28
 8014024:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014028:	ab09      	add	r3, sp, #36	@ 0x24
 801402a:	9300      	str	r3, [sp, #0]
 801402c:	6861      	ldr	r1, [r4, #4]
 801402e:	ec49 8b10 	vmov	d0, r8, r9
 8014032:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014036:	4628      	mov	r0, r5
 8014038:	f7ff fed6 	bl	8013de8 <__cvt>
 801403c:	9b06      	ldr	r3, [sp, #24]
 801403e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014040:	2b47      	cmp	r3, #71	@ 0x47
 8014042:	4680      	mov	r8, r0
 8014044:	d129      	bne.n	801409a <_printf_float+0x172>
 8014046:	1cc8      	adds	r0, r1, #3
 8014048:	db02      	blt.n	8014050 <_printf_float+0x128>
 801404a:	6863      	ldr	r3, [r4, #4]
 801404c:	4299      	cmp	r1, r3
 801404e:	dd41      	ble.n	80140d4 <_printf_float+0x1ac>
 8014050:	f1aa 0a02 	sub.w	sl, sl, #2
 8014054:	fa5f fa8a 	uxtb.w	sl, sl
 8014058:	3901      	subs	r1, #1
 801405a:	4652      	mov	r2, sl
 801405c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014060:	9109      	str	r1, [sp, #36]	@ 0x24
 8014062:	f7ff ff26 	bl	8013eb2 <__exponent>
 8014066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014068:	1813      	adds	r3, r2, r0
 801406a:	2a01      	cmp	r2, #1
 801406c:	4681      	mov	r9, r0
 801406e:	6123      	str	r3, [r4, #16]
 8014070:	dc02      	bgt.n	8014078 <_printf_float+0x150>
 8014072:	6822      	ldr	r2, [r4, #0]
 8014074:	07d2      	lsls	r2, r2, #31
 8014076:	d501      	bpl.n	801407c <_printf_float+0x154>
 8014078:	3301      	adds	r3, #1
 801407a:	6123      	str	r3, [r4, #16]
 801407c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014080:	2b00      	cmp	r3, #0
 8014082:	d0a2      	beq.n	8013fca <_printf_float+0xa2>
 8014084:	232d      	movs	r3, #45	@ 0x2d
 8014086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801408a:	e79e      	b.n	8013fca <_printf_float+0xa2>
 801408c:	9a06      	ldr	r2, [sp, #24]
 801408e:	2a47      	cmp	r2, #71	@ 0x47
 8014090:	d1c2      	bne.n	8014018 <_printf_float+0xf0>
 8014092:	2b00      	cmp	r3, #0
 8014094:	d1c0      	bne.n	8014018 <_printf_float+0xf0>
 8014096:	2301      	movs	r3, #1
 8014098:	e7bd      	b.n	8014016 <_printf_float+0xee>
 801409a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801409e:	d9db      	bls.n	8014058 <_printf_float+0x130>
 80140a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80140a4:	d118      	bne.n	80140d8 <_printf_float+0x1b0>
 80140a6:	2900      	cmp	r1, #0
 80140a8:	6863      	ldr	r3, [r4, #4]
 80140aa:	dd0b      	ble.n	80140c4 <_printf_float+0x19c>
 80140ac:	6121      	str	r1, [r4, #16]
 80140ae:	b913      	cbnz	r3, 80140b6 <_printf_float+0x18e>
 80140b0:	6822      	ldr	r2, [r4, #0]
 80140b2:	07d0      	lsls	r0, r2, #31
 80140b4:	d502      	bpl.n	80140bc <_printf_float+0x194>
 80140b6:	3301      	adds	r3, #1
 80140b8:	440b      	add	r3, r1
 80140ba:	6123      	str	r3, [r4, #16]
 80140bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80140be:	f04f 0900 	mov.w	r9, #0
 80140c2:	e7db      	b.n	801407c <_printf_float+0x154>
 80140c4:	b913      	cbnz	r3, 80140cc <_printf_float+0x1a4>
 80140c6:	6822      	ldr	r2, [r4, #0]
 80140c8:	07d2      	lsls	r2, r2, #31
 80140ca:	d501      	bpl.n	80140d0 <_printf_float+0x1a8>
 80140cc:	3302      	adds	r3, #2
 80140ce:	e7f4      	b.n	80140ba <_printf_float+0x192>
 80140d0:	2301      	movs	r3, #1
 80140d2:	e7f2      	b.n	80140ba <_printf_float+0x192>
 80140d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80140d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140da:	4299      	cmp	r1, r3
 80140dc:	db05      	blt.n	80140ea <_printf_float+0x1c2>
 80140de:	6823      	ldr	r3, [r4, #0]
 80140e0:	6121      	str	r1, [r4, #16]
 80140e2:	07d8      	lsls	r0, r3, #31
 80140e4:	d5ea      	bpl.n	80140bc <_printf_float+0x194>
 80140e6:	1c4b      	adds	r3, r1, #1
 80140e8:	e7e7      	b.n	80140ba <_printf_float+0x192>
 80140ea:	2900      	cmp	r1, #0
 80140ec:	bfd4      	ite	le
 80140ee:	f1c1 0202 	rsble	r2, r1, #2
 80140f2:	2201      	movgt	r2, #1
 80140f4:	4413      	add	r3, r2
 80140f6:	e7e0      	b.n	80140ba <_printf_float+0x192>
 80140f8:	6823      	ldr	r3, [r4, #0]
 80140fa:	055a      	lsls	r2, r3, #21
 80140fc:	d407      	bmi.n	801410e <_printf_float+0x1e6>
 80140fe:	6923      	ldr	r3, [r4, #16]
 8014100:	4642      	mov	r2, r8
 8014102:	4631      	mov	r1, r6
 8014104:	4628      	mov	r0, r5
 8014106:	47b8      	blx	r7
 8014108:	3001      	adds	r0, #1
 801410a:	d12b      	bne.n	8014164 <_printf_float+0x23c>
 801410c:	e767      	b.n	8013fde <_printf_float+0xb6>
 801410e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014112:	f240 80dd 	bls.w	80142d0 <_printf_float+0x3a8>
 8014116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801411a:	2200      	movs	r2, #0
 801411c:	2300      	movs	r3, #0
 801411e:	f7ec fcfb 	bl	8000b18 <__aeabi_dcmpeq>
 8014122:	2800      	cmp	r0, #0
 8014124:	d033      	beq.n	801418e <_printf_float+0x266>
 8014126:	4a37      	ldr	r2, [pc, #220]	@ (8014204 <_printf_float+0x2dc>)
 8014128:	2301      	movs	r3, #1
 801412a:	4631      	mov	r1, r6
 801412c:	4628      	mov	r0, r5
 801412e:	47b8      	blx	r7
 8014130:	3001      	adds	r0, #1
 8014132:	f43f af54 	beq.w	8013fde <_printf_float+0xb6>
 8014136:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801413a:	4543      	cmp	r3, r8
 801413c:	db02      	blt.n	8014144 <_printf_float+0x21c>
 801413e:	6823      	ldr	r3, [r4, #0]
 8014140:	07d8      	lsls	r0, r3, #31
 8014142:	d50f      	bpl.n	8014164 <_printf_float+0x23c>
 8014144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014148:	4631      	mov	r1, r6
 801414a:	4628      	mov	r0, r5
 801414c:	47b8      	blx	r7
 801414e:	3001      	adds	r0, #1
 8014150:	f43f af45 	beq.w	8013fde <_printf_float+0xb6>
 8014154:	f04f 0900 	mov.w	r9, #0
 8014158:	f108 38ff 	add.w	r8, r8, #4294967295
 801415c:	f104 0a1a 	add.w	sl, r4, #26
 8014160:	45c8      	cmp	r8, r9
 8014162:	dc09      	bgt.n	8014178 <_printf_float+0x250>
 8014164:	6823      	ldr	r3, [r4, #0]
 8014166:	079b      	lsls	r3, r3, #30
 8014168:	f100 8103 	bmi.w	8014372 <_printf_float+0x44a>
 801416c:	68e0      	ldr	r0, [r4, #12]
 801416e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014170:	4298      	cmp	r0, r3
 8014172:	bfb8      	it	lt
 8014174:	4618      	movlt	r0, r3
 8014176:	e734      	b.n	8013fe2 <_printf_float+0xba>
 8014178:	2301      	movs	r3, #1
 801417a:	4652      	mov	r2, sl
 801417c:	4631      	mov	r1, r6
 801417e:	4628      	mov	r0, r5
 8014180:	47b8      	blx	r7
 8014182:	3001      	adds	r0, #1
 8014184:	f43f af2b 	beq.w	8013fde <_printf_float+0xb6>
 8014188:	f109 0901 	add.w	r9, r9, #1
 801418c:	e7e8      	b.n	8014160 <_printf_float+0x238>
 801418e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014190:	2b00      	cmp	r3, #0
 8014192:	dc39      	bgt.n	8014208 <_printf_float+0x2e0>
 8014194:	4a1b      	ldr	r2, [pc, #108]	@ (8014204 <_printf_float+0x2dc>)
 8014196:	2301      	movs	r3, #1
 8014198:	4631      	mov	r1, r6
 801419a:	4628      	mov	r0, r5
 801419c:	47b8      	blx	r7
 801419e:	3001      	adds	r0, #1
 80141a0:	f43f af1d 	beq.w	8013fde <_printf_float+0xb6>
 80141a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80141a8:	ea59 0303 	orrs.w	r3, r9, r3
 80141ac:	d102      	bne.n	80141b4 <_printf_float+0x28c>
 80141ae:	6823      	ldr	r3, [r4, #0]
 80141b0:	07d9      	lsls	r1, r3, #31
 80141b2:	d5d7      	bpl.n	8014164 <_printf_float+0x23c>
 80141b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141b8:	4631      	mov	r1, r6
 80141ba:	4628      	mov	r0, r5
 80141bc:	47b8      	blx	r7
 80141be:	3001      	adds	r0, #1
 80141c0:	f43f af0d 	beq.w	8013fde <_printf_float+0xb6>
 80141c4:	f04f 0a00 	mov.w	sl, #0
 80141c8:	f104 0b1a 	add.w	fp, r4, #26
 80141cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141ce:	425b      	negs	r3, r3
 80141d0:	4553      	cmp	r3, sl
 80141d2:	dc01      	bgt.n	80141d8 <_printf_float+0x2b0>
 80141d4:	464b      	mov	r3, r9
 80141d6:	e793      	b.n	8014100 <_printf_float+0x1d8>
 80141d8:	2301      	movs	r3, #1
 80141da:	465a      	mov	r2, fp
 80141dc:	4631      	mov	r1, r6
 80141de:	4628      	mov	r0, r5
 80141e0:	47b8      	blx	r7
 80141e2:	3001      	adds	r0, #1
 80141e4:	f43f aefb 	beq.w	8013fde <_printf_float+0xb6>
 80141e8:	f10a 0a01 	add.w	sl, sl, #1
 80141ec:	e7ee      	b.n	80141cc <_printf_float+0x2a4>
 80141ee:	bf00      	nop
 80141f0:	7fefffff 	.word	0x7fefffff
 80141f4:	0801bb6c 	.word	0x0801bb6c
 80141f8:	0801bb68 	.word	0x0801bb68
 80141fc:	0801bb74 	.word	0x0801bb74
 8014200:	0801bb70 	.word	0x0801bb70
 8014204:	0801bb78 	.word	0x0801bb78
 8014208:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801420a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801420e:	4553      	cmp	r3, sl
 8014210:	bfa8      	it	ge
 8014212:	4653      	movge	r3, sl
 8014214:	2b00      	cmp	r3, #0
 8014216:	4699      	mov	r9, r3
 8014218:	dc36      	bgt.n	8014288 <_printf_float+0x360>
 801421a:	f04f 0b00 	mov.w	fp, #0
 801421e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014222:	f104 021a 	add.w	r2, r4, #26
 8014226:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014228:	9306      	str	r3, [sp, #24]
 801422a:	eba3 0309 	sub.w	r3, r3, r9
 801422e:	455b      	cmp	r3, fp
 8014230:	dc31      	bgt.n	8014296 <_printf_float+0x36e>
 8014232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014234:	459a      	cmp	sl, r3
 8014236:	dc3a      	bgt.n	80142ae <_printf_float+0x386>
 8014238:	6823      	ldr	r3, [r4, #0]
 801423a:	07da      	lsls	r2, r3, #31
 801423c:	d437      	bmi.n	80142ae <_printf_float+0x386>
 801423e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014240:	ebaa 0903 	sub.w	r9, sl, r3
 8014244:	9b06      	ldr	r3, [sp, #24]
 8014246:	ebaa 0303 	sub.w	r3, sl, r3
 801424a:	4599      	cmp	r9, r3
 801424c:	bfa8      	it	ge
 801424e:	4699      	movge	r9, r3
 8014250:	f1b9 0f00 	cmp.w	r9, #0
 8014254:	dc33      	bgt.n	80142be <_printf_float+0x396>
 8014256:	f04f 0800 	mov.w	r8, #0
 801425a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801425e:	f104 0b1a 	add.w	fp, r4, #26
 8014262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014264:	ebaa 0303 	sub.w	r3, sl, r3
 8014268:	eba3 0309 	sub.w	r3, r3, r9
 801426c:	4543      	cmp	r3, r8
 801426e:	f77f af79 	ble.w	8014164 <_printf_float+0x23c>
 8014272:	2301      	movs	r3, #1
 8014274:	465a      	mov	r2, fp
 8014276:	4631      	mov	r1, r6
 8014278:	4628      	mov	r0, r5
 801427a:	47b8      	blx	r7
 801427c:	3001      	adds	r0, #1
 801427e:	f43f aeae 	beq.w	8013fde <_printf_float+0xb6>
 8014282:	f108 0801 	add.w	r8, r8, #1
 8014286:	e7ec      	b.n	8014262 <_printf_float+0x33a>
 8014288:	4642      	mov	r2, r8
 801428a:	4631      	mov	r1, r6
 801428c:	4628      	mov	r0, r5
 801428e:	47b8      	blx	r7
 8014290:	3001      	adds	r0, #1
 8014292:	d1c2      	bne.n	801421a <_printf_float+0x2f2>
 8014294:	e6a3      	b.n	8013fde <_printf_float+0xb6>
 8014296:	2301      	movs	r3, #1
 8014298:	4631      	mov	r1, r6
 801429a:	4628      	mov	r0, r5
 801429c:	9206      	str	r2, [sp, #24]
 801429e:	47b8      	blx	r7
 80142a0:	3001      	adds	r0, #1
 80142a2:	f43f ae9c 	beq.w	8013fde <_printf_float+0xb6>
 80142a6:	9a06      	ldr	r2, [sp, #24]
 80142a8:	f10b 0b01 	add.w	fp, fp, #1
 80142ac:	e7bb      	b.n	8014226 <_printf_float+0x2fe>
 80142ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142b2:	4631      	mov	r1, r6
 80142b4:	4628      	mov	r0, r5
 80142b6:	47b8      	blx	r7
 80142b8:	3001      	adds	r0, #1
 80142ba:	d1c0      	bne.n	801423e <_printf_float+0x316>
 80142bc:	e68f      	b.n	8013fde <_printf_float+0xb6>
 80142be:	9a06      	ldr	r2, [sp, #24]
 80142c0:	464b      	mov	r3, r9
 80142c2:	4442      	add	r2, r8
 80142c4:	4631      	mov	r1, r6
 80142c6:	4628      	mov	r0, r5
 80142c8:	47b8      	blx	r7
 80142ca:	3001      	adds	r0, #1
 80142cc:	d1c3      	bne.n	8014256 <_printf_float+0x32e>
 80142ce:	e686      	b.n	8013fde <_printf_float+0xb6>
 80142d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80142d4:	f1ba 0f01 	cmp.w	sl, #1
 80142d8:	dc01      	bgt.n	80142de <_printf_float+0x3b6>
 80142da:	07db      	lsls	r3, r3, #31
 80142dc:	d536      	bpl.n	801434c <_printf_float+0x424>
 80142de:	2301      	movs	r3, #1
 80142e0:	4642      	mov	r2, r8
 80142e2:	4631      	mov	r1, r6
 80142e4:	4628      	mov	r0, r5
 80142e6:	47b8      	blx	r7
 80142e8:	3001      	adds	r0, #1
 80142ea:	f43f ae78 	beq.w	8013fde <_printf_float+0xb6>
 80142ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142f2:	4631      	mov	r1, r6
 80142f4:	4628      	mov	r0, r5
 80142f6:	47b8      	blx	r7
 80142f8:	3001      	adds	r0, #1
 80142fa:	f43f ae70 	beq.w	8013fde <_printf_float+0xb6>
 80142fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014302:	2200      	movs	r2, #0
 8014304:	2300      	movs	r3, #0
 8014306:	f10a 3aff 	add.w	sl, sl, #4294967295
 801430a:	f7ec fc05 	bl	8000b18 <__aeabi_dcmpeq>
 801430e:	b9c0      	cbnz	r0, 8014342 <_printf_float+0x41a>
 8014310:	4653      	mov	r3, sl
 8014312:	f108 0201 	add.w	r2, r8, #1
 8014316:	4631      	mov	r1, r6
 8014318:	4628      	mov	r0, r5
 801431a:	47b8      	blx	r7
 801431c:	3001      	adds	r0, #1
 801431e:	d10c      	bne.n	801433a <_printf_float+0x412>
 8014320:	e65d      	b.n	8013fde <_printf_float+0xb6>
 8014322:	2301      	movs	r3, #1
 8014324:	465a      	mov	r2, fp
 8014326:	4631      	mov	r1, r6
 8014328:	4628      	mov	r0, r5
 801432a:	47b8      	blx	r7
 801432c:	3001      	adds	r0, #1
 801432e:	f43f ae56 	beq.w	8013fde <_printf_float+0xb6>
 8014332:	f108 0801 	add.w	r8, r8, #1
 8014336:	45d0      	cmp	r8, sl
 8014338:	dbf3      	blt.n	8014322 <_printf_float+0x3fa>
 801433a:	464b      	mov	r3, r9
 801433c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014340:	e6df      	b.n	8014102 <_printf_float+0x1da>
 8014342:	f04f 0800 	mov.w	r8, #0
 8014346:	f104 0b1a 	add.w	fp, r4, #26
 801434a:	e7f4      	b.n	8014336 <_printf_float+0x40e>
 801434c:	2301      	movs	r3, #1
 801434e:	4642      	mov	r2, r8
 8014350:	e7e1      	b.n	8014316 <_printf_float+0x3ee>
 8014352:	2301      	movs	r3, #1
 8014354:	464a      	mov	r2, r9
 8014356:	4631      	mov	r1, r6
 8014358:	4628      	mov	r0, r5
 801435a:	47b8      	blx	r7
 801435c:	3001      	adds	r0, #1
 801435e:	f43f ae3e 	beq.w	8013fde <_printf_float+0xb6>
 8014362:	f108 0801 	add.w	r8, r8, #1
 8014366:	68e3      	ldr	r3, [r4, #12]
 8014368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801436a:	1a5b      	subs	r3, r3, r1
 801436c:	4543      	cmp	r3, r8
 801436e:	dcf0      	bgt.n	8014352 <_printf_float+0x42a>
 8014370:	e6fc      	b.n	801416c <_printf_float+0x244>
 8014372:	f04f 0800 	mov.w	r8, #0
 8014376:	f104 0919 	add.w	r9, r4, #25
 801437a:	e7f4      	b.n	8014366 <_printf_float+0x43e>

0801437c <_printf_common>:
 801437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014380:	4616      	mov	r6, r2
 8014382:	4698      	mov	r8, r3
 8014384:	688a      	ldr	r2, [r1, #8]
 8014386:	690b      	ldr	r3, [r1, #16]
 8014388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801438c:	4293      	cmp	r3, r2
 801438e:	bfb8      	it	lt
 8014390:	4613      	movlt	r3, r2
 8014392:	6033      	str	r3, [r6, #0]
 8014394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014398:	4607      	mov	r7, r0
 801439a:	460c      	mov	r4, r1
 801439c:	b10a      	cbz	r2, 80143a2 <_printf_common+0x26>
 801439e:	3301      	adds	r3, #1
 80143a0:	6033      	str	r3, [r6, #0]
 80143a2:	6823      	ldr	r3, [r4, #0]
 80143a4:	0699      	lsls	r1, r3, #26
 80143a6:	bf42      	ittt	mi
 80143a8:	6833      	ldrmi	r3, [r6, #0]
 80143aa:	3302      	addmi	r3, #2
 80143ac:	6033      	strmi	r3, [r6, #0]
 80143ae:	6825      	ldr	r5, [r4, #0]
 80143b0:	f015 0506 	ands.w	r5, r5, #6
 80143b4:	d106      	bne.n	80143c4 <_printf_common+0x48>
 80143b6:	f104 0a19 	add.w	sl, r4, #25
 80143ba:	68e3      	ldr	r3, [r4, #12]
 80143bc:	6832      	ldr	r2, [r6, #0]
 80143be:	1a9b      	subs	r3, r3, r2
 80143c0:	42ab      	cmp	r3, r5
 80143c2:	dc26      	bgt.n	8014412 <_printf_common+0x96>
 80143c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80143c8:	6822      	ldr	r2, [r4, #0]
 80143ca:	3b00      	subs	r3, #0
 80143cc:	bf18      	it	ne
 80143ce:	2301      	movne	r3, #1
 80143d0:	0692      	lsls	r2, r2, #26
 80143d2:	d42b      	bmi.n	801442c <_printf_common+0xb0>
 80143d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80143d8:	4641      	mov	r1, r8
 80143da:	4638      	mov	r0, r7
 80143dc:	47c8      	blx	r9
 80143de:	3001      	adds	r0, #1
 80143e0:	d01e      	beq.n	8014420 <_printf_common+0xa4>
 80143e2:	6823      	ldr	r3, [r4, #0]
 80143e4:	6922      	ldr	r2, [r4, #16]
 80143e6:	f003 0306 	and.w	r3, r3, #6
 80143ea:	2b04      	cmp	r3, #4
 80143ec:	bf02      	ittt	eq
 80143ee:	68e5      	ldreq	r5, [r4, #12]
 80143f0:	6833      	ldreq	r3, [r6, #0]
 80143f2:	1aed      	subeq	r5, r5, r3
 80143f4:	68a3      	ldr	r3, [r4, #8]
 80143f6:	bf0c      	ite	eq
 80143f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80143fc:	2500      	movne	r5, #0
 80143fe:	4293      	cmp	r3, r2
 8014400:	bfc4      	itt	gt
 8014402:	1a9b      	subgt	r3, r3, r2
 8014404:	18ed      	addgt	r5, r5, r3
 8014406:	2600      	movs	r6, #0
 8014408:	341a      	adds	r4, #26
 801440a:	42b5      	cmp	r5, r6
 801440c:	d11a      	bne.n	8014444 <_printf_common+0xc8>
 801440e:	2000      	movs	r0, #0
 8014410:	e008      	b.n	8014424 <_printf_common+0xa8>
 8014412:	2301      	movs	r3, #1
 8014414:	4652      	mov	r2, sl
 8014416:	4641      	mov	r1, r8
 8014418:	4638      	mov	r0, r7
 801441a:	47c8      	blx	r9
 801441c:	3001      	adds	r0, #1
 801441e:	d103      	bne.n	8014428 <_printf_common+0xac>
 8014420:	f04f 30ff 	mov.w	r0, #4294967295
 8014424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014428:	3501      	adds	r5, #1
 801442a:	e7c6      	b.n	80143ba <_printf_common+0x3e>
 801442c:	18e1      	adds	r1, r4, r3
 801442e:	1c5a      	adds	r2, r3, #1
 8014430:	2030      	movs	r0, #48	@ 0x30
 8014432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014436:	4422      	add	r2, r4
 8014438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801443c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014440:	3302      	adds	r3, #2
 8014442:	e7c7      	b.n	80143d4 <_printf_common+0x58>
 8014444:	2301      	movs	r3, #1
 8014446:	4622      	mov	r2, r4
 8014448:	4641      	mov	r1, r8
 801444a:	4638      	mov	r0, r7
 801444c:	47c8      	blx	r9
 801444e:	3001      	adds	r0, #1
 8014450:	d0e6      	beq.n	8014420 <_printf_common+0xa4>
 8014452:	3601      	adds	r6, #1
 8014454:	e7d9      	b.n	801440a <_printf_common+0x8e>
	...

08014458 <_printf_i>:
 8014458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801445c:	7e0f      	ldrb	r7, [r1, #24]
 801445e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014460:	2f78      	cmp	r7, #120	@ 0x78
 8014462:	4691      	mov	r9, r2
 8014464:	4680      	mov	r8, r0
 8014466:	460c      	mov	r4, r1
 8014468:	469a      	mov	sl, r3
 801446a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801446e:	d807      	bhi.n	8014480 <_printf_i+0x28>
 8014470:	2f62      	cmp	r7, #98	@ 0x62
 8014472:	d80a      	bhi.n	801448a <_printf_i+0x32>
 8014474:	2f00      	cmp	r7, #0
 8014476:	f000 80d1 	beq.w	801461c <_printf_i+0x1c4>
 801447a:	2f58      	cmp	r7, #88	@ 0x58
 801447c:	f000 80b8 	beq.w	80145f0 <_printf_i+0x198>
 8014480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014488:	e03a      	b.n	8014500 <_printf_i+0xa8>
 801448a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801448e:	2b15      	cmp	r3, #21
 8014490:	d8f6      	bhi.n	8014480 <_printf_i+0x28>
 8014492:	a101      	add	r1, pc, #4	@ (adr r1, 8014498 <_printf_i+0x40>)
 8014494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014498:	080144f1 	.word	0x080144f1
 801449c:	08014505 	.word	0x08014505
 80144a0:	08014481 	.word	0x08014481
 80144a4:	08014481 	.word	0x08014481
 80144a8:	08014481 	.word	0x08014481
 80144ac:	08014481 	.word	0x08014481
 80144b0:	08014505 	.word	0x08014505
 80144b4:	08014481 	.word	0x08014481
 80144b8:	08014481 	.word	0x08014481
 80144bc:	08014481 	.word	0x08014481
 80144c0:	08014481 	.word	0x08014481
 80144c4:	08014603 	.word	0x08014603
 80144c8:	0801452f 	.word	0x0801452f
 80144cc:	080145bd 	.word	0x080145bd
 80144d0:	08014481 	.word	0x08014481
 80144d4:	08014481 	.word	0x08014481
 80144d8:	08014625 	.word	0x08014625
 80144dc:	08014481 	.word	0x08014481
 80144e0:	0801452f 	.word	0x0801452f
 80144e4:	08014481 	.word	0x08014481
 80144e8:	08014481 	.word	0x08014481
 80144ec:	080145c5 	.word	0x080145c5
 80144f0:	6833      	ldr	r3, [r6, #0]
 80144f2:	1d1a      	adds	r2, r3, #4
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	6032      	str	r2, [r6, #0]
 80144f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80144fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014500:	2301      	movs	r3, #1
 8014502:	e09c      	b.n	801463e <_printf_i+0x1e6>
 8014504:	6833      	ldr	r3, [r6, #0]
 8014506:	6820      	ldr	r0, [r4, #0]
 8014508:	1d19      	adds	r1, r3, #4
 801450a:	6031      	str	r1, [r6, #0]
 801450c:	0606      	lsls	r6, r0, #24
 801450e:	d501      	bpl.n	8014514 <_printf_i+0xbc>
 8014510:	681d      	ldr	r5, [r3, #0]
 8014512:	e003      	b.n	801451c <_printf_i+0xc4>
 8014514:	0645      	lsls	r5, r0, #25
 8014516:	d5fb      	bpl.n	8014510 <_printf_i+0xb8>
 8014518:	f9b3 5000 	ldrsh.w	r5, [r3]
 801451c:	2d00      	cmp	r5, #0
 801451e:	da03      	bge.n	8014528 <_printf_i+0xd0>
 8014520:	232d      	movs	r3, #45	@ 0x2d
 8014522:	426d      	negs	r5, r5
 8014524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014528:	4858      	ldr	r0, [pc, #352]	@ (801468c <_printf_i+0x234>)
 801452a:	230a      	movs	r3, #10
 801452c:	e011      	b.n	8014552 <_printf_i+0xfa>
 801452e:	6821      	ldr	r1, [r4, #0]
 8014530:	6833      	ldr	r3, [r6, #0]
 8014532:	0608      	lsls	r0, r1, #24
 8014534:	f853 5b04 	ldr.w	r5, [r3], #4
 8014538:	d402      	bmi.n	8014540 <_printf_i+0xe8>
 801453a:	0649      	lsls	r1, r1, #25
 801453c:	bf48      	it	mi
 801453e:	b2ad      	uxthmi	r5, r5
 8014540:	2f6f      	cmp	r7, #111	@ 0x6f
 8014542:	4852      	ldr	r0, [pc, #328]	@ (801468c <_printf_i+0x234>)
 8014544:	6033      	str	r3, [r6, #0]
 8014546:	bf14      	ite	ne
 8014548:	230a      	movne	r3, #10
 801454a:	2308      	moveq	r3, #8
 801454c:	2100      	movs	r1, #0
 801454e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014552:	6866      	ldr	r6, [r4, #4]
 8014554:	60a6      	str	r6, [r4, #8]
 8014556:	2e00      	cmp	r6, #0
 8014558:	db05      	blt.n	8014566 <_printf_i+0x10e>
 801455a:	6821      	ldr	r1, [r4, #0]
 801455c:	432e      	orrs	r6, r5
 801455e:	f021 0104 	bic.w	r1, r1, #4
 8014562:	6021      	str	r1, [r4, #0]
 8014564:	d04b      	beq.n	80145fe <_printf_i+0x1a6>
 8014566:	4616      	mov	r6, r2
 8014568:	fbb5 f1f3 	udiv	r1, r5, r3
 801456c:	fb03 5711 	mls	r7, r3, r1, r5
 8014570:	5dc7      	ldrb	r7, [r0, r7]
 8014572:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014576:	462f      	mov	r7, r5
 8014578:	42bb      	cmp	r3, r7
 801457a:	460d      	mov	r5, r1
 801457c:	d9f4      	bls.n	8014568 <_printf_i+0x110>
 801457e:	2b08      	cmp	r3, #8
 8014580:	d10b      	bne.n	801459a <_printf_i+0x142>
 8014582:	6823      	ldr	r3, [r4, #0]
 8014584:	07df      	lsls	r7, r3, #31
 8014586:	d508      	bpl.n	801459a <_printf_i+0x142>
 8014588:	6923      	ldr	r3, [r4, #16]
 801458a:	6861      	ldr	r1, [r4, #4]
 801458c:	4299      	cmp	r1, r3
 801458e:	bfde      	ittt	le
 8014590:	2330      	movle	r3, #48	@ 0x30
 8014592:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014596:	f106 36ff 	addle.w	r6, r6, #4294967295
 801459a:	1b92      	subs	r2, r2, r6
 801459c:	6122      	str	r2, [r4, #16]
 801459e:	f8cd a000 	str.w	sl, [sp]
 80145a2:	464b      	mov	r3, r9
 80145a4:	aa03      	add	r2, sp, #12
 80145a6:	4621      	mov	r1, r4
 80145a8:	4640      	mov	r0, r8
 80145aa:	f7ff fee7 	bl	801437c <_printf_common>
 80145ae:	3001      	adds	r0, #1
 80145b0:	d14a      	bne.n	8014648 <_printf_i+0x1f0>
 80145b2:	f04f 30ff 	mov.w	r0, #4294967295
 80145b6:	b004      	add	sp, #16
 80145b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145bc:	6823      	ldr	r3, [r4, #0]
 80145be:	f043 0320 	orr.w	r3, r3, #32
 80145c2:	6023      	str	r3, [r4, #0]
 80145c4:	4832      	ldr	r0, [pc, #200]	@ (8014690 <_printf_i+0x238>)
 80145c6:	2778      	movs	r7, #120	@ 0x78
 80145c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80145cc:	6823      	ldr	r3, [r4, #0]
 80145ce:	6831      	ldr	r1, [r6, #0]
 80145d0:	061f      	lsls	r7, r3, #24
 80145d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80145d6:	d402      	bmi.n	80145de <_printf_i+0x186>
 80145d8:	065f      	lsls	r7, r3, #25
 80145da:	bf48      	it	mi
 80145dc:	b2ad      	uxthmi	r5, r5
 80145de:	6031      	str	r1, [r6, #0]
 80145e0:	07d9      	lsls	r1, r3, #31
 80145e2:	bf44      	itt	mi
 80145e4:	f043 0320 	orrmi.w	r3, r3, #32
 80145e8:	6023      	strmi	r3, [r4, #0]
 80145ea:	b11d      	cbz	r5, 80145f4 <_printf_i+0x19c>
 80145ec:	2310      	movs	r3, #16
 80145ee:	e7ad      	b.n	801454c <_printf_i+0xf4>
 80145f0:	4826      	ldr	r0, [pc, #152]	@ (801468c <_printf_i+0x234>)
 80145f2:	e7e9      	b.n	80145c8 <_printf_i+0x170>
 80145f4:	6823      	ldr	r3, [r4, #0]
 80145f6:	f023 0320 	bic.w	r3, r3, #32
 80145fa:	6023      	str	r3, [r4, #0]
 80145fc:	e7f6      	b.n	80145ec <_printf_i+0x194>
 80145fe:	4616      	mov	r6, r2
 8014600:	e7bd      	b.n	801457e <_printf_i+0x126>
 8014602:	6833      	ldr	r3, [r6, #0]
 8014604:	6825      	ldr	r5, [r4, #0]
 8014606:	6961      	ldr	r1, [r4, #20]
 8014608:	1d18      	adds	r0, r3, #4
 801460a:	6030      	str	r0, [r6, #0]
 801460c:	062e      	lsls	r6, r5, #24
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	d501      	bpl.n	8014616 <_printf_i+0x1be>
 8014612:	6019      	str	r1, [r3, #0]
 8014614:	e002      	b.n	801461c <_printf_i+0x1c4>
 8014616:	0668      	lsls	r0, r5, #25
 8014618:	d5fb      	bpl.n	8014612 <_printf_i+0x1ba>
 801461a:	8019      	strh	r1, [r3, #0]
 801461c:	2300      	movs	r3, #0
 801461e:	6123      	str	r3, [r4, #16]
 8014620:	4616      	mov	r6, r2
 8014622:	e7bc      	b.n	801459e <_printf_i+0x146>
 8014624:	6833      	ldr	r3, [r6, #0]
 8014626:	1d1a      	adds	r2, r3, #4
 8014628:	6032      	str	r2, [r6, #0]
 801462a:	681e      	ldr	r6, [r3, #0]
 801462c:	6862      	ldr	r2, [r4, #4]
 801462e:	2100      	movs	r1, #0
 8014630:	4630      	mov	r0, r6
 8014632:	f7eb fdf5 	bl	8000220 <memchr>
 8014636:	b108      	cbz	r0, 801463c <_printf_i+0x1e4>
 8014638:	1b80      	subs	r0, r0, r6
 801463a:	6060      	str	r0, [r4, #4]
 801463c:	6863      	ldr	r3, [r4, #4]
 801463e:	6123      	str	r3, [r4, #16]
 8014640:	2300      	movs	r3, #0
 8014642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014646:	e7aa      	b.n	801459e <_printf_i+0x146>
 8014648:	6923      	ldr	r3, [r4, #16]
 801464a:	4632      	mov	r2, r6
 801464c:	4649      	mov	r1, r9
 801464e:	4640      	mov	r0, r8
 8014650:	47d0      	blx	sl
 8014652:	3001      	adds	r0, #1
 8014654:	d0ad      	beq.n	80145b2 <_printf_i+0x15a>
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	079b      	lsls	r3, r3, #30
 801465a:	d413      	bmi.n	8014684 <_printf_i+0x22c>
 801465c:	68e0      	ldr	r0, [r4, #12]
 801465e:	9b03      	ldr	r3, [sp, #12]
 8014660:	4298      	cmp	r0, r3
 8014662:	bfb8      	it	lt
 8014664:	4618      	movlt	r0, r3
 8014666:	e7a6      	b.n	80145b6 <_printf_i+0x15e>
 8014668:	2301      	movs	r3, #1
 801466a:	4632      	mov	r2, r6
 801466c:	4649      	mov	r1, r9
 801466e:	4640      	mov	r0, r8
 8014670:	47d0      	blx	sl
 8014672:	3001      	adds	r0, #1
 8014674:	d09d      	beq.n	80145b2 <_printf_i+0x15a>
 8014676:	3501      	adds	r5, #1
 8014678:	68e3      	ldr	r3, [r4, #12]
 801467a:	9903      	ldr	r1, [sp, #12]
 801467c:	1a5b      	subs	r3, r3, r1
 801467e:	42ab      	cmp	r3, r5
 8014680:	dcf2      	bgt.n	8014668 <_printf_i+0x210>
 8014682:	e7eb      	b.n	801465c <_printf_i+0x204>
 8014684:	2500      	movs	r5, #0
 8014686:	f104 0619 	add.w	r6, r4, #25
 801468a:	e7f5      	b.n	8014678 <_printf_i+0x220>
 801468c:	0801bb7a 	.word	0x0801bb7a
 8014690:	0801bb8b 	.word	0x0801bb8b

08014694 <_scanf_float>:
 8014694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014698:	b087      	sub	sp, #28
 801469a:	4691      	mov	r9, r2
 801469c:	9303      	str	r3, [sp, #12]
 801469e:	688b      	ldr	r3, [r1, #8]
 80146a0:	1e5a      	subs	r2, r3, #1
 80146a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80146a6:	bf81      	itttt	hi
 80146a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80146ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80146b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80146b4:	608b      	strhi	r3, [r1, #8]
 80146b6:	680b      	ldr	r3, [r1, #0]
 80146b8:	460a      	mov	r2, r1
 80146ba:	f04f 0500 	mov.w	r5, #0
 80146be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80146c2:	f842 3b1c 	str.w	r3, [r2], #28
 80146c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80146ca:	4680      	mov	r8, r0
 80146cc:	460c      	mov	r4, r1
 80146ce:	bf98      	it	ls
 80146d0:	f04f 0b00 	movls.w	fp, #0
 80146d4:	9201      	str	r2, [sp, #4]
 80146d6:	4616      	mov	r6, r2
 80146d8:	46aa      	mov	sl, r5
 80146da:	462f      	mov	r7, r5
 80146dc:	9502      	str	r5, [sp, #8]
 80146de:	68a2      	ldr	r2, [r4, #8]
 80146e0:	b15a      	cbz	r2, 80146fa <_scanf_float+0x66>
 80146e2:	f8d9 3000 	ldr.w	r3, [r9]
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80146ea:	d863      	bhi.n	80147b4 <_scanf_float+0x120>
 80146ec:	2b40      	cmp	r3, #64	@ 0x40
 80146ee:	d83b      	bhi.n	8014768 <_scanf_float+0xd4>
 80146f0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80146f4:	b2c8      	uxtb	r0, r1
 80146f6:	280e      	cmp	r0, #14
 80146f8:	d939      	bls.n	801476e <_scanf_float+0xda>
 80146fa:	b11f      	cbz	r7, 8014704 <_scanf_float+0x70>
 80146fc:	6823      	ldr	r3, [r4, #0]
 80146fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014702:	6023      	str	r3, [r4, #0]
 8014704:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014708:	f1ba 0f01 	cmp.w	sl, #1
 801470c:	f200 8114 	bhi.w	8014938 <_scanf_float+0x2a4>
 8014710:	9b01      	ldr	r3, [sp, #4]
 8014712:	429e      	cmp	r6, r3
 8014714:	f200 8105 	bhi.w	8014922 <_scanf_float+0x28e>
 8014718:	2001      	movs	r0, #1
 801471a:	b007      	add	sp, #28
 801471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014720:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014724:	2a0d      	cmp	r2, #13
 8014726:	d8e8      	bhi.n	80146fa <_scanf_float+0x66>
 8014728:	a101      	add	r1, pc, #4	@ (adr r1, 8014730 <_scanf_float+0x9c>)
 801472a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801472e:	bf00      	nop
 8014730:	08014879 	.word	0x08014879
 8014734:	080146fb 	.word	0x080146fb
 8014738:	080146fb 	.word	0x080146fb
 801473c:	080146fb 	.word	0x080146fb
 8014740:	080148d5 	.word	0x080148d5
 8014744:	080148af 	.word	0x080148af
 8014748:	080146fb 	.word	0x080146fb
 801474c:	080146fb 	.word	0x080146fb
 8014750:	08014887 	.word	0x08014887
 8014754:	080146fb 	.word	0x080146fb
 8014758:	080146fb 	.word	0x080146fb
 801475c:	080146fb 	.word	0x080146fb
 8014760:	080146fb 	.word	0x080146fb
 8014764:	08014843 	.word	0x08014843
 8014768:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801476c:	e7da      	b.n	8014724 <_scanf_float+0x90>
 801476e:	290e      	cmp	r1, #14
 8014770:	d8c3      	bhi.n	80146fa <_scanf_float+0x66>
 8014772:	a001      	add	r0, pc, #4	@ (adr r0, 8014778 <_scanf_float+0xe4>)
 8014774:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014778:	08014833 	.word	0x08014833
 801477c:	080146fb 	.word	0x080146fb
 8014780:	08014833 	.word	0x08014833
 8014784:	080148c3 	.word	0x080148c3
 8014788:	080146fb 	.word	0x080146fb
 801478c:	080147d5 	.word	0x080147d5
 8014790:	08014819 	.word	0x08014819
 8014794:	08014819 	.word	0x08014819
 8014798:	08014819 	.word	0x08014819
 801479c:	08014819 	.word	0x08014819
 80147a0:	08014819 	.word	0x08014819
 80147a4:	08014819 	.word	0x08014819
 80147a8:	08014819 	.word	0x08014819
 80147ac:	08014819 	.word	0x08014819
 80147b0:	08014819 	.word	0x08014819
 80147b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80147b6:	d809      	bhi.n	80147cc <_scanf_float+0x138>
 80147b8:	2b60      	cmp	r3, #96	@ 0x60
 80147ba:	d8b1      	bhi.n	8014720 <_scanf_float+0x8c>
 80147bc:	2b54      	cmp	r3, #84	@ 0x54
 80147be:	d07b      	beq.n	80148b8 <_scanf_float+0x224>
 80147c0:	2b59      	cmp	r3, #89	@ 0x59
 80147c2:	d19a      	bne.n	80146fa <_scanf_float+0x66>
 80147c4:	2d07      	cmp	r5, #7
 80147c6:	d198      	bne.n	80146fa <_scanf_float+0x66>
 80147c8:	2508      	movs	r5, #8
 80147ca:	e02f      	b.n	801482c <_scanf_float+0x198>
 80147cc:	2b74      	cmp	r3, #116	@ 0x74
 80147ce:	d073      	beq.n	80148b8 <_scanf_float+0x224>
 80147d0:	2b79      	cmp	r3, #121	@ 0x79
 80147d2:	e7f6      	b.n	80147c2 <_scanf_float+0x12e>
 80147d4:	6821      	ldr	r1, [r4, #0]
 80147d6:	05c8      	lsls	r0, r1, #23
 80147d8:	d51e      	bpl.n	8014818 <_scanf_float+0x184>
 80147da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80147de:	6021      	str	r1, [r4, #0]
 80147e0:	3701      	adds	r7, #1
 80147e2:	f1bb 0f00 	cmp.w	fp, #0
 80147e6:	d003      	beq.n	80147f0 <_scanf_float+0x15c>
 80147e8:	3201      	adds	r2, #1
 80147ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80147ee:	60a2      	str	r2, [r4, #8]
 80147f0:	68a3      	ldr	r3, [r4, #8]
 80147f2:	3b01      	subs	r3, #1
 80147f4:	60a3      	str	r3, [r4, #8]
 80147f6:	6923      	ldr	r3, [r4, #16]
 80147f8:	3301      	adds	r3, #1
 80147fa:	6123      	str	r3, [r4, #16]
 80147fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014800:	3b01      	subs	r3, #1
 8014802:	2b00      	cmp	r3, #0
 8014804:	f8c9 3004 	str.w	r3, [r9, #4]
 8014808:	f340 8082 	ble.w	8014910 <_scanf_float+0x27c>
 801480c:	f8d9 3000 	ldr.w	r3, [r9]
 8014810:	3301      	adds	r3, #1
 8014812:	f8c9 3000 	str.w	r3, [r9]
 8014816:	e762      	b.n	80146de <_scanf_float+0x4a>
 8014818:	eb1a 0105 	adds.w	r1, sl, r5
 801481c:	f47f af6d 	bne.w	80146fa <_scanf_float+0x66>
 8014820:	6822      	ldr	r2, [r4, #0]
 8014822:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014826:	6022      	str	r2, [r4, #0]
 8014828:	460d      	mov	r5, r1
 801482a:	468a      	mov	sl, r1
 801482c:	f806 3b01 	strb.w	r3, [r6], #1
 8014830:	e7de      	b.n	80147f0 <_scanf_float+0x15c>
 8014832:	6822      	ldr	r2, [r4, #0]
 8014834:	0610      	lsls	r0, r2, #24
 8014836:	f57f af60 	bpl.w	80146fa <_scanf_float+0x66>
 801483a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801483e:	6022      	str	r2, [r4, #0]
 8014840:	e7f4      	b.n	801482c <_scanf_float+0x198>
 8014842:	f1ba 0f00 	cmp.w	sl, #0
 8014846:	d10c      	bne.n	8014862 <_scanf_float+0x1ce>
 8014848:	b977      	cbnz	r7, 8014868 <_scanf_float+0x1d4>
 801484a:	6822      	ldr	r2, [r4, #0]
 801484c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014850:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014854:	d108      	bne.n	8014868 <_scanf_float+0x1d4>
 8014856:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801485a:	6022      	str	r2, [r4, #0]
 801485c:	f04f 0a01 	mov.w	sl, #1
 8014860:	e7e4      	b.n	801482c <_scanf_float+0x198>
 8014862:	f1ba 0f02 	cmp.w	sl, #2
 8014866:	d050      	beq.n	801490a <_scanf_float+0x276>
 8014868:	2d01      	cmp	r5, #1
 801486a:	d002      	beq.n	8014872 <_scanf_float+0x1de>
 801486c:	2d04      	cmp	r5, #4
 801486e:	f47f af44 	bne.w	80146fa <_scanf_float+0x66>
 8014872:	3501      	adds	r5, #1
 8014874:	b2ed      	uxtb	r5, r5
 8014876:	e7d9      	b.n	801482c <_scanf_float+0x198>
 8014878:	f1ba 0f01 	cmp.w	sl, #1
 801487c:	f47f af3d 	bne.w	80146fa <_scanf_float+0x66>
 8014880:	f04f 0a02 	mov.w	sl, #2
 8014884:	e7d2      	b.n	801482c <_scanf_float+0x198>
 8014886:	b975      	cbnz	r5, 80148a6 <_scanf_float+0x212>
 8014888:	2f00      	cmp	r7, #0
 801488a:	f47f af37 	bne.w	80146fc <_scanf_float+0x68>
 801488e:	6822      	ldr	r2, [r4, #0]
 8014890:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014894:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014898:	f040 8103 	bne.w	8014aa2 <_scanf_float+0x40e>
 801489c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80148a0:	6022      	str	r2, [r4, #0]
 80148a2:	2501      	movs	r5, #1
 80148a4:	e7c2      	b.n	801482c <_scanf_float+0x198>
 80148a6:	2d03      	cmp	r5, #3
 80148a8:	d0e3      	beq.n	8014872 <_scanf_float+0x1de>
 80148aa:	2d05      	cmp	r5, #5
 80148ac:	e7df      	b.n	801486e <_scanf_float+0x1da>
 80148ae:	2d02      	cmp	r5, #2
 80148b0:	f47f af23 	bne.w	80146fa <_scanf_float+0x66>
 80148b4:	2503      	movs	r5, #3
 80148b6:	e7b9      	b.n	801482c <_scanf_float+0x198>
 80148b8:	2d06      	cmp	r5, #6
 80148ba:	f47f af1e 	bne.w	80146fa <_scanf_float+0x66>
 80148be:	2507      	movs	r5, #7
 80148c0:	e7b4      	b.n	801482c <_scanf_float+0x198>
 80148c2:	6822      	ldr	r2, [r4, #0]
 80148c4:	0591      	lsls	r1, r2, #22
 80148c6:	f57f af18 	bpl.w	80146fa <_scanf_float+0x66>
 80148ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80148ce:	6022      	str	r2, [r4, #0]
 80148d0:	9702      	str	r7, [sp, #8]
 80148d2:	e7ab      	b.n	801482c <_scanf_float+0x198>
 80148d4:	6822      	ldr	r2, [r4, #0]
 80148d6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80148da:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80148de:	d005      	beq.n	80148ec <_scanf_float+0x258>
 80148e0:	0550      	lsls	r0, r2, #21
 80148e2:	f57f af0a 	bpl.w	80146fa <_scanf_float+0x66>
 80148e6:	2f00      	cmp	r7, #0
 80148e8:	f000 80db 	beq.w	8014aa2 <_scanf_float+0x40e>
 80148ec:	0591      	lsls	r1, r2, #22
 80148ee:	bf58      	it	pl
 80148f0:	9902      	ldrpl	r1, [sp, #8]
 80148f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80148f6:	bf58      	it	pl
 80148f8:	1a79      	subpl	r1, r7, r1
 80148fa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80148fe:	bf58      	it	pl
 8014900:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014904:	6022      	str	r2, [r4, #0]
 8014906:	2700      	movs	r7, #0
 8014908:	e790      	b.n	801482c <_scanf_float+0x198>
 801490a:	f04f 0a03 	mov.w	sl, #3
 801490e:	e78d      	b.n	801482c <_scanf_float+0x198>
 8014910:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014914:	4649      	mov	r1, r9
 8014916:	4640      	mov	r0, r8
 8014918:	4798      	blx	r3
 801491a:	2800      	cmp	r0, #0
 801491c:	f43f aedf 	beq.w	80146de <_scanf_float+0x4a>
 8014920:	e6eb      	b.n	80146fa <_scanf_float+0x66>
 8014922:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014926:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801492a:	464a      	mov	r2, r9
 801492c:	4640      	mov	r0, r8
 801492e:	4798      	blx	r3
 8014930:	6923      	ldr	r3, [r4, #16]
 8014932:	3b01      	subs	r3, #1
 8014934:	6123      	str	r3, [r4, #16]
 8014936:	e6eb      	b.n	8014710 <_scanf_float+0x7c>
 8014938:	1e6b      	subs	r3, r5, #1
 801493a:	2b06      	cmp	r3, #6
 801493c:	d824      	bhi.n	8014988 <_scanf_float+0x2f4>
 801493e:	2d02      	cmp	r5, #2
 8014940:	d836      	bhi.n	80149b0 <_scanf_float+0x31c>
 8014942:	9b01      	ldr	r3, [sp, #4]
 8014944:	429e      	cmp	r6, r3
 8014946:	f67f aee7 	bls.w	8014718 <_scanf_float+0x84>
 801494a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801494e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014952:	464a      	mov	r2, r9
 8014954:	4640      	mov	r0, r8
 8014956:	4798      	blx	r3
 8014958:	6923      	ldr	r3, [r4, #16]
 801495a:	3b01      	subs	r3, #1
 801495c:	6123      	str	r3, [r4, #16]
 801495e:	e7f0      	b.n	8014942 <_scanf_float+0x2ae>
 8014960:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014964:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014968:	464a      	mov	r2, r9
 801496a:	4640      	mov	r0, r8
 801496c:	4798      	blx	r3
 801496e:	6923      	ldr	r3, [r4, #16]
 8014970:	3b01      	subs	r3, #1
 8014972:	6123      	str	r3, [r4, #16]
 8014974:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014978:	fa5f fa8a 	uxtb.w	sl, sl
 801497c:	f1ba 0f02 	cmp.w	sl, #2
 8014980:	d1ee      	bne.n	8014960 <_scanf_float+0x2cc>
 8014982:	3d03      	subs	r5, #3
 8014984:	b2ed      	uxtb	r5, r5
 8014986:	1b76      	subs	r6, r6, r5
 8014988:	6823      	ldr	r3, [r4, #0]
 801498a:	05da      	lsls	r2, r3, #23
 801498c:	d530      	bpl.n	80149f0 <_scanf_float+0x35c>
 801498e:	055b      	lsls	r3, r3, #21
 8014990:	d511      	bpl.n	80149b6 <_scanf_float+0x322>
 8014992:	9b01      	ldr	r3, [sp, #4]
 8014994:	429e      	cmp	r6, r3
 8014996:	f67f aebf 	bls.w	8014718 <_scanf_float+0x84>
 801499a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801499e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80149a2:	464a      	mov	r2, r9
 80149a4:	4640      	mov	r0, r8
 80149a6:	4798      	blx	r3
 80149a8:	6923      	ldr	r3, [r4, #16]
 80149aa:	3b01      	subs	r3, #1
 80149ac:	6123      	str	r3, [r4, #16]
 80149ae:	e7f0      	b.n	8014992 <_scanf_float+0x2fe>
 80149b0:	46aa      	mov	sl, r5
 80149b2:	46b3      	mov	fp, r6
 80149b4:	e7de      	b.n	8014974 <_scanf_float+0x2e0>
 80149b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80149ba:	6923      	ldr	r3, [r4, #16]
 80149bc:	2965      	cmp	r1, #101	@ 0x65
 80149be:	f103 33ff 	add.w	r3, r3, #4294967295
 80149c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80149c6:	6123      	str	r3, [r4, #16]
 80149c8:	d00c      	beq.n	80149e4 <_scanf_float+0x350>
 80149ca:	2945      	cmp	r1, #69	@ 0x45
 80149cc:	d00a      	beq.n	80149e4 <_scanf_float+0x350>
 80149ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80149d2:	464a      	mov	r2, r9
 80149d4:	4640      	mov	r0, r8
 80149d6:	4798      	blx	r3
 80149d8:	6923      	ldr	r3, [r4, #16]
 80149da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80149de:	3b01      	subs	r3, #1
 80149e0:	1eb5      	subs	r5, r6, #2
 80149e2:	6123      	str	r3, [r4, #16]
 80149e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80149e8:	464a      	mov	r2, r9
 80149ea:	4640      	mov	r0, r8
 80149ec:	4798      	blx	r3
 80149ee:	462e      	mov	r6, r5
 80149f0:	6822      	ldr	r2, [r4, #0]
 80149f2:	f012 0210 	ands.w	r2, r2, #16
 80149f6:	d001      	beq.n	80149fc <_scanf_float+0x368>
 80149f8:	2000      	movs	r0, #0
 80149fa:	e68e      	b.n	801471a <_scanf_float+0x86>
 80149fc:	7032      	strb	r2, [r6, #0]
 80149fe:	6823      	ldr	r3, [r4, #0]
 8014a00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014a08:	d125      	bne.n	8014a56 <_scanf_float+0x3c2>
 8014a0a:	9b02      	ldr	r3, [sp, #8]
 8014a0c:	429f      	cmp	r7, r3
 8014a0e:	d00a      	beq.n	8014a26 <_scanf_float+0x392>
 8014a10:	1bda      	subs	r2, r3, r7
 8014a12:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014a16:	429e      	cmp	r6, r3
 8014a18:	bf28      	it	cs
 8014a1a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014a1e:	4922      	ldr	r1, [pc, #136]	@ (8014aa8 <_scanf_float+0x414>)
 8014a20:	4630      	mov	r0, r6
 8014a22:	f000 f99b 	bl	8014d5c <siprintf>
 8014a26:	9901      	ldr	r1, [sp, #4]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	4640      	mov	r0, r8
 8014a2c:	f002 fd28 	bl	8017480 <_strtod_r>
 8014a30:	9b03      	ldr	r3, [sp, #12]
 8014a32:	6821      	ldr	r1, [r4, #0]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	f011 0f02 	tst.w	r1, #2
 8014a3a:	ec57 6b10 	vmov	r6, r7, d0
 8014a3e:	f103 0204 	add.w	r2, r3, #4
 8014a42:	d015      	beq.n	8014a70 <_scanf_float+0x3dc>
 8014a44:	9903      	ldr	r1, [sp, #12]
 8014a46:	600a      	str	r2, [r1, #0]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	e9c3 6700 	strd	r6, r7, [r3]
 8014a4e:	68e3      	ldr	r3, [r4, #12]
 8014a50:	3301      	adds	r3, #1
 8014a52:	60e3      	str	r3, [r4, #12]
 8014a54:	e7d0      	b.n	80149f8 <_scanf_float+0x364>
 8014a56:	9b04      	ldr	r3, [sp, #16]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d0e4      	beq.n	8014a26 <_scanf_float+0x392>
 8014a5c:	9905      	ldr	r1, [sp, #20]
 8014a5e:	230a      	movs	r3, #10
 8014a60:	3101      	adds	r1, #1
 8014a62:	4640      	mov	r0, r8
 8014a64:	f002 fd8c 	bl	8017580 <_strtol_r>
 8014a68:	9b04      	ldr	r3, [sp, #16]
 8014a6a:	9e05      	ldr	r6, [sp, #20]
 8014a6c:	1ac2      	subs	r2, r0, r3
 8014a6e:	e7d0      	b.n	8014a12 <_scanf_float+0x37e>
 8014a70:	f011 0f04 	tst.w	r1, #4
 8014a74:	9903      	ldr	r1, [sp, #12]
 8014a76:	600a      	str	r2, [r1, #0]
 8014a78:	d1e6      	bne.n	8014a48 <_scanf_float+0x3b4>
 8014a7a:	681d      	ldr	r5, [r3, #0]
 8014a7c:	4632      	mov	r2, r6
 8014a7e:	463b      	mov	r3, r7
 8014a80:	4630      	mov	r0, r6
 8014a82:	4639      	mov	r1, r7
 8014a84:	f7ec f87a 	bl	8000b7c <__aeabi_dcmpun>
 8014a88:	b128      	cbz	r0, 8014a96 <_scanf_float+0x402>
 8014a8a:	4808      	ldr	r0, [pc, #32]	@ (8014aac <_scanf_float+0x418>)
 8014a8c:	f000 faee 	bl	801506c <nanf>
 8014a90:	ed85 0a00 	vstr	s0, [r5]
 8014a94:	e7db      	b.n	8014a4e <_scanf_float+0x3ba>
 8014a96:	4630      	mov	r0, r6
 8014a98:	4639      	mov	r1, r7
 8014a9a:	f7ec f8cd 	bl	8000c38 <__aeabi_d2f>
 8014a9e:	6028      	str	r0, [r5, #0]
 8014aa0:	e7d5      	b.n	8014a4e <_scanf_float+0x3ba>
 8014aa2:	2700      	movs	r7, #0
 8014aa4:	e62e      	b.n	8014704 <_scanf_float+0x70>
 8014aa6:	bf00      	nop
 8014aa8:	0801bb9c 	.word	0x0801bb9c
 8014aac:	0801bcdd 	.word	0x0801bcdd

08014ab0 <std>:
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	b510      	push	{r4, lr}
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8014aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014abe:	6083      	str	r3, [r0, #8]
 8014ac0:	8181      	strh	r1, [r0, #12]
 8014ac2:	6643      	str	r3, [r0, #100]	@ 0x64
 8014ac4:	81c2      	strh	r2, [r0, #14]
 8014ac6:	6183      	str	r3, [r0, #24]
 8014ac8:	4619      	mov	r1, r3
 8014aca:	2208      	movs	r2, #8
 8014acc:	305c      	adds	r0, #92	@ 0x5c
 8014ace:	f000 fa3f 	bl	8014f50 <memset>
 8014ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8014b08 <std+0x58>)
 8014ad4:	6263      	str	r3, [r4, #36]	@ 0x24
 8014ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8014b0c <std+0x5c>)
 8014ad8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014ada:	4b0d      	ldr	r3, [pc, #52]	@ (8014b10 <std+0x60>)
 8014adc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014ade:	4b0d      	ldr	r3, [pc, #52]	@ (8014b14 <std+0x64>)
 8014ae0:	6323      	str	r3, [r4, #48]	@ 0x30
 8014ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8014b18 <std+0x68>)
 8014ae4:	6224      	str	r4, [r4, #32]
 8014ae6:	429c      	cmp	r4, r3
 8014ae8:	d006      	beq.n	8014af8 <std+0x48>
 8014aea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014aee:	4294      	cmp	r4, r2
 8014af0:	d002      	beq.n	8014af8 <std+0x48>
 8014af2:	33d0      	adds	r3, #208	@ 0xd0
 8014af4:	429c      	cmp	r4, r3
 8014af6:	d105      	bne.n	8014b04 <std+0x54>
 8014af8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b00:	f000 baa2 	b.w	8015048 <__retarget_lock_init_recursive>
 8014b04:	bd10      	pop	{r4, pc}
 8014b06:	bf00      	nop
 8014b08:	08014da1 	.word	0x08014da1
 8014b0c:	08014dc3 	.word	0x08014dc3
 8014b10:	08014dfb 	.word	0x08014dfb
 8014b14:	08014e1f 	.word	0x08014e1f
 8014b18:	20003f7c 	.word	0x20003f7c

08014b1c <stdio_exit_handler>:
 8014b1c:	4a02      	ldr	r2, [pc, #8]	@ (8014b28 <stdio_exit_handler+0xc>)
 8014b1e:	4903      	ldr	r1, [pc, #12]	@ (8014b2c <stdio_exit_handler+0x10>)
 8014b20:	4803      	ldr	r0, [pc, #12]	@ (8014b30 <stdio_exit_handler+0x14>)
 8014b22:	f000 b869 	b.w	8014bf8 <_fwalk_sglue>
 8014b26:	bf00      	nop
 8014b28:	20000048 	.word	0x20000048
 8014b2c:	0801793d 	.word	0x0801793d
 8014b30:	20000058 	.word	0x20000058

08014b34 <cleanup_stdio>:
 8014b34:	6841      	ldr	r1, [r0, #4]
 8014b36:	4b0c      	ldr	r3, [pc, #48]	@ (8014b68 <cleanup_stdio+0x34>)
 8014b38:	4299      	cmp	r1, r3
 8014b3a:	b510      	push	{r4, lr}
 8014b3c:	4604      	mov	r4, r0
 8014b3e:	d001      	beq.n	8014b44 <cleanup_stdio+0x10>
 8014b40:	f002 fefc 	bl	801793c <_fflush_r>
 8014b44:	68a1      	ldr	r1, [r4, #8]
 8014b46:	4b09      	ldr	r3, [pc, #36]	@ (8014b6c <cleanup_stdio+0x38>)
 8014b48:	4299      	cmp	r1, r3
 8014b4a:	d002      	beq.n	8014b52 <cleanup_stdio+0x1e>
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	f002 fef5 	bl	801793c <_fflush_r>
 8014b52:	68e1      	ldr	r1, [r4, #12]
 8014b54:	4b06      	ldr	r3, [pc, #24]	@ (8014b70 <cleanup_stdio+0x3c>)
 8014b56:	4299      	cmp	r1, r3
 8014b58:	d004      	beq.n	8014b64 <cleanup_stdio+0x30>
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b60:	f002 beec 	b.w	801793c <_fflush_r>
 8014b64:	bd10      	pop	{r4, pc}
 8014b66:	bf00      	nop
 8014b68:	20003f7c 	.word	0x20003f7c
 8014b6c:	20003fe4 	.word	0x20003fe4
 8014b70:	2000404c 	.word	0x2000404c

08014b74 <global_stdio_init.part.0>:
 8014b74:	b510      	push	{r4, lr}
 8014b76:	4b0b      	ldr	r3, [pc, #44]	@ (8014ba4 <global_stdio_init.part.0+0x30>)
 8014b78:	4c0b      	ldr	r4, [pc, #44]	@ (8014ba8 <global_stdio_init.part.0+0x34>)
 8014b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8014bac <global_stdio_init.part.0+0x38>)
 8014b7c:	601a      	str	r2, [r3, #0]
 8014b7e:	4620      	mov	r0, r4
 8014b80:	2200      	movs	r2, #0
 8014b82:	2104      	movs	r1, #4
 8014b84:	f7ff ff94 	bl	8014ab0 <std>
 8014b88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014b8c:	2201      	movs	r2, #1
 8014b8e:	2109      	movs	r1, #9
 8014b90:	f7ff ff8e 	bl	8014ab0 <std>
 8014b94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014b98:	2202      	movs	r2, #2
 8014b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b9e:	2112      	movs	r1, #18
 8014ba0:	f7ff bf86 	b.w	8014ab0 <std>
 8014ba4:	200040b4 	.word	0x200040b4
 8014ba8:	20003f7c 	.word	0x20003f7c
 8014bac:	08014b1d 	.word	0x08014b1d

08014bb0 <__sfp_lock_acquire>:
 8014bb0:	4801      	ldr	r0, [pc, #4]	@ (8014bb8 <__sfp_lock_acquire+0x8>)
 8014bb2:	f000 ba4a 	b.w	801504a <__retarget_lock_acquire_recursive>
 8014bb6:	bf00      	nop
 8014bb8:	200040bd 	.word	0x200040bd

08014bbc <__sfp_lock_release>:
 8014bbc:	4801      	ldr	r0, [pc, #4]	@ (8014bc4 <__sfp_lock_release+0x8>)
 8014bbe:	f000 ba45 	b.w	801504c <__retarget_lock_release_recursive>
 8014bc2:	bf00      	nop
 8014bc4:	200040bd 	.word	0x200040bd

08014bc8 <__sinit>:
 8014bc8:	b510      	push	{r4, lr}
 8014bca:	4604      	mov	r4, r0
 8014bcc:	f7ff fff0 	bl	8014bb0 <__sfp_lock_acquire>
 8014bd0:	6a23      	ldr	r3, [r4, #32]
 8014bd2:	b11b      	cbz	r3, 8014bdc <__sinit+0x14>
 8014bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bd8:	f7ff bff0 	b.w	8014bbc <__sfp_lock_release>
 8014bdc:	4b04      	ldr	r3, [pc, #16]	@ (8014bf0 <__sinit+0x28>)
 8014bde:	6223      	str	r3, [r4, #32]
 8014be0:	4b04      	ldr	r3, [pc, #16]	@ (8014bf4 <__sinit+0x2c>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d1f5      	bne.n	8014bd4 <__sinit+0xc>
 8014be8:	f7ff ffc4 	bl	8014b74 <global_stdio_init.part.0>
 8014bec:	e7f2      	b.n	8014bd4 <__sinit+0xc>
 8014bee:	bf00      	nop
 8014bf0:	08014b35 	.word	0x08014b35
 8014bf4:	200040b4 	.word	0x200040b4

08014bf8 <_fwalk_sglue>:
 8014bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bfc:	4607      	mov	r7, r0
 8014bfe:	4688      	mov	r8, r1
 8014c00:	4614      	mov	r4, r2
 8014c02:	2600      	movs	r6, #0
 8014c04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014c08:	f1b9 0901 	subs.w	r9, r9, #1
 8014c0c:	d505      	bpl.n	8014c1a <_fwalk_sglue+0x22>
 8014c0e:	6824      	ldr	r4, [r4, #0]
 8014c10:	2c00      	cmp	r4, #0
 8014c12:	d1f7      	bne.n	8014c04 <_fwalk_sglue+0xc>
 8014c14:	4630      	mov	r0, r6
 8014c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c1a:	89ab      	ldrh	r3, [r5, #12]
 8014c1c:	2b01      	cmp	r3, #1
 8014c1e:	d907      	bls.n	8014c30 <_fwalk_sglue+0x38>
 8014c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c24:	3301      	adds	r3, #1
 8014c26:	d003      	beq.n	8014c30 <_fwalk_sglue+0x38>
 8014c28:	4629      	mov	r1, r5
 8014c2a:	4638      	mov	r0, r7
 8014c2c:	47c0      	blx	r8
 8014c2e:	4306      	orrs	r6, r0
 8014c30:	3568      	adds	r5, #104	@ 0x68
 8014c32:	e7e9      	b.n	8014c08 <_fwalk_sglue+0x10>

08014c34 <_puts_r>:
 8014c34:	6a03      	ldr	r3, [r0, #32]
 8014c36:	b570      	push	{r4, r5, r6, lr}
 8014c38:	6884      	ldr	r4, [r0, #8]
 8014c3a:	4605      	mov	r5, r0
 8014c3c:	460e      	mov	r6, r1
 8014c3e:	b90b      	cbnz	r3, 8014c44 <_puts_r+0x10>
 8014c40:	f7ff ffc2 	bl	8014bc8 <__sinit>
 8014c44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014c46:	07db      	lsls	r3, r3, #31
 8014c48:	d405      	bmi.n	8014c56 <_puts_r+0x22>
 8014c4a:	89a3      	ldrh	r3, [r4, #12]
 8014c4c:	0598      	lsls	r0, r3, #22
 8014c4e:	d402      	bmi.n	8014c56 <_puts_r+0x22>
 8014c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c52:	f000 f9fa 	bl	801504a <__retarget_lock_acquire_recursive>
 8014c56:	89a3      	ldrh	r3, [r4, #12]
 8014c58:	0719      	lsls	r1, r3, #28
 8014c5a:	d502      	bpl.n	8014c62 <_puts_r+0x2e>
 8014c5c:	6923      	ldr	r3, [r4, #16]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d135      	bne.n	8014cce <_puts_r+0x9a>
 8014c62:	4621      	mov	r1, r4
 8014c64:	4628      	mov	r0, r5
 8014c66:	f000 f91d 	bl	8014ea4 <__swsetup_r>
 8014c6a:	b380      	cbz	r0, 8014cce <_puts_r+0x9a>
 8014c6c:	f04f 35ff 	mov.w	r5, #4294967295
 8014c70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014c72:	07da      	lsls	r2, r3, #31
 8014c74:	d405      	bmi.n	8014c82 <_puts_r+0x4e>
 8014c76:	89a3      	ldrh	r3, [r4, #12]
 8014c78:	059b      	lsls	r3, r3, #22
 8014c7a:	d402      	bmi.n	8014c82 <_puts_r+0x4e>
 8014c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c7e:	f000 f9e5 	bl	801504c <__retarget_lock_release_recursive>
 8014c82:	4628      	mov	r0, r5
 8014c84:	bd70      	pop	{r4, r5, r6, pc}
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	da04      	bge.n	8014c94 <_puts_r+0x60>
 8014c8a:	69a2      	ldr	r2, [r4, #24]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	dc17      	bgt.n	8014cc0 <_puts_r+0x8c>
 8014c90:	290a      	cmp	r1, #10
 8014c92:	d015      	beq.n	8014cc0 <_puts_r+0x8c>
 8014c94:	6823      	ldr	r3, [r4, #0]
 8014c96:	1c5a      	adds	r2, r3, #1
 8014c98:	6022      	str	r2, [r4, #0]
 8014c9a:	7019      	strb	r1, [r3, #0]
 8014c9c:	68a3      	ldr	r3, [r4, #8]
 8014c9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014ca2:	3b01      	subs	r3, #1
 8014ca4:	60a3      	str	r3, [r4, #8]
 8014ca6:	2900      	cmp	r1, #0
 8014ca8:	d1ed      	bne.n	8014c86 <_puts_r+0x52>
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	da11      	bge.n	8014cd2 <_puts_r+0x9e>
 8014cae:	4622      	mov	r2, r4
 8014cb0:	210a      	movs	r1, #10
 8014cb2:	4628      	mov	r0, r5
 8014cb4:	f000 f8b7 	bl	8014e26 <__swbuf_r>
 8014cb8:	3001      	adds	r0, #1
 8014cba:	d0d7      	beq.n	8014c6c <_puts_r+0x38>
 8014cbc:	250a      	movs	r5, #10
 8014cbe:	e7d7      	b.n	8014c70 <_puts_r+0x3c>
 8014cc0:	4622      	mov	r2, r4
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	f000 f8af 	bl	8014e26 <__swbuf_r>
 8014cc8:	3001      	adds	r0, #1
 8014cca:	d1e7      	bne.n	8014c9c <_puts_r+0x68>
 8014ccc:	e7ce      	b.n	8014c6c <_puts_r+0x38>
 8014cce:	3e01      	subs	r6, #1
 8014cd0:	e7e4      	b.n	8014c9c <_puts_r+0x68>
 8014cd2:	6823      	ldr	r3, [r4, #0]
 8014cd4:	1c5a      	adds	r2, r3, #1
 8014cd6:	6022      	str	r2, [r4, #0]
 8014cd8:	220a      	movs	r2, #10
 8014cda:	701a      	strb	r2, [r3, #0]
 8014cdc:	e7ee      	b.n	8014cbc <_puts_r+0x88>
	...

08014ce0 <puts>:
 8014ce0:	4b02      	ldr	r3, [pc, #8]	@ (8014cec <puts+0xc>)
 8014ce2:	4601      	mov	r1, r0
 8014ce4:	6818      	ldr	r0, [r3, #0]
 8014ce6:	f7ff bfa5 	b.w	8014c34 <_puts_r>
 8014cea:	bf00      	nop
 8014cec:	20000054 	.word	0x20000054

08014cf0 <sniprintf>:
 8014cf0:	b40c      	push	{r2, r3}
 8014cf2:	b530      	push	{r4, r5, lr}
 8014cf4:	4b18      	ldr	r3, [pc, #96]	@ (8014d58 <sniprintf+0x68>)
 8014cf6:	1e0c      	subs	r4, r1, #0
 8014cf8:	681d      	ldr	r5, [r3, #0]
 8014cfa:	b09d      	sub	sp, #116	@ 0x74
 8014cfc:	da08      	bge.n	8014d10 <sniprintf+0x20>
 8014cfe:	238b      	movs	r3, #139	@ 0x8b
 8014d00:	602b      	str	r3, [r5, #0]
 8014d02:	f04f 30ff 	mov.w	r0, #4294967295
 8014d06:	b01d      	add	sp, #116	@ 0x74
 8014d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d0c:	b002      	add	sp, #8
 8014d0e:	4770      	bx	lr
 8014d10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014d14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014d18:	f04f 0300 	mov.w	r3, #0
 8014d1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014d1e:	bf14      	ite	ne
 8014d20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014d24:	4623      	moveq	r3, r4
 8014d26:	9304      	str	r3, [sp, #16]
 8014d28:	9307      	str	r3, [sp, #28]
 8014d2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d2e:	9002      	str	r0, [sp, #8]
 8014d30:	9006      	str	r0, [sp, #24]
 8014d32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014d36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014d38:	ab21      	add	r3, sp, #132	@ 0x84
 8014d3a:	a902      	add	r1, sp, #8
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	9301      	str	r3, [sp, #4]
 8014d40:	f002 fc7c 	bl	801763c <_svfiprintf_r>
 8014d44:	1c43      	adds	r3, r0, #1
 8014d46:	bfbc      	itt	lt
 8014d48:	238b      	movlt	r3, #139	@ 0x8b
 8014d4a:	602b      	strlt	r3, [r5, #0]
 8014d4c:	2c00      	cmp	r4, #0
 8014d4e:	d0da      	beq.n	8014d06 <sniprintf+0x16>
 8014d50:	9b02      	ldr	r3, [sp, #8]
 8014d52:	2200      	movs	r2, #0
 8014d54:	701a      	strb	r2, [r3, #0]
 8014d56:	e7d6      	b.n	8014d06 <sniprintf+0x16>
 8014d58:	20000054 	.word	0x20000054

08014d5c <siprintf>:
 8014d5c:	b40e      	push	{r1, r2, r3}
 8014d5e:	b510      	push	{r4, lr}
 8014d60:	b09d      	sub	sp, #116	@ 0x74
 8014d62:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014d64:	9002      	str	r0, [sp, #8]
 8014d66:	9006      	str	r0, [sp, #24]
 8014d68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014d6c:	480a      	ldr	r0, [pc, #40]	@ (8014d98 <siprintf+0x3c>)
 8014d6e:	9107      	str	r1, [sp, #28]
 8014d70:	9104      	str	r1, [sp, #16]
 8014d72:	490a      	ldr	r1, [pc, #40]	@ (8014d9c <siprintf+0x40>)
 8014d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d78:	9105      	str	r1, [sp, #20]
 8014d7a:	2400      	movs	r4, #0
 8014d7c:	a902      	add	r1, sp, #8
 8014d7e:	6800      	ldr	r0, [r0, #0]
 8014d80:	9301      	str	r3, [sp, #4]
 8014d82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014d84:	f002 fc5a 	bl	801763c <_svfiprintf_r>
 8014d88:	9b02      	ldr	r3, [sp, #8]
 8014d8a:	701c      	strb	r4, [r3, #0]
 8014d8c:	b01d      	add	sp, #116	@ 0x74
 8014d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d92:	b003      	add	sp, #12
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop
 8014d98:	20000054 	.word	0x20000054
 8014d9c:	ffff0208 	.word	0xffff0208

08014da0 <__sread>:
 8014da0:	b510      	push	{r4, lr}
 8014da2:	460c      	mov	r4, r1
 8014da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014da8:	f000 f900 	bl	8014fac <_read_r>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	bfab      	itete	ge
 8014db0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014db2:	89a3      	ldrhlt	r3, [r4, #12]
 8014db4:	181b      	addge	r3, r3, r0
 8014db6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014dba:	bfac      	ite	ge
 8014dbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014dbe:	81a3      	strhlt	r3, [r4, #12]
 8014dc0:	bd10      	pop	{r4, pc}

08014dc2 <__swrite>:
 8014dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc6:	461f      	mov	r7, r3
 8014dc8:	898b      	ldrh	r3, [r1, #12]
 8014dca:	05db      	lsls	r3, r3, #23
 8014dcc:	4605      	mov	r5, r0
 8014dce:	460c      	mov	r4, r1
 8014dd0:	4616      	mov	r6, r2
 8014dd2:	d505      	bpl.n	8014de0 <__swrite+0x1e>
 8014dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dd8:	2302      	movs	r3, #2
 8014dda:	2200      	movs	r2, #0
 8014ddc:	f000 f8d4 	bl	8014f88 <_lseek_r>
 8014de0:	89a3      	ldrh	r3, [r4, #12]
 8014de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014de6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014dea:	81a3      	strh	r3, [r4, #12]
 8014dec:	4632      	mov	r2, r6
 8014dee:	463b      	mov	r3, r7
 8014df0:	4628      	mov	r0, r5
 8014df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014df6:	f000 b8eb 	b.w	8014fd0 <_write_r>

08014dfa <__sseek>:
 8014dfa:	b510      	push	{r4, lr}
 8014dfc:	460c      	mov	r4, r1
 8014dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e02:	f000 f8c1 	bl	8014f88 <_lseek_r>
 8014e06:	1c43      	adds	r3, r0, #1
 8014e08:	89a3      	ldrh	r3, [r4, #12]
 8014e0a:	bf15      	itete	ne
 8014e0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014e0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014e12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014e16:	81a3      	strheq	r3, [r4, #12]
 8014e18:	bf18      	it	ne
 8014e1a:	81a3      	strhne	r3, [r4, #12]
 8014e1c:	bd10      	pop	{r4, pc}

08014e1e <__sclose>:
 8014e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e22:	f000 b8a1 	b.w	8014f68 <_close_r>

08014e26 <__swbuf_r>:
 8014e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e28:	460e      	mov	r6, r1
 8014e2a:	4614      	mov	r4, r2
 8014e2c:	4605      	mov	r5, r0
 8014e2e:	b118      	cbz	r0, 8014e38 <__swbuf_r+0x12>
 8014e30:	6a03      	ldr	r3, [r0, #32]
 8014e32:	b90b      	cbnz	r3, 8014e38 <__swbuf_r+0x12>
 8014e34:	f7ff fec8 	bl	8014bc8 <__sinit>
 8014e38:	69a3      	ldr	r3, [r4, #24]
 8014e3a:	60a3      	str	r3, [r4, #8]
 8014e3c:	89a3      	ldrh	r3, [r4, #12]
 8014e3e:	071a      	lsls	r2, r3, #28
 8014e40:	d501      	bpl.n	8014e46 <__swbuf_r+0x20>
 8014e42:	6923      	ldr	r3, [r4, #16]
 8014e44:	b943      	cbnz	r3, 8014e58 <__swbuf_r+0x32>
 8014e46:	4621      	mov	r1, r4
 8014e48:	4628      	mov	r0, r5
 8014e4a:	f000 f82b 	bl	8014ea4 <__swsetup_r>
 8014e4e:	b118      	cbz	r0, 8014e58 <__swbuf_r+0x32>
 8014e50:	f04f 37ff 	mov.w	r7, #4294967295
 8014e54:	4638      	mov	r0, r7
 8014e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e58:	6823      	ldr	r3, [r4, #0]
 8014e5a:	6922      	ldr	r2, [r4, #16]
 8014e5c:	1a98      	subs	r0, r3, r2
 8014e5e:	6963      	ldr	r3, [r4, #20]
 8014e60:	b2f6      	uxtb	r6, r6
 8014e62:	4283      	cmp	r3, r0
 8014e64:	4637      	mov	r7, r6
 8014e66:	dc05      	bgt.n	8014e74 <__swbuf_r+0x4e>
 8014e68:	4621      	mov	r1, r4
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	f002 fd66 	bl	801793c <_fflush_r>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	d1ed      	bne.n	8014e50 <__swbuf_r+0x2a>
 8014e74:	68a3      	ldr	r3, [r4, #8]
 8014e76:	3b01      	subs	r3, #1
 8014e78:	60a3      	str	r3, [r4, #8]
 8014e7a:	6823      	ldr	r3, [r4, #0]
 8014e7c:	1c5a      	adds	r2, r3, #1
 8014e7e:	6022      	str	r2, [r4, #0]
 8014e80:	701e      	strb	r6, [r3, #0]
 8014e82:	6962      	ldr	r2, [r4, #20]
 8014e84:	1c43      	adds	r3, r0, #1
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d004      	beq.n	8014e94 <__swbuf_r+0x6e>
 8014e8a:	89a3      	ldrh	r3, [r4, #12]
 8014e8c:	07db      	lsls	r3, r3, #31
 8014e8e:	d5e1      	bpl.n	8014e54 <__swbuf_r+0x2e>
 8014e90:	2e0a      	cmp	r6, #10
 8014e92:	d1df      	bne.n	8014e54 <__swbuf_r+0x2e>
 8014e94:	4621      	mov	r1, r4
 8014e96:	4628      	mov	r0, r5
 8014e98:	f002 fd50 	bl	801793c <_fflush_r>
 8014e9c:	2800      	cmp	r0, #0
 8014e9e:	d0d9      	beq.n	8014e54 <__swbuf_r+0x2e>
 8014ea0:	e7d6      	b.n	8014e50 <__swbuf_r+0x2a>
	...

08014ea4 <__swsetup_r>:
 8014ea4:	b538      	push	{r3, r4, r5, lr}
 8014ea6:	4b29      	ldr	r3, [pc, #164]	@ (8014f4c <__swsetup_r+0xa8>)
 8014ea8:	4605      	mov	r5, r0
 8014eaa:	6818      	ldr	r0, [r3, #0]
 8014eac:	460c      	mov	r4, r1
 8014eae:	b118      	cbz	r0, 8014eb8 <__swsetup_r+0x14>
 8014eb0:	6a03      	ldr	r3, [r0, #32]
 8014eb2:	b90b      	cbnz	r3, 8014eb8 <__swsetup_r+0x14>
 8014eb4:	f7ff fe88 	bl	8014bc8 <__sinit>
 8014eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ebc:	0719      	lsls	r1, r3, #28
 8014ebe:	d422      	bmi.n	8014f06 <__swsetup_r+0x62>
 8014ec0:	06da      	lsls	r2, r3, #27
 8014ec2:	d407      	bmi.n	8014ed4 <__swsetup_r+0x30>
 8014ec4:	2209      	movs	r2, #9
 8014ec6:	602a      	str	r2, [r5, #0]
 8014ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ecc:	81a3      	strh	r3, [r4, #12]
 8014ece:	f04f 30ff 	mov.w	r0, #4294967295
 8014ed2:	e033      	b.n	8014f3c <__swsetup_r+0x98>
 8014ed4:	0758      	lsls	r0, r3, #29
 8014ed6:	d512      	bpl.n	8014efe <__swsetup_r+0x5a>
 8014ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014eda:	b141      	cbz	r1, 8014eee <__swsetup_r+0x4a>
 8014edc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ee0:	4299      	cmp	r1, r3
 8014ee2:	d002      	beq.n	8014eea <__swsetup_r+0x46>
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	f000 ff1f 	bl	8015d28 <_free_r>
 8014eea:	2300      	movs	r3, #0
 8014eec:	6363      	str	r3, [r4, #52]	@ 0x34
 8014eee:	89a3      	ldrh	r3, [r4, #12]
 8014ef0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014ef4:	81a3      	strh	r3, [r4, #12]
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	6063      	str	r3, [r4, #4]
 8014efa:	6923      	ldr	r3, [r4, #16]
 8014efc:	6023      	str	r3, [r4, #0]
 8014efe:	89a3      	ldrh	r3, [r4, #12]
 8014f00:	f043 0308 	orr.w	r3, r3, #8
 8014f04:	81a3      	strh	r3, [r4, #12]
 8014f06:	6923      	ldr	r3, [r4, #16]
 8014f08:	b94b      	cbnz	r3, 8014f1e <__swsetup_r+0x7a>
 8014f0a:	89a3      	ldrh	r3, [r4, #12]
 8014f0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f14:	d003      	beq.n	8014f1e <__swsetup_r+0x7a>
 8014f16:	4621      	mov	r1, r4
 8014f18:	4628      	mov	r0, r5
 8014f1a:	f002 fd5d 	bl	80179d8 <__smakebuf_r>
 8014f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f22:	f013 0201 	ands.w	r2, r3, #1
 8014f26:	d00a      	beq.n	8014f3e <__swsetup_r+0x9a>
 8014f28:	2200      	movs	r2, #0
 8014f2a:	60a2      	str	r2, [r4, #8]
 8014f2c:	6962      	ldr	r2, [r4, #20]
 8014f2e:	4252      	negs	r2, r2
 8014f30:	61a2      	str	r2, [r4, #24]
 8014f32:	6922      	ldr	r2, [r4, #16]
 8014f34:	b942      	cbnz	r2, 8014f48 <__swsetup_r+0xa4>
 8014f36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014f3a:	d1c5      	bne.n	8014ec8 <__swsetup_r+0x24>
 8014f3c:	bd38      	pop	{r3, r4, r5, pc}
 8014f3e:	0799      	lsls	r1, r3, #30
 8014f40:	bf58      	it	pl
 8014f42:	6962      	ldrpl	r2, [r4, #20]
 8014f44:	60a2      	str	r2, [r4, #8]
 8014f46:	e7f4      	b.n	8014f32 <__swsetup_r+0x8e>
 8014f48:	2000      	movs	r0, #0
 8014f4a:	e7f7      	b.n	8014f3c <__swsetup_r+0x98>
 8014f4c:	20000054 	.word	0x20000054

08014f50 <memset>:
 8014f50:	4402      	add	r2, r0
 8014f52:	4603      	mov	r3, r0
 8014f54:	4293      	cmp	r3, r2
 8014f56:	d100      	bne.n	8014f5a <memset+0xa>
 8014f58:	4770      	bx	lr
 8014f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8014f5e:	e7f9      	b.n	8014f54 <memset+0x4>

08014f60 <_localeconv_r>:
 8014f60:	4800      	ldr	r0, [pc, #0]	@ (8014f64 <_localeconv_r+0x4>)
 8014f62:	4770      	bx	lr
 8014f64:	20000194 	.word	0x20000194

08014f68 <_close_r>:
 8014f68:	b538      	push	{r3, r4, r5, lr}
 8014f6a:	4d06      	ldr	r5, [pc, #24]	@ (8014f84 <_close_r+0x1c>)
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	4604      	mov	r4, r0
 8014f70:	4608      	mov	r0, r1
 8014f72:	602b      	str	r3, [r5, #0]
 8014f74:	f7ee feaa 	bl	8003ccc <_close>
 8014f78:	1c43      	adds	r3, r0, #1
 8014f7a:	d102      	bne.n	8014f82 <_close_r+0x1a>
 8014f7c:	682b      	ldr	r3, [r5, #0]
 8014f7e:	b103      	cbz	r3, 8014f82 <_close_r+0x1a>
 8014f80:	6023      	str	r3, [r4, #0]
 8014f82:	bd38      	pop	{r3, r4, r5, pc}
 8014f84:	200040b8 	.word	0x200040b8

08014f88 <_lseek_r>:
 8014f88:	b538      	push	{r3, r4, r5, lr}
 8014f8a:	4d07      	ldr	r5, [pc, #28]	@ (8014fa8 <_lseek_r+0x20>)
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	4608      	mov	r0, r1
 8014f90:	4611      	mov	r1, r2
 8014f92:	2200      	movs	r2, #0
 8014f94:	602a      	str	r2, [r5, #0]
 8014f96:	461a      	mov	r2, r3
 8014f98:	f7ee febf 	bl	8003d1a <_lseek>
 8014f9c:	1c43      	adds	r3, r0, #1
 8014f9e:	d102      	bne.n	8014fa6 <_lseek_r+0x1e>
 8014fa0:	682b      	ldr	r3, [r5, #0]
 8014fa2:	b103      	cbz	r3, 8014fa6 <_lseek_r+0x1e>
 8014fa4:	6023      	str	r3, [r4, #0]
 8014fa6:	bd38      	pop	{r3, r4, r5, pc}
 8014fa8:	200040b8 	.word	0x200040b8

08014fac <_read_r>:
 8014fac:	b538      	push	{r3, r4, r5, lr}
 8014fae:	4d07      	ldr	r5, [pc, #28]	@ (8014fcc <_read_r+0x20>)
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	4608      	mov	r0, r1
 8014fb4:	4611      	mov	r1, r2
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	602a      	str	r2, [r5, #0]
 8014fba:	461a      	mov	r2, r3
 8014fbc:	f7ee fe4d 	bl	8003c5a <_read>
 8014fc0:	1c43      	adds	r3, r0, #1
 8014fc2:	d102      	bne.n	8014fca <_read_r+0x1e>
 8014fc4:	682b      	ldr	r3, [r5, #0]
 8014fc6:	b103      	cbz	r3, 8014fca <_read_r+0x1e>
 8014fc8:	6023      	str	r3, [r4, #0]
 8014fca:	bd38      	pop	{r3, r4, r5, pc}
 8014fcc:	200040b8 	.word	0x200040b8

08014fd0 <_write_r>:
 8014fd0:	b538      	push	{r3, r4, r5, lr}
 8014fd2:	4d07      	ldr	r5, [pc, #28]	@ (8014ff0 <_write_r+0x20>)
 8014fd4:	4604      	mov	r4, r0
 8014fd6:	4608      	mov	r0, r1
 8014fd8:	4611      	mov	r1, r2
 8014fda:	2200      	movs	r2, #0
 8014fdc:	602a      	str	r2, [r5, #0]
 8014fde:	461a      	mov	r2, r3
 8014fe0:	f7ee fe58 	bl	8003c94 <_write>
 8014fe4:	1c43      	adds	r3, r0, #1
 8014fe6:	d102      	bne.n	8014fee <_write_r+0x1e>
 8014fe8:	682b      	ldr	r3, [r5, #0]
 8014fea:	b103      	cbz	r3, 8014fee <_write_r+0x1e>
 8014fec:	6023      	str	r3, [r4, #0]
 8014fee:	bd38      	pop	{r3, r4, r5, pc}
 8014ff0:	200040b8 	.word	0x200040b8

08014ff4 <__errno>:
 8014ff4:	4b01      	ldr	r3, [pc, #4]	@ (8014ffc <__errno+0x8>)
 8014ff6:	6818      	ldr	r0, [r3, #0]
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop
 8014ffc:	20000054 	.word	0x20000054

08015000 <__libc_init_array>:
 8015000:	b570      	push	{r4, r5, r6, lr}
 8015002:	4d0d      	ldr	r5, [pc, #52]	@ (8015038 <__libc_init_array+0x38>)
 8015004:	4c0d      	ldr	r4, [pc, #52]	@ (801503c <__libc_init_array+0x3c>)
 8015006:	1b64      	subs	r4, r4, r5
 8015008:	10a4      	asrs	r4, r4, #2
 801500a:	2600      	movs	r6, #0
 801500c:	42a6      	cmp	r6, r4
 801500e:	d109      	bne.n	8015024 <__libc_init_array+0x24>
 8015010:	4d0b      	ldr	r5, [pc, #44]	@ (8015040 <__libc_init_array+0x40>)
 8015012:	4c0c      	ldr	r4, [pc, #48]	@ (8015044 <__libc_init_array+0x44>)
 8015014:	f004 ff22 	bl	8019e5c <_init>
 8015018:	1b64      	subs	r4, r4, r5
 801501a:	10a4      	asrs	r4, r4, #2
 801501c:	2600      	movs	r6, #0
 801501e:	42a6      	cmp	r6, r4
 8015020:	d105      	bne.n	801502e <__libc_init_array+0x2e>
 8015022:	bd70      	pop	{r4, r5, r6, pc}
 8015024:	f855 3b04 	ldr.w	r3, [r5], #4
 8015028:	4798      	blx	r3
 801502a:	3601      	adds	r6, #1
 801502c:	e7ee      	b.n	801500c <__libc_init_array+0xc>
 801502e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015032:	4798      	blx	r3
 8015034:	3601      	adds	r6, #1
 8015036:	e7f2      	b.n	801501e <__libc_init_array+0x1e>
 8015038:	0801c384 	.word	0x0801c384
 801503c:	0801c384 	.word	0x0801c384
 8015040:	0801c384 	.word	0x0801c384
 8015044:	0801c388 	.word	0x0801c388

08015048 <__retarget_lock_init_recursive>:
 8015048:	4770      	bx	lr

0801504a <__retarget_lock_acquire_recursive>:
 801504a:	4770      	bx	lr

0801504c <__retarget_lock_release_recursive>:
 801504c:	4770      	bx	lr

0801504e <memcpy>:
 801504e:	440a      	add	r2, r1
 8015050:	4291      	cmp	r1, r2
 8015052:	f100 33ff 	add.w	r3, r0, #4294967295
 8015056:	d100      	bne.n	801505a <memcpy+0xc>
 8015058:	4770      	bx	lr
 801505a:	b510      	push	{r4, lr}
 801505c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015064:	4291      	cmp	r1, r2
 8015066:	d1f9      	bne.n	801505c <memcpy+0xe>
 8015068:	bd10      	pop	{r4, pc}
	...

0801506c <nanf>:
 801506c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015074 <nanf+0x8>
 8015070:	4770      	bx	lr
 8015072:	bf00      	nop
 8015074:	7fc00000 	.word	0x7fc00000

08015078 <quorem>:
 8015078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801507c:	6903      	ldr	r3, [r0, #16]
 801507e:	690c      	ldr	r4, [r1, #16]
 8015080:	42a3      	cmp	r3, r4
 8015082:	4607      	mov	r7, r0
 8015084:	db7e      	blt.n	8015184 <quorem+0x10c>
 8015086:	3c01      	subs	r4, #1
 8015088:	f101 0814 	add.w	r8, r1, #20
 801508c:	00a3      	lsls	r3, r4, #2
 801508e:	f100 0514 	add.w	r5, r0, #20
 8015092:	9300      	str	r3, [sp, #0]
 8015094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015098:	9301      	str	r3, [sp, #4]
 801509a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801509e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80150a2:	3301      	adds	r3, #1
 80150a4:	429a      	cmp	r2, r3
 80150a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80150aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80150ae:	d32e      	bcc.n	801510e <quorem+0x96>
 80150b0:	f04f 0a00 	mov.w	sl, #0
 80150b4:	46c4      	mov	ip, r8
 80150b6:	46ae      	mov	lr, r5
 80150b8:	46d3      	mov	fp, sl
 80150ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80150be:	b298      	uxth	r0, r3
 80150c0:	fb06 a000 	mla	r0, r6, r0, sl
 80150c4:	0c02      	lsrs	r2, r0, #16
 80150c6:	0c1b      	lsrs	r3, r3, #16
 80150c8:	fb06 2303 	mla	r3, r6, r3, r2
 80150cc:	f8de 2000 	ldr.w	r2, [lr]
 80150d0:	b280      	uxth	r0, r0
 80150d2:	b292      	uxth	r2, r2
 80150d4:	1a12      	subs	r2, r2, r0
 80150d6:	445a      	add	r2, fp
 80150d8:	f8de 0000 	ldr.w	r0, [lr]
 80150dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80150e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80150ea:	b292      	uxth	r2, r2
 80150ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80150f0:	45e1      	cmp	r9, ip
 80150f2:	f84e 2b04 	str.w	r2, [lr], #4
 80150f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80150fa:	d2de      	bcs.n	80150ba <quorem+0x42>
 80150fc:	9b00      	ldr	r3, [sp, #0]
 80150fe:	58eb      	ldr	r3, [r5, r3]
 8015100:	b92b      	cbnz	r3, 801510e <quorem+0x96>
 8015102:	9b01      	ldr	r3, [sp, #4]
 8015104:	3b04      	subs	r3, #4
 8015106:	429d      	cmp	r5, r3
 8015108:	461a      	mov	r2, r3
 801510a:	d32f      	bcc.n	801516c <quorem+0xf4>
 801510c:	613c      	str	r4, [r7, #16]
 801510e:	4638      	mov	r0, r7
 8015110:	f001 f9c6 	bl	80164a0 <__mcmp>
 8015114:	2800      	cmp	r0, #0
 8015116:	db25      	blt.n	8015164 <quorem+0xec>
 8015118:	4629      	mov	r1, r5
 801511a:	2000      	movs	r0, #0
 801511c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015120:	f8d1 c000 	ldr.w	ip, [r1]
 8015124:	fa1f fe82 	uxth.w	lr, r2
 8015128:	fa1f f38c 	uxth.w	r3, ip
 801512c:	eba3 030e 	sub.w	r3, r3, lr
 8015130:	4403      	add	r3, r0
 8015132:	0c12      	lsrs	r2, r2, #16
 8015134:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015138:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801513c:	b29b      	uxth	r3, r3
 801513e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015142:	45c1      	cmp	r9, r8
 8015144:	f841 3b04 	str.w	r3, [r1], #4
 8015148:	ea4f 4022 	mov.w	r0, r2, asr #16
 801514c:	d2e6      	bcs.n	801511c <quorem+0xa4>
 801514e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015156:	b922      	cbnz	r2, 8015162 <quorem+0xea>
 8015158:	3b04      	subs	r3, #4
 801515a:	429d      	cmp	r5, r3
 801515c:	461a      	mov	r2, r3
 801515e:	d30b      	bcc.n	8015178 <quorem+0x100>
 8015160:	613c      	str	r4, [r7, #16]
 8015162:	3601      	adds	r6, #1
 8015164:	4630      	mov	r0, r6
 8015166:	b003      	add	sp, #12
 8015168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801516c:	6812      	ldr	r2, [r2, #0]
 801516e:	3b04      	subs	r3, #4
 8015170:	2a00      	cmp	r2, #0
 8015172:	d1cb      	bne.n	801510c <quorem+0x94>
 8015174:	3c01      	subs	r4, #1
 8015176:	e7c6      	b.n	8015106 <quorem+0x8e>
 8015178:	6812      	ldr	r2, [r2, #0]
 801517a:	3b04      	subs	r3, #4
 801517c:	2a00      	cmp	r2, #0
 801517e:	d1ef      	bne.n	8015160 <quorem+0xe8>
 8015180:	3c01      	subs	r4, #1
 8015182:	e7ea      	b.n	801515a <quorem+0xe2>
 8015184:	2000      	movs	r0, #0
 8015186:	e7ee      	b.n	8015166 <quorem+0xee>

08015188 <_dtoa_r>:
 8015188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801518c:	69c7      	ldr	r7, [r0, #28]
 801518e:	b097      	sub	sp, #92	@ 0x5c
 8015190:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015194:	ec55 4b10 	vmov	r4, r5, d0
 8015198:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801519a:	9107      	str	r1, [sp, #28]
 801519c:	4681      	mov	r9, r0
 801519e:	920c      	str	r2, [sp, #48]	@ 0x30
 80151a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80151a2:	b97f      	cbnz	r7, 80151c4 <_dtoa_r+0x3c>
 80151a4:	2010      	movs	r0, #16
 80151a6:	f000 fe09 	bl	8015dbc <malloc>
 80151aa:	4602      	mov	r2, r0
 80151ac:	f8c9 001c 	str.w	r0, [r9, #28]
 80151b0:	b920      	cbnz	r0, 80151bc <_dtoa_r+0x34>
 80151b2:	4ba9      	ldr	r3, [pc, #676]	@ (8015458 <_dtoa_r+0x2d0>)
 80151b4:	21ef      	movs	r1, #239	@ 0xef
 80151b6:	48a9      	ldr	r0, [pc, #676]	@ (801545c <_dtoa_r+0x2d4>)
 80151b8:	f002 fcb2 	bl	8017b20 <__assert_func>
 80151bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80151c0:	6007      	str	r7, [r0, #0]
 80151c2:	60c7      	str	r7, [r0, #12]
 80151c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80151c8:	6819      	ldr	r1, [r3, #0]
 80151ca:	b159      	cbz	r1, 80151e4 <_dtoa_r+0x5c>
 80151cc:	685a      	ldr	r2, [r3, #4]
 80151ce:	604a      	str	r2, [r1, #4]
 80151d0:	2301      	movs	r3, #1
 80151d2:	4093      	lsls	r3, r2
 80151d4:	608b      	str	r3, [r1, #8]
 80151d6:	4648      	mov	r0, r9
 80151d8:	f000 fee6 	bl	8015fa8 <_Bfree>
 80151dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80151e0:	2200      	movs	r2, #0
 80151e2:	601a      	str	r2, [r3, #0]
 80151e4:	1e2b      	subs	r3, r5, #0
 80151e6:	bfb9      	ittee	lt
 80151e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80151ec:	9305      	strlt	r3, [sp, #20]
 80151ee:	2300      	movge	r3, #0
 80151f0:	6033      	strge	r3, [r6, #0]
 80151f2:	9f05      	ldr	r7, [sp, #20]
 80151f4:	4b9a      	ldr	r3, [pc, #616]	@ (8015460 <_dtoa_r+0x2d8>)
 80151f6:	bfbc      	itt	lt
 80151f8:	2201      	movlt	r2, #1
 80151fa:	6032      	strlt	r2, [r6, #0]
 80151fc:	43bb      	bics	r3, r7
 80151fe:	d112      	bne.n	8015226 <_dtoa_r+0x9e>
 8015200:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015202:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015206:	6013      	str	r3, [r2, #0]
 8015208:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801520c:	4323      	orrs	r3, r4
 801520e:	f000 855a 	beq.w	8015cc6 <_dtoa_r+0xb3e>
 8015212:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015214:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015474 <_dtoa_r+0x2ec>
 8015218:	2b00      	cmp	r3, #0
 801521a:	f000 855c 	beq.w	8015cd6 <_dtoa_r+0xb4e>
 801521e:	f10a 0303 	add.w	r3, sl, #3
 8015222:	f000 bd56 	b.w	8015cd2 <_dtoa_r+0xb4a>
 8015226:	ed9d 7b04 	vldr	d7, [sp, #16]
 801522a:	2200      	movs	r2, #0
 801522c:	ec51 0b17 	vmov	r0, r1, d7
 8015230:	2300      	movs	r3, #0
 8015232:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8015236:	f7eb fc6f 	bl	8000b18 <__aeabi_dcmpeq>
 801523a:	4680      	mov	r8, r0
 801523c:	b158      	cbz	r0, 8015256 <_dtoa_r+0xce>
 801523e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015240:	2301      	movs	r3, #1
 8015242:	6013      	str	r3, [r2, #0]
 8015244:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015246:	b113      	cbz	r3, 801524e <_dtoa_r+0xc6>
 8015248:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801524a:	4b86      	ldr	r3, [pc, #536]	@ (8015464 <_dtoa_r+0x2dc>)
 801524c:	6013      	str	r3, [r2, #0]
 801524e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015478 <_dtoa_r+0x2f0>
 8015252:	f000 bd40 	b.w	8015cd6 <_dtoa_r+0xb4e>
 8015256:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801525a:	aa14      	add	r2, sp, #80	@ 0x50
 801525c:	a915      	add	r1, sp, #84	@ 0x54
 801525e:	4648      	mov	r0, r9
 8015260:	f001 fa3e 	bl	80166e0 <__d2b>
 8015264:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015268:	9002      	str	r0, [sp, #8]
 801526a:	2e00      	cmp	r6, #0
 801526c:	d078      	beq.n	8015360 <_dtoa_r+0x1d8>
 801526e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015270:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8015274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801527c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015280:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015284:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015288:	4619      	mov	r1, r3
 801528a:	2200      	movs	r2, #0
 801528c:	4b76      	ldr	r3, [pc, #472]	@ (8015468 <_dtoa_r+0x2e0>)
 801528e:	f7eb f823 	bl	80002d8 <__aeabi_dsub>
 8015292:	a36b      	add	r3, pc, #428	@ (adr r3, 8015440 <_dtoa_r+0x2b8>)
 8015294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015298:	f7eb f9d6 	bl	8000648 <__aeabi_dmul>
 801529c:	a36a      	add	r3, pc, #424	@ (adr r3, 8015448 <_dtoa_r+0x2c0>)
 801529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a2:	f7eb f81b 	bl	80002dc <__adddf3>
 80152a6:	4604      	mov	r4, r0
 80152a8:	4630      	mov	r0, r6
 80152aa:	460d      	mov	r5, r1
 80152ac:	f7eb f962 	bl	8000574 <__aeabi_i2d>
 80152b0:	a367      	add	r3, pc, #412	@ (adr r3, 8015450 <_dtoa_r+0x2c8>)
 80152b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b6:	f7eb f9c7 	bl	8000648 <__aeabi_dmul>
 80152ba:	4602      	mov	r2, r0
 80152bc:	460b      	mov	r3, r1
 80152be:	4620      	mov	r0, r4
 80152c0:	4629      	mov	r1, r5
 80152c2:	f7eb f80b 	bl	80002dc <__adddf3>
 80152c6:	4604      	mov	r4, r0
 80152c8:	460d      	mov	r5, r1
 80152ca:	f7eb fc6d 	bl	8000ba8 <__aeabi_d2iz>
 80152ce:	2200      	movs	r2, #0
 80152d0:	4607      	mov	r7, r0
 80152d2:	2300      	movs	r3, #0
 80152d4:	4620      	mov	r0, r4
 80152d6:	4629      	mov	r1, r5
 80152d8:	f7eb fc28 	bl	8000b2c <__aeabi_dcmplt>
 80152dc:	b140      	cbz	r0, 80152f0 <_dtoa_r+0x168>
 80152de:	4638      	mov	r0, r7
 80152e0:	f7eb f948 	bl	8000574 <__aeabi_i2d>
 80152e4:	4622      	mov	r2, r4
 80152e6:	462b      	mov	r3, r5
 80152e8:	f7eb fc16 	bl	8000b18 <__aeabi_dcmpeq>
 80152ec:	b900      	cbnz	r0, 80152f0 <_dtoa_r+0x168>
 80152ee:	3f01      	subs	r7, #1
 80152f0:	2f16      	cmp	r7, #22
 80152f2:	d852      	bhi.n	801539a <_dtoa_r+0x212>
 80152f4:	4b5d      	ldr	r3, [pc, #372]	@ (801546c <_dtoa_r+0x2e4>)
 80152f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80152fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015302:	f7eb fc13 	bl	8000b2c <__aeabi_dcmplt>
 8015306:	2800      	cmp	r0, #0
 8015308:	d049      	beq.n	801539e <_dtoa_r+0x216>
 801530a:	3f01      	subs	r7, #1
 801530c:	2300      	movs	r3, #0
 801530e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015310:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015312:	1b9b      	subs	r3, r3, r6
 8015314:	1e5a      	subs	r2, r3, #1
 8015316:	bf45      	ittet	mi
 8015318:	f1c3 0301 	rsbmi	r3, r3, #1
 801531c:	9300      	strmi	r3, [sp, #0]
 801531e:	2300      	movpl	r3, #0
 8015320:	2300      	movmi	r3, #0
 8015322:	9206      	str	r2, [sp, #24]
 8015324:	bf54      	ite	pl
 8015326:	9300      	strpl	r3, [sp, #0]
 8015328:	9306      	strmi	r3, [sp, #24]
 801532a:	2f00      	cmp	r7, #0
 801532c:	db39      	blt.n	80153a2 <_dtoa_r+0x21a>
 801532e:	9b06      	ldr	r3, [sp, #24]
 8015330:	970d      	str	r7, [sp, #52]	@ 0x34
 8015332:	443b      	add	r3, r7
 8015334:	9306      	str	r3, [sp, #24]
 8015336:	2300      	movs	r3, #0
 8015338:	9308      	str	r3, [sp, #32]
 801533a:	9b07      	ldr	r3, [sp, #28]
 801533c:	2b09      	cmp	r3, #9
 801533e:	d863      	bhi.n	8015408 <_dtoa_r+0x280>
 8015340:	2b05      	cmp	r3, #5
 8015342:	bfc4      	itt	gt
 8015344:	3b04      	subgt	r3, #4
 8015346:	9307      	strgt	r3, [sp, #28]
 8015348:	9b07      	ldr	r3, [sp, #28]
 801534a:	f1a3 0302 	sub.w	r3, r3, #2
 801534e:	bfcc      	ite	gt
 8015350:	2400      	movgt	r4, #0
 8015352:	2401      	movle	r4, #1
 8015354:	2b03      	cmp	r3, #3
 8015356:	d863      	bhi.n	8015420 <_dtoa_r+0x298>
 8015358:	e8df f003 	tbb	[pc, r3]
 801535c:	2b375452 	.word	0x2b375452
 8015360:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015364:	441e      	add	r6, r3
 8015366:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801536a:	2b20      	cmp	r3, #32
 801536c:	bfc1      	itttt	gt
 801536e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015372:	409f      	lslgt	r7, r3
 8015374:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015378:	fa24 f303 	lsrgt.w	r3, r4, r3
 801537c:	bfd6      	itet	le
 801537e:	f1c3 0320 	rsble	r3, r3, #32
 8015382:	ea47 0003 	orrgt.w	r0, r7, r3
 8015386:	fa04 f003 	lslle.w	r0, r4, r3
 801538a:	f7eb f8e3 	bl	8000554 <__aeabi_ui2d>
 801538e:	2201      	movs	r2, #1
 8015390:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015394:	3e01      	subs	r6, #1
 8015396:	9212      	str	r2, [sp, #72]	@ 0x48
 8015398:	e776      	b.n	8015288 <_dtoa_r+0x100>
 801539a:	2301      	movs	r3, #1
 801539c:	e7b7      	b.n	801530e <_dtoa_r+0x186>
 801539e:	9010      	str	r0, [sp, #64]	@ 0x40
 80153a0:	e7b6      	b.n	8015310 <_dtoa_r+0x188>
 80153a2:	9b00      	ldr	r3, [sp, #0]
 80153a4:	1bdb      	subs	r3, r3, r7
 80153a6:	9300      	str	r3, [sp, #0]
 80153a8:	427b      	negs	r3, r7
 80153aa:	9308      	str	r3, [sp, #32]
 80153ac:	2300      	movs	r3, #0
 80153ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80153b0:	e7c3      	b.n	801533a <_dtoa_r+0x1b2>
 80153b2:	2301      	movs	r3, #1
 80153b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80153b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153b8:	eb07 0b03 	add.w	fp, r7, r3
 80153bc:	f10b 0301 	add.w	r3, fp, #1
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	9303      	str	r3, [sp, #12]
 80153c4:	bfb8      	it	lt
 80153c6:	2301      	movlt	r3, #1
 80153c8:	e006      	b.n	80153d8 <_dtoa_r+0x250>
 80153ca:	2301      	movs	r3, #1
 80153cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80153ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	dd28      	ble.n	8015426 <_dtoa_r+0x29e>
 80153d4:	469b      	mov	fp, r3
 80153d6:	9303      	str	r3, [sp, #12]
 80153d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80153dc:	2100      	movs	r1, #0
 80153de:	2204      	movs	r2, #4
 80153e0:	f102 0514 	add.w	r5, r2, #20
 80153e4:	429d      	cmp	r5, r3
 80153e6:	d926      	bls.n	8015436 <_dtoa_r+0x2ae>
 80153e8:	6041      	str	r1, [r0, #4]
 80153ea:	4648      	mov	r0, r9
 80153ec:	f000 fd9c 	bl	8015f28 <_Balloc>
 80153f0:	4682      	mov	sl, r0
 80153f2:	2800      	cmp	r0, #0
 80153f4:	d142      	bne.n	801547c <_dtoa_r+0x2f4>
 80153f6:	4b1e      	ldr	r3, [pc, #120]	@ (8015470 <_dtoa_r+0x2e8>)
 80153f8:	4602      	mov	r2, r0
 80153fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80153fe:	e6da      	b.n	80151b6 <_dtoa_r+0x2e>
 8015400:	2300      	movs	r3, #0
 8015402:	e7e3      	b.n	80153cc <_dtoa_r+0x244>
 8015404:	2300      	movs	r3, #0
 8015406:	e7d5      	b.n	80153b4 <_dtoa_r+0x22c>
 8015408:	2401      	movs	r4, #1
 801540a:	2300      	movs	r3, #0
 801540c:	9307      	str	r3, [sp, #28]
 801540e:	9409      	str	r4, [sp, #36]	@ 0x24
 8015410:	f04f 3bff 	mov.w	fp, #4294967295
 8015414:	2200      	movs	r2, #0
 8015416:	f8cd b00c 	str.w	fp, [sp, #12]
 801541a:	2312      	movs	r3, #18
 801541c:	920c      	str	r2, [sp, #48]	@ 0x30
 801541e:	e7db      	b.n	80153d8 <_dtoa_r+0x250>
 8015420:	2301      	movs	r3, #1
 8015422:	9309      	str	r3, [sp, #36]	@ 0x24
 8015424:	e7f4      	b.n	8015410 <_dtoa_r+0x288>
 8015426:	f04f 0b01 	mov.w	fp, #1
 801542a:	f8cd b00c 	str.w	fp, [sp, #12]
 801542e:	465b      	mov	r3, fp
 8015430:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015434:	e7d0      	b.n	80153d8 <_dtoa_r+0x250>
 8015436:	3101      	adds	r1, #1
 8015438:	0052      	lsls	r2, r2, #1
 801543a:	e7d1      	b.n	80153e0 <_dtoa_r+0x258>
 801543c:	f3af 8000 	nop.w
 8015440:	636f4361 	.word	0x636f4361
 8015444:	3fd287a7 	.word	0x3fd287a7
 8015448:	8b60c8b3 	.word	0x8b60c8b3
 801544c:	3fc68a28 	.word	0x3fc68a28
 8015450:	509f79fb 	.word	0x509f79fb
 8015454:	3fd34413 	.word	0x3fd34413
 8015458:	0801bbae 	.word	0x0801bbae
 801545c:	0801bbc5 	.word	0x0801bbc5
 8015460:	7ff00000 	.word	0x7ff00000
 8015464:	0801bb79 	.word	0x0801bb79
 8015468:	3ff80000 	.word	0x3ff80000
 801546c:	0801bd78 	.word	0x0801bd78
 8015470:	0801bc1d 	.word	0x0801bc1d
 8015474:	0801bbaa 	.word	0x0801bbaa
 8015478:	0801bb78 	.word	0x0801bb78
 801547c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015480:	6018      	str	r0, [r3, #0]
 8015482:	9b03      	ldr	r3, [sp, #12]
 8015484:	2b0e      	cmp	r3, #14
 8015486:	f200 80a1 	bhi.w	80155cc <_dtoa_r+0x444>
 801548a:	2c00      	cmp	r4, #0
 801548c:	f000 809e 	beq.w	80155cc <_dtoa_r+0x444>
 8015490:	2f00      	cmp	r7, #0
 8015492:	dd33      	ble.n	80154fc <_dtoa_r+0x374>
 8015494:	4b9c      	ldr	r3, [pc, #624]	@ (8015708 <_dtoa_r+0x580>)
 8015496:	f007 020f 	and.w	r2, r7, #15
 801549a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801549e:	ed93 7b00 	vldr	d7, [r3]
 80154a2:	05f8      	lsls	r0, r7, #23
 80154a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80154a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80154ac:	d516      	bpl.n	80154dc <_dtoa_r+0x354>
 80154ae:	4b97      	ldr	r3, [pc, #604]	@ (801570c <_dtoa_r+0x584>)
 80154b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80154b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80154b8:	f7eb f9f0 	bl	800089c <__aeabi_ddiv>
 80154bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154c0:	f004 040f 	and.w	r4, r4, #15
 80154c4:	2603      	movs	r6, #3
 80154c6:	4d91      	ldr	r5, [pc, #580]	@ (801570c <_dtoa_r+0x584>)
 80154c8:	b954      	cbnz	r4, 80154e0 <_dtoa_r+0x358>
 80154ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80154ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154d2:	f7eb f9e3 	bl	800089c <__aeabi_ddiv>
 80154d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154da:	e028      	b.n	801552e <_dtoa_r+0x3a6>
 80154dc:	2602      	movs	r6, #2
 80154de:	e7f2      	b.n	80154c6 <_dtoa_r+0x33e>
 80154e0:	07e1      	lsls	r1, r4, #31
 80154e2:	d508      	bpl.n	80154f6 <_dtoa_r+0x36e>
 80154e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80154e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80154ec:	f7eb f8ac 	bl	8000648 <__aeabi_dmul>
 80154f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80154f4:	3601      	adds	r6, #1
 80154f6:	1064      	asrs	r4, r4, #1
 80154f8:	3508      	adds	r5, #8
 80154fa:	e7e5      	b.n	80154c8 <_dtoa_r+0x340>
 80154fc:	f000 80af 	beq.w	801565e <_dtoa_r+0x4d6>
 8015500:	427c      	negs	r4, r7
 8015502:	4b81      	ldr	r3, [pc, #516]	@ (8015708 <_dtoa_r+0x580>)
 8015504:	4d81      	ldr	r5, [pc, #516]	@ (801570c <_dtoa_r+0x584>)
 8015506:	f004 020f 	and.w	r2, r4, #15
 801550a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015512:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015516:	f7eb f897 	bl	8000648 <__aeabi_dmul>
 801551a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801551e:	1124      	asrs	r4, r4, #4
 8015520:	2300      	movs	r3, #0
 8015522:	2602      	movs	r6, #2
 8015524:	2c00      	cmp	r4, #0
 8015526:	f040 808f 	bne.w	8015648 <_dtoa_r+0x4c0>
 801552a:	2b00      	cmp	r3, #0
 801552c:	d1d3      	bne.n	80154d6 <_dtoa_r+0x34e>
 801552e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015530:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015534:	2b00      	cmp	r3, #0
 8015536:	f000 8094 	beq.w	8015662 <_dtoa_r+0x4da>
 801553a:	4b75      	ldr	r3, [pc, #468]	@ (8015710 <_dtoa_r+0x588>)
 801553c:	2200      	movs	r2, #0
 801553e:	4620      	mov	r0, r4
 8015540:	4629      	mov	r1, r5
 8015542:	f7eb faf3 	bl	8000b2c <__aeabi_dcmplt>
 8015546:	2800      	cmp	r0, #0
 8015548:	f000 808b 	beq.w	8015662 <_dtoa_r+0x4da>
 801554c:	9b03      	ldr	r3, [sp, #12]
 801554e:	2b00      	cmp	r3, #0
 8015550:	f000 8087 	beq.w	8015662 <_dtoa_r+0x4da>
 8015554:	f1bb 0f00 	cmp.w	fp, #0
 8015558:	dd34      	ble.n	80155c4 <_dtoa_r+0x43c>
 801555a:	4620      	mov	r0, r4
 801555c:	4b6d      	ldr	r3, [pc, #436]	@ (8015714 <_dtoa_r+0x58c>)
 801555e:	2200      	movs	r2, #0
 8015560:	4629      	mov	r1, r5
 8015562:	f7eb f871 	bl	8000648 <__aeabi_dmul>
 8015566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801556a:	f107 38ff 	add.w	r8, r7, #4294967295
 801556e:	3601      	adds	r6, #1
 8015570:	465c      	mov	r4, fp
 8015572:	4630      	mov	r0, r6
 8015574:	f7ea fffe 	bl	8000574 <__aeabi_i2d>
 8015578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801557c:	f7eb f864 	bl	8000648 <__aeabi_dmul>
 8015580:	4b65      	ldr	r3, [pc, #404]	@ (8015718 <_dtoa_r+0x590>)
 8015582:	2200      	movs	r2, #0
 8015584:	f7ea feaa 	bl	80002dc <__adddf3>
 8015588:	4605      	mov	r5, r0
 801558a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801558e:	2c00      	cmp	r4, #0
 8015590:	d16a      	bne.n	8015668 <_dtoa_r+0x4e0>
 8015592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015596:	4b61      	ldr	r3, [pc, #388]	@ (801571c <_dtoa_r+0x594>)
 8015598:	2200      	movs	r2, #0
 801559a:	f7ea fe9d 	bl	80002d8 <__aeabi_dsub>
 801559e:	4602      	mov	r2, r0
 80155a0:	460b      	mov	r3, r1
 80155a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80155a6:	462a      	mov	r2, r5
 80155a8:	4633      	mov	r3, r6
 80155aa:	f7eb fadd 	bl	8000b68 <__aeabi_dcmpgt>
 80155ae:	2800      	cmp	r0, #0
 80155b0:	f040 8298 	bne.w	8015ae4 <_dtoa_r+0x95c>
 80155b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80155b8:	462a      	mov	r2, r5
 80155ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80155be:	f7eb fab5 	bl	8000b2c <__aeabi_dcmplt>
 80155c2:	bb38      	cbnz	r0, 8015614 <_dtoa_r+0x48c>
 80155c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80155c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80155cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	f2c0 8157 	blt.w	8015882 <_dtoa_r+0x6fa>
 80155d4:	2f0e      	cmp	r7, #14
 80155d6:	f300 8154 	bgt.w	8015882 <_dtoa_r+0x6fa>
 80155da:	4b4b      	ldr	r3, [pc, #300]	@ (8015708 <_dtoa_r+0x580>)
 80155dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80155e0:	ed93 7b00 	vldr	d7, [r3]
 80155e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	ed8d 7b00 	vstr	d7, [sp]
 80155ec:	f280 80e5 	bge.w	80157ba <_dtoa_r+0x632>
 80155f0:	9b03      	ldr	r3, [sp, #12]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	f300 80e1 	bgt.w	80157ba <_dtoa_r+0x632>
 80155f8:	d10c      	bne.n	8015614 <_dtoa_r+0x48c>
 80155fa:	4b48      	ldr	r3, [pc, #288]	@ (801571c <_dtoa_r+0x594>)
 80155fc:	2200      	movs	r2, #0
 80155fe:	ec51 0b17 	vmov	r0, r1, d7
 8015602:	f7eb f821 	bl	8000648 <__aeabi_dmul>
 8015606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801560a:	f7eb faa3 	bl	8000b54 <__aeabi_dcmpge>
 801560e:	2800      	cmp	r0, #0
 8015610:	f000 8266 	beq.w	8015ae0 <_dtoa_r+0x958>
 8015614:	2400      	movs	r4, #0
 8015616:	4625      	mov	r5, r4
 8015618:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801561a:	4656      	mov	r6, sl
 801561c:	ea6f 0803 	mvn.w	r8, r3
 8015620:	2700      	movs	r7, #0
 8015622:	4621      	mov	r1, r4
 8015624:	4648      	mov	r0, r9
 8015626:	f000 fcbf 	bl	8015fa8 <_Bfree>
 801562a:	2d00      	cmp	r5, #0
 801562c:	f000 80bd 	beq.w	80157aa <_dtoa_r+0x622>
 8015630:	b12f      	cbz	r7, 801563e <_dtoa_r+0x4b6>
 8015632:	42af      	cmp	r7, r5
 8015634:	d003      	beq.n	801563e <_dtoa_r+0x4b6>
 8015636:	4639      	mov	r1, r7
 8015638:	4648      	mov	r0, r9
 801563a:	f000 fcb5 	bl	8015fa8 <_Bfree>
 801563e:	4629      	mov	r1, r5
 8015640:	4648      	mov	r0, r9
 8015642:	f000 fcb1 	bl	8015fa8 <_Bfree>
 8015646:	e0b0      	b.n	80157aa <_dtoa_r+0x622>
 8015648:	07e2      	lsls	r2, r4, #31
 801564a:	d505      	bpl.n	8015658 <_dtoa_r+0x4d0>
 801564c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015650:	f7ea fffa 	bl	8000648 <__aeabi_dmul>
 8015654:	3601      	adds	r6, #1
 8015656:	2301      	movs	r3, #1
 8015658:	1064      	asrs	r4, r4, #1
 801565a:	3508      	adds	r5, #8
 801565c:	e762      	b.n	8015524 <_dtoa_r+0x39c>
 801565e:	2602      	movs	r6, #2
 8015660:	e765      	b.n	801552e <_dtoa_r+0x3a6>
 8015662:	9c03      	ldr	r4, [sp, #12]
 8015664:	46b8      	mov	r8, r7
 8015666:	e784      	b.n	8015572 <_dtoa_r+0x3ea>
 8015668:	4b27      	ldr	r3, [pc, #156]	@ (8015708 <_dtoa_r+0x580>)
 801566a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801566c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015670:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015674:	4454      	add	r4, sl
 8015676:	2900      	cmp	r1, #0
 8015678:	d054      	beq.n	8015724 <_dtoa_r+0x59c>
 801567a:	4929      	ldr	r1, [pc, #164]	@ (8015720 <_dtoa_r+0x598>)
 801567c:	2000      	movs	r0, #0
 801567e:	f7eb f90d 	bl	800089c <__aeabi_ddiv>
 8015682:	4633      	mov	r3, r6
 8015684:	462a      	mov	r2, r5
 8015686:	f7ea fe27 	bl	80002d8 <__aeabi_dsub>
 801568a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801568e:	4656      	mov	r6, sl
 8015690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015694:	f7eb fa88 	bl	8000ba8 <__aeabi_d2iz>
 8015698:	4605      	mov	r5, r0
 801569a:	f7ea ff6b 	bl	8000574 <__aeabi_i2d>
 801569e:	4602      	mov	r2, r0
 80156a0:	460b      	mov	r3, r1
 80156a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80156a6:	f7ea fe17 	bl	80002d8 <__aeabi_dsub>
 80156aa:	3530      	adds	r5, #48	@ 0x30
 80156ac:	4602      	mov	r2, r0
 80156ae:	460b      	mov	r3, r1
 80156b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80156b4:	f806 5b01 	strb.w	r5, [r6], #1
 80156b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80156bc:	f7eb fa36 	bl	8000b2c <__aeabi_dcmplt>
 80156c0:	2800      	cmp	r0, #0
 80156c2:	d172      	bne.n	80157aa <_dtoa_r+0x622>
 80156c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156c8:	4911      	ldr	r1, [pc, #68]	@ (8015710 <_dtoa_r+0x588>)
 80156ca:	2000      	movs	r0, #0
 80156cc:	f7ea fe04 	bl	80002d8 <__aeabi_dsub>
 80156d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80156d4:	f7eb fa2a 	bl	8000b2c <__aeabi_dcmplt>
 80156d8:	2800      	cmp	r0, #0
 80156da:	f040 80b4 	bne.w	8015846 <_dtoa_r+0x6be>
 80156de:	42a6      	cmp	r6, r4
 80156e0:	f43f af70 	beq.w	80155c4 <_dtoa_r+0x43c>
 80156e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80156e8:	4b0a      	ldr	r3, [pc, #40]	@ (8015714 <_dtoa_r+0x58c>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	f7ea ffac 	bl	8000648 <__aeabi_dmul>
 80156f0:	4b08      	ldr	r3, [pc, #32]	@ (8015714 <_dtoa_r+0x58c>)
 80156f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80156f6:	2200      	movs	r2, #0
 80156f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80156fc:	f7ea ffa4 	bl	8000648 <__aeabi_dmul>
 8015700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015704:	e7c4      	b.n	8015690 <_dtoa_r+0x508>
 8015706:	bf00      	nop
 8015708:	0801bd78 	.word	0x0801bd78
 801570c:	0801bd50 	.word	0x0801bd50
 8015710:	3ff00000 	.word	0x3ff00000
 8015714:	40240000 	.word	0x40240000
 8015718:	401c0000 	.word	0x401c0000
 801571c:	40140000 	.word	0x40140000
 8015720:	3fe00000 	.word	0x3fe00000
 8015724:	4631      	mov	r1, r6
 8015726:	4628      	mov	r0, r5
 8015728:	f7ea ff8e 	bl	8000648 <__aeabi_dmul>
 801572c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015730:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015732:	4656      	mov	r6, sl
 8015734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015738:	f7eb fa36 	bl	8000ba8 <__aeabi_d2iz>
 801573c:	4605      	mov	r5, r0
 801573e:	f7ea ff19 	bl	8000574 <__aeabi_i2d>
 8015742:	4602      	mov	r2, r0
 8015744:	460b      	mov	r3, r1
 8015746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801574a:	f7ea fdc5 	bl	80002d8 <__aeabi_dsub>
 801574e:	3530      	adds	r5, #48	@ 0x30
 8015750:	f806 5b01 	strb.w	r5, [r6], #1
 8015754:	4602      	mov	r2, r0
 8015756:	460b      	mov	r3, r1
 8015758:	42a6      	cmp	r6, r4
 801575a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801575e:	f04f 0200 	mov.w	r2, #0
 8015762:	d124      	bne.n	80157ae <_dtoa_r+0x626>
 8015764:	4baf      	ldr	r3, [pc, #700]	@ (8015a24 <_dtoa_r+0x89c>)
 8015766:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801576a:	f7ea fdb7 	bl	80002dc <__adddf3>
 801576e:	4602      	mov	r2, r0
 8015770:	460b      	mov	r3, r1
 8015772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015776:	f7eb f9f7 	bl	8000b68 <__aeabi_dcmpgt>
 801577a:	2800      	cmp	r0, #0
 801577c:	d163      	bne.n	8015846 <_dtoa_r+0x6be>
 801577e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015782:	49a8      	ldr	r1, [pc, #672]	@ (8015a24 <_dtoa_r+0x89c>)
 8015784:	2000      	movs	r0, #0
 8015786:	f7ea fda7 	bl	80002d8 <__aeabi_dsub>
 801578a:	4602      	mov	r2, r0
 801578c:	460b      	mov	r3, r1
 801578e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015792:	f7eb f9cb 	bl	8000b2c <__aeabi_dcmplt>
 8015796:	2800      	cmp	r0, #0
 8015798:	f43f af14 	beq.w	80155c4 <_dtoa_r+0x43c>
 801579c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801579e:	1e73      	subs	r3, r6, #1
 80157a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80157a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80157a6:	2b30      	cmp	r3, #48	@ 0x30
 80157a8:	d0f8      	beq.n	801579c <_dtoa_r+0x614>
 80157aa:	4647      	mov	r7, r8
 80157ac:	e03b      	b.n	8015826 <_dtoa_r+0x69e>
 80157ae:	4b9e      	ldr	r3, [pc, #632]	@ (8015a28 <_dtoa_r+0x8a0>)
 80157b0:	f7ea ff4a 	bl	8000648 <__aeabi_dmul>
 80157b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157b8:	e7bc      	b.n	8015734 <_dtoa_r+0x5ac>
 80157ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80157be:	4656      	mov	r6, sl
 80157c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157c4:	4620      	mov	r0, r4
 80157c6:	4629      	mov	r1, r5
 80157c8:	f7eb f868 	bl	800089c <__aeabi_ddiv>
 80157cc:	f7eb f9ec 	bl	8000ba8 <__aeabi_d2iz>
 80157d0:	4680      	mov	r8, r0
 80157d2:	f7ea fecf 	bl	8000574 <__aeabi_i2d>
 80157d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157da:	f7ea ff35 	bl	8000648 <__aeabi_dmul>
 80157de:	4602      	mov	r2, r0
 80157e0:	460b      	mov	r3, r1
 80157e2:	4620      	mov	r0, r4
 80157e4:	4629      	mov	r1, r5
 80157e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80157ea:	f7ea fd75 	bl	80002d8 <__aeabi_dsub>
 80157ee:	f806 4b01 	strb.w	r4, [r6], #1
 80157f2:	9d03      	ldr	r5, [sp, #12]
 80157f4:	eba6 040a 	sub.w	r4, r6, sl
 80157f8:	42a5      	cmp	r5, r4
 80157fa:	4602      	mov	r2, r0
 80157fc:	460b      	mov	r3, r1
 80157fe:	d133      	bne.n	8015868 <_dtoa_r+0x6e0>
 8015800:	f7ea fd6c 	bl	80002dc <__adddf3>
 8015804:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015808:	4604      	mov	r4, r0
 801580a:	460d      	mov	r5, r1
 801580c:	f7eb f9ac 	bl	8000b68 <__aeabi_dcmpgt>
 8015810:	b9c0      	cbnz	r0, 8015844 <_dtoa_r+0x6bc>
 8015812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015816:	4620      	mov	r0, r4
 8015818:	4629      	mov	r1, r5
 801581a:	f7eb f97d 	bl	8000b18 <__aeabi_dcmpeq>
 801581e:	b110      	cbz	r0, 8015826 <_dtoa_r+0x69e>
 8015820:	f018 0f01 	tst.w	r8, #1
 8015824:	d10e      	bne.n	8015844 <_dtoa_r+0x6bc>
 8015826:	9902      	ldr	r1, [sp, #8]
 8015828:	4648      	mov	r0, r9
 801582a:	f000 fbbd 	bl	8015fa8 <_Bfree>
 801582e:	2300      	movs	r3, #0
 8015830:	7033      	strb	r3, [r6, #0]
 8015832:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015834:	3701      	adds	r7, #1
 8015836:	601f      	str	r7, [r3, #0]
 8015838:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801583a:	2b00      	cmp	r3, #0
 801583c:	f000 824b 	beq.w	8015cd6 <_dtoa_r+0xb4e>
 8015840:	601e      	str	r6, [r3, #0]
 8015842:	e248      	b.n	8015cd6 <_dtoa_r+0xb4e>
 8015844:	46b8      	mov	r8, r7
 8015846:	4633      	mov	r3, r6
 8015848:	461e      	mov	r6, r3
 801584a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801584e:	2a39      	cmp	r2, #57	@ 0x39
 8015850:	d106      	bne.n	8015860 <_dtoa_r+0x6d8>
 8015852:	459a      	cmp	sl, r3
 8015854:	d1f8      	bne.n	8015848 <_dtoa_r+0x6c0>
 8015856:	2230      	movs	r2, #48	@ 0x30
 8015858:	f108 0801 	add.w	r8, r8, #1
 801585c:	f88a 2000 	strb.w	r2, [sl]
 8015860:	781a      	ldrb	r2, [r3, #0]
 8015862:	3201      	adds	r2, #1
 8015864:	701a      	strb	r2, [r3, #0]
 8015866:	e7a0      	b.n	80157aa <_dtoa_r+0x622>
 8015868:	4b6f      	ldr	r3, [pc, #444]	@ (8015a28 <_dtoa_r+0x8a0>)
 801586a:	2200      	movs	r2, #0
 801586c:	f7ea feec 	bl	8000648 <__aeabi_dmul>
 8015870:	2200      	movs	r2, #0
 8015872:	2300      	movs	r3, #0
 8015874:	4604      	mov	r4, r0
 8015876:	460d      	mov	r5, r1
 8015878:	f7eb f94e 	bl	8000b18 <__aeabi_dcmpeq>
 801587c:	2800      	cmp	r0, #0
 801587e:	d09f      	beq.n	80157c0 <_dtoa_r+0x638>
 8015880:	e7d1      	b.n	8015826 <_dtoa_r+0x69e>
 8015882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015884:	2a00      	cmp	r2, #0
 8015886:	f000 80ea 	beq.w	8015a5e <_dtoa_r+0x8d6>
 801588a:	9a07      	ldr	r2, [sp, #28]
 801588c:	2a01      	cmp	r2, #1
 801588e:	f300 80cd 	bgt.w	8015a2c <_dtoa_r+0x8a4>
 8015892:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015894:	2a00      	cmp	r2, #0
 8015896:	f000 80c1 	beq.w	8015a1c <_dtoa_r+0x894>
 801589a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801589e:	9c08      	ldr	r4, [sp, #32]
 80158a0:	9e00      	ldr	r6, [sp, #0]
 80158a2:	9a00      	ldr	r2, [sp, #0]
 80158a4:	441a      	add	r2, r3
 80158a6:	9200      	str	r2, [sp, #0]
 80158a8:	9a06      	ldr	r2, [sp, #24]
 80158aa:	2101      	movs	r1, #1
 80158ac:	441a      	add	r2, r3
 80158ae:	4648      	mov	r0, r9
 80158b0:	9206      	str	r2, [sp, #24]
 80158b2:	f000 fc77 	bl	80161a4 <__i2b>
 80158b6:	4605      	mov	r5, r0
 80158b8:	b166      	cbz	r6, 80158d4 <_dtoa_r+0x74c>
 80158ba:	9b06      	ldr	r3, [sp, #24]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	dd09      	ble.n	80158d4 <_dtoa_r+0x74c>
 80158c0:	42b3      	cmp	r3, r6
 80158c2:	9a00      	ldr	r2, [sp, #0]
 80158c4:	bfa8      	it	ge
 80158c6:	4633      	movge	r3, r6
 80158c8:	1ad2      	subs	r2, r2, r3
 80158ca:	9200      	str	r2, [sp, #0]
 80158cc:	9a06      	ldr	r2, [sp, #24]
 80158ce:	1af6      	subs	r6, r6, r3
 80158d0:	1ad3      	subs	r3, r2, r3
 80158d2:	9306      	str	r3, [sp, #24]
 80158d4:	9b08      	ldr	r3, [sp, #32]
 80158d6:	b30b      	cbz	r3, 801591c <_dtoa_r+0x794>
 80158d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158da:	2b00      	cmp	r3, #0
 80158dc:	f000 80c6 	beq.w	8015a6c <_dtoa_r+0x8e4>
 80158e0:	2c00      	cmp	r4, #0
 80158e2:	f000 80c0 	beq.w	8015a66 <_dtoa_r+0x8de>
 80158e6:	4629      	mov	r1, r5
 80158e8:	4622      	mov	r2, r4
 80158ea:	4648      	mov	r0, r9
 80158ec:	f000 fd12 	bl	8016314 <__pow5mult>
 80158f0:	9a02      	ldr	r2, [sp, #8]
 80158f2:	4601      	mov	r1, r0
 80158f4:	4605      	mov	r5, r0
 80158f6:	4648      	mov	r0, r9
 80158f8:	f000 fc6a 	bl	80161d0 <__multiply>
 80158fc:	9902      	ldr	r1, [sp, #8]
 80158fe:	4680      	mov	r8, r0
 8015900:	4648      	mov	r0, r9
 8015902:	f000 fb51 	bl	8015fa8 <_Bfree>
 8015906:	9b08      	ldr	r3, [sp, #32]
 8015908:	1b1b      	subs	r3, r3, r4
 801590a:	9308      	str	r3, [sp, #32]
 801590c:	f000 80b1 	beq.w	8015a72 <_dtoa_r+0x8ea>
 8015910:	9a08      	ldr	r2, [sp, #32]
 8015912:	4641      	mov	r1, r8
 8015914:	4648      	mov	r0, r9
 8015916:	f000 fcfd 	bl	8016314 <__pow5mult>
 801591a:	9002      	str	r0, [sp, #8]
 801591c:	2101      	movs	r1, #1
 801591e:	4648      	mov	r0, r9
 8015920:	f000 fc40 	bl	80161a4 <__i2b>
 8015924:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015926:	4604      	mov	r4, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	f000 81d8 	beq.w	8015cde <_dtoa_r+0xb56>
 801592e:	461a      	mov	r2, r3
 8015930:	4601      	mov	r1, r0
 8015932:	4648      	mov	r0, r9
 8015934:	f000 fcee 	bl	8016314 <__pow5mult>
 8015938:	9b07      	ldr	r3, [sp, #28]
 801593a:	2b01      	cmp	r3, #1
 801593c:	4604      	mov	r4, r0
 801593e:	f300 809f 	bgt.w	8015a80 <_dtoa_r+0x8f8>
 8015942:	9b04      	ldr	r3, [sp, #16]
 8015944:	2b00      	cmp	r3, #0
 8015946:	f040 8097 	bne.w	8015a78 <_dtoa_r+0x8f0>
 801594a:	9b05      	ldr	r3, [sp, #20]
 801594c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015950:	2b00      	cmp	r3, #0
 8015952:	f040 8093 	bne.w	8015a7c <_dtoa_r+0x8f4>
 8015956:	9b05      	ldr	r3, [sp, #20]
 8015958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801595c:	0d1b      	lsrs	r3, r3, #20
 801595e:	051b      	lsls	r3, r3, #20
 8015960:	b133      	cbz	r3, 8015970 <_dtoa_r+0x7e8>
 8015962:	9b00      	ldr	r3, [sp, #0]
 8015964:	3301      	adds	r3, #1
 8015966:	9300      	str	r3, [sp, #0]
 8015968:	9b06      	ldr	r3, [sp, #24]
 801596a:	3301      	adds	r3, #1
 801596c:	9306      	str	r3, [sp, #24]
 801596e:	2301      	movs	r3, #1
 8015970:	9308      	str	r3, [sp, #32]
 8015972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015974:	2b00      	cmp	r3, #0
 8015976:	f000 81b8 	beq.w	8015cea <_dtoa_r+0xb62>
 801597a:	6923      	ldr	r3, [r4, #16]
 801597c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015980:	6918      	ldr	r0, [r3, #16]
 8015982:	f000 fbc3 	bl	801610c <__hi0bits>
 8015986:	f1c0 0020 	rsb	r0, r0, #32
 801598a:	9b06      	ldr	r3, [sp, #24]
 801598c:	4418      	add	r0, r3
 801598e:	f010 001f 	ands.w	r0, r0, #31
 8015992:	f000 8082 	beq.w	8015a9a <_dtoa_r+0x912>
 8015996:	f1c0 0320 	rsb	r3, r0, #32
 801599a:	2b04      	cmp	r3, #4
 801599c:	dd73      	ble.n	8015a86 <_dtoa_r+0x8fe>
 801599e:	9b00      	ldr	r3, [sp, #0]
 80159a0:	f1c0 001c 	rsb	r0, r0, #28
 80159a4:	4403      	add	r3, r0
 80159a6:	9300      	str	r3, [sp, #0]
 80159a8:	9b06      	ldr	r3, [sp, #24]
 80159aa:	4403      	add	r3, r0
 80159ac:	4406      	add	r6, r0
 80159ae:	9306      	str	r3, [sp, #24]
 80159b0:	9b00      	ldr	r3, [sp, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	dd05      	ble.n	80159c2 <_dtoa_r+0x83a>
 80159b6:	9902      	ldr	r1, [sp, #8]
 80159b8:	461a      	mov	r2, r3
 80159ba:	4648      	mov	r0, r9
 80159bc:	f000 fd04 	bl	80163c8 <__lshift>
 80159c0:	9002      	str	r0, [sp, #8]
 80159c2:	9b06      	ldr	r3, [sp, #24]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	dd05      	ble.n	80159d4 <_dtoa_r+0x84c>
 80159c8:	4621      	mov	r1, r4
 80159ca:	461a      	mov	r2, r3
 80159cc:	4648      	mov	r0, r9
 80159ce:	f000 fcfb 	bl	80163c8 <__lshift>
 80159d2:	4604      	mov	r4, r0
 80159d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d061      	beq.n	8015a9e <_dtoa_r+0x916>
 80159da:	9802      	ldr	r0, [sp, #8]
 80159dc:	4621      	mov	r1, r4
 80159de:	f000 fd5f 	bl	80164a0 <__mcmp>
 80159e2:	2800      	cmp	r0, #0
 80159e4:	da5b      	bge.n	8015a9e <_dtoa_r+0x916>
 80159e6:	2300      	movs	r3, #0
 80159e8:	9902      	ldr	r1, [sp, #8]
 80159ea:	220a      	movs	r2, #10
 80159ec:	4648      	mov	r0, r9
 80159ee:	f000 fafd 	bl	8015fec <__multadd>
 80159f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159f4:	9002      	str	r0, [sp, #8]
 80159f6:	f107 38ff 	add.w	r8, r7, #4294967295
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	f000 8177 	beq.w	8015cee <_dtoa_r+0xb66>
 8015a00:	4629      	mov	r1, r5
 8015a02:	2300      	movs	r3, #0
 8015a04:	220a      	movs	r2, #10
 8015a06:	4648      	mov	r0, r9
 8015a08:	f000 faf0 	bl	8015fec <__multadd>
 8015a0c:	f1bb 0f00 	cmp.w	fp, #0
 8015a10:	4605      	mov	r5, r0
 8015a12:	dc6f      	bgt.n	8015af4 <_dtoa_r+0x96c>
 8015a14:	9b07      	ldr	r3, [sp, #28]
 8015a16:	2b02      	cmp	r3, #2
 8015a18:	dc49      	bgt.n	8015aae <_dtoa_r+0x926>
 8015a1a:	e06b      	b.n	8015af4 <_dtoa_r+0x96c>
 8015a1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015a1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015a22:	e73c      	b.n	801589e <_dtoa_r+0x716>
 8015a24:	3fe00000 	.word	0x3fe00000
 8015a28:	40240000 	.word	0x40240000
 8015a2c:	9b03      	ldr	r3, [sp, #12]
 8015a2e:	1e5c      	subs	r4, r3, #1
 8015a30:	9b08      	ldr	r3, [sp, #32]
 8015a32:	42a3      	cmp	r3, r4
 8015a34:	db09      	blt.n	8015a4a <_dtoa_r+0x8c2>
 8015a36:	1b1c      	subs	r4, r3, r4
 8015a38:	9b03      	ldr	r3, [sp, #12]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	f6bf af30 	bge.w	80158a0 <_dtoa_r+0x718>
 8015a40:	9b00      	ldr	r3, [sp, #0]
 8015a42:	9a03      	ldr	r2, [sp, #12]
 8015a44:	1a9e      	subs	r6, r3, r2
 8015a46:	2300      	movs	r3, #0
 8015a48:	e72b      	b.n	80158a2 <_dtoa_r+0x71a>
 8015a4a:	9b08      	ldr	r3, [sp, #32]
 8015a4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015a4e:	9408      	str	r4, [sp, #32]
 8015a50:	1ae3      	subs	r3, r4, r3
 8015a52:	441a      	add	r2, r3
 8015a54:	9e00      	ldr	r6, [sp, #0]
 8015a56:	9b03      	ldr	r3, [sp, #12]
 8015a58:	920d      	str	r2, [sp, #52]	@ 0x34
 8015a5a:	2400      	movs	r4, #0
 8015a5c:	e721      	b.n	80158a2 <_dtoa_r+0x71a>
 8015a5e:	9c08      	ldr	r4, [sp, #32]
 8015a60:	9e00      	ldr	r6, [sp, #0]
 8015a62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015a64:	e728      	b.n	80158b8 <_dtoa_r+0x730>
 8015a66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015a6a:	e751      	b.n	8015910 <_dtoa_r+0x788>
 8015a6c:	9a08      	ldr	r2, [sp, #32]
 8015a6e:	9902      	ldr	r1, [sp, #8]
 8015a70:	e750      	b.n	8015914 <_dtoa_r+0x78c>
 8015a72:	f8cd 8008 	str.w	r8, [sp, #8]
 8015a76:	e751      	b.n	801591c <_dtoa_r+0x794>
 8015a78:	2300      	movs	r3, #0
 8015a7a:	e779      	b.n	8015970 <_dtoa_r+0x7e8>
 8015a7c:	9b04      	ldr	r3, [sp, #16]
 8015a7e:	e777      	b.n	8015970 <_dtoa_r+0x7e8>
 8015a80:	2300      	movs	r3, #0
 8015a82:	9308      	str	r3, [sp, #32]
 8015a84:	e779      	b.n	801597a <_dtoa_r+0x7f2>
 8015a86:	d093      	beq.n	80159b0 <_dtoa_r+0x828>
 8015a88:	9a00      	ldr	r2, [sp, #0]
 8015a8a:	331c      	adds	r3, #28
 8015a8c:	441a      	add	r2, r3
 8015a8e:	9200      	str	r2, [sp, #0]
 8015a90:	9a06      	ldr	r2, [sp, #24]
 8015a92:	441a      	add	r2, r3
 8015a94:	441e      	add	r6, r3
 8015a96:	9206      	str	r2, [sp, #24]
 8015a98:	e78a      	b.n	80159b0 <_dtoa_r+0x828>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	e7f4      	b.n	8015a88 <_dtoa_r+0x900>
 8015a9e:	9b03      	ldr	r3, [sp, #12]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	46b8      	mov	r8, r7
 8015aa4:	dc20      	bgt.n	8015ae8 <_dtoa_r+0x960>
 8015aa6:	469b      	mov	fp, r3
 8015aa8:	9b07      	ldr	r3, [sp, #28]
 8015aaa:	2b02      	cmp	r3, #2
 8015aac:	dd1e      	ble.n	8015aec <_dtoa_r+0x964>
 8015aae:	f1bb 0f00 	cmp.w	fp, #0
 8015ab2:	f47f adb1 	bne.w	8015618 <_dtoa_r+0x490>
 8015ab6:	4621      	mov	r1, r4
 8015ab8:	465b      	mov	r3, fp
 8015aba:	2205      	movs	r2, #5
 8015abc:	4648      	mov	r0, r9
 8015abe:	f000 fa95 	bl	8015fec <__multadd>
 8015ac2:	4601      	mov	r1, r0
 8015ac4:	4604      	mov	r4, r0
 8015ac6:	9802      	ldr	r0, [sp, #8]
 8015ac8:	f000 fcea 	bl	80164a0 <__mcmp>
 8015acc:	2800      	cmp	r0, #0
 8015ace:	f77f ada3 	ble.w	8015618 <_dtoa_r+0x490>
 8015ad2:	4656      	mov	r6, sl
 8015ad4:	2331      	movs	r3, #49	@ 0x31
 8015ad6:	f806 3b01 	strb.w	r3, [r6], #1
 8015ada:	f108 0801 	add.w	r8, r8, #1
 8015ade:	e59f      	b.n	8015620 <_dtoa_r+0x498>
 8015ae0:	9c03      	ldr	r4, [sp, #12]
 8015ae2:	46b8      	mov	r8, r7
 8015ae4:	4625      	mov	r5, r4
 8015ae6:	e7f4      	b.n	8015ad2 <_dtoa_r+0x94a>
 8015ae8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	f000 8101 	beq.w	8015cf6 <_dtoa_r+0xb6e>
 8015af4:	2e00      	cmp	r6, #0
 8015af6:	dd05      	ble.n	8015b04 <_dtoa_r+0x97c>
 8015af8:	4629      	mov	r1, r5
 8015afa:	4632      	mov	r2, r6
 8015afc:	4648      	mov	r0, r9
 8015afe:	f000 fc63 	bl	80163c8 <__lshift>
 8015b02:	4605      	mov	r5, r0
 8015b04:	9b08      	ldr	r3, [sp, #32]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d05c      	beq.n	8015bc4 <_dtoa_r+0xa3c>
 8015b0a:	6869      	ldr	r1, [r5, #4]
 8015b0c:	4648      	mov	r0, r9
 8015b0e:	f000 fa0b 	bl	8015f28 <_Balloc>
 8015b12:	4606      	mov	r6, r0
 8015b14:	b928      	cbnz	r0, 8015b22 <_dtoa_r+0x99a>
 8015b16:	4b82      	ldr	r3, [pc, #520]	@ (8015d20 <_dtoa_r+0xb98>)
 8015b18:	4602      	mov	r2, r0
 8015b1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015b1e:	f7ff bb4a 	b.w	80151b6 <_dtoa_r+0x2e>
 8015b22:	692a      	ldr	r2, [r5, #16]
 8015b24:	3202      	adds	r2, #2
 8015b26:	0092      	lsls	r2, r2, #2
 8015b28:	f105 010c 	add.w	r1, r5, #12
 8015b2c:	300c      	adds	r0, #12
 8015b2e:	f7ff fa8e 	bl	801504e <memcpy>
 8015b32:	2201      	movs	r2, #1
 8015b34:	4631      	mov	r1, r6
 8015b36:	4648      	mov	r0, r9
 8015b38:	f000 fc46 	bl	80163c8 <__lshift>
 8015b3c:	f10a 0301 	add.w	r3, sl, #1
 8015b40:	9300      	str	r3, [sp, #0]
 8015b42:	eb0a 030b 	add.w	r3, sl, fp
 8015b46:	9308      	str	r3, [sp, #32]
 8015b48:	9b04      	ldr	r3, [sp, #16]
 8015b4a:	f003 0301 	and.w	r3, r3, #1
 8015b4e:	462f      	mov	r7, r5
 8015b50:	9306      	str	r3, [sp, #24]
 8015b52:	4605      	mov	r5, r0
 8015b54:	9b00      	ldr	r3, [sp, #0]
 8015b56:	9802      	ldr	r0, [sp, #8]
 8015b58:	4621      	mov	r1, r4
 8015b5a:	f103 3bff 	add.w	fp, r3, #4294967295
 8015b5e:	f7ff fa8b 	bl	8015078 <quorem>
 8015b62:	4603      	mov	r3, r0
 8015b64:	3330      	adds	r3, #48	@ 0x30
 8015b66:	9003      	str	r0, [sp, #12]
 8015b68:	4639      	mov	r1, r7
 8015b6a:	9802      	ldr	r0, [sp, #8]
 8015b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b6e:	f000 fc97 	bl	80164a0 <__mcmp>
 8015b72:	462a      	mov	r2, r5
 8015b74:	9004      	str	r0, [sp, #16]
 8015b76:	4621      	mov	r1, r4
 8015b78:	4648      	mov	r0, r9
 8015b7a:	f000 fcad 	bl	80164d8 <__mdiff>
 8015b7e:	68c2      	ldr	r2, [r0, #12]
 8015b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b82:	4606      	mov	r6, r0
 8015b84:	bb02      	cbnz	r2, 8015bc8 <_dtoa_r+0xa40>
 8015b86:	4601      	mov	r1, r0
 8015b88:	9802      	ldr	r0, [sp, #8]
 8015b8a:	f000 fc89 	bl	80164a0 <__mcmp>
 8015b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b90:	4602      	mov	r2, r0
 8015b92:	4631      	mov	r1, r6
 8015b94:	4648      	mov	r0, r9
 8015b96:	920c      	str	r2, [sp, #48]	@ 0x30
 8015b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b9a:	f000 fa05 	bl	8015fa8 <_Bfree>
 8015b9e:	9b07      	ldr	r3, [sp, #28]
 8015ba0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015ba2:	9e00      	ldr	r6, [sp, #0]
 8015ba4:	ea42 0103 	orr.w	r1, r2, r3
 8015ba8:	9b06      	ldr	r3, [sp, #24]
 8015baa:	4319      	orrs	r1, r3
 8015bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bae:	d10d      	bne.n	8015bcc <_dtoa_r+0xa44>
 8015bb0:	2b39      	cmp	r3, #57	@ 0x39
 8015bb2:	d027      	beq.n	8015c04 <_dtoa_r+0xa7c>
 8015bb4:	9a04      	ldr	r2, [sp, #16]
 8015bb6:	2a00      	cmp	r2, #0
 8015bb8:	dd01      	ble.n	8015bbe <_dtoa_r+0xa36>
 8015bba:	9b03      	ldr	r3, [sp, #12]
 8015bbc:	3331      	adds	r3, #49	@ 0x31
 8015bbe:	f88b 3000 	strb.w	r3, [fp]
 8015bc2:	e52e      	b.n	8015622 <_dtoa_r+0x49a>
 8015bc4:	4628      	mov	r0, r5
 8015bc6:	e7b9      	b.n	8015b3c <_dtoa_r+0x9b4>
 8015bc8:	2201      	movs	r2, #1
 8015bca:	e7e2      	b.n	8015b92 <_dtoa_r+0xa0a>
 8015bcc:	9904      	ldr	r1, [sp, #16]
 8015bce:	2900      	cmp	r1, #0
 8015bd0:	db04      	blt.n	8015bdc <_dtoa_r+0xa54>
 8015bd2:	9807      	ldr	r0, [sp, #28]
 8015bd4:	4301      	orrs	r1, r0
 8015bd6:	9806      	ldr	r0, [sp, #24]
 8015bd8:	4301      	orrs	r1, r0
 8015bda:	d120      	bne.n	8015c1e <_dtoa_r+0xa96>
 8015bdc:	2a00      	cmp	r2, #0
 8015bde:	ddee      	ble.n	8015bbe <_dtoa_r+0xa36>
 8015be0:	9902      	ldr	r1, [sp, #8]
 8015be2:	9300      	str	r3, [sp, #0]
 8015be4:	2201      	movs	r2, #1
 8015be6:	4648      	mov	r0, r9
 8015be8:	f000 fbee 	bl	80163c8 <__lshift>
 8015bec:	4621      	mov	r1, r4
 8015bee:	9002      	str	r0, [sp, #8]
 8015bf0:	f000 fc56 	bl	80164a0 <__mcmp>
 8015bf4:	2800      	cmp	r0, #0
 8015bf6:	9b00      	ldr	r3, [sp, #0]
 8015bf8:	dc02      	bgt.n	8015c00 <_dtoa_r+0xa78>
 8015bfa:	d1e0      	bne.n	8015bbe <_dtoa_r+0xa36>
 8015bfc:	07da      	lsls	r2, r3, #31
 8015bfe:	d5de      	bpl.n	8015bbe <_dtoa_r+0xa36>
 8015c00:	2b39      	cmp	r3, #57	@ 0x39
 8015c02:	d1da      	bne.n	8015bba <_dtoa_r+0xa32>
 8015c04:	2339      	movs	r3, #57	@ 0x39
 8015c06:	f88b 3000 	strb.w	r3, [fp]
 8015c0a:	4633      	mov	r3, r6
 8015c0c:	461e      	mov	r6, r3
 8015c0e:	3b01      	subs	r3, #1
 8015c10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015c14:	2a39      	cmp	r2, #57	@ 0x39
 8015c16:	d04e      	beq.n	8015cb6 <_dtoa_r+0xb2e>
 8015c18:	3201      	adds	r2, #1
 8015c1a:	701a      	strb	r2, [r3, #0]
 8015c1c:	e501      	b.n	8015622 <_dtoa_r+0x49a>
 8015c1e:	2a00      	cmp	r2, #0
 8015c20:	dd03      	ble.n	8015c2a <_dtoa_r+0xaa2>
 8015c22:	2b39      	cmp	r3, #57	@ 0x39
 8015c24:	d0ee      	beq.n	8015c04 <_dtoa_r+0xa7c>
 8015c26:	3301      	adds	r3, #1
 8015c28:	e7c9      	b.n	8015bbe <_dtoa_r+0xa36>
 8015c2a:	9a00      	ldr	r2, [sp, #0]
 8015c2c:	9908      	ldr	r1, [sp, #32]
 8015c2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015c32:	428a      	cmp	r2, r1
 8015c34:	d028      	beq.n	8015c88 <_dtoa_r+0xb00>
 8015c36:	9902      	ldr	r1, [sp, #8]
 8015c38:	2300      	movs	r3, #0
 8015c3a:	220a      	movs	r2, #10
 8015c3c:	4648      	mov	r0, r9
 8015c3e:	f000 f9d5 	bl	8015fec <__multadd>
 8015c42:	42af      	cmp	r7, r5
 8015c44:	9002      	str	r0, [sp, #8]
 8015c46:	f04f 0300 	mov.w	r3, #0
 8015c4a:	f04f 020a 	mov.w	r2, #10
 8015c4e:	4639      	mov	r1, r7
 8015c50:	4648      	mov	r0, r9
 8015c52:	d107      	bne.n	8015c64 <_dtoa_r+0xadc>
 8015c54:	f000 f9ca 	bl	8015fec <__multadd>
 8015c58:	4607      	mov	r7, r0
 8015c5a:	4605      	mov	r5, r0
 8015c5c:	9b00      	ldr	r3, [sp, #0]
 8015c5e:	3301      	adds	r3, #1
 8015c60:	9300      	str	r3, [sp, #0]
 8015c62:	e777      	b.n	8015b54 <_dtoa_r+0x9cc>
 8015c64:	f000 f9c2 	bl	8015fec <__multadd>
 8015c68:	4629      	mov	r1, r5
 8015c6a:	4607      	mov	r7, r0
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	220a      	movs	r2, #10
 8015c70:	4648      	mov	r0, r9
 8015c72:	f000 f9bb 	bl	8015fec <__multadd>
 8015c76:	4605      	mov	r5, r0
 8015c78:	e7f0      	b.n	8015c5c <_dtoa_r+0xad4>
 8015c7a:	f1bb 0f00 	cmp.w	fp, #0
 8015c7e:	bfcc      	ite	gt
 8015c80:	465e      	movgt	r6, fp
 8015c82:	2601      	movle	r6, #1
 8015c84:	4456      	add	r6, sl
 8015c86:	2700      	movs	r7, #0
 8015c88:	9902      	ldr	r1, [sp, #8]
 8015c8a:	9300      	str	r3, [sp, #0]
 8015c8c:	2201      	movs	r2, #1
 8015c8e:	4648      	mov	r0, r9
 8015c90:	f000 fb9a 	bl	80163c8 <__lshift>
 8015c94:	4621      	mov	r1, r4
 8015c96:	9002      	str	r0, [sp, #8]
 8015c98:	f000 fc02 	bl	80164a0 <__mcmp>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	dcb4      	bgt.n	8015c0a <_dtoa_r+0xa82>
 8015ca0:	d102      	bne.n	8015ca8 <_dtoa_r+0xb20>
 8015ca2:	9b00      	ldr	r3, [sp, #0]
 8015ca4:	07db      	lsls	r3, r3, #31
 8015ca6:	d4b0      	bmi.n	8015c0a <_dtoa_r+0xa82>
 8015ca8:	4633      	mov	r3, r6
 8015caa:	461e      	mov	r6, r3
 8015cac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015cb0:	2a30      	cmp	r2, #48	@ 0x30
 8015cb2:	d0fa      	beq.n	8015caa <_dtoa_r+0xb22>
 8015cb4:	e4b5      	b.n	8015622 <_dtoa_r+0x49a>
 8015cb6:	459a      	cmp	sl, r3
 8015cb8:	d1a8      	bne.n	8015c0c <_dtoa_r+0xa84>
 8015cba:	2331      	movs	r3, #49	@ 0x31
 8015cbc:	f108 0801 	add.w	r8, r8, #1
 8015cc0:	f88a 3000 	strb.w	r3, [sl]
 8015cc4:	e4ad      	b.n	8015622 <_dtoa_r+0x49a>
 8015cc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015cc8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015d24 <_dtoa_r+0xb9c>
 8015ccc:	b11b      	cbz	r3, 8015cd6 <_dtoa_r+0xb4e>
 8015cce:	f10a 0308 	add.w	r3, sl, #8
 8015cd2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015cd4:	6013      	str	r3, [r2, #0]
 8015cd6:	4650      	mov	r0, sl
 8015cd8:	b017      	add	sp, #92	@ 0x5c
 8015cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cde:	9b07      	ldr	r3, [sp, #28]
 8015ce0:	2b01      	cmp	r3, #1
 8015ce2:	f77f ae2e 	ble.w	8015942 <_dtoa_r+0x7ba>
 8015ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ce8:	9308      	str	r3, [sp, #32]
 8015cea:	2001      	movs	r0, #1
 8015cec:	e64d      	b.n	801598a <_dtoa_r+0x802>
 8015cee:	f1bb 0f00 	cmp.w	fp, #0
 8015cf2:	f77f aed9 	ble.w	8015aa8 <_dtoa_r+0x920>
 8015cf6:	4656      	mov	r6, sl
 8015cf8:	9802      	ldr	r0, [sp, #8]
 8015cfa:	4621      	mov	r1, r4
 8015cfc:	f7ff f9bc 	bl	8015078 <quorem>
 8015d00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015d04:	f806 3b01 	strb.w	r3, [r6], #1
 8015d08:	eba6 020a 	sub.w	r2, r6, sl
 8015d0c:	4593      	cmp	fp, r2
 8015d0e:	ddb4      	ble.n	8015c7a <_dtoa_r+0xaf2>
 8015d10:	9902      	ldr	r1, [sp, #8]
 8015d12:	2300      	movs	r3, #0
 8015d14:	220a      	movs	r2, #10
 8015d16:	4648      	mov	r0, r9
 8015d18:	f000 f968 	bl	8015fec <__multadd>
 8015d1c:	9002      	str	r0, [sp, #8]
 8015d1e:	e7eb      	b.n	8015cf8 <_dtoa_r+0xb70>
 8015d20:	0801bc1d 	.word	0x0801bc1d
 8015d24:	0801bba1 	.word	0x0801bba1

08015d28 <_free_r>:
 8015d28:	b538      	push	{r3, r4, r5, lr}
 8015d2a:	4605      	mov	r5, r0
 8015d2c:	2900      	cmp	r1, #0
 8015d2e:	d041      	beq.n	8015db4 <_free_r+0x8c>
 8015d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d34:	1f0c      	subs	r4, r1, #4
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	bfb8      	it	lt
 8015d3a:	18e4      	addlt	r4, r4, r3
 8015d3c:	f000 f8e8 	bl	8015f10 <__malloc_lock>
 8015d40:	4a1d      	ldr	r2, [pc, #116]	@ (8015db8 <_free_r+0x90>)
 8015d42:	6813      	ldr	r3, [r2, #0]
 8015d44:	b933      	cbnz	r3, 8015d54 <_free_r+0x2c>
 8015d46:	6063      	str	r3, [r4, #4]
 8015d48:	6014      	str	r4, [r2, #0]
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d50:	f000 b8e4 	b.w	8015f1c <__malloc_unlock>
 8015d54:	42a3      	cmp	r3, r4
 8015d56:	d908      	bls.n	8015d6a <_free_r+0x42>
 8015d58:	6820      	ldr	r0, [r4, #0]
 8015d5a:	1821      	adds	r1, r4, r0
 8015d5c:	428b      	cmp	r3, r1
 8015d5e:	bf01      	itttt	eq
 8015d60:	6819      	ldreq	r1, [r3, #0]
 8015d62:	685b      	ldreq	r3, [r3, #4]
 8015d64:	1809      	addeq	r1, r1, r0
 8015d66:	6021      	streq	r1, [r4, #0]
 8015d68:	e7ed      	b.n	8015d46 <_free_r+0x1e>
 8015d6a:	461a      	mov	r2, r3
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	b10b      	cbz	r3, 8015d74 <_free_r+0x4c>
 8015d70:	42a3      	cmp	r3, r4
 8015d72:	d9fa      	bls.n	8015d6a <_free_r+0x42>
 8015d74:	6811      	ldr	r1, [r2, #0]
 8015d76:	1850      	adds	r0, r2, r1
 8015d78:	42a0      	cmp	r0, r4
 8015d7a:	d10b      	bne.n	8015d94 <_free_r+0x6c>
 8015d7c:	6820      	ldr	r0, [r4, #0]
 8015d7e:	4401      	add	r1, r0
 8015d80:	1850      	adds	r0, r2, r1
 8015d82:	4283      	cmp	r3, r0
 8015d84:	6011      	str	r1, [r2, #0]
 8015d86:	d1e0      	bne.n	8015d4a <_free_r+0x22>
 8015d88:	6818      	ldr	r0, [r3, #0]
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	6053      	str	r3, [r2, #4]
 8015d8e:	4408      	add	r0, r1
 8015d90:	6010      	str	r0, [r2, #0]
 8015d92:	e7da      	b.n	8015d4a <_free_r+0x22>
 8015d94:	d902      	bls.n	8015d9c <_free_r+0x74>
 8015d96:	230c      	movs	r3, #12
 8015d98:	602b      	str	r3, [r5, #0]
 8015d9a:	e7d6      	b.n	8015d4a <_free_r+0x22>
 8015d9c:	6820      	ldr	r0, [r4, #0]
 8015d9e:	1821      	adds	r1, r4, r0
 8015da0:	428b      	cmp	r3, r1
 8015da2:	bf04      	itt	eq
 8015da4:	6819      	ldreq	r1, [r3, #0]
 8015da6:	685b      	ldreq	r3, [r3, #4]
 8015da8:	6063      	str	r3, [r4, #4]
 8015daa:	bf04      	itt	eq
 8015dac:	1809      	addeq	r1, r1, r0
 8015dae:	6021      	streq	r1, [r4, #0]
 8015db0:	6054      	str	r4, [r2, #4]
 8015db2:	e7ca      	b.n	8015d4a <_free_r+0x22>
 8015db4:	bd38      	pop	{r3, r4, r5, pc}
 8015db6:	bf00      	nop
 8015db8:	200040c4 	.word	0x200040c4

08015dbc <malloc>:
 8015dbc:	4b02      	ldr	r3, [pc, #8]	@ (8015dc8 <malloc+0xc>)
 8015dbe:	4601      	mov	r1, r0
 8015dc0:	6818      	ldr	r0, [r3, #0]
 8015dc2:	f000 b825 	b.w	8015e10 <_malloc_r>
 8015dc6:	bf00      	nop
 8015dc8:	20000054 	.word	0x20000054

08015dcc <sbrk_aligned>:
 8015dcc:	b570      	push	{r4, r5, r6, lr}
 8015dce:	4e0f      	ldr	r6, [pc, #60]	@ (8015e0c <sbrk_aligned+0x40>)
 8015dd0:	460c      	mov	r4, r1
 8015dd2:	6831      	ldr	r1, [r6, #0]
 8015dd4:	4605      	mov	r5, r0
 8015dd6:	b911      	cbnz	r1, 8015dde <sbrk_aligned+0x12>
 8015dd8:	f001 fe88 	bl	8017aec <_sbrk_r>
 8015ddc:	6030      	str	r0, [r6, #0]
 8015dde:	4621      	mov	r1, r4
 8015de0:	4628      	mov	r0, r5
 8015de2:	f001 fe83 	bl	8017aec <_sbrk_r>
 8015de6:	1c43      	adds	r3, r0, #1
 8015de8:	d103      	bne.n	8015df2 <sbrk_aligned+0x26>
 8015dea:	f04f 34ff 	mov.w	r4, #4294967295
 8015dee:	4620      	mov	r0, r4
 8015df0:	bd70      	pop	{r4, r5, r6, pc}
 8015df2:	1cc4      	adds	r4, r0, #3
 8015df4:	f024 0403 	bic.w	r4, r4, #3
 8015df8:	42a0      	cmp	r0, r4
 8015dfa:	d0f8      	beq.n	8015dee <sbrk_aligned+0x22>
 8015dfc:	1a21      	subs	r1, r4, r0
 8015dfe:	4628      	mov	r0, r5
 8015e00:	f001 fe74 	bl	8017aec <_sbrk_r>
 8015e04:	3001      	adds	r0, #1
 8015e06:	d1f2      	bne.n	8015dee <sbrk_aligned+0x22>
 8015e08:	e7ef      	b.n	8015dea <sbrk_aligned+0x1e>
 8015e0a:	bf00      	nop
 8015e0c:	200040c0 	.word	0x200040c0

08015e10 <_malloc_r>:
 8015e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e14:	1ccd      	adds	r5, r1, #3
 8015e16:	f025 0503 	bic.w	r5, r5, #3
 8015e1a:	3508      	adds	r5, #8
 8015e1c:	2d0c      	cmp	r5, #12
 8015e1e:	bf38      	it	cc
 8015e20:	250c      	movcc	r5, #12
 8015e22:	2d00      	cmp	r5, #0
 8015e24:	4606      	mov	r6, r0
 8015e26:	db01      	blt.n	8015e2c <_malloc_r+0x1c>
 8015e28:	42a9      	cmp	r1, r5
 8015e2a:	d904      	bls.n	8015e36 <_malloc_r+0x26>
 8015e2c:	230c      	movs	r3, #12
 8015e2e:	6033      	str	r3, [r6, #0]
 8015e30:	2000      	movs	r0, #0
 8015e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015f0c <_malloc_r+0xfc>
 8015e3a:	f000 f869 	bl	8015f10 <__malloc_lock>
 8015e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8015e42:	461c      	mov	r4, r3
 8015e44:	bb44      	cbnz	r4, 8015e98 <_malloc_r+0x88>
 8015e46:	4629      	mov	r1, r5
 8015e48:	4630      	mov	r0, r6
 8015e4a:	f7ff ffbf 	bl	8015dcc <sbrk_aligned>
 8015e4e:	1c43      	adds	r3, r0, #1
 8015e50:	4604      	mov	r4, r0
 8015e52:	d158      	bne.n	8015f06 <_malloc_r+0xf6>
 8015e54:	f8d8 4000 	ldr.w	r4, [r8]
 8015e58:	4627      	mov	r7, r4
 8015e5a:	2f00      	cmp	r7, #0
 8015e5c:	d143      	bne.n	8015ee6 <_malloc_r+0xd6>
 8015e5e:	2c00      	cmp	r4, #0
 8015e60:	d04b      	beq.n	8015efa <_malloc_r+0xea>
 8015e62:	6823      	ldr	r3, [r4, #0]
 8015e64:	4639      	mov	r1, r7
 8015e66:	4630      	mov	r0, r6
 8015e68:	eb04 0903 	add.w	r9, r4, r3
 8015e6c:	f001 fe3e 	bl	8017aec <_sbrk_r>
 8015e70:	4581      	cmp	r9, r0
 8015e72:	d142      	bne.n	8015efa <_malloc_r+0xea>
 8015e74:	6821      	ldr	r1, [r4, #0]
 8015e76:	1a6d      	subs	r5, r5, r1
 8015e78:	4629      	mov	r1, r5
 8015e7a:	4630      	mov	r0, r6
 8015e7c:	f7ff ffa6 	bl	8015dcc <sbrk_aligned>
 8015e80:	3001      	adds	r0, #1
 8015e82:	d03a      	beq.n	8015efa <_malloc_r+0xea>
 8015e84:	6823      	ldr	r3, [r4, #0]
 8015e86:	442b      	add	r3, r5
 8015e88:	6023      	str	r3, [r4, #0]
 8015e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8015e8e:	685a      	ldr	r2, [r3, #4]
 8015e90:	bb62      	cbnz	r2, 8015eec <_malloc_r+0xdc>
 8015e92:	f8c8 7000 	str.w	r7, [r8]
 8015e96:	e00f      	b.n	8015eb8 <_malloc_r+0xa8>
 8015e98:	6822      	ldr	r2, [r4, #0]
 8015e9a:	1b52      	subs	r2, r2, r5
 8015e9c:	d420      	bmi.n	8015ee0 <_malloc_r+0xd0>
 8015e9e:	2a0b      	cmp	r2, #11
 8015ea0:	d917      	bls.n	8015ed2 <_malloc_r+0xc2>
 8015ea2:	1961      	adds	r1, r4, r5
 8015ea4:	42a3      	cmp	r3, r4
 8015ea6:	6025      	str	r5, [r4, #0]
 8015ea8:	bf18      	it	ne
 8015eaa:	6059      	strne	r1, [r3, #4]
 8015eac:	6863      	ldr	r3, [r4, #4]
 8015eae:	bf08      	it	eq
 8015eb0:	f8c8 1000 	streq.w	r1, [r8]
 8015eb4:	5162      	str	r2, [r4, r5]
 8015eb6:	604b      	str	r3, [r1, #4]
 8015eb8:	4630      	mov	r0, r6
 8015eba:	f000 f82f 	bl	8015f1c <__malloc_unlock>
 8015ebe:	f104 000b 	add.w	r0, r4, #11
 8015ec2:	1d23      	adds	r3, r4, #4
 8015ec4:	f020 0007 	bic.w	r0, r0, #7
 8015ec8:	1ac2      	subs	r2, r0, r3
 8015eca:	bf1c      	itt	ne
 8015ecc:	1a1b      	subne	r3, r3, r0
 8015ece:	50a3      	strne	r3, [r4, r2]
 8015ed0:	e7af      	b.n	8015e32 <_malloc_r+0x22>
 8015ed2:	6862      	ldr	r2, [r4, #4]
 8015ed4:	42a3      	cmp	r3, r4
 8015ed6:	bf0c      	ite	eq
 8015ed8:	f8c8 2000 	streq.w	r2, [r8]
 8015edc:	605a      	strne	r2, [r3, #4]
 8015ede:	e7eb      	b.n	8015eb8 <_malloc_r+0xa8>
 8015ee0:	4623      	mov	r3, r4
 8015ee2:	6864      	ldr	r4, [r4, #4]
 8015ee4:	e7ae      	b.n	8015e44 <_malloc_r+0x34>
 8015ee6:	463c      	mov	r4, r7
 8015ee8:	687f      	ldr	r7, [r7, #4]
 8015eea:	e7b6      	b.n	8015e5a <_malloc_r+0x4a>
 8015eec:	461a      	mov	r2, r3
 8015eee:	685b      	ldr	r3, [r3, #4]
 8015ef0:	42a3      	cmp	r3, r4
 8015ef2:	d1fb      	bne.n	8015eec <_malloc_r+0xdc>
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	6053      	str	r3, [r2, #4]
 8015ef8:	e7de      	b.n	8015eb8 <_malloc_r+0xa8>
 8015efa:	230c      	movs	r3, #12
 8015efc:	6033      	str	r3, [r6, #0]
 8015efe:	4630      	mov	r0, r6
 8015f00:	f000 f80c 	bl	8015f1c <__malloc_unlock>
 8015f04:	e794      	b.n	8015e30 <_malloc_r+0x20>
 8015f06:	6005      	str	r5, [r0, #0]
 8015f08:	e7d6      	b.n	8015eb8 <_malloc_r+0xa8>
 8015f0a:	bf00      	nop
 8015f0c:	200040c4 	.word	0x200040c4

08015f10 <__malloc_lock>:
 8015f10:	4801      	ldr	r0, [pc, #4]	@ (8015f18 <__malloc_lock+0x8>)
 8015f12:	f7ff b89a 	b.w	801504a <__retarget_lock_acquire_recursive>
 8015f16:	bf00      	nop
 8015f18:	200040bc 	.word	0x200040bc

08015f1c <__malloc_unlock>:
 8015f1c:	4801      	ldr	r0, [pc, #4]	@ (8015f24 <__malloc_unlock+0x8>)
 8015f1e:	f7ff b895 	b.w	801504c <__retarget_lock_release_recursive>
 8015f22:	bf00      	nop
 8015f24:	200040bc 	.word	0x200040bc

08015f28 <_Balloc>:
 8015f28:	b570      	push	{r4, r5, r6, lr}
 8015f2a:	69c6      	ldr	r6, [r0, #28]
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	460d      	mov	r5, r1
 8015f30:	b976      	cbnz	r6, 8015f50 <_Balloc+0x28>
 8015f32:	2010      	movs	r0, #16
 8015f34:	f7ff ff42 	bl	8015dbc <malloc>
 8015f38:	4602      	mov	r2, r0
 8015f3a:	61e0      	str	r0, [r4, #28]
 8015f3c:	b920      	cbnz	r0, 8015f48 <_Balloc+0x20>
 8015f3e:	4b18      	ldr	r3, [pc, #96]	@ (8015fa0 <_Balloc+0x78>)
 8015f40:	4818      	ldr	r0, [pc, #96]	@ (8015fa4 <_Balloc+0x7c>)
 8015f42:	216b      	movs	r1, #107	@ 0x6b
 8015f44:	f001 fdec 	bl	8017b20 <__assert_func>
 8015f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f4c:	6006      	str	r6, [r0, #0]
 8015f4e:	60c6      	str	r6, [r0, #12]
 8015f50:	69e6      	ldr	r6, [r4, #28]
 8015f52:	68f3      	ldr	r3, [r6, #12]
 8015f54:	b183      	cbz	r3, 8015f78 <_Balloc+0x50>
 8015f56:	69e3      	ldr	r3, [r4, #28]
 8015f58:	68db      	ldr	r3, [r3, #12]
 8015f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015f5e:	b9b8      	cbnz	r0, 8015f90 <_Balloc+0x68>
 8015f60:	2101      	movs	r1, #1
 8015f62:	fa01 f605 	lsl.w	r6, r1, r5
 8015f66:	1d72      	adds	r2, r6, #5
 8015f68:	0092      	lsls	r2, r2, #2
 8015f6a:	4620      	mov	r0, r4
 8015f6c:	f001 fdf6 	bl	8017b5c <_calloc_r>
 8015f70:	b160      	cbz	r0, 8015f8c <_Balloc+0x64>
 8015f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015f76:	e00e      	b.n	8015f96 <_Balloc+0x6e>
 8015f78:	2221      	movs	r2, #33	@ 0x21
 8015f7a:	2104      	movs	r1, #4
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f001 fded 	bl	8017b5c <_calloc_r>
 8015f82:	69e3      	ldr	r3, [r4, #28]
 8015f84:	60f0      	str	r0, [r6, #12]
 8015f86:	68db      	ldr	r3, [r3, #12]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1e4      	bne.n	8015f56 <_Balloc+0x2e>
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	bd70      	pop	{r4, r5, r6, pc}
 8015f90:	6802      	ldr	r2, [r0, #0]
 8015f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f96:	2300      	movs	r3, #0
 8015f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015f9c:	e7f7      	b.n	8015f8e <_Balloc+0x66>
 8015f9e:	bf00      	nop
 8015fa0:	0801bbae 	.word	0x0801bbae
 8015fa4:	0801bc2e 	.word	0x0801bc2e

08015fa8 <_Bfree>:
 8015fa8:	b570      	push	{r4, r5, r6, lr}
 8015faa:	69c6      	ldr	r6, [r0, #28]
 8015fac:	4605      	mov	r5, r0
 8015fae:	460c      	mov	r4, r1
 8015fb0:	b976      	cbnz	r6, 8015fd0 <_Bfree+0x28>
 8015fb2:	2010      	movs	r0, #16
 8015fb4:	f7ff ff02 	bl	8015dbc <malloc>
 8015fb8:	4602      	mov	r2, r0
 8015fba:	61e8      	str	r0, [r5, #28]
 8015fbc:	b920      	cbnz	r0, 8015fc8 <_Bfree+0x20>
 8015fbe:	4b09      	ldr	r3, [pc, #36]	@ (8015fe4 <_Bfree+0x3c>)
 8015fc0:	4809      	ldr	r0, [pc, #36]	@ (8015fe8 <_Bfree+0x40>)
 8015fc2:	218f      	movs	r1, #143	@ 0x8f
 8015fc4:	f001 fdac 	bl	8017b20 <__assert_func>
 8015fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015fcc:	6006      	str	r6, [r0, #0]
 8015fce:	60c6      	str	r6, [r0, #12]
 8015fd0:	b13c      	cbz	r4, 8015fe2 <_Bfree+0x3a>
 8015fd2:	69eb      	ldr	r3, [r5, #28]
 8015fd4:	6862      	ldr	r2, [r4, #4]
 8015fd6:	68db      	ldr	r3, [r3, #12]
 8015fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015fdc:	6021      	str	r1, [r4, #0]
 8015fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015fe2:	bd70      	pop	{r4, r5, r6, pc}
 8015fe4:	0801bbae 	.word	0x0801bbae
 8015fe8:	0801bc2e 	.word	0x0801bc2e

08015fec <__multadd>:
 8015fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ff0:	690d      	ldr	r5, [r1, #16]
 8015ff2:	4607      	mov	r7, r0
 8015ff4:	460c      	mov	r4, r1
 8015ff6:	461e      	mov	r6, r3
 8015ff8:	f101 0c14 	add.w	ip, r1, #20
 8015ffc:	2000      	movs	r0, #0
 8015ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8016002:	b299      	uxth	r1, r3
 8016004:	fb02 6101 	mla	r1, r2, r1, r6
 8016008:	0c1e      	lsrs	r6, r3, #16
 801600a:	0c0b      	lsrs	r3, r1, #16
 801600c:	fb02 3306 	mla	r3, r2, r6, r3
 8016010:	b289      	uxth	r1, r1
 8016012:	3001      	adds	r0, #1
 8016014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016018:	4285      	cmp	r5, r0
 801601a:	f84c 1b04 	str.w	r1, [ip], #4
 801601e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016022:	dcec      	bgt.n	8015ffe <__multadd+0x12>
 8016024:	b30e      	cbz	r6, 801606a <__multadd+0x7e>
 8016026:	68a3      	ldr	r3, [r4, #8]
 8016028:	42ab      	cmp	r3, r5
 801602a:	dc19      	bgt.n	8016060 <__multadd+0x74>
 801602c:	6861      	ldr	r1, [r4, #4]
 801602e:	4638      	mov	r0, r7
 8016030:	3101      	adds	r1, #1
 8016032:	f7ff ff79 	bl	8015f28 <_Balloc>
 8016036:	4680      	mov	r8, r0
 8016038:	b928      	cbnz	r0, 8016046 <__multadd+0x5a>
 801603a:	4602      	mov	r2, r0
 801603c:	4b0c      	ldr	r3, [pc, #48]	@ (8016070 <__multadd+0x84>)
 801603e:	480d      	ldr	r0, [pc, #52]	@ (8016074 <__multadd+0x88>)
 8016040:	21ba      	movs	r1, #186	@ 0xba
 8016042:	f001 fd6d 	bl	8017b20 <__assert_func>
 8016046:	6922      	ldr	r2, [r4, #16]
 8016048:	3202      	adds	r2, #2
 801604a:	f104 010c 	add.w	r1, r4, #12
 801604e:	0092      	lsls	r2, r2, #2
 8016050:	300c      	adds	r0, #12
 8016052:	f7fe fffc 	bl	801504e <memcpy>
 8016056:	4621      	mov	r1, r4
 8016058:	4638      	mov	r0, r7
 801605a:	f7ff ffa5 	bl	8015fa8 <_Bfree>
 801605e:	4644      	mov	r4, r8
 8016060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016064:	3501      	adds	r5, #1
 8016066:	615e      	str	r6, [r3, #20]
 8016068:	6125      	str	r5, [r4, #16]
 801606a:	4620      	mov	r0, r4
 801606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016070:	0801bc1d 	.word	0x0801bc1d
 8016074:	0801bc2e 	.word	0x0801bc2e

08016078 <__s2b>:
 8016078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801607c:	460c      	mov	r4, r1
 801607e:	4615      	mov	r5, r2
 8016080:	461f      	mov	r7, r3
 8016082:	2209      	movs	r2, #9
 8016084:	3308      	adds	r3, #8
 8016086:	4606      	mov	r6, r0
 8016088:	fb93 f3f2 	sdiv	r3, r3, r2
 801608c:	2100      	movs	r1, #0
 801608e:	2201      	movs	r2, #1
 8016090:	429a      	cmp	r2, r3
 8016092:	db09      	blt.n	80160a8 <__s2b+0x30>
 8016094:	4630      	mov	r0, r6
 8016096:	f7ff ff47 	bl	8015f28 <_Balloc>
 801609a:	b940      	cbnz	r0, 80160ae <__s2b+0x36>
 801609c:	4602      	mov	r2, r0
 801609e:	4b19      	ldr	r3, [pc, #100]	@ (8016104 <__s2b+0x8c>)
 80160a0:	4819      	ldr	r0, [pc, #100]	@ (8016108 <__s2b+0x90>)
 80160a2:	21d3      	movs	r1, #211	@ 0xd3
 80160a4:	f001 fd3c 	bl	8017b20 <__assert_func>
 80160a8:	0052      	lsls	r2, r2, #1
 80160aa:	3101      	adds	r1, #1
 80160ac:	e7f0      	b.n	8016090 <__s2b+0x18>
 80160ae:	9b08      	ldr	r3, [sp, #32]
 80160b0:	6143      	str	r3, [r0, #20]
 80160b2:	2d09      	cmp	r5, #9
 80160b4:	f04f 0301 	mov.w	r3, #1
 80160b8:	6103      	str	r3, [r0, #16]
 80160ba:	dd16      	ble.n	80160ea <__s2b+0x72>
 80160bc:	f104 0909 	add.w	r9, r4, #9
 80160c0:	46c8      	mov	r8, r9
 80160c2:	442c      	add	r4, r5
 80160c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80160c8:	4601      	mov	r1, r0
 80160ca:	3b30      	subs	r3, #48	@ 0x30
 80160cc:	220a      	movs	r2, #10
 80160ce:	4630      	mov	r0, r6
 80160d0:	f7ff ff8c 	bl	8015fec <__multadd>
 80160d4:	45a0      	cmp	r8, r4
 80160d6:	d1f5      	bne.n	80160c4 <__s2b+0x4c>
 80160d8:	f1a5 0408 	sub.w	r4, r5, #8
 80160dc:	444c      	add	r4, r9
 80160de:	1b2d      	subs	r5, r5, r4
 80160e0:	1963      	adds	r3, r4, r5
 80160e2:	42bb      	cmp	r3, r7
 80160e4:	db04      	blt.n	80160f0 <__s2b+0x78>
 80160e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160ea:	340a      	adds	r4, #10
 80160ec:	2509      	movs	r5, #9
 80160ee:	e7f6      	b.n	80160de <__s2b+0x66>
 80160f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80160f4:	4601      	mov	r1, r0
 80160f6:	3b30      	subs	r3, #48	@ 0x30
 80160f8:	220a      	movs	r2, #10
 80160fa:	4630      	mov	r0, r6
 80160fc:	f7ff ff76 	bl	8015fec <__multadd>
 8016100:	e7ee      	b.n	80160e0 <__s2b+0x68>
 8016102:	bf00      	nop
 8016104:	0801bc1d 	.word	0x0801bc1d
 8016108:	0801bc2e 	.word	0x0801bc2e

0801610c <__hi0bits>:
 801610c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016110:	4603      	mov	r3, r0
 8016112:	bf36      	itet	cc
 8016114:	0403      	lslcc	r3, r0, #16
 8016116:	2000      	movcs	r0, #0
 8016118:	2010      	movcc	r0, #16
 801611a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801611e:	bf3c      	itt	cc
 8016120:	021b      	lslcc	r3, r3, #8
 8016122:	3008      	addcc	r0, #8
 8016124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016128:	bf3c      	itt	cc
 801612a:	011b      	lslcc	r3, r3, #4
 801612c:	3004      	addcc	r0, #4
 801612e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016132:	bf3c      	itt	cc
 8016134:	009b      	lslcc	r3, r3, #2
 8016136:	3002      	addcc	r0, #2
 8016138:	2b00      	cmp	r3, #0
 801613a:	db05      	blt.n	8016148 <__hi0bits+0x3c>
 801613c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016140:	f100 0001 	add.w	r0, r0, #1
 8016144:	bf08      	it	eq
 8016146:	2020      	moveq	r0, #32
 8016148:	4770      	bx	lr

0801614a <__lo0bits>:
 801614a:	6803      	ldr	r3, [r0, #0]
 801614c:	4602      	mov	r2, r0
 801614e:	f013 0007 	ands.w	r0, r3, #7
 8016152:	d00b      	beq.n	801616c <__lo0bits+0x22>
 8016154:	07d9      	lsls	r1, r3, #31
 8016156:	d421      	bmi.n	801619c <__lo0bits+0x52>
 8016158:	0798      	lsls	r0, r3, #30
 801615a:	bf49      	itett	mi
 801615c:	085b      	lsrmi	r3, r3, #1
 801615e:	089b      	lsrpl	r3, r3, #2
 8016160:	2001      	movmi	r0, #1
 8016162:	6013      	strmi	r3, [r2, #0]
 8016164:	bf5c      	itt	pl
 8016166:	6013      	strpl	r3, [r2, #0]
 8016168:	2002      	movpl	r0, #2
 801616a:	4770      	bx	lr
 801616c:	b299      	uxth	r1, r3
 801616e:	b909      	cbnz	r1, 8016174 <__lo0bits+0x2a>
 8016170:	0c1b      	lsrs	r3, r3, #16
 8016172:	2010      	movs	r0, #16
 8016174:	b2d9      	uxtb	r1, r3
 8016176:	b909      	cbnz	r1, 801617c <__lo0bits+0x32>
 8016178:	3008      	adds	r0, #8
 801617a:	0a1b      	lsrs	r3, r3, #8
 801617c:	0719      	lsls	r1, r3, #28
 801617e:	bf04      	itt	eq
 8016180:	091b      	lsreq	r3, r3, #4
 8016182:	3004      	addeq	r0, #4
 8016184:	0799      	lsls	r1, r3, #30
 8016186:	bf04      	itt	eq
 8016188:	089b      	lsreq	r3, r3, #2
 801618a:	3002      	addeq	r0, #2
 801618c:	07d9      	lsls	r1, r3, #31
 801618e:	d403      	bmi.n	8016198 <__lo0bits+0x4e>
 8016190:	085b      	lsrs	r3, r3, #1
 8016192:	f100 0001 	add.w	r0, r0, #1
 8016196:	d003      	beq.n	80161a0 <__lo0bits+0x56>
 8016198:	6013      	str	r3, [r2, #0]
 801619a:	4770      	bx	lr
 801619c:	2000      	movs	r0, #0
 801619e:	4770      	bx	lr
 80161a0:	2020      	movs	r0, #32
 80161a2:	4770      	bx	lr

080161a4 <__i2b>:
 80161a4:	b510      	push	{r4, lr}
 80161a6:	460c      	mov	r4, r1
 80161a8:	2101      	movs	r1, #1
 80161aa:	f7ff febd 	bl	8015f28 <_Balloc>
 80161ae:	4602      	mov	r2, r0
 80161b0:	b928      	cbnz	r0, 80161be <__i2b+0x1a>
 80161b2:	4b05      	ldr	r3, [pc, #20]	@ (80161c8 <__i2b+0x24>)
 80161b4:	4805      	ldr	r0, [pc, #20]	@ (80161cc <__i2b+0x28>)
 80161b6:	f240 1145 	movw	r1, #325	@ 0x145
 80161ba:	f001 fcb1 	bl	8017b20 <__assert_func>
 80161be:	2301      	movs	r3, #1
 80161c0:	6144      	str	r4, [r0, #20]
 80161c2:	6103      	str	r3, [r0, #16]
 80161c4:	bd10      	pop	{r4, pc}
 80161c6:	bf00      	nop
 80161c8:	0801bc1d 	.word	0x0801bc1d
 80161cc:	0801bc2e 	.word	0x0801bc2e

080161d0 <__multiply>:
 80161d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d4:	4617      	mov	r7, r2
 80161d6:	690a      	ldr	r2, [r1, #16]
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	429a      	cmp	r2, r3
 80161dc:	bfa8      	it	ge
 80161de:	463b      	movge	r3, r7
 80161e0:	4689      	mov	r9, r1
 80161e2:	bfa4      	itt	ge
 80161e4:	460f      	movge	r7, r1
 80161e6:	4699      	movge	r9, r3
 80161e8:	693d      	ldr	r5, [r7, #16]
 80161ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	6879      	ldr	r1, [r7, #4]
 80161f2:	eb05 060a 	add.w	r6, r5, sl
 80161f6:	42b3      	cmp	r3, r6
 80161f8:	b085      	sub	sp, #20
 80161fa:	bfb8      	it	lt
 80161fc:	3101      	addlt	r1, #1
 80161fe:	f7ff fe93 	bl	8015f28 <_Balloc>
 8016202:	b930      	cbnz	r0, 8016212 <__multiply+0x42>
 8016204:	4602      	mov	r2, r0
 8016206:	4b41      	ldr	r3, [pc, #260]	@ (801630c <__multiply+0x13c>)
 8016208:	4841      	ldr	r0, [pc, #260]	@ (8016310 <__multiply+0x140>)
 801620a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801620e:	f001 fc87 	bl	8017b20 <__assert_func>
 8016212:	f100 0414 	add.w	r4, r0, #20
 8016216:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801621a:	4623      	mov	r3, r4
 801621c:	2200      	movs	r2, #0
 801621e:	4573      	cmp	r3, lr
 8016220:	d320      	bcc.n	8016264 <__multiply+0x94>
 8016222:	f107 0814 	add.w	r8, r7, #20
 8016226:	f109 0114 	add.w	r1, r9, #20
 801622a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801622e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016232:	9302      	str	r3, [sp, #8]
 8016234:	1beb      	subs	r3, r5, r7
 8016236:	3b15      	subs	r3, #21
 8016238:	f023 0303 	bic.w	r3, r3, #3
 801623c:	3304      	adds	r3, #4
 801623e:	3715      	adds	r7, #21
 8016240:	42bd      	cmp	r5, r7
 8016242:	bf38      	it	cc
 8016244:	2304      	movcc	r3, #4
 8016246:	9301      	str	r3, [sp, #4]
 8016248:	9b02      	ldr	r3, [sp, #8]
 801624a:	9103      	str	r1, [sp, #12]
 801624c:	428b      	cmp	r3, r1
 801624e:	d80c      	bhi.n	801626a <__multiply+0x9a>
 8016250:	2e00      	cmp	r6, #0
 8016252:	dd03      	ble.n	801625c <__multiply+0x8c>
 8016254:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016258:	2b00      	cmp	r3, #0
 801625a:	d055      	beq.n	8016308 <__multiply+0x138>
 801625c:	6106      	str	r6, [r0, #16]
 801625e:	b005      	add	sp, #20
 8016260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016264:	f843 2b04 	str.w	r2, [r3], #4
 8016268:	e7d9      	b.n	801621e <__multiply+0x4e>
 801626a:	f8b1 a000 	ldrh.w	sl, [r1]
 801626e:	f1ba 0f00 	cmp.w	sl, #0
 8016272:	d01f      	beq.n	80162b4 <__multiply+0xe4>
 8016274:	46c4      	mov	ip, r8
 8016276:	46a1      	mov	r9, r4
 8016278:	2700      	movs	r7, #0
 801627a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801627e:	f8d9 3000 	ldr.w	r3, [r9]
 8016282:	fa1f fb82 	uxth.w	fp, r2
 8016286:	b29b      	uxth	r3, r3
 8016288:	fb0a 330b 	mla	r3, sl, fp, r3
 801628c:	443b      	add	r3, r7
 801628e:	f8d9 7000 	ldr.w	r7, [r9]
 8016292:	0c12      	lsrs	r2, r2, #16
 8016294:	0c3f      	lsrs	r7, r7, #16
 8016296:	fb0a 7202 	mla	r2, sl, r2, r7
 801629a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801629e:	b29b      	uxth	r3, r3
 80162a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80162a4:	4565      	cmp	r5, ip
 80162a6:	f849 3b04 	str.w	r3, [r9], #4
 80162aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80162ae:	d8e4      	bhi.n	801627a <__multiply+0xaa>
 80162b0:	9b01      	ldr	r3, [sp, #4]
 80162b2:	50e7      	str	r7, [r4, r3]
 80162b4:	9b03      	ldr	r3, [sp, #12]
 80162b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80162ba:	3104      	adds	r1, #4
 80162bc:	f1b9 0f00 	cmp.w	r9, #0
 80162c0:	d020      	beq.n	8016304 <__multiply+0x134>
 80162c2:	6823      	ldr	r3, [r4, #0]
 80162c4:	4647      	mov	r7, r8
 80162c6:	46a4      	mov	ip, r4
 80162c8:	f04f 0a00 	mov.w	sl, #0
 80162cc:	f8b7 b000 	ldrh.w	fp, [r7]
 80162d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80162d4:	fb09 220b 	mla	r2, r9, fp, r2
 80162d8:	4452      	add	r2, sl
 80162da:	b29b      	uxth	r3, r3
 80162dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80162e0:	f84c 3b04 	str.w	r3, [ip], #4
 80162e4:	f857 3b04 	ldr.w	r3, [r7], #4
 80162e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80162ec:	f8bc 3000 	ldrh.w	r3, [ip]
 80162f0:	fb09 330a 	mla	r3, r9, sl, r3
 80162f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80162f8:	42bd      	cmp	r5, r7
 80162fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80162fe:	d8e5      	bhi.n	80162cc <__multiply+0xfc>
 8016300:	9a01      	ldr	r2, [sp, #4]
 8016302:	50a3      	str	r3, [r4, r2]
 8016304:	3404      	adds	r4, #4
 8016306:	e79f      	b.n	8016248 <__multiply+0x78>
 8016308:	3e01      	subs	r6, #1
 801630a:	e7a1      	b.n	8016250 <__multiply+0x80>
 801630c:	0801bc1d 	.word	0x0801bc1d
 8016310:	0801bc2e 	.word	0x0801bc2e

08016314 <__pow5mult>:
 8016314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016318:	4615      	mov	r5, r2
 801631a:	f012 0203 	ands.w	r2, r2, #3
 801631e:	4607      	mov	r7, r0
 8016320:	460e      	mov	r6, r1
 8016322:	d007      	beq.n	8016334 <__pow5mult+0x20>
 8016324:	4c25      	ldr	r4, [pc, #148]	@ (80163bc <__pow5mult+0xa8>)
 8016326:	3a01      	subs	r2, #1
 8016328:	2300      	movs	r3, #0
 801632a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801632e:	f7ff fe5d 	bl	8015fec <__multadd>
 8016332:	4606      	mov	r6, r0
 8016334:	10ad      	asrs	r5, r5, #2
 8016336:	d03d      	beq.n	80163b4 <__pow5mult+0xa0>
 8016338:	69fc      	ldr	r4, [r7, #28]
 801633a:	b97c      	cbnz	r4, 801635c <__pow5mult+0x48>
 801633c:	2010      	movs	r0, #16
 801633e:	f7ff fd3d 	bl	8015dbc <malloc>
 8016342:	4602      	mov	r2, r0
 8016344:	61f8      	str	r0, [r7, #28]
 8016346:	b928      	cbnz	r0, 8016354 <__pow5mult+0x40>
 8016348:	4b1d      	ldr	r3, [pc, #116]	@ (80163c0 <__pow5mult+0xac>)
 801634a:	481e      	ldr	r0, [pc, #120]	@ (80163c4 <__pow5mult+0xb0>)
 801634c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016350:	f001 fbe6 	bl	8017b20 <__assert_func>
 8016354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016358:	6004      	str	r4, [r0, #0]
 801635a:	60c4      	str	r4, [r0, #12]
 801635c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016364:	b94c      	cbnz	r4, 801637a <__pow5mult+0x66>
 8016366:	f240 2171 	movw	r1, #625	@ 0x271
 801636a:	4638      	mov	r0, r7
 801636c:	f7ff ff1a 	bl	80161a4 <__i2b>
 8016370:	2300      	movs	r3, #0
 8016372:	f8c8 0008 	str.w	r0, [r8, #8]
 8016376:	4604      	mov	r4, r0
 8016378:	6003      	str	r3, [r0, #0]
 801637a:	f04f 0900 	mov.w	r9, #0
 801637e:	07eb      	lsls	r3, r5, #31
 8016380:	d50a      	bpl.n	8016398 <__pow5mult+0x84>
 8016382:	4631      	mov	r1, r6
 8016384:	4622      	mov	r2, r4
 8016386:	4638      	mov	r0, r7
 8016388:	f7ff ff22 	bl	80161d0 <__multiply>
 801638c:	4631      	mov	r1, r6
 801638e:	4680      	mov	r8, r0
 8016390:	4638      	mov	r0, r7
 8016392:	f7ff fe09 	bl	8015fa8 <_Bfree>
 8016396:	4646      	mov	r6, r8
 8016398:	106d      	asrs	r5, r5, #1
 801639a:	d00b      	beq.n	80163b4 <__pow5mult+0xa0>
 801639c:	6820      	ldr	r0, [r4, #0]
 801639e:	b938      	cbnz	r0, 80163b0 <__pow5mult+0x9c>
 80163a0:	4622      	mov	r2, r4
 80163a2:	4621      	mov	r1, r4
 80163a4:	4638      	mov	r0, r7
 80163a6:	f7ff ff13 	bl	80161d0 <__multiply>
 80163aa:	6020      	str	r0, [r4, #0]
 80163ac:	f8c0 9000 	str.w	r9, [r0]
 80163b0:	4604      	mov	r4, r0
 80163b2:	e7e4      	b.n	801637e <__pow5mult+0x6a>
 80163b4:	4630      	mov	r0, r6
 80163b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163ba:	bf00      	nop
 80163bc:	0801bd40 	.word	0x0801bd40
 80163c0:	0801bbae 	.word	0x0801bbae
 80163c4:	0801bc2e 	.word	0x0801bc2e

080163c8 <__lshift>:
 80163c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163cc:	460c      	mov	r4, r1
 80163ce:	6849      	ldr	r1, [r1, #4]
 80163d0:	6923      	ldr	r3, [r4, #16]
 80163d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80163d6:	68a3      	ldr	r3, [r4, #8]
 80163d8:	4607      	mov	r7, r0
 80163da:	4691      	mov	r9, r2
 80163dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80163e0:	f108 0601 	add.w	r6, r8, #1
 80163e4:	42b3      	cmp	r3, r6
 80163e6:	db0b      	blt.n	8016400 <__lshift+0x38>
 80163e8:	4638      	mov	r0, r7
 80163ea:	f7ff fd9d 	bl	8015f28 <_Balloc>
 80163ee:	4605      	mov	r5, r0
 80163f0:	b948      	cbnz	r0, 8016406 <__lshift+0x3e>
 80163f2:	4602      	mov	r2, r0
 80163f4:	4b28      	ldr	r3, [pc, #160]	@ (8016498 <__lshift+0xd0>)
 80163f6:	4829      	ldr	r0, [pc, #164]	@ (801649c <__lshift+0xd4>)
 80163f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80163fc:	f001 fb90 	bl	8017b20 <__assert_func>
 8016400:	3101      	adds	r1, #1
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	e7ee      	b.n	80163e4 <__lshift+0x1c>
 8016406:	2300      	movs	r3, #0
 8016408:	f100 0114 	add.w	r1, r0, #20
 801640c:	f100 0210 	add.w	r2, r0, #16
 8016410:	4618      	mov	r0, r3
 8016412:	4553      	cmp	r3, sl
 8016414:	db33      	blt.n	801647e <__lshift+0xb6>
 8016416:	6920      	ldr	r0, [r4, #16]
 8016418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801641c:	f104 0314 	add.w	r3, r4, #20
 8016420:	f019 091f 	ands.w	r9, r9, #31
 8016424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801642c:	d02b      	beq.n	8016486 <__lshift+0xbe>
 801642e:	f1c9 0e20 	rsb	lr, r9, #32
 8016432:	468a      	mov	sl, r1
 8016434:	2200      	movs	r2, #0
 8016436:	6818      	ldr	r0, [r3, #0]
 8016438:	fa00 f009 	lsl.w	r0, r0, r9
 801643c:	4310      	orrs	r0, r2
 801643e:	f84a 0b04 	str.w	r0, [sl], #4
 8016442:	f853 2b04 	ldr.w	r2, [r3], #4
 8016446:	459c      	cmp	ip, r3
 8016448:	fa22 f20e 	lsr.w	r2, r2, lr
 801644c:	d8f3      	bhi.n	8016436 <__lshift+0x6e>
 801644e:	ebac 0304 	sub.w	r3, ip, r4
 8016452:	3b15      	subs	r3, #21
 8016454:	f023 0303 	bic.w	r3, r3, #3
 8016458:	3304      	adds	r3, #4
 801645a:	f104 0015 	add.w	r0, r4, #21
 801645e:	4560      	cmp	r0, ip
 8016460:	bf88      	it	hi
 8016462:	2304      	movhi	r3, #4
 8016464:	50ca      	str	r2, [r1, r3]
 8016466:	b10a      	cbz	r2, 801646c <__lshift+0xa4>
 8016468:	f108 0602 	add.w	r6, r8, #2
 801646c:	3e01      	subs	r6, #1
 801646e:	4638      	mov	r0, r7
 8016470:	612e      	str	r6, [r5, #16]
 8016472:	4621      	mov	r1, r4
 8016474:	f7ff fd98 	bl	8015fa8 <_Bfree>
 8016478:	4628      	mov	r0, r5
 801647a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801647e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016482:	3301      	adds	r3, #1
 8016484:	e7c5      	b.n	8016412 <__lshift+0x4a>
 8016486:	3904      	subs	r1, #4
 8016488:	f853 2b04 	ldr.w	r2, [r3], #4
 801648c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016490:	459c      	cmp	ip, r3
 8016492:	d8f9      	bhi.n	8016488 <__lshift+0xc0>
 8016494:	e7ea      	b.n	801646c <__lshift+0xa4>
 8016496:	bf00      	nop
 8016498:	0801bc1d 	.word	0x0801bc1d
 801649c:	0801bc2e 	.word	0x0801bc2e

080164a0 <__mcmp>:
 80164a0:	690a      	ldr	r2, [r1, #16]
 80164a2:	4603      	mov	r3, r0
 80164a4:	6900      	ldr	r0, [r0, #16]
 80164a6:	1a80      	subs	r0, r0, r2
 80164a8:	b530      	push	{r4, r5, lr}
 80164aa:	d10e      	bne.n	80164ca <__mcmp+0x2a>
 80164ac:	3314      	adds	r3, #20
 80164ae:	3114      	adds	r1, #20
 80164b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80164b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80164b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80164bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80164c0:	4295      	cmp	r5, r2
 80164c2:	d003      	beq.n	80164cc <__mcmp+0x2c>
 80164c4:	d205      	bcs.n	80164d2 <__mcmp+0x32>
 80164c6:	f04f 30ff 	mov.w	r0, #4294967295
 80164ca:	bd30      	pop	{r4, r5, pc}
 80164cc:	42a3      	cmp	r3, r4
 80164ce:	d3f3      	bcc.n	80164b8 <__mcmp+0x18>
 80164d0:	e7fb      	b.n	80164ca <__mcmp+0x2a>
 80164d2:	2001      	movs	r0, #1
 80164d4:	e7f9      	b.n	80164ca <__mcmp+0x2a>
	...

080164d8 <__mdiff>:
 80164d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164dc:	4689      	mov	r9, r1
 80164de:	4606      	mov	r6, r0
 80164e0:	4611      	mov	r1, r2
 80164e2:	4648      	mov	r0, r9
 80164e4:	4614      	mov	r4, r2
 80164e6:	f7ff ffdb 	bl	80164a0 <__mcmp>
 80164ea:	1e05      	subs	r5, r0, #0
 80164ec:	d112      	bne.n	8016514 <__mdiff+0x3c>
 80164ee:	4629      	mov	r1, r5
 80164f0:	4630      	mov	r0, r6
 80164f2:	f7ff fd19 	bl	8015f28 <_Balloc>
 80164f6:	4602      	mov	r2, r0
 80164f8:	b928      	cbnz	r0, 8016506 <__mdiff+0x2e>
 80164fa:	4b3f      	ldr	r3, [pc, #252]	@ (80165f8 <__mdiff+0x120>)
 80164fc:	f240 2137 	movw	r1, #567	@ 0x237
 8016500:	483e      	ldr	r0, [pc, #248]	@ (80165fc <__mdiff+0x124>)
 8016502:	f001 fb0d 	bl	8017b20 <__assert_func>
 8016506:	2301      	movs	r3, #1
 8016508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801650c:	4610      	mov	r0, r2
 801650e:	b003      	add	sp, #12
 8016510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016514:	bfbc      	itt	lt
 8016516:	464b      	movlt	r3, r9
 8016518:	46a1      	movlt	r9, r4
 801651a:	4630      	mov	r0, r6
 801651c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016520:	bfba      	itte	lt
 8016522:	461c      	movlt	r4, r3
 8016524:	2501      	movlt	r5, #1
 8016526:	2500      	movge	r5, #0
 8016528:	f7ff fcfe 	bl	8015f28 <_Balloc>
 801652c:	4602      	mov	r2, r0
 801652e:	b918      	cbnz	r0, 8016538 <__mdiff+0x60>
 8016530:	4b31      	ldr	r3, [pc, #196]	@ (80165f8 <__mdiff+0x120>)
 8016532:	f240 2145 	movw	r1, #581	@ 0x245
 8016536:	e7e3      	b.n	8016500 <__mdiff+0x28>
 8016538:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801653c:	6926      	ldr	r6, [r4, #16]
 801653e:	60c5      	str	r5, [r0, #12]
 8016540:	f109 0310 	add.w	r3, r9, #16
 8016544:	f109 0514 	add.w	r5, r9, #20
 8016548:	f104 0e14 	add.w	lr, r4, #20
 801654c:	f100 0b14 	add.w	fp, r0, #20
 8016550:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016554:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016558:	9301      	str	r3, [sp, #4]
 801655a:	46d9      	mov	r9, fp
 801655c:	f04f 0c00 	mov.w	ip, #0
 8016560:	9b01      	ldr	r3, [sp, #4]
 8016562:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016566:	f853 af04 	ldr.w	sl, [r3, #4]!
 801656a:	9301      	str	r3, [sp, #4]
 801656c:	fa1f f38a 	uxth.w	r3, sl
 8016570:	4619      	mov	r1, r3
 8016572:	b283      	uxth	r3, r0
 8016574:	1acb      	subs	r3, r1, r3
 8016576:	0c00      	lsrs	r0, r0, #16
 8016578:	4463      	add	r3, ip
 801657a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801657e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016582:	b29b      	uxth	r3, r3
 8016584:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016588:	4576      	cmp	r6, lr
 801658a:	f849 3b04 	str.w	r3, [r9], #4
 801658e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016592:	d8e5      	bhi.n	8016560 <__mdiff+0x88>
 8016594:	1b33      	subs	r3, r6, r4
 8016596:	3b15      	subs	r3, #21
 8016598:	f023 0303 	bic.w	r3, r3, #3
 801659c:	3415      	adds	r4, #21
 801659e:	3304      	adds	r3, #4
 80165a0:	42a6      	cmp	r6, r4
 80165a2:	bf38      	it	cc
 80165a4:	2304      	movcc	r3, #4
 80165a6:	441d      	add	r5, r3
 80165a8:	445b      	add	r3, fp
 80165aa:	461e      	mov	r6, r3
 80165ac:	462c      	mov	r4, r5
 80165ae:	4544      	cmp	r4, r8
 80165b0:	d30e      	bcc.n	80165d0 <__mdiff+0xf8>
 80165b2:	f108 0103 	add.w	r1, r8, #3
 80165b6:	1b49      	subs	r1, r1, r5
 80165b8:	f021 0103 	bic.w	r1, r1, #3
 80165bc:	3d03      	subs	r5, #3
 80165be:	45a8      	cmp	r8, r5
 80165c0:	bf38      	it	cc
 80165c2:	2100      	movcc	r1, #0
 80165c4:	440b      	add	r3, r1
 80165c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80165ca:	b191      	cbz	r1, 80165f2 <__mdiff+0x11a>
 80165cc:	6117      	str	r7, [r2, #16]
 80165ce:	e79d      	b.n	801650c <__mdiff+0x34>
 80165d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80165d4:	46e6      	mov	lr, ip
 80165d6:	0c08      	lsrs	r0, r1, #16
 80165d8:	fa1c fc81 	uxtah	ip, ip, r1
 80165dc:	4471      	add	r1, lr
 80165de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80165e2:	b289      	uxth	r1, r1
 80165e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80165e8:	f846 1b04 	str.w	r1, [r6], #4
 80165ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80165f0:	e7dd      	b.n	80165ae <__mdiff+0xd6>
 80165f2:	3f01      	subs	r7, #1
 80165f4:	e7e7      	b.n	80165c6 <__mdiff+0xee>
 80165f6:	bf00      	nop
 80165f8:	0801bc1d 	.word	0x0801bc1d
 80165fc:	0801bc2e 	.word	0x0801bc2e

08016600 <__ulp>:
 8016600:	b082      	sub	sp, #8
 8016602:	ed8d 0b00 	vstr	d0, [sp]
 8016606:	9a01      	ldr	r2, [sp, #4]
 8016608:	4b0f      	ldr	r3, [pc, #60]	@ (8016648 <__ulp+0x48>)
 801660a:	4013      	ands	r3, r2
 801660c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016610:	2b00      	cmp	r3, #0
 8016612:	dc08      	bgt.n	8016626 <__ulp+0x26>
 8016614:	425b      	negs	r3, r3
 8016616:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801661a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801661e:	da04      	bge.n	801662a <__ulp+0x2a>
 8016620:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016624:	4113      	asrs	r3, r2
 8016626:	2200      	movs	r2, #0
 8016628:	e008      	b.n	801663c <__ulp+0x3c>
 801662a:	f1a2 0314 	sub.w	r3, r2, #20
 801662e:	2b1e      	cmp	r3, #30
 8016630:	bfda      	itte	le
 8016632:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016636:	40da      	lsrle	r2, r3
 8016638:	2201      	movgt	r2, #1
 801663a:	2300      	movs	r3, #0
 801663c:	4619      	mov	r1, r3
 801663e:	4610      	mov	r0, r2
 8016640:	ec41 0b10 	vmov	d0, r0, r1
 8016644:	b002      	add	sp, #8
 8016646:	4770      	bx	lr
 8016648:	7ff00000 	.word	0x7ff00000

0801664c <__b2d>:
 801664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016650:	6906      	ldr	r6, [r0, #16]
 8016652:	f100 0814 	add.w	r8, r0, #20
 8016656:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801665a:	1f37      	subs	r7, r6, #4
 801665c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016660:	4610      	mov	r0, r2
 8016662:	f7ff fd53 	bl	801610c <__hi0bits>
 8016666:	f1c0 0320 	rsb	r3, r0, #32
 801666a:	280a      	cmp	r0, #10
 801666c:	600b      	str	r3, [r1, #0]
 801666e:	491b      	ldr	r1, [pc, #108]	@ (80166dc <__b2d+0x90>)
 8016670:	dc15      	bgt.n	801669e <__b2d+0x52>
 8016672:	f1c0 0c0b 	rsb	ip, r0, #11
 8016676:	fa22 f30c 	lsr.w	r3, r2, ip
 801667a:	45b8      	cmp	r8, r7
 801667c:	ea43 0501 	orr.w	r5, r3, r1
 8016680:	bf34      	ite	cc
 8016682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016686:	2300      	movcs	r3, #0
 8016688:	3015      	adds	r0, #21
 801668a:	fa02 f000 	lsl.w	r0, r2, r0
 801668e:	fa23 f30c 	lsr.w	r3, r3, ip
 8016692:	4303      	orrs	r3, r0
 8016694:	461c      	mov	r4, r3
 8016696:	ec45 4b10 	vmov	d0, r4, r5
 801669a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801669e:	45b8      	cmp	r8, r7
 80166a0:	bf3a      	itte	cc
 80166a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80166a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80166aa:	2300      	movcs	r3, #0
 80166ac:	380b      	subs	r0, #11
 80166ae:	d012      	beq.n	80166d6 <__b2d+0x8a>
 80166b0:	f1c0 0120 	rsb	r1, r0, #32
 80166b4:	fa23 f401 	lsr.w	r4, r3, r1
 80166b8:	4082      	lsls	r2, r0
 80166ba:	4322      	orrs	r2, r4
 80166bc:	4547      	cmp	r7, r8
 80166be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80166c2:	bf8c      	ite	hi
 80166c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80166c8:	2200      	movls	r2, #0
 80166ca:	4083      	lsls	r3, r0
 80166cc:	40ca      	lsrs	r2, r1
 80166ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80166d2:	4313      	orrs	r3, r2
 80166d4:	e7de      	b.n	8016694 <__b2d+0x48>
 80166d6:	ea42 0501 	orr.w	r5, r2, r1
 80166da:	e7db      	b.n	8016694 <__b2d+0x48>
 80166dc:	3ff00000 	.word	0x3ff00000

080166e0 <__d2b>:
 80166e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80166e4:	460f      	mov	r7, r1
 80166e6:	2101      	movs	r1, #1
 80166e8:	ec59 8b10 	vmov	r8, r9, d0
 80166ec:	4616      	mov	r6, r2
 80166ee:	f7ff fc1b 	bl	8015f28 <_Balloc>
 80166f2:	4604      	mov	r4, r0
 80166f4:	b930      	cbnz	r0, 8016704 <__d2b+0x24>
 80166f6:	4602      	mov	r2, r0
 80166f8:	4b23      	ldr	r3, [pc, #140]	@ (8016788 <__d2b+0xa8>)
 80166fa:	4824      	ldr	r0, [pc, #144]	@ (801678c <__d2b+0xac>)
 80166fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8016700:	f001 fa0e 	bl	8017b20 <__assert_func>
 8016704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801670c:	b10d      	cbz	r5, 8016712 <__d2b+0x32>
 801670e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016712:	9301      	str	r3, [sp, #4]
 8016714:	f1b8 0300 	subs.w	r3, r8, #0
 8016718:	d023      	beq.n	8016762 <__d2b+0x82>
 801671a:	4668      	mov	r0, sp
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	f7ff fd14 	bl	801614a <__lo0bits>
 8016722:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016726:	b1d0      	cbz	r0, 801675e <__d2b+0x7e>
 8016728:	f1c0 0320 	rsb	r3, r0, #32
 801672c:	fa02 f303 	lsl.w	r3, r2, r3
 8016730:	430b      	orrs	r3, r1
 8016732:	40c2      	lsrs	r2, r0
 8016734:	6163      	str	r3, [r4, #20]
 8016736:	9201      	str	r2, [sp, #4]
 8016738:	9b01      	ldr	r3, [sp, #4]
 801673a:	61a3      	str	r3, [r4, #24]
 801673c:	2b00      	cmp	r3, #0
 801673e:	bf0c      	ite	eq
 8016740:	2201      	moveq	r2, #1
 8016742:	2202      	movne	r2, #2
 8016744:	6122      	str	r2, [r4, #16]
 8016746:	b1a5      	cbz	r5, 8016772 <__d2b+0x92>
 8016748:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801674c:	4405      	add	r5, r0
 801674e:	603d      	str	r5, [r7, #0]
 8016750:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016754:	6030      	str	r0, [r6, #0]
 8016756:	4620      	mov	r0, r4
 8016758:	b003      	add	sp, #12
 801675a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801675e:	6161      	str	r1, [r4, #20]
 8016760:	e7ea      	b.n	8016738 <__d2b+0x58>
 8016762:	a801      	add	r0, sp, #4
 8016764:	f7ff fcf1 	bl	801614a <__lo0bits>
 8016768:	9b01      	ldr	r3, [sp, #4]
 801676a:	6163      	str	r3, [r4, #20]
 801676c:	3020      	adds	r0, #32
 801676e:	2201      	movs	r2, #1
 8016770:	e7e8      	b.n	8016744 <__d2b+0x64>
 8016772:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016776:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801677a:	6038      	str	r0, [r7, #0]
 801677c:	6918      	ldr	r0, [r3, #16]
 801677e:	f7ff fcc5 	bl	801610c <__hi0bits>
 8016782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016786:	e7e5      	b.n	8016754 <__d2b+0x74>
 8016788:	0801bc1d 	.word	0x0801bc1d
 801678c:	0801bc2e 	.word	0x0801bc2e

08016790 <__ratio>:
 8016790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016794:	b085      	sub	sp, #20
 8016796:	e9cd 1000 	strd	r1, r0, [sp]
 801679a:	a902      	add	r1, sp, #8
 801679c:	f7ff ff56 	bl	801664c <__b2d>
 80167a0:	9800      	ldr	r0, [sp, #0]
 80167a2:	a903      	add	r1, sp, #12
 80167a4:	ec55 4b10 	vmov	r4, r5, d0
 80167a8:	f7ff ff50 	bl	801664c <__b2d>
 80167ac:	9b01      	ldr	r3, [sp, #4]
 80167ae:	6919      	ldr	r1, [r3, #16]
 80167b0:	9b00      	ldr	r3, [sp, #0]
 80167b2:	691b      	ldr	r3, [r3, #16]
 80167b4:	1ac9      	subs	r1, r1, r3
 80167b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80167ba:	1a9b      	subs	r3, r3, r2
 80167bc:	ec5b ab10 	vmov	sl, fp, d0
 80167c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	bfce      	itee	gt
 80167c8:	462a      	movgt	r2, r5
 80167ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80167ce:	465a      	movle	r2, fp
 80167d0:	462f      	mov	r7, r5
 80167d2:	46d9      	mov	r9, fp
 80167d4:	bfcc      	ite	gt
 80167d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80167da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80167de:	464b      	mov	r3, r9
 80167e0:	4652      	mov	r2, sl
 80167e2:	4620      	mov	r0, r4
 80167e4:	4639      	mov	r1, r7
 80167e6:	f7ea f859 	bl	800089c <__aeabi_ddiv>
 80167ea:	ec41 0b10 	vmov	d0, r0, r1
 80167ee:	b005      	add	sp, #20
 80167f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167f4 <__copybits>:
 80167f4:	3901      	subs	r1, #1
 80167f6:	b570      	push	{r4, r5, r6, lr}
 80167f8:	1149      	asrs	r1, r1, #5
 80167fa:	6914      	ldr	r4, [r2, #16]
 80167fc:	3101      	adds	r1, #1
 80167fe:	f102 0314 	add.w	r3, r2, #20
 8016802:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016806:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801680a:	1f05      	subs	r5, r0, #4
 801680c:	42a3      	cmp	r3, r4
 801680e:	d30c      	bcc.n	801682a <__copybits+0x36>
 8016810:	1aa3      	subs	r3, r4, r2
 8016812:	3b11      	subs	r3, #17
 8016814:	f023 0303 	bic.w	r3, r3, #3
 8016818:	3211      	adds	r2, #17
 801681a:	42a2      	cmp	r2, r4
 801681c:	bf88      	it	hi
 801681e:	2300      	movhi	r3, #0
 8016820:	4418      	add	r0, r3
 8016822:	2300      	movs	r3, #0
 8016824:	4288      	cmp	r0, r1
 8016826:	d305      	bcc.n	8016834 <__copybits+0x40>
 8016828:	bd70      	pop	{r4, r5, r6, pc}
 801682a:	f853 6b04 	ldr.w	r6, [r3], #4
 801682e:	f845 6f04 	str.w	r6, [r5, #4]!
 8016832:	e7eb      	b.n	801680c <__copybits+0x18>
 8016834:	f840 3b04 	str.w	r3, [r0], #4
 8016838:	e7f4      	b.n	8016824 <__copybits+0x30>

0801683a <__any_on>:
 801683a:	f100 0214 	add.w	r2, r0, #20
 801683e:	6900      	ldr	r0, [r0, #16]
 8016840:	114b      	asrs	r3, r1, #5
 8016842:	4298      	cmp	r0, r3
 8016844:	b510      	push	{r4, lr}
 8016846:	db11      	blt.n	801686c <__any_on+0x32>
 8016848:	dd0a      	ble.n	8016860 <__any_on+0x26>
 801684a:	f011 011f 	ands.w	r1, r1, #31
 801684e:	d007      	beq.n	8016860 <__any_on+0x26>
 8016850:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016854:	fa24 f001 	lsr.w	r0, r4, r1
 8016858:	fa00 f101 	lsl.w	r1, r0, r1
 801685c:	428c      	cmp	r4, r1
 801685e:	d10b      	bne.n	8016878 <__any_on+0x3e>
 8016860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016864:	4293      	cmp	r3, r2
 8016866:	d803      	bhi.n	8016870 <__any_on+0x36>
 8016868:	2000      	movs	r0, #0
 801686a:	bd10      	pop	{r4, pc}
 801686c:	4603      	mov	r3, r0
 801686e:	e7f7      	b.n	8016860 <__any_on+0x26>
 8016870:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016874:	2900      	cmp	r1, #0
 8016876:	d0f5      	beq.n	8016864 <__any_on+0x2a>
 8016878:	2001      	movs	r0, #1
 801687a:	e7f6      	b.n	801686a <__any_on+0x30>

0801687c <sulp>:
 801687c:	b570      	push	{r4, r5, r6, lr}
 801687e:	4604      	mov	r4, r0
 8016880:	460d      	mov	r5, r1
 8016882:	ec45 4b10 	vmov	d0, r4, r5
 8016886:	4616      	mov	r6, r2
 8016888:	f7ff feba 	bl	8016600 <__ulp>
 801688c:	ec51 0b10 	vmov	r0, r1, d0
 8016890:	b17e      	cbz	r6, 80168b2 <sulp+0x36>
 8016892:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016896:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801689a:	2b00      	cmp	r3, #0
 801689c:	dd09      	ble.n	80168b2 <sulp+0x36>
 801689e:	051b      	lsls	r3, r3, #20
 80168a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80168a4:	2400      	movs	r4, #0
 80168a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80168aa:	4622      	mov	r2, r4
 80168ac:	462b      	mov	r3, r5
 80168ae:	f7e9 fecb 	bl	8000648 <__aeabi_dmul>
 80168b2:	ec41 0b10 	vmov	d0, r0, r1
 80168b6:	bd70      	pop	{r4, r5, r6, pc}

080168b8 <_strtod_l>:
 80168b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168bc:	b09f      	sub	sp, #124	@ 0x7c
 80168be:	460c      	mov	r4, r1
 80168c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80168c2:	2200      	movs	r2, #0
 80168c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80168c6:	9005      	str	r0, [sp, #20]
 80168c8:	f04f 0a00 	mov.w	sl, #0
 80168cc:	f04f 0b00 	mov.w	fp, #0
 80168d0:	460a      	mov	r2, r1
 80168d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80168d4:	7811      	ldrb	r1, [r2, #0]
 80168d6:	292b      	cmp	r1, #43	@ 0x2b
 80168d8:	d04a      	beq.n	8016970 <_strtod_l+0xb8>
 80168da:	d838      	bhi.n	801694e <_strtod_l+0x96>
 80168dc:	290d      	cmp	r1, #13
 80168de:	d832      	bhi.n	8016946 <_strtod_l+0x8e>
 80168e0:	2908      	cmp	r1, #8
 80168e2:	d832      	bhi.n	801694a <_strtod_l+0x92>
 80168e4:	2900      	cmp	r1, #0
 80168e6:	d03b      	beq.n	8016960 <_strtod_l+0xa8>
 80168e8:	2200      	movs	r2, #0
 80168ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80168ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80168ee:	782a      	ldrb	r2, [r5, #0]
 80168f0:	2a30      	cmp	r2, #48	@ 0x30
 80168f2:	f040 80b2 	bne.w	8016a5a <_strtod_l+0x1a2>
 80168f6:	786a      	ldrb	r2, [r5, #1]
 80168f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80168fc:	2a58      	cmp	r2, #88	@ 0x58
 80168fe:	d16e      	bne.n	80169de <_strtod_l+0x126>
 8016900:	9302      	str	r3, [sp, #8]
 8016902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016904:	9301      	str	r3, [sp, #4]
 8016906:	ab1a      	add	r3, sp, #104	@ 0x68
 8016908:	9300      	str	r3, [sp, #0]
 801690a:	4a8f      	ldr	r2, [pc, #572]	@ (8016b48 <_strtod_l+0x290>)
 801690c:	9805      	ldr	r0, [sp, #20]
 801690e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016910:	a919      	add	r1, sp, #100	@ 0x64
 8016912:	f001 f99f 	bl	8017c54 <__gethex>
 8016916:	f010 060f 	ands.w	r6, r0, #15
 801691a:	4604      	mov	r4, r0
 801691c:	d005      	beq.n	801692a <_strtod_l+0x72>
 801691e:	2e06      	cmp	r6, #6
 8016920:	d128      	bne.n	8016974 <_strtod_l+0xbc>
 8016922:	3501      	adds	r5, #1
 8016924:	2300      	movs	r3, #0
 8016926:	9519      	str	r5, [sp, #100]	@ 0x64
 8016928:	930e      	str	r3, [sp, #56]	@ 0x38
 801692a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801692c:	2b00      	cmp	r3, #0
 801692e:	f040 858e 	bne.w	801744e <_strtod_l+0xb96>
 8016932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016934:	b1cb      	cbz	r3, 801696a <_strtod_l+0xb2>
 8016936:	4652      	mov	r2, sl
 8016938:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801693c:	ec43 2b10 	vmov	d0, r2, r3
 8016940:	b01f      	add	sp, #124	@ 0x7c
 8016942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016946:	2920      	cmp	r1, #32
 8016948:	d1ce      	bne.n	80168e8 <_strtod_l+0x30>
 801694a:	3201      	adds	r2, #1
 801694c:	e7c1      	b.n	80168d2 <_strtod_l+0x1a>
 801694e:	292d      	cmp	r1, #45	@ 0x2d
 8016950:	d1ca      	bne.n	80168e8 <_strtod_l+0x30>
 8016952:	2101      	movs	r1, #1
 8016954:	910e      	str	r1, [sp, #56]	@ 0x38
 8016956:	1c51      	adds	r1, r2, #1
 8016958:	9119      	str	r1, [sp, #100]	@ 0x64
 801695a:	7852      	ldrb	r2, [r2, #1]
 801695c:	2a00      	cmp	r2, #0
 801695e:	d1c5      	bne.n	80168ec <_strtod_l+0x34>
 8016960:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016962:	9419      	str	r4, [sp, #100]	@ 0x64
 8016964:	2b00      	cmp	r3, #0
 8016966:	f040 8570 	bne.w	801744a <_strtod_l+0xb92>
 801696a:	4652      	mov	r2, sl
 801696c:	465b      	mov	r3, fp
 801696e:	e7e5      	b.n	801693c <_strtod_l+0x84>
 8016970:	2100      	movs	r1, #0
 8016972:	e7ef      	b.n	8016954 <_strtod_l+0x9c>
 8016974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016976:	b13a      	cbz	r2, 8016988 <_strtod_l+0xd0>
 8016978:	2135      	movs	r1, #53	@ 0x35
 801697a:	a81c      	add	r0, sp, #112	@ 0x70
 801697c:	f7ff ff3a 	bl	80167f4 <__copybits>
 8016980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016982:	9805      	ldr	r0, [sp, #20]
 8016984:	f7ff fb10 	bl	8015fa8 <_Bfree>
 8016988:	3e01      	subs	r6, #1
 801698a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801698c:	2e04      	cmp	r6, #4
 801698e:	d806      	bhi.n	801699e <_strtod_l+0xe6>
 8016990:	e8df f006 	tbb	[pc, r6]
 8016994:	201d0314 	.word	0x201d0314
 8016998:	14          	.byte	0x14
 8016999:	00          	.byte	0x00
 801699a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801699e:	05e1      	lsls	r1, r4, #23
 80169a0:	bf48      	it	mi
 80169a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80169a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80169aa:	0d1b      	lsrs	r3, r3, #20
 80169ac:	051b      	lsls	r3, r3, #20
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d1bb      	bne.n	801692a <_strtod_l+0x72>
 80169b2:	f7fe fb1f 	bl	8014ff4 <__errno>
 80169b6:	2322      	movs	r3, #34	@ 0x22
 80169b8:	6003      	str	r3, [r0, #0]
 80169ba:	e7b6      	b.n	801692a <_strtod_l+0x72>
 80169bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80169c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80169c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80169c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80169cc:	e7e7      	b.n	801699e <_strtod_l+0xe6>
 80169ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016b50 <_strtod_l+0x298>
 80169d2:	e7e4      	b.n	801699e <_strtod_l+0xe6>
 80169d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80169d8:	f04f 3aff 	mov.w	sl, #4294967295
 80169dc:	e7df      	b.n	801699e <_strtod_l+0xe6>
 80169de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169e0:	1c5a      	adds	r2, r3, #1
 80169e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80169e4:	785b      	ldrb	r3, [r3, #1]
 80169e6:	2b30      	cmp	r3, #48	@ 0x30
 80169e8:	d0f9      	beq.n	80169de <_strtod_l+0x126>
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d09d      	beq.n	801692a <_strtod_l+0x72>
 80169ee:	2301      	movs	r3, #1
 80169f0:	2700      	movs	r7, #0
 80169f2:	9308      	str	r3, [sp, #32]
 80169f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80169f8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80169fa:	46b9      	mov	r9, r7
 80169fc:	220a      	movs	r2, #10
 80169fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016a00:	7805      	ldrb	r5, [r0, #0]
 8016a02:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016a06:	b2d9      	uxtb	r1, r3
 8016a08:	2909      	cmp	r1, #9
 8016a0a:	d928      	bls.n	8016a5e <_strtod_l+0x1a6>
 8016a0c:	494f      	ldr	r1, [pc, #316]	@ (8016b4c <_strtod_l+0x294>)
 8016a0e:	2201      	movs	r2, #1
 8016a10:	f001 f838 	bl	8017a84 <strncmp>
 8016a14:	2800      	cmp	r0, #0
 8016a16:	d032      	beq.n	8016a7e <_strtod_l+0x1c6>
 8016a18:	2000      	movs	r0, #0
 8016a1a:	462a      	mov	r2, r5
 8016a1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8016a1e:	464d      	mov	r5, r9
 8016a20:	4603      	mov	r3, r0
 8016a22:	2a65      	cmp	r2, #101	@ 0x65
 8016a24:	d001      	beq.n	8016a2a <_strtod_l+0x172>
 8016a26:	2a45      	cmp	r2, #69	@ 0x45
 8016a28:	d114      	bne.n	8016a54 <_strtod_l+0x19c>
 8016a2a:	b91d      	cbnz	r5, 8016a34 <_strtod_l+0x17c>
 8016a2c:	9a08      	ldr	r2, [sp, #32]
 8016a2e:	4302      	orrs	r2, r0
 8016a30:	d096      	beq.n	8016960 <_strtod_l+0xa8>
 8016a32:	2500      	movs	r5, #0
 8016a34:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016a36:	1c62      	adds	r2, r4, #1
 8016a38:	9219      	str	r2, [sp, #100]	@ 0x64
 8016a3a:	7862      	ldrb	r2, [r4, #1]
 8016a3c:	2a2b      	cmp	r2, #43	@ 0x2b
 8016a3e:	d07a      	beq.n	8016b36 <_strtod_l+0x27e>
 8016a40:	2a2d      	cmp	r2, #45	@ 0x2d
 8016a42:	d07e      	beq.n	8016b42 <_strtod_l+0x28a>
 8016a44:	f04f 0c00 	mov.w	ip, #0
 8016a48:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016a4c:	2909      	cmp	r1, #9
 8016a4e:	f240 8085 	bls.w	8016b5c <_strtod_l+0x2a4>
 8016a52:	9419      	str	r4, [sp, #100]	@ 0x64
 8016a54:	f04f 0800 	mov.w	r8, #0
 8016a58:	e0a5      	b.n	8016ba6 <_strtod_l+0x2ee>
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	e7c8      	b.n	80169f0 <_strtod_l+0x138>
 8016a5e:	f1b9 0f08 	cmp.w	r9, #8
 8016a62:	bfd8      	it	le
 8016a64:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8016a66:	f100 0001 	add.w	r0, r0, #1
 8016a6a:	bfda      	itte	le
 8016a6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8016a70:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8016a72:	fb02 3707 	mlagt	r7, r2, r7, r3
 8016a76:	f109 0901 	add.w	r9, r9, #1
 8016a7a:	9019      	str	r0, [sp, #100]	@ 0x64
 8016a7c:	e7bf      	b.n	80169fe <_strtod_l+0x146>
 8016a7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016a80:	1c5a      	adds	r2, r3, #1
 8016a82:	9219      	str	r2, [sp, #100]	@ 0x64
 8016a84:	785a      	ldrb	r2, [r3, #1]
 8016a86:	f1b9 0f00 	cmp.w	r9, #0
 8016a8a:	d03b      	beq.n	8016b04 <_strtod_l+0x24c>
 8016a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8016a8e:	464d      	mov	r5, r9
 8016a90:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016a94:	2b09      	cmp	r3, #9
 8016a96:	d912      	bls.n	8016abe <_strtod_l+0x206>
 8016a98:	2301      	movs	r3, #1
 8016a9a:	e7c2      	b.n	8016a22 <_strtod_l+0x16a>
 8016a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016a9e:	1c5a      	adds	r2, r3, #1
 8016aa0:	9219      	str	r2, [sp, #100]	@ 0x64
 8016aa2:	785a      	ldrb	r2, [r3, #1]
 8016aa4:	3001      	adds	r0, #1
 8016aa6:	2a30      	cmp	r2, #48	@ 0x30
 8016aa8:	d0f8      	beq.n	8016a9c <_strtod_l+0x1e4>
 8016aaa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016aae:	2b08      	cmp	r3, #8
 8016ab0:	f200 84d2 	bhi.w	8017458 <_strtod_l+0xba0>
 8016ab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ab6:	900a      	str	r0, [sp, #40]	@ 0x28
 8016ab8:	2000      	movs	r0, #0
 8016aba:	930c      	str	r3, [sp, #48]	@ 0x30
 8016abc:	4605      	mov	r5, r0
 8016abe:	3a30      	subs	r2, #48	@ 0x30
 8016ac0:	f100 0301 	add.w	r3, r0, #1
 8016ac4:	d018      	beq.n	8016af8 <_strtod_l+0x240>
 8016ac6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016ac8:	4419      	add	r1, r3
 8016aca:	910a      	str	r1, [sp, #40]	@ 0x28
 8016acc:	462e      	mov	r6, r5
 8016ace:	f04f 0e0a 	mov.w	lr, #10
 8016ad2:	1c71      	adds	r1, r6, #1
 8016ad4:	eba1 0c05 	sub.w	ip, r1, r5
 8016ad8:	4563      	cmp	r3, ip
 8016ada:	dc15      	bgt.n	8016b08 <_strtod_l+0x250>
 8016adc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016ae0:	182b      	adds	r3, r5, r0
 8016ae2:	2b08      	cmp	r3, #8
 8016ae4:	f105 0501 	add.w	r5, r5, #1
 8016ae8:	4405      	add	r5, r0
 8016aea:	dc1a      	bgt.n	8016b22 <_strtod_l+0x26a>
 8016aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016aee:	230a      	movs	r3, #10
 8016af0:	fb03 2301 	mla	r3, r3, r1, r2
 8016af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016af6:	2300      	movs	r3, #0
 8016af8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016afa:	1c51      	adds	r1, r2, #1
 8016afc:	9119      	str	r1, [sp, #100]	@ 0x64
 8016afe:	7852      	ldrb	r2, [r2, #1]
 8016b00:	4618      	mov	r0, r3
 8016b02:	e7c5      	b.n	8016a90 <_strtod_l+0x1d8>
 8016b04:	4648      	mov	r0, r9
 8016b06:	e7ce      	b.n	8016aa6 <_strtod_l+0x1ee>
 8016b08:	2e08      	cmp	r6, #8
 8016b0a:	dc05      	bgt.n	8016b18 <_strtod_l+0x260>
 8016b0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016b0e:	fb0e f606 	mul.w	r6, lr, r6
 8016b12:	960b      	str	r6, [sp, #44]	@ 0x2c
 8016b14:	460e      	mov	r6, r1
 8016b16:	e7dc      	b.n	8016ad2 <_strtod_l+0x21a>
 8016b18:	2910      	cmp	r1, #16
 8016b1a:	bfd8      	it	le
 8016b1c:	fb0e f707 	mulle.w	r7, lr, r7
 8016b20:	e7f8      	b.n	8016b14 <_strtod_l+0x25c>
 8016b22:	2b0f      	cmp	r3, #15
 8016b24:	bfdc      	itt	le
 8016b26:	230a      	movle	r3, #10
 8016b28:	fb03 2707 	mlale	r7, r3, r7, r2
 8016b2c:	e7e3      	b.n	8016af6 <_strtod_l+0x23e>
 8016b2e:	2300      	movs	r3, #0
 8016b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8016b32:	2301      	movs	r3, #1
 8016b34:	e77a      	b.n	8016a2c <_strtod_l+0x174>
 8016b36:	f04f 0c00 	mov.w	ip, #0
 8016b3a:	1ca2      	adds	r2, r4, #2
 8016b3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8016b3e:	78a2      	ldrb	r2, [r4, #2]
 8016b40:	e782      	b.n	8016a48 <_strtod_l+0x190>
 8016b42:	f04f 0c01 	mov.w	ip, #1
 8016b46:	e7f8      	b.n	8016b3a <_strtod_l+0x282>
 8016b48:	0801be54 	.word	0x0801be54
 8016b4c:	0801bc87 	.word	0x0801bc87
 8016b50:	7ff00000 	.word	0x7ff00000
 8016b54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016b56:	1c51      	adds	r1, r2, #1
 8016b58:	9119      	str	r1, [sp, #100]	@ 0x64
 8016b5a:	7852      	ldrb	r2, [r2, #1]
 8016b5c:	2a30      	cmp	r2, #48	@ 0x30
 8016b5e:	d0f9      	beq.n	8016b54 <_strtod_l+0x29c>
 8016b60:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016b64:	2908      	cmp	r1, #8
 8016b66:	f63f af75 	bhi.w	8016a54 <_strtod_l+0x19c>
 8016b6a:	3a30      	subs	r2, #48	@ 0x30
 8016b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8016b6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016b70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016b72:	f04f 080a 	mov.w	r8, #10
 8016b76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016b78:	1c56      	adds	r6, r2, #1
 8016b7a:	9619      	str	r6, [sp, #100]	@ 0x64
 8016b7c:	7852      	ldrb	r2, [r2, #1]
 8016b7e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016b82:	f1be 0f09 	cmp.w	lr, #9
 8016b86:	d939      	bls.n	8016bfc <_strtod_l+0x344>
 8016b88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016b8a:	1a76      	subs	r6, r6, r1
 8016b8c:	2e08      	cmp	r6, #8
 8016b8e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016b92:	dc03      	bgt.n	8016b9c <_strtod_l+0x2e4>
 8016b94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016b96:	4588      	cmp	r8, r1
 8016b98:	bfa8      	it	ge
 8016b9a:	4688      	movge	r8, r1
 8016b9c:	f1bc 0f00 	cmp.w	ip, #0
 8016ba0:	d001      	beq.n	8016ba6 <_strtod_l+0x2ee>
 8016ba2:	f1c8 0800 	rsb	r8, r8, #0
 8016ba6:	2d00      	cmp	r5, #0
 8016ba8:	d14e      	bne.n	8016c48 <_strtod_l+0x390>
 8016baa:	9908      	ldr	r1, [sp, #32]
 8016bac:	4308      	orrs	r0, r1
 8016bae:	f47f aebc 	bne.w	801692a <_strtod_l+0x72>
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	f47f aed4 	bne.w	8016960 <_strtod_l+0xa8>
 8016bb8:	2a69      	cmp	r2, #105	@ 0x69
 8016bba:	d028      	beq.n	8016c0e <_strtod_l+0x356>
 8016bbc:	dc25      	bgt.n	8016c0a <_strtod_l+0x352>
 8016bbe:	2a49      	cmp	r2, #73	@ 0x49
 8016bc0:	d025      	beq.n	8016c0e <_strtod_l+0x356>
 8016bc2:	2a4e      	cmp	r2, #78	@ 0x4e
 8016bc4:	f47f aecc 	bne.w	8016960 <_strtod_l+0xa8>
 8016bc8:	499a      	ldr	r1, [pc, #616]	@ (8016e34 <_strtod_l+0x57c>)
 8016bca:	a819      	add	r0, sp, #100	@ 0x64
 8016bcc:	f001 fa64 	bl	8018098 <__match>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	f43f aec5 	beq.w	8016960 <_strtod_l+0xa8>
 8016bd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	2b28      	cmp	r3, #40	@ 0x28
 8016bdc:	d12e      	bne.n	8016c3c <_strtod_l+0x384>
 8016bde:	4996      	ldr	r1, [pc, #600]	@ (8016e38 <_strtod_l+0x580>)
 8016be0:	aa1c      	add	r2, sp, #112	@ 0x70
 8016be2:	a819      	add	r0, sp, #100	@ 0x64
 8016be4:	f001 fa6c 	bl	80180c0 <__hexnan>
 8016be8:	2805      	cmp	r0, #5
 8016bea:	d127      	bne.n	8016c3c <_strtod_l+0x384>
 8016bec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016bee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016bf2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016bf6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016bfa:	e696      	b.n	801692a <_strtod_l+0x72>
 8016bfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016bfe:	fb08 2101 	mla	r1, r8, r1, r2
 8016c02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c08:	e7b5      	b.n	8016b76 <_strtod_l+0x2be>
 8016c0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8016c0c:	e7da      	b.n	8016bc4 <_strtod_l+0x30c>
 8016c0e:	498b      	ldr	r1, [pc, #556]	@ (8016e3c <_strtod_l+0x584>)
 8016c10:	a819      	add	r0, sp, #100	@ 0x64
 8016c12:	f001 fa41 	bl	8018098 <__match>
 8016c16:	2800      	cmp	r0, #0
 8016c18:	f43f aea2 	beq.w	8016960 <_strtod_l+0xa8>
 8016c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c1e:	4988      	ldr	r1, [pc, #544]	@ (8016e40 <_strtod_l+0x588>)
 8016c20:	3b01      	subs	r3, #1
 8016c22:	a819      	add	r0, sp, #100	@ 0x64
 8016c24:	9319      	str	r3, [sp, #100]	@ 0x64
 8016c26:	f001 fa37 	bl	8018098 <__match>
 8016c2a:	b910      	cbnz	r0, 8016c32 <_strtod_l+0x37a>
 8016c2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c2e:	3301      	adds	r3, #1
 8016c30:	9319      	str	r3, [sp, #100]	@ 0x64
 8016c32:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016e50 <_strtod_l+0x598>
 8016c36:	f04f 0a00 	mov.w	sl, #0
 8016c3a:	e676      	b.n	801692a <_strtod_l+0x72>
 8016c3c:	4881      	ldr	r0, [pc, #516]	@ (8016e44 <_strtod_l+0x58c>)
 8016c3e:	f000 ff67 	bl	8017b10 <nan>
 8016c42:	ec5b ab10 	vmov	sl, fp, d0
 8016c46:	e670      	b.n	801692a <_strtod_l+0x72>
 8016c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016c4c:	eba8 0303 	sub.w	r3, r8, r3
 8016c50:	f1b9 0f00 	cmp.w	r9, #0
 8016c54:	bf08      	it	eq
 8016c56:	46a9      	moveq	r9, r5
 8016c58:	2d10      	cmp	r5, #16
 8016c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c5c:	462c      	mov	r4, r5
 8016c5e:	bfa8      	it	ge
 8016c60:	2410      	movge	r4, #16
 8016c62:	f7e9 fc77 	bl	8000554 <__aeabi_ui2d>
 8016c66:	2d09      	cmp	r5, #9
 8016c68:	4682      	mov	sl, r0
 8016c6a:	468b      	mov	fp, r1
 8016c6c:	dc13      	bgt.n	8016c96 <_strtod_l+0x3de>
 8016c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	f43f ae5a 	beq.w	801692a <_strtod_l+0x72>
 8016c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c78:	dd78      	ble.n	8016d6c <_strtod_l+0x4b4>
 8016c7a:	2b16      	cmp	r3, #22
 8016c7c:	dc5f      	bgt.n	8016d3e <_strtod_l+0x486>
 8016c7e:	4972      	ldr	r1, [pc, #456]	@ (8016e48 <_strtod_l+0x590>)
 8016c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c88:	4652      	mov	r2, sl
 8016c8a:	465b      	mov	r3, fp
 8016c8c:	f7e9 fcdc 	bl	8000648 <__aeabi_dmul>
 8016c90:	4682      	mov	sl, r0
 8016c92:	468b      	mov	fp, r1
 8016c94:	e649      	b.n	801692a <_strtod_l+0x72>
 8016c96:	4b6c      	ldr	r3, [pc, #432]	@ (8016e48 <_strtod_l+0x590>)
 8016c98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016c9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016ca0:	f7e9 fcd2 	bl	8000648 <__aeabi_dmul>
 8016ca4:	4682      	mov	sl, r0
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	468b      	mov	fp, r1
 8016caa:	f7e9 fc53 	bl	8000554 <__aeabi_ui2d>
 8016cae:	4602      	mov	r2, r0
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	4650      	mov	r0, sl
 8016cb4:	4659      	mov	r1, fp
 8016cb6:	f7e9 fb11 	bl	80002dc <__adddf3>
 8016cba:	2d0f      	cmp	r5, #15
 8016cbc:	4682      	mov	sl, r0
 8016cbe:	468b      	mov	fp, r1
 8016cc0:	ddd5      	ble.n	8016c6e <_strtod_l+0x3b6>
 8016cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cc4:	1b2c      	subs	r4, r5, r4
 8016cc6:	441c      	add	r4, r3
 8016cc8:	2c00      	cmp	r4, #0
 8016cca:	f340 8093 	ble.w	8016df4 <_strtod_l+0x53c>
 8016cce:	f014 030f 	ands.w	r3, r4, #15
 8016cd2:	d00a      	beq.n	8016cea <_strtod_l+0x432>
 8016cd4:	495c      	ldr	r1, [pc, #368]	@ (8016e48 <_strtod_l+0x590>)
 8016cd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016cda:	4652      	mov	r2, sl
 8016cdc:	465b      	mov	r3, fp
 8016cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ce2:	f7e9 fcb1 	bl	8000648 <__aeabi_dmul>
 8016ce6:	4682      	mov	sl, r0
 8016ce8:	468b      	mov	fp, r1
 8016cea:	f034 040f 	bics.w	r4, r4, #15
 8016cee:	d073      	beq.n	8016dd8 <_strtod_l+0x520>
 8016cf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016cf4:	dd49      	ble.n	8016d8a <_strtod_l+0x4d2>
 8016cf6:	2400      	movs	r4, #0
 8016cf8:	46a0      	mov	r8, r4
 8016cfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016cfc:	46a1      	mov	r9, r4
 8016cfe:	9a05      	ldr	r2, [sp, #20]
 8016d00:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016e50 <_strtod_l+0x598>
 8016d04:	2322      	movs	r3, #34	@ 0x22
 8016d06:	6013      	str	r3, [r2, #0]
 8016d08:	f04f 0a00 	mov.w	sl, #0
 8016d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	f43f ae0b 	beq.w	801692a <_strtod_l+0x72>
 8016d14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d16:	9805      	ldr	r0, [sp, #20]
 8016d18:	f7ff f946 	bl	8015fa8 <_Bfree>
 8016d1c:	9805      	ldr	r0, [sp, #20]
 8016d1e:	4649      	mov	r1, r9
 8016d20:	f7ff f942 	bl	8015fa8 <_Bfree>
 8016d24:	9805      	ldr	r0, [sp, #20]
 8016d26:	4641      	mov	r1, r8
 8016d28:	f7ff f93e 	bl	8015fa8 <_Bfree>
 8016d2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016d2e:	9805      	ldr	r0, [sp, #20]
 8016d30:	f7ff f93a 	bl	8015fa8 <_Bfree>
 8016d34:	9805      	ldr	r0, [sp, #20]
 8016d36:	4621      	mov	r1, r4
 8016d38:	f7ff f936 	bl	8015fa8 <_Bfree>
 8016d3c:	e5f5      	b.n	801692a <_strtod_l+0x72>
 8016d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016d44:	4293      	cmp	r3, r2
 8016d46:	dbbc      	blt.n	8016cc2 <_strtod_l+0x40a>
 8016d48:	4c3f      	ldr	r4, [pc, #252]	@ (8016e48 <_strtod_l+0x590>)
 8016d4a:	f1c5 050f 	rsb	r5, r5, #15
 8016d4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016d52:	4652      	mov	r2, sl
 8016d54:	465b      	mov	r3, fp
 8016d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d5a:	f7e9 fc75 	bl	8000648 <__aeabi_dmul>
 8016d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d60:	1b5d      	subs	r5, r3, r5
 8016d62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016d66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016d6a:	e78f      	b.n	8016c8c <_strtod_l+0x3d4>
 8016d6c:	3316      	adds	r3, #22
 8016d6e:	dba8      	blt.n	8016cc2 <_strtod_l+0x40a>
 8016d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d72:	eba3 0808 	sub.w	r8, r3, r8
 8016d76:	4b34      	ldr	r3, [pc, #208]	@ (8016e48 <_strtod_l+0x590>)
 8016d78:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016d7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016d80:	4650      	mov	r0, sl
 8016d82:	4659      	mov	r1, fp
 8016d84:	f7e9 fd8a 	bl	800089c <__aeabi_ddiv>
 8016d88:	e782      	b.n	8016c90 <_strtod_l+0x3d8>
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	4f2f      	ldr	r7, [pc, #188]	@ (8016e4c <_strtod_l+0x594>)
 8016d8e:	1124      	asrs	r4, r4, #4
 8016d90:	4650      	mov	r0, sl
 8016d92:	4659      	mov	r1, fp
 8016d94:	461e      	mov	r6, r3
 8016d96:	2c01      	cmp	r4, #1
 8016d98:	dc21      	bgt.n	8016dde <_strtod_l+0x526>
 8016d9a:	b10b      	cbz	r3, 8016da0 <_strtod_l+0x4e8>
 8016d9c:	4682      	mov	sl, r0
 8016d9e:	468b      	mov	fp, r1
 8016da0:	492a      	ldr	r1, [pc, #168]	@ (8016e4c <_strtod_l+0x594>)
 8016da2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016da6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016daa:	4652      	mov	r2, sl
 8016dac:	465b      	mov	r3, fp
 8016dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016db2:	f7e9 fc49 	bl	8000648 <__aeabi_dmul>
 8016db6:	4b26      	ldr	r3, [pc, #152]	@ (8016e50 <_strtod_l+0x598>)
 8016db8:	460a      	mov	r2, r1
 8016dba:	400b      	ands	r3, r1
 8016dbc:	4925      	ldr	r1, [pc, #148]	@ (8016e54 <_strtod_l+0x59c>)
 8016dbe:	428b      	cmp	r3, r1
 8016dc0:	4682      	mov	sl, r0
 8016dc2:	d898      	bhi.n	8016cf6 <_strtod_l+0x43e>
 8016dc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016dc8:	428b      	cmp	r3, r1
 8016dca:	bf86      	itte	hi
 8016dcc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016e58 <_strtod_l+0x5a0>
 8016dd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8016dd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016dd8:	2300      	movs	r3, #0
 8016dda:	9308      	str	r3, [sp, #32]
 8016ddc:	e076      	b.n	8016ecc <_strtod_l+0x614>
 8016dde:	07e2      	lsls	r2, r4, #31
 8016de0:	d504      	bpl.n	8016dec <_strtod_l+0x534>
 8016de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016de6:	f7e9 fc2f 	bl	8000648 <__aeabi_dmul>
 8016dea:	2301      	movs	r3, #1
 8016dec:	3601      	adds	r6, #1
 8016dee:	1064      	asrs	r4, r4, #1
 8016df0:	3708      	adds	r7, #8
 8016df2:	e7d0      	b.n	8016d96 <_strtod_l+0x4de>
 8016df4:	d0f0      	beq.n	8016dd8 <_strtod_l+0x520>
 8016df6:	4264      	negs	r4, r4
 8016df8:	f014 020f 	ands.w	r2, r4, #15
 8016dfc:	d00a      	beq.n	8016e14 <_strtod_l+0x55c>
 8016dfe:	4b12      	ldr	r3, [pc, #72]	@ (8016e48 <_strtod_l+0x590>)
 8016e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016e04:	4650      	mov	r0, sl
 8016e06:	4659      	mov	r1, fp
 8016e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e0c:	f7e9 fd46 	bl	800089c <__aeabi_ddiv>
 8016e10:	4682      	mov	sl, r0
 8016e12:	468b      	mov	fp, r1
 8016e14:	1124      	asrs	r4, r4, #4
 8016e16:	d0df      	beq.n	8016dd8 <_strtod_l+0x520>
 8016e18:	2c1f      	cmp	r4, #31
 8016e1a:	dd1f      	ble.n	8016e5c <_strtod_l+0x5a4>
 8016e1c:	2400      	movs	r4, #0
 8016e1e:	46a0      	mov	r8, r4
 8016e20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016e22:	46a1      	mov	r9, r4
 8016e24:	9a05      	ldr	r2, [sp, #20]
 8016e26:	2322      	movs	r3, #34	@ 0x22
 8016e28:	f04f 0a00 	mov.w	sl, #0
 8016e2c:	f04f 0b00 	mov.w	fp, #0
 8016e30:	6013      	str	r3, [r2, #0]
 8016e32:	e76b      	b.n	8016d0c <_strtod_l+0x454>
 8016e34:	0801bb75 	.word	0x0801bb75
 8016e38:	0801be40 	.word	0x0801be40
 8016e3c:	0801bb6d 	.word	0x0801bb6d
 8016e40:	0801bba4 	.word	0x0801bba4
 8016e44:	0801bcdd 	.word	0x0801bcdd
 8016e48:	0801bd78 	.word	0x0801bd78
 8016e4c:	0801bd50 	.word	0x0801bd50
 8016e50:	7ff00000 	.word	0x7ff00000
 8016e54:	7ca00000 	.word	0x7ca00000
 8016e58:	7fefffff 	.word	0x7fefffff
 8016e5c:	f014 0310 	ands.w	r3, r4, #16
 8016e60:	bf18      	it	ne
 8016e62:	236a      	movne	r3, #106	@ 0x6a
 8016e64:	4ea9      	ldr	r6, [pc, #676]	@ (801710c <_strtod_l+0x854>)
 8016e66:	9308      	str	r3, [sp, #32]
 8016e68:	4650      	mov	r0, sl
 8016e6a:	4659      	mov	r1, fp
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	07e7      	lsls	r7, r4, #31
 8016e70:	d504      	bpl.n	8016e7c <_strtod_l+0x5c4>
 8016e72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016e76:	f7e9 fbe7 	bl	8000648 <__aeabi_dmul>
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	1064      	asrs	r4, r4, #1
 8016e7e:	f106 0608 	add.w	r6, r6, #8
 8016e82:	d1f4      	bne.n	8016e6e <_strtod_l+0x5b6>
 8016e84:	b10b      	cbz	r3, 8016e8a <_strtod_l+0x5d2>
 8016e86:	4682      	mov	sl, r0
 8016e88:	468b      	mov	fp, r1
 8016e8a:	9b08      	ldr	r3, [sp, #32]
 8016e8c:	b1b3      	cbz	r3, 8016ebc <_strtod_l+0x604>
 8016e8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016e92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	4659      	mov	r1, fp
 8016e9a:	dd0f      	ble.n	8016ebc <_strtod_l+0x604>
 8016e9c:	2b1f      	cmp	r3, #31
 8016e9e:	dd56      	ble.n	8016f4e <_strtod_l+0x696>
 8016ea0:	2b34      	cmp	r3, #52	@ 0x34
 8016ea2:	bfde      	ittt	le
 8016ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8016ea8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016eac:	4093      	lslle	r3, r2
 8016eae:	f04f 0a00 	mov.w	sl, #0
 8016eb2:	bfcc      	ite	gt
 8016eb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016eb8:	ea03 0b01 	andle.w	fp, r3, r1
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	4650      	mov	r0, sl
 8016ec2:	4659      	mov	r1, fp
 8016ec4:	f7e9 fe28 	bl	8000b18 <__aeabi_dcmpeq>
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d1a7      	bne.n	8016e1c <_strtod_l+0x564>
 8016ecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016ece:	9300      	str	r3, [sp, #0]
 8016ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016ed2:	9805      	ldr	r0, [sp, #20]
 8016ed4:	462b      	mov	r3, r5
 8016ed6:	464a      	mov	r2, r9
 8016ed8:	f7ff f8ce 	bl	8016078 <__s2b>
 8016edc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016ede:	2800      	cmp	r0, #0
 8016ee0:	f43f af09 	beq.w	8016cf6 <_strtod_l+0x43e>
 8016ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ee8:	2a00      	cmp	r2, #0
 8016eea:	eba3 0308 	sub.w	r3, r3, r8
 8016eee:	bfa8      	it	ge
 8016ef0:	2300      	movge	r3, #0
 8016ef2:	9312      	str	r3, [sp, #72]	@ 0x48
 8016ef4:	2400      	movs	r4, #0
 8016ef6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016efa:	9316      	str	r3, [sp, #88]	@ 0x58
 8016efc:	46a0      	mov	r8, r4
 8016efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016f00:	9805      	ldr	r0, [sp, #20]
 8016f02:	6859      	ldr	r1, [r3, #4]
 8016f04:	f7ff f810 	bl	8015f28 <_Balloc>
 8016f08:	4681      	mov	r9, r0
 8016f0a:	2800      	cmp	r0, #0
 8016f0c:	f43f aef7 	beq.w	8016cfe <_strtod_l+0x446>
 8016f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016f12:	691a      	ldr	r2, [r3, #16]
 8016f14:	3202      	adds	r2, #2
 8016f16:	f103 010c 	add.w	r1, r3, #12
 8016f1a:	0092      	lsls	r2, r2, #2
 8016f1c:	300c      	adds	r0, #12
 8016f1e:	f7fe f896 	bl	801504e <memcpy>
 8016f22:	ec4b ab10 	vmov	d0, sl, fp
 8016f26:	9805      	ldr	r0, [sp, #20]
 8016f28:	aa1c      	add	r2, sp, #112	@ 0x70
 8016f2a:	a91b      	add	r1, sp, #108	@ 0x6c
 8016f2c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016f30:	f7ff fbd6 	bl	80166e0 <__d2b>
 8016f34:	901a      	str	r0, [sp, #104]	@ 0x68
 8016f36:	2800      	cmp	r0, #0
 8016f38:	f43f aee1 	beq.w	8016cfe <_strtod_l+0x446>
 8016f3c:	9805      	ldr	r0, [sp, #20]
 8016f3e:	2101      	movs	r1, #1
 8016f40:	f7ff f930 	bl	80161a4 <__i2b>
 8016f44:	4680      	mov	r8, r0
 8016f46:	b948      	cbnz	r0, 8016f5c <_strtod_l+0x6a4>
 8016f48:	f04f 0800 	mov.w	r8, #0
 8016f4c:	e6d7      	b.n	8016cfe <_strtod_l+0x446>
 8016f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8016f52:	fa02 f303 	lsl.w	r3, r2, r3
 8016f56:	ea03 0a0a 	and.w	sl, r3, sl
 8016f5a:	e7af      	b.n	8016ebc <_strtod_l+0x604>
 8016f5c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016f5e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016f60:	2d00      	cmp	r5, #0
 8016f62:	bfab      	itete	ge
 8016f64:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016f66:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016f68:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016f6a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016f6c:	bfac      	ite	ge
 8016f6e:	18ef      	addge	r7, r5, r3
 8016f70:	1b5e      	sublt	r6, r3, r5
 8016f72:	9b08      	ldr	r3, [sp, #32]
 8016f74:	1aed      	subs	r5, r5, r3
 8016f76:	4415      	add	r5, r2
 8016f78:	4b65      	ldr	r3, [pc, #404]	@ (8017110 <_strtod_l+0x858>)
 8016f7a:	3d01      	subs	r5, #1
 8016f7c:	429d      	cmp	r5, r3
 8016f7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016f82:	da50      	bge.n	8017026 <_strtod_l+0x76e>
 8016f84:	1b5b      	subs	r3, r3, r5
 8016f86:	2b1f      	cmp	r3, #31
 8016f88:	eba2 0203 	sub.w	r2, r2, r3
 8016f8c:	f04f 0101 	mov.w	r1, #1
 8016f90:	dc3d      	bgt.n	801700e <_strtod_l+0x756>
 8016f92:	fa01 f303 	lsl.w	r3, r1, r3
 8016f96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016f98:	2300      	movs	r3, #0
 8016f9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8016f9c:	18bd      	adds	r5, r7, r2
 8016f9e:	9b08      	ldr	r3, [sp, #32]
 8016fa0:	42af      	cmp	r7, r5
 8016fa2:	4416      	add	r6, r2
 8016fa4:	441e      	add	r6, r3
 8016fa6:	463b      	mov	r3, r7
 8016fa8:	bfa8      	it	ge
 8016faa:	462b      	movge	r3, r5
 8016fac:	42b3      	cmp	r3, r6
 8016fae:	bfa8      	it	ge
 8016fb0:	4633      	movge	r3, r6
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	bfc2      	ittt	gt
 8016fb6:	1aed      	subgt	r5, r5, r3
 8016fb8:	1af6      	subgt	r6, r6, r3
 8016fba:	1aff      	subgt	r7, r7, r3
 8016fbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	dd16      	ble.n	8016ff0 <_strtod_l+0x738>
 8016fc2:	4641      	mov	r1, r8
 8016fc4:	9805      	ldr	r0, [sp, #20]
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	f7ff f9a4 	bl	8016314 <__pow5mult>
 8016fcc:	4680      	mov	r8, r0
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d0ba      	beq.n	8016f48 <_strtod_l+0x690>
 8016fd2:	4601      	mov	r1, r0
 8016fd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016fd6:	9805      	ldr	r0, [sp, #20]
 8016fd8:	f7ff f8fa 	bl	80161d0 <__multiply>
 8016fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	f43f ae8d 	beq.w	8016cfe <_strtod_l+0x446>
 8016fe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016fe6:	9805      	ldr	r0, [sp, #20]
 8016fe8:	f7fe ffde 	bl	8015fa8 <_Bfree>
 8016fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fee:	931a      	str	r3, [sp, #104]	@ 0x68
 8016ff0:	2d00      	cmp	r5, #0
 8016ff2:	dc1d      	bgt.n	8017030 <_strtod_l+0x778>
 8016ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	dd23      	ble.n	8017042 <_strtod_l+0x78a>
 8016ffa:	4649      	mov	r1, r9
 8016ffc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016ffe:	9805      	ldr	r0, [sp, #20]
 8017000:	f7ff f988 	bl	8016314 <__pow5mult>
 8017004:	4681      	mov	r9, r0
 8017006:	b9e0      	cbnz	r0, 8017042 <_strtod_l+0x78a>
 8017008:	f04f 0900 	mov.w	r9, #0
 801700c:	e677      	b.n	8016cfe <_strtod_l+0x446>
 801700e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8017012:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8017016:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801701a:	35e2      	adds	r5, #226	@ 0xe2
 801701c:	fa01 f305 	lsl.w	r3, r1, r5
 8017020:	9310      	str	r3, [sp, #64]	@ 0x40
 8017022:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017024:	e7ba      	b.n	8016f9c <_strtod_l+0x6e4>
 8017026:	2300      	movs	r3, #0
 8017028:	9310      	str	r3, [sp, #64]	@ 0x40
 801702a:	2301      	movs	r3, #1
 801702c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801702e:	e7b5      	b.n	8016f9c <_strtod_l+0x6e4>
 8017030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017032:	9805      	ldr	r0, [sp, #20]
 8017034:	462a      	mov	r2, r5
 8017036:	f7ff f9c7 	bl	80163c8 <__lshift>
 801703a:	901a      	str	r0, [sp, #104]	@ 0x68
 801703c:	2800      	cmp	r0, #0
 801703e:	d1d9      	bne.n	8016ff4 <_strtod_l+0x73c>
 8017040:	e65d      	b.n	8016cfe <_strtod_l+0x446>
 8017042:	2e00      	cmp	r6, #0
 8017044:	dd07      	ble.n	8017056 <_strtod_l+0x79e>
 8017046:	4649      	mov	r1, r9
 8017048:	9805      	ldr	r0, [sp, #20]
 801704a:	4632      	mov	r2, r6
 801704c:	f7ff f9bc 	bl	80163c8 <__lshift>
 8017050:	4681      	mov	r9, r0
 8017052:	2800      	cmp	r0, #0
 8017054:	d0d8      	beq.n	8017008 <_strtod_l+0x750>
 8017056:	2f00      	cmp	r7, #0
 8017058:	dd08      	ble.n	801706c <_strtod_l+0x7b4>
 801705a:	4641      	mov	r1, r8
 801705c:	9805      	ldr	r0, [sp, #20]
 801705e:	463a      	mov	r2, r7
 8017060:	f7ff f9b2 	bl	80163c8 <__lshift>
 8017064:	4680      	mov	r8, r0
 8017066:	2800      	cmp	r0, #0
 8017068:	f43f ae49 	beq.w	8016cfe <_strtod_l+0x446>
 801706c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801706e:	9805      	ldr	r0, [sp, #20]
 8017070:	464a      	mov	r2, r9
 8017072:	f7ff fa31 	bl	80164d8 <__mdiff>
 8017076:	4604      	mov	r4, r0
 8017078:	2800      	cmp	r0, #0
 801707a:	f43f ae40 	beq.w	8016cfe <_strtod_l+0x446>
 801707e:	68c3      	ldr	r3, [r0, #12]
 8017080:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017082:	2300      	movs	r3, #0
 8017084:	60c3      	str	r3, [r0, #12]
 8017086:	4641      	mov	r1, r8
 8017088:	f7ff fa0a 	bl	80164a0 <__mcmp>
 801708c:	2800      	cmp	r0, #0
 801708e:	da45      	bge.n	801711c <_strtod_l+0x864>
 8017090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017092:	ea53 030a 	orrs.w	r3, r3, sl
 8017096:	d16b      	bne.n	8017170 <_strtod_l+0x8b8>
 8017098:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801709c:	2b00      	cmp	r3, #0
 801709e:	d167      	bne.n	8017170 <_strtod_l+0x8b8>
 80170a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80170a4:	0d1b      	lsrs	r3, r3, #20
 80170a6:	051b      	lsls	r3, r3, #20
 80170a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80170ac:	d960      	bls.n	8017170 <_strtod_l+0x8b8>
 80170ae:	6963      	ldr	r3, [r4, #20]
 80170b0:	b913      	cbnz	r3, 80170b8 <_strtod_l+0x800>
 80170b2:	6923      	ldr	r3, [r4, #16]
 80170b4:	2b01      	cmp	r3, #1
 80170b6:	dd5b      	ble.n	8017170 <_strtod_l+0x8b8>
 80170b8:	4621      	mov	r1, r4
 80170ba:	2201      	movs	r2, #1
 80170bc:	9805      	ldr	r0, [sp, #20]
 80170be:	f7ff f983 	bl	80163c8 <__lshift>
 80170c2:	4641      	mov	r1, r8
 80170c4:	4604      	mov	r4, r0
 80170c6:	f7ff f9eb 	bl	80164a0 <__mcmp>
 80170ca:	2800      	cmp	r0, #0
 80170cc:	dd50      	ble.n	8017170 <_strtod_l+0x8b8>
 80170ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80170d2:	9a08      	ldr	r2, [sp, #32]
 80170d4:	0d1b      	lsrs	r3, r3, #20
 80170d6:	051b      	lsls	r3, r3, #20
 80170d8:	2a00      	cmp	r2, #0
 80170da:	d06a      	beq.n	80171b2 <_strtod_l+0x8fa>
 80170dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80170e0:	d867      	bhi.n	80171b2 <_strtod_l+0x8fa>
 80170e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80170e6:	f67f ae9d 	bls.w	8016e24 <_strtod_l+0x56c>
 80170ea:	4b0a      	ldr	r3, [pc, #40]	@ (8017114 <_strtod_l+0x85c>)
 80170ec:	4650      	mov	r0, sl
 80170ee:	4659      	mov	r1, fp
 80170f0:	2200      	movs	r2, #0
 80170f2:	f7e9 faa9 	bl	8000648 <__aeabi_dmul>
 80170f6:	4b08      	ldr	r3, [pc, #32]	@ (8017118 <_strtod_l+0x860>)
 80170f8:	400b      	ands	r3, r1
 80170fa:	4682      	mov	sl, r0
 80170fc:	468b      	mov	fp, r1
 80170fe:	2b00      	cmp	r3, #0
 8017100:	f47f ae08 	bne.w	8016d14 <_strtod_l+0x45c>
 8017104:	9a05      	ldr	r2, [sp, #20]
 8017106:	2322      	movs	r3, #34	@ 0x22
 8017108:	6013      	str	r3, [r2, #0]
 801710a:	e603      	b.n	8016d14 <_strtod_l+0x45c>
 801710c:	0801be68 	.word	0x0801be68
 8017110:	fffffc02 	.word	0xfffffc02
 8017114:	39500000 	.word	0x39500000
 8017118:	7ff00000 	.word	0x7ff00000
 801711c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017120:	d165      	bne.n	80171ee <_strtod_l+0x936>
 8017122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017128:	b35a      	cbz	r2, 8017182 <_strtod_l+0x8ca>
 801712a:	4a9f      	ldr	r2, [pc, #636]	@ (80173a8 <_strtod_l+0xaf0>)
 801712c:	4293      	cmp	r3, r2
 801712e:	d12b      	bne.n	8017188 <_strtod_l+0x8d0>
 8017130:	9b08      	ldr	r3, [sp, #32]
 8017132:	4651      	mov	r1, sl
 8017134:	b303      	cbz	r3, 8017178 <_strtod_l+0x8c0>
 8017136:	4b9d      	ldr	r3, [pc, #628]	@ (80173ac <_strtod_l+0xaf4>)
 8017138:	465a      	mov	r2, fp
 801713a:	4013      	ands	r3, r2
 801713c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017140:	f04f 32ff 	mov.w	r2, #4294967295
 8017144:	d81b      	bhi.n	801717e <_strtod_l+0x8c6>
 8017146:	0d1b      	lsrs	r3, r3, #20
 8017148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801714c:	fa02 f303 	lsl.w	r3, r2, r3
 8017150:	4299      	cmp	r1, r3
 8017152:	d119      	bne.n	8017188 <_strtod_l+0x8d0>
 8017154:	4b96      	ldr	r3, [pc, #600]	@ (80173b0 <_strtod_l+0xaf8>)
 8017156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017158:	429a      	cmp	r2, r3
 801715a:	d102      	bne.n	8017162 <_strtod_l+0x8aa>
 801715c:	3101      	adds	r1, #1
 801715e:	f43f adce 	beq.w	8016cfe <_strtod_l+0x446>
 8017162:	4b92      	ldr	r3, [pc, #584]	@ (80173ac <_strtod_l+0xaf4>)
 8017164:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017166:	401a      	ands	r2, r3
 8017168:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801716c:	f04f 0a00 	mov.w	sl, #0
 8017170:	9b08      	ldr	r3, [sp, #32]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d1b9      	bne.n	80170ea <_strtod_l+0x832>
 8017176:	e5cd      	b.n	8016d14 <_strtod_l+0x45c>
 8017178:	f04f 33ff 	mov.w	r3, #4294967295
 801717c:	e7e8      	b.n	8017150 <_strtod_l+0x898>
 801717e:	4613      	mov	r3, r2
 8017180:	e7e6      	b.n	8017150 <_strtod_l+0x898>
 8017182:	ea53 030a 	orrs.w	r3, r3, sl
 8017186:	d0a2      	beq.n	80170ce <_strtod_l+0x816>
 8017188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801718a:	b1db      	cbz	r3, 80171c4 <_strtod_l+0x90c>
 801718c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801718e:	4213      	tst	r3, r2
 8017190:	d0ee      	beq.n	8017170 <_strtod_l+0x8b8>
 8017192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017194:	9a08      	ldr	r2, [sp, #32]
 8017196:	4650      	mov	r0, sl
 8017198:	4659      	mov	r1, fp
 801719a:	b1bb      	cbz	r3, 80171cc <_strtod_l+0x914>
 801719c:	f7ff fb6e 	bl	801687c <sulp>
 80171a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80171a4:	ec53 2b10 	vmov	r2, r3, d0
 80171a8:	f7e9 f898 	bl	80002dc <__adddf3>
 80171ac:	4682      	mov	sl, r0
 80171ae:	468b      	mov	fp, r1
 80171b0:	e7de      	b.n	8017170 <_strtod_l+0x8b8>
 80171b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80171b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80171ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80171be:	f04f 3aff 	mov.w	sl, #4294967295
 80171c2:	e7d5      	b.n	8017170 <_strtod_l+0x8b8>
 80171c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80171c6:	ea13 0f0a 	tst.w	r3, sl
 80171ca:	e7e1      	b.n	8017190 <_strtod_l+0x8d8>
 80171cc:	f7ff fb56 	bl	801687c <sulp>
 80171d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80171d4:	ec53 2b10 	vmov	r2, r3, d0
 80171d8:	f7e9 f87e 	bl	80002d8 <__aeabi_dsub>
 80171dc:	2200      	movs	r2, #0
 80171de:	2300      	movs	r3, #0
 80171e0:	4682      	mov	sl, r0
 80171e2:	468b      	mov	fp, r1
 80171e4:	f7e9 fc98 	bl	8000b18 <__aeabi_dcmpeq>
 80171e8:	2800      	cmp	r0, #0
 80171ea:	d0c1      	beq.n	8017170 <_strtod_l+0x8b8>
 80171ec:	e61a      	b.n	8016e24 <_strtod_l+0x56c>
 80171ee:	4641      	mov	r1, r8
 80171f0:	4620      	mov	r0, r4
 80171f2:	f7ff facd 	bl	8016790 <__ratio>
 80171f6:	ec57 6b10 	vmov	r6, r7, d0
 80171fa:	2200      	movs	r2, #0
 80171fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017200:	4630      	mov	r0, r6
 8017202:	4639      	mov	r1, r7
 8017204:	f7e9 fc9c 	bl	8000b40 <__aeabi_dcmple>
 8017208:	2800      	cmp	r0, #0
 801720a:	d06f      	beq.n	80172ec <_strtod_l+0xa34>
 801720c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801720e:	2b00      	cmp	r3, #0
 8017210:	d17a      	bne.n	8017308 <_strtod_l+0xa50>
 8017212:	f1ba 0f00 	cmp.w	sl, #0
 8017216:	d158      	bne.n	80172ca <_strtod_l+0xa12>
 8017218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801721a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801721e:	2b00      	cmp	r3, #0
 8017220:	d15a      	bne.n	80172d8 <_strtod_l+0xa20>
 8017222:	4b64      	ldr	r3, [pc, #400]	@ (80173b4 <_strtod_l+0xafc>)
 8017224:	2200      	movs	r2, #0
 8017226:	4630      	mov	r0, r6
 8017228:	4639      	mov	r1, r7
 801722a:	f7e9 fc7f 	bl	8000b2c <__aeabi_dcmplt>
 801722e:	2800      	cmp	r0, #0
 8017230:	d159      	bne.n	80172e6 <_strtod_l+0xa2e>
 8017232:	4630      	mov	r0, r6
 8017234:	4639      	mov	r1, r7
 8017236:	4b60      	ldr	r3, [pc, #384]	@ (80173b8 <_strtod_l+0xb00>)
 8017238:	2200      	movs	r2, #0
 801723a:	f7e9 fa05 	bl	8000648 <__aeabi_dmul>
 801723e:	4606      	mov	r6, r0
 8017240:	460f      	mov	r7, r1
 8017242:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017246:	9606      	str	r6, [sp, #24]
 8017248:	9307      	str	r3, [sp, #28]
 801724a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801724e:	4d57      	ldr	r5, [pc, #348]	@ (80173ac <_strtod_l+0xaf4>)
 8017250:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017256:	401d      	ands	r5, r3
 8017258:	4b58      	ldr	r3, [pc, #352]	@ (80173bc <_strtod_l+0xb04>)
 801725a:	429d      	cmp	r5, r3
 801725c:	f040 80b2 	bne.w	80173c4 <_strtod_l+0xb0c>
 8017260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017262:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8017266:	ec4b ab10 	vmov	d0, sl, fp
 801726a:	f7ff f9c9 	bl	8016600 <__ulp>
 801726e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017272:	ec51 0b10 	vmov	r0, r1, d0
 8017276:	f7e9 f9e7 	bl	8000648 <__aeabi_dmul>
 801727a:	4652      	mov	r2, sl
 801727c:	465b      	mov	r3, fp
 801727e:	f7e9 f82d 	bl	80002dc <__adddf3>
 8017282:	460b      	mov	r3, r1
 8017284:	4949      	ldr	r1, [pc, #292]	@ (80173ac <_strtod_l+0xaf4>)
 8017286:	4a4e      	ldr	r2, [pc, #312]	@ (80173c0 <_strtod_l+0xb08>)
 8017288:	4019      	ands	r1, r3
 801728a:	4291      	cmp	r1, r2
 801728c:	4682      	mov	sl, r0
 801728e:	d942      	bls.n	8017316 <_strtod_l+0xa5e>
 8017290:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017292:	4b47      	ldr	r3, [pc, #284]	@ (80173b0 <_strtod_l+0xaf8>)
 8017294:	429a      	cmp	r2, r3
 8017296:	d103      	bne.n	80172a0 <_strtod_l+0x9e8>
 8017298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801729a:	3301      	adds	r3, #1
 801729c:	f43f ad2f 	beq.w	8016cfe <_strtod_l+0x446>
 80172a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80173b0 <_strtod_l+0xaf8>
 80172a4:	f04f 3aff 	mov.w	sl, #4294967295
 80172a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80172aa:	9805      	ldr	r0, [sp, #20]
 80172ac:	f7fe fe7c 	bl	8015fa8 <_Bfree>
 80172b0:	9805      	ldr	r0, [sp, #20]
 80172b2:	4649      	mov	r1, r9
 80172b4:	f7fe fe78 	bl	8015fa8 <_Bfree>
 80172b8:	9805      	ldr	r0, [sp, #20]
 80172ba:	4641      	mov	r1, r8
 80172bc:	f7fe fe74 	bl	8015fa8 <_Bfree>
 80172c0:	9805      	ldr	r0, [sp, #20]
 80172c2:	4621      	mov	r1, r4
 80172c4:	f7fe fe70 	bl	8015fa8 <_Bfree>
 80172c8:	e619      	b.n	8016efe <_strtod_l+0x646>
 80172ca:	f1ba 0f01 	cmp.w	sl, #1
 80172ce:	d103      	bne.n	80172d8 <_strtod_l+0xa20>
 80172d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	f43f ada6 	beq.w	8016e24 <_strtod_l+0x56c>
 80172d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017388 <_strtod_l+0xad0>
 80172dc:	4f35      	ldr	r7, [pc, #212]	@ (80173b4 <_strtod_l+0xafc>)
 80172de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80172e2:	2600      	movs	r6, #0
 80172e4:	e7b1      	b.n	801724a <_strtod_l+0x992>
 80172e6:	4f34      	ldr	r7, [pc, #208]	@ (80173b8 <_strtod_l+0xb00>)
 80172e8:	2600      	movs	r6, #0
 80172ea:	e7aa      	b.n	8017242 <_strtod_l+0x98a>
 80172ec:	4b32      	ldr	r3, [pc, #200]	@ (80173b8 <_strtod_l+0xb00>)
 80172ee:	4630      	mov	r0, r6
 80172f0:	4639      	mov	r1, r7
 80172f2:	2200      	movs	r2, #0
 80172f4:	f7e9 f9a8 	bl	8000648 <__aeabi_dmul>
 80172f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80172fa:	4606      	mov	r6, r0
 80172fc:	460f      	mov	r7, r1
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d09f      	beq.n	8017242 <_strtod_l+0x98a>
 8017302:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017306:	e7a0      	b.n	801724a <_strtod_l+0x992>
 8017308:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017390 <_strtod_l+0xad8>
 801730c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017310:	ec57 6b17 	vmov	r6, r7, d7
 8017314:	e799      	b.n	801724a <_strtod_l+0x992>
 8017316:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801731a:	9b08      	ldr	r3, [sp, #32]
 801731c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017320:	2b00      	cmp	r3, #0
 8017322:	d1c1      	bne.n	80172a8 <_strtod_l+0x9f0>
 8017324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017328:	0d1b      	lsrs	r3, r3, #20
 801732a:	051b      	lsls	r3, r3, #20
 801732c:	429d      	cmp	r5, r3
 801732e:	d1bb      	bne.n	80172a8 <_strtod_l+0x9f0>
 8017330:	4630      	mov	r0, r6
 8017332:	4639      	mov	r1, r7
 8017334:	f7e9 fce8 	bl	8000d08 <__aeabi_d2lz>
 8017338:	f7e9 f958 	bl	80005ec <__aeabi_l2d>
 801733c:	4602      	mov	r2, r0
 801733e:	460b      	mov	r3, r1
 8017340:	4630      	mov	r0, r6
 8017342:	4639      	mov	r1, r7
 8017344:	f7e8 ffc8 	bl	80002d8 <__aeabi_dsub>
 8017348:	460b      	mov	r3, r1
 801734a:	4602      	mov	r2, r0
 801734c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017350:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017356:	ea46 060a 	orr.w	r6, r6, sl
 801735a:	431e      	orrs	r6, r3
 801735c:	d06f      	beq.n	801743e <_strtod_l+0xb86>
 801735e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017398 <_strtod_l+0xae0>)
 8017360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017364:	f7e9 fbe2 	bl	8000b2c <__aeabi_dcmplt>
 8017368:	2800      	cmp	r0, #0
 801736a:	f47f acd3 	bne.w	8016d14 <_strtod_l+0x45c>
 801736e:	a30c      	add	r3, pc, #48	@ (adr r3, 80173a0 <_strtod_l+0xae8>)
 8017370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017378:	f7e9 fbf6 	bl	8000b68 <__aeabi_dcmpgt>
 801737c:	2800      	cmp	r0, #0
 801737e:	d093      	beq.n	80172a8 <_strtod_l+0x9f0>
 8017380:	e4c8      	b.n	8016d14 <_strtod_l+0x45c>
 8017382:	bf00      	nop
 8017384:	f3af 8000 	nop.w
 8017388:	00000000 	.word	0x00000000
 801738c:	bff00000 	.word	0xbff00000
 8017390:	00000000 	.word	0x00000000
 8017394:	3ff00000 	.word	0x3ff00000
 8017398:	94a03595 	.word	0x94a03595
 801739c:	3fdfffff 	.word	0x3fdfffff
 80173a0:	35afe535 	.word	0x35afe535
 80173a4:	3fe00000 	.word	0x3fe00000
 80173a8:	000fffff 	.word	0x000fffff
 80173ac:	7ff00000 	.word	0x7ff00000
 80173b0:	7fefffff 	.word	0x7fefffff
 80173b4:	3ff00000 	.word	0x3ff00000
 80173b8:	3fe00000 	.word	0x3fe00000
 80173bc:	7fe00000 	.word	0x7fe00000
 80173c0:	7c9fffff 	.word	0x7c9fffff
 80173c4:	9b08      	ldr	r3, [sp, #32]
 80173c6:	b323      	cbz	r3, 8017412 <_strtod_l+0xb5a>
 80173c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80173cc:	d821      	bhi.n	8017412 <_strtod_l+0xb5a>
 80173ce:	a328      	add	r3, pc, #160	@ (adr r3, 8017470 <_strtod_l+0xbb8>)
 80173d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d4:	4630      	mov	r0, r6
 80173d6:	4639      	mov	r1, r7
 80173d8:	f7e9 fbb2 	bl	8000b40 <__aeabi_dcmple>
 80173dc:	b1a0      	cbz	r0, 8017408 <_strtod_l+0xb50>
 80173de:	4639      	mov	r1, r7
 80173e0:	4630      	mov	r0, r6
 80173e2:	f7e9 fc09 	bl	8000bf8 <__aeabi_d2uiz>
 80173e6:	2801      	cmp	r0, #1
 80173e8:	bf38      	it	cc
 80173ea:	2001      	movcc	r0, #1
 80173ec:	f7e9 f8b2 	bl	8000554 <__aeabi_ui2d>
 80173f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173f2:	4606      	mov	r6, r0
 80173f4:	460f      	mov	r7, r1
 80173f6:	b9fb      	cbnz	r3, 8017438 <_strtod_l+0xb80>
 80173f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80173fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80173fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8017400:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8017404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801740a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801740e:	1b5b      	subs	r3, r3, r5
 8017410:	9311      	str	r3, [sp, #68]	@ 0x44
 8017412:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017416:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801741a:	f7ff f8f1 	bl	8016600 <__ulp>
 801741e:	4650      	mov	r0, sl
 8017420:	ec53 2b10 	vmov	r2, r3, d0
 8017424:	4659      	mov	r1, fp
 8017426:	f7e9 f90f 	bl	8000648 <__aeabi_dmul>
 801742a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801742e:	f7e8 ff55 	bl	80002dc <__adddf3>
 8017432:	4682      	mov	sl, r0
 8017434:	468b      	mov	fp, r1
 8017436:	e770      	b.n	801731a <_strtod_l+0xa62>
 8017438:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801743c:	e7e0      	b.n	8017400 <_strtod_l+0xb48>
 801743e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017478 <_strtod_l+0xbc0>)
 8017440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017444:	f7e9 fb72 	bl	8000b2c <__aeabi_dcmplt>
 8017448:	e798      	b.n	801737c <_strtod_l+0xac4>
 801744a:	2300      	movs	r3, #0
 801744c:	930e      	str	r3, [sp, #56]	@ 0x38
 801744e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017452:	6013      	str	r3, [r2, #0]
 8017454:	f7ff ba6d 	b.w	8016932 <_strtod_l+0x7a>
 8017458:	2a65      	cmp	r2, #101	@ 0x65
 801745a:	f43f ab68 	beq.w	8016b2e <_strtod_l+0x276>
 801745e:	2a45      	cmp	r2, #69	@ 0x45
 8017460:	f43f ab65 	beq.w	8016b2e <_strtod_l+0x276>
 8017464:	2301      	movs	r3, #1
 8017466:	f7ff bba0 	b.w	8016baa <_strtod_l+0x2f2>
 801746a:	bf00      	nop
 801746c:	f3af 8000 	nop.w
 8017470:	ffc00000 	.word	0xffc00000
 8017474:	41dfffff 	.word	0x41dfffff
 8017478:	94a03595 	.word	0x94a03595
 801747c:	3fcfffff 	.word	0x3fcfffff

08017480 <_strtod_r>:
 8017480:	4b01      	ldr	r3, [pc, #4]	@ (8017488 <_strtod_r+0x8>)
 8017482:	f7ff ba19 	b.w	80168b8 <_strtod_l>
 8017486:	bf00      	nop
 8017488:	200000a4 	.word	0x200000a4

0801748c <_strtol_l.isra.0>:
 801748c:	2b24      	cmp	r3, #36	@ 0x24
 801748e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017492:	4686      	mov	lr, r0
 8017494:	4690      	mov	r8, r2
 8017496:	d801      	bhi.n	801749c <_strtol_l.isra.0+0x10>
 8017498:	2b01      	cmp	r3, #1
 801749a:	d106      	bne.n	80174aa <_strtol_l.isra.0+0x1e>
 801749c:	f7fd fdaa 	bl	8014ff4 <__errno>
 80174a0:	2316      	movs	r3, #22
 80174a2:	6003      	str	r3, [r0, #0]
 80174a4:	2000      	movs	r0, #0
 80174a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174aa:	4834      	ldr	r0, [pc, #208]	@ (801757c <_strtol_l.isra.0+0xf0>)
 80174ac:	460d      	mov	r5, r1
 80174ae:	462a      	mov	r2, r5
 80174b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80174b4:	5d06      	ldrb	r6, [r0, r4]
 80174b6:	f016 0608 	ands.w	r6, r6, #8
 80174ba:	d1f8      	bne.n	80174ae <_strtol_l.isra.0+0x22>
 80174bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80174be:	d110      	bne.n	80174e2 <_strtol_l.isra.0+0x56>
 80174c0:	782c      	ldrb	r4, [r5, #0]
 80174c2:	2601      	movs	r6, #1
 80174c4:	1c95      	adds	r5, r2, #2
 80174c6:	f033 0210 	bics.w	r2, r3, #16
 80174ca:	d115      	bne.n	80174f8 <_strtol_l.isra.0+0x6c>
 80174cc:	2c30      	cmp	r4, #48	@ 0x30
 80174ce:	d10d      	bne.n	80174ec <_strtol_l.isra.0+0x60>
 80174d0:	782a      	ldrb	r2, [r5, #0]
 80174d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80174d6:	2a58      	cmp	r2, #88	@ 0x58
 80174d8:	d108      	bne.n	80174ec <_strtol_l.isra.0+0x60>
 80174da:	786c      	ldrb	r4, [r5, #1]
 80174dc:	3502      	adds	r5, #2
 80174de:	2310      	movs	r3, #16
 80174e0:	e00a      	b.n	80174f8 <_strtol_l.isra.0+0x6c>
 80174e2:	2c2b      	cmp	r4, #43	@ 0x2b
 80174e4:	bf04      	itt	eq
 80174e6:	782c      	ldrbeq	r4, [r5, #0]
 80174e8:	1c95      	addeq	r5, r2, #2
 80174ea:	e7ec      	b.n	80174c6 <_strtol_l.isra.0+0x3a>
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d1f6      	bne.n	80174de <_strtol_l.isra.0+0x52>
 80174f0:	2c30      	cmp	r4, #48	@ 0x30
 80174f2:	bf14      	ite	ne
 80174f4:	230a      	movne	r3, #10
 80174f6:	2308      	moveq	r3, #8
 80174f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80174fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017500:	2200      	movs	r2, #0
 8017502:	fbbc f9f3 	udiv	r9, ip, r3
 8017506:	4610      	mov	r0, r2
 8017508:	fb03 ca19 	mls	sl, r3, r9, ip
 801750c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017510:	2f09      	cmp	r7, #9
 8017512:	d80f      	bhi.n	8017534 <_strtol_l.isra.0+0xa8>
 8017514:	463c      	mov	r4, r7
 8017516:	42a3      	cmp	r3, r4
 8017518:	dd1b      	ble.n	8017552 <_strtol_l.isra.0+0xc6>
 801751a:	1c57      	adds	r7, r2, #1
 801751c:	d007      	beq.n	801752e <_strtol_l.isra.0+0xa2>
 801751e:	4581      	cmp	r9, r0
 8017520:	d314      	bcc.n	801754c <_strtol_l.isra.0+0xc0>
 8017522:	d101      	bne.n	8017528 <_strtol_l.isra.0+0x9c>
 8017524:	45a2      	cmp	sl, r4
 8017526:	db11      	blt.n	801754c <_strtol_l.isra.0+0xc0>
 8017528:	fb00 4003 	mla	r0, r0, r3, r4
 801752c:	2201      	movs	r2, #1
 801752e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017532:	e7eb      	b.n	801750c <_strtol_l.isra.0+0x80>
 8017534:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017538:	2f19      	cmp	r7, #25
 801753a:	d801      	bhi.n	8017540 <_strtol_l.isra.0+0xb4>
 801753c:	3c37      	subs	r4, #55	@ 0x37
 801753e:	e7ea      	b.n	8017516 <_strtol_l.isra.0+0x8a>
 8017540:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017544:	2f19      	cmp	r7, #25
 8017546:	d804      	bhi.n	8017552 <_strtol_l.isra.0+0xc6>
 8017548:	3c57      	subs	r4, #87	@ 0x57
 801754a:	e7e4      	b.n	8017516 <_strtol_l.isra.0+0x8a>
 801754c:	f04f 32ff 	mov.w	r2, #4294967295
 8017550:	e7ed      	b.n	801752e <_strtol_l.isra.0+0xa2>
 8017552:	1c53      	adds	r3, r2, #1
 8017554:	d108      	bne.n	8017568 <_strtol_l.isra.0+0xdc>
 8017556:	2322      	movs	r3, #34	@ 0x22
 8017558:	f8ce 3000 	str.w	r3, [lr]
 801755c:	4660      	mov	r0, ip
 801755e:	f1b8 0f00 	cmp.w	r8, #0
 8017562:	d0a0      	beq.n	80174a6 <_strtol_l.isra.0+0x1a>
 8017564:	1e69      	subs	r1, r5, #1
 8017566:	e006      	b.n	8017576 <_strtol_l.isra.0+0xea>
 8017568:	b106      	cbz	r6, 801756c <_strtol_l.isra.0+0xe0>
 801756a:	4240      	negs	r0, r0
 801756c:	f1b8 0f00 	cmp.w	r8, #0
 8017570:	d099      	beq.n	80174a6 <_strtol_l.isra.0+0x1a>
 8017572:	2a00      	cmp	r2, #0
 8017574:	d1f6      	bne.n	8017564 <_strtol_l.isra.0+0xd8>
 8017576:	f8c8 1000 	str.w	r1, [r8]
 801757a:	e794      	b.n	80174a6 <_strtol_l.isra.0+0x1a>
 801757c:	0801be91 	.word	0x0801be91

08017580 <_strtol_r>:
 8017580:	f7ff bf84 	b.w	801748c <_strtol_l.isra.0>

08017584 <__ssputs_r>:
 8017584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017588:	688e      	ldr	r6, [r1, #8]
 801758a:	461f      	mov	r7, r3
 801758c:	42be      	cmp	r6, r7
 801758e:	680b      	ldr	r3, [r1, #0]
 8017590:	4682      	mov	sl, r0
 8017592:	460c      	mov	r4, r1
 8017594:	4690      	mov	r8, r2
 8017596:	d82d      	bhi.n	80175f4 <__ssputs_r+0x70>
 8017598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801759c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80175a0:	d026      	beq.n	80175f0 <__ssputs_r+0x6c>
 80175a2:	6965      	ldr	r5, [r4, #20]
 80175a4:	6909      	ldr	r1, [r1, #16]
 80175a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175aa:	eba3 0901 	sub.w	r9, r3, r1
 80175ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80175b2:	1c7b      	adds	r3, r7, #1
 80175b4:	444b      	add	r3, r9
 80175b6:	106d      	asrs	r5, r5, #1
 80175b8:	429d      	cmp	r5, r3
 80175ba:	bf38      	it	cc
 80175bc:	461d      	movcc	r5, r3
 80175be:	0553      	lsls	r3, r2, #21
 80175c0:	d527      	bpl.n	8017612 <__ssputs_r+0x8e>
 80175c2:	4629      	mov	r1, r5
 80175c4:	f7fe fc24 	bl	8015e10 <_malloc_r>
 80175c8:	4606      	mov	r6, r0
 80175ca:	b360      	cbz	r0, 8017626 <__ssputs_r+0xa2>
 80175cc:	6921      	ldr	r1, [r4, #16]
 80175ce:	464a      	mov	r2, r9
 80175d0:	f7fd fd3d 	bl	801504e <memcpy>
 80175d4:	89a3      	ldrh	r3, [r4, #12]
 80175d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80175da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80175de:	81a3      	strh	r3, [r4, #12]
 80175e0:	6126      	str	r6, [r4, #16]
 80175e2:	6165      	str	r5, [r4, #20]
 80175e4:	444e      	add	r6, r9
 80175e6:	eba5 0509 	sub.w	r5, r5, r9
 80175ea:	6026      	str	r6, [r4, #0]
 80175ec:	60a5      	str	r5, [r4, #8]
 80175ee:	463e      	mov	r6, r7
 80175f0:	42be      	cmp	r6, r7
 80175f2:	d900      	bls.n	80175f6 <__ssputs_r+0x72>
 80175f4:	463e      	mov	r6, r7
 80175f6:	6820      	ldr	r0, [r4, #0]
 80175f8:	4632      	mov	r2, r6
 80175fa:	4641      	mov	r1, r8
 80175fc:	f000 fa28 	bl	8017a50 <memmove>
 8017600:	68a3      	ldr	r3, [r4, #8]
 8017602:	1b9b      	subs	r3, r3, r6
 8017604:	60a3      	str	r3, [r4, #8]
 8017606:	6823      	ldr	r3, [r4, #0]
 8017608:	4433      	add	r3, r6
 801760a:	6023      	str	r3, [r4, #0]
 801760c:	2000      	movs	r0, #0
 801760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017612:	462a      	mov	r2, r5
 8017614:	f000 fe01 	bl	801821a <_realloc_r>
 8017618:	4606      	mov	r6, r0
 801761a:	2800      	cmp	r0, #0
 801761c:	d1e0      	bne.n	80175e0 <__ssputs_r+0x5c>
 801761e:	6921      	ldr	r1, [r4, #16]
 8017620:	4650      	mov	r0, sl
 8017622:	f7fe fb81 	bl	8015d28 <_free_r>
 8017626:	230c      	movs	r3, #12
 8017628:	f8ca 3000 	str.w	r3, [sl]
 801762c:	89a3      	ldrh	r3, [r4, #12]
 801762e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017632:	81a3      	strh	r3, [r4, #12]
 8017634:	f04f 30ff 	mov.w	r0, #4294967295
 8017638:	e7e9      	b.n	801760e <__ssputs_r+0x8a>
	...

0801763c <_svfiprintf_r>:
 801763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017640:	4698      	mov	r8, r3
 8017642:	898b      	ldrh	r3, [r1, #12]
 8017644:	061b      	lsls	r3, r3, #24
 8017646:	b09d      	sub	sp, #116	@ 0x74
 8017648:	4607      	mov	r7, r0
 801764a:	460d      	mov	r5, r1
 801764c:	4614      	mov	r4, r2
 801764e:	d510      	bpl.n	8017672 <_svfiprintf_r+0x36>
 8017650:	690b      	ldr	r3, [r1, #16]
 8017652:	b973      	cbnz	r3, 8017672 <_svfiprintf_r+0x36>
 8017654:	2140      	movs	r1, #64	@ 0x40
 8017656:	f7fe fbdb 	bl	8015e10 <_malloc_r>
 801765a:	6028      	str	r0, [r5, #0]
 801765c:	6128      	str	r0, [r5, #16]
 801765e:	b930      	cbnz	r0, 801766e <_svfiprintf_r+0x32>
 8017660:	230c      	movs	r3, #12
 8017662:	603b      	str	r3, [r7, #0]
 8017664:	f04f 30ff 	mov.w	r0, #4294967295
 8017668:	b01d      	add	sp, #116	@ 0x74
 801766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801766e:	2340      	movs	r3, #64	@ 0x40
 8017670:	616b      	str	r3, [r5, #20]
 8017672:	2300      	movs	r3, #0
 8017674:	9309      	str	r3, [sp, #36]	@ 0x24
 8017676:	2320      	movs	r3, #32
 8017678:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801767c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017680:	2330      	movs	r3, #48	@ 0x30
 8017682:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017820 <_svfiprintf_r+0x1e4>
 8017686:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801768a:	f04f 0901 	mov.w	r9, #1
 801768e:	4623      	mov	r3, r4
 8017690:	469a      	mov	sl, r3
 8017692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017696:	b10a      	cbz	r2, 801769c <_svfiprintf_r+0x60>
 8017698:	2a25      	cmp	r2, #37	@ 0x25
 801769a:	d1f9      	bne.n	8017690 <_svfiprintf_r+0x54>
 801769c:	ebba 0b04 	subs.w	fp, sl, r4
 80176a0:	d00b      	beq.n	80176ba <_svfiprintf_r+0x7e>
 80176a2:	465b      	mov	r3, fp
 80176a4:	4622      	mov	r2, r4
 80176a6:	4629      	mov	r1, r5
 80176a8:	4638      	mov	r0, r7
 80176aa:	f7ff ff6b 	bl	8017584 <__ssputs_r>
 80176ae:	3001      	adds	r0, #1
 80176b0:	f000 80a7 	beq.w	8017802 <_svfiprintf_r+0x1c6>
 80176b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176b6:	445a      	add	r2, fp
 80176b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80176ba:	f89a 3000 	ldrb.w	r3, [sl]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	f000 809f 	beq.w	8017802 <_svfiprintf_r+0x1c6>
 80176c4:	2300      	movs	r3, #0
 80176c6:	f04f 32ff 	mov.w	r2, #4294967295
 80176ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176ce:	f10a 0a01 	add.w	sl, sl, #1
 80176d2:	9304      	str	r3, [sp, #16]
 80176d4:	9307      	str	r3, [sp, #28]
 80176d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80176da:	931a      	str	r3, [sp, #104]	@ 0x68
 80176dc:	4654      	mov	r4, sl
 80176de:	2205      	movs	r2, #5
 80176e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176e4:	484e      	ldr	r0, [pc, #312]	@ (8017820 <_svfiprintf_r+0x1e4>)
 80176e6:	f7e8 fd9b 	bl	8000220 <memchr>
 80176ea:	9a04      	ldr	r2, [sp, #16]
 80176ec:	b9d8      	cbnz	r0, 8017726 <_svfiprintf_r+0xea>
 80176ee:	06d0      	lsls	r0, r2, #27
 80176f0:	bf44      	itt	mi
 80176f2:	2320      	movmi	r3, #32
 80176f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80176f8:	0711      	lsls	r1, r2, #28
 80176fa:	bf44      	itt	mi
 80176fc:	232b      	movmi	r3, #43	@ 0x2b
 80176fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017702:	f89a 3000 	ldrb.w	r3, [sl]
 8017706:	2b2a      	cmp	r3, #42	@ 0x2a
 8017708:	d015      	beq.n	8017736 <_svfiprintf_r+0xfa>
 801770a:	9a07      	ldr	r2, [sp, #28]
 801770c:	4654      	mov	r4, sl
 801770e:	2000      	movs	r0, #0
 8017710:	f04f 0c0a 	mov.w	ip, #10
 8017714:	4621      	mov	r1, r4
 8017716:	f811 3b01 	ldrb.w	r3, [r1], #1
 801771a:	3b30      	subs	r3, #48	@ 0x30
 801771c:	2b09      	cmp	r3, #9
 801771e:	d94b      	bls.n	80177b8 <_svfiprintf_r+0x17c>
 8017720:	b1b0      	cbz	r0, 8017750 <_svfiprintf_r+0x114>
 8017722:	9207      	str	r2, [sp, #28]
 8017724:	e014      	b.n	8017750 <_svfiprintf_r+0x114>
 8017726:	eba0 0308 	sub.w	r3, r0, r8
 801772a:	fa09 f303 	lsl.w	r3, r9, r3
 801772e:	4313      	orrs	r3, r2
 8017730:	9304      	str	r3, [sp, #16]
 8017732:	46a2      	mov	sl, r4
 8017734:	e7d2      	b.n	80176dc <_svfiprintf_r+0xa0>
 8017736:	9b03      	ldr	r3, [sp, #12]
 8017738:	1d19      	adds	r1, r3, #4
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	9103      	str	r1, [sp, #12]
 801773e:	2b00      	cmp	r3, #0
 8017740:	bfbb      	ittet	lt
 8017742:	425b      	neglt	r3, r3
 8017744:	f042 0202 	orrlt.w	r2, r2, #2
 8017748:	9307      	strge	r3, [sp, #28]
 801774a:	9307      	strlt	r3, [sp, #28]
 801774c:	bfb8      	it	lt
 801774e:	9204      	strlt	r2, [sp, #16]
 8017750:	7823      	ldrb	r3, [r4, #0]
 8017752:	2b2e      	cmp	r3, #46	@ 0x2e
 8017754:	d10a      	bne.n	801776c <_svfiprintf_r+0x130>
 8017756:	7863      	ldrb	r3, [r4, #1]
 8017758:	2b2a      	cmp	r3, #42	@ 0x2a
 801775a:	d132      	bne.n	80177c2 <_svfiprintf_r+0x186>
 801775c:	9b03      	ldr	r3, [sp, #12]
 801775e:	1d1a      	adds	r2, r3, #4
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	9203      	str	r2, [sp, #12]
 8017764:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017768:	3402      	adds	r4, #2
 801776a:	9305      	str	r3, [sp, #20]
 801776c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017830 <_svfiprintf_r+0x1f4>
 8017770:	7821      	ldrb	r1, [r4, #0]
 8017772:	2203      	movs	r2, #3
 8017774:	4650      	mov	r0, sl
 8017776:	f7e8 fd53 	bl	8000220 <memchr>
 801777a:	b138      	cbz	r0, 801778c <_svfiprintf_r+0x150>
 801777c:	9b04      	ldr	r3, [sp, #16]
 801777e:	eba0 000a 	sub.w	r0, r0, sl
 8017782:	2240      	movs	r2, #64	@ 0x40
 8017784:	4082      	lsls	r2, r0
 8017786:	4313      	orrs	r3, r2
 8017788:	3401      	adds	r4, #1
 801778a:	9304      	str	r3, [sp, #16]
 801778c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017790:	4824      	ldr	r0, [pc, #144]	@ (8017824 <_svfiprintf_r+0x1e8>)
 8017792:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017796:	2206      	movs	r2, #6
 8017798:	f7e8 fd42 	bl	8000220 <memchr>
 801779c:	2800      	cmp	r0, #0
 801779e:	d036      	beq.n	801780e <_svfiprintf_r+0x1d2>
 80177a0:	4b21      	ldr	r3, [pc, #132]	@ (8017828 <_svfiprintf_r+0x1ec>)
 80177a2:	bb1b      	cbnz	r3, 80177ec <_svfiprintf_r+0x1b0>
 80177a4:	9b03      	ldr	r3, [sp, #12]
 80177a6:	3307      	adds	r3, #7
 80177a8:	f023 0307 	bic.w	r3, r3, #7
 80177ac:	3308      	adds	r3, #8
 80177ae:	9303      	str	r3, [sp, #12]
 80177b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177b2:	4433      	add	r3, r6
 80177b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80177b6:	e76a      	b.n	801768e <_svfiprintf_r+0x52>
 80177b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80177bc:	460c      	mov	r4, r1
 80177be:	2001      	movs	r0, #1
 80177c0:	e7a8      	b.n	8017714 <_svfiprintf_r+0xd8>
 80177c2:	2300      	movs	r3, #0
 80177c4:	3401      	adds	r4, #1
 80177c6:	9305      	str	r3, [sp, #20]
 80177c8:	4619      	mov	r1, r3
 80177ca:	f04f 0c0a 	mov.w	ip, #10
 80177ce:	4620      	mov	r0, r4
 80177d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177d4:	3a30      	subs	r2, #48	@ 0x30
 80177d6:	2a09      	cmp	r2, #9
 80177d8:	d903      	bls.n	80177e2 <_svfiprintf_r+0x1a6>
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d0c6      	beq.n	801776c <_svfiprintf_r+0x130>
 80177de:	9105      	str	r1, [sp, #20]
 80177e0:	e7c4      	b.n	801776c <_svfiprintf_r+0x130>
 80177e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80177e6:	4604      	mov	r4, r0
 80177e8:	2301      	movs	r3, #1
 80177ea:	e7f0      	b.n	80177ce <_svfiprintf_r+0x192>
 80177ec:	ab03      	add	r3, sp, #12
 80177ee:	9300      	str	r3, [sp, #0]
 80177f0:	462a      	mov	r2, r5
 80177f2:	4b0e      	ldr	r3, [pc, #56]	@ (801782c <_svfiprintf_r+0x1f0>)
 80177f4:	a904      	add	r1, sp, #16
 80177f6:	4638      	mov	r0, r7
 80177f8:	f7fc fb96 	bl	8013f28 <_printf_float>
 80177fc:	1c42      	adds	r2, r0, #1
 80177fe:	4606      	mov	r6, r0
 8017800:	d1d6      	bne.n	80177b0 <_svfiprintf_r+0x174>
 8017802:	89ab      	ldrh	r3, [r5, #12]
 8017804:	065b      	lsls	r3, r3, #25
 8017806:	f53f af2d 	bmi.w	8017664 <_svfiprintf_r+0x28>
 801780a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801780c:	e72c      	b.n	8017668 <_svfiprintf_r+0x2c>
 801780e:	ab03      	add	r3, sp, #12
 8017810:	9300      	str	r3, [sp, #0]
 8017812:	462a      	mov	r2, r5
 8017814:	4b05      	ldr	r3, [pc, #20]	@ (801782c <_svfiprintf_r+0x1f0>)
 8017816:	a904      	add	r1, sp, #16
 8017818:	4638      	mov	r0, r7
 801781a:	f7fc fe1d 	bl	8014458 <_printf_i>
 801781e:	e7ed      	b.n	80177fc <_svfiprintf_r+0x1c0>
 8017820:	0801bc89 	.word	0x0801bc89
 8017824:	0801bc93 	.word	0x0801bc93
 8017828:	08013f29 	.word	0x08013f29
 801782c:	08017585 	.word	0x08017585
 8017830:	0801bc8f 	.word	0x0801bc8f

08017834 <__sflush_r>:
 8017834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801783c:	0716      	lsls	r6, r2, #28
 801783e:	4605      	mov	r5, r0
 8017840:	460c      	mov	r4, r1
 8017842:	d454      	bmi.n	80178ee <__sflush_r+0xba>
 8017844:	684b      	ldr	r3, [r1, #4]
 8017846:	2b00      	cmp	r3, #0
 8017848:	dc02      	bgt.n	8017850 <__sflush_r+0x1c>
 801784a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801784c:	2b00      	cmp	r3, #0
 801784e:	dd48      	ble.n	80178e2 <__sflush_r+0xae>
 8017850:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017852:	2e00      	cmp	r6, #0
 8017854:	d045      	beq.n	80178e2 <__sflush_r+0xae>
 8017856:	2300      	movs	r3, #0
 8017858:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801785c:	682f      	ldr	r7, [r5, #0]
 801785e:	6a21      	ldr	r1, [r4, #32]
 8017860:	602b      	str	r3, [r5, #0]
 8017862:	d030      	beq.n	80178c6 <__sflush_r+0x92>
 8017864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017866:	89a3      	ldrh	r3, [r4, #12]
 8017868:	0759      	lsls	r1, r3, #29
 801786a:	d505      	bpl.n	8017878 <__sflush_r+0x44>
 801786c:	6863      	ldr	r3, [r4, #4]
 801786e:	1ad2      	subs	r2, r2, r3
 8017870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017872:	b10b      	cbz	r3, 8017878 <__sflush_r+0x44>
 8017874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017876:	1ad2      	subs	r2, r2, r3
 8017878:	2300      	movs	r3, #0
 801787a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801787c:	6a21      	ldr	r1, [r4, #32]
 801787e:	4628      	mov	r0, r5
 8017880:	47b0      	blx	r6
 8017882:	1c43      	adds	r3, r0, #1
 8017884:	89a3      	ldrh	r3, [r4, #12]
 8017886:	d106      	bne.n	8017896 <__sflush_r+0x62>
 8017888:	6829      	ldr	r1, [r5, #0]
 801788a:	291d      	cmp	r1, #29
 801788c:	d82b      	bhi.n	80178e6 <__sflush_r+0xb2>
 801788e:	4a2a      	ldr	r2, [pc, #168]	@ (8017938 <__sflush_r+0x104>)
 8017890:	40ca      	lsrs	r2, r1
 8017892:	07d6      	lsls	r6, r2, #31
 8017894:	d527      	bpl.n	80178e6 <__sflush_r+0xb2>
 8017896:	2200      	movs	r2, #0
 8017898:	6062      	str	r2, [r4, #4]
 801789a:	04d9      	lsls	r1, r3, #19
 801789c:	6922      	ldr	r2, [r4, #16]
 801789e:	6022      	str	r2, [r4, #0]
 80178a0:	d504      	bpl.n	80178ac <__sflush_r+0x78>
 80178a2:	1c42      	adds	r2, r0, #1
 80178a4:	d101      	bne.n	80178aa <__sflush_r+0x76>
 80178a6:	682b      	ldr	r3, [r5, #0]
 80178a8:	b903      	cbnz	r3, 80178ac <__sflush_r+0x78>
 80178aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80178ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80178ae:	602f      	str	r7, [r5, #0]
 80178b0:	b1b9      	cbz	r1, 80178e2 <__sflush_r+0xae>
 80178b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80178b6:	4299      	cmp	r1, r3
 80178b8:	d002      	beq.n	80178c0 <__sflush_r+0x8c>
 80178ba:	4628      	mov	r0, r5
 80178bc:	f7fe fa34 	bl	8015d28 <_free_r>
 80178c0:	2300      	movs	r3, #0
 80178c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80178c4:	e00d      	b.n	80178e2 <__sflush_r+0xae>
 80178c6:	2301      	movs	r3, #1
 80178c8:	4628      	mov	r0, r5
 80178ca:	47b0      	blx	r6
 80178cc:	4602      	mov	r2, r0
 80178ce:	1c50      	adds	r0, r2, #1
 80178d0:	d1c9      	bne.n	8017866 <__sflush_r+0x32>
 80178d2:	682b      	ldr	r3, [r5, #0]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d0c6      	beq.n	8017866 <__sflush_r+0x32>
 80178d8:	2b1d      	cmp	r3, #29
 80178da:	d001      	beq.n	80178e0 <__sflush_r+0xac>
 80178dc:	2b16      	cmp	r3, #22
 80178de:	d11e      	bne.n	801791e <__sflush_r+0xea>
 80178e0:	602f      	str	r7, [r5, #0]
 80178e2:	2000      	movs	r0, #0
 80178e4:	e022      	b.n	801792c <__sflush_r+0xf8>
 80178e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178ea:	b21b      	sxth	r3, r3
 80178ec:	e01b      	b.n	8017926 <__sflush_r+0xf2>
 80178ee:	690f      	ldr	r7, [r1, #16]
 80178f0:	2f00      	cmp	r7, #0
 80178f2:	d0f6      	beq.n	80178e2 <__sflush_r+0xae>
 80178f4:	0793      	lsls	r3, r2, #30
 80178f6:	680e      	ldr	r6, [r1, #0]
 80178f8:	bf08      	it	eq
 80178fa:	694b      	ldreq	r3, [r1, #20]
 80178fc:	600f      	str	r7, [r1, #0]
 80178fe:	bf18      	it	ne
 8017900:	2300      	movne	r3, #0
 8017902:	eba6 0807 	sub.w	r8, r6, r7
 8017906:	608b      	str	r3, [r1, #8]
 8017908:	f1b8 0f00 	cmp.w	r8, #0
 801790c:	dde9      	ble.n	80178e2 <__sflush_r+0xae>
 801790e:	6a21      	ldr	r1, [r4, #32]
 8017910:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017912:	4643      	mov	r3, r8
 8017914:	463a      	mov	r2, r7
 8017916:	4628      	mov	r0, r5
 8017918:	47b0      	blx	r6
 801791a:	2800      	cmp	r0, #0
 801791c:	dc08      	bgt.n	8017930 <__sflush_r+0xfc>
 801791e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017926:	81a3      	strh	r3, [r4, #12]
 8017928:	f04f 30ff 	mov.w	r0, #4294967295
 801792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017930:	4407      	add	r7, r0
 8017932:	eba8 0800 	sub.w	r8, r8, r0
 8017936:	e7e7      	b.n	8017908 <__sflush_r+0xd4>
 8017938:	20400001 	.word	0x20400001

0801793c <_fflush_r>:
 801793c:	b538      	push	{r3, r4, r5, lr}
 801793e:	690b      	ldr	r3, [r1, #16]
 8017940:	4605      	mov	r5, r0
 8017942:	460c      	mov	r4, r1
 8017944:	b913      	cbnz	r3, 801794c <_fflush_r+0x10>
 8017946:	2500      	movs	r5, #0
 8017948:	4628      	mov	r0, r5
 801794a:	bd38      	pop	{r3, r4, r5, pc}
 801794c:	b118      	cbz	r0, 8017956 <_fflush_r+0x1a>
 801794e:	6a03      	ldr	r3, [r0, #32]
 8017950:	b90b      	cbnz	r3, 8017956 <_fflush_r+0x1a>
 8017952:	f7fd f939 	bl	8014bc8 <__sinit>
 8017956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d0f3      	beq.n	8017946 <_fflush_r+0xa>
 801795e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017960:	07d0      	lsls	r0, r2, #31
 8017962:	d404      	bmi.n	801796e <_fflush_r+0x32>
 8017964:	0599      	lsls	r1, r3, #22
 8017966:	d402      	bmi.n	801796e <_fflush_r+0x32>
 8017968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801796a:	f7fd fb6e 	bl	801504a <__retarget_lock_acquire_recursive>
 801796e:	4628      	mov	r0, r5
 8017970:	4621      	mov	r1, r4
 8017972:	f7ff ff5f 	bl	8017834 <__sflush_r>
 8017976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017978:	07da      	lsls	r2, r3, #31
 801797a:	4605      	mov	r5, r0
 801797c:	d4e4      	bmi.n	8017948 <_fflush_r+0xc>
 801797e:	89a3      	ldrh	r3, [r4, #12]
 8017980:	059b      	lsls	r3, r3, #22
 8017982:	d4e1      	bmi.n	8017948 <_fflush_r+0xc>
 8017984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017986:	f7fd fb61 	bl	801504c <__retarget_lock_release_recursive>
 801798a:	e7dd      	b.n	8017948 <_fflush_r+0xc>

0801798c <__swhatbuf_r>:
 801798c:	b570      	push	{r4, r5, r6, lr}
 801798e:	460c      	mov	r4, r1
 8017990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017994:	2900      	cmp	r1, #0
 8017996:	b096      	sub	sp, #88	@ 0x58
 8017998:	4615      	mov	r5, r2
 801799a:	461e      	mov	r6, r3
 801799c:	da0d      	bge.n	80179ba <__swhatbuf_r+0x2e>
 801799e:	89a3      	ldrh	r3, [r4, #12]
 80179a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80179a4:	f04f 0100 	mov.w	r1, #0
 80179a8:	bf14      	ite	ne
 80179aa:	2340      	movne	r3, #64	@ 0x40
 80179ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80179b0:	2000      	movs	r0, #0
 80179b2:	6031      	str	r1, [r6, #0]
 80179b4:	602b      	str	r3, [r5, #0]
 80179b6:	b016      	add	sp, #88	@ 0x58
 80179b8:	bd70      	pop	{r4, r5, r6, pc}
 80179ba:	466a      	mov	r2, sp
 80179bc:	f000 f874 	bl	8017aa8 <_fstat_r>
 80179c0:	2800      	cmp	r0, #0
 80179c2:	dbec      	blt.n	801799e <__swhatbuf_r+0x12>
 80179c4:	9901      	ldr	r1, [sp, #4]
 80179c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80179ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80179ce:	4259      	negs	r1, r3
 80179d0:	4159      	adcs	r1, r3
 80179d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80179d6:	e7eb      	b.n	80179b0 <__swhatbuf_r+0x24>

080179d8 <__smakebuf_r>:
 80179d8:	898b      	ldrh	r3, [r1, #12]
 80179da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179dc:	079d      	lsls	r5, r3, #30
 80179de:	4606      	mov	r6, r0
 80179e0:	460c      	mov	r4, r1
 80179e2:	d507      	bpl.n	80179f4 <__smakebuf_r+0x1c>
 80179e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80179e8:	6023      	str	r3, [r4, #0]
 80179ea:	6123      	str	r3, [r4, #16]
 80179ec:	2301      	movs	r3, #1
 80179ee:	6163      	str	r3, [r4, #20]
 80179f0:	b003      	add	sp, #12
 80179f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179f4:	ab01      	add	r3, sp, #4
 80179f6:	466a      	mov	r2, sp
 80179f8:	f7ff ffc8 	bl	801798c <__swhatbuf_r>
 80179fc:	9f00      	ldr	r7, [sp, #0]
 80179fe:	4605      	mov	r5, r0
 8017a00:	4639      	mov	r1, r7
 8017a02:	4630      	mov	r0, r6
 8017a04:	f7fe fa04 	bl	8015e10 <_malloc_r>
 8017a08:	b948      	cbnz	r0, 8017a1e <__smakebuf_r+0x46>
 8017a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a0e:	059a      	lsls	r2, r3, #22
 8017a10:	d4ee      	bmi.n	80179f0 <__smakebuf_r+0x18>
 8017a12:	f023 0303 	bic.w	r3, r3, #3
 8017a16:	f043 0302 	orr.w	r3, r3, #2
 8017a1a:	81a3      	strh	r3, [r4, #12]
 8017a1c:	e7e2      	b.n	80179e4 <__smakebuf_r+0xc>
 8017a1e:	89a3      	ldrh	r3, [r4, #12]
 8017a20:	6020      	str	r0, [r4, #0]
 8017a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a26:	81a3      	strh	r3, [r4, #12]
 8017a28:	9b01      	ldr	r3, [sp, #4]
 8017a2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017a2e:	b15b      	cbz	r3, 8017a48 <__smakebuf_r+0x70>
 8017a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a34:	4630      	mov	r0, r6
 8017a36:	f000 f849 	bl	8017acc <_isatty_r>
 8017a3a:	b128      	cbz	r0, 8017a48 <__smakebuf_r+0x70>
 8017a3c:	89a3      	ldrh	r3, [r4, #12]
 8017a3e:	f023 0303 	bic.w	r3, r3, #3
 8017a42:	f043 0301 	orr.w	r3, r3, #1
 8017a46:	81a3      	strh	r3, [r4, #12]
 8017a48:	89a3      	ldrh	r3, [r4, #12]
 8017a4a:	431d      	orrs	r5, r3
 8017a4c:	81a5      	strh	r5, [r4, #12]
 8017a4e:	e7cf      	b.n	80179f0 <__smakebuf_r+0x18>

08017a50 <memmove>:
 8017a50:	4288      	cmp	r0, r1
 8017a52:	b510      	push	{r4, lr}
 8017a54:	eb01 0402 	add.w	r4, r1, r2
 8017a58:	d902      	bls.n	8017a60 <memmove+0x10>
 8017a5a:	4284      	cmp	r4, r0
 8017a5c:	4623      	mov	r3, r4
 8017a5e:	d807      	bhi.n	8017a70 <memmove+0x20>
 8017a60:	1e43      	subs	r3, r0, #1
 8017a62:	42a1      	cmp	r1, r4
 8017a64:	d008      	beq.n	8017a78 <memmove+0x28>
 8017a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a6e:	e7f8      	b.n	8017a62 <memmove+0x12>
 8017a70:	4402      	add	r2, r0
 8017a72:	4601      	mov	r1, r0
 8017a74:	428a      	cmp	r2, r1
 8017a76:	d100      	bne.n	8017a7a <memmove+0x2a>
 8017a78:	bd10      	pop	{r4, pc}
 8017a7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a82:	e7f7      	b.n	8017a74 <memmove+0x24>

08017a84 <strncmp>:
 8017a84:	b510      	push	{r4, lr}
 8017a86:	b16a      	cbz	r2, 8017aa4 <strncmp+0x20>
 8017a88:	3901      	subs	r1, #1
 8017a8a:	1884      	adds	r4, r0, r2
 8017a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d103      	bne.n	8017aa0 <strncmp+0x1c>
 8017a98:	42a0      	cmp	r0, r4
 8017a9a:	d001      	beq.n	8017aa0 <strncmp+0x1c>
 8017a9c:	2a00      	cmp	r2, #0
 8017a9e:	d1f5      	bne.n	8017a8c <strncmp+0x8>
 8017aa0:	1ad0      	subs	r0, r2, r3
 8017aa2:	bd10      	pop	{r4, pc}
 8017aa4:	4610      	mov	r0, r2
 8017aa6:	e7fc      	b.n	8017aa2 <strncmp+0x1e>

08017aa8 <_fstat_r>:
 8017aa8:	b538      	push	{r3, r4, r5, lr}
 8017aaa:	4d07      	ldr	r5, [pc, #28]	@ (8017ac8 <_fstat_r+0x20>)
 8017aac:	2300      	movs	r3, #0
 8017aae:	4604      	mov	r4, r0
 8017ab0:	4608      	mov	r0, r1
 8017ab2:	4611      	mov	r1, r2
 8017ab4:	602b      	str	r3, [r5, #0]
 8017ab6:	f7ec f915 	bl	8003ce4 <_fstat>
 8017aba:	1c43      	adds	r3, r0, #1
 8017abc:	d102      	bne.n	8017ac4 <_fstat_r+0x1c>
 8017abe:	682b      	ldr	r3, [r5, #0]
 8017ac0:	b103      	cbz	r3, 8017ac4 <_fstat_r+0x1c>
 8017ac2:	6023      	str	r3, [r4, #0]
 8017ac4:	bd38      	pop	{r3, r4, r5, pc}
 8017ac6:	bf00      	nop
 8017ac8:	200040b8 	.word	0x200040b8

08017acc <_isatty_r>:
 8017acc:	b538      	push	{r3, r4, r5, lr}
 8017ace:	4d06      	ldr	r5, [pc, #24]	@ (8017ae8 <_isatty_r+0x1c>)
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	4604      	mov	r4, r0
 8017ad4:	4608      	mov	r0, r1
 8017ad6:	602b      	str	r3, [r5, #0]
 8017ad8:	f7ec f914 	bl	8003d04 <_isatty>
 8017adc:	1c43      	adds	r3, r0, #1
 8017ade:	d102      	bne.n	8017ae6 <_isatty_r+0x1a>
 8017ae0:	682b      	ldr	r3, [r5, #0]
 8017ae2:	b103      	cbz	r3, 8017ae6 <_isatty_r+0x1a>
 8017ae4:	6023      	str	r3, [r4, #0]
 8017ae6:	bd38      	pop	{r3, r4, r5, pc}
 8017ae8:	200040b8 	.word	0x200040b8

08017aec <_sbrk_r>:
 8017aec:	b538      	push	{r3, r4, r5, lr}
 8017aee:	4d06      	ldr	r5, [pc, #24]	@ (8017b08 <_sbrk_r+0x1c>)
 8017af0:	2300      	movs	r3, #0
 8017af2:	4604      	mov	r4, r0
 8017af4:	4608      	mov	r0, r1
 8017af6:	602b      	str	r3, [r5, #0]
 8017af8:	f7ec f91c 	bl	8003d34 <_sbrk>
 8017afc:	1c43      	adds	r3, r0, #1
 8017afe:	d102      	bne.n	8017b06 <_sbrk_r+0x1a>
 8017b00:	682b      	ldr	r3, [r5, #0]
 8017b02:	b103      	cbz	r3, 8017b06 <_sbrk_r+0x1a>
 8017b04:	6023      	str	r3, [r4, #0]
 8017b06:	bd38      	pop	{r3, r4, r5, pc}
 8017b08:	200040b8 	.word	0x200040b8
 8017b0c:	00000000 	.word	0x00000000

08017b10 <nan>:
 8017b10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017b18 <nan+0x8>
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop
 8017b18:	00000000 	.word	0x00000000
 8017b1c:	7ff80000 	.word	0x7ff80000

08017b20 <__assert_func>:
 8017b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b22:	4614      	mov	r4, r2
 8017b24:	461a      	mov	r2, r3
 8017b26:	4b09      	ldr	r3, [pc, #36]	@ (8017b4c <__assert_func+0x2c>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	4605      	mov	r5, r0
 8017b2c:	68d8      	ldr	r0, [r3, #12]
 8017b2e:	b14c      	cbz	r4, 8017b44 <__assert_func+0x24>
 8017b30:	4b07      	ldr	r3, [pc, #28]	@ (8017b50 <__assert_func+0x30>)
 8017b32:	9100      	str	r1, [sp, #0]
 8017b34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b38:	4906      	ldr	r1, [pc, #24]	@ (8017b54 <__assert_func+0x34>)
 8017b3a:	462b      	mov	r3, r5
 8017b3c:	f000 fba8 	bl	8018290 <fiprintf>
 8017b40:	f000 fbb8 	bl	80182b4 <abort>
 8017b44:	4b04      	ldr	r3, [pc, #16]	@ (8017b58 <__assert_func+0x38>)
 8017b46:	461c      	mov	r4, r3
 8017b48:	e7f3      	b.n	8017b32 <__assert_func+0x12>
 8017b4a:	bf00      	nop
 8017b4c:	20000054 	.word	0x20000054
 8017b50:	0801bca2 	.word	0x0801bca2
 8017b54:	0801bcaf 	.word	0x0801bcaf
 8017b58:	0801bcdd 	.word	0x0801bcdd

08017b5c <_calloc_r>:
 8017b5c:	b570      	push	{r4, r5, r6, lr}
 8017b5e:	fba1 5402 	umull	r5, r4, r1, r2
 8017b62:	b934      	cbnz	r4, 8017b72 <_calloc_r+0x16>
 8017b64:	4629      	mov	r1, r5
 8017b66:	f7fe f953 	bl	8015e10 <_malloc_r>
 8017b6a:	4606      	mov	r6, r0
 8017b6c:	b928      	cbnz	r0, 8017b7a <_calloc_r+0x1e>
 8017b6e:	4630      	mov	r0, r6
 8017b70:	bd70      	pop	{r4, r5, r6, pc}
 8017b72:	220c      	movs	r2, #12
 8017b74:	6002      	str	r2, [r0, #0]
 8017b76:	2600      	movs	r6, #0
 8017b78:	e7f9      	b.n	8017b6e <_calloc_r+0x12>
 8017b7a:	462a      	mov	r2, r5
 8017b7c:	4621      	mov	r1, r4
 8017b7e:	f7fd f9e7 	bl	8014f50 <memset>
 8017b82:	e7f4      	b.n	8017b6e <_calloc_r+0x12>

08017b84 <rshift>:
 8017b84:	6903      	ldr	r3, [r0, #16]
 8017b86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017b8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017b92:	f100 0414 	add.w	r4, r0, #20
 8017b96:	dd45      	ble.n	8017c24 <rshift+0xa0>
 8017b98:	f011 011f 	ands.w	r1, r1, #31
 8017b9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017ba0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017ba4:	d10c      	bne.n	8017bc0 <rshift+0x3c>
 8017ba6:	f100 0710 	add.w	r7, r0, #16
 8017baa:	4629      	mov	r1, r5
 8017bac:	42b1      	cmp	r1, r6
 8017bae:	d334      	bcc.n	8017c1a <rshift+0x96>
 8017bb0:	1a9b      	subs	r3, r3, r2
 8017bb2:	009b      	lsls	r3, r3, #2
 8017bb4:	1eea      	subs	r2, r5, #3
 8017bb6:	4296      	cmp	r6, r2
 8017bb8:	bf38      	it	cc
 8017bba:	2300      	movcc	r3, #0
 8017bbc:	4423      	add	r3, r4
 8017bbe:	e015      	b.n	8017bec <rshift+0x68>
 8017bc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017bc4:	f1c1 0820 	rsb	r8, r1, #32
 8017bc8:	40cf      	lsrs	r7, r1
 8017bca:	f105 0e04 	add.w	lr, r5, #4
 8017bce:	46a1      	mov	r9, r4
 8017bd0:	4576      	cmp	r6, lr
 8017bd2:	46f4      	mov	ip, lr
 8017bd4:	d815      	bhi.n	8017c02 <rshift+0x7e>
 8017bd6:	1a9a      	subs	r2, r3, r2
 8017bd8:	0092      	lsls	r2, r2, #2
 8017bda:	3a04      	subs	r2, #4
 8017bdc:	3501      	adds	r5, #1
 8017bde:	42ae      	cmp	r6, r5
 8017be0:	bf38      	it	cc
 8017be2:	2200      	movcc	r2, #0
 8017be4:	18a3      	adds	r3, r4, r2
 8017be6:	50a7      	str	r7, [r4, r2]
 8017be8:	b107      	cbz	r7, 8017bec <rshift+0x68>
 8017bea:	3304      	adds	r3, #4
 8017bec:	1b1a      	subs	r2, r3, r4
 8017bee:	42a3      	cmp	r3, r4
 8017bf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017bf4:	bf08      	it	eq
 8017bf6:	2300      	moveq	r3, #0
 8017bf8:	6102      	str	r2, [r0, #16]
 8017bfa:	bf08      	it	eq
 8017bfc:	6143      	streq	r3, [r0, #20]
 8017bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c02:	f8dc c000 	ldr.w	ip, [ip]
 8017c06:	fa0c fc08 	lsl.w	ip, ip, r8
 8017c0a:	ea4c 0707 	orr.w	r7, ip, r7
 8017c0e:	f849 7b04 	str.w	r7, [r9], #4
 8017c12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017c16:	40cf      	lsrs	r7, r1
 8017c18:	e7da      	b.n	8017bd0 <rshift+0x4c>
 8017c1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8017c1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8017c22:	e7c3      	b.n	8017bac <rshift+0x28>
 8017c24:	4623      	mov	r3, r4
 8017c26:	e7e1      	b.n	8017bec <rshift+0x68>

08017c28 <__hexdig_fun>:
 8017c28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017c2c:	2b09      	cmp	r3, #9
 8017c2e:	d802      	bhi.n	8017c36 <__hexdig_fun+0xe>
 8017c30:	3820      	subs	r0, #32
 8017c32:	b2c0      	uxtb	r0, r0
 8017c34:	4770      	bx	lr
 8017c36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017c3a:	2b05      	cmp	r3, #5
 8017c3c:	d801      	bhi.n	8017c42 <__hexdig_fun+0x1a>
 8017c3e:	3847      	subs	r0, #71	@ 0x47
 8017c40:	e7f7      	b.n	8017c32 <__hexdig_fun+0xa>
 8017c42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017c46:	2b05      	cmp	r3, #5
 8017c48:	d801      	bhi.n	8017c4e <__hexdig_fun+0x26>
 8017c4a:	3827      	subs	r0, #39	@ 0x27
 8017c4c:	e7f1      	b.n	8017c32 <__hexdig_fun+0xa>
 8017c4e:	2000      	movs	r0, #0
 8017c50:	4770      	bx	lr
	...

08017c54 <__gethex>:
 8017c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c58:	b085      	sub	sp, #20
 8017c5a:	468a      	mov	sl, r1
 8017c5c:	9302      	str	r3, [sp, #8]
 8017c5e:	680b      	ldr	r3, [r1, #0]
 8017c60:	9001      	str	r0, [sp, #4]
 8017c62:	4690      	mov	r8, r2
 8017c64:	1c9c      	adds	r4, r3, #2
 8017c66:	46a1      	mov	r9, r4
 8017c68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017c6c:	2830      	cmp	r0, #48	@ 0x30
 8017c6e:	d0fa      	beq.n	8017c66 <__gethex+0x12>
 8017c70:	eba9 0303 	sub.w	r3, r9, r3
 8017c74:	f1a3 0b02 	sub.w	fp, r3, #2
 8017c78:	f7ff ffd6 	bl	8017c28 <__hexdig_fun>
 8017c7c:	4605      	mov	r5, r0
 8017c7e:	2800      	cmp	r0, #0
 8017c80:	d168      	bne.n	8017d54 <__gethex+0x100>
 8017c82:	49a0      	ldr	r1, [pc, #640]	@ (8017f04 <__gethex+0x2b0>)
 8017c84:	2201      	movs	r2, #1
 8017c86:	4648      	mov	r0, r9
 8017c88:	f7ff fefc 	bl	8017a84 <strncmp>
 8017c8c:	4607      	mov	r7, r0
 8017c8e:	2800      	cmp	r0, #0
 8017c90:	d167      	bne.n	8017d62 <__gethex+0x10e>
 8017c92:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017c96:	4626      	mov	r6, r4
 8017c98:	f7ff ffc6 	bl	8017c28 <__hexdig_fun>
 8017c9c:	2800      	cmp	r0, #0
 8017c9e:	d062      	beq.n	8017d66 <__gethex+0x112>
 8017ca0:	4623      	mov	r3, r4
 8017ca2:	7818      	ldrb	r0, [r3, #0]
 8017ca4:	2830      	cmp	r0, #48	@ 0x30
 8017ca6:	4699      	mov	r9, r3
 8017ca8:	f103 0301 	add.w	r3, r3, #1
 8017cac:	d0f9      	beq.n	8017ca2 <__gethex+0x4e>
 8017cae:	f7ff ffbb 	bl	8017c28 <__hexdig_fun>
 8017cb2:	fab0 f580 	clz	r5, r0
 8017cb6:	096d      	lsrs	r5, r5, #5
 8017cb8:	f04f 0b01 	mov.w	fp, #1
 8017cbc:	464a      	mov	r2, r9
 8017cbe:	4616      	mov	r6, r2
 8017cc0:	3201      	adds	r2, #1
 8017cc2:	7830      	ldrb	r0, [r6, #0]
 8017cc4:	f7ff ffb0 	bl	8017c28 <__hexdig_fun>
 8017cc8:	2800      	cmp	r0, #0
 8017cca:	d1f8      	bne.n	8017cbe <__gethex+0x6a>
 8017ccc:	498d      	ldr	r1, [pc, #564]	@ (8017f04 <__gethex+0x2b0>)
 8017cce:	2201      	movs	r2, #1
 8017cd0:	4630      	mov	r0, r6
 8017cd2:	f7ff fed7 	bl	8017a84 <strncmp>
 8017cd6:	2800      	cmp	r0, #0
 8017cd8:	d13f      	bne.n	8017d5a <__gethex+0x106>
 8017cda:	b944      	cbnz	r4, 8017cee <__gethex+0x9a>
 8017cdc:	1c74      	adds	r4, r6, #1
 8017cde:	4622      	mov	r2, r4
 8017ce0:	4616      	mov	r6, r2
 8017ce2:	3201      	adds	r2, #1
 8017ce4:	7830      	ldrb	r0, [r6, #0]
 8017ce6:	f7ff ff9f 	bl	8017c28 <__hexdig_fun>
 8017cea:	2800      	cmp	r0, #0
 8017cec:	d1f8      	bne.n	8017ce0 <__gethex+0x8c>
 8017cee:	1ba4      	subs	r4, r4, r6
 8017cf0:	00a7      	lsls	r7, r4, #2
 8017cf2:	7833      	ldrb	r3, [r6, #0]
 8017cf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017cf8:	2b50      	cmp	r3, #80	@ 0x50
 8017cfa:	d13e      	bne.n	8017d7a <__gethex+0x126>
 8017cfc:	7873      	ldrb	r3, [r6, #1]
 8017cfe:	2b2b      	cmp	r3, #43	@ 0x2b
 8017d00:	d033      	beq.n	8017d6a <__gethex+0x116>
 8017d02:	2b2d      	cmp	r3, #45	@ 0x2d
 8017d04:	d034      	beq.n	8017d70 <__gethex+0x11c>
 8017d06:	1c71      	adds	r1, r6, #1
 8017d08:	2400      	movs	r4, #0
 8017d0a:	7808      	ldrb	r0, [r1, #0]
 8017d0c:	f7ff ff8c 	bl	8017c28 <__hexdig_fun>
 8017d10:	1e43      	subs	r3, r0, #1
 8017d12:	b2db      	uxtb	r3, r3
 8017d14:	2b18      	cmp	r3, #24
 8017d16:	d830      	bhi.n	8017d7a <__gethex+0x126>
 8017d18:	f1a0 0210 	sub.w	r2, r0, #16
 8017d1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017d20:	f7ff ff82 	bl	8017c28 <__hexdig_fun>
 8017d24:	f100 3cff 	add.w	ip, r0, #4294967295
 8017d28:	fa5f fc8c 	uxtb.w	ip, ip
 8017d2c:	f1bc 0f18 	cmp.w	ip, #24
 8017d30:	f04f 030a 	mov.w	r3, #10
 8017d34:	d91e      	bls.n	8017d74 <__gethex+0x120>
 8017d36:	b104      	cbz	r4, 8017d3a <__gethex+0xe6>
 8017d38:	4252      	negs	r2, r2
 8017d3a:	4417      	add	r7, r2
 8017d3c:	f8ca 1000 	str.w	r1, [sl]
 8017d40:	b1ed      	cbz	r5, 8017d7e <__gethex+0x12a>
 8017d42:	f1bb 0f00 	cmp.w	fp, #0
 8017d46:	bf0c      	ite	eq
 8017d48:	2506      	moveq	r5, #6
 8017d4a:	2500      	movne	r5, #0
 8017d4c:	4628      	mov	r0, r5
 8017d4e:	b005      	add	sp, #20
 8017d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d54:	2500      	movs	r5, #0
 8017d56:	462c      	mov	r4, r5
 8017d58:	e7b0      	b.n	8017cbc <__gethex+0x68>
 8017d5a:	2c00      	cmp	r4, #0
 8017d5c:	d1c7      	bne.n	8017cee <__gethex+0x9a>
 8017d5e:	4627      	mov	r7, r4
 8017d60:	e7c7      	b.n	8017cf2 <__gethex+0x9e>
 8017d62:	464e      	mov	r6, r9
 8017d64:	462f      	mov	r7, r5
 8017d66:	2501      	movs	r5, #1
 8017d68:	e7c3      	b.n	8017cf2 <__gethex+0x9e>
 8017d6a:	2400      	movs	r4, #0
 8017d6c:	1cb1      	adds	r1, r6, #2
 8017d6e:	e7cc      	b.n	8017d0a <__gethex+0xb6>
 8017d70:	2401      	movs	r4, #1
 8017d72:	e7fb      	b.n	8017d6c <__gethex+0x118>
 8017d74:	fb03 0002 	mla	r0, r3, r2, r0
 8017d78:	e7ce      	b.n	8017d18 <__gethex+0xc4>
 8017d7a:	4631      	mov	r1, r6
 8017d7c:	e7de      	b.n	8017d3c <__gethex+0xe8>
 8017d7e:	eba6 0309 	sub.w	r3, r6, r9
 8017d82:	3b01      	subs	r3, #1
 8017d84:	4629      	mov	r1, r5
 8017d86:	2b07      	cmp	r3, #7
 8017d88:	dc0a      	bgt.n	8017da0 <__gethex+0x14c>
 8017d8a:	9801      	ldr	r0, [sp, #4]
 8017d8c:	f7fe f8cc 	bl	8015f28 <_Balloc>
 8017d90:	4604      	mov	r4, r0
 8017d92:	b940      	cbnz	r0, 8017da6 <__gethex+0x152>
 8017d94:	4b5c      	ldr	r3, [pc, #368]	@ (8017f08 <__gethex+0x2b4>)
 8017d96:	4602      	mov	r2, r0
 8017d98:	21e4      	movs	r1, #228	@ 0xe4
 8017d9a:	485c      	ldr	r0, [pc, #368]	@ (8017f0c <__gethex+0x2b8>)
 8017d9c:	f7ff fec0 	bl	8017b20 <__assert_func>
 8017da0:	3101      	adds	r1, #1
 8017da2:	105b      	asrs	r3, r3, #1
 8017da4:	e7ef      	b.n	8017d86 <__gethex+0x132>
 8017da6:	f100 0a14 	add.w	sl, r0, #20
 8017daa:	2300      	movs	r3, #0
 8017dac:	4655      	mov	r5, sl
 8017dae:	469b      	mov	fp, r3
 8017db0:	45b1      	cmp	r9, r6
 8017db2:	d337      	bcc.n	8017e24 <__gethex+0x1d0>
 8017db4:	f845 bb04 	str.w	fp, [r5], #4
 8017db8:	eba5 050a 	sub.w	r5, r5, sl
 8017dbc:	10ad      	asrs	r5, r5, #2
 8017dbe:	6125      	str	r5, [r4, #16]
 8017dc0:	4658      	mov	r0, fp
 8017dc2:	f7fe f9a3 	bl	801610c <__hi0bits>
 8017dc6:	016d      	lsls	r5, r5, #5
 8017dc8:	f8d8 6000 	ldr.w	r6, [r8]
 8017dcc:	1a2d      	subs	r5, r5, r0
 8017dce:	42b5      	cmp	r5, r6
 8017dd0:	dd54      	ble.n	8017e7c <__gethex+0x228>
 8017dd2:	1bad      	subs	r5, r5, r6
 8017dd4:	4629      	mov	r1, r5
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	f7fe fd2f 	bl	801683a <__any_on>
 8017ddc:	4681      	mov	r9, r0
 8017dde:	b178      	cbz	r0, 8017e00 <__gethex+0x1ac>
 8017de0:	1e6b      	subs	r3, r5, #1
 8017de2:	1159      	asrs	r1, r3, #5
 8017de4:	f003 021f 	and.w	r2, r3, #31
 8017de8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017dec:	f04f 0901 	mov.w	r9, #1
 8017df0:	fa09 f202 	lsl.w	r2, r9, r2
 8017df4:	420a      	tst	r2, r1
 8017df6:	d003      	beq.n	8017e00 <__gethex+0x1ac>
 8017df8:	454b      	cmp	r3, r9
 8017dfa:	dc36      	bgt.n	8017e6a <__gethex+0x216>
 8017dfc:	f04f 0902 	mov.w	r9, #2
 8017e00:	4629      	mov	r1, r5
 8017e02:	4620      	mov	r0, r4
 8017e04:	f7ff febe 	bl	8017b84 <rshift>
 8017e08:	442f      	add	r7, r5
 8017e0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e0e:	42bb      	cmp	r3, r7
 8017e10:	da42      	bge.n	8017e98 <__gethex+0x244>
 8017e12:	9801      	ldr	r0, [sp, #4]
 8017e14:	4621      	mov	r1, r4
 8017e16:	f7fe f8c7 	bl	8015fa8 <_Bfree>
 8017e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	6013      	str	r3, [r2, #0]
 8017e20:	25a3      	movs	r5, #163	@ 0xa3
 8017e22:	e793      	b.n	8017d4c <__gethex+0xf8>
 8017e24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017e28:	2a2e      	cmp	r2, #46	@ 0x2e
 8017e2a:	d012      	beq.n	8017e52 <__gethex+0x1fe>
 8017e2c:	2b20      	cmp	r3, #32
 8017e2e:	d104      	bne.n	8017e3a <__gethex+0x1e6>
 8017e30:	f845 bb04 	str.w	fp, [r5], #4
 8017e34:	f04f 0b00 	mov.w	fp, #0
 8017e38:	465b      	mov	r3, fp
 8017e3a:	7830      	ldrb	r0, [r6, #0]
 8017e3c:	9303      	str	r3, [sp, #12]
 8017e3e:	f7ff fef3 	bl	8017c28 <__hexdig_fun>
 8017e42:	9b03      	ldr	r3, [sp, #12]
 8017e44:	f000 000f 	and.w	r0, r0, #15
 8017e48:	4098      	lsls	r0, r3
 8017e4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8017e4e:	3304      	adds	r3, #4
 8017e50:	e7ae      	b.n	8017db0 <__gethex+0x15c>
 8017e52:	45b1      	cmp	r9, r6
 8017e54:	d8ea      	bhi.n	8017e2c <__gethex+0x1d8>
 8017e56:	492b      	ldr	r1, [pc, #172]	@ (8017f04 <__gethex+0x2b0>)
 8017e58:	9303      	str	r3, [sp, #12]
 8017e5a:	2201      	movs	r2, #1
 8017e5c:	4630      	mov	r0, r6
 8017e5e:	f7ff fe11 	bl	8017a84 <strncmp>
 8017e62:	9b03      	ldr	r3, [sp, #12]
 8017e64:	2800      	cmp	r0, #0
 8017e66:	d1e1      	bne.n	8017e2c <__gethex+0x1d8>
 8017e68:	e7a2      	b.n	8017db0 <__gethex+0x15c>
 8017e6a:	1ea9      	subs	r1, r5, #2
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	f7fe fce4 	bl	801683a <__any_on>
 8017e72:	2800      	cmp	r0, #0
 8017e74:	d0c2      	beq.n	8017dfc <__gethex+0x1a8>
 8017e76:	f04f 0903 	mov.w	r9, #3
 8017e7a:	e7c1      	b.n	8017e00 <__gethex+0x1ac>
 8017e7c:	da09      	bge.n	8017e92 <__gethex+0x23e>
 8017e7e:	1b75      	subs	r5, r6, r5
 8017e80:	4621      	mov	r1, r4
 8017e82:	9801      	ldr	r0, [sp, #4]
 8017e84:	462a      	mov	r2, r5
 8017e86:	f7fe fa9f 	bl	80163c8 <__lshift>
 8017e8a:	1b7f      	subs	r7, r7, r5
 8017e8c:	4604      	mov	r4, r0
 8017e8e:	f100 0a14 	add.w	sl, r0, #20
 8017e92:	f04f 0900 	mov.w	r9, #0
 8017e96:	e7b8      	b.n	8017e0a <__gethex+0x1b6>
 8017e98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017e9c:	42bd      	cmp	r5, r7
 8017e9e:	dd6f      	ble.n	8017f80 <__gethex+0x32c>
 8017ea0:	1bed      	subs	r5, r5, r7
 8017ea2:	42ae      	cmp	r6, r5
 8017ea4:	dc34      	bgt.n	8017f10 <__gethex+0x2bc>
 8017ea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017eaa:	2b02      	cmp	r3, #2
 8017eac:	d022      	beq.n	8017ef4 <__gethex+0x2a0>
 8017eae:	2b03      	cmp	r3, #3
 8017eb0:	d024      	beq.n	8017efc <__gethex+0x2a8>
 8017eb2:	2b01      	cmp	r3, #1
 8017eb4:	d115      	bne.n	8017ee2 <__gethex+0x28e>
 8017eb6:	42ae      	cmp	r6, r5
 8017eb8:	d113      	bne.n	8017ee2 <__gethex+0x28e>
 8017eba:	2e01      	cmp	r6, #1
 8017ebc:	d10b      	bne.n	8017ed6 <__gethex+0x282>
 8017ebe:	9a02      	ldr	r2, [sp, #8]
 8017ec0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017ec4:	6013      	str	r3, [r2, #0]
 8017ec6:	2301      	movs	r3, #1
 8017ec8:	6123      	str	r3, [r4, #16]
 8017eca:	f8ca 3000 	str.w	r3, [sl]
 8017ece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ed0:	2562      	movs	r5, #98	@ 0x62
 8017ed2:	601c      	str	r4, [r3, #0]
 8017ed4:	e73a      	b.n	8017d4c <__gethex+0xf8>
 8017ed6:	1e71      	subs	r1, r6, #1
 8017ed8:	4620      	mov	r0, r4
 8017eda:	f7fe fcae 	bl	801683a <__any_on>
 8017ede:	2800      	cmp	r0, #0
 8017ee0:	d1ed      	bne.n	8017ebe <__gethex+0x26a>
 8017ee2:	9801      	ldr	r0, [sp, #4]
 8017ee4:	4621      	mov	r1, r4
 8017ee6:	f7fe f85f 	bl	8015fa8 <_Bfree>
 8017eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017eec:	2300      	movs	r3, #0
 8017eee:	6013      	str	r3, [r2, #0]
 8017ef0:	2550      	movs	r5, #80	@ 0x50
 8017ef2:	e72b      	b.n	8017d4c <__gethex+0xf8>
 8017ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d1f3      	bne.n	8017ee2 <__gethex+0x28e>
 8017efa:	e7e0      	b.n	8017ebe <__gethex+0x26a>
 8017efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d1dd      	bne.n	8017ebe <__gethex+0x26a>
 8017f02:	e7ee      	b.n	8017ee2 <__gethex+0x28e>
 8017f04:	0801bc87 	.word	0x0801bc87
 8017f08:	0801bc1d 	.word	0x0801bc1d
 8017f0c:	0801bcde 	.word	0x0801bcde
 8017f10:	1e6f      	subs	r7, r5, #1
 8017f12:	f1b9 0f00 	cmp.w	r9, #0
 8017f16:	d130      	bne.n	8017f7a <__gethex+0x326>
 8017f18:	b127      	cbz	r7, 8017f24 <__gethex+0x2d0>
 8017f1a:	4639      	mov	r1, r7
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	f7fe fc8c 	bl	801683a <__any_on>
 8017f22:	4681      	mov	r9, r0
 8017f24:	117a      	asrs	r2, r7, #5
 8017f26:	2301      	movs	r3, #1
 8017f28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017f2c:	f007 071f 	and.w	r7, r7, #31
 8017f30:	40bb      	lsls	r3, r7
 8017f32:	4213      	tst	r3, r2
 8017f34:	4629      	mov	r1, r5
 8017f36:	4620      	mov	r0, r4
 8017f38:	bf18      	it	ne
 8017f3a:	f049 0902 	orrne.w	r9, r9, #2
 8017f3e:	f7ff fe21 	bl	8017b84 <rshift>
 8017f42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017f46:	1b76      	subs	r6, r6, r5
 8017f48:	2502      	movs	r5, #2
 8017f4a:	f1b9 0f00 	cmp.w	r9, #0
 8017f4e:	d047      	beq.n	8017fe0 <__gethex+0x38c>
 8017f50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f54:	2b02      	cmp	r3, #2
 8017f56:	d015      	beq.n	8017f84 <__gethex+0x330>
 8017f58:	2b03      	cmp	r3, #3
 8017f5a:	d017      	beq.n	8017f8c <__gethex+0x338>
 8017f5c:	2b01      	cmp	r3, #1
 8017f5e:	d109      	bne.n	8017f74 <__gethex+0x320>
 8017f60:	f019 0f02 	tst.w	r9, #2
 8017f64:	d006      	beq.n	8017f74 <__gethex+0x320>
 8017f66:	f8da 3000 	ldr.w	r3, [sl]
 8017f6a:	ea49 0903 	orr.w	r9, r9, r3
 8017f6e:	f019 0f01 	tst.w	r9, #1
 8017f72:	d10e      	bne.n	8017f92 <__gethex+0x33e>
 8017f74:	f045 0510 	orr.w	r5, r5, #16
 8017f78:	e032      	b.n	8017fe0 <__gethex+0x38c>
 8017f7a:	f04f 0901 	mov.w	r9, #1
 8017f7e:	e7d1      	b.n	8017f24 <__gethex+0x2d0>
 8017f80:	2501      	movs	r5, #1
 8017f82:	e7e2      	b.n	8017f4a <__gethex+0x2f6>
 8017f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f86:	f1c3 0301 	rsb	r3, r3, #1
 8017f8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d0f0      	beq.n	8017f74 <__gethex+0x320>
 8017f92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017f96:	f104 0314 	add.w	r3, r4, #20
 8017f9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017f9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017fa2:	f04f 0c00 	mov.w	ip, #0
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017fb0:	d01b      	beq.n	8017fea <__gethex+0x396>
 8017fb2:	3201      	adds	r2, #1
 8017fb4:	6002      	str	r2, [r0, #0]
 8017fb6:	2d02      	cmp	r5, #2
 8017fb8:	f104 0314 	add.w	r3, r4, #20
 8017fbc:	d13c      	bne.n	8018038 <__gethex+0x3e4>
 8017fbe:	f8d8 2000 	ldr.w	r2, [r8]
 8017fc2:	3a01      	subs	r2, #1
 8017fc4:	42b2      	cmp	r2, r6
 8017fc6:	d109      	bne.n	8017fdc <__gethex+0x388>
 8017fc8:	1171      	asrs	r1, r6, #5
 8017fca:	2201      	movs	r2, #1
 8017fcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017fd0:	f006 061f 	and.w	r6, r6, #31
 8017fd4:	fa02 f606 	lsl.w	r6, r2, r6
 8017fd8:	421e      	tst	r6, r3
 8017fda:	d13a      	bne.n	8018052 <__gethex+0x3fe>
 8017fdc:	f045 0520 	orr.w	r5, r5, #32
 8017fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017fe2:	601c      	str	r4, [r3, #0]
 8017fe4:	9b02      	ldr	r3, [sp, #8]
 8017fe6:	601f      	str	r7, [r3, #0]
 8017fe8:	e6b0      	b.n	8017d4c <__gethex+0xf8>
 8017fea:	4299      	cmp	r1, r3
 8017fec:	f843 cc04 	str.w	ip, [r3, #-4]
 8017ff0:	d8d9      	bhi.n	8017fa6 <__gethex+0x352>
 8017ff2:	68a3      	ldr	r3, [r4, #8]
 8017ff4:	459b      	cmp	fp, r3
 8017ff6:	db17      	blt.n	8018028 <__gethex+0x3d4>
 8017ff8:	6861      	ldr	r1, [r4, #4]
 8017ffa:	9801      	ldr	r0, [sp, #4]
 8017ffc:	3101      	adds	r1, #1
 8017ffe:	f7fd ff93 	bl	8015f28 <_Balloc>
 8018002:	4681      	mov	r9, r0
 8018004:	b918      	cbnz	r0, 801800e <__gethex+0x3ba>
 8018006:	4b1a      	ldr	r3, [pc, #104]	@ (8018070 <__gethex+0x41c>)
 8018008:	4602      	mov	r2, r0
 801800a:	2184      	movs	r1, #132	@ 0x84
 801800c:	e6c5      	b.n	8017d9a <__gethex+0x146>
 801800e:	6922      	ldr	r2, [r4, #16]
 8018010:	3202      	adds	r2, #2
 8018012:	f104 010c 	add.w	r1, r4, #12
 8018016:	0092      	lsls	r2, r2, #2
 8018018:	300c      	adds	r0, #12
 801801a:	f7fd f818 	bl	801504e <memcpy>
 801801e:	4621      	mov	r1, r4
 8018020:	9801      	ldr	r0, [sp, #4]
 8018022:	f7fd ffc1 	bl	8015fa8 <_Bfree>
 8018026:	464c      	mov	r4, r9
 8018028:	6923      	ldr	r3, [r4, #16]
 801802a:	1c5a      	adds	r2, r3, #1
 801802c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018030:	6122      	str	r2, [r4, #16]
 8018032:	2201      	movs	r2, #1
 8018034:	615a      	str	r2, [r3, #20]
 8018036:	e7be      	b.n	8017fb6 <__gethex+0x362>
 8018038:	6922      	ldr	r2, [r4, #16]
 801803a:	455a      	cmp	r2, fp
 801803c:	dd0b      	ble.n	8018056 <__gethex+0x402>
 801803e:	2101      	movs	r1, #1
 8018040:	4620      	mov	r0, r4
 8018042:	f7ff fd9f 	bl	8017b84 <rshift>
 8018046:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801804a:	3701      	adds	r7, #1
 801804c:	42bb      	cmp	r3, r7
 801804e:	f6ff aee0 	blt.w	8017e12 <__gethex+0x1be>
 8018052:	2501      	movs	r5, #1
 8018054:	e7c2      	b.n	8017fdc <__gethex+0x388>
 8018056:	f016 061f 	ands.w	r6, r6, #31
 801805a:	d0fa      	beq.n	8018052 <__gethex+0x3fe>
 801805c:	4453      	add	r3, sl
 801805e:	f1c6 0620 	rsb	r6, r6, #32
 8018062:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018066:	f7fe f851 	bl	801610c <__hi0bits>
 801806a:	42b0      	cmp	r0, r6
 801806c:	dbe7      	blt.n	801803e <__gethex+0x3ea>
 801806e:	e7f0      	b.n	8018052 <__gethex+0x3fe>
 8018070:	0801bc1d 	.word	0x0801bc1d

08018074 <L_shift>:
 8018074:	f1c2 0208 	rsb	r2, r2, #8
 8018078:	0092      	lsls	r2, r2, #2
 801807a:	b570      	push	{r4, r5, r6, lr}
 801807c:	f1c2 0620 	rsb	r6, r2, #32
 8018080:	6843      	ldr	r3, [r0, #4]
 8018082:	6804      	ldr	r4, [r0, #0]
 8018084:	fa03 f506 	lsl.w	r5, r3, r6
 8018088:	432c      	orrs	r4, r5
 801808a:	40d3      	lsrs	r3, r2
 801808c:	6004      	str	r4, [r0, #0]
 801808e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018092:	4288      	cmp	r0, r1
 8018094:	d3f4      	bcc.n	8018080 <L_shift+0xc>
 8018096:	bd70      	pop	{r4, r5, r6, pc}

08018098 <__match>:
 8018098:	b530      	push	{r4, r5, lr}
 801809a:	6803      	ldr	r3, [r0, #0]
 801809c:	3301      	adds	r3, #1
 801809e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80180a2:	b914      	cbnz	r4, 80180aa <__match+0x12>
 80180a4:	6003      	str	r3, [r0, #0]
 80180a6:	2001      	movs	r0, #1
 80180a8:	bd30      	pop	{r4, r5, pc}
 80180aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80180b2:	2d19      	cmp	r5, #25
 80180b4:	bf98      	it	ls
 80180b6:	3220      	addls	r2, #32
 80180b8:	42a2      	cmp	r2, r4
 80180ba:	d0f0      	beq.n	801809e <__match+0x6>
 80180bc:	2000      	movs	r0, #0
 80180be:	e7f3      	b.n	80180a8 <__match+0x10>

080180c0 <__hexnan>:
 80180c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180c4:	680b      	ldr	r3, [r1, #0]
 80180c6:	6801      	ldr	r1, [r0, #0]
 80180c8:	115e      	asrs	r6, r3, #5
 80180ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80180ce:	f013 031f 	ands.w	r3, r3, #31
 80180d2:	b087      	sub	sp, #28
 80180d4:	bf18      	it	ne
 80180d6:	3604      	addne	r6, #4
 80180d8:	2500      	movs	r5, #0
 80180da:	1f37      	subs	r7, r6, #4
 80180dc:	4682      	mov	sl, r0
 80180de:	4690      	mov	r8, r2
 80180e0:	9301      	str	r3, [sp, #4]
 80180e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80180e6:	46b9      	mov	r9, r7
 80180e8:	463c      	mov	r4, r7
 80180ea:	9502      	str	r5, [sp, #8]
 80180ec:	46ab      	mov	fp, r5
 80180ee:	784a      	ldrb	r2, [r1, #1]
 80180f0:	1c4b      	adds	r3, r1, #1
 80180f2:	9303      	str	r3, [sp, #12]
 80180f4:	b342      	cbz	r2, 8018148 <__hexnan+0x88>
 80180f6:	4610      	mov	r0, r2
 80180f8:	9105      	str	r1, [sp, #20]
 80180fa:	9204      	str	r2, [sp, #16]
 80180fc:	f7ff fd94 	bl	8017c28 <__hexdig_fun>
 8018100:	2800      	cmp	r0, #0
 8018102:	d151      	bne.n	80181a8 <__hexnan+0xe8>
 8018104:	9a04      	ldr	r2, [sp, #16]
 8018106:	9905      	ldr	r1, [sp, #20]
 8018108:	2a20      	cmp	r2, #32
 801810a:	d818      	bhi.n	801813e <__hexnan+0x7e>
 801810c:	9b02      	ldr	r3, [sp, #8]
 801810e:	459b      	cmp	fp, r3
 8018110:	dd13      	ble.n	801813a <__hexnan+0x7a>
 8018112:	454c      	cmp	r4, r9
 8018114:	d206      	bcs.n	8018124 <__hexnan+0x64>
 8018116:	2d07      	cmp	r5, #7
 8018118:	dc04      	bgt.n	8018124 <__hexnan+0x64>
 801811a:	462a      	mov	r2, r5
 801811c:	4649      	mov	r1, r9
 801811e:	4620      	mov	r0, r4
 8018120:	f7ff ffa8 	bl	8018074 <L_shift>
 8018124:	4544      	cmp	r4, r8
 8018126:	d952      	bls.n	80181ce <__hexnan+0x10e>
 8018128:	2300      	movs	r3, #0
 801812a:	f1a4 0904 	sub.w	r9, r4, #4
 801812e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018132:	f8cd b008 	str.w	fp, [sp, #8]
 8018136:	464c      	mov	r4, r9
 8018138:	461d      	mov	r5, r3
 801813a:	9903      	ldr	r1, [sp, #12]
 801813c:	e7d7      	b.n	80180ee <__hexnan+0x2e>
 801813e:	2a29      	cmp	r2, #41	@ 0x29
 8018140:	d157      	bne.n	80181f2 <__hexnan+0x132>
 8018142:	3102      	adds	r1, #2
 8018144:	f8ca 1000 	str.w	r1, [sl]
 8018148:	f1bb 0f00 	cmp.w	fp, #0
 801814c:	d051      	beq.n	80181f2 <__hexnan+0x132>
 801814e:	454c      	cmp	r4, r9
 8018150:	d206      	bcs.n	8018160 <__hexnan+0xa0>
 8018152:	2d07      	cmp	r5, #7
 8018154:	dc04      	bgt.n	8018160 <__hexnan+0xa0>
 8018156:	462a      	mov	r2, r5
 8018158:	4649      	mov	r1, r9
 801815a:	4620      	mov	r0, r4
 801815c:	f7ff ff8a 	bl	8018074 <L_shift>
 8018160:	4544      	cmp	r4, r8
 8018162:	d936      	bls.n	80181d2 <__hexnan+0x112>
 8018164:	f1a8 0204 	sub.w	r2, r8, #4
 8018168:	4623      	mov	r3, r4
 801816a:	f853 1b04 	ldr.w	r1, [r3], #4
 801816e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018172:	429f      	cmp	r7, r3
 8018174:	d2f9      	bcs.n	801816a <__hexnan+0xaa>
 8018176:	1b3b      	subs	r3, r7, r4
 8018178:	f023 0303 	bic.w	r3, r3, #3
 801817c:	3304      	adds	r3, #4
 801817e:	3401      	adds	r4, #1
 8018180:	3e03      	subs	r6, #3
 8018182:	42b4      	cmp	r4, r6
 8018184:	bf88      	it	hi
 8018186:	2304      	movhi	r3, #4
 8018188:	4443      	add	r3, r8
 801818a:	2200      	movs	r2, #0
 801818c:	f843 2b04 	str.w	r2, [r3], #4
 8018190:	429f      	cmp	r7, r3
 8018192:	d2fb      	bcs.n	801818c <__hexnan+0xcc>
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	b91b      	cbnz	r3, 80181a0 <__hexnan+0xe0>
 8018198:	4547      	cmp	r7, r8
 801819a:	d128      	bne.n	80181ee <__hexnan+0x12e>
 801819c:	2301      	movs	r3, #1
 801819e:	603b      	str	r3, [r7, #0]
 80181a0:	2005      	movs	r0, #5
 80181a2:	b007      	add	sp, #28
 80181a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a8:	3501      	adds	r5, #1
 80181aa:	2d08      	cmp	r5, #8
 80181ac:	f10b 0b01 	add.w	fp, fp, #1
 80181b0:	dd06      	ble.n	80181c0 <__hexnan+0x100>
 80181b2:	4544      	cmp	r4, r8
 80181b4:	d9c1      	bls.n	801813a <__hexnan+0x7a>
 80181b6:	2300      	movs	r3, #0
 80181b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80181bc:	2501      	movs	r5, #1
 80181be:	3c04      	subs	r4, #4
 80181c0:	6822      	ldr	r2, [r4, #0]
 80181c2:	f000 000f 	and.w	r0, r0, #15
 80181c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80181ca:	6020      	str	r0, [r4, #0]
 80181cc:	e7b5      	b.n	801813a <__hexnan+0x7a>
 80181ce:	2508      	movs	r5, #8
 80181d0:	e7b3      	b.n	801813a <__hexnan+0x7a>
 80181d2:	9b01      	ldr	r3, [sp, #4]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d0dd      	beq.n	8018194 <__hexnan+0xd4>
 80181d8:	f1c3 0320 	rsb	r3, r3, #32
 80181dc:	f04f 32ff 	mov.w	r2, #4294967295
 80181e0:	40da      	lsrs	r2, r3
 80181e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80181e6:	4013      	ands	r3, r2
 80181e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80181ec:	e7d2      	b.n	8018194 <__hexnan+0xd4>
 80181ee:	3f04      	subs	r7, #4
 80181f0:	e7d0      	b.n	8018194 <__hexnan+0xd4>
 80181f2:	2004      	movs	r0, #4
 80181f4:	e7d5      	b.n	80181a2 <__hexnan+0xe2>

080181f6 <__ascii_mbtowc>:
 80181f6:	b082      	sub	sp, #8
 80181f8:	b901      	cbnz	r1, 80181fc <__ascii_mbtowc+0x6>
 80181fa:	a901      	add	r1, sp, #4
 80181fc:	b142      	cbz	r2, 8018210 <__ascii_mbtowc+0x1a>
 80181fe:	b14b      	cbz	r3, 8018214 <__ascii_mbtowc+0x1e>
 8018200:	7813      	ldrb	r3, [r2, #0]
 8018202:	600b      	str	r3, [r1, #0]
 8018204:	7812      	ldrb	r2, [r2, #0]
 8018206:	1e10      	subs	r0, r2, #0
 8018208:	bf18      	it	ne
 801820a:	2001      	movne	r0, #1
 801820c:	b002      	add	sp, #8
 801820e:	4770      	bx	lr
 8018210:	4610      	mov	r0, r2
 8018212:	e7fb      	b.n	801820c <__ascii_mbtowc+0x16>
 8018214:	f06f 0001 	mvn.w	r0, #1
 8018218:	e7f8      	b.n	801820c <__ascii_mbtowc+0x16>

0801821a <_realloc_r>:
 801821a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801821e:	4607      	mov	r7, r0
 8018220:	4614      	mov	r4, r2
 8018222:	460d      	mov	r5, r1
 8018224:	b921      	cbnz	r1, 8018230 <_realloc_r+0x16>
 8018226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801822a:	4611      	mov	r1, r2
 801822c:	f7fd bdf0 	b.w	8015e10 <_malloc_r>
 8018230:	b92a      	cbnz	r2, 801823e <_realloc_r+0x24>
 8018232:	f7fd fd79 	bl	8015d28 <_free_r>
 8018236:	4625      	mov	r5, r4
 8018238:	4628      	mov	r0, r5
 801823a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801823e:	f000 f840 	bl	80182c2 <_malloc_usable_size_r>
 8018242:	4284      	cmp	r4, r0
 8018244:	4606      	mov	r6, r0
 8018246:	d802      	bhi.n	801824e <_realloc_r+0x34>
 8018248:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801824c:	d8f4      	bhi.n	8018238 <_realloc_r+0x1e>
 801824e:	4621      	mov	r1, r4
 8018250:	4638      	mov	r0, r7
 8018252:	f7fd fddd 	bl	8015e10 <_malloc_r>
 8018256:	4680      	mov	r8, r0
 8018258:	b908      	cbnz	r0, 801825e <_realloc_r+0x44>
 801825a:	4645      	mov	r5, r8
 801825c:	e7ec      	b.n	8018238 <_realloc_r+0x1e>
 801825e:	42b4      	cmp	r4, r6
 8018260:	4622      	mov	r2, r4
 8018262:	4629      	mov	r1, r5
 8018264:	bf28      	it	cs
 8018266:	4632      	movcs	r2, r6
 8018268:	f7fc fef1 	bl	801504e <memcpy>
 801826c:	4629      	mov	r1, r5
 801826e:	4638      	mov	r0, r7
 8018270:	f7fd fd5a 	bl	8015d28 <_free_r>
 8018274:	e7f1      	b.n	801825a <_realloc_r+0x40>

08018276 <__ascii_wctomb>:
 8018276:	4603      	mov	r3, r0
 8018278:	4608      	mov	r0, r1
 801827a:	b141      	cbz	r1, 801828e <__ascii_wctomb+0x18>
 801827c:	2aff      	cmp	r2, #255	@ 0xff
 801827e:	d904      	bls.n	801828a <__ascii_wctomb+0x14>
 8018280:	228a      	movs	r2, #138	@ 0x8a
 8018282:	601a      	str	r2, [r3, #0]
 8018284:	f04f 30ff 	mov.w	r0, #4294967295
 8018288:	4770      	bx	lr
 801828a:	700a      	strb	r2, [r1, #0]
 801828c:	2001      	movs	r0, #1
 801828e:	4770      	bx	lr

08018290 <fiprintf>:
 8018290:	b40e      	push	{r1, r2, r3}
 8018292:	b503      	push	{r0, r1, lr}
 8018294:	4601      	mov	r1, r0
 8018296:	ab03      	add	r3, sp, #12
 8018298:	4805      	ldr	r0, [pc, #20]	@ (80182b0 <fiprintf+0x20>)
 801829a:	f853 2b04 	ldr.w	r2, [r3], #4
 801829e:	6800      	ldr	r0, [r0, #0]
 80182a0:	9301      	str	r3, [sp, #4]
 80182a2:	f000 f83f 	bl	8018324 <_vfiprintf_r>
 80182a6:	b002      	add	sp, #8
 80182a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80182ac:	b003      	add	sp, #12
 80182ae:	4770      	bx	lr
 80182b0:	20000054 	.word	0x20000054

080182b4 <abort>:
 80182b4:	b508      	push	{r3, lr}
 80182b6:	2006      	movs	r0, #6
 80182b8:	f000 f974 	bl	80185a4 <raise>
 80182bc:	2001      	movs	r0, #1
 80182be:	f7eb fcc1 	bl	8003c44 <_exit>

080182c2 <_malloc_usable_size_r>:
 80182c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182c6:	1f18      	subs	r0, r3, #4
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	bfbc      	itt	lt
 80182cc:	580b      	ldrlt	r3, [r1, r0]
 80182ce:	18c0      	addlt	r0, r0, r3
 80182d0:	4770      	bx	lr

080182d2 <__sfputc_r>:
 80182d2:	6893      	ldr	r3, [r2, #8]
 80182d4:	3b01      	subs	r3, #1
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	b410      	push	{r4}
 80182da:	6093      	str	r3, [r2, #8]
 80182dc:	da08      	bge.n	80182f0 <__sfputc_r+0x1e>
 80182de:	6994      	ldr	r4, [r2, #24]
 80182e0:	42a3      	cmp	r3, r4
 80182e2:	db01      	blt.n	80182e8 <__sfputc_r+0x16>
 80182e4:	290a      	cmp	r1, #10
 80182e6:	d103      	bne.n	80182f0 <__sfputc_r+0x1e>
 80182e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80182ec:	f7fc bd9b 	b.w	8014e26 <__swbuf_r>
 80182f0:	6813      	ldr	r3, [r2, #0]
 80182f2:	1c58      	adds	r0, r3, #1
 80182f4:	6010      	str	r0, [r2, #0]
 80182f6:	7019      	strb	r1, [r3, #0]
 80182f8:	4608      	mov	r0, r1
 80182fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80182fe:	4770      	bx	lr

08018300 <__sfputs_r>:
 8018300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018302:	4606      	mov	r6, r0
 8018304:	460f      	mov	r7, r1
 8018306:	4614      	mov	r4, r2
 8018308:	18d5      	adds	r5, r2, r3
 801830a:	42ac      	cmp	r4, r5
 801830c:	d101      	bne.n	8018312 <__sfputs_r+0x12>
 801830e:	2000      	movs	r0, #0
 8018310:	e007      	b.n	8018322 <__sfputs_r+0x22>
 8018312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018316:	463a      	mov	r2, r7
 8018318:	4630      	mov	r0, r6
 801831a:	f7ff ffda 	bl	80182d2 <__sfputc_r>
 801831e:	1c43      	adds	r3, r0, #1
 8018320:	d1f3      	bne.n	801830a <__sfputs_r+0xa>
 8018322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018324 <_vfiprintf_r>:
 8018324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018328:	460d      	mov	r5, r1
 801832a:	b09d      	sub	sp, #116	@ 0x74
 801832c:	4614      	mov	r4, r2
 801832e:	4698      	mov	r8, r3
 8018330:	4606      	mov	r6, r0
 8018332:	b118      	cbz	r0, 801833c <_vfiprintf_r+0x18>
 8018334:	6a03      	ldr	r3, [r0, #32]
 8018336:	b90b      	cbnz	r3, 801833c <_vfiprintf_r+0x18>
 8018338:	f7fc fc46 	bl	8014bc8 <__sinit>
 801833c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801833e:	07d9      	lsls	r1, r3, #31
 8018340:	d405      	bmi.n	801834e <_vfiprintf_r+0x2a>
 8018342:	89ab      	ldrh	r3, [r5, #12]
 8018344:	059a      	lsls	r2, r3, #22
 8018346:	d402      	bmi.n	801834e <_vfiprintf_r+0x2a>
 8018348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801834a:	f7fc fe7e 	bl	801504a <__retarget_lock_acquire_recursive>
 801834e:	89ab      	ldrh	r3, [r5, #12]
 8018350:	071b      	lsls	r3, r3, #28
 8018352:	d501      	bpl.n	8018358 <_vfiprintf_r+0x34>
 8018354:	692b      	ldr	r3, [r5, #16]
 8018356:	b99b      	cbnz	r3, 8018380 <_vfiprintf_r+0x5c>
 8018358:	4629      	mov	r1, r5
 801835a:	4630      	mov	r0, r6
 801835c:	f7fc fda2 	bl	8014ea4 <__swsetup_r>
 8018360:	b170      	cbz	r0, 8018380 <_vfiprintf_r+0x5c>
 8018362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018364:	07dc      	lsls	r4, r3, #31
 8018366:	d504      	bpl.n	8018372 <_vfiprintf_r+0x4e>
 8018368:	f04f 30ff 	mov.w	r0, #4294967295
 801836c:	b01d      	add	sp, #116	@ 0x74
 801836e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018372:	89ab      	ldrh	r3, [r5, #12]
 8018374:	0598      	lsls	r0, r3, #22
 8018376:	d4f7      	bmi.n	8018368 <_vfiprintf_r+0x44>
 8018378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801837a:	f7fc fe67 	bl	801504c <__retarget_lock_release_recursive>
 801837e:	e7f3      	b.n	8018368 <_vfiprintf_r+0x44>
 8018380:	2300      	movs	r3, #0
 8018382:	9309      	str	r3, [sp, #36]	@ 0x24
 8018384:	2320      	movs	r3, #32
 8018386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801838a:	f8cd 800c 	str.w	r8, [sp, #12]
 801838e:	2330      	movs	r3, #48	@ 0x30
 8018390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018540 <_vfiprintf_r+0x21c>
 8018394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018398:	f04f 0901 	mov.w	r9, #1
 801839c:	4623      	mov	r3, r4
 801839e:	469a      	mov	sl, r3
 80183a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80183a4:	b10a      	cbz	r2, 80183aa <_vfiprintf_r+0x86>
 80183a6:	2a25      	cmp	r2, #37	@ 0x25
 80183a8:	d1f9      	bne.n	801839e <_vfiprintf_r+0x7a>
 80183aa:	ebba 0b04 	subs.w	fp, sl, r4
 80183ae:	d00b      	beq.n	80183c8 <_vfiprintf_r+0xa4>
 80183b0:	465b      	mov	r3, fp
 80183b2:	4622      	mov	r2, r4
 80183b4:	4629      	mov	r1, r5
 80183b6:	4630      	mov	r0, r6
 80183b8:	f7ff ffa2 	bl	8018300 <__sfputs_r>
 80183bc:	3001      	adds	r0, #1
 80183be:	f000 80a7 	beq.w	8018510 <_vfiprintf_r+0x1ec>
 80183c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80183c4:	445a      	add	r2, fp
 80183c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80183c8:	f89a 3000 	ldrb.w	r3, [sl]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	f000 809f 	beq.w	8018510 <_vfiprintf_r+0x1ec>
 80183d2:	2300      	movs	r3, #0
 80183d4:	f04f 32ff 	mov.w	r2, #4294967295
 80183d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80183dc:	f10a 0a01 	add.w	sl, sl, #1
 80183e0:	9304      	str	r3, [sp, #16]
 80183e2:	9307      	str	r3, [sp, #28]
 80183e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80183e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80183ea:	4654      	mov	r4, sl
 80183ec:	2205      	movs	r2, #5
 80183ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183f2:	4853      	ldr	r0, [pc, #332]	@ (8018540 <_vfiprintf_r+0x21c>)
 80183f4:	f7e7 ff14 	bl	8000220 <memchr>
 80183f8:	9a04      	ldr	r2, [sp, #16]
 80183fa:	b9d8      	cbnz	r0, 8018434 <_vfiprintf_r+0x110>
 80183fc:	06d1      	lsls	r1, r2, #27
 80183fe:	bf44      	itt	mi
 8018400:	2320      	movmi	r3, #32
 8018402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018406:	0713      	lsls	r3, r2, #28
 8018408:	bf44      	itt	mi
 801840a:	232b      	movmi	r3, #43	@ 0x2b
 801840c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018410:	f89a 3000 	ldrb.w	r3, [sl]
 8018414:	2b2a      	cmp	r3, #42	@ 0x2a
 8018416:	d015      	beq.n	8018444 <_vfiprintf_r+0x120>
 8018418:	9a07      	ldr	r2, [sp, #28]
 801841a:	4654      	mov	r4, sl
 801841c:	2000      	movs	r0, #0
 801841e:	f04f 0c0a 	mov.w	ip, #10
 8018422:	4621      	mov	r1, r4
 8018424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018428:	3b30      	subs	r3, #48	@ 0x30
 801842a:	2b09      	cmp	r3, #9
 801842c:	d94b      	bls.n	80184c6 <_vfiprintf_r+0x1a2>
 801842e:	b1b0      	cbz	r0, 801845e <_vfiprintf_r+0x13a>
 8018430:	9207      	str	r2, [sp, #28]
 8018432:	e014      	b.n	801845e <_vfiprintf_r+0x13a>
 8018434:	eba0 0308 	sub.w	r3, r0, r8
 8018438:	fa09 f303 	lsl.w	r3, r9, r3
 801843c:	4313      	orrs	r3, r2
 801843e:	9304      	str	r3, [sp, #16]
 8018440:	46a2      	mov	sl, r4
 8018442:	e7d2      	b.n	80183ea <_vfiprintf_r+0xc6>
 8018444:	9b03      	ldr	r3, [sp, #12]
 8018446:	1d19      	adds	r1, r3, #4
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	9103      	str	r1, [sp, #12]
 801844c:	2b00      	cmp	r3, #0
 801844e:	bfbb      	ittet	lt
 8018450:	425b      	neglt	r3, r3
 8018452:	f042 0202 	orrlt.w	r2, r2, #2
 8018456:	9307      	strge	r3, [sp, #28]
 8018458:	9307      	strlt	r3, [sp, #28]
 801845a:	bfb8      	it	lt
 801845c:	9204      	strlt	r2, [sp, #16]
 801845e:	7823      	ldrb	r3, [r4, #0]
 8018460:	2b2e      	cmp	r3, #46	@ 0x2e
 8018462:	d10a      	bne.n	801847a <_vfiprintf_r+0x156>
 8018464:	7863      	ldrb	r3, [r4, #1]
 8018466:	2b2a      	cmp	r3, #42	@ 0x2a
 8018468:	d132      	bne.n	80184d0 <_vfiprintf_r+0x1ac>
 801846a:	9b03      	ldr	r3, [sp, #12]
 801846c:	1d1a      	adds	r2, r3, #4
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	9203      	str	r2, [sp, #12]
 8018472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018476:	3402      	adds	r4, #2
 8018478:	9305      	str	r3, [sp, #20]
 801847a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018550 <_vfiprintf_r+0x22c>
 801847e:	7821      	ldrb	r1, [r4, #0]
 8018480:	2203      	movs	r2, #3
 8018482:	4650      	mov	r0, sl
 8018484:	f7e7 fecc 	bl	8000220 <memchr>
 8018488:	b138      	cbz	r0, 801849a <_vfiprintf_r+0x176>
 801848a:	9b04      	ldr	r3, [sp, #16]
 801848c:	eba0 000a 	sub.w	r0, r0, sl
 8018490:	2240      	movs	r2, #64	@ 0x40
 8018492:	4082      	lsls	r2, r0
 8018494:	4313      	orrs	r3, r2
 8018496:	3401      	adds	r4, #1
 8018498:	9304      	str	r3, [sp, #16]
 801849a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801849e:	4829      	ldr	r0, [pc, #164]	@ (8018544 <_vfiprintf_r+0x220>)
 80184a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80184a4:	2206      	movs	r2, #6
 80184a6:	f7e7 febb 	bl	8000220 <memchr>
 80184aa:	2800      	cmp	r0, #0
 80184ac:	d03f      	beq.n	801852e <_vfiprintf_r+0x20a>
 80184ae:	4b26      	ldr	r3, [pc, #152]	@ (8018548 <_vfiprintf_r+0x224>)
 80184b0:	bb1b      	cbnz	r3, 80184fa <_vfiprintf_r+0x1d6>
 80184b2:	9b03      	ldr	r3, [sp, #12]
 80184b4:	3307      	adds	r3, #7
 80184b6:	f023 0307 	bic.w	r3, r3, #7
 80184ba:	3308      	adds	r3, #8
 80184bc:	9303      	str	r3, [sp, #12]
 80184be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80184c0:	443b      	add	r3, r7
 80184c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80184c4:	e76a      	b.n	801839c <_vfiprintf_r+0x78>
 80184c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80184ca:	460c      	mov	r4, r1
 80184cc:	2001      	movs	r0, #1
 80184ce:	e7a8      	b.n	8018422 <_vfiprintf_r+0xfe>
 80184d0:	2300      	movs	r3, #0
 80184d2:	3401      	adds	r4, #1
 80184d4:	9305      	str	r3, [sp, #20]
 80184d6:	4619      	mov	r1, r3
 80184d8:	f04f 0c0a 	mov.w	ip, #10
 80184dc:	4620      	mov	r0, r4
 80184de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80184e2:	3a30      	subs	r2, #48	@ 0x30
 80184e4:	2a09      	cmp	r2, #9
 80184e6:	d903      	bls.n	80184f0 <_vfiprintf_r+0x1cc>
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d0c6      	beq.n	801847a <_vfiprintf_r+0x156>
 80184ec:	9105      	str	r1, [sp, #20]
 80184ee:	e7c4      	b.n	801847a <_vfiprintf_r+0x156>
 80184f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80184f4:	4604      	mov	r4, r0
 80184f6:	2301      	movs	r3, #1
 80184f8:	e7f0      	b.n	80184dc <_vfiprintf_r+0x1b8>
 80184fa:	ab03      	add	r3, sp, #12
 80184fc:	9300      	str	r3, [sp, #0]
 80184fe:	462a      	mov	r2, r5
 8018500:	4b12      	ldr	r3, [pc, #72]	@ (801854c <_vfiprintf_r+0x228>)
 8018502:	a904      	add	r1, sp, #16
 8018504:	4630      	mov	r0, r6
 8018506:	f7fb fd0f 	bl	8013f28 <_printf_float>
 801850a:	4607      	mov	r7, r0
 801850c:	1c78      	adds	r0, r7, #1
 801850e:	d1d6      	bne.n	80184be <_vfiprintf_r+0x19a>
 8018510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018512:	07d9      	lsls	r1, r3, #31
 8018514:	d405      	bmi.n	8018522 <_vfiprintf_r+0x1fe>
 8018516:	89ab      	ldrh	r3, [r5, #12]
 8018518:	059a      	lsls	r2, r3, #22
 801851a:	d402      	bmi.n	8018522 <_vfiprintf_r+0x1fe>
 801851c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801851e:	f7fc fd95 	bl	801504c <__retarget_lock_release_recursive>
 8018522:	89ab      	ldrh	r3, [r5, #12]
 8018524:	065b      	lsls	r3, r3, #25
 8018526:	f53f af1f 	bmi.w	8018368 <_vfiprintf_r+0x44>
 801852a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801852c:	e71e      	b.n	801836c <_vfiprintf_r+0x48>
 801852e:	ab03      	add	r3, sp, #12
 8018530:	9300      	str	r3, [sp, #0]
 8018532:	462a      	mov	r2, r5
 8018534:	4b05      	ldr	r3, [pc, #20]	@ (801854c <_vfiprintf_r+0x228>)
 8018536:	a904      	add	r1, sp, #16
 8018538:	4630      	mov	r0, r6
 801853a:	f7fb ff8d 	bl	8014458 <_printf_i>
 801853e:	e7e4      	b.n	801850a <_vfiprintf_r+0x1e6>
 8018540:	0801bc89 	.word	0x0801bc89
 8018544:	0801bc93 	.word	0x0801bc93
 8018548:	08013f29 	.word	0x08013f29
 801854c:	08018301 	.word	0x08018301
 8018550:	0801bc8f 	.word	0x0801bc8f

08018554 <_raise_r>:
 8018554:	291f      	cmp	r1, #31
 8018556:	b538      	push	{r3, r4, r5, lr}
 8018558:	4605      	mov	r5, r0
 801855a:	460c      	mov	r4, r1
 801855c:	d904      	bls.n	8018568 <_raise_r+0x14>
 801855e:	2316      	movs	r3, #22
 8018560:	6003      	str	r3, [r0, #0]
 8018562:	f04f 30ff 	mov.w	r0, #4294967295
 8018566:	bd38      	pop	{r3, r4, r5, pc}
 8018568:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801856a:	b112      	cbz	r2, 8018572 <_raise_r+0x1e>
 801856c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018570:	b94b      	cbnz	r3, 8018586 <_raise_r+0x32>
 8018572:	4628      	mov	r0, r5
 8018574:	f000 f830 	bl	80185d8 <_getpid_r>
 8018578:	4622      	mov	r2, r4
 801857a:	4601      	mov	r1, r0
 801857c:	4628      	mov	r0, r5
 801857e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018582:	f000 b817 	b.w	80185b4 <_kill_r>
 8018586:	2b01      	cmp	r3, #1
 8018588:	d00a      	beq.n	80185a0 <_raise_r+0x4c>
 801858a:	1c59      	adds	r1, r3, #1
 801858c:	d103      	bne.n	8018596 <_raise_r+0x42>
 801858e:	2316      	movs	r3, #22
 8018590:	6003      	str	r3, [r0, #0]
 8018592:	2001      	movs	r0, #1
 8018594:	e7e7      	b.n	8018566 <_raise_r+0x12>
 8018596:	2100      	movs	r1, #0
 8018598:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801859c:	4620      	mov	r0, r4
 801859e:	4798      	blx	r3
 80185a0:	2000      	movs	r0, #0
 80185a2:	e7e0      	b.n	8018566 <_raise_r+0x12>

080185a4 <raise>:
 80185a4:	4b02      	ldr	r3, [pc, #8]	@ (80185b0 <raise+0xc>)
 80185a6:	4601      	mov	r1, r0
 80185a8:	6818      	ldr	r0, [r3, #0]
 80185aa:	f7ff bfd3 	b.w	8018554 <_raise_r>
 80185ae:	bf00      	nop
 80185b0:	20000054 	.word	0x20000054

080185b4 <_kill_r>:
 80185b4:	b538      	push	{r3, r4, r5, lr}
 80185b6:	4d07      	ldr	r5, [pc, #28]	@ (80185d4 <_kill_r+0x20>)
 80185b8:	2300      	movs	r3, #0
 80185ba:	4604      	mov	r4, r0
 80185bc:	4608      	mov	r0, r1
 80185be:	4611      	mov	r1, r2
 80185c0:	602b      	str	r3, [r5, #0]
 80185c2:	f7eb fb2f 	bl	8003c24 <_kill>
 80185c6:	1c43      	adds	r3, r0, #1
 80185c8:	d102      	bne.n	80185d0 <_kill_r+0x1c>
 80185ca:	682b      	ldr	r3, [r5, #0]
 80185cc:	b103      	cbz	r3, 80185d0 <_kill_r+0x1c>
 80185ce:	6023      	str	r3, [r4, #0]
 80185d0:	bd38      	pop	{r3, r4, r5, pc}
 80185d2:	bf00      	nop
 80185d4:	200040b8 	.word	0x200040b8

080185d8 <_getpid_r>:
 80185d8:	f7eb bb1c 	b.w	8003c14 <_getpid>
 80185dc:	0000      	movs	r0, r0
	...

080185e0 <log>:
 80185e0:	b538      	push	{r3, r4, r5, lr}
 80185e2:	ed2d 8b02 	vpush	{d8}
 80185e6:	ec55 4b10 	vmov	r4, r5, d0
 80185ea:	f000 f9b5 	bl	8018958 <__ieee754_log>
 80185ee:	4622      	mov	r2, r4
 80185f0:	462b      	mov	r3, r5
 80185f2:	4620      	mov	r0, r4
 80185f4:	4629      	mov	r1, r5
 80185f6:	eeb0 8a40 	vmov.f32	s16, s0
 80185fa:	eef0 8a60 	vmov.f32	s17, s1
 80185fe:	f7e8 fabd 	bl	8000b7c <__aeabi_dcmpun>
 8018602:	b998      	cbnz	r0, 801862c <log+0x4c>
 8018604:	2200      	movs	r2, #0
 8018606:	2300      	movs	r3, #0
 8018608:	4620      	mov	r0, r4
 801860a:	4629      	mov	r1, r5
 801860c:	f7e8 faac 	bl	8000b68 <__aeabi_dcmpgt>
 8018610:	b960      	cbnz	r0, 801862c <log+0x4c>
 8018612:	2200      	movs	r2, #0
 8018614:	2300      	movs	r3, #0
 8018616:	4620      	mov	r0, r4
 8018618:	4629      	mov	r1, r5
 801861a:	f7e8 fa7d 	bl	8000b18 <__aeabi_dcmpeq>
 801861e:	b160      	cbz	r0, 801863a <log+0x5a>
 8018620:	f7fc fce8 	bl	8014ff4 <__errno>
 8018624:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8018650 <log+0x70>
 8018628:	2322      	movs	r3, #34	@ 0x22
 801862a:	6003      	str	r3, [r0, #0]
 801862c:	eeb0 0a48 	vmov.f32	s0, s16
 8018630:	eef0 0a68 	vmov.f32	s1, s17
 8018634:	ecbd 8b02 	vpop	{d8}
 8018638:	bd38      	pop	{r3, r4, r5, pc}
 801863a:	f7fc fcdb 	bl	8014ff4 <__errno>
 801863e:	ecbd 8b02 	vpop	{d8}
 8018642:	2321      	movs	r3, #33	@ 0x21
 8018644:	6003      	str	r3, [r0, #0]
 8018646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801864a:	4803      	ldr	r0, [pc, #12]	@ (8018658 <log+0x78>)
 801864c:	f7ff ba60 	b.w	8017b10 <nan>
 8018650:	00000000 	.word	0x00000000
 8018654:	fff00000 	.word	0xfff00000
 8018658:	0801bcdd 	.word	0x0801bcdd

0801865c <acosf>:
 801865c:	b508      	push	{r3, lr}
 801865e:	ed2d 8b02 	vpush	{d8}
 8018662:	eeb0 8a40 	vmov.f32	s16, s0
 8018666:	f000 fbcd 	bl	8018e04 <__ieee754_acosf>
 801866a:	eeb4 8a48 	vcmp.f32	s16, s16
 801866e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018672:	eef0 8a40 	vmov.f32	s17, s0
 8018676:	d615      	bvs.n	80186a4 <acosf+0x48>
 8018678:	eeb0 0a48 	vmov.f32	s0, s16
 801867c:	f000 f8d4 	bl	8018828 <fabsf>
 8018680:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018684:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801868c:	dd0a      	ble.n	80186a4 <acosf+0x48>
 801868e:	f7fc fcb1 	bl	8014ff4 <__errno>
 8018692:	ecbd 8b02 	vpop	{d8}
 8018696:	2321      	movs	r3, #33	@ 0x21
 8018698:	6003      	str	r3, [r0, #0]
 801869a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801869e:	4804      	ldr	r0, [pc, #16]	@ (80186b0 <acosf+0x54>)
 80186a0:	f7fc bce4 	b.w	801506c <nanf>
 80186a4:	eeb0 0a68 	vmov.f32	s0, s17
 80186a8:	ecbd 8b02 	vpop	{d8}
 80186ac:	bd08      	pop	{r3, pc}
 80186ae:	bf00      	nop
 80186b0:	0801bcdd 	.word	0x0801bcdd

080186b4 <powf>:
 80186b4:	b508      	push	{r3, lr}
 80186b6:	ed2d 8b04 	vpush	{d8-d9}
 80186ba:	eeb0 8a60 	vmov.f32	s16, s1
 80186be:	eeb0 9a40 	vmov.f32	s18, s0
 80186c2:	f000 fc95 	bl	8018ff0 <__ieee754_powf>
 80186c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80186ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ce:	eef0 8a40 	vmov.f32	s17, s0
 80186d2:	d63e      	bvs.n	8018752 <powf+0x9e>
 80186d4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80186d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186dc:	d112      	bne.n	8018704 <powf+0x50>
 80186de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80186e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e6:	d039      	beq.n	801875c <powf+0xa8>
 80186e8:	eeb0 0a48 	vmov.f32	s0, s16
 80186ec:	f000 f8ea 	bl	80188c4 <finitef>
 80186f0:	b378      	cbz	r0, 8018752 <powf+0x9e>
 80186f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80186f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186fa:	d52a      	bpl.n	8018752 <powf+0x9e>
 80186fc:	f7fc fc7a 	bl	8014ff4 <__errno>
 8018700:	2322      	movs	r3, #34	@ 0x22
 8018702:	e014      	b.n	801872e <powf+0x7a>
 8018704:	f000 f8de 	bl	80188c4 <finitef>
 8018708:	b998      	cbnz	r0, 8018732 <powf+0x7e>
 801870a:	eeb0 0a49 	vmov.f32	s0, s18
 801870e:	f000 f8d9 	bl	80188c4 <finitef>
 8018712:	b170      	cbz	r0, 8018732 <powf+0x7e>
 8018714:	eeb0 0a48 	vmov.f32	s0, s16
 8018718:	f000 f8d4 	bl	80188c4 <finitef>
 801871c:	b148      	cbz	r0, 8018732 <powf+0x7e>
 801871e:	eef4 8a68 	vcmp.f32	s17, s17
 8018722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018726:	d7e9      	bvc.n	80186fc <powf+0x48>
 8018728:	f7fc fc64 	bl	8014ff4 <__errno>
 801872c:	2321      	movs	r3, #33	@ 0x21
 801872e:	6003      	str	r3, [r0, #0]
 8018730:	e00f      	b.n	8018752 <powf+0x9e>
 8018732:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801873a:	d10a      	bne.n	8018752 <powf+0x9e>
 801873c:	eeb0 0a49 	vmov.f32	s0, s18
 8018740:	f000 f8c0 	bl	80188c4 <finitef>
 8018744:	b128      	cbz	r0, 8018752 <powf+0x9e>
 8018746:	eeb0 0a48 	vmov.f32	s0, s16
 801874a:	f000 f8bb 	bl	80188c4 <finitef>
 801874e:	2800      	cmp	r0, #0
 8018750:	d1d4      	bne.n	80186fc <powf+0x48>
 8018752:	eeb0 0a68 	vmov.f32	s0, s17
 8018756:	ecbd 8b04 	vpop	{d8-d9}
 801875a:	bd08      	pop	{r3, pc}
 801875c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8018760:	e7f7      	b.n	8018752 <powf+0x9e>
	...

08018764 <sqrtf>:
 8018764:	b508      	push	{r3, lr}
 8018766:	ed2d 8b02 	vpush	{d8}
 801876a:	eeb0 8a40 	vmov.f32	s16, s0
 801876e:	f000 f8ed 	bl	801894c <__ieee754_sqrtf>
 8018772:	eeb4 8a48 	vcmp.f32	s16, s16
 8018776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801877a:	d60c      	bvs.n	8018796 <sqrtf+0x32>
 801877c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801879c <sqrtf+0x38>
 8018780:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018788:	d505      	bpl.n	8018796 <sqrtf+0x32>
 801878a:	f7fc fc33 	bl	8014ff4 <__errno>
 801878e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018792:	2321      	movs	r3, #33	@ 0x21
 8018794:	6003      	str	r3, [r0, #0]
 8018796:	ecbd 8b02 	vpop	{d8}
 801879a:	bd08      	pop	{r3, pc}
 801879c:	00000000 	.word	0x00000000

080187a0 <cosf>:
 80187a0:	ee10 3a10 	vmov	r3, s0
 80187a4:	b507      	push	{r0, r1, r2, lr}
 80187a6:	4a1e      	ldr	r2, [pc, #120]	@ (8018820 <cosf+0x80>)
 80187a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80187ac:	4293      	cmp	r3, r2
 80187ae:	d806      	bhi.n	80187be <cosf+0x1e>
 80187b0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8018824 <cosf+0x84>
 80187b4:	b003      	add	sp, #12
 80187b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80187ba:	f000 ba83 	b.w	8018cc4 <__kernel_cosf>
 80187be:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80187c2:	d304      	bcc.n	80187ce <cosf+0x2e>
 80187c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80187c8:	b003      	add	sp, #12
 80187ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80187ce:	4668      	mov	r0, sp
 80187d0:	f000 fedc 	bl	801958c <__ieee754_rem_pio2f>
 80187d4:	f000 0003 	and.w	r0, r0, #3
 80187d8:	2801      	cmp	r0, #1
 80187da:	d009      	beq.n	80187f0 <cosf+0x50>
 80187dc:	2802      	cmp	r0, #2
 80187de:	d010      	beq.n	8018802 <cosf+0x62>
 80187e0:	b9b0      	cbnz	r0, 8018810 <cosf+0x70>
 80187e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80187e6:	ed9d 0a00 	vldr	s0, [sp]
 80187ea:	f000 fa6b 	bl	8018cc4 <__kernel_cosf>
 80187ee:	e7eb      	b.n	80187c8 <cosf+0x28>
 80187f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80187f4:	ed9d 0a00 	vldr	s0, [sp]
 80187f8:	f000 fabc 	bl	8018d74 <__kernel_sinf>
 80187fc:	eeb1 0a40 	vneg.f32	s0, s0
 8018800:	e7e2      	b.n	80187c8 <cosf+0x28>
 8018802:	eddd 0a01 	vldr	s1, [sp, #4]
 8018806:	ed9d 0a00 	vldr	s0, [sp]
 801880a:	f000 fa5b 	bl	8018cc4 <__kernel_cosf>
 801880e:	e7f5      	b.n	80187fc <cosf+0x5c>
 8018810:	eddd 0a01 	vldr	s1, [sp, #4]
 8018814:	ed9d 0a00 	vldr	s0, [sp]
 8018818:	2001      	movs	r0, #1
 801881a:	f000 faab 	bl	8018d74 <__kernel_sinf>
 801881e:	e7d3      	b.n	80187c8 <cosf+0x28>
 8018820:	3f490fd8 	.word	0x3f490fd8
 8018824:	00000000 	.word	0x00000000

08018828 <fabsf>:
 8018828:	ee10 3a10 	vmov	r3, s0
 801882c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018830:	ee00 3a10 	vmov	s0, r3
 8018834:	4770      	bx	lr
	...

08018838 <sinf>:
 8018838:	ee10 3a10 	vmov	r3, s0
 801883c:	b507      	push	{r0, r1, r2, lr}
 801883e:	4a1f      	ldr	r2, [pc, #124]	@ (80188bc <sinf+0x84>)
 8018840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018844:	4293      	cmp	r3, r2
 8018846:	d807      	bhi.n	8018858 <sinf+0x20>
 8018848:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80188c0 <sinf+0x88>
 801884c:	2000      	movs	r0, #0
 801884e:	b003      	add	sp, #12
 8018850:	f85d eb04 	ldr.w	lr, [sp], #4
 8018854:	f000 ba8e 	b.w	8018d74 <__kernel_sinf>
 8018858:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801885c:	d304      	bcc.n	8018868 <sinf+0x30>
 801885e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018862:	b003      	add	sp, #12
 8018864:	f85d fb04 	ldr.w	pc, [sp], #4
 8018868:	4668      	mov	r0, sp
 801886a:	f000 fe8f 	bl	801958c <__ieee754_rem_pio2f>
 801886e:	f000 0003 	and.w	r0, r0, #3
 8018872:	2801      	cmp	r0, #1
 8018874:	d00a      	beq.n	801888c <sinf+0x54>
 8018876:	2802      	cmp	r0, #2
 8018878:	d00f      	beq.n	801889a <sinf+0x62>
 801887a:	b9c0      	cbnz	r0, 80188ae <sinf+0x76>
 801887c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018880:	ed9d 0a00 	vldr	s0, [sp]
 8018884:	2001      	movs	r0, #1
 8018886:	f000 fa75 	bl	8018d74 <__kernel_sinf>
 801888a:	e7ea      	b.n	8018862 <sinf+0x2a>
 801888c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018890:	ed9d 0a00 	vldr	s0, [sp]
 8018894:	f000 fa16 	bl	8018cc4 <__kernel_cosf>
 8018898:	e7e3      	b.n	8018862 <sinf+0x2a>
 801889a:	eddd 0a01 	vldr	s1, [sp, #4]
 801889e:	ed9d 0a00 	vldr	s0, [sp]
 80188a2:	2001      	movs	r0, #1
 80188a4:	f000 fa66 	bl	8018d74 <__kernel_sinf>
 80188a8:	eeb1 0a40 	vneg.f32	s0, s0
 80188ac:	e7d9      	b.n	8018862 <sinf+0x2a>
 80188ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80188b2:	ed9d 0a00 	vldr	s0, [sp]
 80188b6:	f000 fa05 	bl	8018cc4 <__kernel_cosf>
 80188ba:	e7f5      	b.n	80188a8 <sinf+0x70>
 80188bc:	3f490fd8 	.word	0x3f490fd8
 80188c0:	00000000 	.word	0x00000000

080188c4 <finitef>:
 80188c4:	ee10 3a10 	vmov	r3, s0
 80188c8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80188cc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80188d0:	bfac      	ite	ge
 80188d2:	2000      	movge	r0, #0
 80188d4:	2001      	movlt	r0, #1
 80188d6:	4770      	bx	lr

080188d8 <fminf>:
 80188d8:	b508      	push	{r3, lr}
 80188da:	ed2d 8b02 	vpush	{d8}
 80188de:	eeb0 8a40 	vmov.f32	s16, s0
 80188e2:	eef0 8a60 	vmov.f32	s17, s1
 80188e6:	f000 f815 	bl	8018914 <__fpclassifyf>
 80188ea:	b930      	cbnz	r0, 80188fa <fminf+0x22>
 80188ec:	eeb0 8a68 	vmov.f32	s16, s17
 80188f0:	eeb0 0a48 	vmov.f32	s0, s16
 80188f4:	ecbd 8b02 	vpop	{d8}
 80188f8:	bd08      	pop	{r3, pc}
 80188fa:	eeb0 0a68 	vmov.f32	s0, s17
 80188fe:	f000 f809 	bl	8018914 <__fpclassifyf>
 8018902:	2800      	cmp	r0, #0
 8018904:	d0f4      	beq.n	80188f0 <fminf+0x18>
 8018906:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890e:	d5ed      	bpl.n	80188ec <fminf+0x14>
 8018910:	e7ee      	b.n	80188f0 <fminf+0x18>
	...

08018914 <__fpclassifyf>:
 8018914:	ee10 3a10 	vmov	r3, s0
 8018918:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801891c:	d00d      	beq.n	801893a <__fpclassifyf+0x26>
 801891e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8018922:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8018926:	d30a      	bcc.n	801893e <__fpclassifyf+0x2a>
 8018928:	4b07      	ldr	r3, [pc, #28]	@ (8018948 <__fpclassifyf+0x34>)
 801892a:	1e42      	subs	r2, r0, #1
 801892c:	429a      	cmp	r2, r3
 801892e:	d908      	bls.n	8018942 <__fpclassifyf+0x2e>
 8018930:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8018934:	4258      	negs	r0, r3
 8018936:	4158      	adcs	r0, r3
 8018938:	4770      	bx	lr
 801893a:	2002      	movs	r0, #2
 801893c:	4770      	bx	lr
 801893e:	2004      	movs	r0, #4
 8018940:	4770      	bx	lr
 8018942:	2003      	movs	r0, #3
 8018944:	4770      	bx	lr
 8018946:	bf00      	nop
 8018948:	007ffffe 	.word	0x007ffffe

0801894c <__ieee754_sqrtf>:
 801894c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018950:	4770      	bx	lr
 8018952:	0000      	movs	r0, r0
 8018954:	0000      	movs	r0, r0
	...

08018958 <__ieee754_log>:
 8018958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801895c:	ec51 0b10 	vmov	r0, r1, d0
 8018960:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8018964:	b087      	sub	sp, #28
 8018966:	460d      	mov	r5, r1
 8018968:	da26      	bge.n	80189b8 <__ieee754_log+0x60>
 801896a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801896e:	4303      	orrs	r3, r0
 8018970:	4602      	mov	r2, r0
 8018972:	d10a      	bne.n	801898a <__ieee754_log+0x32>
 8018974:	49ce      	ldr	r1, [pc, #824]	@ (8018cb0 <__ieee754_log+0x358>)
 8018976:	2200      	movs	r2, #0
 8018978:	2300      	movs	r3, #0
 801897a:	2000      	movs	r0, #0
 801897c:	f7e7 ff8e 	bl	800089c <__aeabi_ddiv>
 8018980:	ec41 0b10 	vmov	d0, r0, r1
 8018984:	b007      	add	sp, #28
 8018986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801898a:	2900      	cmp	r1, #0
 801898c:	da05      	bge.n	801899a <__ieee754_log+0x42>
 801898e:	460b      	mov	r3, r1
 8018990:	f7e7 fca2 	bl	80002d8 <__aeabi_dsub>
 8018994:	2200      	movs	r2, #0
 8018996:	2300      	movs	r3, #0
 8018998:	e7f0      	b.n	801897c <__ieee754_log+0x24>
 801899a:	4bc6      	ldr	r3, [pc, #792]	@ (8018cb4 <__ieee754_log+0x35c>)
 801899c:	2200      	movs	r2, #0
 801899e:	f7e7 fe53 	bl	8000648 <__aeabi_dmul>
 80189a2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80189a6:	460d      	mov	r5, r1
 80189a8:	4ac3      	ldr	r2, [pc, #780]	@ (8018cb8 <__ieee754_log+0x360>)
 80189aa:	4295      	cmp	r5, r2
 80189ac:	dd06      	ble.n	80189bc <__ieee754_log+0x64>
 80189ae:	4602      	mov	r2, r0
 80189b0:	460b      	mov	r3, r1
 80189b2:	f7e7 fc93 	bl	80002dc <__adddf3>
 80189b6:	e7e3      	b.n	8018980 <__ieee754_log+0x28>
 80189b8:	2300      	movs	r3, #0
 80189ba:	e7f5      	b.n	80189a8 <__ieee754_log+0x50>
 80189bc:	152c      	asrs	r4, r5, #20
 80189be:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80189c2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80189c6:	441c      	add	r4, r3
 80189c8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80189cc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80189d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80189d4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80189d8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80189dc:	ea42 0105 	orr.w	r1, r2, r5
 80189e0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80189e4:	2200      	movs	r2, #0
 80189e6:	4bb5      	ldr	r3, [pc, #724]	@ (8018cbc <__ieee754_log+0x364>)
 80189e8:	f7e7 fc76 	bl	80002d8 <__aeabi_dsub>
 80189ec:	1cab      	adds	r3, r5, #2
 80189ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80189f2:	2b02      	cmp	r3, #2
 80189f4:	4682      	mov	sl, r0
 80189f6:	468b      	mov	fp, r1
 80189f8:	f04f 0200 	mov.w	r2, #0
 80189fc:	dc53      	bgt.n	8018aa6 <__ieee754_log+0x14e>
 80189fe:	2300      	movs	r3, #0
 8018a00:	f7e8 f88a 	bl	8000b18 <__aeabi_dcmpeq>
 8018a04:	b1d0      	cbz	r0, 8018a3c <__ieee754_log+0xe4>
 8018a06:	2c00      	cmp	r4, #0
 8018a08:	f000 8120 	beq.w	8018c4c <__ieee754_log+0x2f4>
 8018a0c:	4620      	mov	r0, r4
 8018a0e:	f7e7 fdb1 	bl	8000574 <__aeabi_i2d>
 8018a12:	a391      	add	r3, pc, #580	@ (adr r3, 8018c58 <__ieee754_log+0x300>)
 8018a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a18:	4606      	mov	r6, r0
 8018a1a:	460f      	mov	r7, r1
 8018a1c:	f7e7 fe14 	bl	8000648 <__aeabi_dmul>
 8018a20:	a38f      	add	r3, pc, #572	@ (adr r3, 8018c60 <__ieee754_log+0x308>)
 8018a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a26:	4604      	mov	r4, r0
 8018a28:	460d      	mov	r5, r1
 8018a2a:	4630      	mov	r0, r6
 8018a2c:	4639      	mov	r1, r7
 8018a2e:	f7e7 fe0b 	bl	8000648 <__aeabi_dmul>
 8018a32:	4602      	mov	r2, r0
 8018a34:	460b      	mov	r3, r1
 8018a36:	4620      	mov	r0, r4
 8018a38:	4629      	mov	r1, r5
 8018a3a:	e7ba      	b.n	80189b2 <__ieee754_log+0x5a>
 8018a3c:	a38a      	add	r3, pc, #552	@ (adr r3, 8018c68 <__ieee754_log+0x310>)
 8018a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a42:	4650      	mov	r0, sl
 8018a44:	4659      	mov	r1, fp
 8018a46:	f7e7 fdff 	bl	8000648 <__aeabi_dmul>
 8018a4a:	4602      	mov	r2, r0
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	2000      	movs	r0, #0
 8018a50:	499b      	ldr	r1, [pc, #620]	@ (8018cc0 <__ieee754_log+0x368>)
 8018a52:	f7e7 fc41 	bl	80002d8 <__aeabi_dsub>
 8018a56:	4652      	mov	r2, sl
 8018a58:	4606      	mov	r6, r0
 8018a5a:	460f      	mov	r7, r1
 8018a5c:	465b      	mov	r3, fp
 8018a5e:	4650      	mov	r0, sl
 8018a60:	4659      	mov	r1, fp
 8018a62:	f7e7 fdf1 	bl	8000648 <__aeabi_dmul>
 8018a66:	4602      	mov	r2, r0
 8018a68:	460b      	mov	r3, r1
 8018a6a:	4630      	mov	r0, r6
 8018a6c:	4639      	mov	r1, r7
 8018a6e:	f7e7 fdeb 	bl	8000648 <__aeabi_dmul>
 8018a72:	4606      	mov	r6, r0
 8018a74:	460f      	mov	r7, r1
 8018a76:	b914      	cbnz	r4, 8018a7e <__ieee754_log+0x126>
 8018a78:	4632      	mov	r2, r6
 8018a7a:	463b      	mov	r3, r7
 8018a7c:	e0a0      	b.n	8018bc0 <__ieee754_log+0x268>
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f7e7 fd78 	bl	8000574 <__aeabi_i2d>
 8018a84:	a374      	add	r3, pc, #464	@ (adr r3, 8018c58 <__ieee754_log+0x300>)
 8018a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a8a:	4680      	mov	r8, r0
 8018a8c:	4689      	mov	r9, r1
 8018a8e:	f7e7 fddb 	bl	8000648 <__aeabi_dmul>
 8018a92:	a373      	add	r3, pc, #460	@ (adr r3, 8018c60 <__ieee754_log+0x308>)
 8018a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a98:	4604      	mov	r4, r0
 8018a9a:	460d      	mov	r5, r1
 8018a9c:	4640      	mov	r0, r8
 8018a9e:	4649      	mov	r1, r9
 8018aa0:	f7e7 fdd2 	bl	8000648 <__aeabi_dmul>
 8018aa4:	e0a5      	b.n	8018bf2 <__ieee754_log+0x29a>
 8018aa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018aaa:	f7e7 fc17 	bl	80002dc <__adddf3>
 8018aae:	4602      	mov	r2, r0
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	4650      	mov	r0, sl
 8018ab4:	4659      	mov	r1, fp
 8018ab6:	f7e7 fef1 	bl	800089c <__aeabi_ddiv>
 8018aba:	e9cd 0100 	strd	r0, r1, [sp]
 8018abe:	4620      	mov	r0, r4
 8018ac0:	f7e7 fd58 	bl	8000574 <__aeabi_i2d>
 8018ac4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018acc:	4610      	mov	r0, r2
 8018ace:	4619      	mov	r1, r3
 8018ad0:	f7e7 fdba 	bl	8000648 <__aeabi_dmul>
 8018ad4:	4602      	mov	r2, r0
 8018ad6:	460b      	mov	r3, r1
 8018ad8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018adc:	f7e7 fdb4 	bl	8000648 <__aeabi_dmul>
 8018ae0:	a363      	add	r3, pc, #396	@ (adr r3, 8018c70 <__ieee754_log+0x318>)
 8018ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ae6:	4680      	mov	r8, r0
 8018ae8:	4689      	mov	r9, r1
 8018aea:	f7e7 fdad 	bl	8000648 <__aeabi_dmul>
 8018aee:	a362      	add	r3, pc, #392	@ (adr r3, 8018c78 <__ieee754_log+0x320>)
 8018af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018af4:	f7e7 fbf2 	bl	80002dc <__adddf3>
 8018af8:	4642      	mov	r2, r8
 8018afa:	464b      	mov	r3, r9
 8018afc:	f7e7 fda4 	bl	8000648 <__aeabi_dmul>
 8018b00:	a35f      	add	r3, pc, #380	@ (adr r3, 8018c80 <__ieee754_log+0x328>)
 8018b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b06:	f7e7 fbe9 	bl	80002dc <__adddf3>
 8018b0a:	4642      	mov	r2, r8
 8018b0c:	464b      	mov	r3, r9
 8018b0e:	f7e7 fd9b 	bl	8000648 <__aeabi_dmul>
 8018b12:	a35d      	add	r3, pc, #372	@ (adr r3, 8018c88 <__ieee754_log+0x330>)
 8018b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b18:	f7e7 fbe0 	bl	80002dc <__adddf3>
 8018b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018b20:	f7e7 fd92 	bl	8000648 <__aeabi_dmul>
 8018b24:	a35a      	add	r3, pc, #360	@ (adr r3, 8018c90 <__ieee754_log+0x338>)
 8018b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b2e:	4640      	mov	r0, r8
 8018b30:	4649      	mov	r1, r9
 8018b32:	f7e7 fd89 	bl	8000648 <__aeabi_dmul>
 8018b36:	a358      	add	r3, pc, #352	@ (adr r3, 8018c98 <__ieee754_log+0x340>)
 8018b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b3c:	f7e7 fbce 	bl	80002dc <__adddf3>
 8018b40:	4642      	mov	r2, r8
 8018b42:	464b      	mov	r3, r9
 8018b44:	f7e7 fd80 	bl	8000648 <__aeabi_dmul>
 8018b48:	a355      	add	r3, pc, #340	@ (adr r3, 8018ca0 <__ieee754_log+0x348>)
 8018b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b4e:	f7e7 fbc5 	bl	80002dc <__adddf3>
 8018b52:	4642      	mov	r2, r8
 8018b54:	464b      	mov	r3, r9
 8018b56:	f7e7 fd77 	bl	8000648 <__aeabi_dmul>
 8018b5a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8018b5e:	4602      	mov	r2, r0
 8018b60:	460b      	mov	r3, r1
 8018b62:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8018b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b6a:	f7e7 fbb7 	bl	80002dc <__adddf3>
 8018b6e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8018b72:	3551      	adds	r5, #81	@ 0x51
 8018b74:	4335      	orrs	r5, r6
 8018b76:	2d00      	cmp	r5, #0
 8018b78:	4680      	mov	r8, r0
 8018b7a:	4689      	mov	r9, r1
 8018b7c:	dd48      	ble.n	8018c10 <__ieee754_log+0x2b8>
 8018b7e:	4b50      	ldr	r3, [pc, #320]	@ (8018cc0 <__ieee754_log+0x368>)
 8018b80:	2200      	movs	r2, #0
 8018b82:	4650      	mov	r0, sl
 8018b84:	4659      	mov	r1, fp
 8018b86:	f7e7 fd5f 	bl	8000648 <__aeabi_dmul>
 8018b8a:	4652      	mov	r2, sl
 8018b8c:	465b      	mov	r3, fp
 8018b8e:	f7e7 fd5b 	bl	8000648 <__aeabi_dmul>
 8018b92:	4602      	mov	r2, r0
 8018b94:	460b      	mov	r3, r1
 8018b96:	4606      	mov	r6, r0
 8018b98:	460f      	mov	r7, r1
 8018b9a:	4640      	mov	r0, r8
 8018b9c:	4649      	mov	r1, r9
 8018b9e:	f7e7 fb9d 	bl	80002dc <__adddf3>
 8018ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ba6:	f7e7 fd4f 	bl	8000648 <__aeabi_dmul>
 8018baa:	4680      	mov	r8, r0
 8018bac:	4689      	mov	r9, r1
 8018bae:	b964      	cbnz	r4, 8018bca <__ieee754_log+0x272>
 8018bb0:	4602      	mov	r2, r0
 8018bb2:	460b      	mov	r3, r1
 8018bb4:	4630      	mov	r0, r6
 8018bb6:	4639      	mov	r1, r7
 8018bb8:	f7e7 fb8e 	bl	80002d8 <__aeabi_dsub>
 8018bbc:	4602      	mov	r2, r0
 8018bbe:	460b      	mov	r3, r1
 8018bc0:	4650      	mov	r0, sl
 8018bc2:	4659      	mov	r1, fp
 8018bc4:	f7e7 fb88 	bl	80002d8 <__aeabi_dsub>
 8018bc8:	e6da      	b.n	8018980 <__ieee754_log+0x28>
 8018bca:	a323      	add	r3, pc, #140	@ (adr r3, 8018c58 <__ieee754_log+0x300>)
 8018bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018bd4:	f7e7 fd38 	bl	8000648 <__aeabi_dmul>
 8018bd8:	a321      	add	r3, pc, #132	@ (adr r3, 8018c60 <__ieee754_log+0x308>)
 8018bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bde:	4604      	mov	r4, r0
 8018be0:	460d      	mov	r5, r1
 8018be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018be6:	f7e7 fd2f 	bl	8000648 <__aeabi_dmul>
 8018bea:	4642      	mov	r2, r8
 8018bec:	464b      	mov	r3, r9
 8018bee:	f7e7 fb75 	bl	80002dc <__adddf3>
 8018bf2:	4602      	mov	r2, r0
 8018bf4:	460b      	mov	r3, r1
 8018bf6:	4630      	mov	r0, r6
 8018bf8:	4639      	mov	r1, r7
 8018bfa:	f7e7 fb6d 	bl	80002d8 <__aeabi_dsub>
 8018bfe:	4652      	mov	r2, sl
 8018c00:	465b      	mov	r3, fp
 8018c02:	f7e7 fb69 	bl	80002d8 <__aeabi_dsub>
 8018c06:	4602      	mov	r2, r0
 8018c08:	460b      	mov	r3, r1
 8018c0a:	4620      	mov	r0, r4
 8018c0c:	4629      	mov	r1, r5
 8018c0e:	e7d9      	b.n	8018bc4 <__ieee754_log+0x26c>
 8018c10:	4602      	mov	r2, r0
 8018c12:	460b      	mov	r3, r1
 8018c14:	4650      	mov	r0, sl
 8018c16:	4659      	mov	r1, fp
 8018c18:	f7e7 fb5e 	bl	80002d8 <__aeabi_dsub>
 8018c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c20:	f7e7 fd12 	bl	8000648 <__aeabi_dmul>
 8018c24:	4606      	mov	r6, r0
 8018c26:	460f      	mov	r7, r1
 8018c28:	2c00      	cmp	r4, #0
 8018c2a:	f43f af25 	beq.w	8018a78 <__ieee754_log+0x120>
 8018c2e:	a30a      	add	r3, pc, #40	@ (adr r3, 8018c58 <__ieee754_log+0x300>)
 8018c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c38:	f7e7 fd06 	bl	8000648 <__aeabi_dmul>
 8018c3c:	a308      	add	r3, pc, #32	@ (adr r3, 8018c60 <__ieee754_log+0x308>)
 8018c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c42:	4604      	mov	r4, r0
 8018c44:	460d      	mov	r5, r1
 8018c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c4a:	e729      	b.n	8018aa0 <__ieee754_log+0x148>
 8018c4c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8018ca8 <__ieee754_log+0x350>
 8018c50:	e698      	b.n	8018984 <__ieee754_log+0x2c>
 8018c52:	bf00      	nop
 8018c54:	f3af 8000 	nop.w
 8018c58:	fee00000 	.word	0xfee00000
 8018c5c:	3fe62e42 	.word	0x3fe62e42
 8018c60:	35793c76 	.word	0x35793c76
 8018c64:	3dea39ef 	.word	0x3dea39ef
 8018c68:	55555555 	.word	0x55555555
 8018c6c:	3fd55555 	.word	0x3fd55555
 8018c70:	df3e5244 	.word	0xdf3e5244
 8018c74:	3fc2f112 	.word	0x3fc2f112
 8018c78:	96cb03de 	.word	0x96cb03de
 8018c7c:	3fc74664 	.word	0x3fc74664
 8018c80:	94229359 	.word	0x94229359
 8018c84:	3fd24924 	.word	0x3fd24924
 8018c88:	55555593 	.word	0x55555593
 8018c8c:	3fe55555 	.word	0x3fe55555
 8018c90:	d078c69f 	.word	0xd078c69f
 8018c94:	3fc39a09 	.word	0x3fc39a09
 8018c98:	1d8e78af 	.word	0x1d8e78af
 8018c9c:	3fcc71c5 	.word	0x3fcc71c5
 8018ca0:	9997fa04 	.word	0x9997fa04
 8018ca4:	3fd99999 	.word	0x3fd99999
	...
 8018cb0:	c3500000 	.word	0xc3500000
 8018cb4:	43500000 	.word	0x43500000
 8018cb8:	7fefffff 	.word	0x7fefffff
 8018cbc:	3ff00000 	.word	0x3ff00000
 8018cc0:	3fe00000 	.word	0x3fe00000

08018cc4 <__kernel_cosf>:
 8018cc4:	ee10 3a10 	vmov	r3, s0
 8018cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018ccc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018cd0:	eef0 6a40 	vmov.f32	s13, s0
 8018cd4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018cd8:	d204      	bcs.n	8018ce4 <__kernel_cosf+0x20>
 8018cda:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8018cde:	ee17 2a90 	vmov	r2, s15
 8018ce2:	b342      	cbz	r2, 8018d36 <__kernel_cosf+0x72>
 8018ce4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018ce8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8018d54 <__kernel_cosf+0x90>
 8018cec:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8018d58 <__kernel_cosf+0x94>
 8018cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8018d5c <__kernel_cosf+0x98>)
 8018cf2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018cf6:	4293      	cmp	r3, r2
 8018cf8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018d60 <__kernel_cosf+0x9c>
 8018cfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018d00:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8018d64 <__kernel_cosf+0xa0>
 8018d04:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018d08:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8018d68 <__kernel_cosf+0xa4>
 8018d0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018d10:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8018d6c <__kernel_cosf+0xa8>
 8018d14:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018d18:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8018d1c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018d20:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018d24:	eee7 0a06 	vfma.f32	s1, s14, s12
 8018d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018d2c:	d804      	bhi.n	8018d38 <__kernel_cosf+0x74>
 8018d2e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018d32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018d36:	4770      	bx	lr
 8018d38:	4a0d      	ldr	r2, [pc, #52]	@ (8018d70 <__kernel_cosf+0xac>)
 8018d3a:	4293      	cmp	r3, r2
 8018d3c:	bf9a      	itte	ls
 8018d3e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8018d42:	ee07 3a10 	vmovls	s14, r3
 8018d46:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8018d4a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018d52:	e7ec      	b.n	8018d2e <__kernel_cosf+0x6a>
 8018d54:	ad47d74e 	.word	0xad47d74e
 8018d58:	310f74f6 	.word	0x310f74f6
 8018d5c:	3e999999 	.word	0x3e999999
 8018d60:	b493f27c 	.word	0xb493f27c
 8018d64:	37d00d01 	.word	0x37d00d01
 8018d68:	bab60b61 	.word	0xbab60b61
 8018d6c:	3d2aaaab 	.word	0x3d2aaaab
 8018d70:	3f480000 	.word	0x3f480000

08018d74 <__kernel_sinf>:
 8018d74:	ee10 3a10 	vmov	r3, s0
 8018d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018d7c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018d80:	d204      	bcs.n	8018d8c <__kernel_sinf+0x18>
 8018d82:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018d86:	ee17 3a90 	vmov	r3, s15
 8018d8a:	b35b      	cbz	r3, 8018de4 <__kernel_sinf+0x70>
 8018d8c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018d90:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018de8 <__kernel_sinf+0x74>
 8018d94:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8018dec <__kernel_sinf+0x78>
 8018d98:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018d9c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8018df0 <__kernel_sinf+0x7c>
 8018da0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018da4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8018df4 <__kernel_sinf+0x80>
 8018da8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018dac:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8018df8 <__kernel_sinf+0x84>
 8018db0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8018db4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018db8:	b930      	cbnz	r0, 8018dc8 <__kernel_sinf+0x54>
 8018dba:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8018dfc <__kernel_sinf+0x88>
 8018dbe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018dc2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8018dc6:	4770      	bx	lr
 8018dc8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018dcc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018dd0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018dd4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018dd8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018e00 <__kernel_sinf+0x8c>
 8018ddc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018de0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018de4:	4770      	bx	lr
 8018de6:	bf00      	nop
 8018de8:	2f2ec9d3 	.word	0x2f2ec9d3
 8018dec:	b2d72f34 	.word	0xb2d72f34
 8018df0:	3638ef1b 	.word	0x3638ef1b
 8018df4:	b9500d01 	.word	0xb9500d01
 8018df8:	3c088889 	.word	0x3c088889
 8018dfc:	be2aaaab 	.word	0xbe2aaaab
 8018e00:	3e2aaaab 	.word	0x3e2aaaab

08018e04 <__ieee754_acosf>:
 8018e04:	b508      	push	{r3, lr}
 8018e06:	ee10 3a10 	vmov	r3, s0
 8018e0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018e0e:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8018e12:	ed2d 8b0c 	vpush	{d8-d13}
 8018e16:	d10a      	bne.n	8018e2e <__ieee754_acosf+0x2a>
 8018e18:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8018fac <__ieee754_acosf+0x1a8>
 8018e1c:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8018fb0 <__ieee754_acosf+0x1ac>
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	bfc8      	it	gt
 8018e24:	eeb0 0a67 	vmovgt.f32	s0, s15
 8018e28:	ecbd 8b0c 	vpop	{d8-d13}
 8018e2c:	bd08      	pop	{r3, pc}
 8018e2e:	d904      	bls.n	8018e3a <__ieee754_acosf+0x36>
 8018e30:	ee30 8a40 	vsub.f32	s16, s0, s0
 8018e34:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018e38:	e7f6      	b.n	8018e28 <__ieee754_acosf+0x24>
 8018e3a:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8018e3e:	d23c      	bcs.n	8018eba <__ieee754_acosf+0xb6>
 8018e40:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8018e44:	f240 80af 	bls.w	8018fa6 <__ieee754_acosf+0x1a2>
 8018e48:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018e4c:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8018fb4 <__ieee754_acosf+0x1b0>
 8018e50:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018fb8 <__ieee754_acosf+0x1b4>
 8018e54:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8018fbc <__ieee754_acosf+0x1b8>
 8018e58:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018e5c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8018fc0 <__ieee754_acosf+0x1bc>
 8018e60:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018e64:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8018fc4 <__ieee754_acosf+0x1c0>
 8018e68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018e6c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8018fc8 <__ieee754_acosf+0x1c4>
 8018e70:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018e74:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018fcc <__ieee754_acosf+0x1c8>
 8018e78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018e7c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8018fd0 <__ieee754_acosf+0x1cc>
 8018e80:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8018e84:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8018fd4 <__ieee754_acosf+0x1d0>
 8018e88:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018e8c:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8018fd8 <__ieee754_acosf+0x1d4>
 8018e90:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8018e94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018e98:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ea0:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8018fdc <__ieee754_acosf+0x1d8>
 8018ea4:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8018ea8:	eee0 7a46 	vfms.f32	s15, s0, s12
 8018eac:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018eb0:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8018fe0 <__ieee754_acosf+0x1dc>
 8018eb4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018eb8:	e7b6      	b.n	8018e28 <__ieee754_acosf+0x24>
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	eddf da3d 	vldr	s27, [pc, #244]	@ 8018fb4 <__ieee754_acosf+0x1b0>
 8018ec0:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8018fb8 <__ieee754_acosf+0x1b4>
 8018ec4:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8018fc0 <__ieee754_acosf+0x1bc>
 8018ec8:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8018fc4 <__ieee754_acosf+0x1c0>
 8018ecc:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8018fc8 <__ieee754_acosf+0x1c4>
 8018ed0:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8018fcc <__ieee754_acosf+0x1c8>
 8018ed4:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8018fd0 <__ieee754_acosf+0x1cc>
 8018ed8:	eddf aa38 	vldr	s21, [pc, #224]	@ 8018fbc <__ieee754_acosf+0x1b8>
 8018edc:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8018fd4 <__ieee754_acosf+0x1d0>
 8018ee0:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8018fd8 <__ieee754_acosf+0x1d4>
 8018ee4:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8018ee8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018eec:	da28      	bge.n	8018f40 <__ieee754_acosf+0x13c>
 8018eee:	ee30 8a09 	vadd.f32	s16, s0, s18
 8018ef2:	ee28 0a27 	vmul.f32	s0, s16, s15
 8018ef6:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8018efa:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8018efe:	eeac ca80 	vfma.f32	s24, s25, s0
 8018f02:	eeaa aa80 	vfma.f32	s20, s21, s0
 8018f06:	eeec ba00 	vfma.f32	s23, s24, s0
 8018f0a:	eeea 9a00 	vfma.f32	s19, s20, s0
 8018f0e:	eeab ba80 	vfma.f32	s22, s23, s0
 8018f12:	eea9 9a80 	vfma.f32	s18, s19, s0
 8018f16:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8018f1a:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018f1e:	f7ff fd15 	bl	801894c <__ieee754_sqrtf>
 8018f22:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8018f26:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8018fe4 <__ieee754_acosf+0x1e0>
 8018f2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018f2e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8018f32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018f36:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8018fe8 <__ieee754_acosf+0x1e4>
 8018f3a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018f3e:	e773      	b.n	8018e28 <__ieee754_acosf+0x24>
 8018f40:	ee39 8a40 	vsub.f32	s16, s18, s0
 8018f44:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018f48:	eeb0 0a48 	vmov.f32	s0, s16
 8018f4c:	f7ff fcfe 	bl	801894c <__ieee754_sqrtf>
 8018f50:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8018f54:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8018f58:	eeac ca88 	vfma.f32	s24, s25, s16
 8018f5c:	eeaa aa88 	vfma.f32	s20, s21, s16
 8018f60:	eeec ba08 	vfma.f32	s23, s24, s16
 8018f64:	ee10 3a10 	vmov	r3, s0
 8018f68:	eeab ba88 	vfma.f32	s22, s23, s16
 8018f6c:	f36f 030b 	bfc	r3, #0, #12
 8018f70:	eeea 9a08 	vfma.f32	s19, s20, s16
 8018f74:	ee07 3a90 	vmov	s15, r3
 8018f78:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8018f7c:	eeb0 6a48 	vmov.f32	s12, s16
 8018f80:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8018f84:	eea9 9a88 	vfma.f32	s18, s19, s16
 8018f88:	ee70 6a27 	vadd.f32	s13, s0, s15
 8018f8c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8018f90:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8018f94:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8018f98:	eea0 7a26 	vfma.f32	s14, s0, s13
 8018f9c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8018fa0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018fa4:	e740      	b.n	8018e28 <__ieee754_acosf+0x24>
 8018fa6:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8018fec <__ieee754_acosf+0x1e8>
 8018faa:	e73d      	b.n	8018e28 <__ieee754_acosf+0x24>
 8018fac:	40490fdb 	.word	0x40490fdb
 8018fb0:	00000000 	.word	0x00000000
 8018fb4:	3811ef08 	.word	0x3811ef08
 8018fb8:	3a4f7f04 	.word	0x3a4f7f04
 8018fbc:	bf303361 	.word	0xbf303361
 8018fc0:	bd241146 	.word	0xbd241146
 8018fc4:	3e4e0aa8 	.word	0x3e4e0aa8
 8018fc8:	bea6b090 	.word	0xbea6b090
 8018fcc:	3e2aaaab 	.word	0x3e2aaaab
 8018fd0:	3d9dc62e 	.word	0x3d9dc62e
 8018fd4:	4001572d 	.word	0x4001572d
 8018fd8:	c019d139 	.word	0xc019d139
 8018fdc:	33a22168 	.word	0x33a22168
 8018fe0:	3fc90fda 	.word	0x3fc90fda
 8018fe4:	b3a22168 	.word	0xb3a22168
 8018fe8:	40490fda 	.word	0x40490fda
 8018fec:	3fc90fdb 	.word	0x3fc90fdb

08018ff0 <__ieee754_powf>:
 8018ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ff4:	ee10 4a90 	vmov	r4, s1
 8018ff8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8018ffc:	ed2d 8b02 	vpush	{d8}
 8019000:	ee10 6a10 	vmov	r6, s0
 8019004:	eeb0 8a40 	vmov.f32	s16, s0
 8019008:	eef0 8a60 	vmov.f32	s17, s1
 801900c:	d10c      	bne.n	8019028 <__ieee754_powf+0x38>
 801900e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8019012:	0076      	lsls	r6, r6, #1
 8019014:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8019018:	f240 8274 	bls.w	8019504 <__ieee754_powf+0x514>
 801901c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8019020:	ecbd 8b02 	vpop	{d8}
 8019024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019028:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801902c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8019030:	d802      	bhi.n	8019038 <__ieee754_powf+0x48>
 8019032:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8019036:	d908      	bls.n	801904a <__ieee754_powf+0x5a>
 8019038:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801903c:	d1ee      	bne.n	801901c <__ieee754_powf+0x2c>
 801903e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8019042:	0064      	lsls	r4, r4, #1
 8019044:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8019048:	e7e6      	b.n	8019018 <__ieee754_powf+0x28>
 801904a:	2e00      	cmp	r6, #0
 801904c:	da1f      	bge.n	801908e <__ieee754_powf+0x9e>
 801904e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8019052:	f080 8260 	bcs.w	8019516 <__ieee754_powf+0x526>
 8019056:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801905a:	d32f      	bcc.n	80190bc <__ieee754_powf+0xcc>
 801905c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8019060:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8019064:	fa49 f503 	asr.w	r5, r9, r3
 8019068:	fa05 f303 	lsl.w	r3, r5, r3
 801906c:	454b      	cmp	r3, r9
 801906e:	d123      	bne.n	80190b8 <__ieee754_powf+0xc8>
 8019070:	f005 0501 	and.w	r5, r5, #1
 8019074:	f1c5 0502 	rsb	r5, r5, #2
 8019078:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801907c:	d11f      	bne.n	80190be <__ieee754_powf+0xce>
 801907e:	2c00      	cmp	r4, #0
 8019080:	f280 8246 	bge.w	8019510 <__ieee754_powf+0x520>
 8019084:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019088:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801908c:	e7c8      	b.n	8019020 <__ieee754_powf+0x30>
 801908e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8019092:	d111      	bne.n	80190b8 <__ieee754_powf+0xc8>
 8019094:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8019098:	f000 8234 	beq.w	8019504 <__ieee754_powf+0x514>
 801909c:	d906      	bls.n	80190ac <__ieee754_powf+0xbc>
 801909e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80193b4 <__ieee754_powf+0x3c4>
 80190a2:	2c00      	cmp	r4, #0
 80190a4:	bfa8      	it	ge
 80190a6:	eeb0 0a68 	vmovge.f32	s0, s17
 80190aa:	e7b9      	b.n	8019020 <__ieee754_powf+0x30>
 80190ac:	2c00      	cmp	r4, #0
 80190ae:	f280 822c 	bge.w	801950a <__ieee754_powf+0x51a>
 80190b2:	eeb1 0a68 	vneg.f32	s0, s17
 80190b6:	e7b3      	b.n	8019020 <__ieee754_powf+0x30>
 80190b8:	2500      	movs	r5, #0
 80190ba:	e7dd      	b.n	8019078 <__ieee754_powf+0x88>
 80190bc:	2500      	movs	r5, #0
 80190be:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80190c2:	d102      	bne.n	80190ca <__ieee754_powf+0xda>
 80190c4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80190c8:	e7aa      	b.n	8019020 <__ieee754_powf+0x30>
 80190ca:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80190ce:	f040 8227 	bne.w	8019520 <__ieee754_powf+0x530>
 80190d2:	2e00      	cmp	r6, #0
 80190d4:	f2c0 8224 	blt.w	8019520 <__ieee754_powf+0x530>
 80190d8:	eeb0 0a48 	vmov.f32	s0, s16
 80190dc:	ecbd 8b02 	vpop	{d8}
 80190e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190e4:	f7ff bc32 	b.w	801894c <__ieee754_sqrtf>
 80190e8:	2d01      	cmp	r5, #1
 80190ea:	d199      	bne.n	8019020 <__ieee754_powf+0x30>
 80190ec:	eeb1 0a40 	vneg.f32	s0, s0
 80190f0:	e796      	b.n	8019020 <__ieee754_powf+0x30>
 80190f2:	0ff0      	lsrs	r0, r6, #31
 80190f4:	3801      	subs	r0, #1
 80190f6:	ea55 0300 	orrs.w	r3, r5, r0
 80190fa:	d104      	bne.n	8019106 <__ieee754_powf+0x116>
 80190fc:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019100:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019104:	e78c      	b.n	8019020 <__ieee754_powf+0x30>
 8019106:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801910a:	d96d      	bls.n	80191e8 <__ieee754_powf+0x1f8>
 801910c:	4baa      	ldr	r3, [pc, #680]	@ (80193b8 <__ieee754_powf+0x3c8>)
 801910e:	4598      	cmp	r8, r3
 8019110:	d808      	bhi.n	8019124 <__ieee754_powf+0x134>
 8019112:	2c00      	cmp	r4, #0
 8019114:	da0b      	bge.n	801912e <__ieee754_powf+0x13e>
 8019116:	2000      	movs	r0, #0
 8019118:	ecbd 8b02 	vpop	{d8}
 801911c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019120:	f000 bbea 	b.w	80198f8 <__math_oflowf>
 8019124:	4ba5      	ldr	r3, [pc, #660]	@ (80193bc <__ieee754_powf+0x3cc>)
 8019126:	4598      	cmp	r8, r3
 8019128:	d908      	bls.n	801913c <__ieee754_powf+0x14c>
 801912a:	2c00      	cmp	r4, #0
 801912c:	dcf3      	bgt.n	8019116 <__ieee754_powf+0x126>
 801912e:	2000      	movs	r0, #0
 8019130:	ecbd 8b02 	vpop	{d8}
 8019134:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019138:	f000 bbd8 	b.w	80198ec <__math_uflowf>
 801913c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019140:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019144:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80193c0 <__ieee754_powf+0x3d0>
 8019148:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801914c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8019150:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019154:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8019158:	ee20 7a00 	vmul.f32	s14, s0, s0
 801915c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80193c4 <__ieee754_powf+0x3d4>
 8019160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019164:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80193c8 <__ieee754_powf+0x3d8>
 8019168:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801916c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80193cc <__ieee754_powf+0x3dc>
 8019170:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019174:	eeb0 7a67 	vmov.f32	s14, s15
 8019178:	eea0 7a26 	vfma.f32	s14, s0, s13
 801917c:	ee17 3a10 	vmov	r3, s14
 8019180:	f36f 030b 	bfc	r3, #0, #12
 8019184:	ee07 3a10 	vmov	s14, r3
 8019188:	eeb0 6a47 	vmov.f32	s12, s14
 801918c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8019190:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019194:	3d01      	subs	r5, #1
 8019196:	4305      	orrs	r5, r0
 8019198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801919c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80191a0:	f36f 040b 	bfc	r4, #0, #12
 80191a4:	bf18      	it	ne
 80191a6:	eeb0 8a66 	vmovne.f32	s16, s13
 80191aa:	ee06 4a90 	vmov	s13, r4
 80191ae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80191b2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80191b6:	ee67 7a26 	vmul.f32	s15, s14, s13
 80191ba:	eee6 0a07 	vfma.f32	s1, s12, s14
 80191be:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80191c2:	ee17 1a10 	vmov	r1, s14
 80191c6:	2900      	cmp	r1, #0
 80191c8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80191cc:	f340 80dd 	ble.w	801938a <__ieee754_powf+0x39a>
 80191d0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80191d4:	f240 80ca 	bls.w	801936c <__ieee754_powf+0x37c>
 80191d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80191dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e0:	bf4c      	ite	mi
 80191e2:	2001      	movmi	r0, #1
 80191e4:	2000      	movpl	r0, #0
 80191e6:	e797      	b.n	8019118 <__ieee754_powf+0x128>
 80191e8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80191ec:	bf01      	itttt	eq
 80191ee:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80193d0 <__ieee754_powf+0x3e0>
 80191f2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80191f6:	f06f 0317 	mvneq.w	r3, #23
 80191fa:	ee17 7a90 	vmoveq	r7, s15
 80191fe:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8019202:	bf18      	it	ne
 8019204:	2300      	movne	r3, #0
 8019206:	3a7f      	subs	r2, #127	@ 0x7f
 8019208:	441a      	add	r2, r3
 801920a:	4b72      	ldr	r3, [pc, #456]	@ (80193d4 <__ieee754_powf+0x3e4>)
 801920c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8019210:	429f      	cmp	r7, r3
 8019212:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8019216:	dd06      	ble.n	8019226 <__ieee754_powf+0x236>
 8019218:	4b6f      	ldr	r3, [pc, #444]	@ (80193d8 <__ieee754_powf+0x3e8>)
 801921a:	429f      	cmp	r7, r3
 801921c:	f340 80a4 	ble.w	8019368 <__ieee754_powf+0x378>
 8019220:	3201      	adds	r2, #1
 8019222:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8019226:	2600      	movs	r6, #0
 8019228:	4b6c      	ldr	r3, [pc, #432]	@ (80193dc <__ieee754_powf+0x3ec>)
 801922a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801922e:	ee07 1a10 	vmov	s14, r1
 8019232:	edd3 5a00 	vldr	s11, [r3]
 8019236:	4b6a      	ldr	r3, [pc, #424]	@ (80193e0 <__ieee754_powf+0x3f0>)
 8019238:	ee75 7a87 	vadd.f32	s15, s11, s14
 801923c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019240:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8019244:	1049      	asrs	r1, r1, #1
 8019246:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801924a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801924e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8019252:	ee37 6a65 	vsub.f32	s12, s14, s11
 8019256:	ee07 1a90 	vmov	s15, r1
 801925a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801925e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8019262:	ee15 7a10 	vmov	r7, s10
 8019266:	401f      	ands	r7, r3
 8019268:	ee06 7a90 	vmov	s13, r7
 801926c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8019270:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019274:	ee65 7a05 	vmul.f32	s15, s10, s10
 8019278:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801927c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80193e4 <__ieee754_powf+0x3f4>
 8019280:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80193e8 <__ieee754_powf+0x3f8>
 8019284:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019288:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80193ec <__ieee754_powf+0x3fc>
 801928c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019290:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80193c0 <__ieee754_powf+0x3d0>
 8019294:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019298:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80193f0 <__ieee754_powf+0x400>
 801929c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80192a0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80193f4 <__ieee754_powf+0x404>
 80192a4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80192a8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80192ac:	ee35 7a26 	vadd.f32	s14, s10, s13
 80192b0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80192b4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80192b8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80192bc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80192c0:	eef0 5a67 	vmov.f32	s11, s15
 80192c4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80192c8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80192cc:	ee15 1a90 	vmov	r1, s11
 80192d0:	4019      	ands	r1, r3
 80192d2:	ee05 1a90 	vmov	s11, r1
 80192d6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80192da:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80192de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80192e2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80192e6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80192ea:	eeb0 6a67 	vmov.f32	s12, s15
 80192ee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80192f2:	ee16 1a10 	vmov	r1, s12
 80192f6:	4019      	ands	r1, r3
 80192f8:	ee06 1a10 	vmov	s12, r1
 80192fc:	eeb0 7a46 	vmov.f32	s14, s12
 8019300:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8019304:	493c      	ldr	r1, [pc, #240]	@ (80193f8 <__ieee754_powf+0x408>)
 8019306:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801930a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801930e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80193fc <__ieee754_powf+0x40c>
 8019312:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8019400 <__ieee754_powf+0x410>
 8019316:	ee67 7a87 	vmul.f32	s15, s15, s14
 801931a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8019404 <__ieee754_powf+0x414>
 801931e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019322:	ed91 7a00 	vldr	s14, [r1]
 8019326:	ee77 7a87 	vadd.f32	s15, s15, s14
 801932a:	ee07 2a10 	vmov	s14, r2
 801932e:	4a36      	ldr	r2, [pc, #216]	@ (8019408 <__ieee754_powf+0x418>)
 8019330:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8019334:	eeb0 7a67 	vmov.f32	s14, s15
 8019338:	eea6 7a25 	vfma.f32	s14, s12, s11
 801933c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8019340:	ed92 5a00 	vldr	s10, [r2]
 8019344:	ee37 7a05 	vadd.f32	s14, s14, s10
 8019348:	ee37 7a26 	vadd.f32	s14, s14, s13
 801934c:	ee17 2a10 	vmov	r2, s14
 8019350:	401a      	ands	r2, r3
 8019352:	ee07 2a10 	vmov	s14, r2
 8019356:	ee77 6a66 	vsub.f32	s13, s14, s13
 801935a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801935e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8019362:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019366:	e715      	b.n	8019194 <__ieee754_powf+0x1a4>
 8019368:	2601      	movs	r6, #1
 801936a:	e75d      	b.n	8019228 <__ieee754_powf+0x238>
 801936c:	d152      	bne.n	8019414 <__ieee754_powf+0x424>
 801936e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801940c <__ieee754_powf+0x41c>
 8019372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019376:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801937a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801937e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019382:	f73f af29 	bgt.w	80191d8 <__ieee754_powf+0x1e8>
 8019386:	2386      	movs	r3, #134	@ 0x86
 8019388:	e048      	b.n	801941c <__ieee754_powf+0x42c>
 801938a:	4a21      	ldr	r2, [pc, #132]	@ (8019410 <__ieee754_powf+0x420>)
 801938c:	4293      	cmp	r3, r2
 801938e:	d907      	bls.n	80193a0 <__ieee754_powf+0x3b0>
 8019390:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019398:	bf4c      	ite	mi
 801939a:	2001      	movmi	r0, #1
 801939c:	2000      	movpl	r0, #0
 801939e:	e6c7      	b.n	8019130 <__ieee754_powf+0x140>
 80193a0:	d138      	bne.n	8019414 <__ieee754_powf+0x424>
 80193a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80193a6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80193aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ae:	dbea      	blt.n	8019386 <__ieee754_powf+0x396>
 80193b0:	e7ee      	b.n	8019390 <__ieee754_powf+0x3a0>
 80193b2:	bf00      	nop
 80193b4:	00000000 	.word	0x00000000
 80193b8:	3f7ffff3 	.word	0x3f7ffff3
 80193bc:	3f800007 	.word	0x3f800007
 80193c0:	3eaaaaab 	.word	0x3eaaaaab
 80193c4:	3fb8aa00 	.word	0x3fb8aa00
 80193c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80193cc:	36eca570 	.word	0x36eca570
 80193d0:	4b800000 	.word	0x4b800000
 80193d4:	001cc471 	.word	0x001cc471
 80193d8:	005db3d6 	.word	0x005db3d6
 80193dc:	0801bfa4 	.word	0x0801bfa4
 80193e0:	fffff000 	.word	0xfffff000
 80193e4:	3e6c3255 	.word	0x3e6c3255
 80193e8:	3e53f142 	.word	0x3e53f142
 80193ec:	3e8ba305 	.word	0x3e8ba305
 80193f0:	3edb6db7 	.word	0x3edb6db7
 80193f4:	3f19999a 	.word	0x3f19999a
 80193f8:	0801bf94 	.word	0x0801bf94
 80193fc:	3f76384f 	.word	0x3f76384f
 8019400:	3f763800 	.word	0x3f763800
 8019404:	369dc3a0 	.word	0x369dc3a0
 8019408:	0801bf9c 	.word	0x0801bf9c
 801940c:	3338aa3c 	.word	0x3338aa3c
 8019410:	43160000 	.word	0x43160000
 8019414:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8019418:	d96f      	bls.n	80194fa <__ieee754_powf+0x50a>
 801941a:	15db      	asrs	r3, r3, #23
 801941c:	3b7e      	subs	r3, #126	@ 0x7e
 801941e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8019422:	4118      	asrs	r0, r3
 8019424:	4408      	add	r0, r1
 8019426:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801942a:	4a4e      	ldr	r2, [pc, #312]	@ (8019564 <__ieee754_powf+0x574>)
 801942c:	3b7f      	subs	r3, #127	@ 0x7f
 801942e:	411a      	asrs	r2, r3
 8019430:	4002      	ands	r2, r0
 8019432:	ee07 2a10 	vmov	s14, r2
 8019436:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801943a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801943e:	f1c3 0317 	rsb	r3, r3, #23
 8019442:	4118      	asrs	r0, r3
 8019444:	2900      	cmp	r1, #0
 8019446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801944a:	bfb8      	it	lt
 801944c:	4240      	neglt	r0, r0
 801944e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8019452:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8019568 <__ieee754_powf+0x578>
 8019456:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801956c <__ieee754_powf+0x57c>
 801945a:	ee16 3a90 	vmov	r3, s13
 801945e:	f36f 030b 	bfc	r3, #0, #12
 8019462:	ee06 3a90 	vmov	s13, r3
 8019466:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801946a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801946e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019472:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8019570 <__ieee754_powf+0x580>
 8019476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801947a:	eee0 7a87 	vfma.f32	s15, s1, s14
 801947e:	eeb0 7a67 	vmov.f32	s14, s15
 8019482:	eea6 7a86 	vfma.f32	s14, s13, s12
 8019486:	eef0 5a47 	vmov.f32	s11, s14
 801948a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801948e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8019492:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019496:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8019574 <__ieee754_powf+0x584>
 801949a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8019578 <__ieee754_powf+0x588>
 801949e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80194a2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801957c <__ieee754_powf+0x58c>
 80194a6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80194aa:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8019580 <__ieee754_powf+0x590>
 80194ae:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80194b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8019584 <__ieee754_powf+0x594>
 80194b6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80194ba:	eeb0 6a47 	vmov.f32	s12, s14
 80194be:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80194c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80194c6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80194ca:	ee36 6a66 	vsub.f32	s12, s12, s13
 80194ce:	eee7 7a27 	vfma.f32	s15, s14, s15
 80194d2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80194d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80194da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80194e2:	ee10 3a10 	vmov	r3, s0
 80194e6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80194ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80194ee:	da06      	bge.n	80194fe <__ieee754_powf+0x50e>
 80194f0:	f000 f97c 	bl	80197ec <scalbnf>
 80194f4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80194f8:	e592      	b.n	8019020 <__ieee754_powf+0x30>
 80194fa:	2000      	movs	r0, #0
 80194fc:	e7a7      	b.n	801944e <__ieee754_powf+0x45e>
 80194fe:	ee00 3a10 	vmov	s0, r3
 8019502:	e7f7      	b.n	80194f4 <__ieee754_powf+0x504>
 8019504:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019508:	e58a      	b.n	8019020 <__ieee754_powf+0x30>
 801950a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8019588 <__ieee754_powf+0x598>
 801950e:	e587      	b.n	8019020 <__ieee754_powf+0x30>
 8019510:	eeb0 0a48 	vmov.f32	s0, s16
 8019514:	e584      	b.n	8019020 <__ieee754_powf+0x30>
 8019516:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801951a:	f43f adbb 	beq.w	8019094 <__ieee754_powf+0xa4>
 801951e:	2502      	movs	r5, #2
 8019520:	eeb0 0a48 	vmov.f32	s0, s16
 8019524:	f7ff f980 	bl	8018828 <fabsf>
 8019528:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801952c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8019530:	4647      	mov	r7, r8
 8019532:	d003      	beq.n	801953c <__ieee754_powf+0x54c>
 8019534:	f1b8 0f00 	cmp.w	r8, #0
 8019538:	f47f addb 	bne.w	80190f2 <__ieee754_powf+0x102>
 801953c:	2c00      	cmp	r4, #0
 801953e:	bfbc      	itt	lt
 8019540:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8019544:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8019548:	2e00      	cmp	r6, #0
 801954a:	f6bf ad69 	bge.w	8019020 <__ieee754_powf+0x30>
 801954e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8019552:	ea58 0805 	orrs.w	r8, r8, r5
 8019556:	f47f adc7 	bne.w	80190e8 <__ieee754_powf+0xf8>
 801955a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801955e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019562:	e55d      	b.n	8019020 <__ieee754_powf+0x30>
 8019564:	ff800000 	.word	0xff800000
 8019568:	3f317218 	.word	0x3f317218
 801956c:	3f317200 	.word	0x3f317200
 8019570:	35bfbe8c 	.word	0x35bfbe8c
 8019574:	b5ddea0e 	.word	0xb5ddea0e
 8019578:	3331bb4c 	.word	0x3331bb4c
 801957c:	388ab355 	.word	0x388ab355
 8019580:	bb360b61 	.word	0xbb360b61
 8019584:	3e2aaaab 	.word	0x3e2aaaab
 8019588:	00000000 	.word	0x00000000

0801958c <__ieee754_rem_pio2f>:
 801958c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801958e:	ee10 6a10 	vmov	r6, s0
 8019592:	4b88      	ldr	r3, [pc, #544]	@ (80197b4 <__ieee754_rem_pio2f+0x228>)
 8019594:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019598:	429d      	cmp	r5, r3
 801959a:	b087      	sub	sp, #28
 801959c:	4604      	mov	r4, r0
 801959e:	d805      	bhi.n	80195ac <__ieee754_rem_pio2f+0x20>
 80195a0:	2300      	movs	r3, #0
 80195a2:	ed80 0a00 	vstr	s0, [r0]
 80195a6:	6043      	str	r3, [r0, #4]
 80195a8:	2000      	movs	r0, #0
 80195aa:	e022      	b.n	80195f2 <__ieee754_rem_pio2f+0x66>
 80195ac:	4b82      	ldr	r3, [pc, #520]	@ (80197b8 <__ieee754_rem_pio2f+0x22c>)
 80195ae:	429d      	cmp	r5, r3
 80195b0:	d83a      	bhi.n	8019628 <__ieee754_rem_pio2f+0x9c>
 80195b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80195b6:	2e00      	cmp	r6, #0
 80195b8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80197bc <__ieee754_rem_pio2f+0x230>
 80195bc:	4a80      	ldr	r2, [pc, #512]	@ (80197c0 <__ieee754_rem_pio2f+0x234>)
 80195be:	f023 030f 	bic.w	r3, r3, #15
 80195c2:	dd18      	ble.n	80195f6 <__ieee754_rem_pio2f+0x6a>
 80195c4:	4293      	cmp	r3, r2
 80195c6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80195ca:	bf09      	itett	eq
 80195cc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80197c4 <__ieee754_rem_pio2f+0x238>
 80195d0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80197c8 <__ieee754_rem_pio2f+0x23c>
 80195d4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80197cc <__ieee754_rem_pio2f+0x240>
 80195d8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80195dc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80195e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80195e4:	ed80 7a00 	vstr	s14, [r0]
 80195e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80195ec:	edc0 7a01 	vstr	s15, [r0, #4]
 80195f0:	2001      	movs	r0, #1
 80195f2:	b007      	add	sp, #28
 80195f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195f6:	4293      	cmp	r3, r2
 80195f8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80195fc:	bf09      	itett	eq
 80195fe:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80197c4 <__ieee754_rem_pio2f+0x238>
 8019602:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80197c8 <__ieee754_rem_pio2f+0x23c>
 8019606:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80197cc <__ieee754_rem_pio2f+0x240>
 801960a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801960e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019616:	ed80 7a00 	vstr	s14, [r0]
 801961a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801961e:	edc0 7a01 	vstr	s15, [r0, #4]
 8019622:	f04f 30ff 	mov.w	r0, #4294967295
 8019626:	e7e4      	b.n	80195f2 <__ieee754_rem_pio2f+0x66>
 8019628:	4b69      	ldr	r3, [pc, #420]	@ (80197d0 <__ieee754_rem_pio2f+0x244>)
 801962a:	429d      	cmp	r5, r3
 801962c:	d873      	bhi.n	8019716 <__ieee754_rem_pio2f+0x18a>
 801962e:	f7ff f8fb 	bl	8018828 <fabsf>
 8019632:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80197d4 <__ieee754_rem_pio2f+0x248>
 8019636:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801963a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801963e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019646:	ee17 0a90 	vmov	r0, s15
 801964a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80197bc <__ieee754_rem_pio2f+0x230>
 801964e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019652:	281f      	cmp	r0, #31
 8019654:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80197c8 <__ieee754_rem_pio2f+0x23c>
 8019658:	ee67 7a27 	vmul.f32	s15, s14, s15
 801965c:	eeb1 6a47 	vneg.f32	s12, s14
 8019660:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019664:	ee16 1a90 	vmov	r1, s13
 8019668:	dc09      	bgt.n	801967e <__ieee754_rem_pio2f+0xf2>
 801966a:	4a5b      	ldr	r2, [pc, #364]	@ (80197d8 <__ieee754_rem_pio2f+0x24c>)
 801966c:	1e47      	subs	r7, r0, #1
 801966e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019672:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8019676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801967a:	4293      	cmp	r3, r2
 801967c:	d107      	bne.n	801968e <__ieee754_rem_pio2f+0x102>
 801967e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8019682:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8019686:	2a08      	cmp	r2, #8
 8019688:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801968c:	dc14      	bgt.n	80196b8 <__ieee754_rem_pio2f+0x12c>
 801968e:	6021      	str	r1, [r4, #0]
 8019690:	ed94 7a00 	vldr	s14, [r4]
 8019694:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019698:	2e00      	cmp	r6, #0
 801969a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801969e:	ed84 0a01 	vstr	s0, [r4, #4]
 80196a2:	daa6      	bge.n	80195f2 <__ieee754_rem_pio2f+0x66>
 80196a4:	eeb1 7a47 	vneg.f32	s14, s14
 80196a8:	eeb1 0a40 	vneg.f32	s0, s0
 80196ac:	ed84 7a00 	vstr	s14, [r4]
 80196b0:	ed84 0a01 	vstr	s0, [r4, #4]
 80196b4:	4240      	negs	r0, r0
 80196b6:	e79c      	b.n	80195f2 <__ieee754_rem_pio2f+0x66>
 80196b8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80197c4 <__ieee754_rem_pio2f+0x238>
 80196bc:	eef0 6a40 	vmov.f32	s13, s0
 80196c0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80196c4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80196c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80196cc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80197cc <__ieee754_rem_pio2f+0x240>
 80196d0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80196d4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80196d8:	ee15 2a90 	vmov	r2, s11
 80196dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80196e0:	1a5b      	subs	r3, r3, r1
 80196e2:	2b19      	cmp	r3, #25
 80196e4:	dc04      	bgt.n	80196f0 <__ieee754_rem_pio2f+0x164>
 80196e6:	edc4 5a00 	vstr	s11, [r4]
 80196ea:	eeb0 0a66 	vmov.f32	s0, s13
 80196ee:	e7cf      	b.n	8019690 <__ieee754_rem_pio2f+0x104>
 80196f0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80197dc <__ieee754_rem_pio2f+0x250>
 80196f4:	eeb0 0a66 	vmov.f32	s0, s13
 80196f8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80196fc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019700:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80197e0 <__ieee754_rem_pio2f+0x254>
 8019704:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019708:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801970c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019710:	ed84 7a00 	vstr	s14, [r4]
 8019714:	e7bc      	b.n	8019690 <__ieee754_rem_pio2f+0x104>
 8019716:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801971a:	d306      	bcc.n	801972a <__ieee754_rem_pio2f+0x19e>
 801971c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019720:	edc0 7a01 	vstr	s15, [r0, #4]
 8019724:	edc0 7a00 	vstr	s15, [r0]
 8019728:	e73e      	b.n	80195a8 <__ieee754_rem_pio2f+0x1c>
 801972a:	15ea      	asrs	r2, r5, #23
 801972c:	3a86      	subs	r2, #134	@ 0x86
 801972e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019732:	ee07 3a90 	vmov	s15, r3
 8019736:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801973a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80197e4 <__ieee754_rem_pio2f+0x258>
 801973e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019746:	ed8d 7a03 	vstr	s14, [sp, #12]
 801974a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801974e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019752:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019756:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801975a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801975e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019762:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801976a:	edcd 7a05 	vstr	s15, [sp, #20]
 801976e:	d11e      	bne.n	80197ae <__ieee754_rem_pio2f+0x222>
 8019770:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019778:	bf0c      	ite	eq
 801977a:	2301      	moveq	r3, #1
 801977c:	2302      	movne	r3, #2
 801977e:	491a      	ldr	r1, [pc, #104]	@ (80197e8 <__ieee754_rem_pio2f+0x25c>)
 8019780:	9101      	str	r1, [sp, #4]
 8019782:	2102      	movs	r1, #2
 8019784:	9100      	str	r1, [sp, #0]
 8019786:	a803      	add	r0, sp, #12
 8019788:	4621      	mov	r1, r4
 801978a:	f000 f8bb 	bl	8019904 <__kernel_rem_pio2f>
 801978e:	2e00      	cmp	r6, #0
 8019790:	f6bf af2f 	bge.w	80195f2 <__ieee754_rem_pio2f+0x66>
 8019794:	edd4 7a00 	vldr	s15, [r4]
 8019798:	eef1 7a67 	vneg.f32	s15, s15
 801979c:	edc4 7a00 	vstr	s15, [r4]
 80197a0:	edd4 7a01 	vldr	s15, [r4, #4]
 80197a4:	eef1 7a67 	vneg.f32	s15, s15
 80197a8:	edc4 7a01 	vstr	s15, [r4, #4]
 80197ac:	e782      	b.n	80196b4 <__ieee754_rem_pio2f+0x128>
 80197ae:	2303      	movs	r3, #3
 80197b0:	e7e5      	b.n	801977e <__ieee754_rem_pio2f+0x1f2>
 80197b2:	bf00      	nop
 80197b4:	3f490fd8 	.word	0x3f490fd8
 80197b8:	4016cbe3 	.word	0x4016cbe3
 80197bc:	3fc90f80 	.word	0x3fc90f80
 80197c0:	3fc90fd0 	.word	0x3fc90fd0
 80197c4:	37354400 	.word	0x37354400
 80197c8:	37354443 	.word	0x37354443
 80197cc:	2e85a308 	.word	0x2e85a308
 80197d0:	43490f80 	.word	0x43490f80
 80197d4:	3f22f984 	.word	0x3f22f984
 80197d8:	0801bfac 	.word	0x0801bfac
 80197dc:	2e85a300 	.word	0x2e85a300
 80197e0:	248d3132 	.word	0x248d3132
 80197e4:	43800000 	.word	0x43800000
 80197e8:	0801c02c 	.word	0x0801c02c

080197ec <scalbnf>:
 80197ec:	ee10 3a10 	vmov	r3, s0
 80197f0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80197f4:	d02b      	beq.n	801984e <scalbnf+0x62>
 80197f6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80197fa:	d302      	bcc.n	8019802 <scalbnf+0x16>
 80197fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019800:	4770      	bx	lr
 8019802:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019806:	d123      	bne.n	8019850 <scalbnf+0x64>
 8019808:	4b24      	ldr	r3, [pc, #144]	@ (801989c <scalbnf+0xb0>)
 801980a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80198a0 <scalbnf+0xb4>
 801980e:	4298      	cmp	r0, r3
 8019810:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019814:	db17      	blt.n	8019846 <scalbnf+0x5a>
 8019816:	ee10 3a10 	vmov	r3, s0
 801981a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801981e:	3a19      	subs	r2, #25
 8019820:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019824:	4288      	cmp	r0, r1
 8019826:	dd15      	ble.n	8019854 <scalbnf+0x68>
 8019828:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80198a4 <scalbnf+0xb8>
 801982c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80198a8 <scalbnf+0xbc>
 8019830:	ee10 3a10 	vmov	r3, s0
 8019834:	eeb0 7a67 	vmov.f32	s14, s15
 8019838:	2b00      	cmp	r3, #0
 801983a:	bfb8      	it	lt
 801983c:	eef0 7a66 	vmovlt.f32	s15, s13
 8019840:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019844:	4770      	bx	lr
 8019846:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80198ac <scalbnf+0xc0>
 801984a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801984e:	4770      	bx	lr
 8019850:	0dd2      	lsrs	r2, r2, #23
 8019852:	e7e5      	b.n	8019820 <scalbnf+0x34>
 8019854:	4410      	add	r0, r2
 8019856:	28fe      	cmp	r0, #254	@ 0xfe
 8019858:	dce6      	bgt.n	8019828 <scalbnf+0x3c>
 801985a:	2800      	cmp	r0, #0
 801985c:	dd06      	ble.n	801986c <scalbnf+0x80>
 801985e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019862:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019866:	ee00 3a10 	vmov	s0, r3
 801986a:	4770      	bx	lr
 801986c:	f110 0f16 	cmn.w	r0, #22
 8019870:	da09      	bge.n	8019886 <scalbnf+0x9a>
 8019872:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80198ac <scalbnf+0xc0>
 8019876:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80198b0 <scalbnf+0xc4>
 801987a:	ee10 3a10 	vmov	r3, s0
 801987e:	eeb0 7a67 	vmov.f32	s14, s15
 8019882:	2b00      	cmp	r3, #0
 8019884:	e7d9      	b.n	801983a <scalbnf+0x4e>
 8019886:	3019      	adds	r0, #25
 8019888:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801988c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019890:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80198b4 <scalbnf+0xc8>
 8019894:	ee07 3a90 	vmov	s15, r3
 8019898:	e7d7      	b.n	801984a <scalbnf+0x5e>
 801989a:	bf00      	nop
 801989c:	ffff3cb0 	.word	0xffff3cb0
 80198a0:	4c000000 	.word	0x4c000000
 80198a4:	7149f2ca 	.word	0x7149f2ca
 80198a8:	f149f2ca 	.word	0xf149f2ca
 80198ac:	0da24260 	.word	0x0da24260
 80198b0:	8da24260 	.word	0x8da24260
 80198b4:	33000000 	.word	0x33000000

080198b8 <with_errnof>:
 80198b8:	b510      	push	{r4, lr}
 80198ba:	ed2d 8b02 	vpush	{d8}
 80198be:	eeb0 8a40 	vmov.f32	s16, s0
 80198c2:	4604      	mov	r4, r0
 80198c4:	f7fb fb96 	bl	8014ff4 <__errno>
 80198c8:	eeb0 0a48 	vmov.f32	s0, s16
 80198cc:	ecbd 8b02 	vpop	{d8}
 80198d0:	6004      	str	r4, [r0, #0]
 80198d2:	bd10      	pop	{r4, pc}

080198d4 <xflowf>:
 80198d4:	b130      	cbz	r0, 80198e4 <xflowf+0x10>
 80198d6:	eef1 7a40 	vneg.f32	s15, s0
 80198da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80198de:	2022      	movs	r0, #34	@ 0x22
 80198e0:	f7ff bfea 	b.w	80198b8 <with_errnof>
 80198e4:	eef0 7a40 	vmov.f32	s15, s0
 80198e8:	e7f7      	b.n	80198da <xflowf+0x6>
	...

080198ec <__math_uflowf>:
 80198ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80198f4 <__math_uflowf+0x8>
 80198f0:	f7ff bff0 	b.w	80198d4 <xflowf>
 80198f4:	10000000 	.word	0x10000000

080198f8 <__math_oflowf>:
 80198f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019900 <__math_oflowf+0x8>
 80198fc:	f7ff bfea 	b.w	80198d4 <xflowf>
 8019900:	70000000 	.word	0x70000000

08019904 <__kernel_rem_pio2f>:
 8019904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019908:	ed2d 8b04 	vpush	{d8-d9}
 801990c:	b0d9      	sub	sp, #356	@ 0x164
 801990e:	4690      	mov	r8, r2
 8019910:	9001      	str	r0, [sp, #4]
 8019912:	4ab6      	ldr	r2, [pc, #728]	@ (8019bec <__kernel_rem_pio2f+0x2e8>)
 8019914:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8019916:	f118 0f04 	cmn.w	r8, #4
 801991a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801991e:	460f      	mov	r7, r1
 8019920:	f103 3bff 	add.w	fp, r3, #4294967295
 8019924:	db26      	blt.n	8019974 <__kernel_rem_pio2f+0x70>
 8019926:	f1b8 0203 	subs.w	r2, r8, #3
 801992a:	bf48      	it	mi
 801992c:	f108 0204 	addmi.w	r2, r8, #4
 8019930:	10d2      	asrs	r2, r2, #3
 8019932:	1c55      	adds	r5, r2, #1
 8019934:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019936:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8019bfc <__kernel_rem_pio2f+0x2f8>
 801993a:	00e8      	lsls	r0, r5, #3
 801993c:	eba2 060b 	sub.w	r6, r2, fp
 8019940:	9002      	str	r0, [sp, #8]
 8019942:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8019946:	eb0a 0c0b 	add.w	ip, sl, fp
 801994a:	ac1c      	add	r4, sp, #112	@ 0x70
 801994c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019950:	2000      	movs	r0, #0
 8019952:	4560      	cmp	r0, ip
 8019954:	dd10      	ble.n	8019978 <__kernel_rem_pio2f+0x74>
 8019956:	a91c      	add	r1, sp, #112	@ 0x70
 8019958:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801995c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019960:	2600      	movs	r6, #0
 8019962:	4556      	cmp	r6, sl
 8019964:	dc24      	bgt.n	80199b0 <__kernel_rem_pio2f+0xac>
 8019966:	f8dd e004 	ldr.w	lr, [sp, #4]
 801996a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8019bfc <__kernel_rem_pio2f+0x2f8>
 801996e:	4684      	mov	ip, r0
 8019970:	2400      	movs	r4, #0
 8019972:	e016      	b.n	80199a2 <__kernel_rem_pio2f+0x9e>
 8019974:	2200      	movs	r2, #0
 8019976:	e7dc      	b.n	8019932 <__kernel_rem_pio2f+0x2e>
 8019978:	42c6      	cmn	r6, r0
 801997a:	bf5d      	ittte	pl
 801997c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019980:	ee07 1a90 	vmovpl	s15, r1
 8019984:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019988:	eef0 7a47 	vmovmi.f32	s15, s14
 801998c:	ece4 7a01 	vstmia	r4!, {s15}
 8019990:	3001      	adds	r0, #1
 8019992:	e7de      	b.n	8019952 <__kernel_rem_pio2f+0x4e>
 8019994:	ecfe 6a01 	vldmia	lr!, {s13}
 8019998:	ed3c 7a01 	vldmdb	ip!, {s14}
 801999c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80199a0:	3401      	adds	r4, #1
 80199a2:	455c      	cmp	r4, fp
 80199a4:	ddf6      	ble.n	8019994 <__kernel_rem_pio2f+0x90>
 80199a6:	ece9 7a01 	vstmia	r9!, {s15}
 80199aa:	3601      	adds	r6, #1
 80199ac:	3004      	adds	r0, #4
 80199ae:	e7d8      	b.n	8019962 <__kernel_rem_pio2f+0x5e>
 80199b0:	a908      	add	r1, sp, #32
 80199b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80199b6:	9104      	str	r1, [sp, #16]
 80199b8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80199ba:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8019bf8 <__kernel_rem_pio2f+0x2f4>
 80199be:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8019bf4 <__kernel_rem_pio2f+0x2f0>
 80199c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80199c6:	9203      	str	r2, [sp, #12]
 80199c8:	4654      	mov	r4, sl
 80199ca:	00a2      	lsls	r2, r4, #2
 80199cc:	9205      	str	r2, [sp, #20]
 80199ce:	aa58      	add	r2, sp, #352	@ 0x160
 80199d0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80199d4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80199d8:	a944      	add	r1, sp, #272	@ 0x110
 80199da:	aa08      	add	r2, sp, #32
 80199dc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80199e0:	4694      	mov	ip, r2
 80199e2:	4626      	mov	r6, r4
 80199e4:	2e00      	cmp	r6, #0
 80199e6:	dc4c      	bgt.n	8019a82 <__kernel_rem_pio2f+0x17e>
 80199e8:	4628      	mov	r0, r5
 80199ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80199ee:	f7ff fefd 	bl	80197ec <scalbnf>
 80199f2:	eeb0 8a40 	vmov.f32	s16, s0
 80199f6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80199fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80199fe:	f000 f9e9 	bl	8019dd4 <floorf>
 8019a02:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8019a06:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019a0a:	2d00      	cmp	r5, #0
 8019a0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019a10:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019a14:	ee17 9a90 	vmov	r9, s15
 8019a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a1c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019a20:	dd41      	ble.n	8019aa6 <__kernel_rem_pio2f+0x1a2>
 8019a22:	f104 3cff 	add.w	ip, r4, #4294967295
 8019a26:	a908      	add	r1, sp, #32
 8019a28:	f1c5 0e08 	rsb	lr, r5, #8
 8019a2c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019a30:	fa46 f00e 	asr.w	r0, r6, lr
 8019a34:	4481      	add	r9, r0
 8019a36:	fa00 f00e 	lsl.w	r0, r0, lr
 8019a3a:	1a36      	subs	r6, r6, r0
 8019a3c:	f1c5 0007 	rsb	r0, r5, #7
 8019a40:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8019a44:	4106      	asrs	r6, r0
 8019a46:	2e00      	cmp	r6, #0
 8019a48:	dd3c      	ble.n	8019ac4 <__kernel_rem_pio2f+0x1c0>
 8019a4a:	f04f 0e00 	mov.w	lr, #0
 8019a4e:	f109 0901 	add.w	r9, r9, #1
 8019a52:	4670      	mov	r0, lr
 8019a54:	4574      	cmp	r4, lr
 8019a56:	dc68      	bgt.n	8019b2a <__kernel_rem_pio2f+0x226>
 8019a58:	2d00      	cmp	r5, #0
 8019a5a:	dd03      	ble.n	8019a64 <__kernel_rem_pio2f+0x160>
 8019a5c:	2d01      	cmp	r5, #1
 8019a5e:	d074      	beq.n	8019b4a <__kernel_rem_pio2f+0x246>
 8019a60:	2d02      	cmp	r5, #2
 8019a62:	d07d      	beq.n	8019b60 <__kernel_rem_pio2f+0x25c>
 8019a64:	2e02      	cmp	r6, #2
 8019a66:	d12d      	bne.n	8019ac4 <__kernel_rem_pio2f+0x1c0>
 8019a68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019a6c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019a70:	b340      	cbz	r0, 8019ac4 <__kernel_rem_pio2f+0x1c0>
 8019a72:	4628      	mov	r0, r5
 8019a74:	9306      	str	r3, [sp, #24]
 8019a76:	f7ff feb9 	bl	80197ec <scalbnf>
 8019a7a:	9b06      	ldr	r3, [sp, #24]
 8019a7c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019a80:	e020      	b.n	8019ac4 <__kernel_rem_pio2f+0x1c0>
 8019a82:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019a86:	3e01      	subs	r6, #1
 8019a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a90:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019a94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019a98:	ecac 0a01 	vstmia	ip!, {s0}
 8019a9c:	ed30 0a01 	vldmdb	r0!, {s0}
 8019aa0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019aa4:	e79e      	b.n	80199e4 <__kernel_rem_pio2f+0xe0>
 8019aa6:	d105      	bne.n	8019ab4 <__kernel_rem_pio2f+0x1b0>
 8019aa8:	1e60      	subs	r0, r4, #1
 8019aaa:	a908      	add	r1, sp, #32
 8019aac:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019ab0:	11f6      	asrs	r6, r6, #7
 8019ab2:	e7c8      	b.n	8019a46 <__kernel_rem_pio2f+0x142>
 8019ab4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019ab8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ac0:	da31      	bge.n	8019b26 <__kernel_rem_pio2f+0x222>
 8019ac2:	2600      	movs	r6, #0
 8019ac4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019acc:	f040 8098 	bne.w	8019c00 <__kernel_rem_pio2f+0x2fc>
 8019ad0:	1e60      	subs	r0, r4, #1
 8019ad2:	2200      	movs	r2, #0
 8019ad4:	4550      	cmp	r0, sl
 8019ad6:	da4b      	bge.n	8019b70 <__kernel_rem_pio2f+0x26c>
 8019ad8:	2a00      	cmp	r2, #0
 8019ada:	d065      	beq.n	8019ba8 <__kernel_rem_pio2f+0x2a4>
 8019adc:	3c01      	subs	r4, #1
 8019ade:	ab08      	add	r3, sp, #32
 8019ae0:	3d08      	subs	r5, #8
 8019ae2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d0f8      	beq.n	8019adc <__kernel_rem_pio2f+0x1d8>
 8019aea:	4628      	mov	r0, r5
 8019aec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019af0:	f7ff fe7c 	bl	80197ec <scalbnf>
 8019af4:	1c63      	adds	r3, r4, #1
 8019af6:	aa44      	add	r2, sp, #272	@ 0x110
 8019af8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8019bf8 <__kernel_rem_pio2f+0x2f4>
 8019afc:	0099      	lsls	r1, r3, #2
 8019afe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019b02:	4623      	mov	r3, r4
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	f280 80a9 	bge.w	8019c5c <__kernel_rem_pio2f+0x358>
 8019b0a:	4623      	mov	r3, r4
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	f2c0 80c7 	blt.w	8019ca0 <__kernel_rem_pio2f+0x39c>
 8019b12:	aa44      	add	r2, sp, #272	@ 0x110
 8019b14:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019b18:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019bf0 <__kernel_rem_pio2f+0x2ec>
 8019b1c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8019bfc <__kernel_rem_pio2f+0x2f8>
 8019b20:	2000      	movs	r0, #0
 8019b22:	1ae2      	subs	r2, r4, r3
 8019b24:	e0b1      	b.n	8019c8a <__kernel_rem_pio2f+0x386>
 8019b26:	2602      	movs	r6, #2
 8019b28:	e78f      	b.n	8019a4a <__kernel_rem_pio2f+0x146>
 8019b2a:	f852 1b04 	ldr.w	r1, [r2], #4
 8019b2e:	b948      	cbnz	r0, 8019b44 <__kernel_rem_pio2f+0x240>
 8019b30:	b121      	cbz	r1, 8019b3c <__kernel_rem_pio2f+0x238>
 8019b32:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8019b36:	f842 1c04 	str.w	r1, [r2, #-4]
 8019b3a:	2101      	movs	r1, #1
 8019b3c:	f10e 0e01 	add.w	lr, lr, #1
 8019b40:	4608      	mov	r0, r1
 8019b42:	e787      	b.n	8019a54 <__kernel_rem_pio2f+0x150>
 8019b44:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8019b48:	e7f5      	b.n	8019b36 <__kernel_rem_pio2f+0x232>
 8019b4a:	f104 3cff 	add.w	ip, r4, #4294967295
 8019b4e:	aa08      	add	r2, sp, #32
 8019b50:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019b54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019b58:	a908      	add	r1, sp, #32
 8019b5a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019b5e:	e781      	b.n	8019a64 <__kernel_rem_pio2f+0x160>
 8019b60:	f104 3cff 	add.w	ip, r4, #4294967295
 8019b64:	aa08      	add	r2, sp, #32
 8019b66:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019b6a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019b6e:	e7f3      	b.n	8019b58 <__kernel_rem_pio2f+0x254>
 8019b70:	a908      	add	r1, sp, #32
 8019b72:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019b76:	3801      	subs	r0, #1
 8019b78:	430a      	orrs	r2, r1
 8019b7a:	e7ab      	b.n	8019ad4 <__kernel_rem_pio2f+0x1d0>
 8019b7c:	3201      	adds	r2, #1
 8019b7e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019b82:	2e00      	cmp	r6, #0
 8019b84:	d0fa      	beq.n	8019b7c <__kernel_rem_pio2f+0x278>
 8019b86:	9905      	ldr	r1, [sp, #20]
 8019b88:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019b8c:	eb0d 0001 	add.w	r0, sp, r1
 8019b90:	18e6      	adds	r6, r4, r3
 8019b92:	a91c      	add	r1, sp, #112	@ 0x70
 8019b94:	f104 0c01 	add.w	ip, r4, #1
 8019b98:	384c      	subs	r0, #76	@ 0x4c
 8019b9a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8019b9e:	4422      	add	r2, r4
 8019ba0:	4562      	cmp	r2, ip
 8019ba2:	da04      	bge.n	8019bae <__kernel_rem_pio2f+0x2aa>
 8019ba4:	4614      	mov	r4, r2
 8019ba6:	e710      	b.n	80199ca <__kernel_rem_pio2f+0xc6>
 8019ba8:	9804      	ldr	r0, [sp, #16]
 8019baa:	2201      	movs	r2, #1
 8019bac:	e7e7      	b.n	8019b7e <__kernel_rem_pio2f+0x27a>
 8019bae:	9903      	ldr	r1, [sp, #12]
 8019bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019bb4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019bb8:	9105      	str	r1, [sp, #20]
 8019bba:	ee07 1a90 	vmov	s15, r1
 8019bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bc2:	2400      	movs	r4, #0
 8019bc4:	ece6 7a01 	vstmia	r6!, {s15}
 8019bc8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019bfc <__kernel_rem_pio2f+0x2f8>
 8019bcc:	46b1      	mov	r9, r6
 8019bce:	455c      	cmp	r4, fp
 8019bd0:	dd04      	ble.n	8019bdc <__kernel_rem_pio2f+0x2d8>
 8019bd2:	ece0 7a01 	vstmia	r0!, {s15}
 8019bd6:	f10c 0c01 	add.w	ip, ip, #1
 8019bda:	e7e1      	b.n	8019ba0 <__kernel_rem_pio2f+0x29c>
 8019bdc:	ecfe 6a01 	vldmia	lr!, {s13}
 8019be0:	ed39 7a01 	vldmdb	r9!, {s14}
 8019be4:	3401      	adds	r4, #1
 8019be6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019bea:	e7f0      	b.n	8019bce <__kernel_rem_pio2f+0x2ca>
 8019bec:	0801c370 	.word	0x0801c370
 8019bf0:	0801c344 	.word	0x0801c344
 8019bf4:	43800000 	.word	0x43800000
 8019bf8:	3b800000 	.word	0x3b800000
 8019bfc:	00000000 	.word	0x00000000
 8019c00:	9b02      	ldr	r3, [sp, #8]
 8019c02:	eeb0 0a48 	vmov.f32	s0, s16
 8019c06:	eba3 0008 	sub.w	r0, r3, r8
 8019c0a:	f7ff fdef 	bl	80197ec <scalbnf>
 8019c0e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8019bf4 <__kernel_rem_pio2f+0x2f0>
 8019c12:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c1a:	db19      	blt.n	8019c50 <__kernel_rem_pio2f+0x34c>
 8019c1c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8019bf8 <__kernel_rem_pio2f+0x2f4>
 8019c20:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019c24:	aa08      	add	r2, sp, #32
 8019c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c2a:	3508      	adds	r5, #8
 8019c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c30:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019c3c:	ee10 3a10 	vmov	r3, s0
 8019c40:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019c44:	ee17 3a90 	vmov	r3, s15
 8019c48:	3401      	adds	r4, #1
 8019c4a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019c4e:	e74c      	b.n	8019aea <__kernel_rem_pio2f+0x1e6>
 8019c50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019c54:	aa08      	add	r2, sp, #32
 8019c56:	ee10 3a10 	vmov	r3, s0
 8019c5a:	e7f6      	b.n	8019c4a <__kernel_rem_pio2f+0x346>
 8019c5c:	a808      	add	r0, sp, #32
 8019c5e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019c62:	9001      	str	r0, [sp, #4]
 8019c64:	ee07 0a90 	vmov	s15, r0
 8019c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c6c:	3b01      	subs	r3, #1
 8019c6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019c72:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019c76:	ed62 7a01 	vstmdb	r2!, {s15}
 8019c7a:	e743      	b.n	8019b04 <__kernel_rem_pio2f+0x200>
 8019c7c:	ecfc 6a01 	vldmia	ip!, {s13}
 8019c80:	ecb5 7a01 	vldmia	r5!, {s14}
 8019c84:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019c88:	3001      	adds	r0, #1
 8019c8a:	4550      	cmp	r0, sl
 8019c8c:	dc01      	bgt.n	8019c92 <__kernel_rem_pio2f+0x38e>
 8019c8e:	4290      	cmp	r0, r2
 8019c90:	ddf4      	ble.n	8019c7c <__kernel_rem_pio2f+0x378>
 8019c92:	a858      	add	r0, sp, #352	@ 0x160
 8019c94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019c98:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8019c9c:	3b01      	subs	r3, #1
 8019c9e:	e735      	b.n	8019b0c <__kernel_rem_pio2f+0x208>
 8019ca0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019ca2:	2b02      	cmp	r3, #2
 8019ca4:	dc09      	bgt.n	8019cba <__kernel_rem_pio2f+0x3b6>
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	dc27      	bgt.n	8019cfa <__kernel_rem_pio2f+0x3f6>
 8019caa:	d040      	beq.n	8019d2e <__kernel_rem_pio2f+0x42a>
 8019cac:	f009 0007 	and.w	r0, r9, #7
 8019cb0:	b059      	add	sp, #356	@ 0x164
 8019cb2:	ecbd 8b04 	vpop	{d8-d9}
 8019cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cba:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019cbc:	2b03      	cmp	r3, #3
 8019cbe:	d1f5      	bne.n	8019cac <__kernel_rem_pio2f+0x3a8>
 8019cc0:	aa30      	add	r2, sp, #192	@ 0xc0
 8019cc2:	1f0b      	subs	r3, r1, #4
 8019cc4:	4413      	add	r3, r2
 8019cc6:	461a      	mov	r2, r3
 8019cc8:	4620      	mov	r0, r4
 8019cca:	2800      	cmp	r0, #0
 8019ccc:	dc50      	bgt.n	8019d70 <__kernel_rem_pio2f+0x46c>
 8019cce:	4622      	mov	r2, r4
 8019cd0:	2a01      	cmp	r2, #1
 8019cd2:	dc5d      	bgt.n	8019d90 <__kernel_rem_pio2f+0x48c>
 8019cd4:	ab30      	add	r3, sp, #192	@ 0xc0
 8019cd6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8019bfc <__kernel_rem_pio2f+0x2f8>
 8019cda:	440b      	add	r3, r1
 8019cdc:	2c01      	cmp	r4, #1
 8019cde:	dc67      	bgt.n	8019db0 <__kernel_rem_pio2f+0x4ac>
 8019ce0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019ce4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019ce8:	2e00      	cmp	r6, #0
 8019cea:	d167      	bne.n	8019dbc <__kernel_rem_pio2f+0x4b8>
 8019cec:	edc7 6a00 	vstr	s13, [r7]
 8019cf0:	ed87 7a01 	vstr	s14, [r7, #4]
 8019cf4:	edc7 7a02 	vstr	s15, [r7, #8]
 8019cf8:	e7d8      	b.n	8019cac <__kernel_rem_pio2f+0x3a8>
 8019cfa:	ab30      	add	r3, sp, #192	@ 0xc0
 8019cfc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8019bfc <__kernel_rem_pio2f+0x2f8>
 8019d00:	440b      	add	r3, r1
 8019d02:	4622      	mov	r2, r4
 8019d04:	2a00      	cmp	r2, #0
 8019d06:	da24      	bge.n	8019d52 <__kernel_rem_pio2f+0x44e>
 8019d08:	b34e      	cbz	r6, 8019d5e <__kernel_rem_pio2f+0x45a>
 8019d0a:	eef1 7a47 	vneg.f32	s15, s14
 8019d0e:	edc7 7a00 	vstr	s15, [r7]
 8019d12:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019d16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d1a:	aa31      	add	r2, sp, #196	@ 0xc4
 8019d1c:	2301      	movs	r3, #1
 8019d1e:	429c      	cmp	r4, r3
 8019d20:	da20      	bge.n	8019d64 <__kernel_rem_pio2f+0x460>
 8019d22:	b10e      	cbz	r6, 8019d28 <__kernel_rem_pio2f+0x424>
 8019d24:	eef1 7a67 	vneg.f32	s15, s15
 8019d28:	edc7 7a01 	vstr	s15, [r7, #4]
 8019d2c:	e7be      	b.n	8019cac <__kernel_rem_pio2f+0x3a8>
 8019d2e:	ab30      	add	r3, sp, #192	@ 0xc0
 8019d30:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8019bfc <__kernel_rem_pio2f+0x2f8>
 8019d34:	440b      	add	r3, r1
 8019d36:	2c00      	cmp	r4, #0
 8019d38:	da05      	bge.n	8019d46 <__kernel_rem_pio2f+0x442>
 8019d3a:	b10e      	cbz	r6, 8019d40 <__kernel_rem_pio2f+0x43c>
 8019d3c:	eef1 7a67 	vneg.f32	s15, s15
 8019d40:	edc7 7a00 	vstr	s15, [r7]
 8019d44:	e7b2      	b.n	8019cac <__kernel_rem_pio2f+0x3a8>
 8019d46:	ed33 7a01 	vldmdb	r3!, {s14}
 8019d4a:	3c01      	subs	r4, #1
 8019d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d50:	e7f1      	b.n	8019d36 <__kernel_rem_pio2f+0x432>
 8019d52:	ed73 7a01 	vldmdb	r3!, {s15}
 8019d56:	3a01      	subs	r2, #1
 8019d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d5c:	e7d2      	b.n	8019d04 <__kernel_rem_pio2f+0x400>
 8019d5e:	eef0 7a47 	vmov.f32	s15, s14
 8019d62:	e7d4      	b.n	8019d0e <__kernel_rem_pio2f+0x40a>
 8019d64:	ecb2 7a01 	vldmia	r2!, {s14}
 8019d68:	3301      	adds	r3, #1
 8019d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d6e:	e7d6      	b.n	8019d1e <__kernel_rem_pio2f+0x41a>
 8019d70:	ed72 7a01 	vldmdb	r2!, {s15}
 8019d74:	edd2 6a01 	vldr	s13, [r2, #4]
 8019d78:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019d7c:	3801      	subs	r0, #1
 8019d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d82:	ed82 7a00 	vstr	s14, [r2]
 8019d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d8a:	edc2 7a01 	vstr	s15, [r2, #4]
 8019d8e:	e79c      	b.n	8019cca <__kernel_rem_pio2f+0x3c6>
 8019d90:	ed73 7a01 	vldmdb	r3!, {s15}
 8019d94:	edd3 6a01 	vldr	s13, [r3, #4]
 8019d98:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019d9c:	3a01      	subs	r2, #1
 8019d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019da2:	ed83 7a00 	vstr	s14, [r3]
 8019da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019daa:	edc3 7a01 	vstr	s15, [r3, #4]
 8019dae:	e78f      	b.n	8019cd0 <__kernel_rem_pio2f+0x3cc>
 8019db0:	ed33 7a01 	vldmdb	r3!, {s14}
 8019db4:	3c01      	subs	r4, #1
 8019db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019dba:	e78f      	b.n	8019cdc <__kernel_rem_pio2f+0x3d8>
 8019dbc:	eef1 6a66 	vneg.f32	s13, s13
 8019dc0:	eeb1 7a47 	vneg.f32	s14, s14
 8019dc4:	edc7 6a00 	vstr	s13, [r7]
 8019dc8:	ed87 7a01 	vstr	s14, [r7, #4]
 8019dcc:	eef1 7a67 	vneg.f32	s15, s15
 8019dd0:	e790      	b.n	8019cf4 <__kernel_rem_pio2f+0x3f0>
 8019dd2:	bf00      	nop

08019dd4 <floorf>:
 8019dd4:	ee10 3a10 	vmov	r3, s0
 8019dd8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019ddc:	3a7f      	subs	r2, #127	@ 0x7f
 8019dde:	2a16      	cmp	r2, #22
 8019de0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019de4:	dc2b      	bgt.n	8019e3e <floorf+0x6a>
 8019de6:	2a00      	cmp	r2, #0
 8019de8:	da12      	bge.n	8019e10 <floorf+0x3c>
 8019dea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019e50 <floorf+0x7c>
 8019dee:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019df2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dfa:	dd06      	ble.n	8019e0a <floorf+0x36>
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	da24      	bge.n	8019e4a <floorf+0x76>
 8019e00:	2900      	cmp	r1, #0
 8019e02:	4b14      	ldr	r3, [pc, #80]	@ (8019e54 <floorf+0x80>)
 8019e04:	bf08      	it	eq
 8019e06:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019e0a:	ee00 3a10 	vmov	s0, r3
 8019e0e:	4770      	bx	lr
 8019e10:	4911      	ldr	r1, [pc, #68]	@ (8019e58 <floorf+0x84>)
 8019e12:	4111      	asrs	r1, r2
 8019e14:	420b      	tst	r3, r1
 8019e16:	d0fa      	beq.n	8019e0e <floorf+0x3a>
 8019e18:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8019e50 <floorf+0x7c>
 8019e1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019e20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e28:	ddef      	ble.n	8019e0a <floorf+0x36>
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	bfbe      	ittt	lt
 8019e2e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019e32:	fa40 f202 	asrlt.w	r2, r0, r2
 8019e36:	189b      	addlt	r3, r3, r2
 8019e38:	ea23 0301 	bic.w	r3, r3, r1
 8019e3c:	e7e5      	b.n	8019e0a <floorf+0x36>
 8019e3e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019e42:	d3e4      	bcc.n	8019e0e <floorf+0x3a>
 8019e44:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019e48:	4770      	bx	lr
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	e7dd      	b.n	8019e0a <floorf+0x36>
 8019e4e:	bf00      	nop
 8019e50:	7149f2ca 	.word	0x7149f2ca
 8019e54:	bf800000 	.word	0xbf800000
 8019e58:	007fffff 	.word	0x007fffff

08019e5c <_init>:
 8019e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e5e:	bf00      	nop
 8019e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e62:	bc08      	pop	{r3}
 8019e64:	469e      	mov	lr, r3
 8019e66:	4770      	bx	lr

08019e68 <_fini>:
 8019e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e6a:	bf00      	nop
 8019e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e6e:	bc08      	pop	{r3}
 8019e70:	469e      	mov	lr, r3
 8019e72:	4770      	bx	lr
