
code_propre_cansat_Freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a308  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bec  0801a4e8  0801a4e8  0001b4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d0d4  0801d0d4  0001f214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d0d4  0801d0d4  0001e0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d0dc  0801d0dc  0001f214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d0dc  0801d0dc  0001e0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d0e0  0801d0e0  0001e0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0801d0e4  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000475c  20000218  0801d2f8  0001f218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004974  0801d2f8  0001f974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036dfd  00000000  00000000  0001f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000078b8  00000000  00000000  00056041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002880  00000000  00000000  0005d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f28  00000000  00000000  00060180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1ac  00000000  00000000  000620a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038d27  00000000  00000000  0008c254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef5e0  00000000  00000000  000c4f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b455b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c218  00000000  00000000  001b45a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001c07b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000218 	.word	0x20000218
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801a4d0 	.word	0x0801a4d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000021c 	.word	0x2000021c
 800021c:	0801a4d0 	.word	0x0801a4d0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800107a:	2354      	movs	r3, #84	@ 0x54
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2210      	movs	r2, #16
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4838      	ldr	r0, [pc, #224]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f007 f9c4 	bl	8008420 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001098:	234c      	movs	r3, #76	@ 0x4c
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2211      	movs	r2, #17
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4830      	ldr	r0, [pc, #192]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f007 f9b5 	bl	8008420 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2212      	movs	r2, #18
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	4829      	ldr	r0, [pc, #164]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f007 f9a6 	bl	8008420 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2215      	movs	r2, #21
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f007 f997 	bl	8008420 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	481a      	ldr	r0, [pc, #104]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f007 f988 	bl	8008420 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2217      	movs	r2, #23
 8001126:	21d6      	movs	r1, #214	@ 0xd6
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800112a:	f007 f979 	bl	8008420 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	221e      	movs	r2, #30
 8001144:	21d6      	movs	r1, #214	@ 0xd6
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001148:	f007 fa7e 	bl	8008648 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <Init_HighPerf_Mode_6_axis+0x108>)
 8001158:	f014 f95a 	bl	8015410 <puts>
        }
        if (status & 0x02) {
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <Init_HighPerf_Mode_6_axis+0x10c>)
 8001168:	f014 f952 	bl	8015410 <puts>
        }

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200003a0 	.word	0x200003a0
 8001178:	0801a524 	.word	0x0801a524
 800117c:	0801a558 	.word	0x0801a558

08001180 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	@ 0x38
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030b 	add.w	r3, r7, #11
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	221e      	movs	r2, #30
 800119c:	21d6      	movs	r1, #214	@ 0xd6
 800119e:	4874      	ldr	r0, [pc, #464]	@ (8001370 <Read_sensor_data+0x1f0>)
 80011a0:	f007 fa52 	bl	8008648 <HAL_I2C_Mem_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 80011a8:	7ffb      	ldrb	r3, [r7, #31]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <Read_sensor_data+0x32>
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	e0da      	b.n	8001368 <Read_sensor_data+0x1e8>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <Read_sensor_data+0x46>
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0ce      	b.n	8001368 <Read_sensor_data+0x1e8>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ce:	e044      	b.n	800125a <Read_sensor_data+0xda>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	3311      	adds	r3, #17
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011e0:	7f3b      	ldrb	r3, [r7, #28]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 030a 	add.w	r3, r7, #10
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	21d6      	movs	r1, #214	@ 0xd6
 80011f8:	485d      	ldr	r0, [pc, #372]	@ (8001370 <Read_sensor_data+0x1f0>)
 80011fa:	f007 fa25 	bl	8008648 <HAL_I2C_Mem_Read>
 80011fe:	4603      	mov	r3, r0
 8001200:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <Read_sensor_data+0x8c>
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	e0ad      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800120c:	7efb      	ldrb	r3, [r7, #27]
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0309 	add.w	r3, r7, #9
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	21d6      	movs	r1, #214	@ 0xd6
 8001224:	4852      	ldr	r0, [pc, #328]	@ (8001370 <Read_sensor_data+0x1f0>)
 8001226:	f007 fa0f 	bl	8008648 <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <Read_sensor_data+0xb8>
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	e097      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001238:	7a7b      	ldrb	r3, [r7, #9]
 800123a:	b21b      	sxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7abb      	ldrb	r3, [r7, #10]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	3328      	adds	r3, #40	@ 0x28
 800124e:	443b      	add	r3, r7
 8001250:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	3301      	adds	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	2b02      	cmp	r3, #2
 800125e:	ddb7      	ble.n	80011d0 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	e044      	b.n	80012f0 <Read_sensor_data+0x170>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	3314      	adds	r3, #20
 800126a:	b2db      	uxtb	r3, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001270:	7fbb      	ldrb	r3, [r7, #30]
 8001272:	3301      	adds	r3, #1
 8001274:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001276:	7fbb      	ldrb	r3, [r7, #30]
 8001278:	b29a      	uxth	r2, r3
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f107 030a 	add.w	r3, r7, #10
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	21d6      	movs	r1, #214	@ 0xd6
 800128e:	4838      	ldr	r0, [pc, #224]	@ (8001370 <Read_sensor_data+0x1f0>)
 8001290:	f007 f9da 	bl	8008648 <HAL_I2C_Mem_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Read_sensor_data+0x122>
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	e062      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80012a2:	7f7b      	ldrb	r3, [r7, #29]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	f107 0309 	add.w	r3, r7, #9
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	21d6      	movs	r1, #214	@ 0xd6
 80012ba:	482d      	ldr	r0, [pc, #180]	@ (8001370 <Read_sensor_data+0x1f0>)
 80012bc:	f007 f9c4 	bl	8008648 <HAL_I2C_Mem_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <Read_sensor_data+0x14e>
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	e04c      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80012ce:	7a7b      	ldrb	r3, [r7, #9]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3328      	adds	r3, #40	@ 0x28
 80012e4:	443b      	add	r3, r7
 80012e6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	ddb7      	ble.n	8001266 <Read_sensor_data+0xe6>
	}
	data->AccelX =(float) accel_data[0]*1.0;
 80012f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a00 	vstr	s15, [r3]
	data->AccelY =(float) accel_data[1]*1.0;
 8001308:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a01 	vstr	s15, [r3, #4]
	data->AccelZ =(float) accel_data[2]*1.0;
 800131a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edc3 7a02 	vstr	s15, [r3, #8]
	data->GyroX = gyro_data[0];
 800132c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 8001336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 8001340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001344:	461a      	mov	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 800134a:	f000 f815 	bl	8001378 <Read_temp>
 800134e:	ec51 0b10 	vmov	r0, r1, d0
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <Read_sensor_data+0x1f4>)
 8001358:	f7fe ffbe 	bl	80002d8 <__aeabi_dsub>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200003a0 	.word	0x200003a0
 8001374:	40210000 	.word	0x40210000

08001378 <Read_temp>:

double Read_temp() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2301      	movs	r3, #1
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	2220      	movs	r2, #32
 8001390:	21d6      	movs	r1, #214	@ 0xd6
 8001392:	481f      	ldr	r0, [pc, #124]	@ (8001410 <Read_temp+0x98>)
 8001394:	f007 f958 	bl	8008648 <HAL_I2C_Mem_Read>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2221      	movs	r2, #33	@ 0x21
 80013ae:	21d6      	movs	r1, #214	@ 0xd6
 80013b0:	4817      	ldr	r0, [pc, #92]	@ (8001410 <Read_temp+0x98>)
 80013b2:	f007 f949 	bl	8008648 <HAL_I2C_Mem_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 80013ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8d0 	bl	8000574 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <Read_temp+0x9c>)
 80013da:	f7ff fa5f 	bl	800089c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <Read_temp+0xa0>)
 80013ec:	f7fe ff76 	bl	80002dc <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 80013f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001400:	eeb0 0a47 	vmov.f32	s0, s14
 8001404:	eef0 0a67 	vmov.f32	s1, s15
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200003a0 	.word	0x200003a0
 8001414:	40700000 	.word	0x40700000
 8001418:	40390000 	.word	0x40390000
 800141c:	00000000 	.word	0x00000000

08001420 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	if (GNSS->uartWorkingBuffer[0] == 0xB5 && GNSS->uartWorkingBuffer[1] == 0x62) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7a1b      	ldrb	r3, [r3, #8]
 800142c:	2bb5      	cmp	r3, #181	@ 0xb5
 800142e:	f040 81d7 	bne.w	80017e0 <GNSS_ParsePVTData+0x3c0>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a5b      	ldrb	r3, [r3, #9]
 8001436:	2b62      	cmp	r3, #98	@ 0x62
 8001438:	f040 81d2 	bne.w	80017e0 <GNSS_ParsePVTData+0x3c0>
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7c9a      	ldrb	r2, [r3, #18]
 8001440:	4b9f      	ldr	r3, [pc, #636]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001442:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7c9a      	ldrb	r2, [r3, #18]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7cda      	ldrb	r2, [r3, #19]
 8001452:	4b9b      	ldr	r3, [pc, #620]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001454:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7cda      	ldrb	r2, [r3, #19]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 8001460:	4b97      	ldr	r3, [pc, #604]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7d1a      	ldrb	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7d5a      	ldrb	r2, [r3, #21]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7d9a      	ldrb	r2, [r3, #22]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7dda      	ldrb	r2, [r3, #23]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e1a      	ldrb	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

	for (int var = 0; var < 4; ++var) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014b8:	e017      	b.n	80014ea <GNSS_ParsePVTData+0xca>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 80014ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014bc:	331e      	adds	r3, #30
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	7a19      	ldrb	r1, [r3, #8]
 80014c4:	4a7f      	ldr	r2, [pc, #508]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 80014ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d0:	331e      	adds	r3, #30
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	7a19      	ldrb	r1, [r3, #8]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014dc:	4413      	add	r3, r2
 80014de:	3380      	adds	r3, #128	@ 0x80
 80014e0:	460a      	mov	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e6:	3301      	adds	r3, #1
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	dde4      	ble.n	80014ba <GNSS_ParsePVTData+0x9a>
	}
	GNSS->lon = iLong.iLong;
 80014f0:	4b74      	ldr	r3, [pc, #464]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	67da      	str	r2, [r3, #124]	@ 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80014f8:	4b72      	ldr	r3, [pc, #456]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80016c8 <GNSS_ParsePVTData+0x2a8>
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001516:	e017      	b.n	8001548 <GNSS_ParsePVTData+0x128>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 8001518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151a:	3322      	adds	r3, #34	@ 0x22
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	7a19      	ldrb	r1, [r3, #8]
 8001522:	4a68      	ldr	r2, [pc, #416]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001526:	4413      	add	r3, r2
 8001528:	460a      	mov	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 800152c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152e:	3322      	adds	r3, #34	@ 0x22
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	7a19      	ldrb	r1, [r3, #8]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153a:	4413      	add	r3, r2
 800153c:	3388      	adds	r3, #136	@ 0x88
 800153e:	460a      	mov	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	3301      	adds	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154a:	2b03      	cmp	r3, #3
 800154c:	dde4      	ble.n	8001518 <GNSS_ParsePVTData+0xf8>
	}
	GNSS->lat = iLong.iLong;
 800154e:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001558:	4b5a      	ldr	r3, [pc, #360]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001564:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80016c8 <GNSS_ParsePVTData+0x2a8>
 8001568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
 8001576:	e00c      	b.n	8001592 <GNSS_ParsePVTData+0x172>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	3326      	adds	r3, #38	@ 0x26
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	7a19      	ldrb	r1, [r3, #8]
 8001582:	4a50      	ldr	r2, [pc, #320]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	4413      	add	r3, r2
 8001588:	460a      	mov	r2, r1
 800158a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	3301      	adds	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	2b03      	cmp	r3, #3
 8001596:	ddef      	ble.n	8001578 <GNSS_ParsePVTData+0x158>
	}
	GNSS->height = iLong.iLong;
 8001598:	4b4a      	ldr	r3, [pc, #296]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->fheight=(float)GNSS->height/1000.0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 80015b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98


	for (int var = 0; var < 4; ++var) {
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	e017      	b.n	80015f4 <GNSS_ParsePVTData+0x1d4>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	332a      	adds	r3, #42	@ 0x2a
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	7a19      	ldrb	r1, [r3, #8]
 80015ce:	4a3d      	ldr	r2, [pc, #244]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	4413      	add	r3, r2
 80015d4:	460a      	mov	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	332a      	adds	r3, #42	@ 0x2a
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	7a19      	ldrb	r1, [r3, #8]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	4413      	add	r3, r2
 80015e8:	33a0      	adds	r3, #160	@ 0xa0
 80015ea:	460a      	mov	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	3301      	adds	r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	dde4      	ble.n	80015c4 <GNSS_ParsePVTData+0x1a4>
	}
	GNSS->hMSL = iLong.iLong;
 80015fa:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001612:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 8001616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	e00c      	b.n	8001640 <GNSS_ParsePVTData+0x220>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	332e      	adds	r3, #46	@ 0x2e
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	7a19      	ldrb	r1, [r3, #8]
 8001630:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	460a      	mov	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b03      	cmp	r3, #3
 8001644:	ddef      	ble.n	8001626 <GNSS_ParsePVTData+0x206>
	}
	GNSS->hAcc = uLong.uLong;
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GNSS->fhACC=(float)GNSS->hAcc/1000.0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165e:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 8001662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac

	for (int var = 0; var < 4; ++var) {
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	e00c      	b.n	800168c <GNSS_ParsePVTData+0x26c>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	3332      	adds	r3, #50	@ 0x32
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	7a19      	ldrb	r1, [r3, #8]
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	3301      	adds	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b03      	cmp	r3, #3
 8001690:	ddef      	ble.n	8001672 <GNSS_ParsePVTData+0x252>
	}
	GNSS->vAcc = uLong.uLong;
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016aa:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 80016ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	for (int var = 0; var < 4; ++var) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e022      	b.n	8001704 <GNSS_ParsePVTData+0x2e4>
 80016be:	bf00      	nop
 80016c0:	20000234 	.word	0x20000234
 80016c4:	2000023c 	.word	0x2000023c
 80016c8:	4b189680 	.word	0x4b189680
 80016cc:	447a0000 	.word	0x447a0000
 80016d0:	20000238 	.word	0x20000238
			iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	333e      	adds	r3, #62	@ 0x3e
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	7a19      	ldrb	r1, [r3, #8]
 80016de:	4a44      	ldr	r2, [pc, #272]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4413      	add	r3, r2
 80016e4:	460a      	mov	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
			GNSS->vspeedBytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	333e      	adds	r3, #62	@ 0x3e
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	7a19      	ldrb	r1, [r3, #8]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4413      	add	r3, r2
 80016f8:	33c8      	adds	r3, #200	@ 0xc8
 80016fa:	460a      	mov	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b03      	cmp	r3, #3
 8001708:	dde4      	ble.n	80016d4 <GNSS_ParsePVTData+0x2b4>
		}
	GNSS->vspeed = iLong.iLong;
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	GNSS->fvspeed=(float)GNSS->vspeed/1000.0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001722:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80017f4 <GNSS_ParsePVTData+0x3d4>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

	for (int var = 0; var < 4; ++var) {
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	e017      	b.n	8001766 <GNSS_ParsePVTData+0x346>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	3342      	adds	r3, #66	@ 0x42
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	7a19      	ldrb	r1, [r3, #8]
 8001740:	4a2b      	ldr	r2, [pc, #172]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4413      	add	r3, r2
 8001746:	460a      	mov	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3342      	adds	r3, #66	@ 0x42
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	7a19      	ldrb	r1, [r3, #8]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	33bc      	adds	r3, #188	@ 0xbc
 800175c:	460a      	mov	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	3301      	adds	r3, #1
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b03      	cmp	r3, #3
 800176a:	dde4      	ble.n	8001736 <GNSS_ParsePVTData+0x316>
	}
	GNSS->gSpeed = iLong.iLong;
 800176c:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80017f4 <GNSS_ParsePVTData+0x3d4>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	for (int var = 0; var < 4; ++var) {
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00c      	b.n	80017b2 <GNSS_ParsePVTData+0x392>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3346      	adds	r3, #70	@ 0x46
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	7a19      	ldrb	r1, [r3, #8]
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	460a      	mov	r2, r1
 80017aa:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	ddef      	ble.n	8001798 <GNSS_ParsePVTData+0x378>
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fed9 	bl	8000574 <__aeabi_i2d>
 80017c2:	a309      	add	r3, pc, #36	@ (adr r3, 80017e8 <GNSS_ParsePVTData+0x3c8>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ff3e 	bl	8000648 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9e8 	bl	8000ba8 <__aeabi_d2iz>
 80017d8:	4602      	mov	r2, r0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
}
 80017e0:	bf00      	nop
 80017e2:	3730      	adds	r7, #48	@ 0x30
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	88e368f1 	.word	0x88e368f1
 80017ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80017f0:	2000023c 	.word	0x2000023c
 80017f4:	447a0000 	.word	0x447a0000

080017f8 <distancecalc>:
//		manual.
	return 0;
}


float distancecalc(float lat1, float lat2, float long1, float long2,float alt1, float alt2){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	ed2d 8b02 	vpush	{d8}
 80017fe:	b08c      	sub	sp, #48	@ 0x30
 8001800:	af00      	add	r7, sp, #0
 8001802:	ed87 0a05 	vstr	s0, [r7, #20]
 8001806:	edc7 0a04 	vstr	s1, [r7, #16]
 800180a:	ed87 1a03 	vstr	s2, [r7, #12]
 800180e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001812:	ed87 2a01 	vstr	s4, [r7, #4]
 8001816:	edc7 2a00 	vstr	s5, [r7]

    // Convertir en radians
    lat1 *= DEG_TO_RAD;
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7fe febc 	bl	8000598 <__aeabi_f2d>
 8001820:	a375      	add	r3, pc, #468	@ (adr r3, 80019f8 <distancecalc+0x200>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe ff0f 	bl	8000648 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff fa01 	bl	8000c38 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	617b      	str	r3, [r7, #20]
    lat2 *= DEG_TO_RAD;
 800183a:	6938      	ldr	r0, [r7, #16]
 800183c:	f7fe feac 	bl	8000598 <__aeabi_f2d>
 8001840:	a36d      	add	r3, pc, #436	@ (adr r3, 80019f8 <distancecalc+0x200>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe feff 	bl	8000648 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff f9f1 	bl	8000c38 <__aeabi_d2f>
 8001856:	4603      	mov	r3, r0
 8001858:	613b      	str	r3, [r7, #16]
    long1 *= DEG_TO_RAD;
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7fe fe9c 	bl	8000598 <__aeabi_f2d>
 8001860:	a365      	add	r3, pc, #404	@ (adr r3, 80019f8 <distancecalc+0x200>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7fe feef 	bl	8000648 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff f9e1 	bl	8000c38 <__aeabi_d2f>
 8001876:	4603      	mov	r3, r0
 8001878:	60fb      	str	r3, [r7, #12]
    long2 *= DEG_TO_RAD;
 800187a:	68b8      	ldr	r0, [r7, #8]
 800187c:	f7fe fe8c 	bl	8000598 <__aeabi_f2d>
 8001880:	a35d      	add	r3, pc, #372	@ (adr r3, 80019f8 <distancecalc+0x200>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe fedf 	bl	8000648 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff f9d1 	bl	8000c38 <__aeabi_d2f>
 8001896:	4603      	mov	r3, r0
 8001898:	60bb      	str	r3, [r7, #8]

    float dlat = lat2 - lat1;
 800189a:	ed97 7a04 	vldr	s14, [r7, #16]
 800189e:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float dlon = long2 - long1;
 80018aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80018ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float a = sinf(dlat / 2) * sinf(dlat / 2) + cosf(lat1) * cosf(lat2) * sinf(dlon / 2) * sinf(dlon / 2);
 80018ba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018be:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018c6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ca:	f017 fb69 	bl	8018fa0 <sinf>
 80018ce:	eeb0 8a40 	vmov.f32	s16, s0
 80018d2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018de:	eeb0 0a47 	vmov.f32	s0, s14
 80018e2:	f017 fb5d 	bl	8018fa0 <sinf>
 80018e6:	eef0 7a40 	vmov.f32	s15, s0
 80018ea:	ee28 8a27 	vmul.f32	s16, s16, s15
 80018ee:	ed97 0a05 	vldr	s0, [r7, #20]
 80018f2:	f017 fb11 	bl	8018f18 <cosf>
 80018f6:	eef0 8a40 	vmov.f32	s17, s0
 80018fa:	ed97 0a04 	vldr	s0, [r7, #16]
 80018fe:	f017 fb0b 	bl	8018f18 <cosf>
 8001902:	eef0 7a40 	vmov.f32	s15, s0
 8001906:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800190a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800190e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001912:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001916:	eeb0 0a47 	vmov.f32	s0, s14
 800191a:	f017 fb41 	bl	8018fa0 <sinf>
 800191e:	eef0 7a40 	vmov.f32	s15, s0
 8001922:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001926:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800192a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800192e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001932:	eeb0 0a47 	vmov.f32	s0, s14
 8001936:	f017 fb33 	bl	8018fa0 <sinf>
 800193a:	eef0 7a40 	vmov.f32	s15, s0
 800193e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001942:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001946:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if(a<1.0){
 800194a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800194e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	d53e      	bpl.n	80019da <distancecalc+0x1e2>

    float c = 2.0f * atan2f(sqrtf(a), sqrtf(1.0f - a));
 800195c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001960:	f017 fabc 	bl	8018edc <sqrtf>
 8001964:	eeb0 8a40 	vmov.f32	s16, s0
 8001968:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800196c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f017 fab0 	bl	8018edc <sqrtf>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
 8001980:	eef0 0a67 	vmov.f32	s1, s15
 8001984:	eeb0 0a48 	vmov.f32	s0, s16
 8001988:	f017 fa20 	bl	8018dcc <atan2f>
 800198c:	eef0 7a40 	vmov.f32	s15, s0
 8001990:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001994:	edc7 7a08 	vstr	s15, [r7, #32]

    float distanceplat = EARTH_RADIUS * c;
 8001998:	edd7 7a08 	vldr	s15, [r7, #32]
 800199c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019f0 <distancecalc+0x1f8>
 80019a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a4:	edc7 7a07 	vstr	s15, [r7, #28]

    float dalt = alt2 - alt1;
 80019a8:	ed97 7a00 	vldr	s14, [r7]
 80019ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b4:	edc7 7a06 	vstr	s15, [r7, #24]
    return sqrtf(distanceplat * distanceplat + dalt * dalt); // distance 3D
 80019b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80019bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019cc:	eeb0 0a67 	vmov.f32	s0, s15
 80019d0:	f017 fa84 	bl	8018edc <sqrtf>
 80019d4:	eef0 7a40 	vmov.f32	s15, s0
 80019d8:	e001      	b.n	80019de <distancecalc+0x1e6>
    }
    else{

    	return 0.0;
 80019da:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80019f4 <distancecalc+0x1fc>
    }
}
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	3730      	adds	r7, #48	@ 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	ecbd 8b02 	vpop	{d8}
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	f3af 8000 	nop.w
 80019f0:	4ac26d70 	.word	0x4ac26d70
 80019f4:	00000000 	.word	0x00000000
 80019f8:	a2529d39 	.word	0xa2529d39
 80019fc:	3f91df46 	.word	0x3f91df46

08001a00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	@ 0x30
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2220      	movs	r2, #32
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f013 fe31 	bl	8015680 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a1e:	4b40      	ldr	r3, [pc, #256]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001a24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a26:	4b3e      	ldr	r3, [pc, #248]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a34:	4b3a      	ldr	r3, [pc, #232]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001a3a:	4b39      	ldr	r3, [pc, #228]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a40:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a46:	4b36      	ldr	r3, [pc, #216]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a48:	2208      	movs	r2, #8
 8001a4a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a4c:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a52:	4b33      	ldr	r3, [pc, #204]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001a58:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5e:	4b30      	ldr	r3, [pc, #192]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a66:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a72:	4b2b      	ldr	r3, [pc, #172]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a7a:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a88:	4825      	ldr	r0, [pc, #148]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001a8a:	f004 fbb5 	bl	80061f8 <HAL_ADC_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001a94:	f001 fa76 	bl	8002f84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	481f      	ldr	r0, [pc, #124]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001aa4:	f005 fd7a 	bl	800759c <HAL_ADCEx_MultiModeConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001aae:	f001 fa69 	bl	8002f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <MX_ADC1_Init+0x124>)
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab6:	2306      	movs	r3, #6
 8001ab8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001aba:	2307      	movs	r3, #7
 8001abc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001abe:	237f      	movs	r3, #127	@ 0x7f
 8001ac0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001ad0:	f005 f802 	bl	8006ad8 <HAL_ADC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001ada:	f001 fa53 	bl	8002f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_ADC1_Init+0x128>)
 8001ae0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480d      	ldr	r0, [pc, #52]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001aec:	f004 fff4 	bl	8006ad8 <HAL_ADC_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001af6:	f001 fa45 	bl	8002f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <MX_ADC1_Init+0x12c>)
 8001afc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001afe:	2312      	movs	r3, #18
 8001b00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	@ (8001b20 <MX_ADC1_Init+0x120>)
 8001b08:	f004 ffe6 	bl	8006ad8 <HAL_ADC_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001b12:	f001 fa37 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	3730      	adds	r7, #48	@ 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000240 	.word	0x20000240
 8001b24:	cb840000 	.word	0xcb840000
 8001b28:	c3210000 	.word	0xc3210000
 8001b2c:	0c900008 	.word	0x0c900008

08001b30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b09a      	sub	sp, #104	@ 0x68
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2244      	movs	r2, #68	@ 0x44
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f013 fd95 	bl	8015680 <memset>
  if(adcHandle->Instance==ADC1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b5e:	d167      	bne.n	8001c30 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4618      	mov	r0, r3
 8001b72:	f007 ffed 	bl	8009b50 <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b7c:	f001 fa02 	bl	8002f84 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b80:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <HAL_ADC_MspInit+0x108>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a2c      	ldr	r2, [pc, #176]	@ (8001c38 <HAL_ADC_MspInit+0x108>)
 8001b86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <HAL_ADC_MspInit+0x108>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <HAL_ADC_MspInit+0x108>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	4a26      	ldr	r2, [pc, #152]	@ (8001c38 <HAL_ADC_MspInit+0x108>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_ADC_MspInit+0x108>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc6:	f006 f9ab 	bl	8007f20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <HAL_ADC_MspInit+0x110>)
 8001bce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001bd2:	2205      	movs	r2, #5
 8001bd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001bea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001c06:	f005 fe4d 	bl	80078a4 <HAL_DMA_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001c10:	f001 f9b8 	bl	8002f84 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <HAL_ADC_MspInit+0x10c>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2105      	movs	r1, #5
 8001c24:	2012      	movs	r0, #18
 8001c26:	f005 fe15 	bl	8007854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c2a:	2012      	movs	r0, #18
 8001c2c:	f005 fe2c 	bl	8007888 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c30:	bf00      	nop
 8001c32:	3768      	adds	r7, #104	@ 0x68
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	200002ac 	.word	0x200002ac
 8001c40:	4002001c 	.word	0x4002001c
 8001c44:	00000000 	.word	0x00000000

08001c48 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001c48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c5a:	f040 8097 	bne.w	8001d8c <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001c5e:	4b52      	ldr	r3, [pc, #328]	@ (8001da8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc86 	bl	8000574 <__aeabi_i2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	a14a      	add	r1, pc, #296	@ (adr r1, 8001d98 <HAL_ADC_ConvCpltCallback+0x150>)
 8001c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c72:	f7fe fe13 	bl	800089c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ffdb 	bl	8000c38 <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a49      	ldr	r2, [pc, #292]	@ (8001dac <HAL_ADC_ConvCpltCallback+0x164>)
 8001c86:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001c88:	4b49      	ldr	r3, [pc, #292]	@ (8001db0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	4b49      	ldr	r3, [pc, #292]	@ (8001db4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c98:	ee17 0a90 	vmov	r0, s15
 8001c9c:	f7fe fc7c 	bl	8000598 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	4943      	ldr	r1, [pc, #268]	@ (8001db8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001caa:	f7fe fdf7 	bl	800089c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001da8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001cb8:	885b      	ldrh	r3, [r3, #2]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc5a 	bl	8000574 <__aeabi_i2d>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	460d      	mov	r5, r1
 8001cc4:	4b39      	ldr	r3, [pc, #228]	@ (8001dac <HAL_ADC_ConvCpltCallback+0x164>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc65 	bl	8000598 <__aeabi_f2d>
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <HAL_ADC_ConvCpltCallback+0x174>)
 8001cd4:	f7fe fde2 	bl	800089c <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fcb2 	bl	8000648 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
 8001cec:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc51 	bl	8000598 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7fe faeb 	bl	80002d8 <__aeabi_dsub>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4640      	mov	r0, r8
 8001d08:	4649      	mov	r1, r9
 8001d0a:	f7fe fc9d 	bl	8000648 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe ff8f 	bl	8000c38 <__aeabi_d2f>
 8001d1a:	ee07 0a10 	vmov	s14, r0
 8001d1e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_ADC_ConvCpltCallback+0x178>)
 8001d28:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001d2e:	889b      	ldrh	r3, [r3, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fc1f 	bl	8000574 <__aeabi_i2d>
 8001d36:	a31a      	add	r3, pc, #104	@ (adr r3, 8001da0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe fdae 	bl	800089c <__aeabi_ddiv>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_ADC_ConvCpltCallback+0x174>)
 8001d4e:	f7fe fc7b 	bl	8000648 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4614      	mov	r4, r2
 8001d58:	461d      	mov	r5, r3
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <HAL_ADC_ConvCpltCallback+0x164>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fc1a 	bl	8000598 <__aeabi_f2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fc6c 	bl	8000648 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe ff5e 	bl	8000c38 <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001d80:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001d82:	2203      	movs	r2, #3
 8001d84:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001d86:	4810      	ldr	r0, [pc, #64]	@ (8001dc8 <HAL_ADC_ConvCpltCallback+0x180>)
 8001d88:	f004 fbba 	bl	8006500 <HAL_ADC_Start_DMA>

	}

}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d96:	bf00      	nop
 8001d98:	d70a3d70 	.word	0xd70a3d70
 8001d9c:	40b36323 	.word	0x40b36323
 8001da0:	00000000 	.word	0x00000000
 8001da4:	40affe00 	.word	0x40affe00
 8001da8:	20000b0c 	.word	0x20000b0c
 8001dac:	20000b18 	.word	0x20000b18
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004
 8001db8:	40590000 	.word	0x40590000
 8001dbc:	40080000 	.word	0x40080000
 8001dc0:	20000b14 	.word	0x20000b14
 8001dc4:	20000b1c 	.word	0x20000b1c
 8001dc8:	20000240 	.word	0x20000240

08001dcc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b0a0      	sub	sp, #128	@ 0x80
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001dd6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00f ff67 	bl	8011cae <osMutexCreate>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a37      	ldr	r2, [pc, #220]	@ (8001ec0 <MX_FREERTOS_Init+0xf4>)
 8001de4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityNormal, 0, 300);
 8001de6:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <MX_FREERTOS_Init+0xf8>)
 8001de8:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8001dec:	461d      	mov	r5, r3
 8001dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df2:	682b      	ldr	r3, [r5, #0]
 8001df4:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001df6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00f ff1b 	bl	8011c38 <osThreadCreate>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4a30      	ldr	r2, [pc, #192]	@ (8001ec8 <MX_FREERTOS_Init+0xfc>)
 8001e06:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSSParse */
  osThreadDef(GNSSParse, StartGNSSParse, osPriorityAboveNormal, 0, 256);
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <MX_FREERTOS_Init+0x100>)
 8001e0a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001e0e:	461d      	mov	r5, r3
 8001e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	6023      	str	r3, [r4, #0]
  GNSSParseHandle = osThreadCreate(osThread(GNSSParse), NULL);
 8001e18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f00f ff0a 	bl	8011c38 <osThreadCreate>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed0 <MX_FREERTOS_Init+0x104>)
 8001e28:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 512);
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <MX_FREERTOS_Init+0x108>)
 8001e2c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001e30:	461d      	mov	r5, r3
 8001e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e36:	682b      	ldr	r3, [r5, #0]
 8001e38:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 8001e3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00f fef9 	bl	8011c38 <osThreadCreate>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a23      	ldr	r2, [pc, #140]	@ (8001ed8 <MX_FREERTOS_Init+0x10c>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo */
  osThreadDef(servo, Startservo, osPriorityAboveNormal, 0, 256);
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <MX_FREERTOS_Init+0x110>)
 8001e4e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001e52:	461d      	mov	r5, r3
 8001e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	6023      	str	r3, [r4, #0]
  servoHandle = osThreadCreate(osThread(servo), NULL);
 8001e5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00f fee8 	bl	8011c38 <osThreadCreate>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <MX_FREERTOS_Init+0x114>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of distancecalc */
  osThreadDef(distancecalc, Startdistancecalc, osPriorityBelowNormal, 0, 256);
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_FREERTOS_Init+0x118>)
 8001e70:	f107 0418 	add.w	r4, r7, #24
 8001e74:	461d      	mov	r5, r3
 8001e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7a:	682b      	ldr	r3, [r5, #0]
 8001e7c:	6023      	str	r3, [r4, #0]
  distancecalcHandle = osThreadCreate(osThread(distancecalc), NULL);
 8001e7e:	f107 0318 	add.w	r3, r7, #24
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00f fed7 	bl	8011c38 <osThreadCreate>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a16      	ldr	r2, [pc, #88]	@ (8001ee8 <MX_FREERTOS_Init+0x11c>)
 8001e8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityHigh, 0, 256);
 8001e90:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <MX_FREERTOS_Init+0x120>)
 8001e92:	1d3c      	adds	r4, r7, #4
 8001e94:	461d      	mov	r5, r3
 8001e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9a:	682b      	ldr	r3, [r5, #0]
 8001e9c:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f00f fec8 	bl	8011c38 <osThreadCreate>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <MX_FREERTOS_Init+0x124>)
 8001eac:	6013      	str	r3, [r2, #0]


#endif
#ifdef PARTIE_BAS

  osThreadSuspend(servoHandle);
 8001eae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <MX_FREERTOS_Init+0x114>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f010 f841 	bl	8011f3a <osThreadSuspend>

#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001eb8:	bf00      	nop
 8001eba:	3780      	adds	r7, #128	@ 0x80
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	20000348 	.word	0x20000348
 8001ec4:	0801a594 	.word	0x0801a594
 8001ec8:	20000330 	.word	0x20000330
 8001ecc:	0801a5b4 	.word	0x0801a5b4
 8001ed0:	20000334 	.word	0x20000334
 8001ed4:	0801a5d4 	.word	0x0801a5d4
 8001ed8:	20000338 	.word	0x20000338
 8001edc:	0801a5f0 	.word	0x0801a5f0
 8001ee0:	2000033c 	.word	0x2000033c
 8001ee4:	0801a614 	.word	0x0801a614
 8001ee8:	20000340 	.word	0x20000340
 8001eec:	0801a638 	.word	0x0801a638
 8001ef0:	20000344 	.word	0x20000344

08001ef4 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
  /* Infinite loop */
  for(;;)
  {
	  if(pbmseeker_flag==0){
 8001efc:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <Startstatemachine+0xbc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d12d      	bne.n	8001f60 <Startstatemachine+0x6c>
		  if(pbmseeker==0){
 8001f04:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <Startstatemachine+0xc0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10e      	bne.n	8001f2a <Startstatemachine+0x36>
			  ssd1306_SetCursor(32, 40);
 8001f0c:	2128      	movs	r1, #40	@ 0x28
 8001f0e:	2020      	movs	r0, #32
 8001f10:	f001 fbca 	bl	80036a8 <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f001 fa85 	bl	8003424 <ssd1306_Fill>
			  ssd1306_WriteString("OK!", Font_16x24, White);
 8001f1a:	4a27      	ldr	r2, [pc, #156]	@ (8001fb8 <Startstatemachine+0xc4>)
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	ca06      	ldmia	r2, {r1, r2}
 8001f20:	4826      	ldr	r0, [pc, #152]	@ (8001fbc <Startstatemachine+0xc8>)
 8001f22:	f001 fb9b 	bl	800365c <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001f26:	f001 fa95 	bl	8003454 <ssd1306_UpdateScreen>


		  }
		  if(pbmseeker==1){
 8001f2a:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <Startstatemachine+0xc0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10e      	bne.n	8001f50 <Startstatemachine+0x5c>
			  ssd1306_SetCursor(32, 40);
 8001f32:	2128      	movs	r1, #40	@ 0x28
 8001f34:	2020      	movs	r0, #32
 8001f36:	f001 fbb7 	bl	80036a8 <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f001 fa72 	bl	8003424 <ssd1306_Fill>
			  ssd1306_WriteString("PB!", Font_16x24, White);
 8001f40:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <Startstatemachine+0xc4>)
 8001f42:	2301      	movs	r3, #1
 8001f44:	ca06      	ldmia	r2, {r1, r2}
 8001f46:	481e      	ldr	r0, [pc, #120]	@ (8001fc0 <Startstatemachine+0xcc>)
 8001f48:	f001 fb88 	bl	800365c <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001f4c:	f001 fa82 	bl	8003454 <ssd1306_UpdateScreen>


		  }
		  vTaskDelay(pdMS_TO_TICKS(500));
 8001f50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f54:	f010 ff8e 	bl	8012e74 <vTaskDelay>
		  pbmseeker_flag=1;
 8001f58:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <Startstatemachine+0xbc>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e001      	b.n	8001f64 <Startstatemachine+0x70>
	  }
	  else{
	  statemachine();
 8001f60:	f001 fbec 	bl	800373c <statemachine>
	  }
	  ssd1306_UpdateScreen();
 8001f64:	f001 fa76 	bl	8003454 <ssd1306_UpdateScreen>



	  sizestatemachine=uxTaskGetStackHighWaterMark(statemachineHandle);
 8001f68:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <Startstatemachine+0xd0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f011 fc19 	bl	80137a4 <uxTaskGetStackHighWaterMark>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a14      	ldr	r2, [pc, #80]	@ (8001fc8 <Startstatemachine+0xd4>)
 8001f76:	6013      	str	r3, [r2, #0]
	  sizeGNSS=uxTaskGetStackHighWaterMark(GNSSParseHandle);
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <Startstatemachine+0xd8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f011 fc11 	bl	80137a4 <uxTaskGetStackHighWaterMark>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <Startstatemachine+0xdc>)
 8001f86:	6013      	str	r3, [r2, #0]
	  sizesdcard=uxTaskGetStackHighWaterMark(SdcardwriteHandle);
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <Startstatemachine+0xe0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f011 fc09 	bl	80137a4 <uxTaskGetStackHighWaterMark>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <Startstatemachine+0xe4>)
 8001f96:	6013      	str	r3, [r2, #0]
	  sizetarvos=uxTaskGetStackHighWaterMark(tarvosDecodeHandle);
 8001f98:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <Startstatemachine+0xe8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f011 fc01 	bl	80137a4 <uxTaskGetStackHighWaterMark>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <Startstatemachine+0xec>)
 8001fa6:	6013      	str	r3, [r2, #0]





    osDelay(100);
 8001fa8:	2064      	movs	r0, #100	@ 0x64
 8001faa:	f00f fe6c 	bl	8011c86 <osDelay>
	  if(pbmseeker_flag==0){
 8001fae:	e7a5      	b.n	8001efc <Startstatemachine+0x8>
 8001fb0:	20000318 	.word	0x20000318
 8001fb4:	20000e54 	.word	0x20000e54
 8001fb8:	2000001c 	.word	0x2000001c
 8001fbc:	0801a64c 	.word	0x0801a64c
 8001fc0:	0801a650 	.word	0x0801a650
 8001fc4:	20000330 	.word	0x20000330
 8001fc8:	20000320 	.word	0x20000320
 8001fcc:	20000334 	.word	0x20000334
 8001fd0:	20000324 	.word	0x20000324
 8001fd4:	20000338 	.word	0x20000338
 8001fd8:	20000328 	.word	0x20000328
 8001fdc:	20000344 	.word	0x20000344
 8001fe0:	2000032c 	.word	0x2000032c
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <StartGNSSParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGNSSParse */
void StartGNSSParse(void const * argument)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGNSSParse */
  /* Infinite loop */
  for(;;)
  {
	  GNSS_ParsePVTData(&GNSSData);
 8001ff0:	483f      	ldr	r0, [pc, #252]	@ (80020f0 <StartGNSSParse+0x108>)
 8001ff2:	f7ff fa15 	bl	8001420 <GNSS_ParsePVTData>
	  bmp581_read_precise_normal(&myDatabmp581);
 8001ff6:	483f      	ldr	r0, [pc, #252]	@ (80020f4 <StartGNSSParse+0x10c>)
 8001ff8:	f000 f9fc 	bl	80023f4 <bmp581_read_precise_normal>
	  Read_sensor_data(&myData6AXIS);
 8001ffc:	483e      	ldr	r0, [pc, #248]	@ (80020f8 <StartGNSSParse+0x110>)
 8001ffe:	f7ff f8bf 	bl	8001180 <Read_sensor_data>

	  if(counterrecalib>=20){
 8002002:	4b3e      	ldr	r3, [pc, #248]	@ (80020fc <StartGNSSParse+0x114>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b13      	cmp	r3, #19
 8002008:	dd4f      	ble.n	80020aa <StartGNSSParse+0xc2>
		  if(GNSSData.fixType>=3){
 800200a:	4b39      	ldr	r3, [pc, #228]	@ (80020f0 <StartGNSSParse+0x108>)
 800200c:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002010:	2b02      	cmp	r3, #2
 8002012:	d947      	bls.n	80020a4 <StartGNSSParse+0xbc>
			  float altitude = GNSSData.fhMSL;
 8002014:	4b36      	ldr	r3, [pc, #216]	@ (80020f0 <StartGNSSParse+0x108>)
 8002016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800201a:	617b      	str	r3, [r7, #20]
			  float base = 1.0f - (altitude / 44330.0f);
 800201c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002020:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002100 <StartGNSSParse+0x118>
 8002024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800202c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002030:	edc7 7a04 	vstr	s15, [r7, #16]

			  if (base > 0.01f)  // Évite le 0 ou négatif
 8002034:	edd7 7a04 	vldr	s15, [r7, #16]
 8002038:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002104 <StartGNSSParse+0x11c>
 800203c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	dd28      	ble.n	8002098 <StartGNSSParse+0xb0>
			  {
			      float denominator = powf(base, 5.255f);
 8002046:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8002108 <StartGNSSParse+0x120>
 800204a:	ed97 0a04 	vldr	s0, [r7, #16]
 800204e:	f016 feed 	bl	8018e2c <powf>
 8002052:	ed87 0a03 	vstr	s0, [r7, #12]
			      if (denominator > 0.001f)
 8002056:	edd7 7a03 	vldr	s15, [r7, #12]
 800205a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800210c <StartGNSSParse+0x124>
 800205e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	dd10      	ble.n	800208a <StartGNSSParse+0xa2>
			          P0 = (float) myDatabmp581.press / denominator;
 8002068:	4b22      	ldr	r3, [pc, #136]	@ (80020f4 <StartGNSSParse+0x10c>)
 800206a:	ed93 7a03 	vldr	s14, [r3, #12]
 800206e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002072:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002076:	ee16 0a90 	vmov	r0, s13
 800207a:	f7fe fa8d 	bl	8000598 <__aeabi_f2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4923      	ldr	r1, [pc, #140]	@ (8002110 <StartGNSSParse+0x128>)
 8002084:	e9c1 2300 	strd	r2, r3, [r1]
 8002088:	e00c      	b.n	80020a4 <StartGNSSParse+0xbc>
			      else
			          P0 = 101325.0;  // ou une valeur par défaut
 800208a:	4921      	ldr	r1, [pc, #132]	@ (8002110 <StartGNSSParse+0x128>)
 800208c:	a316      	add	r3, pc, #88	@ (adr r3, 80020e8 <StartGNSSParse+0x100>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	e9c1 2300 	strd	r2, r3, [r1]
 8002096:	e005      	b.n	80020a4 <StartGNSSParse+0xbc>
			  }
			  else
			  {
			      P0 = 101325.0;
 8002098:	491d      	ldr	r1, [pc, #116]	@ (8002110 <StartGNSSParse+0x128>)
 800209a:	a313      	add	r3, pc, #76	@ (adr r3, 80020e8 <StartGNSSParse+0x100>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	e9c1 2300 	strd	r2, r3, [r1]
			  }

		  }
		  counterrecalib=0;
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <StartGNSSParse+0x114>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
	  }

	  if(flag_calib && (GNSSData.fixType>=3)){
 80020aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <StartGNSSParse+0x12c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00f      	beq.n	80020d2 <StartGNSSParse+0xea>
 80020b2:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <StartGNSSParse+0x108>)
 80020b4:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d90a      	bls.n	80020d2 <StartGNSSParse+0xea>

		  hauteur_servo=(float)(GNSSData.fhMSL-hauteur_Initiale);
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <StartGNSSParse+0x108>)
 80020be:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <StartGNSSParse+0x130>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	4b13      	ldr	r3, [pc, #76]	@ (800211c <StartGNSSParse+0x134>)
 80020ce:	edc3 7a00 	vstr	s15, [r3]

	  }
	  counterrecalib++;
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <StartGNSSParse+0x114>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <StartGNSSParse+0x114>)
 80020da:	6013      	str	r3, [r2, #0]


    osDelay(100);
 80020dc:	2064      	movs	r0, #100	@ 0x64
 80020de:	f00f fdd2 	bl	8011c86 <osDelay>
	  GNSS_ParsePVTData(&GNSSData);
 80020e2:	e785      	b.n	8001ff0 <StartGNSSParse+0x8>
 80020e4:	f3af 8000 	nop.w
 80020e8:	00000000 	.word	0x00000000
 80020ec:	40f8bcd0 	.word	0x40f8bcd0
 80020f0:	20000c18 	.word	0x20000c18
 80020f4:	20000688 	.word	0x20000688
 80020f8:	20000668 	.word	0x20000668
 80020fc:	2000030c 	.word	0x2000030c
 8002100:	472d2a00 	.word	0x472d2a00
 8002104:	3c23d70a 	.word	0x3c23d70a
 8002108:	40a828f6 	.word	0x40a828f6
 800210c:	3a83126f 	.word	0x3a83126f
 8002110:	20000008 	.word	0x20000008
 8002114:	20000e38 	.word	0x20000e38
 8002118:	20000e4c 	.word	0x20000e4c
 800211c:	20000e50 	.word	0x20000e50

08002120 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af02      	add	r7, sp, #8
 8002126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */
  /* Infinite loop */
  for(;;)
  {
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 8002128:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <StartSdcard+0x90>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	4618      	mov	r0, r3
 8002132:	f00f fdc9 	bl	8011cc8 <osMutexWait>

		  blinker_sd_flag=1-blinker_sd_flag;
 8002136:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <StartSdcard+0x94>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f1c3 0301 	rsb	r3, r3, #1
 800213e:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <StartSdcard+0x94>)
 8002140:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 8002142:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <StartSdcard+0x94>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10a      	bne.n	8002160 <StartSdcard+0x40>
			  LED_Setcolour(0,0,0,255,255,255);
 800214a:	23ff      	movs	r3, #255	@ 0xff
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	23ff      	movs	r3, #255	@ 0xff
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	23ff      	movs	r3, #255	@ 0xff
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2000      	movs	r0, #0
 800215a:	f000 fc27 	bl	80029ac <LED_Setcolour>
 800215e:	e009      	b.n	8002174 <StartSdcard+0x54>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2300      	movs	r3, #0
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2000      	movs	r0, #0
 8002170:	f000 fc1c 	bl	80029ac <LED_Setcolour>
		  }



		  if(flag_drop==0){
 8002174:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <StartSdcard+0x98>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10e      	bne.n	800219a <StartSdcard+0x7a>

			  if(sd_counter==10){
 800217c:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <StartSdcard+0x9c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b0a      	cmp	r3, #10
 8002182:	d104      	bne.n	800218e <StartSdcard+0x6e>
				  store_in_sd();
 8002184:	f000 ff04 	bl	8002f90 <store_in_sd>

			  sd_counter=0;
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <StartSdcard+0x9c>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 800218e:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <StartSdcard+0x9c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <StartSdcard+0x9c>)
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	e001      	b.n	800219e <StartSdcard+0x7e>

		  }
		  else{
			  store_in_sd();
 800219a:	f000 fef9 	bl	8002f90 <store_in_sd>

		  }

		  osMutexRelease(SDCard_mutexeHandle);
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <StartSdcard+0x90>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00f fdde 	bl	8011d64 <osMutexRelease>

    osDelay(100);
 80021a8:	2064      	movs	r0, #100	@ 0x64
 80021aa:	f00f fd6c 	bl	8011c86 <osDelay>
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 80021ae:	e7bb      	b.n	8002128 <StartSdcard+0x8>
 80021b0:	20000348 	.word	0x20000348
 80021b4:	2000031c 	.word	0x2000031c
 80021b8:	20000e30 	.word	0x20000e30
 80021bc:	20000310 	.word	0x20000310

080021c0 <Startservo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startservo */
void Startservo(void const * argument)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startservo */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_servo_started==1){
 80021c8:	4b22      	ldr	r3, [pc, #136]	@ (8002254 <Startservo+0x94>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d104      	bne.n	80021da <Startservo+0x1a>
		  stop_servo();
 80021d0:	f000 fffa 	bl	80031c8 <stop_servo>
		  flag_servo_started=0;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <Startservo+0x94>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
	  }


	  if((flag_drop==1) && (flag_calib==1)){
 80021da:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <Startservo+0x98>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d118      	bne.n	8002214 <Startservo+0x54>
 80021e2:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <Startservo+0x9c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d114      	bne.n	8002214 <Startservo+0x54>
		  if((hauteur_servo<=60.0)){
 80021ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002260 <Startservo+0xa0>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002264 <Startservo+0xa4>
 80021f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	d80a      	bhi.n	8002214 <Startservo+0x54>
			  release_mecanism();
 80021fe:	f000 ffc3 	bl	8003188 <release_mecanism>
			  flag_separation=1;
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <Startservo+0xa8>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <Startservo+0x94>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]
			  osThreadSuspend(NULL);
 800220e:	2000      	movs	r0, #0
 8002210:	f00f fe93 	bl	8011f3a <osThreadSuspend>



		  }
	  }
	  if(flag_drop==0){
 8002214:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <Startservo+0x98>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d117      	bne.n	800224c <Startservo+0x8c>
		  if(flag_bouton_servo==1){
 800221c:	4b13      	ldr	r3, [pc, #76]	@ (800226c <Startservo+0xac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <Startservo+0x74>
			  release_mecanism();
 8002224:	f000 ffb0 	bl	8003188 <release_mecanism>
			  flag_bouton_servo=2;
 8002228:	4b10      	ldr	r3, [pc, #64]	@ (800226c <Startservo+0xac>)
 800222a:	2202      	movs	r2, #2
 800222c:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <Startservo+0x94>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
		  }
		  if(flag_bouton_servo==0){
 8002234:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <Startservo+0xac>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <Startservo+0x8c>
			  lock_mecanism();
 800223c:	f000 ffb4 	bl	80031a8 <lock_mecanism>
			  flag_bouton_servo=2;
 8002240:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <Startservo+0xac>)
 8002242:	2202      	movs	r2, #2
 8002244:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8002246:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <Startservo+0x94>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]
		  }

	  }

    osDelay(200);
 800224c:	20c8      	movs	r0, #200	@ 0xc8
 800224e:	f00f fd1a 	bl	8011c86 <osDelay>
	  if(flag_servo_started==1){
 8002252:	e7b9      	b.n	80021c8 <Startservo+0x8>
 8002254:	20000e40 	.word	0x20000e40
 8002258:	20000e30 	.word	0x20000e30
 800225c:	20000e38 	.word	0x20000e38
 8002260:	20000e50 	.word	0x20000e50
 8002264:	42700000 	.word	0x42700000
 8002268:	20000e34 	.word	0x20000e34
 800226c:	20000e3c 	.word	0x20000e3c

08002270 <Startdistancecalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startdistancecalc */
void Startdistancecalc(void const * argument)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startdistancecalc */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_calib==1){
 8002278:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <Startdistancecalc+0x6c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d129      	bne.n	80022d4 <Startdistancecalc+0x64>

		  if(GNSSData.fixType>=3){
 8002280:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <Startdistancecalc+0x70>)
 8002282:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002286:	2b02      	cmp	r3, #2
 8002288:	d924      	bls.n	80022d4 <Startdistancecalc+0x64>
#ifdef PARTIE_BAS
			  distance_entre_module=distancecalc(GNSSData.fLat,TOPData.latitude, GNSSData.fLon,TOPData.longitude,GNSSData.fhMSL,TOPData.hMSL);
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <Startdistancecalc+0x70>)
 800228c:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <Startdistancecalc+0x74>)
 8002292:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002296:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <Startdistancecalc+0x70>)
 8002298:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <Startdistancecalc+0x74>)
 800229e:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 80022a2:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <Startdistancecalc+0x70>)
 80022a4:	edd3 5a29 	vldr	s11, [r3, #164]	@ 0xa4
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <Startdistancecalc+0x74>)
 80022aa:	ed93 5a14 	vldr	s10, [r3, #80]	@ 0x50
 80022ae:	eef0 2a45 	vmov.f32	s5, s10
 80022b2:	eeb0 2a65 	vmov.f32	s4, s11
 80022b6:	eef0 1a46 	vmov.f32	s3, s12
 80022ba:	eeb0 1a66 	vmov.f32	s2, s13
 80022be:	eef0 0a47 	vmov.f32	s1, s14
 80022c2:	eeb0 0a67 	vmov.f32	s0, s15
 80022c6:	f7ff fa97 	bl	80017f8 <distancecalc>
 80022ca:	eef0 7a40 	vmov.f32	s15, s0
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <Startdistancecalc+0x78>)
 80022d0:	edc3 7a00 	vstr	s15, [r3]

#endif
	  }
}
    osDelay(100);
 80022d4:	2064      	movs	r0, #100	@ 0x64
 80022d6:	f00f fcd6 	bl	8011c86 <osDelay>
	  if(flag_calib==1){
 80022da:	e7cd      	b.n	8002278 <Startdistancecalc+0x8>
 80022dc:	20000e38 	.word	0x20000e38
 80022e0:	20000c18 	.word	0x20000c18
 80022e4:	20000b20 	.word	0x20000b20
 80022e8:	20000314 	.word	0x20000314

080022ec <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(trameready==1){
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <startTarvosDecode+0x3c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d110      	bne.n	800231e <startTarvosDecode+0x32>

		  switch(tarvos_DATA[3]){
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <startTarvosDecode+0x40>)
 80022fe:	78db      	ldrb	r3, [r3, #3]
 8002300:	2b15      	cmp	r3, #21
 8002302:	d104      	bne.n	800230e <startTarvosDecode+0x22>
#ifdef PARTIE_BAS
		  case TOP_ADDR:
			  decode_payload(&TOPData,(uint8_t *) tarvos_DATA);
 8002304:	4909      	ldr	r1, [pc, #36]	@ (800232c <startTarvosDecode+0x40>)
 8002306:	480a      	ldr	r0, [pc, #40]	@ (8002330 <startTarvosDecode+0x44>)
 8002308:	f002 fa74 	bl	80047f4 <decode_payload>
			  break;
 800230c:	e004      	b.n	8002318 <startTarvosDecode+0x2c>
#endif
		  default:
			  decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 800230e:	4907      	ldr	r1, [pc, #28]	@ (800232c <startTarvosDecode+0x40>)
 8002310:	4808      	ldr	r0, [pc, #32]	@ (8002334 <startTarvosDecode+0x48>)
 8002312:	f002 fa6f 	bl	80047f4 <decode_payload>

			  break;
 8002316:	bf00      	nop
		  }
		  trameready=0;
 8002318:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <startTarvosDecode+0x3c>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
	  }

    osDelay(100);
 800231e:	2064      	movs	r0, #100	@ 0x64
 8002320:	f00f fcb1 	bl	8011c86 <osDelay>
	  if(trameready==1){
 8002324:	e7e6      	b.n	80022f4 <startTarvosDecode+0x8>
 8002326:	bf00      	nop
 8002328:	20000e5c 	.word	0x20000e5c
 800232c:	20000474 	.word	0x20000474
 8002330:	20000b20 	.word	0x20000b20
 8002334:	20000b9c 	.word	0x20000b9c

08002338 <bmp581_init_precise_normal>:
extern float temp;
float P0=101325.0;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af04      	add	r7, sp, #16
 800233e:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8002340:	237b      	movs	r3, #123	@ 0x7b
 8002342:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 8002344:	2369      	movs	r3, #105	@ 0x69
 8002346:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 8002348:	232b      	movs	r3, #43	@ 0x2b
 800234a:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 800234c:	2312      	movs	r3, #18
 800234e:	723b      	strb	r3, [r7, #8]
	int check=0;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8002354:	2364      	movs	r3, #100	@ 0x64
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	2301      	movs	r3, #1
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f107 030b 	add.w	r3, r7, #11
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	2236      	movs	r2, #54	@ 0x36
 8002366:	218e      	movs	r1, #142	@ 0x8e
 8002368:	4821      	ldr	r0, [pc, #132]	@ (80023f0 <bmp581_init_precise_normal+0xb8>)
 800236a:	f006 f859 	bl	8008420 <HAL_I2C_Mem_Write>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <bmp581_init_precise_normal+0x40>
			check=1;
 8002374:	2301      	movs	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 8002378:	2364      	movs	r3, #100	@ 0x64
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	2301      	movs	r3, #1
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	f107 030a 	add.w	r3, r7, #10
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2301      	movs	r3, #1
 8002388:	2237      	movs	r2, #55	@ 0x37
 800238a:	218e      	movs	r1, #142	@ 0x8e
 800238c:	4818      	ldr	r0, [pc, #96]	@ (80023f0 <bmp581_init_precise_normal+0xb8>)
 800238e:	f006 f847 	bl	8008420 <HAL_I2C_Mem_Write>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <bmp581_init_precise_normal+0x64>
					check=1;
 8002398:	2301      	movs	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 800239c:	2364      	movs	r3, #100	@ 0x64
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	2301      	movs	r3, #1
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	f107 0309 	add.w	r3, r7, #9
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2301      	movs	r3, #1
 80023ac:	2230      	movs	r2, #48	@ 0x30
 80023ae:	218e      	movs	r1, #142	@ 0x8e
 80023b0:	480f      	ldr	r0, [pc, #60]	@ (80023f0 <bmp581_init_precise_normal+0xb8>)
 80023b2:	f006 f835 	bl	8008420 <HAL_I2C_Mem_Write>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <bmp581_init_precise_normal+0x88>
				check=1;
 80023bc:	2301      	movs	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 80023c0:	2364      	movs	r3, #100	@ 0x64
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	2301      	movs	r3, #1
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	2230      	movs	r2, #48	@ 0x30
 80023d2:	218e      	movs	r1, #142	@ 0x8e
 80023d4:	4806      	ldr	r0, [pc, #24]	@ (80023f0 <bmp581_init_precise_normal+0xb8>)
 80023d6:	f006 f823 	bl	8008420 <HAL_I2C_Mem_Write>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <bmp581_init_precise_normal+0xac>
					check=1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
//	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
//					check=1;
//				}


	return check;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	b2db      	uxtb	r3, r3

}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2000034c 	.word	0x2000034c

080023f4 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	@ 0x30
 80023f8:	af04      	add	r7, sp, #16
 80023fa:	6078      	str	r0, [r7, #4]
		int check=0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
		int32_t intbufferpres=0;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 8002408:	2364      	movs	r3, #100	@ 0x64
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	2306      	movs	r3, #6
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	221d      	movs	r2, #29
 800241a:	218f      	movs	r1, #143	@ 0x8f
 800241c:	482d      	ldr	r0, [pc, #180]	@ (80024d4 <bmp581_read_precise_normal+0xe0>)
 800241e:	f006 f913 	bl	8008648 <HAL_I2C_Mem_Read>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <bmp581_read_precise_normal+0x38>
					check=1;
 8002428:	2301      	movs	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
				}


		if(check==0){
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d149      	bne.n	80024c6 <bmp581_read_precise_normal+0xd2>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8002432:	7bbb      	ldrb	r3, [r7, #14]
 8002434:	041a      	lsls	r2, r3, #16
 8002436:	7b7b      	ldrb	r3, [r7, #13]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	4313      	orrs	r3, r2
 800243c:	7b3a      	ldrb	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 8002442:	7c7b      	ldrb	r3, [r7, #17]
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	7c3b      	ldrb	r3, [r7, #16]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	4313      	orrs	r3, r2
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
		bmp581->press=(float) intbufferpres/64.0;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80024d8 <bmp581_read_precise_normal+0xe4>
 8002460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	edc3 7a03 	vstr	s15, [r3, #12]
		bmp581->temps=(float) intbuffertemp/65536.0;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002474:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80024dc <bmp581_read_precise_normal+0xe8>
 8002478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	edc3 7a04 	vstr	s15, [r3, #16]
		if(bmp581->press!=0.0){
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	edd3 7a03 	vldr	s15, [r3, #12]
 8002488:	eef5 7a40 	vcmp.f32	s15, #0.0
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	d015      	beq.n	80024be <bmp581_read_precise_normal+0xca>
			bmp581->altitude=(float)8727.013*logf(P0/(bmp581->press));
 8002492:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <bmp581_read_precise_normal+0xec>)
 8002494:	ed93 7a00 	vldr	s14, [r3]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	edd3 7a03 	vldr	s15, [r3, #12]
 800249e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80024a2:	eeb0 0a66 	vmov.f32	s0, s13
 80024a6:	f016 fc93 	bl	8018dd0 <logf>
 80024aa:	eef0 7a40 	vmov.f32	s15, s0
 80024ae:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80024e4 <bmp581_read_precise_normal+0xf0>
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	edc3 7a05 	vstr	s15, [r3, #20]
 80024bc:	e003      	b.n	80024c6 <bmp581_read_precise_normal+0xd2>
		}
		else{
			bmp581->altitude=(float)0.0;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
		}

		}

		return check;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	b2db      	uxtb	r3, r3
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000034c 	.word	0x2000034c
 80024d8:	42800000 	.word	0x42800000
 80024dc:	47800000 	.word	0x47800000
 80024e0:	20000008 	.word	0x20000008
 80024e4:	46085c0d 	.word	0x46085c0d

080024e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <MX_DMA_Init+0x80>)
 80024f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <MX_DMA_Init+0x80>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <MX_DMA_Init+0x80>)
 80024fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002506:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <MX_DMA_Init+0x80>)
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <MX_DMA_Init+0x80>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6493      	str	r3, [r2, #72]	@ 0x48
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <MX_DMA_Init+0x80>)
 8002514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2105      	movs	r1, #5
 8002522:	200b      	movs	r0, #11
 8002524:	f005 f996 	bl	8007854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002528:	200b      	movs	r0, #11
 800252a:	f005 f9ad 	bl	8007888 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2105      	movs	r1, #5
 8002532:	200c      	movs	r0, #12
 8002534:	f005 f98e 	bl	8007854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002538:	200c      	movs	r0, #12
 800253a:	f005 f9a5 	bl	8007888 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2105      	movs	r1, #5
 8002542:	200d      	movs	r0, #13
 8002544:	f005 f986 	bl	8007854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002548:	200d      	movs	r0, #13
 800254a:	f005 f99d 	bl	8007888 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2105      	movs	r1, #5
 8002552:	200f      	movs	r0, #15
 8002554:	f005 f97e 	bl	8007854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002558:	200f      	movs	r0, #15
 800255a:	f005 f995 	bl	8007888 <HAL_NVIC_EnableIRQ>

}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	@ 0x28
 8002570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002582:	4b49      	ldr	r3, [pc, #292]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	4a48      	ldr	r2, [pc, #288]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 8002588:	f043 0320 	orr.w	r3, r3, #32
 800258c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258e:	4b46      	ldr	r3, [pc, #280]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	4b43      	ldr	r3, [pc, #268]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	4a42      	ldr	r2, [pc, #264]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a6:	4b40      	ldr	r3, [pc, #256]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b2:	4b3d      	ldr	r3, [pc, #244]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b6:	4a3c      	ldr	r2, [pc, #240]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ca:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ce:	4a36      	ldr	r2, [pc, #216]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d6:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <MX_GPIO_Init+0x13c>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2110      	movs	r1, #16
 80025e6:	4831      	ldr	r0, [pc, #196]	@ (80026ac <MX_GPIO_Init+0x140>)
 80025e8:	f005 fe34 	bl	8008254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80025f2:	482f      	ldr	r0, [pc, #188]	@ (80026b0 <MX_GPIO_Init+0x144>)
 80025f4:	f005 fe2e 	bl	8008254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025f8:	2310      	movs	r3, #16
 80025fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025fc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002610:	f005 fc86 	bl	8007f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002614:	2310      	movs	r3, #16
 8002616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002618:	2301      	movs	r3, #1
 800261a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	4820      	ldr	r0, [pc, #128]	@ (80026ac <MX_GPIO_Init+0x140>)
 800262c:	f005 fc78 	bl	8007f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002630:	2302      	movs	r3, #2
 8002632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002634:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	481a      	ldr	r0, [pc, #104]	@ (80026b0 <MX_GPIO_Init+0x144>)
 8002646:	f005 fc6b 	bl	8007f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800264a:	2304      	movs	r3, #4
 800264c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	4814      	ldr	r0, [pc, #80]	@ (80026b0 <MX_GPIO_Init+0x144>)
 800265e:	f005 fc5f 	bl	8007f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 8002662:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	2301      	movs	r3, #1
 800266a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	@ (80026b0 <MX_GPIO_Init+0x144>)
 800267c:	f005 fc50 	bl	8007f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2105      	movs	r1, #5
 8002684:	2007      	movs	r0, #7
 8002686:	f005 f8e5 	bl	8007854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800268a:	2007      	movs	r0, #7
 800268c:	f005 f8fc 	bl	8007888 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2105      	movs	r1, #5
 8002694:	200a      	movs	r0, #10
 8002696:	f005 f8dd 	bl	8007854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800269a:	200a      	movs	r0, #10
 800269c:	f005 f8f4 	bl	8007888 <HAL_NVIC_EnableIRQ>

}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	@ 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000800 	.word	0x48000800
 80026b0:	48000400 	.word	0x48000400

080026b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026ba:	4a1c      	ldr	r2, [pc, #112]	@ (800272c <MX_I2C1_Init+0x78>)
 80026bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 80026be:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002730 <MX_I2C1_Init+0x7c>)
 80026c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026c4:	4b18      	ldr	r3, [pc, #96]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ca:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d0:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026d6:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026dc:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026de:	2200      	movs	r2, #0
 80026e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e2:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ee:	480e      	ldr	r0, [pc, #56]	@ (8002728 <MX_I2C1_Init+0x74>)
 80026f0:	f005 fdfa 	bl	80082e8 <HAL_I2C_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026fa:	f000 fc43 	bl	8002f84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026fe:	2100      	movs	r1, #0
 8002700:	4809      	ldr	r0, [pc, #36]	@ (8002728 <MX_I2C1_Init+0x74>)
 8002702:	f006 fb7d 	bl	8008e00 <HAL_I2CEx_ConfigAnalogFilter>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800270c:	f000 fc3a 	bl	8002f84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002710:	2100      	movs	r1, #0
 8002712:	4805      	ldr	r0, [pc, #20]	@ (8002728 <MX_I2C1_Init+0x74>)
 8002714:	f006 fbbf 	bl	8008e96 <HAL_I2CEx_ConfigDigitalFilter>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800271e:	f000 fc31 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000034c 	.word	0x2000034c
 800272c:	40005400 	.word	0x40005400
 8002730:	20b182be 	.word	0x20b182be

08002734 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <MX_I2C3_Init+0x74>)
 800273a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ac <MX_I2C3_Init+0x78>)
 800273c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B182BE;
 800273e:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <MX_I2C3_Init+0x74>)
 8002740:	4a1b      	ldr	r2, [pc, #108]	@ (80027b0 <MX_I2C3_Init+0x7c>)
 8002742:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002744:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <MX_I2C3_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800274a:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <MX_I2C3_Init+0x74>)
 800274c:	2201      	movs	r2, #1
 800274e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002750:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <MX_I2C3_Init+0x74>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002756:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <MX_I2C3_Init+0x74>)
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <MX_I2C3_Init+0x74>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <MX_I2C3_Init+0x74>)
 8002764:	2200      	movs	r2, #0
 8002766:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <MX_I2C3_Init+0x74>)
 800276a:	2200      	movs	r2, #0
 800276c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800276e:	480e      	ldr	r0, [pc, #56]	@ (80027a8 <MX_I2C3_Init+0x74>)
 8002770:	f005 fdba 	bl	80082e8 <HAL_I2C_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800277a:	f000 fc03 	bl	8002f84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800277e:	2100      	movs	r1, #0
 8002780:	4809      	ldr	r0, [pc, #36]	@ (80027a8 <MX_I2C3_Init+0x74>)
 8002782:	f006 fb3d 	bl	8008e00 <HAL_I2CEx_ConfigAnalogFilter>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800278c:	f000 fbfa 	bl	8002f84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002790:	2100      	movs	r1, #0
 8002792:	4805      	ldr	r0, [pc, #20]	@ (80027a8 <MX_I2C3_Init+0x74>)
 8002794:	f006 fb7f 	bl	8008e96 <HAL_I2CEx_ConfigDigitalFilter>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800279e:	f000 fbf1 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200003a0 	.word	0x200003a0
 80027ac:	40007800 	.word	0x40007800
 80027b0:	20b182be 	.word	0x20b182be

080027b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b09e      	sub	sp, #120	@ 0x78
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	2244      	movs	r2, #68	@ 0x44
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f012 ff53 	bl	8015680 <memset>
  if(i2cHandle->Instance==I2C1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5c      	ldr	r2, [pc, #368]	@ (8002950 <HAL_I2C_MspInit+0x19c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d155      	bne.n	8002890 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027e4:	2340      	movs	r3, #64	@ 0x40
 80027e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ec:	f107 0320 	add.w	r3, r7, #32
 80027f0:	4618      	mov	r0, r3
 80027f2:	f007 f9ad 	bl	8009b50 <HAL_RCCEx_PeriphCLKConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80027fc:	f000 fbc2 	bl	8002f84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002800:	4b54      	ldr	r3, [pc, #336]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002804:	4a53      	ldr	r2, [pc, #332]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280c:	4b51      	ldr	r3, [pc, #324]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b4e      	ldr	r3, [pc, #312]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281c:	4a4d      	ldr	r2, [pc, #308]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002824:	4b4b      	ldr	r3, [pc, #300]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002834:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002836:	2312      	movs	r3, #18
 8002838:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002842:	2304      	movs	r3, #4
 8002844:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800284a:	4619      	mov	r1, r3
 800284c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002850:	f005 fb66 	bl	8007f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002858:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285a:	2312      	movs	r3, #18
 800285c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002866:	2304      	movs	r3, #4
 8002868:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800286e:	4619      	mov	r1, r3
 8002870:	4839      	ldr	r0, [pc, #228]	@ (8002958 <HAL_I2C_MspInit+0x1a4>)
 8002872:	f005 fb55 	bl	8007f20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002876:	4b37      	ldr	r3, [pc, #220]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	4a36      	ldr	r2, [pc, #216]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 800287c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002880:	6593      	str	r3, [r2, #88]	@ 0x58
 8002882:	4b34      	ldr	r3, [pc, #208]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800288e:	e05a      	b.n	8002946 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a31      	ldr	r2, [pc, #196]	@ (800295c <HAL_I2C_MspInit+0x1a8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d155      	bne.n	8002946 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800289a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800289e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a4:	f107 0320 	add.w	r3, r7, #32
 80028a8:	4618      	mov	r0, r3
 80028aa:	f007 f951 	bl	8009b50 <HAL_RCCEx_PeriphCLKConfig>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 80028b4:	f000 fb66 	bl	8002f84 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028bc:	4a25      	ldr	r2, [pc, #148]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028c4:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d0:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 80028d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 80028de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028ec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ee:	2312      	movs	r3, #18
 80028f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80028fa:	2302      	movs	r3, #2
 80028fc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002902:	4619      	mov	r1, r3
 8002904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002908:	f005 fb0a 	bl	8007f20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800290c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002910:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002912:	2312      	movs	r3, #18
 8002914:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800291e:	2308      	movs	r3, #8
 8002920:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002922:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002926:	4619      	mov	r1, r3
 8002928:	480d      	ldr	r0, [pc, #52]	@ (8002960 <HAL_I2C_MspInit+0x1ac>)
 800292a:	f005 faf9 	bl	8007f20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800292e:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	4a08      	ldr	r2, [pc, #32]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 8002934:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002938:	6593      	str	r3, [r2, #88]	@ 0x58
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_I2C_MspInit+0x1a0>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
}
 8002946:	bf00      	nop
 8002948:	3778      	adds	r7, #120	@ 0x78
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40005400 	.word	0x40005400
 8002954:	40021000 	.word	0x40021000
 8002958:	48000400 	.word	0x48000400
 800295c:	40007800 	.word	0x40007800
 8002960:	48000800 	.word	0x48000800

08002964 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 800296a:	480d      	ldr	r0, [pc, #52]	@ (80029a0 <LED_Init+0x3c>)
 800296c:	f007 ffd0 	bl	800a910 <HAL_TIM_PWM_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002974:	2300      	movs	r3, #0
 8002976:	80fb      	strh	r3, [r7, #6]
 8002978:	e006      	b.n	8002988 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <LED_Init+0x40>)
 800297e:	2100      	movs	r1, #0
 8002980:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	3301      	adds	r3, #1
 8002986:	80fb      	strh	r3, [r7, #6]
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800298e:	d9f4      	bls.n	800297a <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <LED_Init+0x44>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8002996:	797b      	ldrb	r3, [r7, #5]




}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20001434 	.word	0x20001434
 80029a4:	20000cec 	.word	0x20000cec
 80029a8:	20000e25 	.word	0x20000e25

080029ac <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08b      	sub	sp, #44	@ 0x2c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4604      	mov	r4, r0
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	71fb      	strb	r3, [r7, #7]
 80029be:	4603      	mov	r3, r0
 80029c0:	71bb      	strb	r3, [r7, #6]
 80029c2:	460b      	mov	r3, r1
 80029c4:	717b      	strb	r3, [r7, #5]
 80029c6:	4613      	mov	r3, r2
 80029c8:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 80029ce:	79bb      	ldrb	r3, [r7, #6]
 80029d0:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 80029d6:	797b      	ldrb	r3, [r7, #5]
 80029d8:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 80029da:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80029de:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 80029e0:	793b      	ldrb	r3, [r7, #4]
 80029e2:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 80029e4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80029e8:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	e007      	b.n	8002a00 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 80029f0:	4a35      	ldr	r2, [pc, #212]	@ (8002ac8 <LED_Setcolour+0x11c>)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	4413      	add	r3, r2
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	3301      	adds	r3, #1
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002a06:	ddf3      	ble.n	80029f0 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8002a08:	2300      	movs	r3, #0
 8002a0a:	77fb      	strb	r3, [r7, #31]
 8002a0c:	e032      	b.n	8002a74 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8002a0e:	2300      	movs	r3, #0
 8002a10:	77bb      	strb	r3, [r7, #30]
 8002a12:	e029      	b.n	8002a68 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	e020      	b.n	8002a5c <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8002a1a:	7ffa      	ldrb	r2, [r7, #31]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	441a      	add	r2, r3
 8002a22:	7fbb      	ldrb	r3, [r7, #30]
 8002a24:	4413      	add	r3, r2
 8002a26:	3328      	adds	r3, #40	@ 0x28
 8002a28:	443b      	add	r3, r7
 8002a2a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa42 f303 	asr.w	r3, r2, r3
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8002a3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a40:	4a21      	ldr	r2, [pc, #132]	@ (8002ac8 <LED_Setcolour+0x11c>)
 8002a42:	215a      	movs	r1, #90	@ 0x5a
 8002a44:	54d1      	strb	r1, [r2, r3]
 8002a46:	e003      	b.n	8002a50 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8002a48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac8 <LED_Setcolour+0x11c>)
 8002a4c:	211e      	movs	r1, #30
 8002a4e:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8002a50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a52:	3301      	adds	r3, #1
 8002a54:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	dddb      	ble.n	8002a1a <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8002a62:	7fbb      	ldrb	r3, [r7, #30]
 8002a64:	3301      	adds	r3, #1
 8002a66:	77bb      	strb	r3, [r7, #30]
 8002a68:	7fbb      	ldrb	r3, [r7, #30]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d9d2      	bls.n	8002a14 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8002a6e:	7ffb      	ldrb	r3, [r7, #31]
 8002a70:	3301      	adds	r3, #1
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	7ffb      	ldrb	r3, [r7, #31]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d9c9      	bls.n	8002a0e <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e009      	b.n	8002a94 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8002a80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a82:	4a11      	ldr	r2, [pc, #68]	@ (8002ac8 <LED_Setcolour+0x11c>)
 8002a84:	2100      	movs	r1, #0
 8002a86:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8002a88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a9a:	dbf1      	blt.n	8002a80 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e009      	b.n	8002ab6 <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8002aa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002aa4:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <LED_Setcolour+0x11c>)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8002aaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002aac:	3301      	adds	r3, #1
 8002aae:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	ddf2      	ble.n	8002aa2 <LED_Setcolour+0xf6>
		}

	LED_Update();
 8002abc:	f000 f806 	bl	8002acc <LED_Update>

}
 8002ac0:	bf00      	nop
 8002ac2:	372c      	adds	r7, #44	@ 0x2c
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	20000cec 	.word	0x20000cec

08002acc <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8002ad2:	f240 1339 	movw	r3, #313	@ 0x139
 8002ad6:	4a07      	ldr	r2, [pc, #28]	@ (8002af4 <LED_Update+0x28>)
 8002ad8:	2104      	movs	r1, #4
 8002ada:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <LED_Update+0x2c>)
 8002adc:	f008 f910 	bl	800ad00 <HAL_TIM_PWM_Start_DMA>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 8002ae8:	79fb      	ldrb	r3, [r7, #7]

}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000cec 	.word	0x20000cec
 8002af8:	20001434 	.word	0x20001434

08002afc <LED_Callback>:



void LED_Callback(){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8002b00:	2104      	movs	r1, #4
 8002b02:	4804      	ldr	r0, [pc, #16]	@ (8002b14 <LED_Callback+0x18>)
 8002b04:	f008 fb14 	bl	800b130 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <LED_Callback+0x1c>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]


}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20001434 	.word	0x20001434
 8002b18:	20000e25 	.word	0x20000e25

08002b1c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d147      	bne.n	8002bbc <HAL_GPIO_EXTI_Callback+0xa0>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 8002b2c:	2110      	movs	r1, #16
 8002b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b32:	f005 fb77 	bl	8008224 <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d109      	bne.n	8002b50 <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 8002b3c:	4b21      	ldr	r3, [pc, #132]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 8002b42:	f003 f8eb 	bl	8005d1c <HAL_GetTick>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b4c:	601a      	str	r2, [r3, #0]


		}
#endif

	}
 8002b4e:	e035      	b.n	8002bbc <HAL_GPIO_EXTI_Callback+0xa0>
						gros_btn_time=(HAL_GetTick()-tbtn1);
 8002b50:	f003 f8e4 	bl	8005d1c <HAL_GetTick>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc8 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b60:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=400 && gros_btn_time<=1500){
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
					if(gros_btn_time>=1500 && gros_btn_time<=3500){
 8002b6a:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002b72:	4293      	cmp	r3, r2
 8002b74:	dd12      	ble.n	8002b9c <HAL_GPIO_EXTI_Callback+0x80>
 8002b76:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	dc0c      	bgt.n	8002b9c <HAL_GPIO_EXTI_Callback+0x80>
						if(GNSSData.fixType>=3){
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002b84:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d904      	bls.n	8002b96 <HAL_GPIO_EXTI_Callback+0x7a>
							hauteur_Initiale=GNSSData.fhMSL;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bcc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002b8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b92:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002b94:	6013      	str	r3, [r2, #0]
						flag_calib=1;
 8002b96:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=4000){
 8002b9c:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002ba4:	db07      	blt.n	8002bb6 <HAL_GPIO_EXTI_Callback+0x9a>
											HAL_GPIO_TogglePin(PWEN_GPIO_Port,PWEN_Pin);
 8002ba6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002baa:	480b      	ldr	r0, [pc, #44]	@ (8002bd8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002bac:	f005 fb6a 	bl	8008284 <HAL_GPIO_TogglePin>
											gros_btn_time=0;
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
					gros_btn_time=0;
 8002bb6:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
	}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000e28 	.word	0x20000e28
 8002bc8:	20000b08 	.word	0x20000b08
 8002bcc:	20000c18 	.word	0x20000c18
 8002bd0:	20000e4c 	.word	0x20000e4c
 8002bd4:	20000e38 	.word	0x20000e38
 8002bd8:	48000400 	.word	0x48000400

08002bdc <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8002be4:	f7ff ff8a 	bl	8002afc <LED_Callback>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bf6:	f003 f866 	bl	8005cc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bfa:	f000 f967 	bl	8002ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bfe:	f7ff fcb5 	bl	800256c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c02:	f7ff fc71 	bl	80024e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002c06:	f7fe fefb 	bl	8001a00 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c0a:	f7ff fd53 	bl	80026b4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002c0e:	f7ff fd91 	bl	8002734 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002c12:	f002 f8e5 	bl	8004de0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002c16:	f002 f92d 	bl	8004e74 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002c1a:	f001 ff3d 	bl	8004a98 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002c1e:	f001 fec5 	bl	80049ac <MX_TIM2_Init>
  MX_SPI1_Init();
 8002c22:	f000 fadb 	bl	80031dc <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002c26:	f00c f953 	bl	800eed0 <MX_FATFS_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <main+0x44>
    Error_Handler();
 8002c30:	f000 f9a8 	bl	8002f84 <Error_Handler>
  }
  MX_TIM4_Init();
 8002c34:	f001 ffa8 	bl	8004b88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8002c38:	f000 fb8a 	bl	8003350 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f000 fbf1 	bl	8003424 <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 8002c42:	2128      	movs	r1, #40	@ 0x28
 8002c44:	2020      	movs	r0, #32
 8002c46:	f000 fd2f 	bl	80036a8 <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 8002c4a:	4a87      	ldr	r2, [pc, #540]	@ (8002e68 <main+0x278>)
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	ca06      	ldmia	r2, {r1, r2}
 8002c50:	4886      	ldr	r0, [pc, #536]	@ (8002e6c <main+0x27c>)
 8002c52:	f000 fd03 	bl	800365c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002c56:	f000 fbfd 	bl	8003454 <ssd1306_UpdateScreen>

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c60:	4883      	ldr	r0, [pc, #524]	@ (8002e70 <main+0x280>)
 8002c62:	f005 faf7 	bl	8008254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8002c66:	2201      	movs	r2, #1
 8002c68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c6c:	4880      	ldr	r0, [pc, #512]	@ (8002e70 <main+0x280>)
 8002c6e:	f005 faf1 	bl	8008254 <HAL_GPIO_WritePin>

#endif



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8002c72:	2203      	movs	r2, #3
 8002c74:	497f      	ldr	r1, [pc, #508]	@ (8002e74 <main+0x284>)
 8002c76:	4880      	ldr	r0, [pc, #512]	@ (8002e78 <main+0x288>)
 8002c78:	f003 fc42 	bl	8006500 <HAL_ADC_Start_DMA>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <main+0xbe>
	  ssd1306_SetCursor(32, 40);
 8002c82:	2128      	movs	r1, #40	@ 0x28
 8002c84:	2020      	movs	r0, #32
 8002c86:	f000 fd0f 	bl	80036a8 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f000 fbca 	bl	8003424 <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 8002c90:	4a75      	ldr	r2, [pc, #468]	@ (8002e68 <main+0x278>)
 8002c92:	2301      	movs	r3, #1
 8002c94:	ca06      	ldmia	r2, {r1, r2}
 8002c96:	4879      	ldr	r0, [pc, #484]	@ (8002e7c <main+0x28c>)
 8002c98:	f000 fce0 	bl	800365c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002c9c:	f000 fbda 	bl	8003454 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002ca0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ca4:	f003 f846 	bl	8005d34 <HAL_Delay>
 	 pbmseeker=1;
 8002ca8:	4b75      	ldr	r3, [pc, #468]	@ (8002e80 <main+0x290>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 8002cae:	2064      	movs	r0, #100	@ 0x64
 8002cb0:	f003 f840 	bl	8005d34 <HAL_Delay>
   HAL_UART_Abort(&huart1);
 8002cb4:	4873      	ldr	r0, [pc, #460]	@ (8002e84 <main+0x294>)
 8002cb6:	f009 fe27 	bl	800c908 <HAL_UART_Abort>
   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)workingbuffer, 100)!=HAL_OK){
 8002cba:	2264      	movs	r2, #100	@ 0x64
 8002cbc:	4972      	ldr	r1, [pc, #456]	@ (8002e88 <main+0x298>)
 8002cbe:	4871      	ldr	r0, [pc, #452]	@ (8002e84 <main+0x294>)
 8002cc0:	f009 fdd6 	bl	800c870 <HAL_UART_Receive_DMA>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d015      	beq.n	8002cf6 <main+0x106>
	   ssd1306_SetCursor(32, 40);
 8002cca:	2128      	movs	r1, #40	@ 0x28
 8002ccc:	2020      	movs	r0, #32
 8002cce:	f000 fceb 	bl	80036a8 <ssd1306_SetCursor>
  	  ssd1306_Fill(Black);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 fba6 	bl	8003424 <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 8002cd8:	4a63      	ldr	r2, [pc, #396]	@ (8002e68 <main+0x278>)
 8002cda:	2301      	movs	r3, #1
 8002cdc:	ca06      	ldmia	r2, {r1, r2}
 8002cde:	486b      	ldr	r0, [pc, #428]	@ (8002e8c <main+0x29c>)
 8002ce0:	f000 fcbc 	bl	800365c <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002ce4:	f000 fbb6 	bl	8003454 <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 8002ce8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cec:	f003 f822 	bl	8005d34 <HAL_Delay>
  	pbmseeker=1;
 8002cf0:	4b63      	ldr	r3, [pc, #396]	@ (8002e80 <main+0x290>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 8002cf6:	f7ff fe35 	bl	8002964 <LED_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <main+0x13c>
	  ssd1306_SetCursor(32, 40);
 8002d00:	2128      	movs	r1, #40	@ 0x28
 8002d02:	2020      	movs	r0, #32
 8002d04:	f000 fcd0 	bl	80036a8 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f000 fb8b 	bl	8003424 <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 8002d0e:	4a56      	ldr	r2, [pc, #344]	@ (8002e68 <main+0x278>)
 8002d10:	2301      	movs	r3, #1
 8002d12:	ca06      	ldmia	r2, {r1, r2}
 8002d14:	485e      	ldr	r0, [pc, #376]	@ (8002e90 <main+0x2a0>)
 8002d16:	f000 fca1 	bl	800365c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002d1a:	f000 fb9b 	bl	8003454 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002d1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d22:	f003 f807 	bl	8005d34 <HAL_Delay>
 	 pbmseeker=1;
 8002d26:	4b56      	ldr	r3, [pc, #344]	@ (8002e80 <main+0x290>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 8002d2c:	f7fe f9a0 	bl	8001070 <Init_HighPerf_Mode_6_axis>



  if(bmp581_init_precise_normal(&myDatabmp581)!=HAL_OK){
 8002d30:	4858      	ldr	r0, [pc, #352]	@ (8002e94 <main+0x2a4>)
 8002d32:	f7ff fb01 	bl	8002338 <bmp581_init_precise_normal>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <main+0x178>
	  ssd1306_SetCursor(32, 40);
 8002d3c:	2128      	movs	r1, #40	@ 0x28
 8002d3e:	2020      	movs	r0, #32
 8002d40:	f000 fcb2 	bl	80036a8 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f000 fb6d 	bl	8003424 <ssd1306_Fill>
 	  ssd1306_WriteString("bmp pbm", Font_7x10, White);
 8002d4a:	4a47      	ldr	r2, [pc, #284]	@ (8002e68 <main+0x278>)
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	ca06      	ldmia	r2, {r1, r2}
 8002d50:	4851      	ldr	r0, [pc, #324]	@ (8002e98 <main+0x2a8>)
 8002d52:	f000 fc83 	bl	800365c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002d56:	f000 fb7d 	bl	8003454 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002d5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d5e:	f002 ffe9 	bl	8005d34 <HAL_Delay>
 	 pbmseeker=1;
 8002d62:	4b47      	ldr	r3, [pc, #284]	@ (8002e80 <main+0x290>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

   }

  //mon adresse est 1° et on envoit à 2°
#ifdef PARTIE_BAS
  if( INIT_PERM_TARVOS(BOTTOM_ADDR, GROUND_ADDR)!=HAL_OK){
 8002d68:	2101      	movs	r1, #1
 8002d6a:	2016      	movs	r0, #22
 8002d6c:	f001 fb2a 	bl	80043c4 <INIT_PERM_TARVOS>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d015      	beq.n	8002da2 <main+0x1b2>
	  ssd1306_SetCursor(32, 40);
 8002d76:	2128      	movs	r1, #40	@ 0x28
 8002d78:	2020      	movs	r0, #32
 8002d7a:	f000 fc95 	bl	80036a8 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f000 fb50 	bl	8003424 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 8002d84:	4a38      	ldr	r2, [pc, #224]	@ (8002e68 <main+0x278>)
 8002d86:	2301      	movs	r3, #1
 8002d88:	ca06      	ldmia	r2, {r1, r2}
 8002d8a:	4844      	ldr	r0, [pc, #272]	@ (8002e9c <main+0x2ac>)
 8002d8c:	f000 fc66 	bl	800365c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002d90:	f000 fb60 	bl	8003454 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002d94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d98:	f002 ffcc 	bl	8005d34 <HAL_Delay>
 	 pbmseeker=1;
 8002d9c:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <main+0x290>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]


   }
#endif

  HAL_Delay(100);
 8002da2:	2064      	movs	r0, #100	@ 0x64
 8002da4:	f002 ffc6 	bl	8005d34 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8002da8:	483d      	ldr	r0, [pc, #244]	@ (8002ea0 <main+0x2b0>)
 8002daa:	f009 fdad 	bl	800c908 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5)!=HAL_OK){
 8002dae:	2205      	movs	r2, #5
 8002db0:	493c      	ldr	r1, [pc, #240]	@ (8002ea4 <main+0x2b4>)
 8002db2:	483b      	ldr	r0, [pc, #236]	@ (8002ea0 <main+0x2b0>)
 8002db4:	f009 fd5c 	bl	800c870 <HAL_UART_Receive_DMA>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d015      	beq.n	8002dea <main+0x1fa>
	   ssd1306_SetCursor(32, 40);
 8002dbe:	2128      	movs	r1, #40	@ 0x28
 8002dc0:	2020      	movs	r0, #32
 8002dc2:	f000 fc71 	bl	80036a8 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f000 fb2c 	bl	8003424 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 8002dcc:	4a26      	ldr	r2, [pc, #152]	@ (8002e68 <main+0x278>)
 8002dce:	2301      	movs	r3, #1
 8002dd0:	ca06      	ldmia	r2, {r1, r2}
 8002dd2:	4835      	ldr	r0, [pc, #212]	@ (8002ea8 <main+0x2b8>)
 8002dd4:	f000 fc42 	bl	800365c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002dd8:	f000 fb3c 	bl	8003454 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002ddc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002de0:	f002 ffa8 	bl	8005d34 <HAL_Delay>
 	pbmseeker=1;
 8002de4:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <main+0x290>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 8002dea:	4830      	ldr	r0, [pc, #192]	@ (8002eac <main+0x2bc>)
 8002dec:	f007 fd26 	bl	800a83c <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8002df0:	200a      	movs	r0, #10
 8002df2:	f002 ff9f 	bl	8005d34 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 8002df6:	2201      	movs	r2, #1
 8002df8:	492d      	ldr	r1, [pc, #180]	@ (8002eb0 <main+0x2c0>)
 8002dfa:	482e      	ldr	r0, [pc, #184]	@ (8002eb4 <main+0x2c4>)
 8002dfc:	f00d fe64 	bl	8010ac8 <f_mount>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb8 <main+0x2c8>)
 8002e06:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 8002e08:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <main+0x2c8>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d125      	bne.n	8002e5c <main+0x26c>
  			  fres = f_mkdir("DEMO");
 8002e10:	482a      	ldr	r0, [pc, #168]	@ (8002ebc <main+0x2cc>)
 8002e12:	f00e fd2d 	bl	8011870 <f_mkdir>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <main+0x2c8>)
 8002e1c:	701a      	strb	r2, [r3, #0]
  			  BYTE readBuf[30];
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 8002e1e:	2212      	movs	r2, #18
 8002e20:	4927      	ldr	r1, [pc, #156]	@ (8002ec0 <main+0x2d0>)
 8002e22:	4828      	ldr	r0, [pc, #160]	@ (8002ec4 <main+0x2d4>)
 8002e24:	f00d feb4 	bl	8010b90 <f_open>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b22      	ldr	r3, [pc, #136]	@ (8002eb8 <main+0x2c8>)
 8002e2e:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 8002e30:	4b21      	ldr	r3, [pc, #132]	@ (8002eb8 <main+0x2c8>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10c      	bne.n	8002e52 <main+0x262>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	220b      	movs	r2, #11
 8002e3c:	4922      	ldr	r1, [pc, #136]	@ (8002ec8 <main+0x2d8>)
 8002e3e:	4821      	ldr	r0, [pc, #132]	@ (8002ec4 <main+0x2d4>)
 8002e40:	f00e f867 	bl	8010f12 <f_write>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <main+0x2c8>)
 8002e4a:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 8002e4c:	481d      	ldr	r0, [pc, #116]	@ (8002ec4 <main+0x2d4>)
 8002e4e:	f00e fa8d 	bl	801136c <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	4916      	ldr	r1, [pc, #88]	@ (8002eb0 <main+0x2c0>)
 8002e56:	2000      	movs	r0, #0
 8002e58:	f00d fe36 	bl	8010ac8 <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002e5c:	f7fe ffb6 	bl	8001dcc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002e60:	f00e fee3 	bl	8011c2a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <main+0x274>
 8002e68:	20000014 	.word	0x20000014
 8002e6c:	0801a654 	.word	0x0801a654
 8002e70:	48000400 	.word	0x48000400
 8002e74:	20000b0c 	.word	0x20000b0c
 8002e78:	20000240 	.word	0x20000240
 8002e7c:	0801a65c 	.word	0x0801a65c
 8002e80:	20000e54 	.word	0x20000e54
 8002e84:	20001614 	.word	0x20001614
 8002e88:	200004f4 	.word	0x200004f4
 8002e8c:	0801a664 	.word	0x0801a664
 8002e90:	0801a66c 	.word	0x0801a66c
 8002e94:	20000688 	.word	0x20000688
 8002e98:	0801a674 	.word	0x0801a674
 8002e9c:	0801a67c 	.word	0x0801a67c
 8002ea0:	20001580 	.word	0x20001580
 8002ea4:	200004b4 	.word	0x200004b4
 8002ea8:	0801a688 	.word	0x0801a688
 8002eac:	200014cc 	.word	0x200014cc
 8002eb0:	0801a694 	.word	0x0801a694
 8002eb4:	200006a0 	.word	0x200006a0
 8002eb8:	200008d4 	.word	0x200008d4
 8002ebc:	0801a698 	.word	0x0801a698
 8002ec0:	0801a6a0 	.word	0x0801a6a0
 8002ec4:	200008d8 	.word	0x200008d8
 8002ec8:	0801a6b0 	.word	0x0801a6b0

08002ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b094      	sub	sp, #80	@ 0x50
 8002ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ed2:	f107 0318 	add.w	r3, r7, #24
 8002ed6:	2238      	movs	r2, #56	@ 0x38
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f012 fbd0 	bl	8015680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ef2:	f006 f81d 	bl	8008f30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002efa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002efe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f00:	2302      	movs	r3, #2
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f04:	2303      	movs	r3, #3
 8002f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002f0c:	2319      	movs	r3, #25
 8002f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f10:	2302      	movs	r3, #2
 8002f12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f14:	2302      	movs	r3, #2
 8002f16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f1c:	f107 0318 	add.w	r3, r7, #24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f006 f8b9 	bl	8009098 <HAL_RCC_OscConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002f2c:	f000 f82a 	bl	8002f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f30:	230f      	movs	r3, #15
 8002f32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f34:	2303      	movs	r3, #3
 8002f36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	2103      	movs	r1, #3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f006 fbb7 	bl	80096bc <HAL_RCC_ClockConfig>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002f54:	f000 f816 	bl	8002f84 <Error_Handler>
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3750      	adds	r7, #80	@ 0x50
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a04      	ldr	r2, [pc, #16]	@ (8002f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002f72:	f002 fec1 	bl	8005cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00

08002f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f88:	b672      	cpsid	i
}
 8002f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <Error_Handler+0x8>

08002f90 <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(void){
 8002f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f94:	b0ad      	sub	sp, #180	@ 0xb4
 8002f96:	af1a      	add	r7, sp, #104	@ 0x68

	uint16_t sizeligne=0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	FRESULT fres=FR_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

#endif
#ifdef PARTIE_BAS

	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002fa4:	4b69      	ldr	r3, [pc, #420]	@ (800314c <store_in_sd+0x1bc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002faa:	4b69      	ldr	r3, [pc, #420]	@ (8003150 <store_in_sd+0x1c0>)
 8002fac:	681e      	ldr	r6, [r3, #0]
 8002fae:	4b69      	ldr	r3, [pc, #420]	@ (8003154 <store_in_sd+0x1c4>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	63ba      	str	r2, [r7, #56]	@ 0x38
				"%d,%d,%d,%0.7f,%0.7f,%0.2f,%0.2f,%0.1f,%0.1f,%0.1f,%0.0f,%0.0f,%0.0f,%0.2f,%lu\n\r",
				flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002fb4:	4b68      	ldr	r3, [pc, #416]	@ (8003158 <store_in_sd+0x1c8>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd faec 	bl	8000598 <__aeabi_f2d>
 8002fc0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002fc4:	4b64      	ldr	r3, [pc, #400]	@ (8003158 <store_in_sd+0x1c8>)
 8002fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fae4 	bl	8000598 <__aeabi_f2d>
 8002fd0:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
				flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002fd4:	4b60      	ldr	r3, [pc, #384]	@ (8003158 <store_in_sd+0x1c8>)
 8002fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fadc 	bl	8000598 <__aeabi_f2d>
 8002fe0:	e9c7 0108 	strd	r0, r1, [r7, #32]
				myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002fe4:	4b5d      	ldr	r3, [pc, #372]	@ (800315c <store_in_sd+0x1cc>)
 8002fe6:	695b      	ldr	r3, [r3, #20]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fad5 	bl	8000598 <__aeabi_f2d>
 8002fee:	e9c7 0106 	strd	r0, r1, [r7, #24]
				myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002ff2:	4b59      	ldr	r3, [pc, #356]	@ (8003158 <store_in_sd+0x1c8>)
 8002ff4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd facd 	bl	8000598 <__aeabi_f2d>
 8002ffe:	e9c7 0104 	strd	r0, r1, [r7, #16]
				myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8003002:	4b55      	ldr	r3, [pc, #340]	@ (8003158 <store_in_sd+0x1c8>)
 8003004:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fac5 	bl	8000598 <__aeabi_f2d>
 800300e:	e9c7 0102 	strd	r0, r1, [r7, #8]
				myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8003012:	4b52      	ldr	r3, [pc, #328]	@ (800315c <store_in_sd+0x1cc>)
 8003014:	68db      	ldr	r3, [r3, #12]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fabe 	bl	8000598 <__aeabi_f2d>
 800301c:	e9c7 0100 	strd	r0, r1, [r7]
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,timeindex);
 8003020:	4b4f      	ldr	r3, [pc, #316]	@ (8003160 <store_in_sd+0x1d0>)
 8003022:	681b      	ldr	r3, [r3, #0]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fab7 	bl	8000598 <__aeabi_f2d>
 800302a:	4682      	mov	sl, r0
 800302c:	468b      	mov	fp, r1
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,timeindex);
 800302e:	4b4c      	ldr	r3, [pc, #304]	@ (8003160 <store_in_sd+0x1d0>)
 8003030:	685b      	ldr	r3, [r3, #4]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fab0 	bl	8000598 <__aeabi_f2d>
 8003038:	4680      	mov	r8, r0
 800303a:	4689      	mov	r9, r1
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,timeindex);
 800303c:	4b48      	ldr	r3, [pc, #288]	@ (8003160 <store_in_sd+0x1d0>)
 800303e:	689b      	ldr	r3, [r3, #8]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd faa9 	bl	8000598 <__aeabi_f2d>
 8003046:	4604      	mov	r4, r0
 8003048:	460d      	mov	r5, r1
 800304a:	4b46      	ldr	r3, [pc, #280]	@ (8003164 <store_in_sd+0x1d4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd faa2 	bl	8000598 <__aeabi_f2d>
 8003054:	4b44      	ldr	r3, [pc, #272]	@ (8003168 <store_in_sd+0x1d8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	9318      	str	r3, [sp, #96]	@ 0x60
 800305a:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 800305e:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
 8003062:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8003066:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 800306a:	ed97 7b00 	vldr	d7, [r7]
 800306e:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003072:	ed97 7b02 	vldr	d7, [r7, #8]
 8003076:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800307a:	ed97 7b04 	vldr	d7, [r7, #16]
 800307e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003082:	ed97 7b06 	vldr	d7, [r7, #24]
 8003086:	ed8d 7b08 	vstr	d7, [sp, #32]
 800308a:	ed97 7b08 	vldr	d7, [r7, #32]
 800308e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003092:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8003096:	ed8d 7b04 	vstr	d7, [sp, #16]
 800309a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800309e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80030a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030a4:	9201      	str	r2, [sp, #4]
 80030a6:	9600      	str	r6, [sp, #0]
 80030a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030aa:	4a30      	ldr	r2, [pc, #192]	@ (800316c <store_in_sd+0x1dc>)
 80030ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030b0:	482f      	ldr	r0, [pc, #188]	@ (8003170 <store_in_sd+0x1e0>)
 80030b2:	f012 f9b5 	bl	8015420 <sniprintf>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
#endif


	 fres = f_mount(&FatFs, "", 1);
 80030bc:	2201      	movs	r2, #1
 80030be:	492d      	ldr	r1, [pc, #180]	@ (8003174 <store_in_sd+0x1e4>)
 80030c0:	482d      	ldr	r0, [pc, #180]	@ (8003178 <store_in_sd+0x1e8>)
 80030c2:	f00d fd01 	bl	8010ac8 <f_mount>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  if (fres == FR_OK) {
 80030cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d134      	bne.n	800313e <store_in_sd+0x1ae>
				  if(flag_drop==0){
 80030d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003150 <store_in_sd+0x1c0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d108      	bne.n	80030ee <store_in_sd+0x15e>
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif
		#ifdef PARTIE_BAS
					  fres = f_open(&fil, (uint8_t *) "BOT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80030dc:	2212      	movs	r2, #18
 80030de:	4927      	ldr	r1, [pc, #156]	@ (800317c <store_in_sd+0x1ec>)
 80030e0:	4827      	ldr	r0, [pc, #156]	@ (8003180 <store_in_sd+0x1f0>)
 80030e2:	f00d fd55 	bl	8010b90 <f_open>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80030ec:	e007      	b.n	80030fe <store_in_sd+0x16e>
				  else{
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif
		#ifdef PARTIE_BAS
					  fres = f_open(&fil, (uint8_t *) "BOT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80030ee:	2212      	movs	r2, #18
 80030f0:	4924      	ldr	r1, [pc, #144]	@ (8003184 <store_in_sd+0x1f4>)
 80030f2:	4823      	ldr	r0, [pc, #140]	@ (8003180 <store_in_sd+0x1f0>)
 80030f4:	f00d fd4c 	bl	8010b90 <f_open>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		#endif

				  }
				  if (fres == FR_OK) {
 80030fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003102:	2b00      	cmp	r3, #0
 8003104:	d116      	bne.n	8003134 <store_in_sd+0x1a4>
					  fres=f_lseek(&fil, f_size(&fil));
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <store_in_sd+0x1f0>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4619      	mov	r1, r3
 800310c:	481c      	ldr	r0, [pc, #112]	@ (8003180 <store_in_sd+0x1f0>)
 800310e:	f00e f95c 	bl	80113ca <f_lseek>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 8003118:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800311c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003120:	4913      	ldr	r1, [pc, #76]	@ (8003170 <store_in_sd+0x1e0>)
 8003122:	4817      	ldr	r0, [pc, #92]	@ (8003180 <store_in_sd+0x1f0>)
 8003124:	f00d fef5 	bl	8010f12 <f_write>
 8003128:	4603      	mov	r3, r0
 800312a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					  f_close(&fil);
 800312e:	4814      	ldr	r0, [pc, #80]	@ (8003180 <store_in_sd+0x1f0>)
 8003130:	f00e f91c 	bl	801136c <f_close>
				  }
				  f_mount(NULL, "", 0);
 8003134:	2200      	movs	r2, #0
 8003136:	490f      	ldr	r1, [pc, #60]	@ (8003174 <store_in_sd+0x1e4>)
 8003138:	2000      	movs	r0, #0
 800313a:	f00d fcc5 	bl	8010ac8 <f_mount>
			  }


	return fres;
 800313e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47

}
 8003142:	4618      	mov	r0, r3
 8003144:	374c      	adds	r7, #76	@ 0x4c
 8003146:	46bd      	mov	sp, r7
 8003148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800314c:	20000e38 	.word	0x20000e38
 8003150:	20000e30 	.word	0x20000e30
 8003154:	20000e34 	.word	0x20000e34
 8003158:	20000c18 	.word	0x20000c18
 800315c:	20000688 	.word	0x20000688
 8003160:	20000668 	.word	0x20000668
 8003164:	20000314 	.word	0x20000314
 8003168:	20000e60 	.word	0x20000e60
 800316c:	0801a6bc 	.word	0x0801a6bc
 8003170:	20000564 	.word	0x20000564
 8003174:	0801a710 	.word	0x0801a710
 8003178:	200006a0 	.word	0x200006a0
 800317c:	0801a714 	.word	0x0801a714
 8003180:	200008d8 	.word	0x200008d8
 8003184:	0801a720 	.word	0x0801a720

08003188 <release_mecanism>:




}
HAL_StatusTypeDef release_mecanism(void){
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <release_mecanism+0x1c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8003194:	635a      	str	r2, [r3, #52]	@ 0x34
	 return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003196:	2100      	movs	r1, #0
 8003198:	4802      	ldr	r0, [pc, #8]	@ (80031a4 <release_mecanism+0x1c>)
 800319a:	f007 fc1b 	bl	800a9d4 <HAL_TIM_PWM_Start>
 800319e:	4603      	mov	r3, r0


}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20001480 	.word	0x20001480

080031a8 <lock_mecanism>:
HAL_StatusTypeDef lock_mecanism(void){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,CLOSED_HIGH_TIME);
 80031ac:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <lock_mecanism+0x1c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 80031b4:	635a      	str	r2, [r3, #52]	@ 0x34
	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80031b6:	2100      	movs	r1, #0
 80031b8:	4802      	ldr	r0, [pc, #8]	@ (80031c4 <lock_mecanism+0x1c>)
 80031ba:	f007 fc0b 	bl	800a9d4 <HAL_TIM_PWM_Start>
 80031be:	4603      	mov	r3, r0


}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20001480 	.word	0x20001480

080031c8 <stop_servo>:
void stop_servo(void){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80031cc:	2100      	movs	r1, #0
 80031ce:	4802      	ldr	r0, [pc, #8]	@ (80031d8 <stop_servo+0x10>)
 80031d0:	f007 fd00 	bl	800abd4 <HAL_TIM_PWM_Stop>

}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20001480 	.word	0x20001480

080031dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <MX_SPI1_Init+0x74>)
 80031e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003254 <MX_SPI1_Init+0x78>)
 80031e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <MX_SPI1_Init+0x74>)
 80031e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031ee:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <MX_SPI1_Init+0x74>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031f4:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <MX_SPI1_Init+0x74>)
 80031f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <MX_SPI1_Init+0x74>)
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <MX_SPI1_Init+0x74>)
 8003204:	2200      	movs	r2, #0
 8003206:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <MX_SPI1_Init+0x74>)
 800320a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003210:	4b0f      	ldr	r3, [pc, #60]	@ (8003250 <MX_SPI1_Init+0x74>)
 8003212:	2218      	movs	r2, #24
 8003214:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003216:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <MX_SPI1_Init+0x74>)
 8003218:	2200      	movs	r2, #0
 800321a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <MX_SPI1_Init+0x74>)
 800321e:	2200      	movs	r2, #0
 8003220:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003222:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <MX_SPI1_Init+0x74>)
 8003224:	2200      	movs	r2, #0
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003228:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <MX_SPI1_Init+0x74>)
 800322a:	2207      	movs	r2, #7
 800322c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800322e:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <MX_SPI1_Init+0x74>)
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <MX_SPI1_Init+0x74>)
 8003236:	2208      	movs	r2, #8
 8003238:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800323a:	4805      	ldr	r0, [pc, #20]	@ (8003250 <MX_SPI1_Init+0x74>)
 800323c:	f006 fe78 	bl	8009f30 <HAL_SPI_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003246:	f7ff fe9d 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000e64 	.word	0x20000e64
 8003254:	40013000 	.word	0x40013000

08003258 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a17      	ldr	r2, [pc, #92]	@ (80032d4 <HAL_SPI_MspInit+0x7c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d128      	bne.n	80032cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800327a:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <HAL_SPI_MspInit+0x80>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	4a16      	ldr	r2, [pc, #88]	@ (80032d8 <HAL_SPI_MspInit+0x80>)
 8003280:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003284:	6613      	str	r3, [r2, #96]	@ 0x60
 8003286:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <HAL_SPI_MspInit+0x80>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <HAL_SPI_MspInit+0x80>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	4a10      	ldr	r2, [pc, #64]	@ (80032d8 <HAL_SPI_MspInit+0x80>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800329e:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <HAL_SPI_MspInit+0x80>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80032aa:	23e0      	movs	r3, #224	@ 0xe0
 80032ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ba:	2305      	movs	r3, #5
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4619      	mov	r1, r3
 80032c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032c8:	f004 fe2a 	bl	8007f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032cc:	bf00      	nop
 80032ce:	3728      	adds	r7, #40	@ 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013000 	.word	0x40013000
 80032d8:	40021000 	.word	0x40021000

080032dc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af04      	add	r7, sp, #16
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	2301      	movs	r3, #1
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	2301      	movs	r3, #1
 8003306:	2200      	movs	r2, #0
 8003308:	2178      	movs	r1, #120	@ 0x78
 800330a:	4803      	ldr	r0, [pc, #12]	@ (8003318 <ssd1306_WriteCommand+0x2c>)
 800330c:	f005 f888 	bl	8008420 <HAL_I2C_Mem_Write>
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200003a0 	.word	0x200003a0

0800331c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af04      	add	r7, sp, #16
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f04f 32ff 	mov.w	r2, #4294967295
 800332e:	9202      	str	r2, [sp, #8]
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2301      	movs	r3, #1
 8003338:	2240      	movs	r2, #64	@ 0x40
 800333a:	2178      	movs	r1, #120	@ 0x78
 800333c:	4803      	ldr	r0, [pc, #12]	@ (800334c <ssd1306_WriteData+0x30>)
 800333e:	f005 f86f 	bl	8008420 <HAL_I2C_Mem_Write>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200003a0 	.word	0x200003a0

08003350 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003354:	f7ff ffc2 	bl	80032dc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003358:	2064      	movs	r0, #100	@ 0x64
 800335a:	f002 fceb 	bl	8005d34 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800335e:	2000      	movs	r0, #0
 8003360:	f000 f9ce 	bl	8003700 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003364:	2020      	movs	r0, #32
 8003366:	f7ff ffc1 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800336a:	2000      	movs	r0, #0
 800336c:	f7ff ffbe 	bl	80032ec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003370:	20b0      	movs	r0, #176	@ 0xb0
 8003372:	f7ff ffbb 	bl	80032ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003376:	20c8      	movs	r0, #200	@ 0xc8
 8003378:	f7ff ffb8 	bl	80032ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800337c:	2000      	movs	r0, #0
 800337e:	f7ff ffb5 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003382:	2010      	movs	r0, #16
 8003384:	f7ff ffb2 	bl	80032ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003388:	2040      	movs	r0, #64	@ 0x40
 800338a:	f7ff ffaf 	bl	80032ec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800338e:	20ff      	movs	r0, #255	@ 0xff
 8003390:	f000 f9a2 	bl	80036d8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003394:	20a1      	movs	r0, #161	@ 0xa1
 8003396:	f7ff ffa9 	bl	80032ec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800339a:	20a6      	movs	r0, #166	@ 0xa6
 800339c:	f7ff ffa6 	bl	80032ec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80033a0:	20a8      	movs	r0, #168	@ 0xa8
 80033a2:	f7ff ffa3 	bl	80032ec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80033a6:	203f      	movs	r0, #63	@ 0x3f
 80033a8:	f7ff ffa0 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80033ac:	20a4      	movs	r0, #164	@ 0xa4
 80033ae:	f7ff ff9d 	bl	80032ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80033b2:	20d3      	movs	r0, #211	@ 0xd3
 80033b4:	f7ff ff9a 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7ff ff97 	bl	80032ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80033be:	20d5      	movs	r0, #213	@ 0xd5
 80033c0:	f7ff ff94 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80033c4:	20f0      	movs	r0, #240	@ 0xf0
 80033c6:	f7ff ff91 	bl	80032ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80033ca:	20d9      	movs	r0, #217	@ 0xd9
 80033cc:	f7ff ff8e 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80033d0:	2022      	movs	r0, #34	@ 0x22
 80033d2:	f7ff ff8b 	bl	80032ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80033d6:	20da      	movs	r0, #218	@ 0xda
 80033d8:	f7ff ff88 	bl	80032ec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80033dc:	2012      	movs	r0, #18
 80033de:	f7ff ff85 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80033e2:	20db      	movs	r0, #219	@ 0xdb
 80033e4:	f7ff ff82 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80033e8:	2020      	movs	r0, #32
 80033ea:	f7ff ff7f 	bl	80032ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80033ee:	208d      	movs	r0, #141	@ 0x8d
 80033f0:	f7ff ff7c 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80033f4:	2014      	movs	r0, #20
 80033f6:	f7ff ff79 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80033fa:	2001      	movs	r0, #1
 80033fc:	f000 f980 	bl	8003700 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003400:	2000      	movs	r0, #0
 8003402:	f000 f80f 	bl	8003424 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003406:	f000 f825 	bl	8003454 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800340a:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <ssd1306_Init+0xd0>)
 800340c:	2200      	movs	r2, #0
 800340e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003410:	4b03      	ldr	r3, [pc, #12]	@ (8003420 <ssd1306_Init+0xd0>)
 8003412:	2200      	movs	r2, #0
 8003414:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003416:	4b02      	ldr	r3, [pc, #8]	@ (8003420 <ssd1306_Init+0xd0>)
 8003418:	2201      	movs	r2, #1
 800341a:	711a      	strb	r2, [r3, #4]
}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}
 8003420:	200012c8 	.word	0x200012c8

08003424 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <ssd1306_Fill+0x14>
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <ssd1306_Fill+0x16>
 8003438:	23ff      	movs	r3, #255	@ 0xff
 800343a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800343e:	4619      	mov	r1, r3
 8003440:	4803      	ldr	r0, [pc, #12]	@ (8003450 <ssd1306_Fill+0x2c>)
 8003442:	f012 f91d 	bl	8015680 <memset>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000ec8 	.word	0x20000ec8

08003454 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800345a:	2300      	movs	r3, #0
 800345c:	71fb      	strb	r3, [r7, #7]
 800345e:	e016      	b.n	800348e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	3b50      	subs	r3, #80	@ 0x50
 8003464:	b2db      	uxtb	r3, r3
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ff40 	bl	80032ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800346c:	2000      	movs	r0, #0
 800346e:	f7ff ff3d 	bl	80032ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003472:	2010      	movs	r0, #16
 8003474:	f7ff ff3a 	bl	80032ec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	01db      	lsls	r3, r3, #7
 800347c:	4a08      	ldr	r2, [pc, #32]	@ (80034a0 <ssd1306_UpdateScreen+0x4c>)
 800347e:	4413      	add	r3, r2
 8003480:	2180      	movs	r1, #128	@ 0x80
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff4a 	bl	800331c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	3301      	adds	r3, #1
 800348c:	71fb      	strb	r3, [r7, #7]
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2b07      	cmp	r3, #7
 8003492:	d9e5      	bls.n	8003460 <ssd1306_UpdateScreen+0xc>
    }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000ec8 	.word	0x20000ec8

080034a4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
 80034ae:	460b      	mov	r3, r1
 80034b0:	71bb      	strb	r3, [r7, #6]
 80034b2:	4613      	mov	r3, r2
 80034b4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	db3d      	blt.n	800353a <ssd1306_DrawPixel+0x96>
 80034be:	79bb      	ldrb	r3, [r7, #6]
 80034c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034c2:	d83a      	bhi.n	800353a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80034c4:	797b      	ldrb	r3, [r7, #5]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d11a      	bne.n	8003500 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80034ca:	79fa      	ldrb	r2, [r7, #7]
 80034cc:	79bb      	ldrb	r3, [r7, #6]
 80034ce:	08db      	lsrs	r3, r3, #3
 80034d0:	b2d8      	uxtb	r0, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	01db      	lsls	r3, r3, #7
 80034d6:	4413      	add	r3, r2
 80034d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003548 <ssd1306_DrawPixel+0xa4>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	79bb      	ldrb	r3, [r7, #6]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b259      	sxtb	r1, r3
 80034f0:	79fa      	ldrb	r2, [r7, #7]
 80034f2:	4603      	mov	r3, r0
 80034f4:	01db      	lsls	r3, r3, #7
 80034f6:	4413      	add	r3, r2
 80034f8:	b2c9      	uxtb	r1, r1
 80034fa:	4a13      	ldr	r2, [pc, #76]	@ (8003548 <ssd1306_DrawPixel+0xa4>)
 80034fc:	54d1      	strb	r1, [r2, r3]
 80034fe:	e01d      	b.n	800353c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003500:	79fa      	ldrb	r2, [r7, #7]
 8003502:	79bb      	ldrb	r3, [r7, #6]
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	b2d8      	uxtb	r0, r3
 8003508:	4603      	mov	r3, r0
 800350a:	01db      	lsls	r3, r3, #7
 800350c:	4413      	add	r3, r2
 800350e:	4a0e      	ldr	r2, [pc, #56]	@ (8003548 <ssd1306_DrawPixel+0xa4>)
 8003510:	5cd3      	ldrb	r3, [r2, r3]
 8003512:	b25a      	sxtb	r2, r3
 8003514:	79bb      	ldrb	r3, [r7, #6]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	b25b      	sxtb	r3, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	b25b      	sxtb	r3, r3
 8003526:	4013      	ands	r3, r2
 8003528:	b259      	sxtb	r1, r3
 800352a:	79fa      	ldrb	r2, [r7, #7]
 800352c:	4603      	mov	r3, r0
 800352e:	01db      	lsls	r3, r3, #7
 8003530:	4413      	add	r3, r2
 8003532:	b2c9      	uxtb	r1, r1
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <ssd1306_DrawPixel+0xa4>)
 8003536:	54d1      	strb	r1, [r2, r3]
 8003538:	e000      	b.n	800353c <ssd1306_DrawPixel+0x98>
        return;
 800353a:	bf00      	nop
    }
}
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000ec8 	.word	0x20000ec8

0800354c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b089      	sub	sp, #36	@ 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	4604      	mov	r4, r0
 8003554:	1d38      	adds	r0, r7, #4
 8003556:	e880 0006 	stmia.w	r0, {r1, r2}
 800355a:	461a      	mov	r2, r3
 800355c:	4623      	mov	r3, r4
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	4613      	mov	r3, r2
 8003562:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b1f      	cmp	r3, #31
 8003568:	d902      	bls.n	8003570 <ssd1306_WriteChar+0x24>
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b7e      	cmp	r3, #126	@ 0x7e
 800356e:	d901      	bls.n	8003574 <ssd1306_WriteChar+0x28>
        return 0;
 8003570:	2300      	movs	r3, #0
 8003572:	e06c      	b.n	800364e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003574:	4b38      	ldr	r3, [pc, #224]	@ (8003658 <ssd1306_WriteChar+0x10c>)
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	793b      	ldrb	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	2b80      	cmp	r3, #128	@ 0x80
 8003580:	dc06      	bgt.n	8003590 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003582:	4b35      	ldr	r3, [pc, #212]	@ (8003658 <ssd1306_WriteChar+0x10c>)
 8003584:	885b      	ldrh	r3, [r3, #2]
 8003586:	461a      	mov	r2, r3
 8003588:	797b      	ldrb	r3, [r7, #5]
 800358a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	dd01      	ble.n	8003594 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003590:	2300      	movs	r3, #0
 8003592:	e05c      	b.n	800364e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	e04c      	b.n	8003634 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	3b20      	subs	r3, #32
 80035a0:	7979      	ldrb	r1, [r7, #5]
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4619      	mov	r1, r3
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	440b      	add	r3, r1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	e034      	b.n	8003624 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d012      	beq.n	80035f0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80035ca:	4b23      	ldr	r3, [pc, #140]	@ (8003658 <ssd1306_WriteChar+0x10c>)
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	b2d8      	uxtb	r0, r3
 80035d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003658 <ssd1306_WriteChar+0x10c>)
 80035da:	885b      	ldrh	r3, [r3, #2]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	7bba      	ldrb	r2, [r7, #14]
 80035e8:	4619      	mov	r1, r3
 80035ea:	f7ff ff5b 	bl	80034a4 <ssd1306_DrawPixel>
 80035ee:	e016      	b.n	800361e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80035f0:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <ssd1306_WriteChar+0x10c>)
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	4b16      	ldr	r3, [pc, #88]	@ (8003658 <ssd1306_WriteChar+0x10c>)
 8003600:	885b      	ldrh	r3, [r3, #2]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4413      	add	r3, r2
 800360a:	b2d9      	uxtb	r1, r3
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	f7ff ff43 	bl	80034a4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	3301      	adds	r3, #1
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	793b      	ldrb	r3, [r7, #4]
 8003626:	461a      	mov	r2, r3
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	4293      	cmp	r3, r2
 800362c:	d3c5      	bcc.n	80035ba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3301      	adds	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	797b      	ldrb	r3, [r7, #5]
 8003636:	461a      	mov	r2, r3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4293      	cmp	r3, r2
 800363c:	d3ad      	bcc.n	800359a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <ssd1306_WriteChar+0x10c>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	793a      	ldrb	r2, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	b29a      	uxth	r2, r3
 8003648:	4b03      	ldr	r3, [pc, #12]	@ (8003658 <ssd1306_WriteChar+0x10c>)
 800364a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	@ 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd90      	pop	{r4, r7, pc}
 8003656:	bf00      	nop
 8003658:	200012c8 	.word	0x200012c8

0800365c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	1d38      	adds	r0, r7, #4
 8003666:	e880 0006 	stmia.w	r0, {r1, r2}
 800366a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800366c:	e012      	b.n	8003694 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	7818      	ldrb	r0, [r3, #0]
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	1d3a      	adds	r2, r7, #4
 8003676:	ca06      	ldmia	r2, {r1, r2}
 8003678:	f7ff ff68 	bl	800354c <ssd1306_WriteChar>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d002      	beq.n	800368e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	e008      	b.n	80036a0 <ssd1306_WriteString+0x44>
        }
        str++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3301      	adds	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e8      	bne.n	800366e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	781b      	ldrb	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	460a      	mov	r2, r1
 80036b2:	71fb      	strb	r3, [r7, #7]
 80036b4:	4613      	mov	r3, r2
 80036b6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <ssd1306_SetCursor+0x2c>)
 80036be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80036c0:	79bb      	ldrb	r3, [r7, #6]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <ssd1306_SetCursor+0x2c>)
 80036c6:	805a      	strh	r2, [r3, #2]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	200012c8 	.word	0x200012c8

080036d8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80036e2:	2381      	movs	r3, #129	@ 0x81
 80036e4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fdff 	bl	80032ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fdfb 	bl	80032ec <ssd1306_WriteCommand>
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003710:	23af      	movs	r3, #175	@ 0xaf
 8003712:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003714:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <ssd1306_SetDisplayOn+0x38>)
 8003716:	2201      	movs	r2, #1
 8003718:	715a      	strb	r2, [r3, #5]
 800371a:	e004      	b.n	8003726 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800371c:	23ae      	movs	r3, #174	@ 0xae
 800371e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <ssd1306_SetDisplayOn+0x38>)
 8003722:	2200      	movs	r2, #0
 8003724:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fddf 	bl	80032ec <ssd1306_WriteCommand>
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200012c8 	.word	0x200012c8

0800373c <statemachine>:
extern uint32_t timeindex;




void statemachine(void){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af02      	add	r7, sp, #8

	switch(state){
 8003742:	4b91      	ldr	r3, [pc, #580]	@ (8003988 <statemachine+0x24c>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b03      	cmp	r3, #3
 8003748:	f200 83ba 	bhi.w	8003ec0 <statemachine+0x784>
 800374c:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <statemachine+0x18>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003765 	.word	0x08003765
 8003758:	08003b33 	.word	0x08003b33
 800375c:	08003cc1 	.word	0x08003cc1
 8003760:	08003e9b 	.word	0x08003e9b

	case IDLE:
		ssd1306_Fill(Black);
 8003764:	2000      	movs	r0, #0
 8003766:	f7ff fe5d 	bl	8003424 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 800376a:	2120      	movs	r1, #32
 800376c:	2020      	movs	r0, #32
 800376e:	f7ff ff9b 	bl	80036a8 <ssd1306_SetCursor>
switch(screenindex){
 8003772:	4b86      	ldr	r3, [pc, #536]	@ (800398c <statemachine+0x250>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d86f      	bhi.n	800385a <statemachine+0x11e>
 800377a:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <statemachine+0x44>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003791 	.word	0x08003791
 8003784:	080037c9 	.word	0x080037c9
 8003788:	080037f3 	.word	0x080037f3
 800378c:	0800381f 	.word	0x0800381f
case 0:
	if (vbat <= 7){
 8003790:	4b7f      	ldr	r3, [pc, #508]	@ (8003990 <statemachine+0x254>)
 8003792:	edd3 7a00 	vldr	s15, [r3]
 8003796:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800379a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a2:	d900      	bls.n	80037a6 <statemachine+0x6a>
					ssd1306_WriteString("bat_low", Font_7x10, White);
					LED_Setcolour(255,0,0,0,0,0);
				}
	break;
 80037a4:	e059      	b.n	800385a <statemachine+0x11e>
					ssd1306_WriteString("bat_low", Font_7x10, White);
 80037a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003994 <statemachine+0x258>)
 80037a8:	2301      	movs	r3, #1
 80037aa:	ca06      	ldmia	r2, {r1, r2}
 80037ac:	487a      	ldr	r0, [pc, #488]	@ (8003998 <statemachine+0x25c>)
 80037ae:	f7ff ff55 	bl	800365c <ssd1306_WriteString>
					LED_Setcolour(255,0,0,0,0,0);
 80037b2:	2300      	movs	r3, #0
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2300      	movs	r3, #0
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	2200      	movs	r2, #0
 80037be:	2100      	movs	r1, #0
 80037c0:	20ff      	movs	r0, #255	@ 0xff
 80037c2:	f7ff f8f3 	bl	80029ac <LED_Setcolour>
	break;
 80037c6:	e048      	b.n	800385a <statemachine+0x11e>
case 1:
	if(flag_calib==0){
 80037c8:	4b74      	ldr	r3, [pc, #464]	@ (800399c <statemachine+0x260>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d13f      	bne.n	8003850 <statemachine+0x114>
		ssd1306_WriteString("alt_cal", Font_7x10, White);
 80037d0:	4a70      	ldr	r2, [pc, #448]	@ (8003994 <statemachine+0x258>)
 80037d2:	2301      	movs	r3, #1
 80037d4:	ca06      	ldmia	r2, {r1, r2}
 80037d6:	4872      	ldr	r0, [pc, #456]	@ (80039a0 <statemachine+0x264>)
 80037d8:	f7ff ff40 	bl	800365c <ssd1306_WriteString>
		LED_Setcolour(0,255,0,0,0,0);
 80037dc:	2300      	movs	r3, #0
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	2200      	movs	r2, #0
 80037e8:	21ff      	movs	r1, #255	@ 0xff
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7ff f8de 	bl	80029ac <LED_Setcolour>
				}
	break;
 80037f0:	e02e      	b.n	8003850 <statemachine+0x114>
case 2:
	if (GNSSData.fixType <= 2){
 80037f2:	4b6c      	ldr	r3, [pc, #432]	@ (80039a4 <statemachine+0x268>)
 80037f4:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d82b      	bhi.n	8003854 <statemachine+0x118>
		ssd1306_WriteString("gps_fix", Font_7x10, White);
 80037fc:	4a65      	ldr	r2, [pc, #404]	@ (8003994 <statemachine+0x258>)
 80037fe:	2301      	movs	r3, #1
 8003800:	ca06      	ldmia	r2, {r1, r2}
 8003802:	4869      	ldr	r0, [pc, #420]	@ (80039a8 <statemachine+0x26c>)
 8003804:	f7ff ff2a 	bl	800365c <ssd1306_WriteString>
		LED_Setcolour(255,255,0,0,0,0);
 8003808:	2300      	movs	r3, #0
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	2200      	movs	r2, #0
 8003814:	21ff      	movs	r1, #255	@ 0xff
 8003816:	20ff      	movs	r0, #255	@ 0xff
 8003818:	f7ff f8c8 	bl	80029ac <LED_Setcolour>
				}

	break;
 800381c:	e01a      	b.n	8003854 <statemachine+0x118>
case 3:
	if(HAL_GPIO_ReadPin(PWEN_GPIO_Port,PWEN_Pin)==0){
 800381e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003822:	4862      	ldr	r0, [pc, #392]	@ (80039ac <statemachine+0x270>)
 8003824:	f004 fcfe 	bl	8008224 <HAL_GPIO_ReadPin>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d114      	bne.n	8003858 <statemachine+0x11c>
		ssd1306_WriteString("TELEPWR", Font_7x10, White);
 800382e:	4a59      	ldr	r2, [pc, #356]	@ (8003994 <statemachine+0x258>)
 8003830:	2301      	movs	r3, #1
 8003832:	ca06      	ldmia	r2, {r1, r2}
 8003834:	485e      	ldr	r0, [pc, #376]	@ (80039b0 <statemachine+0x274>)
 8003836:	f7ff ff11 	bl	800365c <ssd1306_WriteString>
		LED_Setcolour(0,255,255,0,0,0);
 800383a:	2300      	movs	r3, #0
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2300      	movs	r3, #0
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	22ff      	movs	r2, #255	@ 0xff
 8003846:	21ff      	movs	r1, #255	@ 0xff
 8003848:	2000      	movs	r0, #0
 800384a:	f7ff f8af 	bl	80029ac <LED_Setcolour>
	}
	break;
 800384e:	e003      	b.n	8003858 <statemachine+0x11c>
	break;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <statemachine+0x11e>
	break;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <statemachine+0x11e>
	break;
 8003858:	bf00      	nop
}


ssd1306_SetCursor(32, 42);
 800385a:	212a      	movs	r1, #42	@ 0x2a
 800385c:	2020      	movs	r0, #32
 800385e:	f7ff ff23 	bl	80036a8 <ssd1306_SetCursor>

if(datascreenindex<=10){
 8003862:	4b54      	ldr	r3, [pc, #336]	@ (80039b4 <statemachine+0x278>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b0a      	cmp	r3, #10
 8003868:	dc1e      	bgt.n	80038a8 <statemachine+0x16c>
	ssd1306_WriteString("bmpalt:", Font_7x10, White);
 800386a:	4a4a      	ldr	r2, [pc, #296]	@ (8003994 <statemachine+0x258>)
 800386c:	2301      	movs	r3, #1
 800386e:	ca06      	ldmia	r2, {r1, r2}
 8003870:	4851      	ldr	r0, [pc, #324]	@ (80039b8 <statemachine+0x27c>)
 8003872:	f7ff fef3 	bl	800365c <ssd1306_WriteString>
	ssd1306_SetCursor(32, 52);
 8003876:	2134      	movs	r1, #52	@ 0x34
 8003878:	2020      	movs	r0, #32
 800387a:	f7ff ff15 	bl	80036a8 <ssd1306_SetCursor>
    	snprintf((char *)screenbuffer,50,"%0.3f",myDatabmp581.altitude);
 800387e:	4b4f      	ldr	r3, [pc, #316]	@ (80039bc <statemachine+0x280>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fe88 	bl	8000598 <__aeabi_f2d>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	e9cd 2300 	strd	r2, r3, [sp]
 8003890:	4a4b      	ldr	r2, [pc, #300]	@ (80039c0 <statemachine+0x284>)
 8003892:	2132      	movs	r1, #50	@ 0x32
 8003894:	484b      	ldr	r0, [pc, #300]	@ (80039c4 <statemachine+0x288>)
 8003896:	f011 fdc3 	bl	8015420 <sniprintf>
    	ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 800389a:	4a3e      	ldr	r2, [pc, #248]	@ (8003994 <statemachine+0x258>)
 800389c:	2301      	movs	r3, #1
 800389e:	ca06      	ldmia	r2, {r1, r2}
 80038a0:	4848      	ldr	r0, [pc, #288]	@ (80039c4 <statemachine+0x288>)
 80038a2:	f7ff fedb 	bl	800365c <ssd1306_WriteString>
 80038a6:	e0a0      	b.n	80039ea <statemachine+0x2ae>
}
else if(datascreenindex>10 && datascreenindex<=20){
 80038a8:	4b42      	ldr	r3, [pc, #264]	@ (80039b4 <statemachine+0x278>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b0a      	cmp	r3, #10
 80038ae:	dd22      	ble.n	80038f6 <statemachine+0x1ba>
 80038b0:	4b40      	ldr	r3, [pc, #256]	@ (80039b4 <statemachine+0x278>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b14      	cmp	r3, #20
 80038b6:	dc1e      	bgt.n	80038f6 <statemachine+0x1ba>
			ssd1306_WriteString("H_servo:", Font_7x10, White);
 80038b8:	4a36      	ldr	r2, [pc, #216]	@ (8003994 <statemachine+0x258>)
 80038ba:	2301      	movs	r3, #1
 80038bc:	ca06      	ldmia	r2, {r1, r2}
 80038be:	4842      	ldr	r0, [pc, #264]	@ (80039c8 <statemachine+0x28c>)
 80038c0:	f7ff fecc 	bl	800365c <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 80038c4:	2134      	movs	r1, #52	@ 0x34
 80038c6:	2020      	movs	r0, #32
 80038c8:	f7ff feee 	bl	80036a8 <ssd1306_SetCursor>
			snprintf((char *)screenbuffer,50,"%0.1f",hauteur_servo);
 80038cc:	4b3f      	ldr	r3, [pc, #252]	@ (80039cc <statemachine+0x290>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc fe61 	bl	8000598 <__aeabi_f2d>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	e9cd 2300 	strd	r2, r3, [sp]
 80038de:	4a3c      	ldr	r2, [pc, #240]	@ (80039d0 <statemachine+0x294>)
 80038e0:	2132      	movs	r1, #50	@ 0x32
 80038e2:	4838      	ldr	r0, [pc, #224]	@ (80039c4 <statemachine+0x288>)
 80038e4:	f011 fd9c 	bl	8015420 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 80038e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <statemachine+0x258>)
 80038ea:	2301      	movs	r3, #1
 80038ec:	ca06      	ldmia	r2, {r1, r2}
 80038ee:	4835      	ldr	r0, [pc, #212]	@ (80039c4 <statemachine+0x288>)
 80038f0:	f7ff feb4 	bl	800365c <ssd1306_WriteString>
 80038f4:	e079      	b.n	80039ea <statemachine+0x2ae>
}
else if (datascreenindex>20 && datascreenindex<=30) {
 80038f6:	4b2f      	ldr	r3, [pc, #188]	@ (80039b4 <statemachine+0x278>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b14      	cmp	r3, #20
 80038fc:	dd1c      	ble.n	8003938 <statemachine+0x1fc>
 80038fe:	4b2d      	ldr	r3, [pc, #180]	@ (80039b4 <statemachine+0x278>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b1e      	cmp	r3, #30
 8003904:	dc18      	bgt.n	8003938 <statemachine+0x1fc>
    		ssd1306_WriteString("sat:", Font_7x10, White);
 8003906:	4a23      	ldr	r2, [pc, #140]	@ (8003994 <statemachine+0x258>)
 8003908:	2301      	movs	r3, #1
 800390a:	ca06      	ldmia	r2, {r1, r2}
 800390c:	4831      	ldr	r0, [pc, #196]	@ (80039d4 <statemachine+0x298>)
 800390e:	f7ff fea5 	bl	800365c <ssd1306_WriteString>
    			ssd1306_SetCursor(32, 52);
 8003912:	2134      	movs	r1, #52	@ 0x34
 8003914:	2020      	movs	r0, #32
 8003916:	f7ff fec7 	bl	80036a8 <ssd1306_SetCursor>
    		snprintf((char *)screenbuffer,50,"%d",GNSSData.numSV);
 800391a:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <statemachine+0x268>)
 800391c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8003920:	4a2d      	ldr	r2, [pc, #180]	@ (80039d8 <statemachine+0x29c>)
 8003922:	2132      	movs	r1, #50	@ 0x32
 8003924:	4827      	ldr	r0, [pc, #156]	@ (80039c4 <statemachine+0x288>)
 8003926:	f011 fd7b 	bl	8015420 <sniprintf>
    		ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 800392a:	4a1a      	ldr	r2, [pc, #104]	@ (8003994 <statemachine+0x258>)
 800392c:	2301      	movs	r3, #1
 800392e:	ca06      	ldmia	r2, {r1, r2}
 8003930:	4824      	ldr	r0, [pc, #144]	@ (80039c4 <statemachine+0x288>)
 8003932:	f7ff fe93 	bl	800365c <ssd1306_WriteString>
 8003936:	e058      	b.n	80039ea <statemachine+0x2ae>

    	}
else if (datascreenindex>30 && datascreenindex<=40){
 8003938:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <statemachine+0x278>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b1e      	cmp	r3, #30
 800393e:	dd51      	ble.n	80039e4 <statemachine+0x2a8>
 8003940:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <statemachine+0x278>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b28      	cmp	r3, #40	@ 0x28
 8003946:	dc4d      	bgt.n	80039e4 <statemachine+0x2a8>
#ifdef PARTIE_HAUT
	datascreenindex=0;

#endif
#ifdef PARTIE_BAS
	ssd1306_WriteString("dist:", Font_7x10, White);
 8003948:	4a12      	ldr	r2, [pc, #72]	@ (8003994 <statemachine+0x258>)
 800394a:	2301      	movs	r3, #1
 800394c:	ca06      	ldmia	r2, {r1, r2}
 800394e:	4823      	ldr	r0, [pc, #140]	@ (80039dc <statemachine+0x2a0>)
 8003950:	f7ff fe84 	bl	800365c <ssd1306_WriteString>
	ssd1306_SetCursor(32, 52);
 8003954:	2134      	movs	r1, #52	@ 0x34
 8003956:	2020      	movs	r0, #32
 8003958:	f7ff fea6 	bl	80036a8 <ssd1306_SetCursor>
	snprintf((char *)screenbuffer,50,"%0.3f",distance_entre_module);
 800395c:	4b20      	ldr	r3, [pc, #128]	@ (80039e0 <statemachine+0x2a4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fe19 	bl	8000598 <__aeabi_f2d>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	e9cd 2300 	strd	r2, r3, [sp]
 800396e:	4a14      	ldr	r2, [pc, #80]	@ (80039c0 <statemachine+0x284>)
 8003970:	2132      	movs	r1, #50	@ 0x32
 8003972:	4814      	ldr	r0, [pc, #80]	@ (80039c4 <statemachine+0x288>)
 8003974:	f011 fd54 	bl	8015420 <sniprintf>
	ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 8003978:	4a06      	ldr	r2, [pc, #24]	@ (8003994 <statemachine+0x258>)
 800397a:	2301      	movs	r3, #1
 800397c:	ca06      	ldmia	r2, {r1, r2}
 800397e:	4811      	ldr	r0, [pc, #68]	@ (80039c4 <statemachine+0x288>)
 8003980:	f7ff fe6c 	bl	800365c <ssd1306_WriteString>
 8003984:	e031      	b.n	80039ea <statemachine+0x2ae>
 8003986:	bf00      	nop
 8003988:	20000e2c 	.word	0x20000e2c
 800398c:	20001304 	.word	0x20001304
 8003990:	20000b1c 	.word	0x20000b1c
 8003994:	20000014 	.word	0x20000014
 8003998:	0801a72c 	.word	0x0801a72c
 800399c:	20000e38 	.word	0x20000e38
 80039a0:	0801a734 	.word	0x0801a734
 80039a4:	20000c18 	.word	0x20000c18
 80039a8:	0801a73c 	.word	0x0801a73c
 80039ac:	48000400 	.word	0x48000400
 80039b0:	0801a744 	.word	0x0801a744
 80039b4:	20001308 	.word	0x20001308
 80039b8:	0801a74c 	.word	0x0801a74c
 80039bc:	20000688 	.word	0x20000688
 80039c0:	0801a754 	.word	0x0801a754
 80039c4:	200012d0 	.word	0x200012d0
 80039c8:	0801a75c 	.word	0x0801a75c
 80039cc:	20000e50 	.word	0x20000e50
 80039d0:	0801a768 	.word	0x0801a768
 80039d4:	0801a770 	.word	0x0801a770
 80039d8:	0801a778 	.word	0x0801a778
 80039dc:	0801a77c 	.word	0x0801a77c
 80039e0:	20000314 	.word	0x20000314

#endif
    	}
else{
#ifdef PARTIE_BAS
	datascreenindex=0;
 80039e4:	4ba1      	ldr	r3, [pc, #644]	@ (8003c6c <statemachine+0x530>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]


}


delaycounterforscreenindex++;
 80039ea:	4ba1      	ldr	r3, [pc, #644]	@ (8003c70 <statemachine+0x534>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	4a9f      	ldr	r2, [pc, #636]	@ (8003c70 <statemachine+0x534>)
 80039f2:	6013      	str	r3, [r2, #0]
if(delaycounterforscreenindex>=5){
 80039f4:	4b9e      	ldr	r3, [pc, #632]	@ (8003c70 <statemachine+0x534>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	dd07      	ble.n	8003a0c <statemachine+0x2d0>
	delaycounterforscreenindex=0;
 80039fc:	4b9c      	ldr	r3, [pc, #624]	@ (8003c70 <statemachine+0x534>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
	screenindex++;
 8003a02:	4b9c      	ldr	r3, [pc, #624]	@ (8003c74 <statemachine+0x538>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	4a9a      	ldr	r2, [pc, #616]	@ (8003c74 <statemachine+0x538>)
 8003a0a:	6013      	str	r3, [r2, #0]
}

if(screenindex>3){
 8003a0c:	4b99      	ldr	r3, [pc, #612]	@ (8003c74 <statemachine+0x538>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	dd02      	ble.n	8003a1a <statemachine+0x2de>
	screenindex=0;
 8003a14:	4b97      	ldr	r3, [pc, #604]	@ (8003c74 <statemachine+0x538>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
}
datascreenindex++;
 8003a1a:	4b94      	ldr	r3, [pc, #592]	@ (8003c6c <statemachine+0x530>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	4a92      	ldr	r2, [pc, #584]	@ (8003c6c <statemachine+0x530>)
 8003a22:	6013      	str	r3, [r2, #0]
		  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
		  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

#endif
#ifdef PARTIE_BAS
if(datascreenindex>=40){
 8003a24:	4b91      	ldr	r3, [pc, #580]	@ (8003c6c <statemachine+0x530>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b27      	cmp	r3, #39	@ 0x27
 8003a2a:	dd02      	ble.n	8003a32 <statemachine+0x2f6>
	datascreenindex=0;
 8003a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8003c6c <statemachine+0x530>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
}

create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,SAT_ADDR,0x10,
 8003a32:	4b91      	ldr	r3, [pc, #580]	@ (8003c78 <statemachine+0x53c>)
 8003a34:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003a38:	4b8f      	ldr	r3, [pc, #572]	@ (8003c78 <statemachine+0x53c>)
 8003a3a:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003a3e:	4b8e      	ldr	r3, [pc, #568]	@ (8003c78 <statemachine+0x53c>)
 8003a40:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003a44:	4b8d      	ldr	r3, [pc, #564]	@ (8003c7c <statemachine+0x540>)
 8003a46:	ed93 6a05 	vldr	s12, [r3, #20]
 8003a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c78 <statemachine+0x53c>)
 8003a4c:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003a50:	4b89      	ldr	r3, [pc, #548]	@ (8003c78 <statemachine+0x53c>)
 8003a52:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003a56:	4b8a      	ldr	r3, [pc, #552]	@ (8003c80 <statemachine+0x544>)
 8003a58:	ed93 3a00 	vldr	s6, [r3]
 8003a5c:	4b87      	ldr	r3, [pc, #540]	@ (8003c7c <statemachine+0x540>)
 8003a5e:	edd3 3a03 	vldr	s7, [r3, #12]
 8003a62:	4b88      	ldr	r3, [pc, #544]	@ (8003c84 <statemachine+0x548>)
 8003a64:	ed93 4a00 	vldr	s8, [r3]
 8003a68:	4b86      	ldr	r3, [pc, #536]	@ (8003c84 <statemachine+0x548>)
 8003a6a:	edd3 4a01 	vldr	s9, [r3, #4]
 8003a6e:	4b85      	ldr	r3, [pc, #532]	@ (8003c84 <statemachine+0x548>)
 8003a70:	ed93 5a02 	vldr	s10, [r3, #8]
 8003a74:	4b84      	ldr	r3, [pc, #528]	@ (8003c88 <statemachine+0x54c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	eeb0 2a65 	vmov.f32	s4, s11
 8003a7e:	eef0 1a46 	vmov.f32	s3, s12
 8003a82:	eeb0 1a66 	vmov.f32	s2, s13
 8003a86:	eef0 0a47 	vmov.f32	s1, s14
 8003a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8e:	2310      	movs	r3, #16
 8003a90:	2210      	movs	r2, #16
 8003a92:	2182      	movs	r1, #130	@ 0x82
 8003a94:	487d      	ldr	r0, [pc, #500]	@ (8003c8c <statemachine+0x550>)
 8003a96:	f000 fe31 	bl	80046fc <create_and_send_payload>
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
vTaskDelay(pdMS_TO_TICKS(5));
 8003a9a:	2005      	movs	r0, #5
 8003a9c:	f00f f9ea 	bl	8012e74 <vTaskDelay>

create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 8003aa0:	4b75      	ldr	r3, [pc, #468]	@ (8003c78 <statemachine+0x53c>)
 8003aa2:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003aa6:	4b74      	ldr	r3, [pc, #464]	@ (8003c78 <statemachine+0x53c>)
 8003aa8:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003aac:	4b72      	ldr	r3, [pc, #456]	@ (8003c78 <statemachine+0x53c>)
 8003aae:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003ab2:	4b72      	ldr	r3, [pc, #456]	@ (8003c7c <statemachine+0x540>)
 8003ab4:	ed93 6a05 	vldr	s12, [r3, #20]
 8003ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c78 <statemachine+0x53c>)
 8003aba:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003abe:	4b6e      	ldr	r3, [pc, #440]	@ (8003c78 <statemachine+0x53c>)
 8003ac0:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003ac4:	4b72      	ldr	r3, [pc, #456]	@ (8003c90 <statemachine+0x554>)
 8003ac6:	ed93 3a00 	vldr	s6, [r3]
 8003aca:	4b6d      	ldr	r3, [pc, #436]	@ (8003c80 <statemachine+0x544>)
 8003acc:	edd3 3a00 	vldr	s7, [r3]
 8003ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8003c84 <statemachine+0x548>)
 8003ad2:	ed93 4a00 	vldr	s8, [r3]
 8003ad6:	4b6b      	ldr	r3, [pc, #428]	@ (8003c84 <statemachine+0x548>)
 8003ad8:	edd3 4a01 	vldr	s9, [r3, #4]
 8003adc:	4b69      	ldr	r3, [pc, #420]	@ (8003c84 <statemachine+0x548>)
 8003ade:	ed93 5a02 	vldr	s10, [r3, #8]
 8003ae2:	4b69      	ldr	r3, [pc, #420]	@ (8003c88 <statemachine+0x54c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	eeb0 2a65 	vmov.f32	s4, s11
 8003aec:	eef0 1a46 	vmov.f32	s3, s12
 8003af0:	eeb0 1a66 	vmov.f32	s2, s13
 8003af4:	eef0 0a47 	vmov.f32	s1, s14
 8003af8:	eeb0 0a67 	vmov.f32	s0, s15
 8003afc:	2310      	movs	r3, #16
 8003afe:	2201      	movs	r2, #1
 8003b00:	2182      	movs	r1, #130	@ 0x82
 8003b02:	4862      	ldr	r0, [pc, #392]	@ (8003c8c <statemachine+0x550>)
 8003b04:	f000 fdfa 	bl	80046fc <create_and_send_payload>
		  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
		  GNSSData.fgSpeed,distance_entre_module,temp,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
#endif


if((flag_drop==1) && (flag_calib==1)){
 8003b08:	4b62      	ldr	r3, [pc, #392]	@ (8003c94 <statemachine+0x558>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	f040 81d2 	bne.w	8003eb6 <statemachine+0x77a>
 8003b12:	4b61      	ldr	r3, [pc, #388]	@ (8003c98 <statemachine+0x55c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	f040 81cd 	bne.w	8003eb6 <statemachine+0x77a>

				state++;
 8003b1c:	4b5f      	ldr	r3, [pc, #380]	@ (8003c9c <statemachine+0x560>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b5d      	ldr	r3, [pc, #372]	@ (8003c9c <statemachine+0x560>)
 8003b26:	701a      	strb	r2, [r3, #0]
				cpt_tps_chute=timeindex;
 8003b28:	4b57      	ldr	r3, [pc, #348]	@ (8003c88 <statemachine+0x54c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ca0 <statemachine+0x564>)
 8003b2e:	6013      	str	r3, [r2, #0]
#ifdef PARTIE_HAUT
				create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
#endif
			}

		break;
 8003b30:	e1c1      	b.n	8003eb6 <statemachine+0x77a>

	case PRESEPARATION:
		ssd1306_Fill(Black);
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7ff fc76 	bl	8003424 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003b38:	2120      	movs	r1, #32
 8003b3a:	2020      	movs	r0, #32
 8003b3c:	f7ff fdb4 	bl	80036a8 <ssd1306_SetCursor>
		ssd1306_WriteString("PRE", Font_16x24, White);
 8003b40:	4a58      	ldr	r2, [pc, #352]	@ (8003ca4 <statemachine+0x568>)
 8003b42:	2301      	movs	r3, #1
 8003b44:	ca06      	ldmia	r2, {r1, r2}
 8003b46:	4858      	ldr	r0, [pc, #352]	@ (8003ca8 <statemachine+0x56c>)
 8003b48:	f7ff fd88 	bl	800365c <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003b4c:	2138      	movs	r1, #56	@ 0x38
 8003b4e:	2020      	movs	r0, #32
 8003b50:	f7ff fdaa 	bl	80036a8 <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"h=%f",hauteur_servo);
 8003b54:	4b55      	ldr	r3, [pc, #340]	@ (8003cac <statemachine+0x570>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fc fd1d 	bl	8000598 <__aeabi_f2d>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	e9cd 2300 	strd	r2, r3, [sp]
 8003b66:	4a52      	ldr	r2, [pc, #328]	@ (8003cb0 <statemachine+0x574>)
 8003b68:	2132      	movs	r1, #50	@ 0x32
 8003b6a:	4852      	ldr	r0, [pc, #328]	@ (8003cb4 <statemachine+0x578>)
 8003b6c:	f011 fc58 	bl	8015420 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003b70:	4a51      	ldr	r2, [pc, #324]	@ (8003cb8 <statemachine+0x57c>)
 8003b72:	2301      	movs	r3, #1
 8003b74:	ca06      	ldmia	r2, {r1, r2}
 8003b76:	484f      	ldr	r0, [pc, #316]	@ (8003cb4 <statemachine+0x578>)
 8003b78:	f7ff fd70 	bl	800365c <ssd1306_WriteString>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
#endif
#ifdef PARTIE_BAS

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c78 <statemachine+0x53c>)
 8003b7e:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003b82:	4b3d      	ldr	r3, [pc, #244]	@ (8003c78 <statemachine+0x53c>)
 8003b84:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003b88:	4b3b      	ldr	r3, [pc, #236]	@ (8003c78 <statemachine+0x53c>)
 8003b8a:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <statemachine+0x540>)
 8003b90:	ed93 6a05 	vldr	s12, [r3, #20]
 8003b94:	4b38      	ldr	r3, [pc, #224]	@ (8003c78 <statemachine+0x53c>)
 8003b96:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003b9a:	4b37      	ldr	r3, [pc, #220]	@ (8003c78 <statemachine+0x53c>)
 8003b9c:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8003c90 <statemachine+0x554>)
 8003ba2:	ed93 3a00 	vldr	s6, [r3]
 8003ba6:	4b36      	ldr	r3, [pc, #216]	@ (8003c80 <statemachine+0x544>)
 8003ba8:	edd3 3a00 	vldr	s7, [r3]
 8003bac:	4b35      	ldr	r3, [pc, #212]	@ (8003c84 <statemachine+0x548>)
 8003bae:	ed93 4a00 	vldr	s8, [r3]
 8003bb2:	4b34      	ldr	r3, [pc, #208]	@ (8003c84 <statemachine+0x548>)
 8003bb4:	edd3 4a01 	vldr	s9, [r3, #4]
 8003bb8:	4b32      	ldr	r3, [pc, #200]	@ (8003c84 <statemachine+0x548>)
 8003bba:	ed93 5a02 	vldr	s10, [r3, #8]
 8003bbe:	4b32      	ldr	r3, [pc, #200]	@ (8003c88 <statemachine+0x54c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	eeb0 2a65 	vmov.f32	s4, s11
 8003bc8:	eef0 1a46 	vmov.f32	s3, s12
 8003bcc:	eeb0 1a66 	vmov.f32	s2, s13
 8003bd0:	eef0 0a47 	vmov.f32	s1, s14
 8003bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd8:	2310      	movs	r3, #16
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2182      	movs	r1, #130	@ 0x82
 8003bde:	482b      	ldr	r0, [pc, #172]	@ (8003c8c <statemachine+0x550>)
 8003be0:	f000 fd8c 	bl	80046fc <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
				  GNSSData.fgSpeed,distance_entre_module,temp,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

		vTaskDelay(pdMS_TO_TICKS(5));
 8003be4:	2005      	movs	r0, #5
 8003be6:	f00f f945 	bl	8012e74 <vTaskDelay>

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,SAT_ADDR,0x10,
 8003bea:	4b23      	ldr	r3, [pc, #140]	@ (8003c78 <statemachine+0x53c>)
 8003bec:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003bf0:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <statemachine+0x53c>)
 8003bf2:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003bf6:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <statemachine+0x53c>)
 8003bf8:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c7c <statemachine+0x540>)
 8003bfe:	ed93 6a05 	vldr	s12, [r3, #20]
 8003c02:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <statemachine+0x53c>)
 8003c04:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <statemachine+0x53c>)
 8003c0a:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c80 <statemachine+0x544>)
 8003c10:	ed93 3a00 	vldr	s6, [r3]
 8003c14:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <statemachine+0x540>)
 8003c16:	edd3 3a03 	vldr	s7, [r3, #12]
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c84 <statemachine+0x548>)
 8003c1c:	ed93 4a00 	vldr	s8, [r3]
 8003c20:	4b18      	ldr	r3, [pc, #96]	@ (8003c84 <statemachine+0x548>)
 8003c22:	edd3 4a01 	vldr	s9, [r3, #4]
 8003c26:	4b17      	ldr	r3, [pc, #92]	@ (8003c84 <statemachine+0x548>)
 8003c28:	ed93 5a02 	vldr	s10, [r3, #8]
 8003c2c:	4b16      	ldr	r3, [pc, #88]	@ (8003c88 <statemachine+0x54c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	eeb0 2a65 	vmov.f32	s4, s11
 8003c36:	eef0 1a46 	vmov.f32	s3, s12
 8003c3a:	eeb0 1a66 	vmov.f32	s2, s13
 8003c3e:	eef0 0a47 	vmov.f32	s1, s14
 8003c42:	eeb0 0a67 	vmov.f32	s0, s15
 8003c46:	2310      	movs	r3, #16
 8003c48:	2210      	movs	r2, #16
 8003c4a:	2182      	movs	r1, #130	@ 0x82
 8003c4c:	480f      	ldr	r0, [pc, #60]	@ (8003c8c <statemachine+0x550>)
 8003c4e:	f000 fd55 	bl	80046fc <create_and_send_payload>
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

#endif

		if(flag_separation==1){
 8003c52:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <statemachine+0x580>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	f040 812f 	bne.w	8003eba <statemachine+0x77e>
			state++;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <statemachine+0x560>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <statemachine+0x560>)
 8003c66:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003c68:	e127      	b.n	8003eba <statemachine+0x77e>
 8003c6a:	bf00      	nop
 8003c6c:	20001308 	.word	0x20001308
 8003c70:	2000130c 	.word	0x2000130c
 8003c74:	20001304 	.word	0x20001304
 8003c78:	20000c18 	.word	0x20000c18
 8003c7c:	20000688 	.word	0x20000688
 8003c80:	20000b14 	.word	0x20000b14
 8003c84:	20000668 	.word	0x20000668
 8003c88:	20000e60 	.word	0x20000e60
 8003c8c:	200003f4 	.word	0x200003f4
 8003c90:	20000314 	.word	0x20000314
 8003c94:	20000e30 	.word	0x20000e30
 8003c98:	20000e38 	.word	0x20000e38
 8003c9c:	20000e2c 	.word	0x20000e2c
 8003ca0:	20000e44 	.word	0x20000e44
 8003ca4:	2000001c 	.word	0x2000001c
 8003ca8:	0801a784 	.word	0x0801a784
 8003cac:	20000e50 	.word	0x20000e50
 8003cb0:	0801a788 	.word	0x0801a788
 8003cb4:	200012d0 	.word	0x200012d0
 8003cb8:	2000000c 	.word	0x2000000c
 8003cbc:	20000e34 	.word	0x20000e34

	case POSTSEPARATION:
		ssd1306_Fill(Black);
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	f7ff fbaf 	bl	8003424 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003cc6:	2120      	movs	r1, #32
 8003cc8:	2020      	movs	r0, #32
 8003cca:	f7ff fced 	bl	80036a8 <ssd1306_SetCursor>
		ssd1306_WriteString("POST", Font_16x24, White);
 8003cce:	4a7e      	ldr	r2, [pc, #504]	@ (8003ec8 <statemachine+0x78c>)
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	ca06      	ldmia	r2, {r1, r2}
 8003cd4:	487d      	ldr	r0, [pc, #500]	@ (8003ecc <statemachine+0x790>)
 8003cd6:	f7ff fcc1 	bl	800365c <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003cda:	2138      	movs	r1, #56	@ 0x38
 8003cdc:	2020      	movs	r0, #32
 8003cde:	f7ff fce3 	bl	80036a8 <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"tps=%d",(timeindex-cpt_tps_chute));
 8003ce2:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed0 <statemachine+0x794>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed4 <statemachine+0x798>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	4a7a      	ldr	r2, [pc, #488]	@ (8003ed8 <statemachine+0x79c>)
 8003cee:	2132      	movs	r1, #50	@ 0x32
 8003cf0:	487a      	ldr	r0, [pc, #488]	@ (8003edc <statemachine+0x7a0>)
 8003cf2:	f011 fb95 	bl	8015420 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003cf6:	4a7a      	ldr	r2, [pc, #488]	@ (8003ee0 <statemachine+0x7a4>)
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	ca06      	ldmia	r2, {r1, r2}
 8003cfc:	4877      	ldr	r0, [pc, #476]	@ (8003edc <statemachine+0x7a0>)
 8003cfe:	f7ff fcad 	bl	800365c <ssd1306_WriteString>
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,
						  GNSSData.fLat,GNSSData.fLon,hauteur_servo,myDatabmp581.altitude,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
#endif
#ifdef PARTIE_BAS
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,
 8003d02:	4b78      	ldr	r3, [pc, #480]	@ (8003ee4 <statemachine+0x7a8>)
 8003d04:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003d08:	4b76      	ldr	r3, [pc, #472]	@ (8003ee4 <statemachine+0x7a8>)
 8003d0a:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003d0e:	4b75      	ldr	r3, [pc, #468]	@ (8003ee4 <statemachine+0x7a8>)
 8003d10:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003d14:	4b74      	ldr	r3, [pc, #464]	@ (8003ee8 <statemachine+0x7ac>)
 8003d16:	ed93 6a05 	vldr	s12, [r3, #20]
 8003d1a:	4b72      	ldr	r3, [pc, #456]	@ (8003ee4 <statemachine+0x7a8>)
 8003d1c:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003d20:	4b70      	ldr	r3, [pc, #448]	@ (8003ee4 <statemachine+0x7a8>)
 8003d22:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003d26:	4b71      	ldr	r3, [pc, #452]	@ (8003eec <statemachine+0x7b0>)
 8003d28:	ed93 3a00 	vldr	s6, [r3]
 8003d2c:	4b70      	ldr	r3, [pc, #448]	@ (8003ef0 <statemachine+0x7b4>)
 8003d2e:	edd3 3a00 	vldr	s7, [r3]
 8003d32:	4b70      	ldr	r3, [pc, #448]	@ (8003ef4 <statemachine+0x7b8>)
 8003d34:	ed93 4a00 	vldr	s8, [r3]
 8003d38:	4b6e      	ldr	r3, [pc, #440]	@ (8003ef4 <statemachine+0x7b8>)
 8003d3a:	edd3 4a01 	vldr	s9, [r3, #4]
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef4 <statemachine+0x7b8>)
 8003d40:	ed93 5a02 	vldr	s10, [r3, #8]
 8003d44:	4b62      	ldr	r3, [pc, #392]	@ (8003ed0 <statemachine+0x794>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	eeb0 2a65 	vmov.f32	s4, s11
 8003d4e:	eef0 1a46 	vmov.f32	s3, s12
 8003d52:	eeb0 1a66 	vmov.f32	s2, s13
 8003d56:	eef0 0a47 	vmov.f32	s1, s14
 8003d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5e:	2310      	movs	r3, #16
 8003d60:	2201      	movs	r2, #1
 8003d62:	2182      	movs	r1, #130	@ 0x82
 8003d64:	4864      	ldr	r0, [pc, #400]	@ (8003ef8 <statemachine+0x7bc>)
 8003d66:	f000 fcc9 	bl	80046fc <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
				  GNSSData.fgSpeed,distance_entre_module,temp,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

		vTaskDelay(pdMS_TO_TICKS(5));
 8003d6a:	2005      	movs	r0, #5
 8003d6c:	f00f f882 	bl	8012e74 <vTaskDelay>

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,SAT_ADDR,0x10,
 8003d70:	4b5c      	ldr	r3, [pc, #368]	@ (8003ee4 <statemachine+0x7a8>)
 8003d72:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003d76:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee4 <statemachine+0x7a8>)
 8003d78:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003d7c:	4b59      	ldr	r3, [pc, #356]	@ (8003ee4 <statemachine+0x7a8>)
 8003d7e:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8003d82:	4b59      	ldr	r3, [pc, #356]	@ (8003ee8 <statemachine+0x7ac>)
 8003d84:	ed93 6a05 	vldr	s12, [r3, #20]
 8003d88:	4b56      	ldr	r3, [pc, #344]	@ (8003ee4 <statemachine+0x7a8>)
 8003d8a:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003d8e:	4b55      	ldr	r3, [pc, #340]	@ (8003ee4 <statemachine+0x7a8>)
 8003d90:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003d94:	4b56      	ldr	r3, [pc, #344]	@ (8003ef0 <statemachine+0x7b4>)
 8003d96:	ed93 3a00 	vldr	s6, [r3]
 8003d9a:	4b54      	ldr	r3, [pc, #336]	@ (8003eec <statemachine+0x7b0>)
 8003d9c:	edd3 3a00 	vldr	s7, [r3]
 8003da0:	4b54      	ldr	r3, [pc, #336]	@ (8003ef4 <statemachine+0x7b8>)
 8003da2:	ed93 4a00 	vldr	s8, [r3]
 8003da6:	4b53      	ldr	r3, [pc, #332]	@ (8003ef4 <statemachine+0x7b8>)
 8003da8:	edd3 4a01 	vldr	s9, [r3, #4]
 8003dac:	4b51      	ldr	r3, [pc, #324]	@ (8003ef4 <statemachine+0x7b8>)
 8003dae:	ed93 5a02 	vldr	s10, [r3, #8]
 8003db2:	4b47      	ldr	r3, [pc, #284]	@ (8003ed0 <statemachine+0x794>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	eeb0 2a65 	vmov.f32	s4, s11
 8003dbc:	eef0 1a46 	vmov.f32	s3, s12
 8003dc0:	eeb0 1a66 	vmov.f32	s2, s13
 8003dc4:	eef0 0a47 	vmov.f32	s1, s14
 8003dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dcc:	2310      	movs	r3, #16
 8003dce:	2210      	movs	r2, #16
 8003dd0:	2182      	movs	r1, #130	@ 0x82
 8003dd2:	4849      	ldr	r0, [pc, #292]	@ (8003ef8 <statemachine+0x7bc>)
 8003dd4:	f000 fc92 	bl	80046fc <create_and_send_payload>
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,distance_entre_module,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

#endif

		if((timeindex-cpt_tps_chute)>=120){
 8003dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed0 <statemachine+0x794>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed4 <statemachine+0x798>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b77      	cmp	r3, #119	@ 0x77
 8003de4:	d96b      	bls.n	8003ebe <statemachine+0x782>
			state++;
 8003de6:	4b45      	ldr	r3, [pc, #276]	@ (8003efc <statemachine+0x7c0>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4b43      	ldr	r3, [pc, #268]	@ (8003efc <statemachine+0x7c0>)
 8003df0:	701a      	strb	r2, [r3, #0]
			flag_fin=1;
 8003df2:	4b43      	ldr	r3, [pc, #268]	@ (8003f00 <statemachine+0x7c4>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
			osThreadSuspend(GNSSParseHandle);
			osThreadSuspend(tarvosDecodeHandle);
			osThreadSuspend(SdcardwriteHandle);
#endif
#ifdef PARTIE_BAS
			osThreadSuspend(distancecalcHandle);
 8003df8:	4b42      	ldr	r3, [pc, #264]	@ (8003f04 <statemachine+0x7c8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f00e f89c 	bl	8011f3a <osThreadSuspend>
			osThreadSuspend(GNSSParseHandle);
 8003e02:	4b41      	ldr	r3, [pc, #260]	@ (8003f08 <statemachine+0x7cc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f00e f897 	bl	8011f3a <osThreadSuspend>
			osThreadSuspend(tarvosDecodeHandle);
 8003e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f0c <statemachine+0x7d0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f00e f892 	bl	8011f3a <osThreadSuspend>
			osThreadSuspend(SdcardwriteHandle);
 8003e16:	4b3e      	ldr	r3, [pc, #248]	@ (8003f10 <statemachine+0x7d4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f00e f88d 	bl	8011f3a <osThreadSuspend>
			create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,SAT_ADDR,0x20,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8003e20:	2300      	movs	r3, #0
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	ed9f 5a3b 	vldr	s10, [pc, #236]	@ 8003f14 <statemachine+0x7d8>
 8003e28:	eddf 4a3a 	vldr	s9, [pc, #232]	@ 8003f14 <statemachine+0x7d8>
 8003e2c:	ed9f 4a39 	vldr	s8, [pc, #228]	@ 8003f14 <statemachine+0x7d8>
 8003e30:	eddf 3a38 	vldr	s7, [pc, #224]	@ 8003f14 <statemachine+0x7d8>
 8003e34:	ed9f 3a37 	vldr	s6, [pc, #220]	@ 8003f14 <statemachine+0x7d8>
 8003e38:	eddf 2a36 	vldr	s5, [pc, #216]	@ 8003f14 <statemachine+0x7d8>
 8003e3c:	ed9f 2a35 	vldr	s4, [pc, #212]	@ 8003f14 <statemachine+0x7d8>
 8003e40:	eddf 1a34 	vldr	s3, [pc, #208]	@ 8003f14 <statemachine+0x7d8>
 8003e44:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8003f14 <statemachine+0x7d8>
 8003e48:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8003f14 <statemachine+0x7d8>
 8003e4c:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8003f14 <statemachine+0x7d8>
 8003e50:	2320      	movs	r3, #32
 8003e52:	2210      	movs	r2, #16
 8003e54:	2182      	movs	r1, #130	@ 0x82
 8003e56:	4828      	ldr	r0, [pc, #160]	@ (8003ef8 <statemachine+0x7bc>)
 8003e58:	f000 fc50 	bl	80046fc <create_and_send_payload>
			create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x20,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	ed9f 5a2c 	vldr	s10, [pc, #176]	@ 8003f14 <statemachine+0x7d8>
 8003e64:	eddf 4a2b 	vldr	s9, [pc, #172]	@ 8003f14 <statemachine+0x7d8>
 8003e68:	ed9f 4a2a 	vldr	s8, [pc, #168]	@ 8003f14 <statemachine+0x7d8>
 8003e6c:	eddf 3a29 	vldr	s7, [pc, #164]	@ 8003f14 <statemachine+0x7d8>
 8003e70:	ed9f 3a28 	vldr	s6, [pc, #160]	@ 8003f14 <statemachine+0x7d8>
 8003e74:	eddf 2a27 	vldr	s5, [pc, #156]	@ 8003f14 <statemachine+0x7d8>
 8003e78:	ed9f 2a26 	vldr	s4, [pc, #152]	@ 8003f14 <statemachine+0x7d8>
 8003e7c:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8003f14 <statemachine+0x7d8>
 8003e80:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8003f14 <statemachine+0x7d8>
 8003e84:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8003f14 <statemachine+0x7d8>
 8003e88:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8003f14 <statemachine+0x7d8>
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	2201      	movs	r2, #1
 8003e90:	2182      	movs	r1, #130	@ 0x82
 8003e92:	4819      	ldr	r0, [pc, #100]	@ (8003ef8 <statemachine+0x7bc>)
 8003e94:	f000 fc32 	bl	80046fc <create_and_send_payload>
#endif
		}



		break;
 8003e98:	e011      	b.n	8003ebe <statemachine+0x782>
	case FIN:

		ssd1306_Fill(Black);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7ff fac2 	bl	8003424 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003ea0:	2120      	movs	r1, #32
 8003ea2:	2020      	movs	r0, #32
 8003ea4:	f7ff fc00 	bl	80036a8 <ssd1306_SetCursor>
		ssd1306_WriteString("FIN", Font_16x24, White);
 8003ea8:	4a07      	ldr	r2, [pc, #28]	@ (8003ec8 <statemachine+0x78c>)
 8003eaa:	2301      	movs	r3, #1
 8003eac:	ca06      	ldmia	r2, {r1, r2}
 8003eae:	481a      	ldr	r0, [pc, #104]	@ (8003f18 <statemachine+0x7dc>)
 8003eb0:	f7ff fbd4 	bl	800365c <ssd1306_WriteString>

		break;
 8003eb4:	e004      	b.n	8003ec0 <statemachine+0x784>
		break;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <statemachine+0x784>
		break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <statemachine+0x784>
		break;
 8003ebe:	bf00      	nop
	}

}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000001c 	.word	0x2000001c
 8003ecc:	0801a790 	.word	0x0801a790
 8003ed0:	20000e60 	.word	0x20000e60
 8003ed4:	20000e44 	.word	0x20000e44
 8003ed8:	0801a798 	.word	0x0801a798
 8003edc:	200012d0 	.word	0x200012d0
 8003ee0:	2000000c 	.word	0x2000000c
 8003ee4:	20000c18 	.word	0x20000c18
 8003ee8:	20000688 	.word	0x20000688
 8003eec:	20000314 	.word	0x20000314
 8003ef0:	20000b14 	.word	0x20000b14
 8003ef4:	20000668 	.word	0x20000668
 8003ef8:	200003f4 	.word	0x200003f4
 8003efc:	20000e2c 	.word	0x20000e2c
 8003f00:	20000e48 	.word	0x20000e48
 8003f04:	20000340 	.word	0x20000340
 8003f08:	20000334 	.word	0x20000334
 8003f0c:	20000344 	.word	0x20000344
 8003f10:	20000338 	.word	0x20000338
 8003f14:	00000000 	.word	0x00000000
 8003f18:	0801a7a0 	.word	0x0801a7a0

08003f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <HAL_MspInit+0x50>)
 8003f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f26:	4a11      	ldr	r2, [pc, #68]	@ (8003f6c <HAL_MspInit+0x50>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <HAL_MspInit+0x50>)
 8003f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <HAL_MspInit+0x50>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8003f6c <HAL_MspInit+0x50>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f46:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_MspInit+0x50>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f52:	2200      	movs	r2, #0
 8003f54:	210f      	movs	r1, #15
 8003f56:	f06f 0001 	mvn.w	r0, #1
 8003f5a:	f003 fc7b 	bl	8007854 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003f5e:	f005 f88b 	bl	8009078 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000

08003f70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08c      	sub	sp, #48	@ 0x30
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f80:	4b2c      	ldr	r3, [pc, #176]	@ (8004034 <HAL_InitTick+0xc4>)
 8003f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f84:	4a2b      	ldr	r2, [pc, #172]	@ (8004034 <HAL_InitTick+0xc4>)
 8003f86:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f8c:	4b29      	ldr	r3, [pc, #164]	@ (8004034 <HAL_InitTick+0xc4>)
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f98:	f107 020c 	add.w	r2, r7, #12
 8003f9c:	f107 0310 	add.w	r3, r7, #16
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f005 fd5e 	bl	8009a64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f005 fd46 	bl	8009a38 <HAL_RCC_GetPCLK2Freq>
 8003fac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	4a21      	ldr	r2, [pc, #132]	@ (8004038 <HAL_InitTick+0xc8>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0c9b      	lsrs	r3, r3, #18
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800403c <HAL_InitTick+0xcc>)
 8003fbe:	4a20      	ldr	r2, [pc, #128]	@ (8004040 <HAL_InitTick+0xd0>)
 8003fc0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <HAL_InitTick+0xcc>)
 8003fc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003fca:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <HAL_InitTick+0xcc>)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <HAL_InitTick+0xcc>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd6:	4b19      	ldr	r3, [pc, #100]	@ (800403c <HAL_InitTick+0xcc>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003fdc:	4817      	ldr	r0, [pc, #92]	@ (800403c <HAL_InitTick+0xcc>)
 8003fde:	f006 fbd5 	bl	800a78c <HAL_TIM_Base_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11b      	bne.n	8004028 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003ff0:	4812      	ldr	r0, [pc, #72]	@ (800403c <HAL_InitTick+0xcc>)
 8003ff2:	f006 fc23 	bl	800a83c <HAL_TIM_Base_Start_IT>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004000:	2b00      	cmp	r3, #0
 8004002:	d111      	bne.n	8004028 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004004:	2019      	movs	r0, #25
 8004006:	f003 fc3f 	bl	8007888 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b0f      	cmp	r3, #15
 800400e:	d808      	bhi.n	8004022 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8004010:	2200      	movs	r2, #0
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	2019      	movs	r0, #25
 8004016:	f003 fc1d 	bl	8007854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800401a:	4a0a      	ldr	r2, [pc, #40]	@ (8004044 <HAL_InitTick+0xd4>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e002      	b.n	8004028 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800402c:	4618      	mov	r0, r3
 800402e:	3730      	adds	r7, #48	@ 0x30
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	431bde83 	.word	0x431bde83
 800403c:	20001310 	.word	0x20001310
 8004040:	40012c00 	.word	0x40012c00
 8004044:	2000002c 	.word	0x2000002c

08004048 <hard_fault_handler_c>:

uint8_t hardfaultbuf[200];


void hard_fault_handler_c(uint32_t *stacked_regs)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b092      	sub	sp, #72	@ 0x48
 800404c:	af08      	add	r7, sp, #32
 800404e:	6078      	str	r0, [r7, #4]
    // Récupère les registres sauvegardés par le CPU
    uint32_t r0  = stacked_regs[0];
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6]; // <-- Instruction fautive !
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	60bb      	str	r3, [r7, #8]

    // Mettez un breakpoint ici
    snprintf((char *)hardfaultbuf,200,"\n[HardFault] R0=0x%08lX R1=0x%08lX R2=0x%08lX R3=0x%08lX R12=0x%08lX LR=0x%08lX PC=0x%08lX PSR=0x%08lX\n", r0, r1, r2, r3, r12, lr, pc, psr);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	9306      	str	r3, [sp, #24]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	9305      	str	r3, [sp, #20]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	9303      	str	r3, [sp, #12]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	9302      	str	r3, [sp, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	4a03      	ldr	r2, [pc, #12]	@ (80040ac <hard_fault_handler_c+0x64>)
 80040a0:	21c8      	movs	r1, #200	@ 0xc8
 80040a2:	4803      	ldr	r0, [pc, #12]	@ (80040b0 <hard_fault_handler_c+0x68>)
 80040a4:	f011 f9bc 	bl	8015420 <sniprintf>
    // Pause ici pour analyse
    while(1);
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <hard_fault_handler_c+0x60>
 80040ac:	0801a7a4 	.word	0x0801a7a4
 80040b0:	2000135c 	.word	0x2000135c

080040b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <NMI_Handler+0x4>

080040bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile
 80040c0:	f01e 0f04 	tst.w	lr, #4
 80040c4:	bf0c      	ite	eq
 80040c6:	f3ef 8008 	mrseq	r0, MSP
 80040ca:	f3ef 8009 	mrsne	r0, PSP
 80040ce:	f7ff bfbb 	b.w	8004048 <hard_fault_handler_c>
        "ITE EQ\n"
        "MRSEQ r0, MSP\n"
        "MRSNE r0, PSP\n"
        "B hard_fault_handler_c\n"
    );
	  ssd1306_SetCursor(32, 32);
 80040d2:	2120      	movs	r1, #32
 80040d4:	2020      	movs	r0, #32
 80040d6:	f7ff fae7 	bl	80036a8 <ssd1306_SetCursor>
	 	  ssd1306_Fill(Black);
 80040da:	2000      	movs	r0, #0
 80040dc:	f7ff f9a2 	bl	8003424 <ssd1306_Fill>
	 	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80040e0:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <HardFault_Handler+0x38>)
 80040e2:	2301      	movs	r3, #1
 80040e4:	ca06      	ldmia	r2, {r1, r2}
 80040e6:	4804      	ldr	r0, [pc, #16]	@ (80040f8 <HardFault_Handler+0x3c>)
 80040e8:	f7ff fab8 	bl	800365c <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 80040ec:	f7ff f9b2 	bl	8003454 <ssd1306_UpdateScreen>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <HardFault_Handler+0x34>
 80040f4:	20000014 	.word	0x20000014
 80040f8:	0801a80c 	.word	0x0801a80c

080040fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <MemManage_Handler+0x4>

08004104 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <BusFault_Handler+0x4>

0800410c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <UsageFault_Handler+0x4>

08004114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004126:	2002      	movs	r0, #2
 8004128:	f004 f8c6 	bl	80082b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}

08004130 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004134:	2010      	movs	r0, #16
 8004136:	f004 f8bf 	bl	80082b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8004144:	4802      	ldr	r0, [pc, #8]	@ (8004150 <DMA1_Channel1_IRQHandler+0x10>)
 8004146:	f003 fd90 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20001518 	.word	0x20001518

08004154 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004158:	4802      	ldr	r0, [pc, #8]	@ (8004164 <DMA1_Channel2_IRQHandler+0x10>)
 800415a:	f003 fd86 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200002ac 	.word	0x200002ac

08004168 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800416c:	4802      	ldr	r0, [pc, #8]	@ (8004178 <DMA1_Channel3_IRQHandler+0x10>)
 800416e:	f003 fd7c 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	200016a8 	.word	0x200016a8

0800417c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004180:	4802      	ldr	r0, [pc, #8]	@ (800418c <DMA1_Channel5_IRQHandler+0x10>)
 8004182:	f003 fd72 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20001708 	.word	0x20001708

08004190 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004194:	4802      	ldr	r0, [pc, #8]	@ (80041a0 <ADC1_2_IRQHandler+0x10>)
 8004196:	f002 fa67 	bl	8006668 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000240 	.word	0x20000240

080041a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041a8:	4802      	ldr	r0, [pc, #8]	@ (80041b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80041aa:	f007 f8b9 	bl	800b320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20001310 	.word	0x20001310

080041b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041bc:	4802      	ldr	r0, [pc, #8]	@ (80041c8 <TIM2_IRQHandler+0x10>)
 80041be:	f007 f8af 	bl	800b320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20001434 	.word	0x20001434

080041cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	timeindex++;
 80041d0:	4b04      	ldr	r3, [pc, #16]	@ (80041e4 <TIM4_IRQHandler+0x18>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	4a03      	ldr	r2, [pc, #12]	@ (80041e4 <TIM4_IRQHandler+0x18>)
 80041d8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80041da:	4803      	ldr	r0, [pc, #12]	@ (80041e8 <TIM4_IRQHandler+0x1c>)
 80041dc:	f007 f8a0 	bl	800b320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041e0:	bf00      	nop
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000e60 	.word	0x20000e60
 80041e8:	200014cc 	.word	0x200014cc

080041ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041f0:	4802      	ldr	r0, [pc, #8]	@ (80041fc <USART1_IRQHandler+0x10>)
 80041f2:	f008 fc97 	bl	800cb24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20001614 	.word	0x20001614

08004200 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004204:	4802      	ldr	r0, [pc, #8]	@ (8004210 <LPUART1_IRQHandler+0x10>)
 8004206:	f008 fc8d 	bl	800cb24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20001580 	.word	0x20001580

08004214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return 1;
 8004218:	2301      	movs	r3, #1
}
 800421a:	4618      	mov	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <_kill>:

int _kill(int pid, int sig)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800422e:	f011 fad7 	bl	80157e0 <__errno>
 8004232:	4603      	mov	r3, r0
 8004234:	2216      	movs	r2, #22
 8004236:	601a      	str	r2, [r3, #0]
  return -1;
 8004238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_exit>:

void _exit (int status)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800424c:	f04f 31ff 	mov.w	r1, #4294967295
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ffe7 	bl	8004224 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <_exit+0x12>

0800425a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e00a      	b.n	8004282 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800426c:	f3af 8000 	nop.w
 8004270:	4601      	mov	r1, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	60ba      	str	r2, [r7, #8]
 8004278:	b2ca      	uxtb	r2, r1
 800427a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	dbf0      	blt.n	800426c <_read+0x12>
  }

  return len;
 800428a:	687b      	ldr	r3, [r7, #4]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e009      	b.n	80042ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	60ba      	str	r2, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3301      	adds	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	dbf1      	blt.n	80042a6 <_write+0x12>
  }
  return len;
 80042c2:	687b      	ldr	r3, [r7, #4]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <_close>:

int _close(int file)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042f4:	605a      	str	r2, [r3, #4]
  return 0;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <_isatty>:

int _isatty(int file)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800430c:	2301      	movs	r3, #1
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800433c:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <_sbrk+0x5c>)
 800433e:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <_sbrk+0x60>)
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004348:	4b13      	ldr	r3, [pc, #76]	@ (8004398 <_sbrk+0x64>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004350:	4b11      	ldr	r3, [pc, #68]	@ (8004398 <_sbrk+0x64>)
 8004352:	4a12      	ldr	r2, [pc, #72]	@ (800439c <_sbrk+0x68>)
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <_sbrk+0x64>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	429a      	cmp	r2, r3
 8004362:	d207      	bcs.n	8004374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004364:	f011 fa3c 	bl	80157e0 <__errno>
 8004368:	4603      	mov	r3, r0
 800436a:	220c      	movs	r2, #12
 800436c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	e009      	b.n	8004388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004374:	4b08      	ldr	r3, [pc, #32]	@ (8004398 <_sbrk+0x64>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800437a:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <_sbrk+0x64>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <_sbrk+0x64>)
 8004384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004386:	68fb      	ldr	r3, [r7, #12]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20008000 	.word	0x20008000
 8004394:	00000400 	.word	0x00000400
 8004398:	20001424 	.word	0x20001424
 800439c:	20004978 	.word	0x20004978

080043a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <SystemInit+0x20>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	4a05      	ldr	r2, [pc, #20]	@ (80043c0 <SystemInit+0x20>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08e      	sub	sp, #56	@ 0x38
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	460a      	mov	r2, r1
 80043ce:	71fb      	strb	r3, [r7, #7]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 80043d4:	2306      	movs	r3, #6
 80043d6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 80043da:	2304      	movs	r3, #4
 80043dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 80043e6:	4a6f      	ldr	r2, [pc, #444]	@ (80045a4 <INIT_PERM_TARVOS+0x1e0>)
 80043e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043f0:	6018      	str	r0, [r3, #0]
 80043f2:	3304      	adds	r3, #4
 80043f4:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 80043f6:	4a6c      	ldr	r2, [pc, #432]	@ (80045a8 <INIT_PERM_TARVOS+0x1e4>)
 80043f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004400:	6018      	str	r0, [r3, #0]
 8004402:	3304      	adds	r3, #4
 8004404:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8004406:	4a69      	ldr	r2, [pc, #420]	@ (80045ac <INIT_PERM_TARVOS+0x1e8>)
 8004408:	f107 031c 	add.w	r3, r7, #28
 800440c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004410:	6018      	str	r0, [r3, #0]
 8004412:	3304      	adds	r3, #4
 8004414:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8004416:	2302      	movs	r3, #2
 8004418:	753b      	strb	r3, [r7, #20]
 800441a:	2309      	movs	r3, #9
 800441c:	757b      	strb	r3, [r7, #21]
 800441e:	2302      	movs	r3, #2
 8004420:	75bb      	strb	r3, [r7, #22]
 8004422:	230b      	movs	r3, #11
 8004424:	75fb      	strb	r3, [r7, #23]
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	763b      	strb	r3, [r7, #24]
 800442a:	2300      	movs	r3, #0
 800442c:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 800442e:	2302      	movs	r3, #2
 8004430:	733b      	strb	r3, [r7, #12]
 8004432:	2309      	movs	r3, #9
 8004434:	737b      	strb	r3, [r7, #13]
 8004436:	2302      	movs	r3, #2
 8004438:	73bb      	strb	r3, [r7, #14]
 800443a:	2308      	movs	r3, #8
 800443c:	73fb      	strb	r3, [r7, #15]
 800443e:	79bb      	ldrb	r3, [r7, #6]
 8004440:	743b      	strb	r3, [r7, #16]
 8004442:	2300      	movs	r3, #0
 8004444:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8004446:	4b5a      	ldr	r3, [pc, #360]	@ (80045b0 <INIT_PERM_TARVOS+0x1ec>)
 8004448:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 800444a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f8ac 	bl	80045b8 <Get_CRC8>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 8004466:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800446a:	b29a      	uxth	r2, r3
 800446c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004470:	2364      	movs	r3, #100	@ 0x64
 8004472:	4850      	ldr	r0, [pc, #320]	@ (80045b4 <INIT_PERM_TARVOS+0x1f0>)
 8004474:	f008 f922 	bl	800c6bc <HAL_UART_Transmit>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8004484:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 f88f 	bl	80045b8 <Get_CRC8>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 80044a0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80044aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80044ae:	4841      	ldr	r0, [pc, #260]	@ (80045b4 <INIT_PERM_TARVOS+0x1f0>)
 80044b0:	f008 f904 	bl	800c6bc <HAL_UART_Transmit>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 80044c0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	f107 031c 	add.w	r3, r7, #28
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 f871 	bl	80045b8 <Get_CRC8>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 80044dc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	f107 011c 	add.w	r1, r7, #28
 80044e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80044ea:	4832      	ldr	r0, [pc, #200]	@ (80045b4 <INIT_PERM_TARVOS+0x1f0>)
 80044ec:	f008 f8e6 	bl	800c6bc <HAL_UART_Transmit>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 80044fc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	f107 0314 	add.w	r3, r7, #20
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f853 	bl	80045b8 <Get_CRC8>
 8004512:	4603      	mov	r3, r0
 8004514:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 8004516:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800451a:	b29a      	uxth	r2, r3
 800451c:	f107 0114 	add.w	r1, r7, #20
 8004520:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004524:	4823      	ldr	r0, [pc, #140]	@ (80045b4 <INIT_PERM_TARVOS+0x1f0>)
 8004526:	f008 f8c9 	bl	800c6bc <HAL_UART_Transmit>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 8004536:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f836 	bl	80045b8 <Get_CRC8>
 800454c:	4603      	mov	r3, r0
 800454e:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8004550:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004554:	b29a      	uxth	r2, r3
 8004556:	f107 010c 	add.w	r1, r7, #12
 800455a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800455e:	4815      	ldr	r0, [pc, #84]	@ (80045b4 <INIT_PERM_TARVOS+0x1f0>)
 8004560:	f008 f8ac 	bl	800c6bc <HAL_UART_Transmit>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8004570:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004574:	b29a      	uxth	r2, r3
 8004576:	f107 0108 	add.w	r1, r7, #8
 800457a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800457e:	480d      	ldr	r0, [pc, #52]	@ (80045b4 <INIT_PERM_TARVOS+0x1f0>)
 8004580:	f008 f89c 	bl	800c6bc <HAL_UART_Transmit>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8004590:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004594:	f001 fbce 	bl	8005d34 <HAL_Delay>
    return status;
 8004598:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800459c:	4618      	mov	r0, r3
 800459e:	3738      	adds	r7, #56	@ 0x38
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	0801a83c 	.word	0x0801a83c
 80045a8:	0801a844 	.word	0x0801a844
 80045ac:	0801a84c 	.word	0x0801a84c
 80045b0:	07000502 	.word	0x07000502
 80045b4:	20001580 	.word	0x20001580

080045b8 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80045c8:	2300      	movs	r3, #0
 80045ca:	81bb      	strh	r3, [r7, #12]
 80045cc:	e009      	b.n	80045e2 <Get_CRC8+0x2a>
		crc ^= bufP[i];
 80045ce:	89bb      	ldrh	r3, [r7, #12]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4413      	add	r3, r2
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	4053      	eors	r3, r2
 80045da:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80045dc:	89bb      	ldrh	r3, [r7, #12]
 80045de:	3301      	adds	r3, #1
 80045e0:	81bb      	strh	r3, [r7, #12]
 80045e2:	89ba      	ldrh	r2, [r7, #12]
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d3f1      	bcc.n	80045ce <Get_CRC8+0x16>
	}
	return crc;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <SEND_DATA_NETW1>:

    return status;

}

void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	b08a      	sub	sp, #40	@ 0x28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	72fb      	strb	r3, [r7, #11]
 8004608:	4613      	mov	r3, r2
 800460a:	72bb      	strb	r3, [r7, #10]
 800460c:	466b      	mov	r3, sp
 800460e:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	1d9e      	adds	r6, r3, #6
 8004614:	1e73      	subs	r3, r6, #1
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	4632      	mov	r2, r6
 800461a:	2300      	movs	r3, #0
 800461c:	4690      	mov	r8, r2
 800461e:	4699      	mov	r9, r3
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004630:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004634:	4632      	mov	r2, r6
 8004636:	2300      	movs	r3, #0
 8004638:	4614      	mov	r4, r2
 800463a:	461d      	mov	r5, r3
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	00eb      	lsls	r3, r5, #3
 8004646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	4633      	mov	r3, r6
 800464e:	3307      	adds	r3, #7
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	ebad 0d03 	sub.w	sp, sp, r3
 8004658:	466b      	mov	r3, sp
 800465a:	3300      	adds	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2202      	movs	r2, #2
 8004662:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2201      	movs	r2, #1
 8004668:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	3302      	adds	r3, #2
 8004670:	b2da      	uxtb	r2, r3
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	7afa      	ldrb	r2, [r7, #11]
 800467a:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	7aba      	ldrb	r2, [r7, #10]
 8004680:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004688:	e00e      	b.n	80046a8 <SEND_DATA_NETW1+0xb0>
        trame[5 + i] = data[i];
 800468a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	441a      	add	r2, r3
 8004692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004696:	3305      	adds	r3, #5
 8004698:	7811      	ldrb	r1, [r2, #0]
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 800469e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046a2:	3301      	adds	r3, #1
 80046a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	dceb      	bgt.n	800468a <SEND_DATA_NETW1+0x92>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3305      	adds	r3, #5
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1d5c      	adds	r4, r3, #5
 80046be:	4611      	mov	r1, r2
 80046c0:	69f8      	ldr	r0, [r7, #28]
 80046c2:	f7ff ff79 	bl	80045b8 <Get_CRC8>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 80046ce:	b2b2      	uxth	r2, r6
 80046d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80046d4:	69f9      	ldr	r1, [r7, #28]
 80046d6:	4808      	ldr	r0, [pc, #32]	@ (80046f8 <SEND_DATA_NETW1+0x100>)
 80046d8:	f007 fff0 	bl	800c6bc <HAL_UART_Transmit>
    uint8_t bufferreceivetest[10];
    HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);
 80046dc:	f107 0310 	add.w	r3, r7, #16
 80046e0:	2205      	movs	r2, #5
 80046e2:	4619      	mov	r1, r3
 80046e4:	4804      	ldr	r0, [pc, #16]	@ (80046f8 <SEND_DATA_NETW1+0x100>)
 80046e6:	f008 f877 	bl	800c7d8 <HAL_UART_Receive_IT>
 80046ea:	46d5      	mov	sp, sl

}
 80046ec:	bf00      	nop
 80046ee:	3728      	adds	r7, #40	@ 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f6:	bf00      	nop
 80046f8:	20001580 	.word	0x20001580

080046fc <create_and_send_payload>:
	return status;

}

//payload size==54
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,float latitude,float longitude,float hMSL,float altitude_baro,float vspeed,float hspeed,float temperature,float pression, float Accx, float Accy, float Accz, uint32_t timeindex){
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b09c      	sub	sp, #112	@ 0x70
 8004700:	af00      	add	r7, sp, #0
 8004702:	6378      	str	r0, [r7, #52]	@ 0x34
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 800470e:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 8004712:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 8004716:	edc7 1a08 	vstr	s3, [r7, #32]
 800471a:	ed87 2a07 	vstr	s4, [r7, #28]
 800471e:	edc7 2a06 	vstr	s5, [r7, #24]
 8004722:	ed87 3a05 	vstr	s6, [r7, #20]
 8004726:	edc7 3a04 	vstr	s7, [r7, #16]
 800472a:	ed87 4a03 	vstr	s8, [r7, #12]
 800472e:	edc7 4a02 	vstr	s9, [r7, #8]
 8004732:	ed87 5a01 	vstr	s10, [r7, #4]
 8004736:	4603      	mov	r3, r0
 8004738:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800473c:	460b      	mov	r3, r1
 800473e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8004742:	4613      	mov	r3, r2
 8004744:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint8_t buffdonnee[54];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 8004746:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004748:	0a1b      	lsrs	r3, r3, #8
 800474a:	b29b      	uxth	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    buffdonnee[1] = header_code & 0xFF;
 8004752:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    buffdonnee[2] = flag_calib;
 800475a:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <create_and_send_payload+0xe8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    buffdonnee[3] = flag_drop;
 8004764:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <create_and_send_payload+0xec>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    buffdonnee[4] = flag_separation;
 800476e:	4b1f      	ldr	r3, [pc, #124]	@ (80047ec <create_and_send_payload+0xf0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    buffdonnee[5] = flag_fin;
 8004778:	4b1d      	ldr	r3, [pc, #116]	@ (80047f0 <create_and_send_payload+0xf4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    memcpy(&buffdonnee[6],  &latitude,      sizeof(float));
 8004782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004784:	f8c7 303e 	str.w	r3, [r7, #62]	@ 0x3e
    memcpy(&buffdonnee[10],  &longitude,     sizeof(float));
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	f8c7 3042 	str.w	r3, [r7, #66]	@ 0x42
    memcpy(&buffdonnee[14], &hMSL,      sizeof(float));
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	f8c7 3046 	str.w	r3, [r7, #70]	@ 0x46
    memcpy(&buffdonnee[18], &altitude_baro, sizeof(float));
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f8c7 304a 	str.w	r3, [r7, #74]	@ 0x4a
    memcpy(&buffdonnee[22], &vspeed,        sizeof(float));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f8c7 304e 	str.w	r3, [r7, #78]	@ 0x4e
    memcpy(&buffdonnee[26], &hspeed,        sizeof(float));
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f8c7 3052 	str.w	r3, [r7, #82]	@ 0x52
    memcpy(&buffdonnee[30], &temperature,    sizeof(float));
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f8c7 3056 	str.w	r3, [r7, #86]	@ 0x56
    memcpy(&buffdonnee[34], &pression,    sizeof(float));
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f8c7 305a 	str.w	r3, [r7, #90]	@ 0x5a
    memcpy(&buffdonnee[38], &Accx,    sizeof(float));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8c7 305e 	str.w	r3, [r7, #94]	@ 0x5e
    memcpy(&buffdonnee[42], &Accy,    sizeof(float));
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f8c7 3062 	str.w	r3, [r7, #98]	@ 0x62
    memcpy(&buffdonnee[46], &Accz,    sizeof(float));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c7 3066 	str.w	r3, [r7, #102]	@ 0x66
    memcpy(&buffdonnee[50], &timeindex,    sizeof(uint32_t));
 80047c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047c6:	f8c7 306a 	str.w	r3, [r7, #106]	@ 0x6a

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);
 80047ca:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80047ce:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80047d2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80047d6:	2336      	movs	r3, #54	@ 0x36
 80047d8:	f7ff ff0e 	bl	80045f8 <SEND_DATA_NETW1>

}
 80047dc:	bf00      	nop
 80047de:	3770      	adds	r7, #112	@ 0x70
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000e38 	.word	0x20000e38
 80047e8:	20000e30 	.word	0x20000e30
 80047ec:	20000e34 	.word	0x20000e34
 80047f0:	20000e48 	.word	0x20000e48

080047f4 <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b02      	cmp	r3, #2
 8004804:	f040 80bb 	bne.w	800497e <decode_payload+0x18a>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b81      	cmp	r3, #129	@ 0x81
 8004810:	f040 80b5 	bne.w	800497e <decode_payload+0x18a>
		return;
	}
	if(receivingbuffer[2]!=56){
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	3302      	adds	r3, #2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b38      	cmp	r3, #56	@ 0x38
 800481c:	f040 80b1 	bne.w	8004982 <decode_payload+0x18e>
		return;
	}

	out->senderadress=receivingbuffer[3];
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	78da      	ldrb	r2, [r3, #3]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	3304      	adds	r3, #4
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b21b      	sxth	r3, r3
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	b21a      	sxth	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	3305      	adds	r3, #5
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b21b      	sxth	r3, r3
 800483e:	4313      	orrs	r3, r2
 8004840:	b21b      	sxth	r3, r3
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	799a      	ldrb	r2, [r3, #6]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	79da      	ldrb	r2, [r3, #7]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	7a1a      	ldrb	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_fin = receivingbuffer[9];
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	7a5a      	ldrb	r2, [r3, #9]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
#ifdef PARTIE_BAS


    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3348      	adds	r3, #72	@ 0x48
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	320a      	adds	r2, #10
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	334c      	adds	r3, #76	@ 0x4c
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	320e      	adds	r2, #14
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3350      	adds	r3, #80	@ 0x50
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	3212      	adds	r2, #18
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3354      	adds	r3, #84	@ 0x54
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	3216      	adds	r2, #22
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3358      	adds	r3, #88	@ 0x58
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	321a      	adds	r2, #26
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	335c      	adds	r3, #92	@ 0x5c
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	321e      	adds	r2, #30
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3360      	adds	r3, #96	@ 0x60
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	3222      	adds	r2, #34	@ 0x22
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3370      	adds	r3, #112	@ 0x70
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	3226      	adds	r2, #38	@ 0x26
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3364      	adds	r3, #100	@ 0x64
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	322a      	adds	r2, #42	@ 0x2a
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3368      	adds	r3, #104	@ 0x68
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	322e      	adds	r2, #46	@ 0x2e
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	336c      	adds	r3, #108	@ 0x6c
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	3232      	adds	r2, #50	@ 0x32
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3374      	adds	r3, #116	@ 0x74
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	3236      	adds	r2, #54	@ 0x36
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3378      	adds	r3, #120	@ 0x78
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	323a      	adds	r2, #58	@ 0x3a
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]

    if(noreturn_flag3==0){
 800490e:	4b1f      	ldr	r3, [pc, #124]	@ (800498c <decode_payload+0x198>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <decode_payload+0x142>
    if(receivingbuffer[6]==1){
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	3306      	adds	r3, #6
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10a      	bne.n	8004936 <decode_payload+0x142>
    	hauteur_Initiale=GNSSData.fhMSL;
 8004920:	4b1b      	ldr	r3, [pc, #108]	@ (8004990 <decode_payload+0x19c>)
 8004922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004926:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <decode_payload+0x1a0>)
 8004928:	6013      	str	r3, [r2, #0]
    	flag_calib=1;
 800492a:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <decode_payload+0x1a4>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]
    	noreturn_flag3=1;
 8004930:	4b16      	ldr	r3, [pc, #88]	@ (800498c <decode_payload+0x198>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]
    }
    }

    if(noreturn_flag1==0){
 8004936:	4b19      	ldr	r3, [pc, #100]	@ (800499c <decode_payload+0x1a8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <decode_payload+0x160>
    if(receivingbuffer[7]==1){
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3307      	adds	r3, #7
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d105      	bne.n	8004954 <decode_payload+0x160>
    	flag_drop=1;
 8004948:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <decode_payload+0x1ac>)
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]
    	noreturn_flag1=1;
 800494e:	4b13      	ldr	r3, [pc, #76]	@ (800499c <decode_payload+0x1a8>)
 8004950:	2201      	movs	r2, #1
 8004952:	601a      	str	r2, [r3, #0]
    }

    }
    if(noreturn_flag2==0){
 8004954:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <decode_payload+0x1b0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <decode_payload+0x17e>
    if(receivingbuffer[8]==1){
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	3308      	adds	r3, #8
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d105      	bne.n	8004972 <decode_payload+0x17e>
    	flag_separation=1;
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <decode_payload+0x1b4>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
    	noreturn_flag2=1;
 800496c:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <decode_payload+0x1b0>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]
#endif




    memset((uint8_t *)receivingbuffer,0,64);
 8004972:	2240      	movs	r2, #64	@ 0x40
 8004974:	2100      	movs	r1, #0
 8004976:	6838      	ldr	r0, [r7, #0]
 8004978:	f010 fe82 	bl	8015680 <memset>
 800497c:	e002      	b.n	8004984 <decode_payload+0x190>
		return;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <decode_payload+0x190>
		return;
 8004982:	bf00      	nop
}
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20001430 	.word	0x20001430
 8004990:	20000c18 	.word	0x20000c18
 8004994:	20000e4c 	.word	0x20000e4c
 8004998:	20000e38 	.word	0x20000e38
 800499c:	20001428 	.word	0x20001428
 80049a0:	20000e30 	.word	0x20000e30
 80049a4:	2000142c 	.word	0x2000142c
 80049a8:	20000e34 	.word	0x20000e34

080049ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08e      	sub	sp, #56	@ 0x38
 80049b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	609a      	str	r2, [r3, #8]
 80049be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049c0:	f107 031c 	add.w	r3, r7, #28
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049cc:	463b      	mov	r3, r7
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	605a      	str	r2, [r3, #4]
 80049d4:	609a      	str	r2, [r3, #8]
 80049d6:	60da      	str	r2, [r3, #12]
 80049d8:	611a      	str	r2, [r3, #16]
 80049da:	615a      	str	r2, [r3, #20]
 80049dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049de:	4b2d      	ldr	r3, [pc, #180]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 80049e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80049e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80049e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ec:	4b29      	ldr	r3, [pc, #164]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 80049f2:	4b28      	ldr	r3, [pc, #160]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 80049f4:	2277      	movs	r2, #119	@ 0x77
 80049f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f8:	4b26      	ldr	r3, [pc, #152]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049fe:	4b25      	ldr	r3, [pc, #148]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a04:	4823      	ldr	r0, [pc, #140]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 8004a06:	f005 fec1 	bl	800a78c <HAL_TIM_Base_Init>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004a10:	f7fe fab8 	bl	8002f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a1e:	4619      	mov	r1, r3
 8004a20:	481c      	ldr	r0, [pc, #112]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 8004a22:	f006 fee1 	bl	800b7e8 <HAL_TIM_ConfigClockSource>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004a2c:	f7fe faaa 	bl	8002f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a30:	4818      	ldr	r0, [pc, #96]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 8004a32:	f005 ff6d 	bl	800a910 <HAL_TIM_PWM_Init>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004a3c:	f7fe faa2 	bl	8002f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a48:	f107 031c 	add.w	r3, r7, #28
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4811      	ldr	r0, [pc, #68]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 8004a50:	f007 fd1c 	bl	800c48c <HAL_TIMEx_MasterConfigSynchronization>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004a5a:	f7fe fa93 	bl	8002f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a5e:	2360      	movs	r3, #96	@ 0x60
 8004a60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a6e:	463b      	mov	r3, r7
 8004a70:	2204      	movs	r2, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	4807      	ldr	r0, [pc, #28]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 8004a76:	f006 fda3 	bl	800b5c0 <HAL_TIM_PWM_ConfigChannel>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004a80:	f7fe fa80 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004a84:	4803      	ldr	r0, [pc, #12]	@ (8004a94 <MX_TIM2_Init+0xe8>)
 8004a86:	f000 f951 	bl	8004d2c <HAL_TIM_MspPostInit>

}
 8004a8a:	bf00      	nop
 8004a8c:	3738      	adds	r7, #56	@ 0x38
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20001434 	.word	0x20001434

08004a98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08e      	sub	sp, #56	@ 0x38
 8004a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
 8004aa8:	609a      	str	r2, [r3, #8]
 8004aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aac:	f107 031c 	add.w	r3, r7, #28
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ab8:	463b      	mov	r3, r7
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	609a      	str	r2, [r3, #8]
 8004ac2:	60da      	str	r2, [r3, #12]
 8004ac4:	611a      	str	r2, [r3, #16]
 8004ac6:	615a      	str	r2, [r3, #20]
 8004ac8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004aca:	4b2d      	ldr	r3, [pc, #180]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004acc:	4a2d      	ldr	r2, [pc, #180]	@ (8004b84 <MX_TIM3_Init+0xec>)
 8004ace:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004ad2:	2263      	movs	r2, #99	@ 0x63
 8004ad4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004adc:	4b28      	ldr	r3, [pc, #160]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004ade:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004ae2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae4:	4b26      	ldr	r3, [pc, #152]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004aea:	4b25      	ldr	r3, [pc, #148]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004aec:	2280      	movs	r2, #128	@ 0x80
 8004aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004af0:	4823      	ldr	r0, [pc, #140]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004af2:	f005 fe4b 	bl	800a78c <HAL_TIM_Base_Init>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004afc:	f7fe fa42 	bl	8002f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	481c      	ldr	r0, [pc, #112]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004b0e:	f006 fe6b 	bl	800b7e8 <HAL_TIM_ConfigClockSource>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004b18:	f7fe fa34 	bl	8002f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004b1c:	4818      	ldr	r0, [pc, #96]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004b1e:	f005 fef7 	bl	800a910 <HAL_TIM_PWM_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004b28:	f7fe fa2c 	bl	8002f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b34:	f107 031c 	add.w	r3, r7, #28
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4811      	ldr	r0, [pc, #68]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004b3c:	f007 fca6 	bl	800c48c <HAL_TIMEx_MasterConfigSynchronization>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004b46:	f7fe fa1d 	bl	8002f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b4a:	2360      	movs	r3, #96	@ 0x60
 8004b4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4807      	ldr	r0, [pc, #28]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004b62:	f006 fd2d 	bl	800b5c0 <HAL_TIM_PWM_ConfigChannel>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004b6c:	f7fe fa0a 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004b70:	4803      	ldr	r0, [pc, #12]	@ (8004b80 <MX_TIM3_Init+0xe8>)
 8004b72:	f000 f8db 	bl	8004d2c <HAL_TIM_MspPostInit>

}
 8004b76:	bf00      	nop
 8004b78:	3738      	adds	r7, #56	@ 0x38
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20001480 	.word	0x20001480
 8004b84:	40000400 	.word	0x40000400

08004b88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b8e:	f107 0310 	add.w	r3, r7, #16
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	605a      	str	r2, [r3, #4]
 8004b98:	609a      	str	r2, [r3, #8]
 8004b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b9c:	1d3b      	adds	r3, r7, #4
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c24 <MX_TIM4_Init+0x9c>)
 8004baa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8004bac:	4b1c      	ldr	r3, [pc, #112]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004bae:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004bb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8004bba:	4b19      	ldr	r3, [pc, #100]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004bbc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004bc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bc2:	4b17      	ldr	r3, [pc, #92]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bc8:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004bce:	4814      	ldr	r0, [pc, #80]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004bd0:	f005 fddc 	bl	800a78c <HAL_TIM_Base_Init>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8004bda:	f7fe f9d3 	bl	8002f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004be2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004be4:	f107 0310 	add.w	r3, r7, #16
 8004be8:	4619      	mov	r1, r3
 8004bea:	480d      	ldr	r0, [pc, #52]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004bec:	f006 fdfc 	bl	800b7e8 <HAL_TIM_ConfigClockSource>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8004bf6:	f7fe f9c5 	bl	8002f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c02:	1d3b      	adds	r3, r7, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4806      	ldr	r0, [pc, #24]	@ (8004c20 <MX_TIM4_Init+0x98>)
 8004c08:	f007 fc40 	bl	800c48c <HAL_TIMEx_MasterConfigSynchronization>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004c12:	f7fe f9b7 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004c16:	bf00      	nop
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200014cc 	.word	0x200014cc
 8004c24:	40000800 	.word	0x40000800

08004c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c38:	d13e      	bne.n	8004cb8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c3a:	4b37      	ldr	r3, [pc, #220]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	4a36      	ldr	r2, [pc, #216]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c46:	4b34      	ldr	r3, [pc, #208]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8004c52:	4b32      	ldr	r3, [pc, #200]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c54:	4a32      	ldr	r2, [pc, #200]	@ (8004d20 <HAL_TIM_Base_MspInit+0xf8>)
 8004c56:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8004c58:	4b30      	ldr	r3, [pc, #192]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c5a:	2239      	movs	r2, #57	@ 0x39
 8004c5c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c60:	2210      	movs	r2, #16
 8004c62:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c64:	4b2d      	ldr	r3, [pc, #180]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c6c:	2280      	movs	r2, #128	@ 0x80
 8004c6e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c70:	4b2a      	ldr	r3, [pc, #168]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c76:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c78:	4b28      	ldr	r3, [pc, #160]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8004c7e:	4b27      	ldr	r3, [pc, #156]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004c84:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8004c8a:	4824      	ldr	r0, [pc, #144]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c8c:	f002 fe0a 	bl	80078a4 <HAL_DMA_Init>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8004c96:	f7fe f975 	bl	8002f84 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004c9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8004d1c <HAL_TIM_Base_MspInit+0xf4>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2105      	movs	r1, #5
 8004caa:	201c      	movs	r0, #28
 8004cac:	f002 fdd2 	bl	8007854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004cb0:	201c      	movs	r0, #28
 8004cb2:	f002 fde9 	bl	8007888 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004cb6:	e02a      	b.n	8004d0e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	@ (8004d24 <HAL_TIM_Base_MspInit+0xfc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10c      	bne.n	8004cdc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cc2:	4b15      	ldr	r3, [pc, #84]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cce:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]
}
 8004cda:	e018      	b.n	8004d0e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a11      	ldr	r2, [pc, #68]	@ (8004d28 <HAL_TIM_Base_MspInit+0x100>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d113      	bne.n	8004d0e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cea:	4a0b      	ldr	r2, [pc, #44]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004cec:	f043 0304 	orr.w	r3, r3, #4
 8004cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cf2:	4b09      	ldr	r3, [pc, #36]	@ (8004d18 <HAL_TIM_Base_MspInit+0xf0>)
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2106      	movs	r1, #6
 8004d02:	201e      	movs	r0, #30
 8004d04:	f002 fda6 	bl	8007854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d08:	201e      	movs	r0, #30
 8004d0a:	f002 fdbd 	bl	8007888 <HAL_NVIC_EnableIRQ>
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	20001518 	.word	0x20001518
 8004d20:	40020008 	.word	0x40020008
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800

08004d2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	@ 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4c:	d11d      	bne.n	8004d8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d4e:	4b21      	ldr	r3, [pc, #132]	@ (8004dd4 <HAL_TIM_MspPostInit+0xa8>)
 8004d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d52:	4a20      	ldr	r2, [pc, #128]	@ (8004dd4 <HAL_TIM_MspPostInit+0xa8>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd4 <HAL_TIM_MspPostInit+0xa8>)
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004d66:	2302      	movs	r3, #2
 8004d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004d72:	2301      	movs	r3, #1
 8004d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d76:	2301      	movs	r3, #1
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	f107 0314 	add.w	r3, r7, #20
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d84:	f003 f8cc 	bl	8007f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004d88:	e020      	b.n	8004dcc <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <HAL_TIM_MspPostInit+0xac>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d11b      	bne.n	8004dcc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d94:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <HAL_TIM_MspPostInit+0xa8>)
 8004d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d98:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd4 <HAL_TIM_MspPostInit+0xa8>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004da0:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd4 <HAL_TIM_MspPostInit+0xa8>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004dac:	2340      	movs	r3, #64	@ 0x40
 8004dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db0:	2302      	movs	r3, #2
 8004db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4805      	ldr	r0, [pc, #20]	@ (8004ddc <HAL_TIM_MspPostInit+0xb0>)
 8004dc8:	f003 f8aa 	bl	8007f20 <HAL_GPIO_Init>
}
 8004dcc:	bf00      	nop
 8004dce:	3728      	adds	r7, #40	@ 0x28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	48000800 	.word	0x48000800

08004de0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004de4:	4b21      	ldr	r3, [pc, #132]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004de6:	4a22      	ldr	r2, [pc, #136]	@ (8004e70 <MX_LPUART1_UART_Init+0x90>)
 8004de8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004dea:	4b20      	ldr	r3, [pc, #128]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004df0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004df2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004df8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004e04:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e06:	220c      	movs	r2, #12
 8004e08:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e0a:	4b18      	ldr	r3, [pc, #96]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e10:	4b16      	ldr	r3, [pc, #88]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e16:	4b15      	ldr	r3, [pc, #84]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e1c:	4b13      	ldr	r3, [pc, #76]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004e22:	4812      	ldr	r0, [pc, #72]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e24:	f007 fbfa 	bl	800c61c <HAL_UART_Init>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8004e2e:	f7fe f8a9 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e32:	2100      	movs	r1, #0
 8004e34:	480d      	ldr	r0, [pc, #52]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e36:	f009 ff80 	bl	800ed3a <HAL_UARTEx_SetTxFifoThreshold>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8004e40:	f7fe f8a0 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e44:	2100      	movs	r1, #0
 8004e46:	4809      	ldr	r0, [pc, #36]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e48:	f009 ffb5 	bl	800edb6 <HAL_UARTEx_SetRxFifoThreshold>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8004e52:	f7fe f897 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004e56:	4805      	ldr	r0, [pc, #20]	@ (8004e6c <MX_LPUART1_UART_Init+0x8c>)
 8004e58:	f009 ff36 	bl	800ecc8 <HAL_UARTEx_DisableFifoMode>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8004e62:	f7fe f88f 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20001580 	.word	0x20001580
 8004e70:	40008000 	.word	0x40008000

08004e74 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e78:	4b22      	ldr	r3, [pc, #136]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004e7a:	4a23      	ldr	r2, [pc, #140]	@ (8004f08 <MX_USART1_UART_Init+0x94>)
 8004e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e7e:	4b21      	ldr	r3, [pc, #132]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e86:	4b1f      	ldr	r3, [pc, #124]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e92:	4b1c      	ldr	r3, [pc, #112]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e98:	4b1a      	ldr	r3, [pc, #104]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004e9a:	220c      	movs	r2, #12
 8004e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e9e:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ea4:	4b17      	ldr	r3, [pc, #92]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004eaa:	4b16      	ldr	r3, [pc, #88]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004eb0:	4b14      	ldr	r3, [pc, #80]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004eb6:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ebc:	4811      	ldr	r0, [pc, #68]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004ebe:	f007 fbad 	bl	800c61c <HAL_UART_Init>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004ec8:	f7fe f85c 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ecc:	2100      	movs	r1, #0
 8004ece:	480d      	ldr	r0, [pc, #52]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004ed0:	f009 ff33 	bl	800ed3a <HAL_UARTEx_SetTxFifoThreshold>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004eda:	f7fe f853 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4808      	ldr	r0, [pc, #32]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004ee2:	f009 ff68 	bl	800edb6 <HAL_UARTEx_SetRxFifoThreshold>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004eec:	f7fe f84a 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ef0:	4804      	ldr	r0, [pc, #16]	@ (8004f04 <MX_USART1_UART_Init+0x90>)
 8004ef2:	f009 fee9 	bl	800ecc8 <HAL_UARTEx_DisableFifoMode>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004efc:	f7fe f842 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f00:	bf00      	nop
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20001614 	.word	0x20001614
 8004f08:	40013800 	.word	0x40013800

08004f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b09e      	sub	sp, #120	@ 0x78
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
 8004f20:	60da      	str	r2, [r3, #12]
 8004f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f24:	f107 0320 	add.w	r3, r7, #32
 8004f28:	2244      	movs	r2, #68	@ 0x44
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f010 fba7 	bl	8015680 <memset>
  if(uartHandle->Instance==LPUART1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a7e      	ldr	r2, [pc, #504]	@ (8005130 <HAL_UART_MspInit+0x224>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	f040 8087 	bne.w	800504c <HAL_UART_MspInit+0x140>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004f3e:	2320      	movs	r3, #32
 8004f40:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f46:	f107 0320 	add.w	r3, r7, #32
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f004 fe00 	bl	8009b50 <HAL_RCCEx_PeriphCLKConfig>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004f56:	f7fe f815 	bl	8002f84 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004f5a:	4b76      	ldr	r3, [pc, #472]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5e:	4a75      	ldr	r2, [pc, #468]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004f66:	4b73      	ldr	r3, [pc, #460]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f72:	4b70      	ldr	r3, [pc, #448]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f76:	4a6f      	ldr	r2, [pc, #444]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f8e:	4a69      	ldr	r2, [pc, #420]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f96:	4b67      	ldr	r3, [pc, #412]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8004f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004fba:	4619      	mov	r1, r3
 8004fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fc0:	f002 ffae 	bl	8007f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004fc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fc8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4855      	ldr	r0, [pc, #340]	@ (8005138 <HAL_UART_MspInit+0x22c>)
 8004fe2:	f002 ff9d 	bl	8007f20 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8004fe6:	4b55      	ldr	r3, [pc, #340]	@ (800513c <HAL_UART_MspInit+0x230>)
 8004fe8:	4a55      	ldr	r2, [pc, #340]	@ (8005140 <HAL_UART_MspInit+0x234>)
 8004fea:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004fec:	4b53      	ldr	r3, [pc, #332]	@ (800513c <HAL_UART_MspInit+0x230>)
 8004fee:	2222      	movs	r2, #34	@ 0x22
 8004ff0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ff2:	4b52      	ldr	r3, [pc, #328]	@ (800513c <HAL_UART_MspInit+0x230>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ff8:	4b50      	ldr	r3, [pc, #320]	@ (800513c <HAL_UART_MspInit+0x230>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800513c <HAL_UART_MspInit+0x230>)
 8005000:	2280      	movs	r2, #128	@ 0x80
 8005002:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005004:	4b4d      	ldr	r3, [pc, #308]	@ (800513c <HAL_UART_MspInit+0x230>)
 8005006:	2200      	movs	r2, #0
 8005008:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800500a:	4b4c      	ldr	r3, [pc, #304]	@ (800513c <HAL_UART_MspInit+0x230>)
 800500c:	2200      	movs	r2, #0
 800500e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8005010:	4b4a      	ldr	r3, [pc, #296]	@ (800513c <HAL_UART_MspInit+0x230>)
 8005012:	2220      	movs	r2, #32
 8005014:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005016:	4b49      	ldr	r3, [pc, #292]	@ (800513c <HAL_UART_MspInit+0x230>)
 8005018:	2200      	movs	r2, #0
 800501a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800501c:	4847      	ldr	r0, [pc, #284]	@ (800513c <HAL_UART_MspInit+0x230>)
 800501e:	f002 fc41 	bl	80078a4 <HAL_DMA_Init>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8005028:	f7fd ffac 	bl	8002f84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a43      	ldr	r2, [pc, #268]	@ (800513c <HAL_UART_MspInit+0x230>)
 8005030:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005034:	4a41      	ldr	r2, [pc, #260]	@ (800513c <HAL_UART_MspInit+0x230>)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800503a:	2200      	movs	r2, #0
 800503c:	2105      	movs	r1, #5
 800503e:	205b      	movs	r0, #91	@ 0x5b
 8005040:	f002 fc08 	bl	8007854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005044:	205b      	movs	r0, #91	@ 0x5b
 8005046:	f002 fc1f 	bl	8007888 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800504a:	e06c      	b.n	8005126 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==USART1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a3c      	ldr	r2, [pc, #240]	@ (8005144 <HAL_UART_MspInit+0x238>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d167      	bne.n	8005126 <HAL_UART_MspInit+0x21a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005056:	2301      	movs	r3, #1
 8005058:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800505e:	f107 0320 	add.w	r3, r7, #32
 8005062:	4618      	mov	r0, r3
 8005064:	f004 fd74 	bl	8009b50 <HAL_RCCEx_PeriphCLKConfig>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_UART_MspInit+0x166>
      Error_Handler();
 800506e:	f7fd ff89 	bl	8002f84 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005072:	4b30      	ldr	r3, [pc, #192]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8005074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005076:	4a2f      	ldr	r2, [pc, #188]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8005078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800507c:	6613      	str	r3, [r2, #96]	@ 0x60
 800507e:	4b2d      	ldr	r3, [pc, #180]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8005080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800508a:	4b2a      	ldr	r3, [pc, #168]	@ (8005134 <HAL_UART_MspInit+0x228>)
 800508c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508e:	4a29      	ldr	r2, [pc, #164]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005096:	4b27      	ldr	r3, [pc, #156]	@ (8005134 <HAL_UART_MspInit+0x228>)
 8005098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050a2:	23c0      	movs	r3, #192	@ 0xc0
 80050a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a6:	2302      	movs	r3, #2
 80050a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ae:	2300      	movs	r3, #0
 80050b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050b2:	2307      	movs	r3, #7
 80050b4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80050ba:	4619      	mov	r1, r3
 80050bc:	481e      	ldr	r0, [pc, #120]	@ (8005138 <HAL_UART_MspInit+0x22c>)
 80050be:	f002 ff2f 	bl	8007f20 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80050c2:	4b21      	ldr	r3, [pc, #132]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050c4:	4a21      	ldr	r2, [pc, #132]	@ (800514c <HAL_UART_MspInit+0x240>)
 80050c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80050c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050ca:	2218      	movs	r2, #24
 80050cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050da:	4b1b      	ldr	r3, [pc, #108]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050dc:	2280      	movs	r2, #128	@ 0x80
 80050de:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050e0:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050e6:	4b18      	ldr	r3, [pc, #96]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80050ec:	4b16      	ldr	r3, [pc, #88]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050ee:	2220      	movs	r2, #32
 80050f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050f2:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80050f8:	4813      	ldr	r0, [pc, #76]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 80050fa:	f002 fbd3 	bl	80078a4 <HAL_DMA_Init>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8005104:	f7fd ff3e 	bl	8002f84 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0f      	ldr	r2, [pc, #60]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 800510c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005110:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <HAL_UART_MspInit+0x23c>)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005116:	2200      	movs	r2, #0
 8005118:	2105      	movs	r1, #5
 800511a:	2025      	movs	r0, #37	@ 0x25
 800511c:	f002 fb9a 	bl	8007854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005120:	2025      	movs	r0, #37	@ 0x25
 8005122:	f002 fbb1 	bl	8007888 <HAL_NVIC_EnableIRQ>
}
 8005126:	bf00      	nop
 8005128:	3778      	adds	r7, #120	@ 0x78
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40008000 	.word	0x40008000
 8005134:	40021000 	.word	0x40021000
 8005138:	48000400 	.word	0x48000400
 800513c:	200016a8 	.word	0x200016a8
 8005140:	40020030 	.word	0x40020030
 8005144:	40013800 	.word	0x40013800
 8005148:	20001708 	.word	0x20001708
 800514c:	40020058 	.word	0x40020058

08005150 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a48      	ldr	r2, [pc, #288]	@ (8005280 <HAL_UART_RxCpltCallback+0x130>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d114      	bne.n	800518c <HAL_UART_RxCpltCallback+0x3c>

		received_flag=1;
 8005162:	4b48      	ldr	r3, [pc, #288]	@ (8005284 <HAL_UART_RxCpltCallback+0x134>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 8005168:	2264      	movs	r2, #100	@ 0x64
 800516a:	4947      	ldr	r1, [pc, #284]	@ (8005288 <HAL_UART_RxCpltCallback+0x138>)
 800516c:	4847      	ldr	r0, [pc, #284]	@ (800528c <HAL_UART_RxCpltCallback+0x13c>)
 800516e:	f010 fb64 	bl	801583a <memcpy>
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 8005172:	2264      	movs	r2, #100	@ 0x64
 8005174:	4944      	ldr	r1, [pc, #272]	@ (8005288 <HAL_UART_RxCpltCallback+0x138>)
 8005176:	4846      	ldr	r0, [pc, #280]	@ (8005290 <HAL_UART_RxCpltCallback+0x140>)
 8005178:	f007 fb7a 	bl	800c870 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800517c:	4b45      	ldr	r3, [pc, #276]	@ (8005294 <HAL_UART_RxCpltCallback+0x144>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b44      	ldr	r3, [pc, #272]	@ (8005294 <HAL_UART_RxCpltCallback+0x144>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	601a      	str	r2, [r3, #0]

	}
	if(huart->Instance==LPUART1){
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a41      	ldr	r2, [pc, #260]	@ (8005298 <HAL_UART_RxCpltCallback+0x148>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d170      	bne.n	8005278 <HAL_UART_RxCpltCallback+0x128>



		if(receivingflag==0){
 8005196:	4b41      	ldr	r3, [pc, #260]	@ (800529c <HAL_UART_RxCpltCallback+0x14c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d122      	bne.n	80051e4 <HAL_UART_RxCpltCallback+0x94>
		if(tarvos_RX_Buffer[1]==0x81 && tarvos_RX_Buffer[0]==0x02){
 800519e:	4b40      	ldr	r3, [pc, #256]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b81      	cmp	r3, #129	@ 0x81
 80051a4:	d110      	bne.n	80051c8 <HAL_UART_RxCpltCallback+0x78>
 80051a6:	4b3e      	ldr	r3, [pc, #248]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d10c      	bne.n	80051c8 <HAL_UART_RxCpltCallback+0x78>

			memcpy((uint8_t *) tarvos_DATA,(uint8_t *)tarvos_RX_Buffer,5);
 80051ae:	2205      	movs	r2, #5
 80051b0:	493b      	ldr	r1, [pc, #236]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051b2:	483c      	ldr	r0, [pc, #240]	@ (80052a4 <HAL_UART_RxCpltCallback+0x154>)
 80051b4:	f010 fb41 	bl	801583a <memcpy>




			receivingflag=1;
 80051b8:	4b38      	ldr	r3, [pc, #224]	@ (800529c <HAL_UART_RxCpltCallback+0x14c>)
 80051ba:	2201      	movs	r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
			receivingindex++;
 80051be:	4b3a      	ldr	r3, [pc, #232]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	4a38      	ldr	r2, [pc, #224]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 80051c6:	6013      	str	r3, [r2, #0]
		}

		if(tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[0]==0x02){
 80051c8:	4b35      	ldr	r3, [pc, #212]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	2b40      	cmp	r3, #64	@ 0x40
 80051ce:	d139      	bne.n	8005244 <HAL_UART_RxCpltCallback+0xf4>
 80051d0:	4b33      	ldr	r3, [pc, #204]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d135      	bne.n	8005244 <HAL_UART_RxCpltCallback+0xf4>
					memset((uint8_t *)tarvos_RX_Buffer,0,5);
 80051d8:	2205      	movs	r2, #5
 80051da:	2100      	movs	r1, #0
 80051dc:	4830      	ldr	r0, [pc, #192]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051de:	f010 fa4f 	bl	8015680 <memset>
 80051e2:	e02f      	b.n	8005244 <HAL_UART_RxCpltCallback+0xf4>
				}


		}
		else{
			if(tarvos_RX_Buffer[0]==0x02 && tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[2]==0x01 ){
 80051e4:	4b2e      	ldr	r3, [pc, #184]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d115      	bne.n	8005218 <HAL_UART_RxCpltCallback+0xc8>
 80051ec:	4b2c      	ldr	r3, [pc, #176]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b40      	cmp	r3, #64	@ 0x40
 80051f2:	d111      	bne.n	8005218 <HAL_UART_RxCpltCallback+0xc8>
 80051f4:	4b2a      	ldr	r3, [pc, #168]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 80051f6:	789b      	ldrb	r3, [r3, #2]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10d      	bne.n	8005218 <HAL_UART_RxCpltCallback+0xc8>
				memset((uint8_t *)tarvos_RX_Buffer,0,5);
 80051fc:	2205      	movs	r2, #5
 80051fe:	2100      	movs	r1, #0
 8005200:	4827      	ldr	r0, [pc, #156]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 8005202:	f010 fa3d 	bl	8015680 <memset>
				receivingindex=0;
 8005206:	4b28      	ldr	r3, [pc, #160]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
				receivingflag=0;
 800520c:	4b23      	ldr	r3, [pc, #140]	@ (800529c <HAL_UART_RxCpltCallback+0x14c>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
				trameready=0;
 8005212:	4b26      	ldr	r3, [pc, #152]	@ (80052ac <HAL_UART_RxCpltCallback+0x15c>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

			}
			if(receivingindex!=0){
 8005218:	4b23      	ldr	r3, [pc, #140]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d011      	beq.n	8005244 <HAL_UART_RxCpltCallback+0xf4>
				memcpy((uint8_t *) tarvos_DATA+(5*receivingindex),(uint8_t *)tarvos_RX_Buffer,5);
 8005220:	4b21      	ldr	r3, [pc, #132]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	461a      	mov	r2, r3
 800522c:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <HAL_UART_RxCpltCallback+0x154>)
 800522e:	4413      	add	r3, r2
 8005230:	2205      	movs	r2, #5
 8005232:	491b      	ldr	r1, [pc, #108]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 8005234:	4618      	mov	r0, r3
 8005236:	f010 fb00 	bl	801583a <memcpy>
				receivingindex++;
 800523a:	4b1b      	ldr	r3, [pc, #108]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3301      	adds	r3, #1
 8005240:	4a19      	ldr	r2, [pc, #100]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 8005242:	6013      	str	r3, [r2, #0]
			}
		}

		if(receivingindex==12){
 8005244:	4b18      	ldr	r3, [pc, #96]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d108      	bne.n	800525e <HAL_UART_RxCpltCallback+0x10e>
			receivingindex=0;
 800524c:	4b16      	ldr	r3, [pc, #88]	@ (80052a8 <HAL_UART_RxCpltCallback+0x158>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
			receivingflag=0;
 8005252:	4b12      	ldr	r3, [pc, #72]	@ (800529c <HAL_UART_RxCpltCallback+0x14c>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
			trameready=1;
 8005258:	4b14      	ldr	r3, [pc, #80]	@ (80052ac <HAL_UART_RxCpltCallback+0x15c>)
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]
		}
						HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5);//on recoit par dma à nouveau 64 caractères
 800525e:	2205      	movs	r2, #5
 8005260:	490f      	ldr	r1, [pc, #60]	@ (80052a0 <HAL_UART_RxCpltCallback+0x150>)
 8005262:	480b      	ldr	r0, [pc, #44]	@ (8005290 <HAL_UART_RxCpltCallback+0x140>)
 8005264:	f007 fb04 	bl	800c870 <HAL_UART_Receive_DMA>
						__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8005268:	4b11      	ldr	r3, [pc, #68]	@ (80052b0 <HAL_UART_RxCpltCallback+0x160>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <HAL_UART_RxCpltCallback+0x160>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0204 	bic.w	r2, r2, #4
 8005276:	601a      	str	r2, [r3, #0]

		}


}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40013800 	.word	0x40013800
 8005284:	20000e58 	.word	0x20000e58
 8005288:	200004f4 	.word	0x200004f4
 800528c:	20000c20 	.word	0x20000c20
 8005290:	20001580 	.word	0x20001580
 8005294:	20001708 	.word	0x20001708
 8005298:	40008000 	.word	0x40008000
 800529c:	20001578 	.word	0x20001578
 80052a0:	200004b4 	.word	0x200004b4
 80052a4:	20000474 	.word	0x20000474
 80052a8:	2000157c 	.word	0x2000157c
 80052ac:	20000e5c 	.word	0x20000e5c
 80052b0:	200016a8 	.word	0x200016a8

080052b4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80052bc:	f000 fd2e 	bl	8005d1c <HAL_GetTick>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <SPI_Timer_On+0x20>)
 80052c4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80052c6:	4a04      	ldr	r2, [pc, #16]	@ (80052d8 <SPI_Timer_On+0x24>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6013      	str	r3, [r2, #0]
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	2000176c 	.word	0x2000176c
 80052d8:	20001770 	.word	0x20001770

080052dc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80052e0:	f000 fd1c 	bl	8005d1c <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <SPI_Timer_Status+0x24>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <SPI_Timer_Status+0x28>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	bf34      	ite	cc
 80052f4:	2301      	movcc	r3, #1
 80052f6:	2300      	movcs	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	2000176c 	.word	0x2000176c
 8005304:	20001770 	.word	0x20001770

08005308 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af02      	add	r7, sp, #8
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005312:	f107 020f 	add.w	r2, r7, #15
 8005316:	1df9      	adds	r1, r7, #7
 8005318:	2332      	movs	r3, #50	@ 0x32
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	2301      	movs	r3, #1
 800531e:	4804      	ldr	r0, [pc, #16]	@ (8005330 <xchg_spi+0x28>)
 8005320:	f004 feb1 	bl	800a086 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000e64 	.word	0x20000e64

08005334 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e00a      	b.n	800535a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	18d4      	adds	r4, r2, r3
 800534a:	20ff      	movs	r0, #255	@ 0xff
 800534c:	f7ff ffdc 	bl	8005308 <xchg_spi>
 8005350:	4603      	mov	r3, r0
 8005352:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d3f0      	bcc.n	8005344 <rcvr_spi_multi+0x10>
	}
}
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	bd90      	pop	{r4, r7, pc}

0800536c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e009      	b.n	8005390 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff ffbf 	bl	8005308 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d3f1      	bcc.n	800537c <xmit_spi_multi+0x10>
	}
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80053aa:	f000 fcb7 	bl	8005d1c <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80053b4:	20ff      	movs	r0, #255	@ 0xff
 80053b6:	f7ff ffa7 	bl	8005308 <xchg_spi>
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2bff      	cmp	r3, #255	@ 0xff
 80053c2:	d007      	beq.n	80053d4 <wait_ready+0x32>
 80053c4:	f000 fcaa 	bl	8005d1c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d8ef      	bhi.n	80053b4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2bff      	cmp	r3, #255	@ 0xff
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80053ec:	2201      	movs	r2, #1
 80053ee:	2110      	movs	r1, #16
 80053f0:	4803      	ldr	r0, [pc, #12]	@ (8005400 <despiselect+0x18>)
 80053f2:	f002 ff2f 	bl	8008254 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80053f6:	20ff      	movs	r0, #255	@ 0xff
 80053f8:	f7ff ff86 	bl	8005308 <xchg_spi>

}
 80053fc:	bf00      	nop
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	48000800 	.word	0x48000800

08005404 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005408:	2200      	movs	r2, #0
 800540a:	2110      	movs	r1, #16
 800540c:	4809      	ldr	r0, [pc, #36]	@ (8005434 <spiselect+0x30>)
 800540e:	f002 ff21 	bl	8008254 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005412:	20ff      	movs	r0, #255	@ 0xff
 8005414:	f7ff ff78 	bl	8005308 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005418:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800541c:	f7ff ffc1 	bl	80053a2 <wait_ready>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <spiselect+0x26>
 8005426:	2301      	movs	r3, #1
 8005428:	e002      	b.n	8005430 <spiselect+0x2c>

	despiselect();
 800542a:	f7ff ffdd 	bl	80053e8 <despiselect>
	return 0;	/* Timeout */
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	48000800 	.word	0x48000800

08005438 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005442:	20c8      	movs	r0, #200	@ 0xc8
 8005444:	f7ff ff36 	bl	80052b4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005448:	20ff      	movs	r0, #255	@ 0xff
 800544a:	f7ff ff5d 	bl	8005308 <xchg_spi>
 800544e:	4603      	mov	r3, r0
 8005450:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2bff      	cmp	r3, #255	@ 0xff
 8005456:	d104      	bne.n	8005462 <rcvr_datablock+0x2a>
 8005458:	f7ff ff40 	bl	80052dc <SPI_Timer_Status>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f2      	bne.n	8005448 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2bfe      	cmp	r3, #254	@ 0xfe
 8005466:	d001      	beq.n	800546c <rcvr_datablock+0x34>
 8005468:	2300      	movs	r3, #0
 800546a:	e00a      	b.n	8005482 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ff60 	bl	8005334 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005474:	20ff      	movs	r0, #255	@ 0xff
 8005476:	f7ff ff47 	bl	8005308 <xchg_spi>
 800547a:	20ff      	movs	r0, #255	@ 0xff
 800547c:	f7ff ff44 	bl	8005308 <xchg_spi>

	return 1;						/* Function succeeded */
 8005480:	2301      	movs	r3, #1
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005496:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800549a:	f7ff ff82 	bl	80053a2 <wait_ready>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <xmit_datablock+0x1e>
 80054a4:	2300      	movs	r3, #0
 80054a6:	e01e      	b.n	80054e6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff ff2c 	bl	8005308 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	2bfd      	cmp	r3, #253	@ 0xfd
 80054b4:	d016      	beq.n	80054e4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80054b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff ff56 	bl	800536c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80054c0:	20ff      	movs	r0, #255	@ 0xff
 80054c2:	f7ff ff21 	bl	8005308 <xchg_spi>
 80054c6:	20ff      	movs	r0, #255	@ 0xff
 80054c8:	f7ff ff1e 	bl	8005308 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80054cc:	20ff      	movs	r0, #255	@ 0xff
 80054ce:	f7ff ff1b 	bl	8005308 <xchg_spi>
 80054d2:	4603      	mov	r3, r0
 80054d4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	2b05      	cmp	r3, #5
 80054de:	d001      	beq.n	80054e4 <xmit_datablock+0x5a>
 80054e0:	2300      	movs	r3, #0
 80054e2:	e000      	b.n	80054e6 <xmit_datablock+0x5c>
	}
	return 1;
 80054e4:	2301      	movs	r3, #1
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	4603      	mov	r3, r0
 80054f6:	6039      	str	r1, [r7, #0]
 80054f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80054fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	da0e      	bge.n	8005520 <send_cmd+0x32>
		cmd &= 0x7F;
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005508:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800550a:	2100      	movs	r1, #0
 800550c:	2037      	movs	r0, #55	@ 0x37
 800550e:	f7ff ffee 	bl	80054ee <send_cmd>
 8005512:	4603      	mov	r3, r0
 8005514:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005516:	7bbb      	ldrb	r3, [r7, #14]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d901      	bls.n	8005520 <send_cmd+0x32>
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	e051      	b.n	80055c4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	2b0c      	cmp	r3, #12
 8005524:	d008      	beq.n	8005538 <send_cmd+0x4a>
		despiselect();
 8005526:	f7ff ff5f 	bl	80053e8 <despiselect>
		if (!spiselect()) return 0xFF;
 800552a:	f7ff ff6b 	bl	8005404 <spiselect>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <send_cmd+0x4a>
 8005534:	23ff      	movs	r3, #255	@ 0xff
 8005536:	e045      	b.n	80055c4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fee1 	bl	8005308 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	0e1b      	lsrs	r3, r3, #24
 800554a:	b2db      	uxtb	r3, r3
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fedb 	bl	8005308 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	b2db      	uxtb	r3, r3
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fed5 	bl	8005308 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff fecf 	bl	8005308 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff feca 	bl	8005308 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <send_cmd+0x94>
 800557e:	2395      	movs	r3, #149	@ 0x95
 8005580:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d101      	bne.n	800558c <send_cmd+0x9e>
 8005588:	2387      	movs	r3, #135	@ 0x87
 800558a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff feba 	bl	8005308 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	2b0c      	cmp	r3, #12
 8005598:	d102      	bne.n	80055a0 <send_cmd+0xb2>
 800559a:	20ff      	movs	r0, #255	@ 0xff
 800559c:	f7ff feb4 	bl	8005308 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80055a0:	230a      	movs	r3, #10
 80055a2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80055a4:	20ff      	movs	r0, #255	@ 0xff
 80055a6:	f7ff feaf 	bl	8005308 <xchg_spi>
 80055aa:	4603      	mov	r3, r0
 80055ac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80055ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	da05      	bge.n	80055c2 <send_cmd+0xd4>
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80055c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80055cc:	b590      	push	{r4, r7, lr}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <USER_SPI_initialize+0x14>
 80055dc:	2301      	movs	r3, #1
 80055de:	e0d6      	b.n	800578e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80055e0:	4b6d      	ldr	r3, [pc, #436]	@ (8005798 <USER_SPI_initialize+0x1cc>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <USER_SPI_initialize+0x2a>
 80055ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005798 <USER_SPI_initialize+0x1cc>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	e0cb      	b.n	800578e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80055f6:	4b69      	ldr	r3, [pc, #420]	@ (800579c <USER_SPI_initialize+0x1d0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005600:	4b66      	ldr	r3, [pc, #408]	@ (800579c <USER_SPI_initialize+0x1d0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005608:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800560a:	230a      	movs	r3, #10
 800560c:	73fb      	strb	r3, [r7, #15]
 800560e:	e005      	b.n	800561c <USER_SPI_initialize+0x50>
 8005610:	20ff      	movs	r0, #255	@ 0xff
 8005612:	f7ff fe79 	bl	8005308 <xchg_spi>
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	3b01      	subs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f6      	bne.n	8005610 <USER_SPI_initialize+0x44>

	ty = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005626:	2100      	movs	r1, #0
 8005628:	2000      	movs	r0, #0
 800562a:	f7ff ff60 	bl	80054ee <send_cmd>
 800562e:	4603      	mov	r3, r0
 8005630:	2b01      	cmp	r3, #1
 8005632:	f040 808b 	bne.w	800574c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800563a:	f7ff fe3b 	bl	80052b4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800563e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005642:	2008      	movs	r0, #8
 8005644:	f7ff ff53 	bl	80054ee <send_cmd>
 8005648:	4603      	mov	r3, r0
 800564a:	2b01      	cmp	r3, #1
 800564c:	d151      	bne.n	80056f2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
 8005652:	e00d      	b.n	8005670 <USER_SPI_initialize+0xa4>
 8005654:	7bfc      	ldrb	r4, [r7, #15]
 8005656:	20ff      	movs	r0, #255	@ 0xff
 8005658:	f7ff fe56 	bl	8005308 <xchg_spi>
 800565c:	4603      	mov	r3, r0
 800565e:	461a      	mov	r2, r3
 8005660:	f104 0310 	add.w	r3, r4, #16
 8005664:	443b      	add	r3, r7
 8005666:	f803 2c08 	strb.w	r2, [r3, #-8]
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	3301      	adds	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d9ee      	bls.n	8005654 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005676:	7abb      	ldrb	r3, [r7, #10]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d167      	bne.n	800574c <USER_SPI_initialize+0x180>
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	2baa      	cmp	r3, #170	@ 0xaa
 8005680:	d164      	bne.n	800574c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005682:	bf00      	nop
 8005684:	f7ff fe2a 	bl	80052dc <SPI_Timer_Status>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <USER_SPI_initialize+0xd2>
 800568e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005692:	20a9      	movs	r0, #169	@ 0xa9
 8005694:	f7ff ff2b 	bl	80054ee <send_cmd>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f2      	bne.n	8005684 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800569e:	f7ff fe1d 	bl	80052dc <SPI_Timer_Status>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d051      	beq.n	800574c <USER_SPI_initialize+0x180>
 80056a8:	2100      	movs	r1, #0
 80056aa:	203a      	movs	r0, #58	@ 0x3a
 80056ac:	f7ff ff1f 	bl	80054ee <send_cmd>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d14a      	bne.n	800574c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e00d      	b.n	80056d8 <USER_SPI_initialize+0x10c>
 80056bc:	7bfc      	ldrb	r4, [r7, #15]
 80056be:	20ff      	movs	r0, #255	@ 0xff
 80056c0:	f7ff fe22 	bl	8005308 <xchg_spi>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	f104 0310 	add.w	r3, r4, #16
 80056cc:	443b      	add	r3, r7
 80056ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	3301      	adds	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d9ee      	bls.n	80056bc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80056de:	7a3b      	ldrb	r3, [r7, #8]
 80056e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <USER_SPI_initialize+0x120>
 80056e8:	230c      	movs	r3, #12
 80056ea:	e000      	b.n	80056ee <USER_SPI_initialize+0x122>
 80056ec:	2304      	movs	r3, #4
 80056ee:	737b      	strb	r3, [r7, #13]
 80056f0:	e02c      	b.n	800574c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80056f2:	2100      	movs	r1, #0
 80056f4:	20a9      	movs	r0, #169	@ 0xa9
 80056f6:	f7ff fefa 	bl	80054ee <send_cmd>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d804      	bhi.n	800570a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005700:	2302      	movs	r3, #2
 8005702:	737b      	strb	r3, [r7, #13]
 8005704:	23a9      	movs	r3, #169	@ 0xa9
 8005706:	73bb      	strb	r3, [r7, #14]
 8005708:	e003      	b.n	8005712 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800570a:	2301      	movs	r3, #1
 800570c:	737b      	strb	r3, [r7, #13]
 800570e:	2301      	movs	r3, #1
 8005710:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005712:	bf00      	nop
 8005714:	f7ff fde2 	bl	80052dc <SPI_Timer_Status>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <USER_SPI_initialize+0x162>
 800571e:	7bbb      	ldrb	r3, [r7, #14]
 8005720:	2100      	movs	r1, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fee3 	bl	80054ee <send_cmd>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f2      	bne.n	8005714 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800572e:	f7ff fdd5 	bl	80052dc <SPI_Timer_Status>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <USER_SPI_initialize+0x17c>
 8005738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800573c:	2010      	movs	r0, #16
 800573e:	f7ff fed6 	bl	80054ee <send_cmd>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <USER_SPI_initialize+0x180>
				ty = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800574c:	4a14      	ldr	r2, [pc, #80]	@ (80057a0 <USER_SPI_initialize+0x1d4>)
 800574e:	7b7b      	ldrb	r3, [r7, #13]
 8005750:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005752:	f7ff fe49 	bl	80053e8 <despiselect>

	if (ty) {			/* OK */
 8005756:	7b7b      	ldrb	r3, [r7, #13]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d012      	beq.n	8005782 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800575c:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <USER_SPI_initialize+0x1d0>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <USER_SPI_initialize+0x1d0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0210 	orr.w	r2, r2, #16
 800576e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005770:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <USER_SPI_initialize+0x1cc>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	b2da      	uxtb	r2, r3
 800577c:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <USER_SPI_initialize+0x1cc>)
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e002      	b.n	8005788 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005782:	4b05      	ldr	r3, [pc, #20]	@ (8005798 <USER_SPI_initialize+0x1cc>)
 8005784:	2201      	movs	r2, #1
 8005786:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005788:	4b03      	ldr	r3, [pc, #12]	@ (8005798 <USER_SPI_initialize+0x1cc>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	b2db      	uxtb	r3, r3
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}
 8005796:	bf00      	nop
 8005798:	20000028 	.word	0x20000028
 800579c:	20000e64 	.word	0x20000e64
 80057a0:	20001768 	.word	0x20001768

080057a4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <USER_SPI_status+0x14>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e002      	b.n	80057be <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80057b8:	4b04      	ldr	r3, [pc, #16]	@ (80057cc <USER_SPI_status+0x28>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	b2db      	uxtb	r3, r3
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	20000028 	.word	0x20000028

080057d0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4603      	mov	r3, r0
 80057de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <USER_SPI_read+0x1c>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <USER_SPI_read+0x20>
 80057ec:	2304      	movs	r3, #4
 80057ee:	e04d      	b.n	800588c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80057f0:	4b28      	ldr	r3, [pc, #160]	@ (8005894 <USER_SPI_read+0xc4>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <USER_SPI_read+0x32>
 80057fe:	2303      	movs	r3, #3
 8005800:	e044      	b.n	800588c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005802:	4b25      	ldr	r3, [pc, #148]	@ (8005898 <USER_SPI_read+0xc8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <USER_SPI_read+0x44>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	025b      	lsls	r3, r3, #9
 8005812:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d111      	bne.n	800583e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	2011      	movs	r0, #17
 800581e:	f7ff fe66 	bl	80054ee <send_cmd>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d129      	bne.n	800587c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005828:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800582c:	68b8      	ldr	r0, [r7, #8]
 800582e:	f7ff fe03 	bl	8005438 <rcvr_datablock>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d021      	beq.n	800587c <USER_SPI_read+0xac>
			count = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	e01e      	b.n	800587c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	2012      	movs	r0, #18
 8005842:	f7ff fe54 	bl	80054ee <send_cmd>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d117      	bne.n	800587c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800584c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005850:	68b8      	ldr	r0, [r7, #8]
 8005852:	f7ff fdf1 	bl	8005438 <rcvr_datablock>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <USER_SPI_read+0xa2>
				buff += 512;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005862:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	3b01      	subs	r3, #1
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1ed      	bne.n	800584c <USER_SPI_read+0x7c>
 8005870:	e000      	b.n	8005874 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005872:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005874:	2100      	movs	r1, #0
 8005876:	200c      	movs	r0, #12
 8005878:	f7ff fe39 	bl	80054ee <send_cmd>
		}
	}
	despiselect();
 800587c:	f7ff fdb4 	bl	80053e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	bf14      	ite	ne
 8005886:	2301      	movne	r3, #1
 8005888:	2300      	moveq	r3, #0
 800588a:	b2db      	uxtb	r3, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000028 	.word	0x20000028
 8005898:	20001768 	.word	0x20001768

0800589c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <USER_SPI_write+0x1c>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <USER_SPI_write+0x20>
 80058b8:	2304      	movs	r3, #4
 80058ba:	e063      	b.n	8005984 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80058bc:	4b33      	ldr	r3, [pc, #204]	@ (800598c <USER_SPI_write+0xf0>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <USER_SPI_write+0x32>
 80058ca:	2303      	movs	r3, #3
 80058cc:	e05a      	b.n	8005984 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80058ce:	4b2f      	ldr	r3, [pc, #188]	@ (800598c <USER_SPI_write+0xf0>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <USER_SPI_write+0x44>
 80058dc:	2302      	movs	r3, #2
 80058de:	e051      	b.n	8005984 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80058e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005990 <USER_SPI_write+0xf4>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <USER_SPI_write+0x56>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	025b      	lsls	r3, r3, #9
 80058f0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d110      	bne.n	800591a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	2018      	movs	r0, #24
 80058fc:	f7ff fdf7 	bl	80054ee <send_cmd>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d136      	bne.n	8005974 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005906:	21fe      	movs	r1, #254	@ 0xfe
 8005908:	68b8      	ldr	r0, [r7, #8]
 800590a:	f7ff fdbe 	bl	800548a <xmit_datablock>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02f      	beq.n	8005974 <USER_SPI_write+0xd8>
			count = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	e02c      	b.n	8005974 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800591a:	4b1d      	ldr	r3, [pc, #116]	@ (8005990 <USER_SPI_write+0xf4>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 0306 	and.w	r3, r3, #6
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <USER_SPI_write+0x92>
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	2097      	movs	r0, #151	@ 0x97
 800592a:	f7ff fde0 	bl	80054ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	2019      	movs	r0, #25
 8005932:	f7ff fddc 	bl	80054ee <send_cmd>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d11b      	bne.n	8005974 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800593c:	21fc      	movs	r1, #252	@ 0xfc
 800593e:	68b8      	ldr	r0, [r7, #8]
 8005940:	f7ff fda3 	bl	800548a <xmit_datablock>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <USER_SPI_write+0xc4>
				buff += 512;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005950:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	3b01      	subs	r3, #1
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1ee      	bne.n	800593c <USER_SPI_write+0xa0>
 800595e:	e000      	b.n	8005962 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005960:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005962:	21fd      	movs	r1, #253	@ 0xfd
 8005964:	2000      	movs	r0, #0
 8005966:	f7ff fd90 	bl	800548a <xmit_datablock>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <USER_SPI_write+0xd8>
 8005970:	2301      	movs	r3, #1
 8005972:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005974:	f7ff fd38 	bl	80053e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	bf14      	ite	ne
 800597e:	2301      	movne	r3, #1
 8005980:	2300      	moveq	r3, #0
 8005982:	b2db      	uxtb	r3, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20000028 	.word	0x20000028
 8005990:	20001768 	.word	0x20001768

08005994 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	@ 0x30
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	603a      	str	r2, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
 80059a0:	460b      	mov	r3, r1
 80059a2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <USER_SPI_ioctl+0x1a>
 80059aa:	2304      	movs	r3, #4
 80059ac:	e15a      	b.n	8005c64 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80059ae:	4baf      	ldr	r3, [pc, #700]	@ (8005c6c <USER_SPI_ioctl+0x2d8>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <USER_SPI_ioctl+0x2c>
 80059bc:	2303      	movs	r3, #3
 80059be:	e151      	b.n	8005c64 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80059c6:	79bb      	ldrb	r3, [r7, #6]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	f200 8136 	bhi.w	8005c3a <USER_SPI_ioctl+0x2a6>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <USER_SPI_ioctl+0x40>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059e9 	.word	0x080059e9
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005c3b 	.word	0x08005c3b
 80059e0:	08005aa9 	.word	0x08005aa9
 80059e4:	08005b9f 	.word	0x08005b9f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80059e8:	f7ff fd0c 	bl	8005404 <spiselect>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 8127 	beq.w	8005c42 <USER_SPI_ioctl+0x2ae>
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80059fa:	e122      	b.n	8005c42 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80059fc:	2100      	movs	r1, #0
 80059fe:	2009      	movs	r0, #9
 8005a00:	f7ff fd75 	bl	80054ee <send_cmd>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 811d 	bne.w	8005c46 <USER_SPI_ioctl+0x2b2>
 8005a0c:	f107 030c 	add.w	r3, r7, #12
 8005a10:	2110      	movs	r1, #16
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fd10 	bl	8005438 <rcvr_datablock>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8113 	beq.w	8005c46 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005a20:	7b3b      	ldrb	r3, [r7, #12]
 8005a22:	099b      	lsrs	r3, r3, #6
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d111      	bne.n	8005a4e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005a2a:	7d7b      	ldrb	r3, [r7, #21]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	7d3b      	ldrb	r3, [r7, #20]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	4413      	add	r3, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005a3e:	4413      	add	r3, r2
 8005a40:	3301      	adds	r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	029a      	lsls	r2, r3, #10
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	e028      	b.n	8005aa0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005a4e:	7c7b      	ldrb	r3, [r7, #17]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	7dbb      	ldrb	r3, [r7, #22]
 8005a58:	09db      	lsrs	r3, r3, #7
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	7d7b      	ldrb	r3, [r7, #21]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 0306 	and.w	r3, r3, #6
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	3302      	adds	r3, #2
 8005a72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005a76:	7d3b      	ldrb	r3, [r7, #20]
 8005a78:	099b      	lsrs	r3, r3, #6
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	7cbb      	ldrb	r3, [r7, #18]
 8005a86:	029b      	lsls	r3, r3, #10
 8005a88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3301      	adds	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005a92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a96:	3b09      	subs	r3, #9
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005aa6:	e0ce      	b.n	8005c46 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005aa8:	4b71      	ldr	r3, [pc, #452]	@ (8005c70 <USER_SPI_ioctl+0x2dc>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d031      	beq.n	8005b18 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	208d      	movs	r0, #141	@ 0x8d
 8005ab8:	f7ff fd19 	bl	80054ee <send_cmd>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 80c3 	bne.w	8005c4a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005ac4:	20ff      	movs	r0, #255	@ 0xff
 8005ac6:	f7ff fc1f 	bl	8005308 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005aca:	f107 030c 	add.w	r3, r7, #12
 8005ace:	2110      	movs	r1, #16
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fcb1 	bl	8005438 <rcvr_datablock>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80b6 	beq.w	8005c4a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005ade:	2330      	movs	r3, #48	@ 0x30
 8005ae0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005ae4:	e007      	b.n	8005af6 <USER_SPI_ioctl+0x162>
 8005ae6:	20ff      	movs	r0, #255	@ 0xff
 8005ae8:	f7ff fc0e 	bl	8005308 <xchg_spi>
 8005aec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005af0:	3b01      	subs	r3, #1
 8005af2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005af6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f3      	bne.n	8005ae6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005afe:	7dbb      	ldrb	r3, [r7, #22]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	2310      	movs	r3, #16
 8005b08:	fa03 f202 	lsl.w	r2, r3, r2
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005b16:	e098      	b.n	8005c4a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005b18:	2100      	movs	r1, #0
 8005b1a:	2009      	movs	r0, #9
 8005b1c:	f7ff fce7 	bl	80054ee <send_cmd>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f040 8091 	bne.w	8005c4a <USER_SPI_ioctl+0x2b6>
 8005b28:	f107 030c 	add.w	r3, r7, #12
 8005b2c:	2110      	movs	r1, #16
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fc82 	bl	8005438 <rcvr_datablock>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8087 	beq.w	8005c4a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8005c70 <USER_SPI_ioctl+0x2dc>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d012      	beq.n	8005b6e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005b48:	7dbb      	ldrb	r3, [r7, #22]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005b50:	7dfa      	ldrb	r2, [r7, #23]
 8005b52:	09d2      	lsrs	r2, r2, #7
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	4413      	add	r3, r2
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	7e7b      	ldrb	r3, [r7, #25]
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e013      	b.n	8005b96 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005b6e:	7dbb      	ldrb	r3, [r7, #22]
 8005b70:	109b      	asrs	r3, r3, #2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f003 031f 	and.w	r3, r3, #31
 8005b78:	3301      	adds	r3, #1
 8005b7a:	7dfa      	ldrb	r2, [r7, #23]
 8005b7c:	00d2      	lsls	r2, r2, #3
 8005b7e:	f002 0218 	and.w	r2, r2, #24
 8005b82:	7df9      	ldrb	r1, [r7, #23]
 8005b84:	0949      	lsrs	r1, r1, #5
 8005b86:	b2c9      	uxtb	r1, r1
 8005b88:	440a      	add	r2, r1
 8005b8a:	3201      	adds	r2, #1
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005b9c:	e055      	b.n	8005c4a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005b9e:	4b34      	ldr	r3, [pc, #208]	@ (8005c70 <USER_SPI_ioctl+0x2dc>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f003 0306 	and.w	r3, r3, #6
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d051      	beq.n	8005c4e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005baa:	f107 020c 	add.w	r2, r7, #12
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	210b      	movs	r1, #11
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff feee 	bl	8005994 <USER_SPI_ioctl>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d149      	bne.n	8005c52 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005bbe:	7b3b      	ldrb	r3, [r7, #12]
 8005bc0:	099b      	lsrs	r3, r3, #6
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <USER_SPI_ioctl+0x23e>
 8005bc8:	7dbb      	ldrb	r3, [r7, #22]
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d041      	beq.n	8005c56 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005be2:	4b23      	ldr	r3, [pc, #140]	@ (8005c70 <USER_SPI_ioctl+0x2dc>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d105      	bne.n	8005bfa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf0:	025b      	lsls	r3, r3, #9
 8005bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	025b      	lsls	r3, r3, #9
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bfc:	2020      	movs	r0, #32
 8005bfe:	f7ff fc76 	bl	80054ee <send_cmd>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d128      	bne.n	8005c5a <USER_SPI_ioctl+0x2c6>
 8005c08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c0a:	2021      	movs	r0, #33	@ 0x21
 8005c0c:	f7ff fc6f 	bl	80054ee <send_cmd>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d121      	bne.n	8005c5a <USER_SPI_ioctl+0x2c6>
 8005c16:	2100      	movs	r1, #0
 8005c18:	2026      	movs	r0, #38	@ 0x26
 8005c1a:	f7ff fc68 	bl	80054ee <send_cmd>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11a      	bne.n	8005c5a <USER_SPI_ioctl+0x2c6>
 8005c24:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005c28:	f7ff fbbb 	bl	80053a2 <wait_ready>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d013      	beq.n	8005c5a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005c32:	2300      	movs	r3, #0
 8005c34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005c38:	e00f      	b.n	8005c5a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005c40:	e00c      	b.n	8005c5c <USER_SPI_ioctl+0x2c8>
		break;
 8005c42:	bf00      	nop
 8005c44:	e00a      	b.n	8005c5c <USER_SPI_ioctl+0x2c8>
		break;
 8005c46:	bf00      	nop
 8005c48:	e008      	b.n	8005c5c <USER_SPI_ioctl+0x2c8>
		break;
 8005c4a:	bf00      	nop
 8005c4c:	e006      	b.n	8005c5c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005c4e:	bf00      	nop
 8005c50:	e004      	b.n	8005c5c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005c52:	bf00      	nop
 8005c54:	e002      	b.n	8005c5c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005c56:	bf00      	nop
 8005c58:	e000      	b.n	8005c5c <USER_SPI_ioctl+0x2c8>
		break;
 8005c5a:	bf00      	nop
	}

	despiselect();
 8005c5c:	f7ff fbc4 	bl	80053e8 <despiselect>

	return res;
 8005c60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3730      	adds	r7, #48	@ 0x30
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000028 	.word	0x20000028
 8005c70:	20001768 	.word	0x20001768

08005c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005c74:	480d      	ldr	r0, [pc, #52]	@ (8005cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005c76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005c78:	f7fe fb92 	bl	80043a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c7c:	480c      	ldr	r0, [pc, #48]	@ (8005cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8005c7e:	490d      	ldr	r1, [pc, #52]	@ (8005cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c80:	4a0d      	ldr	r2, [pc, #52]	@ (8005cb8 <LoopForever+0xe>)
  movs r3, #0
 8005c82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005c84:	e002      	b.n	8005c8c <LoopCopyDataInit>

08005c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c8a:	3304      	adds	r3, #4

08005c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c90:	d3f9      	bcc.n	8005c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c92:	4a0a      	ldr	r2, [pc, #40]	@ (8005cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c94:	4c0a      	ldr	r4, [pc, #40]	@ (8005cc0 <LoopForever+0x16>)
  movs r3, #0
 8005c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c98:	e001      	b.n	8005c9e <LoopFillZerobss>

08005c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c9c:	3204      	adds	r2, #4

08005c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ca0:	d3fb      	bcc.n	8005c9a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005ca2:	f00f fda3 	bl	80157ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005ca6:	f7fc ffa3 	bl	8002bf0 <main>

08005caa <LoopForever>:

LoopForever:
    b LoopForever
 8005caa:	e7fe      	b.n	8005caa <LoopForever>
  ldr   r0, =_estack
 8005cac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cb4:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8005cb8:	0801d0e4 	.word	0x0801d0e4
  ldr r2, =_sbss
 8005cbc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8005cc0:	20004974 	.word	0x20004974

08005cc4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005cc4:	e7fe      	b.n	8005cc4 <COMP1_2_3_IRQHandler>

08005cc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cd0:	2003      	movs	r0, #3
 8005cd2:	f001 fdb4 	bl	800783e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005cd6:	200f      	movs	r0, #15
 8005cd8:	f7fe f94a 	bl	8003f70 <HAL_InitTick>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	71fb      	strb	r3, [r7, #7]
 8005ce6:	e001      	b.n	8005cec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ce8:	f7fe f918 	bl	8003f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005cec:	79fb      	ldrb	r3, [r7, #7]

}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <HAL_IncTick+0x1c>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b05      	ldr	r3, [pc, #20]	@ (8005d18 <HAL_IncTick+0x20>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4413      	add	r3, r2
 8005d06:	4a03      	ldr	r2, [pc, #12]	@ (8005d14 <HAL_IncTick+0x1c>)
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20001774 	.word	0x20001774
 8005d18:	20000030 	.word	0x20000030

08005d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d20:	4b03      	ldr	r3, [pc, #12]	@ (8005d30 <HAL_GetTick+0x14>)
 8005d22:	681b      	ldr	r3, [r3, #0]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20001774 	.word	0x20001774

08005d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d3c:	f7ff ffee 	bl	8005d1c <HAL_GetTick>
 8005d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d004      	beq.n	8005d58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d4e:	4b09      	ldr	r3, [pc, #36]	@ (8005d74 <HAL_Delay+0x40>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d58:	bf00      	nop
 8005d5a:	f7ff ffdf 	bl	8005d1c <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d8f7      	bhi.n	8005d5a <HAL_Delay+0x26>
  {
  }
}
 8005d6a:	bf00      	nop
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000030 	.word	0x20000030

08005d78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	609a      	str	r2, [r3, #8]
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	609a      	str	r2, [r3, #8]
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3360      	adds	r3, #96	@ 0x60
 8005df2:	461a      	mov	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b08      	ldr	r3, [pc, #32]	@ (8005e24 <LL_ADC_SetOffset+0x44>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	03fff000 	.word	0x03fff000

08005e28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3360      	adds	r3, #96	@ 0x60
 8005e36:	461a      	mov	r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3360      	adds	r3, #96	@ 0x60
 8005e64:	461a      	mov	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b087      	sub	sp, #28
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3360      	adds	r3, #96	@ 0x60
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3360      	adds	r3, #96	@ 0x60
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	615a      	str	r2, [r3, #20]
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3330      	adds	r3, #48	@ 0x30
 8005f52:	461a      	mov	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	4413      	add	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	211f      	movs	r1, #31
 8005f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f72:	43db      	mvns	r3, r3
 8005f74:	401a      	ands	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	0e9b      	lsrs	r3, r3, #26
 8005f7a:	f003 011f 	and.w	r1, r3, #31
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	fa01 f303 	lsl.w	r3, r1, r3
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3314      	adds	r3, #20
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	0e5b      	lsrs	r3, r3, #25
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	4413      	add	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	0d1b      	lsrs	r3, r3, #20
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	2107      	movs	r1, #7
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	401a      	ands	r2, r3
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	0d1b      	lsrs	r3, r3, #20
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	431a      	orrs	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
	...

08006018 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006030:	43db      	mvns	r3, r3
 8006032:	401a      	ands	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f003 0318 	and.w	r3, r3, #24
 800603a:	4908      	ldr	r1, [pc, #32]	@ (800605c <LL_ADC_SetChannelSingleDiff+0x44>)
 800603c:	40d9      	lsrs	r1, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	400b      	ands	r3, r1
 8006042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006046:	431a      	orrs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	0007ffff 	.word	0x0007ffff

08006060 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 031f 	and.w	r3, r3, #31
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80060a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6093      	str	r3, [r2, #8]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d0:	d101      	bne.n	80060d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80060f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80060f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800611c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006120:	d101      	bne.n	8006126 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006144:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006148:	f043 0201 	orr.w	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <LL_ADC_IsEnabled+0x18>
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <LL_ADC_IsEnabled+0x1a>
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006192:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006196:	f043 0204 	orr.w	r2, r3, #4
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d101      	bne.n	80061c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d101      	bne.n	80061e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b089      	sub	sp, #36	@ 0x24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e167      	b.n	80064e2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d109      	bne.n	8006234 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fb fc85 	bl	8001b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff ff3f 	bl	80060bc <LL_ADC_IsDeepPowerDownEnabled>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff ff25 	bl	8006098 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ff5a 	bl	800610c <LL_ADC_IsInternalRegulatorEnabled>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d115      	bne.n	800628a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff ff3e 	bl	80060e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006268:	4ba0      	ldr	r3, [pc, #640]	@ (80064ec <HAL_ADC_Init+0x2f4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	099b      	lsrs	r3, r3, #6
 800626e:	4aa0      	ldr	r2, [pc, #640]	@ (80064f0 <HAL_ADC_Init+0x2f8>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	099b      	lsrs	r3, r3, #6
 8006276:	3301      	adds	r3, #1
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800627c:	e002      	b.n	8006284 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3b01      	subs	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f9      	bne.n	800627e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff ff3c 	bl	800610c <LL_ADC_IsInternalRegulatorEnabled>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10d      	bne.n	80062b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629e:	f043 0210 	orr.w	r2, r3, #16
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062aa:	f043 0201 	orr.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff ff75 	bl	80061aa <LL_ADC_REG_IsConversionOngoing>
 80062c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f040 8100 	bne.w	80064d0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 80fc 	bne.w	80064d0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80062e0:	f043 0202 	orr.w	r2, r3, #2
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff ff35 	bl	800615c <LL_ADC_IsEnabled>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d111      	bne.n	800631c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80062fc:	f7ff ff2e 	bl	800615c <LL_ADC_IsEnabled>
 8006300:	4604      	mov	r4, r0
 8006302:	487c      	ldr	r0, [pc, #496]	@ (80064f4 <HAL_ADC_Init+0x2fc>)
 8006304:	f7ff ff2a 	bl	800615c <LL_ADC_IsEnabled>
 8006308:	4603      	mov	r3, r0
 800630a:	4323      	orrs	r3, r4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d105      	bne.n	800631c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4619      	mov	r1, r3
 8006316:	4878      	ldr	r0, [pc, #480]	@ (80064f8 <HAL_ADC_Init+0x300>)
 8006318:	f7ff fd2e 	bl	8005d78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7f5b      	ldrb	r3, [r3, #29]
 8006320:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006326:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800632c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006332:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800633a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800633c:	4313      	orrs	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006346:	2b01      	cmp	r3, #1
 8006348:	d106      	bne.n	8006358 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634e:	3b01      	subs	r3, #1
 8006350:	045b      	lsls	r3, r3, #17
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4313      	orrs	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	4b60      	ldr	r3, [pc, #384]	@ (80064fc <HAL_ADC_Init+0x304>)
 800637c:	4013      	ands	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	69b9      	ldr	r1, [r7, #24]
 8006384:	430b      	orrs	r3, r1
 8006386:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff ff14 	bl	80061d0 <LL_ADC_INJ_IsConversionOngoing>
 80063a8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d16d      	bne.n	800648c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d16a      	bne.n	800648c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80063ba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80063c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80063c4:	4313      	orrs	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063d2:	f023 0302 	bic.w	r3, r3, #2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	69b9      	ldr	r1, [r7, #24]
 80063dc:	430b      	orrs	r3, r1
 80063de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d017      	beq.n	8006418 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80063f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006400:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006404:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6911      	ldr	r1, [r2, #16]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	430b      	orrs	r3, r1
 8006412:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006416:	e013      	b.n	8006440 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006426:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800643c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006446:	2b01      	cmp	r3, #1
 8006448:	d118      	bne.n	800647c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006454:	f023 0304 	bic.w	r3, r3, #4
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006460:	4311      	orrs	r1, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006466:	4311      	orrs	r1, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800646c:	430a      	orrs	r2, r1
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	611a      	str	r2, [r3, #16]
 800647a:	e007      	b.n	800648c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d10c      	bne.n	80064ae <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649a:	f023 010f 	bic.w	r1, r3, #15
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	1e5a      	subs	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80064ac:	e007      	b.n	80064be <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 020f 	bic.w	r2, r2, #15
 80064bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	f043 0201 	orr.w	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064ce:	e007      	b.n	80064e0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d4:	f043 0210 	orr.w	r2, r3, #16
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80064e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3724      	adds	r7, #36	@ 0x24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd90      	pop	{r4, r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000024 	.word	0x20000024
 80064f0:	053e2d63 	.word	0x053e2d63
 80064f4:	50000100 	.word	0x50000100
 80064f8:	50000300 	.word	0x50000300
 80064fc:	fff04007 	.word	0xfff04007

08006500 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800650c:	4851      	ldr	r0, [pc, #324]	@ (8006654 <HAL_ADC_Start_DMA+0x154>)
 800650e:	f7ff fda7 	bl	8006060 <LL_ADC_GetMultimode>
 8006512:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fe46 	bl	80061aa <LL_ADC_REG_IsConversionOngoing>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 808f 	bne.w	8006644 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_ADC_Start_DMA+0x34>
 8006530:	2302      	movs	r3, #2
 8006532:	e08a      	b.n	800664a <HAL_ADC_Start_DMA+0x14a>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b05      	cmp	r3, #5
 8006546:	d002      	beq.n	800654e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2b09      	cmp	r3, #9
 800654c:	d173      	bne.n	8006636 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 feb2 	bl	80072b8 <ADC_Enable>
 8006554:	4603      	mov	r3, r0
 8006556:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d166      	bne.n	800662c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006562:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a38      	ldr	r2, [pc, #224]	@ (8006658 <HAL_ADC_Start_DMA+0x158>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d002      	beq.n	8006582 <HAL_ADC_Start_DMA+0x82>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	e001      	b.n	8006586 <HAL_ADC_Start_DMA+0x86>
 8006582:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	4293      	cmp	r3, r2
 800658c:	d002      	beq.n	8006594 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d105      	bne.n	80065a0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006598:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b0:	f023 0206 	bic.w	r2, r3, #6
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	661a      	str	r2, [r3, #96]	@ 0x60
 80065b8:	e002      	b.n	80065c0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c4:	4a25      	ldr	r2, [pc, #148]	@ (800665c <HAL_ADC_Start_DMA+0x15c>)
 80065c6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065cc:	4a24      	ldr	r2, [pc, #144]	@ (8006660 <HAL_ADC_Start_DMA+0x160>)
 80065ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d4:	4a23      	ldr	r2, [pc, #140]	@ (8006664 <HAL_ADC_Start_DMA+0x164>)
 80065d6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	221c      	movs	r2, #28
 80065de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0210 	orr.w	r2, r2, #16
 80065f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3340      	adds	r3, #64	@ 0x40
 8006612:	4619      	mov	r1, r3
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f001 f9ec 	bl	80079f4 <HAL_DMA_Start_IT>
 800661c:	4603      	mov	r3, r0
 800661e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fdac 	bl	8006182 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800662a:	e00d      	b.n	8006648 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006634:	e008      	b.n	8006648 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006642:	e001      	b.n	8006648 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006644:	2302      	movs	r3, #2
 8006646:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006648:	7dfb      	ldrb	r3, [r7, #23]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	50000300 	.word	0x50000300
 8006658:	50000100 	.word	0x50000100
 800665c:	080073c5 	.word	0x080073c5
 8006660:	0800749d 	.word	0x0800749d
 8006664:	080074b9 	.word	0x080074b9

08006668 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	@ 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006684:	4883      	ldr	r0, [pc, #524]	@ (8006894 <HAL_ADC_IRQHandler+0x22c>)
 8006686:	f7ff fceb 	bl	8006060 <LL_ADC_GetMultimode>
 800668a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d017      	beq.n	80066c6 <HAL_ADC_IRQHandler+0x5e>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d012      	beq.n	80066c6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 ff65 	bl	8007588 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2202      	movs	r2, #2
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <HAL_ADC_IRQHandler+0x72>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8085 	beq.w	80067f0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d07f      	beq.n	80067f0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006700:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fc05 	bl	8005f1c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d064      	beq.n	80067e2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a5e      	ldr	r2, [pc, #376]	@ (8006898 <HAL_ADC_IRQHandler+0x230>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d002      	beq.n	8006728 <HAL_ADC_IRQHandler+0xc0>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	e001      	b.n	800672c <HAL_ADC_IRQHandler+0xc4>
 8006728:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	4293      	cmp	r3, r2
 8006732:	d008      	beq.n	8006746 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b05      	cmp	r3, #5
 800673e:	d002      	beq.n	8006746 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b09      	cmp	r3, #9
 8006744:	d104      	bne.n	8006750 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	e00d      	b.n	800676c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a50      	ldr	r2, [pc, #320]	@ (8006898 <HAL_ADC_IRQHandler+0x230>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d002      	beq.n	8006760 <HAL_ADC_IRQHandler+0xf8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	e001      	b.n	8006764 <HAL_ADC_IRQHandler+0xfc>
 8006760:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006764:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d135      	bne.n	80067e2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b08      	cmp	r3, #8
 8006782:	d12e      	bne.n	80067e2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fd0e 	bl	80061aa <LL_ADC_REG_IsConversionOngoing>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11a      	bne.n	80067ca <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 020c 	bic.w	r2, r2, #12
 80067a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d112      	bne.n	80067e2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067c0:	f043 0201 	orr.w	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80067c8:	e00b      	b.n	80067e2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ce:	f043 0210 	orr.w	r2, r3, #16
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067da:	f043 0201 	orr.w	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fb fa30 	bl	8001c48 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	220c      	movs	r2, #12
 80067ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <HAL_ADC_IRQHandler+0x19c>
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 809e 	beq.w	800694c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 8098 	beq.w	800694c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d105      	bne.n	8006834 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff fbae 	bl	8005f9a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800683e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff fb69 	bl	8005f1c <LL_ADC_REG_IsTriggerSourceSWStart>
 800684a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a11      	ldr	r2, [pc, #68]	@ (8006898 <HAL_ADC_IRQHandler+0x230>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d002      	beq.n	800685c <HAL_ADC_IRQHandler+0x1f4>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	e001      	b.n	8006860 <HAL_ADC_IRQHandler+0x1f8>
 800685c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	4293      	cmp	r3, r2
 8006866:	d008      	beq.n	800687a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b06      	cmp	r3, #6
 8006872:	d002      	beq.n	800687a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b07      	cmp	r3, #7
 8006878:	d104      	bne.n	8006884 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e011      	b.n	80068a8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a03      	ldr	r2, [pc, #12]	@ (8006898 <HAL_ADC_IRQHandler+0x230>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d006      	beq.n	800689c <HAL_ADC_IRQHandler+0x234>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	e005      	b.n	80068a0 <HAL_ADC_IRQHandler+0x238>
 8006894:	50000300 	.word	0x50000300
 8006898:	50000100 	.word	0x50000100
 800689c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80068a0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d047      	beq.n	800693e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d007      	beq.n	80068c8 <HAL_ADC_IRQHandler+0x260>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d03f      	beq.n	800693e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d13a      	bne.n	800693e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d2:	2b40      	cmp	r3, #64	@ 0x40
 80068d4:	d133      	bne.n	800693e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d12e      	bne.n	800693e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff fc73 	bl	80061d0 <LL_ADC_INJ_IsConversionOngoing>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11a      	bne.n	8006926 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80068fe:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006904:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d112      	bne.n	800693e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691c:	f043 0201 	orr.w	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006924:	e00b      	b.n	800693e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692a:	f043 0210 	orr.w	r2, r3, #16
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fdfa 	bl	8007538 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2260      	movs	r2, #96	@ 0x60
 800694a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006952:	2b00      	cmp	r3, #0
 8006954:	d011      	beq.n	800697a <HAL_ADC_IRQHandler+0x312>
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006964:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f89f 	bl	8006ab0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2280      	movs	r2, #128	@ 0x80
 8006978:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d012      	beq.n	80069aa <HAL_ADC_IRQHandler+0x342>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006992:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fde0 	bl	8007560 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <HAL_ADC_IRQHandler+0x372>
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00d      	beq.n	80069da <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fdd2 	bl	8007574 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d036      	beq.n	8006a52 <HAL_ADC_IRQHandler+0x3ea>
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d031      	beq.n	8006a52 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80069f6:	2301      	movs	r3, #1
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fa:	e014      	b.n	8006a26 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006a02:	4825      	ldr	r0, [pc, #148]	@ (8006a98 <HAL_ADC_IRQHandler+0x430>)
 8006a04:	f7ff fb3a 	bl	800607c <LL_ADC_GetMultiDMATransfer>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a12:	e008      	b.n	8006a26 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006a22:	2301      	movs	r3, #1
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10e      	bne.n	8006a4a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a30:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a3c:	f043 0202 	orr.w	r2, r3, #2
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f83d 	bl	8006ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d018      	beq.n	8006a8e <HAL_ADC_IRQHandler+0x426>
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d013      	beq.n	8006a8e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a76:	f043 0208 	orr.w	r2, r3, #8
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a86:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fd5f 	bl	800754c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006a8e:	bf00      	nop
 8006a90:	3728      	adds	r7, #40	@ 0x28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	50000300 	.word	0x50000300

08006a9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b0b6      	sub	sp, #216	@ 0xd8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d101      	bne.n	8006afa <HAL_ADC_ConfigChannel+0x22>
 8006af6:	2302      	movs	r3, #2
 8006af8:	e3c8      	b.n	800728c <HAL_ADC_ConfigChannel+0x7b4>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fb4f 	bl	80061aa <LL_ADC_REG_IsConversionOngoing>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f040 83ad 	bne.w	800726e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6818      	ldr	r0, [r3, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	6859      	ldr	r1, [r3, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	f7ff fa0e 	bl	8005f42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff fb3d 	bl	80061aa <LL_ADC_REG_IsConversionOngoing>
 8006b30:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff fb49 	bl	80061d0 <LL_ADC_INJ_IsConversionOngoing>
 8006b3e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 81d9 	bne.w	8006efe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 81d4 	bne.w	8006efe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b5e:	d10f      	bne.n	8006b80 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	f7ff fa28 	bl	8005fc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff f9bc 	bl	8005ef6 <LL_ADC_SetSamplingTimeCommonConfig>
 8006b7e:	e00e      	b.n	8006b9e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	6819      	ldr	r1, [r3, #0]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f7ff fa17 	bl	8005fc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff f9ac 	bl	8005ef6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	08db      	lsrs	r3, r3, #3
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d022      	beq.n	8006c06 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	6919      	ldr	r1, [r3, #16]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bd0:	f7ff f906 	bl	8005de0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6919      	ldr	r1, [r3, #16]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	461a      	mov	r2, r3
 8006be2:	f7ff f952 	bl	8005e8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d102      	bne.n	8006bfc <HAL_ADC_ConfigChannel+0x124>
 8006bf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bfa:	e000      	b.n	8006bfe <HAL_ADC_ConfigChannel+0x126>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f7ff f95e 	bl	8005ec0 <LL_ADC_SetOffsetSaturation>
 8006c04:	e17b      	b.n	8006efe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff f90b 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <HAL_ADC_ConfigChannel+0x15a>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff f900 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	0e9b      	lsrs	r3, r3, #26
 8006c2c:	f003 021f 	and.w	r2, r3, #31
 8006c30:	e01e      	b.n	8006c70 <HAL_ADC_ConfigChannel+0x198>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff f8f5 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c48:	fa93 f3a3 	rbit	r3, r3
 8006c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006c58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006c60:	2320      	movs	r3, #32
 8006c62:	e004      	b.n	8006c6e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006c64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c68:	fab3 f383 	clz	r3, r3
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <HAL_ADC_ConfigChannel+0x1b0>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	0e9b      	lsrs	r3, r3, #26
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	e018      	b.n	8006cba <HAL_ADC_ConfigChannel+0x1e2>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006c94:	fa93 f3a3 	rbit	r3, r3
 8006c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006ca4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006cac:	2320      	movs	r3, #32
 8006cae:	e004      	b.n	8006cba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006cb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006cb4:	fab3 f383 	clz	r3, r3
 8006cb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d106      	bne.n	8006ccc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff f8c4 	bl	8005e54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7ff f8a8 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <HAL_ADC_ConfigChannel+0x220>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff f89d 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	0e9b      	lsrs	r3, r3, #26
 8006cf2:	f003 021f 	and.w	r2, r3, #31
 8006cf6:	e01e      	b.n	8006d36 <HAL_ADC_ConfigChannel+0x25e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff f892 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d0e:	fa93 f3a3 	rbit	r3, r3
 8006d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006d26:	2320      	movs	r3, #32
 8006d28:	e004      	b.n	8006d34 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d2e:	fab3 f383 	clz	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d105      	bne.n	8006d4e <HAL_ADC_ConfigChannel+0x276>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	0e9b      	lsrs	r3, r3, #26
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	e018      	b.n	8006d80 <HAL_ADC_ConfigChannel+0x2a8>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d5a:	fa93 f3a3 	rbit	r3, r3
 8006d5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006d72:	2320      	movs	r3, #32
 8006d74:	e004      	b.n	8006d80 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006d76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d7a:	fab3 f383 	clz	r3, r3
 8006d7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d106      	bne.n	8006d92 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff f861 	bl	8005e54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff f845 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x2e6>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2102      	movs	r1, #2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff f83a 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006db4:	4603      	mov	r3, r0
 8006db6:	0e9b      	lsrs	r3, r3, #26
 8006db8:	f003 021f 	and.w	r2, r3, #31
 8006dbc:	e01e      	b.n	8006dfc <HAL_ADC_ConfigChannel+0x324>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2102      	movs	r1, #2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff f82f 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dd4:	fa93 f3a3 	rbit	r3, r3
 8006dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006ddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006de4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006dec:	2320      	movs	r3, #32
 8006dee:	e004      	b.n	8006dfa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006df4:	fab3 f383 	clz	r3, r3
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d105      	bne.n	8006e14 <HAL_ADC_ConfigChannel+0x33c>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	0e9b      	lsrs	r3, r3, #26
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	e016      	b.n	8006e42 <HAL_ADC_ConfigChannel+0x36a>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e20:	fa93 f3a3 	rbit	r3, r3
 8006e24:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006e34:	2320      	movs	r3, #32
 8006e36:	e004      	b.n	8006e42 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e3c:	fab3 f383 	clz	r3, r3
 8006e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d106      	bne.n	8006e54 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff f800 	bl	8005e54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2103      	movs	r1, #3
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe ffe4 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <HAL_ADC_ConfigChannel+0x3a8>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2103      	movs	r1, #3
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe ffd9 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006e76:	4603      	mov	r3, r0
 8006e78:	0e9b      	lsrs	r3, r3, #26
 8006e7a:	f003 021f 	and.w	r2, r3, #31
 8006e7e:	e017      	b.n	8006eb0 <HAL_ADC_ConfigChannel+0x3d8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2103      	movs	r1, #3
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe ffce 	bl	8005e28 <LL_ADC_GetOffsetChannel>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e92:	fa93 f3a3 	rbit	r3, r3
 8006e96:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006e98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e9a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006ea2:	2320      	movs	r3, #32
 8006ea4:	e003      	b.n	8006eae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ea8:	fab3 f383 	clz	r3, r3
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <HAL_ADC_ConfigChannel+0x3f0>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	0e9b      	lsrs	r3, r3, #26
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	e011      	b.n	8006eec <HAL_ADC_ConfigChannel+0x414>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ed0:	fa93 f3a3 	rbit	r3, r3
 8006ed4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006ed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ed8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	e003      	b.n	8006eec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee6:	fab3 f383 	clz	r3, r3
 8006eea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d106      	bne.n	8006efe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2103      	movs	r1, #3
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe ffab 	bl	8005e54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff f92a 	bl	800615c <LL_ADC_IsEnabled>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 8140 	bne.w	8007190 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	6819      	ldr	r1, [r3, #0]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f7ff f87b 	bl	8006018 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	4a8f      	ldr	r2, [pc, #572]	@ (8007164 <HAL_ADC_ConfigChannel+0x68c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	f040 8131 	bne.w	8007190 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10b      	bne.n	8006f56 <HAL_ADC_ConfigChannel+0x47e>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	0e9b      	lsrs	r3, r3, #26
 8006f44:	3301      	adds	r3, #1
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	bf94      	ite	ls
 8006f4e:	2301      	movls	r3, #1
 8006f50:	2300      	movhi	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	e019      	b.n	8006f8a <HAL_ADC_ConfigChannel+0x4b2>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f5e:	fa93 f3a3 	rbit	r3, r3
 8006f62:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006f64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f66:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006f6e:	2320      	movs	r3, #32
 8006f70:	e003      	b.n	8006f7a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f74:	fab3 f383 	clz	r3, r3
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	2b09      	cmp	r3, #9
 8006f82:	bf94      	ite	ls
 8006f84:	2301      	movls	r3, #1
 8006f86:	2300      	movhi	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d079      	beq.n	8007082 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d107      	bne.n	8006faa <HAL_ADC_ConfigChannel+0x4d2>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	0e9b      	lsrs	r3, r3, #26
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	069b      	lsls	r3, r3, #26
 8006fa4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006fa8:	e015      	b.n	8006fd6 <HAL_ADC_ConfigChannel+0x4fe>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fb2:	fa93 f3a3 	rbit	r3, r3
 8006fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006fc2:	2320      	movs	r3, #32
 8006fc4:	e003      	b.n	8006fce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc8:	fab3 f383 	clz	r3, r3
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	3301      	adds	r3, #1
 8006fd0:	069b      	lsls	r3, r3, #26
 8006fd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <HAL_ADC_ConfigChannel+0x51e>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	0e9b      	lsrs	r3, r3, #26
 8006fe8:	3301      	adds	r3, #1
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	2101      	movs	r1, #1
 8006ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff4:	e017      	b.n	8007026 <HAL_ADC_ConfigChannel+0x54e>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ffe:	fa93 f3a3 	rbit	r3, r3
 8007002:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007006:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800700e:	2320      	movs	r3, #32
 8007010:	e003      	b.n	800701a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007014:	fab3 f383 	clz	r3, r3
 8007018:	b2db      	uxtb	r3, r3
 800701a:	3301      	adds	r3, #1
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2101      	movs	r1, #1
 8007022:	fa01 f303 	lsl.w	r3, r1, r3
 8007026:	ea42 0103 	orr.w	r1, r2, r3
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <HAL_ADC_ConfigChannel+0x574>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	0e9b      	lsrs	r3, r3, #26
 800703c:	3301      	adds	r3, #1
 800703e:	f003 021f 	and.w	r2, r3, #31
 8007042:	4613      	mov	r3, r2
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	4413      	add	r3, r2
 8007048:	051b      	lsls	r3, r3, #20
 800704a:	e018      	b.n	800707e <HAL_ADC_ConfigChannel+0x5a6>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007054:	fa93 f3a3 	rbit	r3, r3
 8007058:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800705a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800705e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8007064:	2320      	movs	r3, #32
 8007066:	e003      	b.n	8007070 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8007068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706a:	fab3 f383 	clz	r3, r3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	3301      	adds	r3, #1
 8007072:	f003 021f 	and.w	r2, r3, #31
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800707e:	430b      	orrs	r3, r1
 8007080:	e081      	b.n	8007186 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800708a:	2b00      	cmp	r3, #0
 800708c:	d107      	bne.n	800709e <HAL_ADC_ConfigChannel+0x5c6>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	0e9b      	lsrs	r3, r3, #26
 8007094:	3301      	adds	r3, #1
 8007096:	069b      	lsls	r3, r3, #26
 8007098:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800709c:	e015      	b.n	80070ca <HAL_ADC_ConfigChannel+0x5f2>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a6:	fa93 f3a3 	rbit	r3, r3
 80070aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80070ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80070b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80070b6:	2320      	movs	r3, #32
 80070b8:	e003      	b.n	80070c2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	fab3 f383 	clz	r3, r3
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	3301      	adds	r3, #1
 80070c4:	069b      	lsls	r3, r3, #26
 80070c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <HAL_ADC_ConfigChannel+0x612>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	0e9b      	lsrs	r3, r3, #26
 80070dc:	3301      	adds	r3, #1
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	2101      	movs	r1, #1
 80070e4:	fa01 f303 	lsl.w	r3, r1, r3
 80070e8:	e017      	b.n	800711a <HAL_ADC_ConfigChannel+0x642>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	fa93 f3a3 	rbit	r3, r3
 80070f6:	61fb      	str	r3, [r7, #28]
  return result;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007102:	2320      	movs	r3, #32
 8007104:	e003      	b.n	800710e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	fab3 f383 	clz	r3, r3
 800710c:	b2db      	uxtb	r3, r3
 800710e:	3301      	adds	r3, #1
 8007110:	f003 031f 	and.w	r3, r3, #31
 8007114:	2101      	movs	r1, #1
 8007116:	fa01 f303 	lsl.w	r3, r1, r3
 800711a:	ea42 0103 	orr.w	r1, r2, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <HAL_ADC_ConfigChannel+0x66e>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	0e9b      	lsrs	r3, r3, #26
 8007130:	3301      	adds	r3, #1
 8007132:	f003 021f 	and.w	r2, r3, #31
 8007136:	4613      	mov	r3, r2
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	4413      	add	r3, r2
 800713c:	3b1e      	subs	r3, #30
 800713e:	051b      	lsls	r3, r3, #20
 8007140:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007144:	e01e      	b.n	8007184 <HAL_ADC_ConfigChannel+0x6ac>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	fa93 f3a3 	rbit	r3, r3
 8007152:	613b      	str	r3, [r7, #16]
  return result;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800715e:	2320      	movs	r3, #32
 8007160:	e006      	b.n	8007170 <HAL_ADC_ConfigChannel+0x698>
 8007162:	bf00      	nop
 8007164:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	fab3 f383 	clz	r3, r3
 800716e:	b2db      	uxtb	r3, r3
 8007170:	3301      	adds	r3, #1
 8007172:	f003 021f 	and.w	r2, r3, #31
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	3b1e      	subs	r3, #30
 800717e:	051b      	lsls	r3, r3, #20
 8007180:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007184:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800718a:	4619      	mov	r1, r3
 800718c:	f7fe ff18 	bl	8005fc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4b3f      	ldr	r3, [pc, #252]	@ (8007294 <HAL_ADC_ConfigChannel+0x7bc>)
 8007196:	4013      	ands	r3, r2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d071      	beq.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800719c:	483e      	ldr	r0, [pc, #248]	@ (8007298 <HAL_ADC_ConfigChannel+0x7c0>)
 800719e:	f7fe fe11 	bl	8005dc4 <LL_ADC_GetCommonPathInternalCh>
 80071a2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a3c      	ldr	r2, [pc, #240]	@ (800729c <HAL_ADC_ConfigChannel+0x7c4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <HAL_ADC_ConfigChannel+0x6e2>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a3a      	ldr	r2, [pc, #232]	@ (80072a0 <HAL_ADC_ConfigChannel+0x7c8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d127      	bne.n	800720a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80071ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d121      	bne.n	800720a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071ce:	d157      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071d8:	4619      	mov	r1, r3
 80071da:	482f      	ldr	r0, [pc, #188]	@ (8007298 <HAL_ADC_ConfigChannel+0x7c0>)
 80071dc:	f7fe fddf 	bl	8005d9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071e0:	4b30      	ldr	r3, [pc, #192]	@ (80072a4 <HAL_ADC_ConfigChannel+0x7cc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	099b      	lsrs	r3, r3, #6
 80071e6:	4a30      	ldr	r2, [pc, #192]	@ (80072a8 <HAL_ADC_ConfigChannel+0x7d0>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	099b      	lsrs	r3, r3, #6
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	4613      	mov	r3, r2
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80071fa:	e002      	b.n	8007202 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3b01      	subs	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f9      	bne.n	80071fc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007208:	e03a      	b.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a27      	ldr	r2, [pc, #156]	@ (80072ac <HAL_ADC_ConfigChannel+0x7d4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d113      	bne.n	800723c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10d      	bne.n	800723c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a22      	ldr	r2, [pc, #136]	@ (80072b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d02a      	beq.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800722a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800722e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007232:	4619      	mov	r1, r3
 8007234:	4818      	ldr	r0, [pc, #96]	@ (8007298 <HAL_ADC_ConfigChannel+0x7c0>)
 8007236:	f7fe fdb2 	bl	8005d9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800723a:	e021      	b.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1c      	ldr	r2, [pc, #112]	@ (80072b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d11c      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800724a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d116      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a16      	ldr	r2, [pc, #88]	@ (80072b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d011      	beq.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800725c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007260:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007264:	4619      	mov	r1, r3
 8007266:	480c      	ldr	r0, [pc, #48]	@ (8007298 <HAL_ADC_ConfigChannel+0x7c0>)
 8007268:	f7fe fd99 	bl	8005d9e <LL_ADC_SetCommonPathInternalCh>
 800726c:	e008      	b.n	8007280 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007272:	f043 0220 	orr.w	r2, r3, #32
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007288:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800728c:	4618      	mov	r0, r3
 800728e:	37d8      	adds	r7, #216	@ 0xd8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	80080000 	.word	0x80080000
 8007298:	50000300 	.word	0x50000300
 800729c:	c3210000 	.word	0xc3210000
 80072a0:	90c00010 	.word	0x90c00010
 80072a4:	20000024 	.word	0x20000024
 80072a8:	053e2d63 	.word	0x053e2d63
 80072ac:	c7520000 	.word	0xc7520000
 80072b0:	50000100 	.word	0x50000100
 80072b4:	cb840000 	.word	0xcb840000

080072b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fe ff47 	bl	800615c <LL_ADC_IsEnabled>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d169      	bne.n	80073a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	4b36      	ldr	r3, [pc, #216]	@ (80073b4 <ADC_Enable+0xfc>)
 80072dc:	4013      	ands	r3, r2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00d      	beq.n	80072fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e6:	f043 0210 	orr.w	r2, r3, #16
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072f2:	f043 0201 	orr.w	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e055      	b.n	80073aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe ff16 	bl	8006134 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007308:	482b      	ldr	r0, [pc, #172]	@ (80073b8 <ADC_Enable+0x100>)
 800730a:	f7fe fd5b 	bl	8005dc4 <LL_ADC_GetCommonPathInternalCh>
 800730e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007310:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007314:	2b00      	cmp	r3, #0
 8007316:	d013      	beq.n	8007340 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007318:	4b28      	ldr	r3, [pc, #160]	@ (80073bc <ADC_Enable+0x104>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	099b      	lsrs	r3, r3, #6
 800731e:	4a28      	ldr	r2, [pc, #160]	@ (80073c0 <ADC_Enable+0x108>)
 8007320:	fba2 2303 	umull	r2, r3, r2, r3
 8007324:	099b      	lsrs	r3, r3, #6
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007332:	e002      	b.n	800733a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3b01      	subs	r3, #1
 8007338:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1f9      	bne.n	8007334 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007340:	f7fe fcec 	bl	8005d1c <HAL_GetTick>
 8007344:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007346:	e028      	b.n	800739a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4618      	mov	r0, r3
 800734e:	f7fe ff05 	bl	800615c <LL_ADC_IsEnabled>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d104      	bne.n	8007362 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4618      	mov	r0, r3
 800735e:	f7fe fee9 	bl	8006134 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007362:	f7fe fcdb 	bl	8005d1c <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d914      	bls.n	800739a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	d00d      	beq.n	800739a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007382:	f043 0210 	orr.w	r2, r3, #16
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800738e:	f043 0201 	orr.w	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e007      	b.n	80073aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d1cf      	bne.n	8007348 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	8000003f 	.word	0x8000003f
 80073b8:	50000300 	.word	0x50000300
 80073bc:	20000024 	.word	0x20000024
 80073c0:	053e2d63 	.word	0x053e2d63

080073c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d14b      	bne.n	8007476 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d021      	beq.n	800743c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fd8d 	bl	8005f1c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d032      	beq.n	800746e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d12b      	bne.n	800746e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007426:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d11f      	bne.n	800746e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007432:	f043 0201 	orr.w	r2, r3, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	65da      	str	r2, [r3, #92]	@ 0x5c
 800743a:	e018      	b.n	800746e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d111      	bne.n	800746e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800744e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d105      	bne.n	800746e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007466:	f043 0201 	orr.w	r2, r3, #1
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7fa fbea 	bl	8001c48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007474:	e00e      	b.n	8007494 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7ff fb1e 	bl	8006ac4 <HAL_ADC_ErrorCallback>
}
 8007488:	e004      	b.n	8007494 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff faf6 	bl	8006a9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d6:	f043 0204 	orr.w	r2, r3, #4
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff faf0 	bl	8006ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <LL_ADC_IsEnabled>:
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <LL_ADC_IsEnabled+0x18>
 8007500:	2301      	movs	r3, #1
 8007502:	e000      	b.n	8007506 <LL_ADC_IsEnabled+0x1a>
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <LL_ADC_REG_IsConversionOngoing>:
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b04      	cmp	r3, #4
 8007524:	d101      	bne.n	800752a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007526:	2301      	movs	r3, #1
 8007528:	e000      	b.n	800752c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800759c:	b590      	push	{r4, r7, lr}
 800759e:	b0a1      	sub	sp, #132	@ 0x84
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e08b      	b.n	80076d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80075c2:	2300      	movs	r3, #0
 80075c4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80075c6:	2300      	movs	r3, #0
 80075c8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075d2:	d102      	bne.n	80075da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80075d4:	4b41      	ldr	r3, [pc, #260]	@ (80076dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80075d6:	60bb      	str	r3, [r7, #8]
 80075d8:	e001      	b.n	80075de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80075da:	2300      	movs	r3, #0
 80075dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e06a      	b.n	80076d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff ff87 	bl	8007512 <LL_ADC_REG_IsConversionOngoing>
 8007604:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff ff81 	bl	8007512 <LL_ADC_REG_IsConversionOngoing>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d14c      	bne.n	80076b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007618:	2b00      	cmp	r3, #0
 800761a:	d149      	bne.n	80076b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800761c:	4b30      	ldr	r3, [pc, #192]	@ (80076e0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800761e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d028      	beq.n	800767a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	6859      	ldr	r1, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800763a:	035b      	lsls	r3, r3, #13
 800763c:	430b      	orrs	r3, r1
 800763e:	431a      	orrs	r2, r3
 8007640:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007642:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007644:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007648:	f7ff ff50 	bl	80074ec <LL_ADC_IsEnabled>
 800764c:	4604      	mov	r4, r0
 800764e:	4823      	ldr	r0, [pc, #140]	@ (80076dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007650:	f7ff ff4c 	bl	80074ec <LL_ADC_IsEnabled>
 8007654:	4603      	mov	r3, r0
 8007656:	4323      	orrs	r3, r4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d133      	bne.n	80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800765c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007664:	f023 030f 	bic.w	r3, r3, #15
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	6811      	ldr	r1, [r2, #0]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	6892      	ldr	r2, [r2, #8]
 8007670:	430a      	orrs	r2, r1
 8007672:	431a      	orrs	r2, r3
 8007674:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007676:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007678:	e024      	b.n	80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800767a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007684:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007686:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800768a:	f7ff ff2f 	bl	80074ec <LL_ADC_IsEnabled>
 800768e:	4604      	mov	r4, r0
 8007690:	4812      	ldr	r0, [pc, #72]	@ (80076dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007692:	f7ff ff2b 	bl	80074ec <LL_ADC_IsEnabled>
 8007696:	4603      	mov	r3, r0
 8007698:	4323      	orrs	r3, r4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d112      	bne.n	80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800769e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80076a6:	f023 030f 	bic.w	r3, r3, #15
 80076aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80076ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80076ae:	e009      	b.n	80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076b4:	f043 0220 	orr.w	r2, r3, #32
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80076c2:	e000      	b.n	80076c6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80076c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80076ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3784      	adds	r7, #132	@ 0x84
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd90      	pop	{r4, r7, pc}
 80076da:	bf00      	nop
 80076dc:	50000100 	.word	0x50000100
 80076e0:	50000300 	.word	0x50000300

080076e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007728 <__NVIC_SetPriorityGrouping+0x44>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007700:	4013      	ands	r3, r2
 8007702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800770c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007716:	4a04      	ldr	r2, [pc, #16]	@ (8007728 <__NVIC_SetPriorityGrouping+0x44>)
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	60d3      	str	r3, [r2, #12]
}
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	e000ed00 	.word	0xe000ed00

0800772c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007730:	4b04      	ldr	r3, [pc, #16]	@ (8007744 <__NVIC_GetPriorityGrouping+0x18>)
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	0a1b      	lsrs	r3, r3, #8
 8007736:	f003 0307 	and.w	r3, r3, #7
}
 800773a:	4618      	mov	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	e000ed00 	.word	0xe000ed00

08007748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007756:	2b00      	cmp	r3, #0
 8007758:	db0b      	blt.n	8007772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	f003 021f 	and.w	r2, r3, #31
 8007760:	4907      	ldr	r1, [pc, #28]	@ (8007780 <__NVIC_EnableIRQ+0x38>)
 8007762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	2001      	movs	r0, #1
 800776a:	fa00 f202 	lsl.w	r2, r0, r2
 800776e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	e000e100 	.word	0xe000e100

08007784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007794:	2b00      	cmp	r3, #0
 8007796:	db0a      	blt.n	80077ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	b2da      	uxtb	r2, r3
 800779c:	490c      	ldr	r1, [pc, #48]	@ (80077d0 <__NVIC_SetPriority+0x4c>)
 800779e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a2:	0112      	lsls	r2, r2, #4
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	440b      	add	r3, r1
 80077a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077ac:	e00a      	b.n	80077c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	4908      	ldr	r1, [pc, #32]	@ (80077d4 <__NVIC_SetPriority+0x50>)
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	3b04      	subs	r3, #4
 80077bc:	0112      	lsls	r2, r2, #4
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	440b      	add	r3, r1
 80077c2:	761a      	strb	r2, [r3, #24]
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	e000e100 	.word	0xe000e100
 80077d4:	e000ed00 	.word	0xe000ed00

080077d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077d8:	b480      	push	{r7}
 80077da:	b089      	sub	sp, #36	@ 0x24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f1c3 0307 	rsb	r3, r3, #7
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	bf28      	it	cs
 80077f6:	2304      	movcs	r3, #4
 80077f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	3304      	adds	r3, #4
 80077fe:	2b06      	cmp	r3, #6
 8007800:	d902      	bls.n	8007808 <NVIC_EncodePriority+0x30>
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	3b03      	subs	r3, #3
 8007806:	e000      	b.n	800780a <NVIC_EncodePriority+0x32>
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800780c:	f04f 32ff 	mov.w	r2, #4294967295
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	fa02 f303 	lsl.w	r3, r2, r3
 8007816:	43da      	mvns	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	401a      	ands	r2, r3
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007820:	f04f 31ff 	mov.w	r1, #4294967295
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	fa01 f303 	lsl.w	r3, r1, r3
 800782a:	43d9      	mvns	r1, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007830:	4313      	orrs	r3, r2
         );
}
 8007832:	4618      	mov	r0, r3
 8007834:	3724      	adds	r7, #36	@ 0x24
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff ff4c 	bl	80076e4 <__NVIC_SetPriorityGrouping>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007862:	f7ff ff63 	bl	800772c <__NVIC_GetPriorityGrouping>
 8007866:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	6978      	ldr	r0, [r7, #20]
 800786e:	f7ff ffb3 	bl	80077d8 <NVIC_EncodePriority>
 8007872:	4602      	mov	r2, r0
 8007874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007878:	4611      	mov	r1, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff ff82 	bl	8007784 <__NVIC_SetPriority>
}
 8007880:	bf00      	nop
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff ff56 	bl	8007748 <__NVIC_EnableIRQ>
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e08d      	b.n	80079d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	4b47      	ldr	r3, [pc, #284]	@ (80079dc <HAL_DMA_Init+0x138>)
 80078be:	429a      	cmp	r2, r3
 80078c0:	d80f      	bhi.n	80078e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	4b45      	ldr	r3, [pc, #276]	@ (80079e0 <HAL_DMA_Init+0x13c>)
 80078ca:	4413      	add	r3, r2
 80078cc:	4a45      	ldr	r2, [pc, #276]	@ (80079e4 <HAL_DMA_Init+0x140>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	009a      	lsls	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a42      	ldr	r2, [pc, #264]	@ (80079e8 <HAL_DMA_Init+0x144>)
 80078de:	641a      	str	r2, [r3, #64]	@ 0x40
 80078e0:	e00e      	b.n	8007900 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	4b40      	ldr	r3, [pc, #256]	@ (80079ec <HAL_DMA_Init+0x148>)
 80078ea:	4413      	add	r3, r2
 80078ec:	4a3d      	ldr	r2, [pc, #244]	@ (80079e4 <HAL_DMA_Init+0x140>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	009a      	lsls	r2, r3, #2
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a3c      	ldr	r2, [pc, #240]	@ (80079f0 <HAL_DMA_Init+0x14c>)
 80078fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800793c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa82 	bl	8007e5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007960:	d102      	bne.n	8007968 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800797c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <HAL_DMA_Init+0x104>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b04      	cmp	r3, #4
 800798c:	d80c      	bhi.n	80079a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 faa2 	bl	8007ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	e008      	b.n	80079ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40020407 	.word	0x40020407
 80079e0:	bffdfff8 	.word	0xbffdfff8
 80079e4:	cccccccd 	.word	0xcccccccd
 80079e8:	40020000 	.word	0x40020000
 80079ec:	bffdfbf8 	.word	0xbffdfbf8
 80079f0:	40020400 	.word	0x40020400

080079f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_DMA_Start_IT+0x20>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e066      	b.n	8007ae2 <HAL_DMA_Start_IT+0xee>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d155      	bne.n	8007ad4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f9c7 	bl	8007de0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d008      	beq.n	8007a6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f042 020e 	orr.w	r2, r2, #14
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	e00f      	b.n	8007a8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0204 	bic.w	r2, r2, #4
 8007a7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 020a 	orr.w	r2, r2, #10
 8007a8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007aa8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ac0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f042 0201 	orr.w	r2, r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e005      	b.n	8007ae0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007adc:	2302      	movs	r3, #2
 8007ade:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d005      	beq.n	8007b0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2204      	movs	r2, #4
 8007b06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
 8007b0c:	e037      	b.n	8007b7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 020e 	bic.w	r2, r2, #14
 8007b1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0201 	bic.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b42:	f003 021f 	and.w	r2, r3, #31
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8007b50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00c      	beq.n	8007b7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007b7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d00d      	beq.n	8007bd0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	73fb      	strb	r3, [r7, #15]
 8007bce:	e047      	b.n	8007c60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 020e 	bic.w	r2, r2, #14
 8007bde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0201 	bic.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c04:	f003 021f 	and.w	r2, r3, #31
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8007c12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00c      	beq.n	8007c40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
    }
  }
  return status;
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	409a      	lsls	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d026      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x7a>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d021      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d107      	bne.n	8007cbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0204 	bic.w	r2, r2, #4
 8007cbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	f003 021f 	and.w	r2, r3, #31
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cca:	2104      	movs	r1, #4
 8007ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8007cd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d071      	beq.n	8007dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007ce2:	e06c      	b.n	8007dbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	2202      	movs	r2, #2
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d02e      	beq.n	8007d56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d029      	beq.n	8007d56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 020a 	bic.w	r2, r2, #10
 8007d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2c:	f003 021f 	and.w	r2, r3, #31
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d34:	2102      	movs	r1, #2
 8007d36:	fa01 f202 	lsl.w	r2, r1, r2
 8007d3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d038      	beq.n	8007dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007d54:	e033      	b.n	8007dbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5a:	f003 031f 	and.w	r3, r3, #31
 8007d5e:	2208      	movs	r2, #8
 8007d60:	409a      	lsls	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d02a      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d025      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 020e 	bic.w	r2, r2, #14
 8007d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d88:	f003 021f 	and.w	r2, r3, #31
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d90:	2101      	movs	r1, #1
 8007d92:	fa01 f202 	lsl.w	r2, r1, r2
 8007d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
}
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007df6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0e:	f003 021f 	and.w	r2, r3, #31
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e16:	2101      	movs	r1, #1
 8007e18:	fa01 f202 	lsl.w	r2, r1, r2
 8007e1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2b10      	cmp	r3, #16
 8007e2c:	d108      	bne.n	8007e40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007e3e:	e007      	b.n	8007e50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	60da      	str	r2, [r3, #12]
}
 8007e50:	bf00      	nop
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4b16      	ldr	r3, [pc, #88]	@ (8007ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d802      	bhi.n	8007e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007e70:	4b15      	ldr	r3, [pc, #84]	@ (8007ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e001      	b.n	8007e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007e76:	4b15      	ldr	r3, [pc, #84]	@ (8007ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007e78:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	3b08      	subs	r3, #8
 8007e86:	4a12      	ldr	r2, [pc, #72]	@ (8007ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	091b      	lsrs	r3, r3, #4
 8007e8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e94:	089b      	lsrs	r3, r3, #2
 8007e96:	009a      	lsls	r2, r3, #2
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	2201      	movs	r2, #1
 8007eb0:	409a      	lsls	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	40020407 	.word	0x40020407
 8007ec8:	40020800 	.word	0x40020800
 8007ecc:	40020820 	.word	0x40020820
 8007ed0:	cccccccd 	.word	0xcccccccd
 8007ed4:	40020880 	.word	0x40020880

08007ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4b0b      	ldr	r3, [pc, #44]	@ (8007f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007eec:	4413      	add	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a08      	ldr	r2, [pc, #32]	@ (8007f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007efa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	f003 031f 	and.w	r3, r3, #31
 8007f04:	2201      	movs	r2, #1
 8007f06:	409a      	lsls	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	1000823f 	.word	0x1000823f
 8007f1c:	40020940 	.word	0x40020940

08007f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007f2e:	e15a      	b.n	80081e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	2101      	movs	r1, #1
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 814c 	beq.w	80081e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d005      	beq.n	8007f60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d130      	bne.n	8007fc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f70:	43db      	mvns	r3, r3
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	4013      	ands	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f96:	2201      	movs	r2, #1
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	091b      	lsrs	r3, r3, #4
 8007fac:	f003 0201 	and.w	r2, r3, #1
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d017      	beq.n	8007ffe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	2203      	movs	r2, #3
 8007fda:	fa02 f303 	lsl.w	r3, r2, r3
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d123      	bne.n	8008052 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	08da      	lsrs	r2, r3, #3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3208      	adds	r2, #8
 8008012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008016:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	220f      	movs	r2, #15
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	43db      	mvns	r3, r3
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	4013      	ands	r3, r2
 800802c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	08da      	lsrs	r2, r3, #3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3208      	adds	r2, #8
 800804c:	6939      	ldr	r1, [r7, #16]
 800804e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	2203      	movs	r2, #3
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	43db      	mvns	r3, r3
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	4013      	ands	r3, r2
 8008068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f003 0203 	and.w	r2, r3, #3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 80a6 	beq.w	80081e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008094:	4b5b      	ldr	r3, [pc, #364]	@ (8008204 <HAL_GPIO_Init+0x2e4>)
 8008096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008098:	4a5a      	ldr	r2, [pc, #360]	@ (8008204 <HAL_GPIO_Init+0x2e4>)
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	6613      	str	r3, [r2, #96]	@ 0x60
 80080a0:	4b58      	ldr	r3, [pc, #352]	@ (8008204 <HAL_GPIO_Init+0x2e4>)
 80080a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080ac:	4a56      	ldr	r2, [pc, #344]	@ (8008208 <HAL_GPIO_Init+0x2e8>)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	089b      	lsrs	r3, r3, #2
 80080b2:	3302      	adds	r3, #2
 80080b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	220f      	movs	r2, #15
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	43db      	mvns	r3, r3
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4013      	ands	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80080d6:	d01f      	beq.n	8008118 <HAL_GPIO_Init+0x1f8>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a4c      	ldr	r2, [pc, #304]	@ (800820c <HAL_GPIO_Init+0x2ec>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d019      	beq.n	8008114 <HAL_GPIO_Init+0x1f4>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a4b      	ldr	r2, [pc, #300]	@ (8008210 <HAL_GPIO_Init+0x2f0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <HAL_GPIO_Init+0x1f0>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a4a      	ldr	r2, [pc, #296]	@ (8008214 <HAL_GPIO_Init+0x2f4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00d      	beq.n	800810c <HAL_GPIO_Init+0x1ec>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a49      	ldr	r2, [pc, #292]	@ (8008218 <HAL_GPIO_Init+0x2f8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d007      	beq.n	8008108 <HAL_GPIO_Init+0x1e8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a48      	ldr	r2, [pc, #288]	@ (800821c <HAL_GPIO_Init+0x2fc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d101      	bne.n	8008104 <HAL_GPIO_Init+0x1e4>
 8008100:	2305      	movs	r3, #5
 8008102:	e00a      	b.n	800811a <HAL_GPIO_Init+0x1fa>
 8008104:	2306      	movs	r3, #6
 8008106:	e008      	b.n	800811a <HAL_GPIO_Init+0x1fa>
 8008108:	2304      	movs	r3, #4
 800810a:	e006      	b.n	800811a <HAL_GPIO_Init+0x1fa>
 800810c:	2303      	movs	r3, #3
 800810e:	e004      	b.n	800811a <HAL_GPIO_Init+0x1fa>
 8008110:	2302      	movs	r3, #2
 8008112:	e002      	b.n	800811a <HAL_GPIO_Init+0x1fa>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <HAL_GPIO_Init+0x1fa>
 8008118:	2300      	movs	r3, #0
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	f002 0203 	and.w	r2, r2, #3
 8008120:	0092      	lsls	r2, r2, #2
 8008122:	4093      	lsls	r3, r2
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800812a:	4937      	ldr	r1, [pc, #220]	@ (8008208 <HAL_GPIO_Init+0x2e8>)
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	089b      	lsrs	r3, r3, #2
 8008130:	3302      	adds	r3, #2
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008138:	4b39      	ldr	r3, [pc, #228]	@ (8008220 <HAL_GPIO_Init+0x300>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	43db      	mvns	r3, r3
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	4013      	ands	r3, r2
 8008146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800815c:	4a30      	ldr	r2, [pc, #192]	@ (8008220 <HAL_GPIO_Init+0x300>)
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008162:	4b2f      	ldr	r3, [pc, #188]	@ (8008220 <HAL_GPIO_Init+0x300>)
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	43db      	mvns	r3, r3
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	4013      	ands	r3, r2
 8008170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008186:	4a26      	ldr	r2, [pc, #152]	@ (8008220 <HAL_GPIO_Init+0x300>)
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800818c:	4b24      	ldr	r3, [pc, #144]	@ (8008220 <HAL_GPIO_Init+0x300>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	43db      	mvns	r3, r3
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4013      	ands	r3, r2
 800819a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008220 <HAL_GPIO_Init+0x300>)
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80081b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <HAL_GPIO_Init+0x300>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	43db      	mvns	r3, r3
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	4013      	ands	r3, r2
 80081c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80081da:	4a11      	ldr	r2, [pc, #68]	@ (8008220 <HAL_GPIO_Init+0x300>)
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	3301      	adds	r3, #1
 80081e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	fa22 f303 	lsr.w	r3, r2, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f47f ae9d 	bne.w	8007f30 <HAL_GPIO_Init+0x10>
  }
}
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40021000 	.word	0x40021000
 8008208:	40010000 	.word	0x40010000
 800820c:	48000400 	.word	0x48000400
 8008210:	48000800 	.word	0x48000800
 8008214:	48000c00 	.word	0x48000c00
 8008218:	48001000 	.word	0x48001000
 800821c:	48001400 	.word	0x48001400
 8008220:	40010400 	.word	0x40010400

08008224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	887b      	ldrh	r3, [r7, #2]
 8008236:	4013      	ands	r3, r2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800823c:	2301      	movs	r3, #1
 800823e:	73fb      	strb	r3, [r7, #15]
 8008240:	e001      	b.n	8008246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008246:	7bfb      	ldrb	r3, [r7, #15]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	807b      	strh	r3, [r7, #2]
 8008260:	4613      	mov	r3, r2
 8008262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008264:	787b      	ldrb	r3, [r7, #1]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800826a:	887a      	ldrh	r2, [r7, #2]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008270:	e002      	b.n	8008278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008272:	887a      	ldrh	r2, [r7, #2]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008296:	887a      	ldrh	r2, [r7, #2]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4013      	ands	r3, r2
 800829c:	041a      	lsls	r2, r3, #16
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	43d9      	mvns	r1, r3
 80082a2:	887b      	ldrh	r3, [r7, #2]
 80082a4:	400b      	ands	r3, r1
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	619a      	str	r2, [r3, #24]
}
 80082ac:	bf00      	nop
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80082c2:	4b08      	ldr	r3, [pc, #32]	@ (80082e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082c4:	695a      	ldr	r2, [r3, #20]
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	4013      	ands	r3, r2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d006      	beq.n	80082dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80082ce:	4a05      	ldr	r2, [pc, #20]	@ (80082e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fa fc20 	bl	8002b1c <HAL_GPIO_EXTI_Callback>
  }
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40010400 	.word	0x40010400

080082e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e08d      	b.n	8008416 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7fa fa50 	bl	80027b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2224      	movs	r2, #36	@ 0x24
 8008318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0201 	bic.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008338:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008348:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d107      	bne.n	8008362 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800835e:	609a      	str	r2, [r3, #8]
 8008360:	e006      	b.n	8008370 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800836e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d108      	bne.n	800838a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	e007      	b.n	800839a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6812      	ldr	r2, [r2, #0]
 80083a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80083a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	69d9      	ldr	r1, [r3, #28]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1a      	ldr	r2, [r3, #32]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0201 	orr.w	r2, r2, #1
 80083f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af02      	add	r7, sp, #8
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	4608      	mov	r0, r1
 800842a:	4611      	mov	r1, r2
 800842c:	461a      	mov	r2, r3
 800842e:	4603      	mov	r3, r0
 8008430:	817b      	strh	r3, [r7, #10]
 8008432:	460b      	mov	r3, r1
 8008434:	813b      	strh	r3, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b20      	cmp	r3, #32
 8008444:	f040 80f9 	bne.w	800863a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <HAL_I2C_Mem_Write+0x34>
 800844e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d105      	bne.n	8008460 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800845a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e0ed      	b.n	800863c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008466:	2b01      	cmp	r3, #1
 8008468:	d101      	bne.n	800846e <HAL_I2C_Mem_Write+0x4e>
 800846a:	2302      	movs	r3, #2
 800846c:	e0e6      	b.n	800863c <HAL_I2C_Mem_Write+0x21c>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008476:	f7fd fc51 	bl	8005d1c <HAL_GetTick>
 800847a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2319      	movs	r3, #25
 8008482:	2201      	movs	r2, #1
 8008484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fac3 	bl	8008a14 <I2C_WaitOnFlagUntilTimeout>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e0d1      	b.n	800863c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2221      	movs	r2, #33	@ 0x21
 800849c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2240      	movs	r2, #64	@ 0x40
 80084a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a3a      	ldr	r2, [r7, #32]
 80084b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80084b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084c0:	88f8      	ldrh	r0, [r7, #6]
 80084c2:	893a      	ldrh	r2, [r7, #8]
 80084c4:	8979      	ldrh	r1, [r7, #10]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	4603      	mov	r3, r0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f9d3 	bl	800887c <I2C_RequestMemoryWrite>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0a9      	b.n	800863c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2bff      	cmp	r3, #255	@ 0xff
 80084f0:	d90e      	bls.n	8008510 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	22ff      	movs	r2, #255	@ 0xff
 80084f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	8979      	ldrh	r1, [r7, #10]
 8008500:	2300      	movs	r3, #0
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fc47 	bl	8008d9c <I2C_TransferConfig>
 800850e:	e00f      	b.n	8008530 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800851e:	b2da      	uxtb	r2, r3
 8008520:	8979      	ldrh	r1, [r7, #10]
 8008522:	2300      	movs	r3, #0
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fc36 	bl	8008d9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fac6 	bl	8008ac6 <I2C_WaitOnTXISFlagUntilTimeout>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e07b      	b.n	800863c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008548:	781a      	ldrb	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800855e:	b29b      	uxth	r3, r3
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d034      	beq.n	80085e8 <HAL_I2C_Mem_Write+0x1c8>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008582:	2b00      	cmp	r3, #0
 8008584:	d130      	bne.n	80085e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858c:	2200      	movs	r2, #0
 800858e:	2180      	movs	r1, #128	@ 0x80
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fa3f 	bl	8008a14 <I2C_WaitOnFlagUntilTimeout>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e04d      	b.n	800863c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2bff      	cmp	r3, #255	@ 0xff
 80085a8:	d90e      	bls.n	80085c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	22ff      	movs	r2, #255	@ 0xff
 80085ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	8979      	ldrh	r1, [r7, #10]
 80085b8:	2300      	movs	r3, #0
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fbeb 	bl	8008d9c <I2C_TransferConfig>
 80085c6:	e00f      	b.n	80085e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	8979      	ldrh	r1, [r7, #10]
 80085da:	2300      	movs	r3, #0
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 fbda 	bl	8008d9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d19e      	bne.n	8008530 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 faac 	bl	8008b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e01a      	b.n	800863c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2220      	movs	r2, #32
 800860c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6859      	ldr	r1, [r3, #4]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	4b0a      	ldr	r3, [pc, #40]	@ (8008644 <HAL_I2C_Mem_Write+0x224>)
 800861a:	400b      	ands	r3, r1
 800861c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2220      	movs	r2, #32
 8008622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	e000      	b.n	800863c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800863a:	2302      	movs	r3, #2
  }
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	fe00e800 	.word	0xfe00e800

08008648 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af02      	add	r7, sp, #8
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	461a      	mov	r2, r3
 8008656:	4603      	mov	r3, r0
 8008658:	817b      	strh	r3, [r7, #10]
 800865a:	460b      	mov	r3, r1
 800865c:	813b      	strh	r3, [r7, #8]
 800865e:	4613      	mov	r3, r2
 8008660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b20      	cmp	r3, #32
 800866c:	f040 80fd 	bne.w	800886a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_I2C_Mem_Read+0x34>
 8008676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008678:	2b00      	cmp	r3, #0
 800867a:	d105      	bne.n	8008688 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008682:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e0f1      	b.n	800886c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <HAL_I2C_Mem_Read+0x4e>
 8008692:	2302      	movs	r3, #2
 8008694:	e0ea      	b.n	800886c <HAL_I2C_Mem_Read+0x224>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800869e:	f7fd fb3d 	bl	8005d1c <HAL_GetTick>
 80086a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	2319      	movs	r3, #25
 80086aa:	2201      	movs	r2, #1
 80086ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 f9af 	bl	8008a14 <I2C_WaitOnFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e0d5      	b.n	800886c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2222      	movs	r2, #34	@ 0x22
 80086c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2240      	movs	r2, #64	@ 0x40
 80086cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a3a      	ldr	r2, [r7, #32]
 80086da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80086e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086e8:	88f8      	ldrh	r0, [r7, #6]
 80086ea:	893a      	ldrh	r2, [r7, #8]
 80086ec:	8979      	ldrh	r1, [r7, #10]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4603      	mov	r3, r0
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f913 	bl	8008924 <I2C_RequestMemoryRead>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e0ad      	b.n	800886c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008714:	b29b      	uxth	r3, r3
 8008716:	2bff      	cmp	r3, #255	@ 0xff
 8008718:	d90e      	bls.n	8008738 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	22ff      	movs	r2, #255	@ 0xff
 800871e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008724:	b2da      	uxtb	r2, r3
 8008726:	8979      	ldrh	r1, [r7, #10]
 8008728:	4b52      	ldr	r3, [pc, #328]	@ (8008874 <HAL_I2C_Mem_Read+0x22c>)
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 fb33 	bl	8008d9c <I2C_TransferConfig>
 8008736:	e00f      	b.n	8008758 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008746:	b2da      	uxtb	r2, r3
 8008748:	8979      	ldrh	r1, [r7, #10]
 800874a:	4b4a      	ldr	r3, [pc, #296]	@ (8008874 <HAL_I2C_Mem_Read+0x22c>)
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 fb22 	bl	8008d9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	2200      	movs	r2, #0
 8008760:	2104      	movs	r1, #4
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 f956 	bl	8008a14 <I2C_WaitOnFlagUntilTimeout>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e07c      	b.n	800886c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800878e:	3b01      	subs	r3, #1
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800879a:	b29b      	uxth	r3, r3
 800879c:	3b01      	subs	r3, #1
 800879e:	b29a      	uxth	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d034      	beq.n	8008818 <HAL_I2C_Mem_Read+0x1d0>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d130      	bne.n	8008818 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	2200      	movs	r2, #0
 80087be:	2180      	movs	r1, #128	@ 0x80
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f927 	bl	8008a14 <I2C_WaitOnFlagUntilTimeout>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e04d      	b.n	800886c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2bff      	cmp	r3, #255	@ 0xff
 80087d8:	d90e      	bls.n	80087f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	22ff      	movs	r2, #255	@ 0xff
 80087de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	8979      	ldrh	r1, [r7, #10]
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fad3 	bl	8008d9c <I2C_TransferConfig>
 80087f6:	e00f      	b.n	8008818 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008806:	b2da      	uxtb	r2, r3
 8008808:	8979      	ldrh	r1, [r7, #10]
 800880a:	2300      	movs	r3, #0
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 fac2 	bl	8008d9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800881c:	b29b      	uxth	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d19a      	bne.n	8008758 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 f994 	bl	8008b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e01a      	b.n	800886c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2220      	movs	r2, #32
 800883c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6859      	ldr	r1, [r3, #4]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	4b0b      	ldr	r3, [pc, #44]	@ (8008878 <HAL_I2C_Mem_Read+0x230>)
 800884a:	400b      	ands	r3, r1
 800884c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2220      	movs	r2, #32
 8008852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	e000      	b.n	800886c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800886a:	2302      	movs	r3, #2
  }
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	80002400 	.word	0x80002400
 8008878:	fe00e800 	.word	0xfe00e800

0800887c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af02      	add	r7, sp, #8
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	461a      	mov	r2, r3
 800888a:	4603      	mov	r3, r0
 800888c:	817b      	strh	r3, [r7, #10]
 800888e:	460b      	mov	r3, r1
 8008890:	813b      	strh	r3, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	b2da      	uxtb	r2, r3
 800889a:	8979      	ldrh	r1, [r7, #10]
 800889c:	4b20      	ldr	r3, [pc, #128]	@ (8008920 <I2C_RequestMemoryWrite+0xa4>)
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 fa79 	bl	8008d9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	69b9      	ldr	r1, [r7, #24]
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 f909 	bl	8008ac6 <I2C_WaitOnTXISFlagUntilTimeout>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e02c      	b.n	8008918 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d105      	bne.n	80088d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088c4:	893b      	ldrh	r3, [r7, #8]
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80088ce:	e015      	b.n	80088fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80088d0:	893b      	ldrh	r3, [r7, #8]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	69b9      	ldr	r1, [r7, #24]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f8ef 	bl	8008ac6 <I2C_WaitOnTXISFlagUntilTimeout>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e012      	b.n	8008918 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088f2:	893b      	ldrh	r3, [r7, #8]
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2200      	movs	r2, #0
 8008904:	2180      	movs	r1, #128	@ 0x80
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 f884 	bl	8008a14 <I2C_WaitOnFlagUntilTimeout>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e000      	b.n	8008918 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	80002000 	.word	0x80002000

08008924 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af02      	add	r7, sp, #8
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	461a      	mov	r2, r3
 8008932:	4603      	mov	r3, r0
 8008934:	817b      	strh	r3, [r7, #10]
 8008936:	460b      	mov	r3, r1
 8008938:	813b      	strh	r3, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800893e:	88fb      	ldrh	r3, [r7, #6]
 8008940:	b2da      	uxtb	r2, r3
 8008942:	8979      	ldrh	r1, [r7, #10]
 8008944:	4b20      	ldr	r3, [pc, #128]	@ (80089c8 <I2C_RequestMemoryRead+0xa4>)
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	2300      	movs	r3, #0
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 fa26 	bl	8008d9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	69b9      	ldr	r1, [r7, #24]
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 f8b6 	bl	8008ac6 <I2C_WaitOnTXISFlagUntilTimeout>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e02c      	b.n	80089be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008964:	88fb      	ldrh	r3, [r7, #6]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d105      	bne.n	8008976 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800896a:	893b      	ldrh	r3, [r7, #8]
 800896c:	b2da      	uxtb	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	629a      	str	r2, [r3, #40]	@ 0x28
 8008974:	e015      	b.n	80089a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008976:	893b      	ldrh	r3, [r7, #8]
 8008978:	0a1b      	lsrs	r3, r3, #8
 800897a:	b29b      	uxth	r3, r3
 800897c:	b2da      	uxtb	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	69b9      	ldr	r1, [r7, #24]
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f89c 	bl	8008ac6 <I2C_WaitOnTXISFlagUntilTimeout>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e012      	b.n	80089be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008998:	893b      	ldrh	r3, [r7, #8]
 800899a:	b2da      	uxtb	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2200      	movs	r2, #0
 80089aa:	2140      	movs	r1, #64	@ 0x40
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f831 	bl	8008a14 <I2C_WaitOnFlagUntilTimeout>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	80002000 	.word	0x80002000

080089cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d103      	bne.n	80089ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d007      	beq.n	8008a08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699a      	ldr	r2, [r3, #24]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	619a      	str	r2, [r3, #24]
  }
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	4613      	mov	r3, r2
 8008a22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a24:	e03b      	b.n	8008a9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 f8d6 	bl	8008bdc <I2C_IsErrorOccurred>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e041      	b.n	8008abe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d02d      	beq.n	8008a9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a42:	f7fd f96b 	bl	8005d1c <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d302      	bcc.n	8008a58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d122      	bne.n	8008a9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	4013      	ands	r3, r2
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	461a      	mov	r2, r3
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d113      	bne.n	8008a9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7a:	f043 0220 	orr.w	r2, r3, #32
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e00f      	b.n	8008abe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	699a      	ldr	r2, [r3, #24]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	bf0c      	ite	eq
 8008aae:	2301      	moveq	r3, #1
 8008ab0:	2300      	movne	r3, #0
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d0b4      	beq.n	8008a26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ad2:	e033      	b.n	8008b3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f87f 	bl	8008bdc <I2C_IsErrorOccurred>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e031      	b.n	8008b4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aee:	d025      	beq.n	8008b3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af0:	f7fd f914 	bl	8005d1c <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d11a      	bne.n	8008b3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d013      	beq.n	8008b3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b18:	f043 0220 	orr.w	r2, r3, #32
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e007      	b.n	8008b4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d1c4      	bne.n	8008ad4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b60:	e02f      	b.n	8008bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f838 	bl	8008bdc <I2C_IsErrorOccurred>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e02d      	b.n	8008bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b76:	f7fd f8d1 	bl	8005d1c <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d302      	bcc.n	8008b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d11a      	bne.n	8008bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d013      	beq.n	8008bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b9e:	f043 0220 	orr.w	r2, r3, #32
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e007      	b.n	8008bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d1c8      	bne.n	8008b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	@ 0x28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	f003 0310 	and.w	r3, r3, #16
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d068      	beq.n	8008cda <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2210      	movs	r2, #16
 8008c0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c10:	e049      	b.n	8008ca6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c18:	d045      	beq.n	8008ca6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c1a:	f7fd f87f 	bl	8005d1c <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d302      	bcc.n	8008c30 <I2C_IsErrorOccurred+0x54>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d13a      	bne.n	8008ca6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c52:	d121      	bne.n	8008c98 <I2C_IsErrorOccurred+0xbc>
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c5a:	d01d      	beq.n	8008c98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008c5c:	7cfb      	ldrb	r3, [r7, #19]
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d01a      	beq.n	8008c98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008c72:	f7fd f853 	bl	8005d1c <HAL_GetTick>
 8008c76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c78:	e00e      	b.n	8008c98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008c7a:	f7fd f84f 	bl	8005d1c <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b19      	cmp	r3, #25
 8008c86:	d907      	bls.n	8008c98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	f043 0320 	orr.w	r3, r3, #32
 8008c8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008c96:	e006      	b.n	8008ca6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	d1e9      	bne.n	8008c7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d003      	beq.n	8008cbc <I2C_IsErrorOccurred+0xe0>
 8008cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d0aa      	beq.n	8008c12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d103      	bne.n	8008ccc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	f043 0304 	orr.w	r3, r3, #4
 8008cd2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	f043 0301 	orr.w	r3, r3, #1
 8008cf2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00b      	beq.n	8008d26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	f043 0308 	orr.w	r3, r3, #8
 8008d14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00b      	beq.n	8008d48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	f043 0302 	orr.w	r3, r3, #2
 8008d36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01c      	beq.n	8008d8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fe3b 	bl	80089cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6859      	ldr	r1, [r3, #4]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4b0d      	ldr	r3, [pc, #52]	@ (8008d98 <I2C_IsErrorOccurred+0x1bc>)
 8008d62:	400b      	ands	r3, r1
 8008d64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2220      	movs	r2, #32
 8008d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3728      	adds	r7, #40	@ 0x28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	fe00e800 	.word	0xfe00e800

08008d9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	607b      	str	r3, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	817b      	strh	r3, [r7, #10]
 8008daa:	4613      	mov	r3, r2
 8008dac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008dae:	897b      	ldrh	r3, [r7, #10]
 8008db0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008db4:	7a7b      	ldrb	r3, [r7, #9]
 8008db6:	041b      	lsls	r3, r3, #16
 8008db8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008dbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	0d5b      	lsrs	r3, r3, #21
 8008dd6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008dda:	4b08      	ldr	r3, [pc, #32]	@ (8008dfc <I2C_TransferConfig+0x60>)
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	43db      	mvns	r3, r3
 8008de0:	ea02 0103 	and.w	r1, r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	03ff63ff 	.word	0x03ff63ff

08008e00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d138      	bne.n	8008e88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e032      	b.n	8008e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2224      	movs	r2, #36	@ 0x24
 8008e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0201 	bic.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0201 	orr.w	r2, r2, #1
 8008e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2220      	movs	r2, #32
 8008e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	e000      	b.n	8008e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e88:	2302      	movs	r3, #2
  }
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b085      	sub	sp, #20
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b20      	cmp	r3, #32
 8008eaa:	d139      	bne.n	8008f20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e033      	b.n	8008f22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2224      	movs	r2, #36	@ 0x24
 8008ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 0201 	bic.w	r2, r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008ee8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0201 	orr.w	r2, r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e000      	b.n	8008f22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f20:	2302      	movs	r3, #2
  }
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
	...

08008f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d141      	bne.n	8008fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f4a:	d131      	bne.n	8008fb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f4c:	4b47      	ldr	r3, [pc, #284]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f52:	4a46      	ldr	r2, [pc, #280]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f5c:	4b43      	ldr	r3, [pc, #268]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f64:	4a41      	ldr	r2, [pc, #260]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f6c:	4b40      	ldr	r3, [pc, #256]	@ (8009070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2232      	movs	r2, #50	@ 0x32
 8008f72:	fb02 f303 	mul.w	r3, r2, r3
 8008f76:	4a3f      	ldr	r2, [pc, #252]	@ (8009074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f78:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7c:	0c9b      	lsrs	r3, r3, #18
 8008f7e:	3301      	adds	r3, #1
 8008f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f82:	e002      	b.n	8008f8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f8a:	4b38      	ldr	r3, [pc, #224]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f96:	d102      	bne.n	8008f9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f2      	bne.n	8008f84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f9e:	4b33      	ldr	r3, [pc, #204]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008faa:	d158      	bne.n	800905e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e057      	b.n	8009060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008fc0:	e04d      	b.n	800905e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc8:	d141      	bne.n	800904e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008fca:	4b28      	ldr	r3, [pc, #160]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fd6:	d131      	bne.n	800903c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fd8:	4b24      	ldr	r3, [pc, #144]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fde:	4a23      	ldr	r2, [pc, #140]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fe8:	4b20      	ldr	r3, [pc, #128]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8009070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2232      	movs	r2, #50	@ 0x32
 8008ffe:	fb02 f303 	mul.w	r3, r2, r3
 8009002:	4a1c      	ldr	r2, [pc, #112]	@ (8009074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009004:	fba2 2303 	umull	r2, r3, r2, r3
 8009008:	0c9b      	lsrs	r3, r3, #18
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800900e:	e002      	b.n	8009016 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3b01      	subs	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009016:	4b15      	ldr	r3, [pc, #84]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800901e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009022:	d102      	bne.n	800902a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f2      	bne.n	8009010 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800902a:	4b10      	ldr	r3, [pc, #64]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009036:	d112      	bne.n	800905e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e011      	b.n	8009060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800903c:	4b0b      	ldr	r3, [pc, #44]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800903e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009042:	4a0a      	ldr	r2, [pc, #40]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800904c:	e007      	b.n	800905e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800904e:	4b07      	ldr	r3, [pc, #28]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009056:	4a05      	ldr	r2, [pc, #20]	@ (800906c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009058:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800905c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	40007000 	.word	0x40007000
 8009070:	20000024 	.word	0x20000024
 8009074:	431bde83 	.word	0x431bde83

08009078 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800907c:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	4a04      	ldr	r2, [pc, #16]	@ (8009094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009086:	6093      	str	r3, [r2, #8]
}
 8009088:	bf00      	nop
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	40007000 	.word	0x40007000

08009098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e2fe      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d075      	beq.n	80091a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090b6:	4b97      	ldr	r3, [pc, #604]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f003 030c 	and.w	r3, r3, #12
 80090be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090c0:	4b94      	ldr	r3, [pc, #592]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b0c      	cmp	r3, #12
 80090ce:	d102      	bne.n	80090d6 <HAL_RCC_OscConfig+0x3e>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d002      	beq.n	80090dc <HAL_RCC_OscConfig+0x44>
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d10b      	bne.n	80090f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090dc:	4b8d      	ldr	r3, [pc, #564]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d05b      	beq.n	80091a0 <HAL_RCC_OscConfig+0x108>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d157      	bne.n	80091a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e2d9      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090fc:	d106      	bne.n	800910c <HAL_RCC_OscConfig+0x74>
 80090fe:	4b85      	ldr	r3, [pc, #532]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a84      	ldr	r2, [pc, #528]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	e01d      	b.n	8009148 <HAL_RCC_OscConfig+0xb0>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009114:	d10c      	bne.n	8009130 <HAL_RCC_OscConfig+0x98>
 8009116:	4b7f      	ldr	r3, [pc, #508]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a7e      	ldr	r2, [pc, #504]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 800911c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	4b7c      	ldr	r3, [pc, #496]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a7b      	ldr	r2, [pc, #492]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	e00b      	b.n	8009148 <HAL_RCC_OscConfig+0xb0>
 8009130:	4b78      	ldr	r3, [pc, #480]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a77      	ldr	r2, [pc, #476]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	4b75      	ldr	r3, [pc, #468]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a74      	ldr	r2, [pc, #464]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d013      	beq.n	8009178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009150:	f7fc fde4 	bl	8005d1c <HAL_GetTick>
 8009154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009156:	e008      	b.n	800916a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009158:	f7fc fde0 	bl	8005d1c <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b64      	cmp	r3, #100	@ 0x64
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e29e      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800916a:	4b6a      	ldr	r3, [pc, #424]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0f0      	beq.n	8009158 <HAL_RCC_OscConfig+0xc0>
 8009176:	e014      	b.n	80091a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009178:	f7fc fdd0 	bl	8005d1c <HAL_GetTick>
 800917c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800917e:	e008      	b.n	8009192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009180:	f7fc fdcc 	bl	8005d1c <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b64      	cmp	r3, #100	@ 0x64
 800918c:	d901      	bls.n	8009192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e28a      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009192:	4b60      	ldr	r3, [pc, #384]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1f0      	bne.n	8009180 <HAL_RCC_OscConfig+0xe8>
 800919e:	e000      	b.n	80091a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d075      	beq.n	800929a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091ae:	4b59      	ldr	r3, [pc, #356]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f003 030c 	and.w	r3, r3, #12
 80091b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80091b8:	4b56      	ldr	r3, [pc, #344]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b0c      	cmp	r3, #12
 80091c6:	d102      	bne.n	80091ce <HAL_RCC_OscConfig+0x136>
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d002      	beq.n	80091d4 <HAL_RCC_OscConfig+0x13c>
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	d11f      	bne.n	8009214 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091d4:	4b4f      	ldr	r3, [pc, #316]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <HAL_RCC_OscConfig+0x154>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e25d      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091ec:	4b49      	ldr	r3, [pc, #292]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	061b      	lsls	r3, r3, #24
 80091fa:	4946      	ldr	r1, [pc, #280]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009200:	4b45      	ldr	r3, [pc, #276]	@ (8009318 <HAL_RCC_OscConfig+0x280>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f7fa feb3 	bl	8003f70 <HAL_InitTick>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d043      	beq.n	8009298 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e249      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d023      	beq.n	8009264 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800921c:	4b3d      	ldr	r3, [pc, #244]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a3c      	ldr	r2, [pc, #240]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009228:	f7fc fd78 	bl	8005d1c <HAL_GetTick>
 800922c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800922e:	e008      	b.n	8009242 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009230:	f7fc fd74 	bl	8005d1c <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e232      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009242:	4b34      	ldr	r3, [pc, #208]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0f0      	beq.n	8009230 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800924e:	4b31      	ldr	r3, [pc, #196]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	061b      	lsls	r3, r3, #24
 800925c:	492d      	ldr	r1, [pc, #180]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 800925e:	4313      	orrs	r3, r2
 8009260:	604b      	str	r3, [r1, #4]
 8009262:	e01a      	b.n	800929a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009264:	4b2b      	ldr	r3, [pc, #172]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a2a      	ldr	r2, [pc, #168]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 800926a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800926e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009270:	f7fc fd54 	bl	8005d1c <HAL_GetTick>
 8009274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009276:	e008      	b.n	800928a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009278:	f7fc fd50 	bl	8005d1c <HAL_GetTick>
 800927c:	4602      	mov	r2, r0
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	2b02      	cmp	r3, #2
 8009284:	d901      	bls.n	800928a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e20e      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800928a:	4b22      	ldr	r3, [pc, #136]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1f0      	bne.n	8009278 <HAL_RCC_OscConfig+0x1e0>
 8009296:	e000      	b.n	800929a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d041      	beq.n	800932a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01c      	beq.n	80092e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092ae:	4b19      	ldr	r3, [pc, #100]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80092b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092b4:	4a17      	ldr	r2, [pc, #92]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80092b6:	f043 0301 	orr.w	r3, r3, #1
 80092ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092be:	f7fc fd2d 	bl	8005d1c <HAL_GetTick>
 80092c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092c4:	e008      	b.n	80092d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092c6:	f7fc fd29 	bl	8005d1c <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d901      	bls.n	80092d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e1e7      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80092da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0ef      	beq.n	80092c6 <HAL_RCC_OscConfig+0x22e>
 80092e6:	e020      	b.n	800932a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80092ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092ee:	4a09      	ldr	r2, [pc, #36]	@ (8009314 <HAL_RCC_OscConfig+0x27c>)
 80092f0:	f023 0301 	bic.w	r3, r3, #1
 80092f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f8:	f7fc fd10 	bl	8005d1c <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092fe:	e00d      	b.n	800931c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009300:	f7fc fd0c 	bl	8005d1c <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b02      	cmp	r3, #2
 800930c:	d906      	bls.n	800931c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e1ca      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
 8009312:	bf00      	nop
 8009314:	40021000 	.word	0x40021000
 8009318:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800931c:	4b8c      	ldr	r3, [pc, #560]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 800931e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1ea      	bne.n	8009300 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80a6 	beq.w	8009484 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009338:	2300      	movs	r3, #0
 800933a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800933c:	4b84      	ldr	r3, [pc, #528]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 800933e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <HAL_RCC_OscConfig+0x2b4>
 8009348:	2301      	movs	r3, #1
 800934a:	e000      	b.n	800934e <HAL_RCC_OscConfig+0x2b6>
 800934c:	2300      	movs	r3, #0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00d      	beq.n	800936e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009352:	4b7f      	ldr	r3, [pc, #508]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009356:	4a7e      	ldr	r2, [pc, #504]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800935c:	6593      	str	r3, [r2, #88]	@ 0x58
 800935e:	4b7c      	ldr	r3, [pc, #496]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800936a:	2301      	movs	r3, #1
 800936c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800936e:	4b79      	ldr	r3, [pc, #484]	@ (8009554 <HAL_RCC_OscConfig+0x4bc>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009376:	2b00      	cmp	r3, #0
 8009378:	d118      	bne.n	80093ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800937a:	4b76      	ldr	r3, [pc, #472]	@ (8009554 <HAL_RCC_OscConfig+0x4bc>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a75      	ldr	r2, [pc, #468]	@ (8009554 <HAL_RCC_OscConfig+0x4bc>)
 8009380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009386:	f7fc fcc9 	bl	8005d1c <HAL_GetTick>
 800938a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800938c:	e008      	b.n	80093a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800938e:	f7fc fcc5 	bl	8005d1c <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	2b02      	cmp	r3, #2
 800939a:	d901      	bls.n	80093a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e183      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093a0:	4b6c      	ldr	r3, [pc, #432]	@ (8009554 <HAL_RCC_OscConfig+0x4bc>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0f0      	beq.n	800938e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d108      	bne.n	80093c6 <HAL_RCC_OscConfig+0x32e>
 80093b4:	4b66      	ldr	r3, [pc, #408]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ba:	4a65      	ldr	r2, [pc, #404]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80093bc:	f043 0301 	orr.w	r3, r3, #1
 80093c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80093c4:	e024      	b.n	8009410 <HAL_RCC_OscConfig+0x378>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	2b05      	cmp	r3, #5
 80093cc:	d110      	bne.n	80093f0 <HAL_RCC_OscConfig+0x358>
 80093ce:	4b60      	ldr	r3, [pc, #384]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80093d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d4:	4a5e      	ldr	r2, [pc, #376]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80093d6:	f043 0304 	orr.w	r3, r3, #4
 80093da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80093de:	4b5c      	ldr	r3, [pc, #368]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80093e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e4:	4a5a      	ldr	r2, [pc, #360]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80093e6:	f043 0301 	orr.w	r3, r3, #1
 80093ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80093ee:	e00f      	b.n	8009410 <HAL_RCC_OscConfig+0x378>
 80093f0:	4b57      	ldr	r3, [pc, #348]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80093f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f6:	4a56      	ldr	r2, [pc, #344]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80093f8:	f023 0301 	bic.w	r3, r3, #1
 80093fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009400:	4b53      	ldr	r3, [pc, #332]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009406:	4a52      	ldr	r2, [pc, #328]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009408:	f023 0304 	bic.w	r3, r3, #4
 800940c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d016      	beq.n	8009446 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009418:	f7fc fc80 	bl	8005d1c <HAL_GetTick>
 800941c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800941e:	e00a      	b.n	8009436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009420:	f7fc fc7c 	bl	8005d1c <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800942e:	4293      	cmp	r3, r2
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e138      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009436:	4b46      	ldr	r3, [pc, #280]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0ed      	beq.n	8009420 <HAL_RCC_OscConfig+0x388>
 8009444:	e015      	b.n	8009472 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009446:	f7fc fc69 	bl	8005d1c <HAL_GetTick>
 800944a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800944c:	e00a      	b.n	8009464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800944e:	f7fc fc65 	bl	8005d1c <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800945c:	4293      	cmp	r3, r2
 800945e:	d901      	bls.n	8009464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e121      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009464:	4b3a      	ldr	r3, [pc, #232]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1ed      	bne.n	800944e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009472:	7ffb      	ldrb	r3, [r7, #31]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d105      	bne.n	8009484 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009478:	4b35      	ldr	r3, [pc, #212]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 800947a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800947c:	4a34      	ldr	r2, [pc, #208]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 800947e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009482:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0320 	and.w	r3, r3, #32
 800948c:	2b00      	cmp	r3, #0
 800948e:	d03c      	beq.n	800950a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01c      	beq.n	80094d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009498:	4b2d      	ldr	r3, [pc, #180]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 800949a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800949e:	4a2c      	ldr	r2, [pc, #176]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80094a0:	f043 0301 	orr.w	r3, r3, #1
 80094a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094a8:	f7fc fc38 	bl	8005d1c <HAL_GetTick>
 80094ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094ae:	e008      	b.n	80094c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094b0:	f7fc fc34 	bl	8005d1c <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d901      	bls.n	80094c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e0f2      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094c2:	4b23      	ldr	r3, [pc, #140]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80094c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0ef      	beq.n	80094b0 <HAL_RCC_OscConfig+0x418>
 80094d0:	e01b      	b.n	800950a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80094d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80094d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094e2:	f7fc fc1b 	bl	8005d1c <HAL_GetTick>
 80094e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094e8:	e008      	b.n	80094fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094ea:	f7fc fc17 	bl	8005d1c <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d901      	bls.n	80094fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e0d5      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094fc:	4b14      	ldr	r3, [pc, #80]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 80094fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1ef      	bne.n	80094ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 80c9 	beq.w	80096a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009514:	4b0e      	ldr	r3, [pc, #56]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 030c 	and.w	r3, r3, #12
 800951c:	2b0c      	cmp	r3, #12
 800951e:	f000 8083 	beq.w	8009628 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	2b02      	cmp	r3, #2
 8009528:	d15e      	bne.n	80095e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800952a:	4b09      	ldr	r3, [pc, #36]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a08      	ldr	r2, [pc, #32]	@ (8009550 <HAL_RCC_OscConfig+0x4b8>)
 8009530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009536:	f7fc fbf1 	bl	8005d1c <HAL_GetTick>
 800953a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800953c:	e00c      	b.n	8009558 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800953e:	f7fc fbed 	bl	8005d1c <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d905      	bls.n	8009558 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e0ab      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
 8009550:	40021000 	.word	0x40021000
 8009554:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009558:	4b55      	ldr	r3, [pc, #340]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1ec      	bne.n	800953e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009564:	4b52      	ldr	r3, [pc, #328]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	4b52      	ldr	r3, [pc, #328]	@ (80096b4 <HAL_RCC_OscConfig+0x61c>)
 800956a:	4013      	ands	r3, r2
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6a11      	ldr	r1, [r2, #32]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009574:	3a01      	subs	r2, #1
 8009576:	0112      	lsls	r2, r2, #4
 8009578:	4311      	orrs	r1, r2
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800957e:	0212      	lsls	r2, r2, #8
 8009580:	4311      	orrs	r1, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009586:	0852      	lsrs	r2, r2, #1
 8009588:	3a01      	subs	r2, #1
 800958a:	0552      	lsls	r2, r2, #21
 800958c:	4311      	orrs	r1, r2
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009592:	0852      	lsrs	r2, r2, #1
 8009594:	3a01      	subs	r2, #1
 8009596:	0652      	lsls	r2, r2, #25
 8009598:	4311      	orrs	r1, r2
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800959e:	06d2      	lsls	r2, r2, #27
 80095a0:	430a      	orrs	r2, r1
 80095a2:	4943      	ldr	r1, [pc, #268]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095a8:	4b41      	ldr	r3, [pc, #260]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a40      	ldr	r2, [pc, #256]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 80095ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80095b4:	4b3e      	ldr	r3, [pc, #248]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	4a3d      	ldr	r2, [pc, #244]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 80095ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095c0:	f7fc fbac 	bl	8005d1c <HAL_GetTick>
 80095c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095c6:	e008      	b.n	80095da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095c8:	f7fc fba8 	bl	8005d1c <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d901      	bls.n	80095da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e066      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095da:	4b35      	ldr	r3, [pc, #212]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0f0      	beq.n	80095c8 <HAL_RCC_OscConfig+0x530>
 80095e6:	e05e      	b.n	80096a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095e8:	4b31      	ldr	r3, [pc, #196]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a30      	ldr	r2, [pc, #192]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 80095ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f4:	f7fc fb92 	bl	8005d1c <HAL_GetTick>
 80095f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095fa:	e008      	b.n	800960e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095fc:	f7fc fb8e 	bl	8005d1c <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	2b02      	cmp	r3, #2
 8009608:	d901      	bls.n	800960e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e04c      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800960e:	4b28      	ldr	r3, [pc, #160]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1f0      	bne.n	80095fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800961a:	4b25      	ldr	r3, [pc, #148]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	4924      	ldr	r1, [pc, #144]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 8009620:	4b25      	ldr	r3, [pc, #148]	@ (80096b8 <HAL_RCC_OscConfig+0x620>)
 8009622:	4013      	ands	r3, r2
 8009624:	60cb      	str	r3, [r1, #12]
 8009626:	e03e      	b.n	80096a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e039      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009634:	4b1e      	ldr	r3, [pc, #120]	@ (80096b0 <HAL_RCC_OscConfig+0x618>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f003 0203 	and.w	r2, r3, #3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	429a      	cmp	r2, r3
 8009646:	d12c      	bne.n	80096a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009652:	3b01      	subs	r3, #1
 8009654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009656:	429a      	cmp	r2, r3
 8009658:	d123      	bne.n	80096a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009664:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009666:	429a      	cmp	r2, r3
 8009668:	d11b      	bne.n	80096a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009674:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009676:	429a      	cmp	r2, r3
 8009678:	d113      	bne.n	80096a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009684:	085b      	lsrs	r3, r3, #1
 8009686:	3b01      	subs	r3, #1
 8009688:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800968a:	429a      	cmp	r2, r3
 800968c:	d109      	bne.n	80096a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009698:	085b      	lsrs	r3, r3, #1
 800969a:	3b01      	subs	r3, #1
 800969c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800969e:	429a      	cmp	r2, r3
 80096a0:	d001      	beq.n	80096a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e000      	b.n	80096a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3720      	adds	r7, #32
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40021000 	.word	0x40021000
 80096b4:	019f800c 	.word	0x019f800c
 80096b8:	feeefffc 	.word	0xfeeefffc

080096bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80096c6:	2300      	movs	r3, #0
 80096c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e11e      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096d4:	4b91      	ldr	r3, [pc, #580]	@ (800991c <HAL_RCC_ClockConfig+0x260>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d910      	bls.n	8009704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096e2:	4b8e      	ldr	r3, [pc, #568]	@ (800991c <HAL_RCC_ClockConfig+0x260>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f023 020f 	bic.w	r2, r3, #15
 80096ea:	498c      	ldr	r1, [pc, #560]	@ (800991c <HAL_RCC_ClockConfig+0x260>)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096f2:	4b8a      	ldr	r3, [pc, #552]	@ (800991c <HAL_RCC_ClockConfig+0x260>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d001      	beq.n	8009704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e106      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d073      	beq.n	80097f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	2b03      	cmp	r3, #3
 8009716:	d129      	bne.n	800976c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009718:	4b81      	ldr	r3, [pc, #516]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e0f4      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009728:	f000 f9ce 	bl	8009ac8 <RCC_GetSysClockFreqFromPLLSource>
 800972c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	4a7c      	ldr	r2, [pc, #496]	@ (8009924 <HAL_RCC_ClockConfig+0x268>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d93f      	bls.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009736:	4b7a      	ldr	r3, [pc, #488]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d009      	beq.n	8009756 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800974a:	2b00      	cmp	r3, #0
 800974c:	d033      	beq.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009752:	2b00      	cmp	r3, #0
 8009754:	d12f      	bne.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009756:	4b72      	ldr	r3, [pc, #456]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800975e:	4a70      	ldr	r2, [pc, #448]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009764:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009766:	2380      	movs	r3, #128	@ 0x80
 8009768:	617b      	str	r3, [r7, #20]
 800976a:	e024      	b.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d107      	bne.n	8009784 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009774:	4b6a      	ldr	r3, [pc, #424]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e0c6      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009784:	4b66      	ldr	r3, [pc, #408]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e0be      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009794:	f000 f8ce 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 8009798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	4a61      	ldr	r2, [pc, #388]	@ (8009924 <HAL_RCC_ClockConfig+0x268>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d909      	bls.n	80097b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80097a2:	4b5f      	ldr	r3, [pc, #380]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097aa:	4a5d      	ldr	r2, [pc, #372]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80097b2:	2380      	movs	r3, #128	@ 0x80
 80097b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097b6:	4b5a      	ldr	r3, [pc, #360]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f023 0203 	bic.w	r2, r3, #3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	4957      	ldr	r1, [pc, #348]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097c8:	f7fc faa8 	bl	8005d1c <HAL_GetTick>
 80097cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097ce:	e00a      	b.n	80097e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d0:	f7fc faa4 	bl	8005d1c <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097de:	4293      	cmp	r3, r2
 80097e0:	d901      	bls.n	80097e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e095      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097e6:	4b4e      	ldr	r3, [pc, #312]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 020c 	and.w	r2, r3, #12
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d1eb      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d023      	beq.n	800984c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d005      	beq.n	800981c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009810:	4b43      	ldr	r3, [pc, #268]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	4a42      	ldr	r2, [pc, #264]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800981a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b00      	cmp	r3, #0
 8009826:	d007      	beq.n	8009838 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009828:	4b3d      	ldr	r3, [pc, #244]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009830:	4a3b      	ldr	r2, [pc, #236]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009836:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009838:	4b39      	ldr	r3, [pc, #228]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	4936      	ldr	r1, [pc, #216]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009846:	4313      	orrs	r3, r2
 8009848:	608b      	str	r3, [r1, #8]
 800984a:	e008      	b.n	800985e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2b80      	cmp	r3, #128	@ 0x80
 8009850:	d105      	bne.n	800985e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009852:	4b33      	ldr	r3, [pc, #204]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	4a32      	ldr	r2, [pc, #200]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 8009858:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800985c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800985e:	4b2f      	ldr	r3, [pc, #188]	@ (800991c <HAL_RCC_ClockConfig+0x260>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d21d      	bcs.n	80098a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800986c:	4b2b      	ldr	r3, [pc, #172]	@ (800991c <HAL_RCC_ClockConfig+0x260>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f023 020f 	bic.w	r2, r3, #15
 8009874:	4929      	ldr	r1, [pc, #164]	@ (800991c <HAL_RCC_ClockConfig+0x260>)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	4313      	orrs	r3, r2
 800987a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800987c:	f7fc fa4e 	bl	8005d1c <HAL_GetTick>
 8009880:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009882:	e00a      	b.n	800989a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009884:	f7fc fa4a 	bl	8005d1c <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009892:	4293      	cmp	r3, r2
 8009894:	d901      	bls.n	800989a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e03b      	b.n	8009912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800989a:	4b20      	ldr	r3, [pc, #128]	@ (800991c <HAL_RCC_ClockConfig+0x260>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d1ed      	bne.n	8009884 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d008      	beq.n	80098c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	4917      	ldr	r1, [pc, #92]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d009      	beq.n	80098e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098d2:	4b13      	ldr	r3, [pc, #76]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	490f      	ldr	r1, [pc, #60]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098e6:	f000 f825 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 80098ea:	4602      	mov	r2, r0
 80098ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009920 <HAL_RCC_ClockConfig+0x264>)
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	091b      	lsrs	r3, r3, #4
 80098f2:	f003 030f 	and.w	r3, r3, #15
 80098f6:	490c      	ldr	r1, [pc, #48]	@ (8009928 <HAL_RCC_ClockConfig+0x26c>)
 80098f8:	5ccb      	ldrb	r3, [r1, r3]
 80098fa:	f003 031f 	and.w	r3, r3, #31
 80098fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009902:	4a0a      	ldr	r2, [pc, #40]	@ (800992c <HAL_RCC_ClockConfig+0x270>)
 8009904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009906:	4b0a      	ldr	r3, [pc, #40]	@ (8009930 <HAL_RCC_ClockConfig+0x274>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4618      	mov	r0, r3
 800990c:	f7fa fb30 	bl	8003f70 <HAL_InitTick>
 8009910:	4603      	mov	r3, r0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	40022000 	.word	0x40022000
 8009920:	40021000 	.word	0x40021000
 8009924:	04c4b400 	.word	0x04c4b400
 8009928:	0801c7cc 	.word	0x0801c7cc
 800992c:	20000024 	.word	0x20000024
 8009930:	2000002c 	.word	0x2000002c

08009934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800993a:	4b2c      	ldr	r3, [pc, #176]	@ (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f003 030c 	and.w	r3, r3, #12
 8009942:	2b04      	cmp	r3, #4
 8009944:	d102      	bne.n	800994c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009946:	4b2a      	ldr	r3, [pc, #168]	@ (80099f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	e047      	b.n	80099dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800994c:	4b27      	ldr	r3, [pc, #156]	@ (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f003 030c 	and.w	r3, r3, #12
 8009954:	2b08      	cmp	r3, #8
 8009956:	d102      	bne.n	800995e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009958:	4b25      	ldr	r3, [pc, #148]	@ (80099f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	e03e      	b.n	80099dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800995e:	4b23      	ldr	r3, [pc, #140]	@ (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f003 030c 	and.w	r3, r3, #12
 8009966:	2b0c      	cmp	r3, #12
 8009968:	d136      	bne.n	80099d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800996a:	4b20      	ldr	r3, [pc, #128]	@ (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009974:	4b1d      	ldr	r3, [pc, #116]	@ (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	091b      	lsrs	r3, r3, #4
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	3301      	adds	r3, #1
 8009980:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b03      	cmp	r3, #3
 8009986:	d10c      	bne.n	80099a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009988:	4a19      	ldr	r2, [pc, #100]	@ (80099f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009990:	4a16      	ldr	r2, [pc, #88]	@ (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009992:	68d2      	ldr	r2, [r2, #12]
 8009994:	0a12      	lsrs	r2, r2, #8
 8009996:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800999a:	fb02 f303 	mul.w	r3, r2, r3
 800999e:	617b      	str	r3, [r7, #20]
      break;
 80099a0:	e00c      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80099a2:	4a13      	ldr	r2, [pc, #76]	@ (80099f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099aa:	4a10      	ldr	r2, [pc, #64]	@ (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80099ac:	68d2      	ldr	r2, [r2, #12]
 80099ae:	0a12      	lsrs	r2, r2, #8
 80099b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099b4:	fb02 f303 	mul.w	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]
      break;
 80099ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099bc:	4b0b      	ldr	r3, [pc, #44]	@ (80099ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	0e5b      	lsrs	r3, r3, #25
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	3301      	adds	r3, #1
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	e001      	b.n	80099dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80099dc:	693b      	ldr	r3, [r7, #16]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40021000 	.word	0x40021000
 80099f0:	00f42400 	.word	0x00f42400

080099f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099f8:	4b03      	ldr	r3, [pc, #12]	@ (8009a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80099fa:	681b      	ldr	r3, [r3, #0]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	20000024 	.word	0x20000024

08009a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009a10:	f7ff fff0 	bl	80099f4 <HAL_RCC_GetHCLKFreq>
 8009a14:	4602      	mov	r2, r0
 8009a16:	4b06      	ldr	r3, [pc, #24]	@ (8009a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	0a1b      	lsrs	r3, r3, #8
 8009a1c:	f003 0307 	and.w	r3, r3, #7
 8009a20:	4904      	ldr	r1, [pc, #16]	@ (8009a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a22:	5ccb      	ldrb	r3, [r1, r3]
 8009a24:	f003 031f 	and.w	r3, r3, #31
 8009a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	40021000 	.word	0x40021000
 8009a34:	0801c7dc 	.word	0x0801c7dc

08009a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a3c:	f7ff ffda 	bl	80099f4 <HAL_RCC_GetHCLKFreq>
 8009a40:	4602      	mov	r2, r0
 8009a42:	4b06      	ldr	r3, [pc, #24]	@ (8009a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	0adb      	lsrs	r3, r3, #11
 8009a48:	f003 0307 	and.w	r3, r3, #7
 8009a4c:	4904      	ldr	r1, [pc, #16]	@ (8009a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a4e:	5ccb      	ldrb	r3, [r1, r3]
 8009a50:	f003 031f 	and.w	r3, r3, #31
 8009a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40021000 	.word	0x40021000
 8009a60:	0801c7dc 	.word	0x0801c7dc

08009a64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	220f      	movs	r2, #15
 8009a72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009a74:	4b12      	ldr	r3, [pc, #72]	@ (8009ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f003 0203 	and.w	r2, r3, #3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009a80:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009a98:	4b09      	ldr	r3, [pc, #36]	@ (8009ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	08db      	lsrs	r3, r3, #3
 8009a9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009aa6:	4b07      	ldr	r3, [pc, #28]	@ (8009ac4 <HAL_RCC_GetClockConfig+0x60>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 020f 	and.w	r2, r3, #15
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	601a      	str	r2, [r3, #0]
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	40022000 	.word	0x40022000

08009ac8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ace:	4b1e      	ldr	r3, [pc, #120]	@ (8009b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	091b      	lsrs	r3, r3, #4
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d10c      	bne.n	8009b06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009aec:	4a17      	ldr	r2, [pc, #92]	@ (8009b4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af4:	4a14      	ldr	r2, [pc, #80]	@ (8009b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009af6:	68d2      	ldr	r2, [r2, #12]
 8009af8:	0a12      	lsrs	r2, r2, #8
 8009afa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
 8009b02:	617b      	str	r3, [r7, #20]
    break;
 8009b04:	e00c      	b.n	8009b20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b06:	4a11      	ldr	r2, [pc, #68]	@ (8009b4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8009b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b10:	68d2      	ldr	r2, [r2, #12]
 8009b12:	0a12      	lsrs	r2, r2, #8
 8009b14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009b18:	fb02 f303 	mul.w	r3, r2, r3
 8009b1c:	617b      	str	r3, [r7, #20]
    break;
 8009b1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009b20:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	0e5b      	lsrs	r3, r3, #25
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009b3a:	687b      	ldr	r3, [r7, #4]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	371c      	adds	r7, #28
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	40021000 	.word	0x40021000
 8009b4c:	00f42400 	.word	0x00f42400

08009b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b58:	2300      	movs	r3, #0
 8009b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 8098 	beq.w	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b72:	4b43      	ldr	r3, [pc, #268]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10d      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b7e:	4b40      	ldr	r3, [pc, #256]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b82:	4a3f      	ldr	r2, [pc, #252]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b92:	60bb      	str	r3, [r7, #8]
 8009b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b96:	2301      	movs	r3, #1
 8009b98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a39      	ldr	r2, [pc, #228]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ba4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ba6:	f7fc f8b9 	bl	8005d1c <HAL_GetTick>
 8009baa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bac:	e009      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bae:	f7fc f8b5 	bl	8005d1c <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d902      	bls.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	74fb      	strb	r3, [r7, #19]
        break;
 8009bc0:	e005      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bc2:	4b30      	ldr	r3, [pc, #192]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0ef      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009bce:	7cfb      	ldrb	r3, [r7, #19]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d159      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d01e      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d019      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009bf0:	4b23      	ldr	r3, [pc, #140]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009bfc:	4b20      	ldr	r3, [pc, #128]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c02:	4a1f      	ldr	r2, [pc, #124]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c12:	4a1b      	ldr	r2, [pc, #108]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c1c:	4a18      	ldr	r2, [pc, #96]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d016      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2e:	f7fc f875 	bl	8005d1c <HAL_GetTick>
 8009c32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c34:	e00b      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c36:	f7fc f871 	bl	8005d1c <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d902      	bls.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	74fb      	strb	r3, [r7, #19]
            break;
 8009c4c:	e006      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0ec      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009c5c:	7cfb      	ldrb	r3, [r7, #19]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10b      	bne.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c62:	4b07      	ldr	r3, [pc, #28]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c70:	4903      	ldr	r1, [pc, #12]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009c78:	e008      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c7a:	7cfb      	ldrb	r3, [r7, #19]
 8009c7c:	74bb      	strb	r3, [r7, #18]
 8009c7e:	e005      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009c80:	40021000 	.word	0x40021000
 8009c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c88:	7cfb      	ldrb	r3, [r7, #19]
 8009c8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c8c:	7c7b      	ldrb	r3, [r7, #17]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d105      	bne.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c92:	4ba6      	ldr	r3, [pc, #664]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c96:	4aa5      	ldr	r2, [pc, #660]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009caa:	4ba0      	ldr	r3, [pc, #640]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cb0:	f023 0203 	bic.w	r2, r3, #3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	499c      	ldr	r1, [pc, #624]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00a      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ccc:	4b97      	ldr	r3, [pc, #604]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cd2:	f023 020c 	bic.w	r2, r3, #12
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	4994      	ldr	r1, [pc, #592]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0304 	and.w	r3, r3, #4
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009cee:	4b8f      	ldr	r3, [pc, #572]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	498b      	ldr	r1, [pc, #556]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0308 	and.w	r3, r3, #8
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00a      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d10:	4b86      	ldr	r3, [pc, #536]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	4983      	ldr	r1, [pc, #524]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d32:	4b7e      	ldr	r3, [pc, #504]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	497a      	ldr	r1, [pc, #488]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00a      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d54:	4b75      	ldr	r3, [pc, #468]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d5a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	4972      	ldr	r1, [pc, #456]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00a      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d76:	4b6d      	ldr	r3, [pc, #436]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d7c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	4969      	ldr	r1, [pc, #420]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00a      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d98:	4b64      	ldr	r3, [pc, #400]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	4961      	ldr	r1, [pc, #388]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00a      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009dba:	4b5c      	ldr	r3, [pc, #368]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc8:	4958      	ldr	r1, [pc, #352]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d015      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ddc:	4b53      	ldr	r3, [pc, #332]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dea:	4950      	ldr	r1, [pc, #320]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dfa:	d105      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	4a4a      	ldr	r2, [pc, #296]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e06:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d015      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009e14:	4b45      	ldr	r3, [pc, #276]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e22:	4942      	ldr	r1, [pc, #264]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e32:	d105      	bne.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e34:	4b3d      	ldr	r3, [pc, #244]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	4a3c      	ldr	r2, [pc, #240]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e3e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d015      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e4c:	4b37      	ldr	r3, [pc, #220]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e5a:	4934      	ldr	r1, [pc, #208]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e6a:	d105      	bne.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	4a2e      	ldr	r2, [pc, #184]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d015      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e84:	4b29      	ldr	r3, [pc, #164]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e92:	4926      	ldr	r1, [pc, #152]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ea2:	d105      	bne.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ea4:	4b21      	ldr	r3, [pc, #132]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	4a20      	ldr	r2, [pc, #128]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009eae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d015      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ec2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eca:	4918      	ldr	r1, [pc, #96]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eda:	d105      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009edc:	4b13      	ldr	r3, [pc, #76]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	4a12      	ldr	r2, [pc, #72]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ee6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d015      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009efa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f02:	490a      	ldr	r1, [pc, #40]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f12:	d105      	bne.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009f14:	4b05      	ldr	r3, [pc, #20]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	4a04      	ldr	r2, [pc, #16]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009f20:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	40021000 	.word	0x40021000

08009f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e09d      	b.n	800a07e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d108      	bne.n	8009f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f52:	d009      	beq.n	8009f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	61da      	str	r2, [r3, #28]
 8009f5a:	e005      	b.n	8009f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d106      	bne.n	8009f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7f9 f968 	bl	8003258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009fa8:	d902      	bls.n	8009fb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e002      	b.n	8009fb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009fbe:	d007      	beq.n	8009fd0 <HAL_SPI_Init+0xa0>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009fc8:	d002      	beq.n	8009fd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	431a      	orrs	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	431a      	orrs	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ffe:	431a      	orrs	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a008:	431a      	orrs	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a012:	ea42 0103 	orr.w	r1, r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	0c1b      	lsrs	r3, r3, #16
 800a02c:	f003 0204 	and.w	r2, r3, #4
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a034:	f003 0310 	and.w	r3, r3, #16
 800a038:	431a      	orrs	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	f003 0308 	and.w	r3, r3, #8
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a04c:	ea42 0103 	orr.w	r1, r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	69da      	ldr	r2, [r3, #28]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a06c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b08a      	sub	sp, #40	@ 0x28
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	60b9      	str	r1, [r7, #8]
 800a090:	607a      	str	r2, [r7, #4]
 800a092:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a094:	2301      	movs	r3, #1
 800a096:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a098:	f7fb fe40 	bl	8005d1c <HAL_GetTick>
 800a09c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a0a4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a0ac:	887b      	ldrh	r3, [r7, #2]
 800a0ae:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a0b0:	887b      	ldrh	r3, [r7, #2]
 800a0b2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0b4:	7ffb      	ldrb	r3, [r7, #31]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d00c      	beq.n	800a0d4 <HAL_SPI_TransmitReceive+0x4e>
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0c0:	d106      	bne.n	800a0d0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d102      	bne.n	800a0d0 <HAL_SPI_TransmitReceive+0x4a>
 800a0ca:	7ffb      	ldrb	r3, [r7, #31]
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d001      	beq.n	800a0d4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e1f3      	b.n	800a4bc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d005      	beq.n	800a0e6 <HAL_SPI_TransmitReceive+0x60>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <HAL_SPI_TransmitReceive+0x60>
 800a0e0:	887b      	ldrh	r3, [r7, #2]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e1e8      	b.n	800a4bc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d101      	bne.n	800a0f8 <HAL_SPI_TransmitReceive+0x72>
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	e1e1      	b.n	800a4bc <HAL_SPI_TransmitReceive+0x436>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d003      	beq.n	800a114 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2205      	movs	r2, #5
 800a110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	887a      	ldrh	r2, [r7, #2]
 800a124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	887a      	ldrh	r2, [r7, #2]
 800a12c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	887a      	ldrh	r2, [r7, #2]
 800a13a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	887a      	ldrh	r2, [r7, #2]
 800a140:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a156:	d802      	bhi.n	800a15e <HAL_SPI_TransmitReceive+0xd8>
 800a158:	8abb      	ldrh	r3, [r7, #20]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d908      	bls.n	800a170 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a16c:	605a      	str	r2, [r3, #4]
 800a16e:	e007      	b.n	800a180 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a17e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a18a:	2b40      	cmp	r3, #64	@ 0x40
 800a18c:	d007      	beq.n	800a19e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a19c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a1a6:	f240 8083 	bls.w	800a2b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <HAL_SPI_TransmitReceive+0x132>
 800a1b2:	8afb      	ldrh	r3, [r7, #22]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d16f      	bne.n	800a298 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1bc:	881a      	ldrh	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c8:	1c9a      	adds	r2, r3, #2
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1dc:	e05c      	b.n	800a298 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d11b      	bne.n	800a224 <HAL_SPI_TransmitReceive+0x19e>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d016      	beq.n	800a224 <HAL_SPI_TransmitReceive+0x19e>
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d113      	bne.n	800a224 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a200:	881a      	ldrh	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a20c:	1c9a      	adds	r2, r3, #2
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a220:	2300      	movs	r3, #0
 800a222:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d11c      	bne.n	800a26c <HAL_SPI_TransmitReceive+0x1e6>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a238:	b29b      	uxth	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d016      	beq.n	800a26c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a248:	b292      	uxth	r2, r2
 800a24a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a250:	1c9a      	adds	r2, r3, #2
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	3b01      	subs	r3, #1
 800a260:	b29a      	uxth	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a268:	2301      	movs	r3, #1
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a26c:	f7fb fd56 	bl	8005d1c <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a278:	429a      	cmp	r2, r3
 800a27a:	d80d      	bhi.n	800a298 <HAL_SPI_TransmitReceive+0x212>
 800a27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d009      	beq.n	800a298 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	e111      	b.n	800a4bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d19d      	bne.n	800a1de <HAL_SPI_TransmitReceive+0x158>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d197      	bne.n	800a1de <HAL_SPI_TransmitReceive+0x158>
 800a2ae:	e0e5      	b.n	800a47c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d003      	beq.n	800a2c0 <HAL_SPI_TransmitReceive+0x23a>
 800a2b8:	8afb      	ldrh	r3, [r7, #22]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	f040 80d1 	bne.w	800a462 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d912      	bls.n	800a2f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ce:	881a      	ldrh	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2da:	1c9a      	adds	r2, r3, #2
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	3b02      	subs	r3, #2
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a2ee:	e0b8      	b.n	800a462 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	330c      	adds	r3, #12
 800a2fa:	7812      	ldrb	r2, [r2, #0]
 800a2fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	3b01      	subs	r3, #1
 800a310:	b29a      	uxth	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a316:	e0a4      	b.n	800a462 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	2b02      	cmp	r3, #2
 800a324:	d134      	bne.n	800a390 <HAL_SPI_TransmitReceive+0x30a>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d02f      	beq.n	800a390 <HAL_SPI_TransmitReceive+0x30a>
 800a330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a332:	2b01      	cmp	r3, #1
 800a334:	d12c      	bne.n	800a390 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d912      	bls.n	800a366 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a344:	881a      	ldrh	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a350:	1c9a      	adds	r2, r3, #2
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	3b02      	subs	r3, #2
 800a35e:	b29a      	uxth	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a364:	e012      	b.n	800a38c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	330c      	adds	r3, #12
 800a370:	7812      	ldrb	r2, [r2, #0]
 800a372:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a382:	b29b      	uxth	r3, r3
 800a384:	3b01      	subs	r3, #1
 800a386:	b29a      	uxth	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d148      	bne.n	800a430 <HAL_SPI_TransmitReceive+0x3aa>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d042      	beq.n	800a430 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d923      	bls.n	800a3fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c0:	b292      	uxth	r2, r2
 800a3c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c8:	1c9a      	adds	r2, r3, #2
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	3b02      	subs	r3, #2
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d81f      	bhi.n	800a42c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685a      	ldr	r2, [r3, #4]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3fa:	605a      	str	r2, [r3, #4]
 800a3fc:	e016      	b.n	800a42c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f103 020c 	add.w	r2, r3, #12
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a40a:	7812      	ldrb	r2, [r2, #0]
 800a40c:	b2d2      	uxtb	r2, r2
 800a40e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	b29a      	uxth	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a42c:	2301      	movs	r3, #1
 800a42e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a430:	f7fb fc74 	bl	8005d1c <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d803      	bhi.n	800a448 <HAL_SPI_TransmitReceive+0x3c2>
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d102      	bne.n	800a44e <HAL_SPI_TransmitReceive+0x3c8>
 800a448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e02c      	b.n	800a4bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f47f af55 	bne.w	800a318 <HAL_SPI_TransmitReceive+0x292>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a474:	b29b      	uxth	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	f47f af4e 	bne.w	800a318 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a47c:	6a3a      	ldr	r2, [r7, #32]
 800a47e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 f93d 	bl	800a700 <SPI_EndRxTxTransaction>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d008      	beq.n	800a49e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2220      	movs	r2, #32
 800a490:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e00e      	b.n	800a4bc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
  }
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3728      	adds	r7, #40	@ 0x28
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4d4:	f7fb fc22 	bl	8005d1c <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a4e4:	f7fb fc1a 	bl	8005d1c <HAL_GetTick>
 800a4e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4ea:	4b39      	ldr	r3, [pc, #228]	@ (800a5d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	015b      	lsls	r3, r3, #5
 800a4f0:	0d1b      	lsrs	r3, r3, #20
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	fb02 f303 	mul.w	r3, r2, r3
 800a4f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4fa:	e054      	b.n	800a5a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a502:	d050      	beq.n	800a5a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a504:	f7fb fc0a 	bl	8005d1c <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	429a      	cmp	r2, r3
 800a512:	d902      	bls.n	800a51a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d13d      	bne.n	800a596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a532:	d111      	bne.n	800a558 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a53c:	d004      	beq.n	800a548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a546:	d107      	bne.n	800a558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a560:	d10f      	bne.n	800a582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e017      	b.n	800a5c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	bf0c      	ite	eq
 800a5b6:	2301      	moveq	r3, #1
 800a5b8:	2300      	movne	r3, #0
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	461a      	mov	r2, r3
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d19b      	bne.n	800a4fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3720      	adds	r7, #32
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20000024 	.word	0x20000024

0800a5d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08a      	sub	sp, #40	@ 0x28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a5e6:	f7fb fb99 	bl	8005d1c <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ee:	1a9b      	subs	r3, r3, r2
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a5f6:	f7fb fb91 	bl	8005d1c <HAL_GetTick>
 800a5fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	330c      	adds	r3, #12
 800a602:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a604:	4b3d      	ldr	r3, [pc, #244]	@ (800a6fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	4613      	mov	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	00da      	lsls	r2, r3, #3
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	0d1b      	lsrs	r3, r3, #20
 800a614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a616:	fb02 f303 	mul.w	r3, r2, r3
 800a61a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a61c:	e060      	b.n	800a6e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a624:	d107      	bne.n	800a636 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d104      	bne.n	800a636 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a634:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d050      	beq.n	800a6e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a63e:	f7fb fb6d 	bl	8005d1c <HAL_GetTick>
 800a642:	4602      	mov	r2, r0
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	1ad3      	subs	r3, r2, r3
 800a648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d902      	bls.n	800a654 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	2b00      	cmp	r3, #0
 800a652:	d13d      	bne.n	800a6d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a662:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a66c:	d111      	bne.n	800a692 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a676:	d004      	beq.n	800a682 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a680:	d107      	bne.n	800a692 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a690:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a69a:	d10f      	bne.n	800a6bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e010      	b.n	800a6f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689a      	ldr	r2, [r3, #8]
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d196      	bne.n	800a61e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3728      	adds	r7, #40	@ 0x28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000024 	.word	0x20000024

0800a700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af02      	add	r7, sp, #8
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2200      	movs	r2, #0
 800a714:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff ff5b 	bl	800a5d4 <SPI_WaitFifoStateUntilTimeout>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d007      	beq.n	800a734 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a728:	f043 0220 	orr.w	r2, r3, #32
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e027      	b.n	800a784 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	2200      	movs	r2, #0
 800a73c:	2180      	movs	r1, #128	@ 0x80
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f7ff fec0 	bl	800a4c4 <SPI_WaitFlagStateUntilTimeout>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d007      	beq.n	800a75a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a74e:	f043 0220 	orr.w	r2, r3, #32
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e014      	b.n	800a784 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2200      	movs	r2, #0
 800a762:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7ff ff34 	bl	800a5d4 <SPI_WaitFifoStateUntilTimeout>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d007      	beq.n	800a782 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a776:	f043 0220 	orr.w	r2, r3, #32
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e000      	b.n	800a784 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e049      	b.n	800a832 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d106      	bne.n	800a7b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7fa fa38 	bl	8004c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	f001 fa0a 	bl	800bbe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d001      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e04a      	b.n	800a8ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2202      	movs	r2, #2
 800a858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0201 	orr.w	r2, r2, #1
 800a86a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a21      	ldr	r2, [pc, #132]	@ (800a8f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d018      	beq.n	800a8a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a87e:	d013      	beq.n	800a8a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a1d      	ldr	r2, [pc, #116]	@ (800a8fc <HAL_TIM_Base_Start_IT+0xc0>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d00e      	beq.n	800a8a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a1c      	ldr	r2, [pc, #112]	@ (800a900 <HAL_TIM_Base_Start_IT+0xc4>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d009      	beq.n	800a8a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a1a      	ldr	r2, [pc, #104]	@ (800a904 <HAL_TIM_Base_Start_IT+0xc8>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d004      	beq.n	800a8a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a19      	ldr	r2, [pc, #100]	@ (800a908 <HAL_TIM_Base_Start_IT+0xcc>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d115      	bne.n	800a8d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	4b17      	ldr	r3, [pc, #92]	@ (800a90c <HAL_TIM_Base_Start_IT+0xd0>)
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b06      	cmp	r3, #6
 800a8b8:	d015      	beq.n	800a8e6 <HAL_TIM_Base_Start_IT+0xaa>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8c0:	d011      	beq.n	800a8e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f042 0201 	orr.w	r2, r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d2:	e008      	b.n	800a8e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0201 	orr.w	r2, r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	e000      	b.n	800a8e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	40012c00 	.word	0x40012c00
 800a8fc:	40000400 	.word	0x40000400
 800a900:	40000800 	.word	0x40000800
 800a904:	40013400 	.word	0x40013400
 800a908:	40014000 	.word	0x40014000
 800a90c:	00010007 	.word	0x00010007

0800a910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e049      	b.n	800a9b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f841 	bl	800a9be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2202      	movs	r2, #2
 800a940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f001 f948 	bl	800bbe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9c6:	bf00      	nop
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d109      	bne.n	800a9f8 <HAL_TIM_PWM_Start+0x24>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	bf14      	ite	ne
 800a9f0:	2301      	movne	r3, #1
 800a9f2:	2300      	moveq	r3, #0
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	e03c      	b.n	800aa72 <HAL_TIM_PWM_Start+0x9e>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	d109      	bne.n	800aa12 <HAL_TIM_PWM_Start+0x3e>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	bf14      	ite	ne
 800aa0a:	2301      	movne	r3, #1
 800aa0c:	2300      	moveq	r3, #0
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	e02f      	b.n	800aa72 <HAL_TIM_PWM_Start+0x9e>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d109      	bne.n	800aa2c <HAL_TIM_PWM_Start+0x58>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	bf14      	ite	ne
 800aa24:	2301      	movne	r3, #1
 800aa26:	2300      	moveq	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	e022      	b.n	800aa72 <HAL_TIM_PWM_Start+0x9e>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2b0c      	cmp	r3, #12
 800aa30:	d109      	bne.n	800aa46 <HAL_TIM_PWM_Start+0x72>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	bf14      	ite	ne
 800aa3e:	2301      	movne	r3, #1
 800aa40:	2300      	moveq	r3, #0
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	e015      	b.n	800aa72 <HAL_TIM_PWM_Start+0x9e>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b10      	cmp	r3, #16
 800aa4a:	d109      	bne.n	800aa60 <HAL_TIM_PWM_Start+0x8c>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	bf14      	ite	ne
 800aa58:	2301      	movne	r3, #1
 800aa5a:	2300      	moveq	r3, #0
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	e008      	b.n	800aa72 <HAL_TIM_PWM_Start+0x9e>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	bf14      	ite	ne
 800aa6c:	2301      	movne	r3, #1
 800aa6e:	2300      	moveq	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e097      	b.n	800abaa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d104      	bne.n	800aa8a <HAL_TIM_PWM_Start+0xb6>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa88:	e023      	b.n	800aad2 <HAL_TIM_PWM_Start+0xfe>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d104      	bne.n	800aa9a <HAL_TIM_PWM_Start+0xc6>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa98:	e01b      	b.n	800aad2 <HAL_TIM_PWM_Start+0xfe>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	d104      	bne.n	800aaaa <HAL_TIM_PWM_Start+0xd6>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aaa8:	e013      	b.n	800aad2 <HAL_TIM_PWM_Start+0xfe>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b0c      	cmp	r3, #12
 800aaae:	d104      	bne.n	800aaba <HAL_TIM_PWM_Start+0xe6>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aab8:	e00b      	b.n	800aad2 <HAL_TIM_PWM_Start+0xfe>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b10      	cmp	r3, #16
 800aabe:	d104      	bne.n	800aaca <HAL_TIM_PWM_Start+0xf6>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aac8:	e003      	b.n	800aad2 <HAL_TIM_PWM_Start+0xfe>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2202      	movs	r2, #2
 800aace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2201      	movs	r2, #1
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f001 fcb0 	bl	800c440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a33      	ldr	r2, [pc, #204]	@ (800abb4 <HAL_TIM_PWM_Start+0x1e0>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d013      	beq.n	800ab12 <HAL_TIM_PWM_Start+0x13e>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a32      	ldr	r2, [pc, #200]	@ (800abb8 <HAL_TIM_PWM_Start+0x1e4>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d00e      	beq.n	800ab12 <HAL_TIM_PWM_Start+0x13e>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a30      	ldr	r2, [pc, #192]	@ (800abbc <HAL_TIM_PWM_Start+0x1e8>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d009      	beq.n	800ab12 <HAL_TIM_PWM_Start+0x13e>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a2f      	ldr	r2, [pc, #188]	@ (800abc0 <HAL_TIM_PWM_Start+0x1ec>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d004      	beq.n	800ab12 <HAL_TIM_PWM_Start+0x13e>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a2d      	ldr	r2, [pc, #180]	@ (800abc4 <HAL_TIM_PWM_Start+0x1f0>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d101      	bne.n	800ab16 <HAL_TIM_PWM_Start+0x142>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <HAL_TIM_PWM_Start+0x144>
 800ab16:	2300      	movs	r3, #0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d007      	beq.n	800ab2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a20      	ldr	r2, [pc, #128]	@ (800abb4 <HAL_TIM_PWM_Start+0x1e0>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d018      	beq.n	800ab68 <HAL_TIM_PWM_Start+0x194>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab3e:	d013      	beq.n	800ab68 <HAL_TIM_PWM_Start+0x194>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a20      	ldr	r2, [pc, #128]	@ (800abc8 <HAL_TIM_PWM_Start+0x1f4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00e      	beq.n	800ab68 <HAL_TIM_PWM_Start+0x194>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a1f      	ldr	r2, [pc, #124]	@ (800abcc <HAL_TIM_PWM_Start+0x1f8>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d009      	beq.n	800ab68 <HAL_TIM_PWM_Start+0x194>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a17      	ldr	r2, [pc, #92]	@ (800abb8 <HAL_TIM_PWM_Start+0x1e4>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d004      	beq.n	800ab68 <HAL_TIM_PWM_Start+0x194>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a16      	ldr	r2, [pc, #88]	@ (800abbc <HAL_TIM_PWM_Start+0x1e8>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d115      	bne.n	800ab94 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689a      	ldr	r2, [r3, #8]
 800ab6e:	4b18      	ldr	r3, [pc, #96]	@ (800abd0 <HAL_TIM_PWM_Start+0x1fc>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2b06      	cmp	r3, #6
 800ab78:	d015      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1d2>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab80:	d011      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f042 0201 	orr.w	r2, r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab92:	e008      	b.n	800aba6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f042 0201 	orr.w	r2, r2, #1
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	e000      	b.n	800aba8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aba6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	40012c00 	.word	0x40012c00
 800abb8:	40013400 	.word	0x40013400
 800abbc:	40014000 	.word	0x40014000
 800abc0:	40014400 	.word	0x40014400
 800abc4:	40014800 	.word	0x40014800
 800abc8:	40000400 	.word	0x40000400
 800abcc:	40000800 	.word	0x40000800
 800abd0:	00010007 	.word	0x00010007

0800abd4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2200      	movs	r2, #0
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f001 fc2a 	bl	800c440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a3e      	ldr	r2, [pc, #248]	@ (800acec <HAL_TIM_PWM_Stop+0x118>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d013      	beq.n	800ac1e <HAL_TIM_PWM_Stop+0x4a>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a3d      	ldr	r2, [pc, #244]	@ (800acf0 <HAL_TIM_PWM_Stop+0x11c>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d00e      	beq.n	800ac1e <HAL_TIM_PWM_Stop+0x4a>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a3b      	ldr	r2, [pc, #236]	@ (800acf4 <HAL_TIM_PWM_Stop+0x120>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d009      	beq.n	800ac1e <HAL_TIM_PWM_Stop+0x4a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a3a      	ldr	r2, [pc, #232]	@ (800acf8 <HAL_TIM_PWM_Stop+0x124>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d004      	beq.n	800ac1e <HAL_TIM_PWM_Stop+0x4a>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a38      	ldr	r2, [pc, #224]	@ (800acfc <HAL_TIM_PWM_Stop+0x128>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d101      	bne.n	800ac22 <HAL_TIM_PWM_Stop+0x4e>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e000      	b.n	800ac24 <HAL_TIM_PWM_Stop+0x50>
 800ac22:	2300      	movs	r3, #0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d017      	beq.n	800ac58 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6a1a      	ldr	r2, [r3, #32]
 800ac2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ac32:	4013      	ands	r3, r2
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10f      	bne.n	800ac58 <HAL_TIM_PWM_Stop+0x84>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6a1a      	ldr	r2, [r3, #32]
 800ac3e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ac42:	4013      	ands	r3, r2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d107      	bne.n	800ac58 <HAL_TIM_PWM_Stop+0x84>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ac56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6a1a      	ldr	r2, [r3, #32]
 800ac5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ac62:	4013      	ands	r3, r2
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10f      	bne.n	800ac88 <HAL_TIM_PWM_Stop+0xb4>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6a1a      	ldr	r2, [r3, #32]
 800ac6e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ac72:	4013      	ands	r3, r2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d107      	bne.n	800ac88 <HAL_TIM_PWM_Stop+0xb4>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 0201 	bic.w	r2, r2, #1
 800ac86:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d104      	bne.n	800ac98 <HAL_TIM_PWM_Stop+0xc4>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac96:	e023      	b.n	800ace0 <HAL_TIM_PWM_Stop+0x10c>
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2b04      	cmp	r3, #4
 800ac9c:	d104      	bne.n	800aca8 <HAL_TIM_PWM_Stop+0xd4>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aca6:	e01b      	b.n	800ace0 <HAL_TIM_PWM_Stop+0x10c>
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b08      	cmp	r3, #8
 800acac:	d104      	bne.n	800acb8 <HAL_TIM_PWM_Stop+0xe4>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800acb6:	e013      	b.n	800ace0 <HAL_TIM_PWM_Stop+0x10c>
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2b0c      	cmp	r3, #12
 800acbc:	d104      	bne.n	800acc8 <HAL_TIM_PWM_Stop+0xf4>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800acc6:	e00b      	b.n	800ace0 <HAL_TIM_PWM_Stop+0x10c>
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	2b10      	cmp	r3, #16
 800accc:	d104      	bne.n	800acd8 <HAL_TIM_PWM_Stop+0x104>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acd6:	e003      	b.n	800ace0 <HAL_TIM_PWM_Stop+0x10c>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	40012c00 	.word	0x40012c00
 800acf0:	40013400 	.word	0x40013400
 800acf4:	40014000 	.word	0x40014000
 800acf8:	40014400 	.word	0x40014400
 800acfc:	40014800 	.word	0x40014800

0800ad00 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <HAL_TIM_PWM_Start_DMA+0x2c>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	bf0c      	ite	eq
 800ad24:	2301      	moveq	r3, #1
 800ad26:	2300      	movne	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	e03c      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d109      	bne.n	800ad46 <HAL_TIM_PWM_Start_DMA+0x46>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	bf0c      	ite	eq
 800ad3e:	2301      	moveq	r3, #1
 800ad40:	2300      	movne	r3, #0
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	e02f      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d109      	bne.n	800ad60 <HAL_TIM_PWM_Start_DMA+0x60>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	bf0c      	ite	eq
 800ad58:	2301      	moveq	r3, #1
 800ad5a:	2300      	movne	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	e022      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2b0c      	cmp	r3, #12
 800ad64:	d109      	bne.n	800ad7a <HAL_TIM_PWM_Start_DMA+0x7a>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	bf0c      	ite	eq
 800ad72:	2301      	moveq	r3, #1
 800ad74:	2300      	movne	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	e015      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2b10      	cmp	r3, #16
 800ad7e:	d109      	bne.n	800ad94 <HAL_TIM_PWM_Start_DMA+0x94>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	bf0c      	ite	eq
 800ad8c:	2301      	moveq	r3, #1
 800ad8e:	2300      	movne	r3, #0
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	e008      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	bf0c      	ite	eq
 800ada0:	2301      	moveq	r3, #1
 800ada2:	2300      	movne	r3, #0
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800adaa:	2302      	movs	r3, #2
 800adac:	e1a6      	b.n	800b0fc <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d109      	bne.n	800adc8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	bf0c      	ite	eq
 800adc0:	2301      	moveq	r3, #1
 800adc2:	2300      	movne	r3, #0
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	e03c      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b04      	cmp	r3, #4
 800adcc:	d109      	bne.n	800ade2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b01      	cmp	r3, #1
 800add8:	bf0c      	ite	eq
 800adda:	2301      	moveq	r3, #1
 800addc:	2300      	movne	r3, #0
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	e02f      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b08      	cmp	r3, #8
 800ade6:	d109      	bne.n	800adfc <HAL_TIM_PWM_Start_DMA+0xfc>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	bf0c      	ite	eq
 800adf4:	2301      	moveq	r3, #1
 800adf6:	2300      	movne	r3, #0
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	e022      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b0c      	cmp	r3, #12
 800ae00:	d109      	bne.n	800ae16 <HAL_TIM_PWM_Start_DMA+0x116>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	bf0c      	ite	eq
 800ae0e:	2301      	moveq	r3, #1
 800ae10:	2300      	movne	r3, #0
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	e015      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b10      	cmp	r3, #16
 800ae1a:	d109      	bne.n	800ae30 <HAL_TIM_PWM_Start_DMA+0x130>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	bf0c      	ite	eq
 800ae28:	2301      	moveq	r3, #1
 800ae2a:	2300      	movne	r3, #0
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	e008      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	bf0c      	ite	eq
 800ae3c:	2301      	moveq	r3, #1
 800ae3e:	2300      	movne	r3, #0
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d034      	beq.n	800aeb0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <HAL_TIM_PWM_Start_DMA+0x152>
 800ae4c:	887b      	ldrh	r3, [r7, #2]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e152      	b.n	800b0fc <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d104      	bne.n	800ae66 <HAL_TIM_PWM_Start_DMA+0x166>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae64:	e026      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d104      	bne.n	800ae76 <HAL_TIM_PWM_Start_DMA+0x176>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae74:	e01e      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d104      	bne.n	800ae86 <HAL_TIM_PWM_Start_DMA+0x186>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae84:	e016      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	2b0c      	cmp	r3, #12
 800ae8a:	d104      	bne.n	800ae96 <HAL_TIM_PWM_Start_DMA+0x196>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae94:	e00e      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b10      	cmp	r3, #16
 800ae9a:	d104      	bne.n	800aea6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aea4:	e006      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2202      	movs	r2, #2
 800aeaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aeae:	e001      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e123      	b.n	800b0fc <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	2b0c      	cmp	r3, #12
 800aeb8:	f200 80ae 	bhi.w	800b018 <HAL_TIM_PWM_Start_DMA+0x318>
 800aebc:	a201      	add	r2, pc, #4	@ (adr r2, 800aec4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800aebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec2:	bf00      	nop
 800aec4:	0800aef9 	.word	0x0800aef9
 800aec8:	0800b019 	.word	0x0800b019
 800aecc:	0800b019 	.word	0x0800b019
 800aed0:	0800b019 	.word	0x0800b019
 800aed4:	0800af41 	.word	0x0800af41
 800aed8:	0800b019 	.word	0x0800b019
 800aedc:	0800b019 	.word	0x0800b019
 800aee0:	0800b019 	.word	0x0800b019
 800aee4:	0800af89 	.word	0x0800af89
 800aee8:	0800b019 	.word	0x0800b019
 800aeec:	0800b019 	.word	0x0800b019
 800aef0:	0800b019 	.word	0x0800b019
 800aef4:	0800afd1 	.word	0x0800afd1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefc:	4a81      	ldr	r2, [pc, #516]	@ (800b104 <HAL_TIM_PWM_Start_DMA+0x404>)
 800aefe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af04:	4a80      	ldr	r2, [pc, #512]	@ (800b108 <HAL_TIM_PWM_Start_DMA+0x408>)
 800af06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0c:	4a7f      	ldr	r2, [pc, #508]	@ (800b10c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800af0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3334      	adds	r3, #52	@ 0x34
 800af1c:	461a      	mov	r2, r3
 800af1e:	887b      	ldrh	r3, [r7, #2]
 800af20:	f7fc fd68 	bl	80079f4 <HAL_DMA_Start_IT>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e0e6      	b.n	800b0fc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68da      	ldr	r2, [r3, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af3c:	60da      	str	r2, [r3, #12]
      break;
 800af3e:	e06e      	b.n	800b01e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af44:	4a6f      	ldr	r2, [pc, #444]	@ (800b104 <HAL_TIM_PWM_Start_DMA+0x404>)
 800af46:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4c:	4a6e      	ldr	r2, [pc, #440]	@ (800b108 <HAL_TIM_PWM_Start_DMA+0x408>)
 800af4e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af54:	4a6d      	ldr	r2, [pc, #436]	@ (800b10c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800af56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3338      	adds	r3, #56	@ 0x38
 800af64:	461a      	mov	r2, r3
 800af66:	887b      	ldrh	r3, [r7, #2]
 800af68:	f7fc fd44 	bl	80079f4 <HAL_DMA_Start_IT>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e0c2      	b.n	800b0fc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68da      	ldr	r2, [r3, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af84:	60da      	str	r2, [r3, #12]
      break;
 800af86:	e04a      	b.n	800b01e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8c:	4a5d      	ldr	r2, [pc, #372]	@ (800b104 <HAL_TIM_PWM_Start_DMA+0x404>)
 800af8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af94:	4a5c      	ldr	r2, [pc, #368]	@ (800b108 <HAL_TIM_PWM_Start_DMA+0x408>)
 800af96:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9c:	4a5b      	ldr	r2, [pc, #364]	@ (800b10c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800af9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	333c      	adds	r3, #60	@ 0x3c
 800afac:	461a      	mov	r2, r3
 800afae:	887b      	ldrh	r3, [r7, #2]
 800afb0:	f7fc fd20 	bl	80079f4 <HAL_DMA_Start_IT>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e09e      	b.n	800b0fc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afcc:	60da      	str	r2, [r3, #12]
      break;
 800afce:	e026      	b.n	800b01e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd4:	4a4b      	ldr	r2, [pc, #300]	@ (800b104 <HAL_TIM_PWM_Start_DMA+0x404>)
 800afd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afdc:	4a4a      	ldr	r2, [pc, #296]	@ (800b108 <HAL_TIM_PWM_Start_DMA+0x408>)
 800afde:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe4:	4a49      	ldr	r2, [pc, #292]	@ (800b10c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800afe6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3340      	adds	r3, #64	@ 0x40
 800aff4:	461a      	mov	r2, r3
 800aff6:	887b      	ldrh	r3, [r7, #2]
 800aff8:	f7fc fcfc 	bl	80079f4 <HAL_DMA_Start_IT>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e07a      	b.n	800b0fc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68da      	ldr	r2, [r3, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b014:	60da      	str	r2, [r3, #12]
      break;
 800b016:	e002      	b.n	800b01e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	75fb      	strb	r3, [r7, #23]
      break;
 800b01c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d16a      	bne.n	800b0fa <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2201      	movs	r2, #1
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f001 fa07 	bl	800c440 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a36      	ldr	r2, [pc, #216]	@ (800b110 <HAL_TIM_PWM_Start_DMA+0x410>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d013      	beq.n	800b064 <HAL_TIM_PWM_Start_DMA+0x364>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a34      	ldr	r2, [pc, #208]	@ (800b114 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d00e      	beq.n	800b064 <HAL_TIM_PWM_Start_DMA+0x364>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a33      	ldr	r2, [pc, #204]	@ (800b118 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d009      	beq.n	800b064 <HAL_TIM_PWM_Start_DMA+0x364>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a31      	ldr	r2, [pc, #196]	@ (800b11c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d004      	beq.n	800b064 <HAL_TIM_PWM_Start_DMA+0x364>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a30      	ldr	r2, [pc, #192]	@ (800b120 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d101      	bne.n	800b068 <HAL_TIM_PWM_Start_DMA+0x368>
 800b064:	2301      	movs	r3, #1
 800b066:	e000      	b.n	800b06a <HAL_TIM_PWM_Start_DMA+0x36a>
 800b068:	2300      	movs	r3, #0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b07c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a23      	ldr	r2, [pc, #140]	@ (800b110 <HAL_TIM_PWM_Start_DMA+0x410>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d018      	beq.n	800b0ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b090:	d013      	beq.n	800b0ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a23      	ldr	r2, [pc, #140]	@ (800b124 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d00e      	beq.n	800b0ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a21      	ldr	r2, [pc, #132]	@ (800b128 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d009      	beq.n	800b0ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a1a      	ldr	r2, [pc, #104]	@ (800b114 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d004      	beq.n	800b0ba <HAL_TIM_PWM_Start_DMA+0x3ba>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a18      	ldr	r2, [pc, #96]	@ (800b118 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d115      	bne.n	800b0e6 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689a      	ldr	r2, [r3, #8]
 800b0c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b12c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	2b06      	cmp	r3, #6
 800b0ca:	d015      	beq.n	800b0f8 <HAL_TIM_PWM_Start_DMA+0x3f8>
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0d2:	d011      	beq.n	800b0f8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f042 0201 	orr.w	r2, r2, #1
 800b0e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e4:	e008      	b.n	800b0f8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f042 0201 	orr.w	r2, r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	e000      	b.n	800b0fa <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	0800bad3 	.word	0x0800bad3
 800b108:	0800bb7b 	.word	0x0800bb7b
 800b10c:	0800ba41 	.word	0x0800ba41
 800b110:	40012c00 	.word	0x40012c00
 800b114:	40013400 	.word	0x40013400
 800b118:	40014000 	.word	0x40014000
 800b11c:	40014400 	.word	0x40014400
 800b120:	40014800 	.word	0x40014800
 800b124:	40000400 	.word	0x40000400
 800b128:	40000800 	.word	0x40000800
 800b12c:	00010007 	.word	0x00010007

0800b130 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b0c      	cmp	r3, #12
 800b142:	d855      	bhi.n	800b1f0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800b144:	a201      	add	r2, pc, #4	@ (adr r2, 800b14c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800b146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14a:	bf00      	nop
 800b14c:	0800b181 	.word	0x0800b181
 800b150:	0800b1f1 	.word	0x0800b1f1
 800b154:	0800b1f1 	.word	0x0800b1f1
 800b158:	0800b1f1 	.word	0x0800b1f1
 800b15c:	0800b19d 	.word	0x0800b19d
 800b160:	0800b1f1 	.word	0x0800b1f1
 800b164:	0800b1f1 	.word	0x0800b1f1
 800b168:	0800b1f1 	.word	0x0800b1f1
 800b16c:	0800b1b9 	.word	0x0800b1b9
 800b170:	0800b1f1 	.word	0x0800b1f1
 800b174:	0800b1f1 	.word	0x0800b1f1
 800b178:	0800b1f1 	.word	0x0800b1f1
 800b17c:	0800b1d5 	.word	0x0800b1d5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68da      	ldr	r2, [r3, #12]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b18e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b194:	4618      	mov	r0, r3
 800b196:	f7fc fd01 	bl	8007b9c <HAL_DMA_Abort_IT>
      break;
 800b19a:	e02c      	b.n	800b1f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fc fcf3 	bl	8007b9c <HAL_DMA_Abort_IT>
      break;
 800b1b6:	e01e      	b.n	800b1f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b1c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fc fce5 	bl	8007b9c <HAL_DMA_Abort_IT>
      break;
 800b1d2:	e010      	b.n	800b1f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68da      	ldr	r2, [r3, #12]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b1e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7fc fcd7 	bl	8007b9c <HAL_DMA_Abort_IT>
      break;
 800b1ee:	e002      	b.n	800b1f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f4:	bf00      	nop
  }

  if (status == HAL_OK)
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f040 8081 	bne.w	800b300 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2200      	movs	r2, #0
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	4618      	mov	r0, r3
 800b208:	f001 f91a 	bl	800c440 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a3e      	ldr	r2, [pc, #248]	@ (800b30c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d013      	beq.n	800b23e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a3d      	ldr	r2, [pc, #244]	@ (800b310 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d00e      	beq.n	800b23e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a3b      	ldr	r2, [pc, #236]	@ (800b314 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d009      	beq.n	800b23e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a3a      	ldr	r2, [pc, #232]	@ (800b318 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d004      	beq.n	800b23e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a38      	ldr	r2, [pc, #224]	@ (800b31c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d101      	bne.n	800b242 <HAL_TIM_PWM_Stop_DMA+0x112>
 800b23e:	2301      	movs	r3, #1
 800b240:	e000      	b.n	800b244 <HAL_TIM_PWM_Stop_DMA+0x114>
 800b242:	2300      	movs	r3, #0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d017      	beq.n	800b278 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6a1a      	ldr	r2, [r3, #32]
 800b24e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b252:	4013      	ands	r3, r2
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10f      	bne.n	800b278 <HAL_TIM_PWM_Stop_DMA+0x148>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6a1a      	ldr	r2, [r3, #32]
 800b25e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b262:	4013      	ands	r3, r2
 800b264:	2b00      	cmp	r3, #0
 800b266:	d107      	bne.n	800b278 <HAL_TIM_PWM_Stop_DMA+0x148>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b276:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	6a1a      	ldr	r2, [r3, #32]
 800b27e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b282:	4013      	ands	r3, r2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10f      	bne.n	800b2a8 <HAL_TIM_PWM_Stop_DMA+0x178>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6a1a      	ldr	r2, [r3, #32]
 800b28e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b292:	4013      	ands	r3, r2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d107      	bne.n	800b2a8 <HAL_TIM_PWM_Stop_DMA+0x178>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f022 0201 	bic.w	r2, r2, #1
 800b2a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d104      	bne.n	800b2b8 <HAL_TIM_PWM_Stop_DMA+0x188>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2b6:	e023      	b.n	800b300 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	2b04      	cmp	r3, #4
 800b2bc:	d104      	bne.n	800b2c8 <HAL_TIM_PWM_Stop_DMA+0x198>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2c6:	e01b      	b.n	800b300 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	2b08      	cmp	r3, #8
 800b2cc:	d104      	bne.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2d6:	e013      	b.n	800b300 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b0c      	cmp	r3, #12
 800b2dc:	d104      	bne.n	800b2e8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2e6:	e00b      	b.n	800b300 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	d104      	bne.n	800b2f8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2f6:	e003      	b.n	800b300 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	40012c00 	.word	0x40012c00
 800b310:	40013400 	.word	0x40013400
 800b314:	40014000 	.word	0x40014000
 800b318:	40014400 	.word	0x40014400
 800b31c:	40014800 	.word	0x40014800

0800b320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f003 0302 	and.w	r3, r3, #2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d020      	beq.n	800b384 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d01b      	beq.n	800b384 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f06f 0202 	mvn.w	r2, #2
 800b354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fb40 	bl	800b9f0 <HAL_TIM_IC_CaptureCallback>
 800b370:	e005      	b.n	800b37e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fb32 	bl	800b9dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7f7 fc2f 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f003 0304 	and.w	r3, r3, #4
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d020      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	d01b      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f06f 0204 	mvn.w	r2, #4
 800b3a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d003      	beq.n	800b3be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fb1a 	bl	800b9f0 <HAL_TIM_IC_CaptureCallback>
 800b3bc:	e005      	b.n	800b3ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fb0c 	bl	800b9dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7f7 fc09 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d020      	beq.n	800b41c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f003 0308 	and.w	r3, r3, #8
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d01b      	beq.n	800b41c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0208 	mvn.w	r2, #8
 800b3ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2204      	movs	r2, #4
 800b3f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	69db      	ldr	r3, [r3, #28]
 800b3fa:	f003 0303 	and.w	r3, r3, #3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 faf4 	bl	800b9f0 <HAL_TIM_IC_CaptureCallback>
 800b408:	e005      	b.n	800b416 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fae6 	bl	800b9dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7f7 fbe3 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	f003 0310 	and.w	r3, r3, #16
 800b422:	2b00      	cmp	r3, #0
 800b424:	d020      	beq.n	800b468 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f003 0310 	and.w	r3, r3, #16
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01b      	beq.n	800b468 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f06f 0210 	mvn.w	r2, #16
 800b438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2208      	movs	r2, #8
 800b43e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 face 	bl	800b9f0 <HAL_TIM_IC_CaptureCallback>
 800b454:	e005      	b.n	800b462 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fac0 	bl	800b9dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7f7 fbbd 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f003 0301 	and.w	r3, r3, #1
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00c      	beq.n	800b48c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d007      	beq.n	800b48c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f06f 0201 	mvn.w	r2, #1
 800b484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7f7 fd6a 	bl	8002f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b492:	2b00      	cmp	r3, #0
 800b494:	d104      	bne.n	800b4a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00c      	beq.n	800b4ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d007      	beq.n	800b4ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f001 f875 	bl	800c5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00c      	beq.n	800b4de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d007      	beq.n	800b4de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 f86d 	bl	800c5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00c      	beq.n	800b502 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d007      	beq.n	800b502 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b4fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fa8b 	bl	800ba18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f003 0320 	and.w	r3, r3, #32
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00c      	beq.n	800b526 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b00      	cmp	r3, #0
 800b514:	d007      	beq.n	800b526 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f06f 0220 	mvn.w	r2, #32
 800b51e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f001 f835 	bl	800c590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00c      	beq.n	800b54a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d007      	beq.n	800b54a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 f841 	bl	800c5cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00c      	beq.n	800b56e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d007      	beq.n	800b56e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 f839 	bl	800c5e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00c      	beq.n	800b592 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d007      	beq.n	800b592 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b58a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f001 f831 	bl	800c5f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00c      	beq.n	800b5b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d007      	beq.n	800b5b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b5ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 f829 	bl	800c608 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b5b6:	bf00      	nop
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
	...

0800b5c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d101      	bne.n	800b5de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e0ff      	b.n	800b7de <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b14      	cmp	r3, #20
 800b5ea:	f200 80f0 	bhi.w	800b7ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b649 	.word	0x0800b649
 800b5f8:	0800b7cf 	.word	0x0800b7cf
 800b5fc:	0800b7cf 	.word	0x0800b7cf
 800b600:	0800b7cf 	.word	0x0800b7cf
 800b604:	0800b689 	.word	0x0800b689
 800b608:	0800b7cf 	.word	0x0800b7cf
 800b60c:	0800b7cf 	.word	0x0800b7cf
 800b610:	0800b7cf 	.word	0x0800b7cf
 800b614:	0800b6cb 	.word	0x0800b6cb
 800b618:	0800b7cf 	.word	0x0800b7cf
 800b61c:	0800b7cf 	.word	0x0800b7cf
 800b620:	0800b7cf 	.word	0x0800b7cf
 800b624:	0800b70b 	.word	0x0800b70b
 800b628:	0800b7cf 	.word	0x0800b7cf
 800b62c:	0800b7cf 	.word	0x0800b7cf
 800b630:	0800b7cf 	.word	0x0800b7cf
 800b634:	0800b74d 	.word	0x0800b74d
 800b638:	0800b7cf 	.word	0x0800b7cf
 800b63c:	0800b7cf 	.word	0x0800b7cf
 800b640:	0800b7cf 	.word	0x0800b7cf
 800b644:	0800b78d 	.word	0x0800b78d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68b9      	ldr	r1, [r7, #8]
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 fb64 	bl	800bd1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	699a      	ldr	r2, [r3, #24]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f042 0208 	orr.w	r2, r2, #8
 800b662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	699a      	ldr	r2, [r3, #24]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f022 0204 	bic.w	r2, r2, #4
 800b672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6999      	ldr	r1, [r3, #24]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	619a      	str	r2, [r3, #24]
      break;
 800b686:	e0a5      	b.n	800b7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 fbd4 	bl	800be3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	699a      	ldr	r2, [r3, #24]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	699a      	ldr	r2, [r3, #24]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6999      	ldr	r1, [r3, #24]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	021a      	lsls	r2, r3, #8
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	619a      	str	r2, [r3, #24]
      break;
 800b6c8:	e084      	b.n	800b7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68b9      	ldr	r1, [r7, #8]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 fc3d 	bl	800bf50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	69da      	ldr	r2, [r3, #28]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f042 0208 	orr.w	r2, r2, #8
 800b6e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	69da      	ldr	r2, [r3, #28]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f022 0204 	bic.w	r2, r2, #4
 800b6f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	69d9      	ldr	r1, [r3, #28]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	691a      	ldr	r2, [r3, #16]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	61da      	str	r2, [r3, #28]
      break;
 800b708:	e064      	b.n	800b7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68b9      	ldr	r1, [r7, #8]
 800b710:	4618      	mov	r0, r3
 800b712:	f000 fca5 	bl	800c060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69da      	ldr	r2, [r3, #28]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	69da      	ldr	r2, [r3, #28]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69d9      	ldr	r1, [r3, #28]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	021a      	lsls	r2, r3, #8
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	430a      	orrs	r2, r1
 800b748:	61da      	str	r2, [r3, #28]
      break;
 800b74a:	e043      	b.n	800b7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68b9      	ldr	r1, [r7, #8]
 800b752:	4618      	mov	r0, r3
 800b754:	f000 fd0e 	bl	800c174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f042 0208 	orr.w	r2, r2, #8
 800b766:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f022 0204 	bic.w	r2, r2, #4
 800b776:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	691a      	ldr	r2, [r3, #16]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b78a:	e023      	b.n	800b7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68b9      	ldr	r1, [r7, #8]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 fd52 	bl	800c23c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	021a      	lsls	r2, r3, #8
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	430a      	orrs	r2, r1
 800b7ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b7cc:	e002      	b.n	800b7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop

0800b7e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d101      	bne.n	800b804 <HAL_TIM_ConfigClockSource+0x1c>
 800b800:	2302      	movs	r3, #2
 800b802:	e0de      	b.n	800b9c2 <HAL_TIM_ConfigClockSource+0x1da>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b822:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b82e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a63      	ldr	r2, [pc, #396]	@ (800b9cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	f000 80a9 	beq.w	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b844:	4a61      	ldr	r2, [pc, #388]	@ (800b9cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b846:	4293      	cmp	r3, r2
 800b848:	f200 80ae 	bhi.w	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b84c:	4a60      	ldr	r2, [pc, #384]	@ (800b9d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	f000 80a1 	beq.w	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b854:	4a5e      	ldr	r2, [pc, #376]	@ (800b9d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b856:	4293      	cmp	r3, r2
 800b858:	f200 80a6 	bhi.w	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b85c:	4a5d      	ldr	r2, [pc, #372]	@ (800b9d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	f000 8099 	beq.w	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b864:	4a5b      	ldr	r2, [pc, #364]	@ (800b9d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b866:	4293      	cmp	r3, r2
 800b868:	f200 809e 	bhi.w	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b86c:	4a5a      	ldr	r2, [pc, #360]	@ (800b9d8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	f000 8091 	beq.w	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b874:	4a58      	ldr	r2, [pc, #352]	@ (800b9d8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b876:	4293      	cmp	r3, r2
 800b878:	f200 8096 	bhi.w	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b87c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b880:	f000 8089 	beq.w	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b884:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b888:	f200 808e 	bhi.w	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b88c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b890:	d03e      	beq.n	800b910 <HAL_TIM_ConfigClockSource+0x128>
 800b892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b896:	f200 8087 	bhi.w	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b89a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b89e:	f000 8086 	beq.w	800b9ae <HAL_TIM_ConfigClockSource+0x1c6>
 800b8a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8a6:	d87f      	bhi.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b8a8:	2b70      	cmp	r3, #112	@ 0x70
 800b8aa:	d01a      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0xfa>
 800b8ac:	2b70      	cmp	r3, #112	@ 0x70
 800b8ae:	d87b      	bhi.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b8b0:	2b60      	cmp	r3, #96	@ 0x60
 800b8b2:	d050      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x16e>
 800b8b4:	2b60      	cmp	r3, #96	@ 0x60
 800b8b6:	d877      	bhi.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b8b8:	2b50      	cmp	r3, #80	@ 0x50
 800b8ba:	d03c      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0x14e>
 800b8bc:	2b50      	cmp	r3, #80	@ 0x50
 800b8be:	d873      	bhi.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b8c0:	2b40      	cmp	r3, #64	@ 0x40
 800b8c2:	d058      	beq.n	800b976 <HAL_TIM_ConfigClockSource+0x18e>
 800b8c4:	2b40      	cmp	r3, #64	@ 0x40
 800b8c6:	d86f      	bhi.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b8c8:	2b30      	cmp	r3, #48	@ 0x30
 800b8ca:	d064      	beq.n	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b8cc:	2b30      	cmp	r3, #48	@ 0x30
 800b8ce:	d86b      	bhi.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b8d0:	2b20      	cmp	r3, #32
 800b8d2:	d060      	beq.n	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b8d4:	2b20      	cmp	r3, #32
 800b8d6:	d867      	bhi.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d05c      	beq.n	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b8dc:	2b10      	cmp	r3, #16
 800b8de:	d05a      	beq.n	800b996 <HAL_TIM_ConfigClockSource+0x1ae>
 800b8e0:	e062      	b.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8f2:	f000 fd85 	bl	800c400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	609a      	str	r2, [r3, #8]
      break;
 800b90e:	e04f      	b.n	800b9b0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b920:	f000 fd6e 	bl	800c400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	689a      	ldr	r2, [r3, #8]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b932:	609a      	str	r2, [r3, #8]
      break;
 800b934:	e03c      	b.n	800b9b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b942:	461a      	mov	r2, r3
 800b944:	f000 fce0 	bl	800c308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2150      	movs	r1, #80	@ 0x50
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fd39 	bl	800c3c6 <TIM_ITRx_SetConfig>
      break;
 800b954:	e02c      	b.n	800b9b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b962:	461a      	mov	r2, r3
 800b964:	f000 fcff 	bl	800c366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2160      	movs	r1, #96	@ 0x60
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 fd29 	bl	800c3c6 <TIM_ITRx_SetConfig>
      break;
 800b974:	e01c      	b.n	800b9b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b982:	461a      	mov	r2, r3
 800b984:	f000 fcc0 	bl	800c308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2140      	movs	r1, #64	@ 0x40
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fd19 	bl	800c3c6 <TIM_ITRx_SetConfig>
      break;
 800b994:	e00c      	b.n	800b9b0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4619      	mov	r1, r3
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	f000 fd10 	bl	800c3c6 <TIM_ITRx_SetConfig>
      break;
 800b9a6:	e003      	b.n	800b9b0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ac:	e000      	b.n	800b9b0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800b9ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	00100070 	.word	0x00100070
 800b9d0:	00100040 	.word	0x00100040
 800b9d4:	00100030 	.word	0x00100030
 800b9d8:	00100020 	.word	0x00100020

0800b9dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d107      	bne.n	800ba68 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2201      	movs	r2, #1
 800ba62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba66:	e02a      	b.n	800babe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d107      	bne.n	800ba82 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2202      	movs	r2, #2
 800ba76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba80:	e01d      	b.n	800babe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d107      	bne.n	800ba9c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2204      	movs	r2, #4
 800ba90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba9a:	e010      	b.n	800babe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d107      	bne.n	800bab6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2208      	movs	r2, #8
 800baaa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bab4:	e003      	b.n	800babe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2201      	movs	r2, #1
 800baba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f7ff ffb4 	bl	800ba2c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	771a      	strb	r2, [r3, #28]
}
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bade:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d10b      	bne.n	800bb02 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2201      	movs	r2, #1
 800baee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	69db      	ldr	r3, [r3, #28]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d136      	bne.n	800bb66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb00:	e031      	b.n	800bb66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d10b      	bne.n	800bb24 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d125      	bne.n	800bb66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb22:	e020      	b.n	800bb66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d10b      	bne.n	800bb46 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2204      	movs	r2, #4
 800bb32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	69db      	ldr	r3, [r3, #28]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d114      	bne.n	800bb66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb44:	e00f      	b.n	800bb66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d10a      	bne.n	800bb66 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2208      	movs	r2, #8
 800bb54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d103      	bne.n	800bb66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7f7 f838 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	771a      	strb	r2, [r3, #28]
}
 800bb72:	bf00      	nop
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d103      	bne.n	800bb9a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2201      	movs	r2, #1
 800bb96:	771a      	strb	r2, [r3, #28]
 800bb98:	e019      	b.n	800bbce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d103      	bne.n	800bbac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2202      	movs	r2, #2
 800bba8:	771a      	strb	r2, [r3, #28]
 800bbaa:	e010      	b.n	800bbce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d103      	bne.n	800bbbe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2204      	movs	r2, #4
 800bbba:	771a      	strb	r2, [r3, #28]
 800bbbc:	e007      	b.n	800bbce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d102      	bne.n	800bbce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2208      	movs	r2, #8
 800bbcc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f7ff ff18 	bl	800ba04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	771a      	strb	r2, [r3, #28]
}
 800bbda:	bf00      	nop
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a42      	ldr	r2, [pc, #264]	@ (800bd00 <TIM_Base_SetConfig+0x11c>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d00f      	beq.n	800bc1c <TIM_Base_SetConfig+0x38>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc02:	d00b      	beq.n	800bc1c <TIM_Base_SetConfig+0x38>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a3f      	ldr	r2, [pc, #252]	@ (800bd04 <TIM_Base_SetConfig+0x120>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d007      	beq.n	800bc1c <TIM_Base_SetConfig+0x38>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a3e      	ldr	r2, [pc, #248]	@ (800bd08 <TIM_Base_SetConfig+0x124>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d003      	beq.n	800bc1c <TIM_Base_SetConfig+0x38>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a3d      	ldr	r2, [pc, #244]	@ (800bd0c <TIM_Base_SetConfig+0x128>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d108      	bne.n	800bc2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a33      	ldr	r2, [pc, #204]	@ (800bd00 <TIM_Base_SetConfig+0x11c>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d01b      	beq.n	800bc6e <TIM_Base_SetConfig+0x8a>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc3c:	d017      	beq.n	800bc6e <TIM_Base_SetConfig+0x8a>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a30      	ldr	r2, [pc, #192]	@ (800bd04 <TIM_Base_SetConfig+0x120>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d013      	beq.n	800bc6e <TIM_Base_SetConfig+0x8a>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a2f      	ldr	r2, [pc, #188]	@ (800bd08 <TIM_Base_SetConfig+0x124>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d00f      	beq.n	800bc6e <TIM_Base_SetConfig+0x8a>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a2e      	ldr	r2, [pc, #184]	@ (800bd0c <TIM_Base_SetConfig+0x128>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d00b      	beq.n	800bc6e <TIM_Base_SetConfig+0x8a>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a2d      	ldr	r2, [pc, #180]	@ (800bd10 <TIM_Base_SetConfig+0x12c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d007      	beq.n	800bc6e <TIM_Base_SetConfig+0x8a>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a2c      	ldr	r2, [pc, #176]	@ (800bd14 <TIM_Base_SetConfig+0x130>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d003      	beq.n	800bc6e <TIM_Base_SetConfig+0x8a>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a2b      	ldr	r2, [pc, #172]	@ (800bd18 <TIM_Base_SetConfig+0x134>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d108      	bne.n	800bc80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	689a      	ldr	r2, [r3, #8]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a16      	ldr	r2, [pc, #88]	@ (800bd00 <TIM_Base_SetConfig+0x11c>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d00f      	beq.n	800bccc <TIM_Base_SetConfig+0xe8>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a17      	ldr	r2, [pc, #92]	@ (800bd0c <TIM_Base_SetConfig+0x128>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d00b      	beq.n	800bccc <TIM_Base_SetConfig+0xe8>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a16      	ldr	r2, [pc, #88]	@ (800bd10 <TIM_Base_SetConfig+0x12c>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d007      	beq.n	800bccc <TIM_Base_SetConfig+0xe8>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a15      	ldr	r2, [pc, #84]	@ (800bd14 <TIM_Base_SetConfig+0x130>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d003      	beq.n	800bccc <TIM_Base_SetConfig+0xe8>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a14      	ldr	r2, [pc, #80]	@ (800bd18 <TIM_Base_SetConfig+0x134>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d103      	bne.n	800bcd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	691a      	ldr	r2, [r3, #16]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	f003 0301 	and.w	r3, r3, #1
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d105      	bne.n	800bcf2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	f023 0201 	bic.w	r2, r3, #1
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	611a      	str	r2, [r3, #16]
  }
}
 800bcf2:	bf00      	nop
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	40012c00 	.word	0x40012c00
 800bd04:	40000400 	.word	0x40000400
 800bd08:	40000800 	.word	0x40000800
 800bd0c:	40013400 	.word	0x40013400
 800bd10:	40014000 	.word	0x40014000
 800bd14:	40014400 	.word	0x40014400
 800bd18:	40014800 	.word	0x40014800

0800bd1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	f023 0201 	bic.w	r2, r3, #1
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	699b      	ldr	r3, [r3, #24]
 800bd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f023 0303 	bic.w	r3, r3, #3
 800bd56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f023 0302 	bic.w	r3, r3, #2
 800bd68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a2c      	ldr	r2, [pc, #176]	@ (800be28 <TIM_OC1_SetConfig+0x10c>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d00f      	beq.n	800bd9c <TIM_OC1_SetConfig+0x80>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a2b      	ldr	r2, [pc, #172]	@ (800be2c <TIM_OC1_SetConfig+0x110>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d00b      	beq.n	800bd9c <TIM_OC1_SetConfig+0x80>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a2a      	ldr	r2, [pc, #168]	@ (800be30 <TIM_OC1_SetConfig+0x114>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d007      	beq.n	800bd9c <TIM_OC1_SetConfig+0x80>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a29      	ldr	r2, [pc, #164]	@ (800be34 <TIM_OC1_SetConfig+0x118>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d003      	beq.n	800bd9c <TIM_OC1_SetConfig+0x80>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a28      	ldr	r2, [pc, #160]	@ (800be38 <TIM_OC1_SetConfig+0x11c>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d10c      	bne.n	800bdb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f023 0308 	bic.w	r3, r3, #8
 800bda2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f023 0304 	bic.w	r3, r3, #4
 800bdb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a1b      	ldr	r2, [pc, #108]	@ (800be28 <TIM_OC1_SetConfig+0x10c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d00f      	beq.n	800bdde <TIM_OC1_SetConfig+0xc2>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a1a      	ldr	r2, [pc, #104]	@ (800be2c <TIM_OC1_SetConfig+0x110>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d00b      	beq.n	800bdde <TIM_OC1_SetConfig+0xc2>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a19      	ldr	r2, [pc, #100]	@ (800be30 <TIM_OC1_SetConfig+0x114>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d007      	beq.n	800bdde <TIM_OC1_SetConfig+0xc2>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a18      	ldr	r2, [pc, #96]	@ (800be34 <TIM_OC1_SetConfig+0x118>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d003      	beq.n	800bdde <TIM_OC1_SetConfig+0xc2>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a17      	ldr	r2, [pc, #92]	@ (800be38 <TIM_OC1_SetConfig+0x11c>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d111      	bne.n	800be02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bde4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bdec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	621a      	str	r2, [r3, #32]
}
 800be1c:	bf00      	nop
 800be1e:	371c      	adds	r7, #28
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	40012c00 	.word	0x40012c00
 800be2c:	40013400 	.word	0x40013400
 800be30:	40014000 	.word	0x40014000
 800be34:	40014400 	.word	0x40014400
 800be38:	40014800 	.word	0x40014800

0800be3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a1b      	ldr	r3, [r3, #32]
 800be50:	f023 0210 	bic.w	r2, r3, #16
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	021b      	lsls	r3, r3, #8
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	4313      	orrs	r3, r2
 800be82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	f023 0320 	bic.w	r3, r3, #32
 800be8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	011b      	lsls	r3, r3, #4
 800be92:	697a      	ldr	r2, [r7, #20]
 800be94:	4313      	orrs	r3, r2
 800be96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a28      	ldr	r2, [pc, #160]	@ (800bf3c <TIM_OC2_SetConfig+0x100>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d003      	beq.n	800bea8 <TIM_OC2_SetConfig+0x6c>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a27      	ldr	r2, [pc, #156]	@ (800bf40 <TIM_OC2_SetConfig+0x104>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d10d      	bne.n	800bec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800beae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	011b      	lsls	r3, r3, #4
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	4313      	orrs	r3, r2
 800beba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a1d      	ldr	r2, [pc, #116]	@ (800bf3c <TIM_OC2_SetConfig+0x100>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d00f      	beq.n	800beec <TIM_OC2_SetConfig+0xb0>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a1c      	ldr	r2, [pc, #112]	@ (800bf40 <TIM_OC2_SetConfig+0x104>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d00b      	beq.n	800beec <TIM_OC2_SetConfig+0xb0>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a1b      	ldr	r2, [pc, #108]	@ (800bf44 <TIM_OC2_SetConfig+0x108>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d007      	beq.n	800beec <TIM_OC2_SetConfig+0xb0>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a1a      	ldr	r2, [pc, #104]	@ (800bf48 <TIM_OC2_SetConfig+0x10c>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d003      	beq.n	800beec <TIM_OC2_SetConfig+0xb0>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a19      	ldr	r2, [pc, #100]	@ (800bf4c <TIM_OC2_SetConfig+0x110>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d113      	bne.n	800bf14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800befa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	621a      	str	r2, [r3, #32]
}
 800bf2e:	bf00      	nop
 800bf30:	371c      	adds	r7, #28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	40012c00 	.word	0x40012c00
 800bf40:	40013400 	.word	0x40013400
 800bf44:	40014000 	.word	0x40014000
 800bf48:	40014400 	.word	0x40014400
 800bf4c:	40014800 	.word	0x40014800

0800bf50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a1b      	ldr	r3, [r3, #32]
 800bf64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f023 0303 	bic.w	r3, r3, #3
 800bf8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bf9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	021b      	lsls	r3, r3, #8
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a27      	ldr	r2, [pc, #156]	@ (800c04c <TIM_OC3_SetConfig+0xfc>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d003      	beq.n	800bfba <TIM_OC3_SetConfig+0x6a>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a26      	ldr	r2, [pc, #152]	@ (800c050 <TIM_OC3_SetConfig+0x100>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d10d      	bne.n	800bfd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	021b      	lsls	r3, r3, #8
 800bfc8:	697a      	ldr	r2, [r7, #20]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bfd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a1c      	ldr	r2, [pc, #112]	@ (800c04c <TIM_OC3_SetConfig+0xfc>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d00f      	beq.n	800bffe <TIM_OC3_SetConfig+0xae>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a1b      	ldr	r2, [pc, #108]	@ (800c050 <TIM_OC3_SetConfig+0x100>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d00b      	beq.n	800bffe <TIM_OC3_SetConfig+0xae>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a1a      	ldr	r2, [pc, #104]	@ (800c054 <TIM_OC3_SetConfig+0x104>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d007      	beq.n	800bffe <TIM_OC3_SetConfig+0xae>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a19      	ldr	r2, [pc, #100]	@ (800c058 <TIM_OC3_SetConfig+0x108>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d003      	beq.n	800bffe <TIM_OC3_SetConfig+0xae>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a18      	ldr	r2, [pc, #96]	@ (800c05c <TIM_OC3_SetConfig+0x10c>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d113      	bne.n	800c026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	4313      	orrs	r3, r2
 800c018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	4313      	orrs	r3, r2
 800c024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	621a      	str	r2, [r3, #32]
}
 800c040:	bf00      	nop
 800c042:	371c      	adds	r7, #28
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	40012c00 	.word	0x40012c00
 800c050:	40013400 	.word	0x40013400
 800c054:	40014000 	.word	0x40014000
 800c058:	40014400 	.word	0x40014400
 800c05c:	40014800 	.word	0x40014800

0800c060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c09a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	021b      	lsls	r3, r3, #8
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c0ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	031b      	lsls	r3, r3, #12
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	4a28      	ldr	r2, [pc, #160]	@ (800c160 <TIM_OC4_SetConfig+0x100>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d003      	beq.n	800c0cc <TIM_OC4_SetConfig+0x6c>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a27      	ldr	r2, [pc, #156]	@ (800c164 <TIM_OC4_SetConfig+0x104>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d10d      	bne.n	800c0e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c0d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	031b      	lsls	r3, r3, #12
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a1d      	ldr	r2, [pc, #116]	@ (800c160 <TIM_OC4_SetConfig+0x100>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d00f      	beq.n	800c110 <TIM_OC4_SetConfig+0xb0>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a1c      	ldr	r2, [pc, #112]	@ (800c164 <TIM_OC4_SetConfig+0x104>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d00b      	beq.n	800c110 <TIM_OC4_SetConfig+0xb0>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c168 <TIM_OC4_SetConfig+0x108>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d007      	beq.n	800c110 <TIM_OC4_SetConfig+0xb0>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a1a      	ldr	r2, [pc, #104]	@ (800c16c <TIM_OC4_SetConfig+0x10c>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d003      	beq.n	800c110 <TIM_OC4_SetConfig+0xb0>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a19      	ldr	r2, [pc, #100]	@ (800c170 <TIM_OC4_SetConfig+0x110>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d113      	bne.n	800c138 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c116:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c11e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	019b      	lsls	r3, r3, #6
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	4313      	orrs	r3, r2
 800c12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	019b      	lsls	r3, r3, #6
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	4313      	orrs	r3, r2
 800c136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	621a      	str	r2, [r3, #32]
}
 800c152:	bf00      	nop
 800c154:	371c      	adds	r7, #28
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	40012c00 	.word	0x40012c00
 800c164:	40013400 	.word	0x40013400
 800c168:	40014000 	.word	0x40014000
 800c16c:	40014400 	.word	0x40014400
 800c170:	40014800 	.word	0x40014800

0800c174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c174:	b480      	push	{r7}
 800c176:	b087      	sub	sp, #28
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a1b      	ldr	r3, [r3, #32]
 800c182:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6a1b      	ldr	r3, [r3, #32]
 800c188:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c1b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	041b      	lsls	r3, r3, #16
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a17      	ldr	r2, [pc, #92]	@ (800c228 <TIM_OC5_SetConfig+0xb4>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d00f      	beq.n	800c1ee <TIM_OC5_SetConfig+0x7a>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a16      	ldr	r2, [pc, #88]	@ (800c22c <TIM_OC5_SetConfig+0xb8>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d00b      	beq.n	800c1ee <TIM_OC5_SetConfig+0x7a>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a15      	ldr	r2, [pc, #84]	@ (800c230 <TIM_OC5_SetConfig+0xbc>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d007      	beq.n	800c1ee <TIM_OC5_SetConfig+0x7a>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a14      	ldr	r2, [pc, #80]	@ (800c234 <TIM_OC5_SetConfig+0xc0>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d003      	beq.n	800c1ee <TIM_OC5_SetConfig+0x7a>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a13      	ldr	r2, [pc, #76]	@ (800c238 <TIM_OC5_SetConfig+0xc4>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d109      	bne.n	800c202 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	021b      	lsls	r3, r3, #8
 800c1fc:	697a      	ldr	r2, [r7, #20]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	697a      	ldr	r2, [r7, #20]
 800c206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	621a      	str	r2, [r3, #32]
}
 800c21c:	bf00      	nop
 800c21e:	371c      	adds	r7, #28
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	40012c00 	.word	0x40012c00
 800c22c:	40013400 	.word	0x40013400
 800c230:	40014000 	.word	0x40014000
 800c234:	40014400 	.word	0x40014400
 800c238:	40014800 	.word	0x40014800

0800c23c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b087      	sub	sp, #28
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a1b      	ldr	r3, [r3, #32]
 800c24a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a1b      	ldr	r3, [r3, #32]
 800c250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c26a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	021b      	lsls	r3, r3, #8
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	4313      	orrs	r3, r2
 800c27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	051b      	lsls	r3, r3, #20
 800c28a:	693a      	ldr	r2, [r7, #16]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a18      	ldr	r2, [pc, #96]	@ (800c2f4 <TIM_OC6_SetConfig+0xb8>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d00f      	beq.n	800c2b8 <TIM_OC6_SetConfig+0x7c>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a17      	ldr	r2, [pc, #92]	@ (800c2f8 <TIM_OC6_SetConfig+0xbc>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d00b      	beq.n	800c2b8 <TIM_OC6_SetConfig+0x7c>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a16      	ldr	r2, [pc, #88]	@ (800c2fc <TIM_OC6_SetConfig+0xc0>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d007      	beq.n	800c2b8 <TIM_OC6_SetConfig+0x7c>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a15      	ldr	r2, [pc, #84]	@ (800c300 <TIM_OC6_SetConfig+0xc4>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d003      	beq.n	800c2b8 <TIM_OC6_SetConfig+0x7c>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a14      	ldr	r2, [pc, #80]	@ (800c304 <TIM_OC6_SetConfig+0xc8>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d109      	bne.n	800c2cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c2be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	695b      	ldr	r3, [r3, #20]
 800c2c4:	029b      	lsls	r3, r3, #10
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	693a      	ldr	r2, [r7, #16]
 800c2e4:	621a      	str	r2, [r3, #32]
}
 800c2e6:	bf00      	nop
 800c2e8:	371c      	adds	r7, #28
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	40012c00 	.word	0x40012c00
 800c2f8:	40013400 	.word	0x40013400
 800c2fc:	40014000 	.word	0x40014000
 800c300:	40014400 	.word	0x40014400
 800c304:	40014800 	.word	0x40014800

0800c308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	f023 0201 	bic.w	r2, r3, #1
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	011b      	lsls	r3, r3, #4
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f023 030a 	bic.w	r3, r3, #10
 800c344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	693a      	ldr	r2, [r7, #16]
 800c352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	621a      	str	r2, [r3, #32]
}
 800c35a:	bf00      	nop
 800c35c:	371c      	adds	r7, #28
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c366:	b480      	push	{r7}
 800c368:	b087      	sub	sp, #28
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6a1b      	ldr	r3, [r3, #32]
 800c37c:	f023 0210 	bic.w	r2, r3, #16
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	031b      	lsls	r3, r3, #12
 800c396:	693a      	ldr	r2, [r7, #16]
 800c398:	4313      	orrs	r3, r2
 800c39a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c3a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	011b      	lsls	r3, r3, #4
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	693a      	ldr	r2, [r7, #16]
 800c3b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	621a      	str	r2, [r3, #32]
}
 800c3ba:	bf00      	nop
 800c3bc:	371c      	adds	r7, #28
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3c6:	b480      	push	{r7}
 800c3c8:	b085      	sub	sp, #20
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c3dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	f043 0307 	orr.w	r3, r3, #7
 800c3ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	609a      	str	r2, [r3, #8]
}
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c41a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	021a      	lsls	r2, r3, #8
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	431a      	orrs	r2, r3
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	4313      	orrs	r3, r2
 800c428:	697a      	ldr	r2, [r7, #20]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	697a      	ldr	r2, [r7, #20]
 800c432:	609a      	str	r2, [r3, #8]
}
 800c434:	bf00      	nop
 800c436:	371c      	adds	r7, #28
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c440:	b480      	push	{r7}
 800c442:	b087      	sub	sp, #28
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	f003 031f 	and.w	r3, r3, #31
 800c452:	2201      	movs	r2, #1
 800c454:	fa02 f303 	lsl.w	r3, r2, r3
 800c458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6a1a      	ldr	r2, [r3, #32]
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	43db      	mvns	r3, r3
 800c462:	401a      	ands	r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6a1a      	ldr	r2, [r3, #32]
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	f003 031f 	and.w	r3, r3, #31
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	fa01 f303 	lsl.w	r3, r1, r3
 800c478:	431a      	orrs	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	621a      	str	r2, [r3, #32]
}
 800c47e:	bf00      	nop
 800c480:	371c      	adds	r7, #28
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
	...

0800c48c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d101      	bne.n	800c4a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	e065      	b.n	800c570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a2c      	ldr	r2, [pc, #176]	@ (800c57c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d004      	beq.n	800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a2b      	ldr	r2, [pc, #172]	@ (800c580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d108      	bne.n	800c4ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c4de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c4f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a1b      	ldr	r2, [pc, #108]	@ (800c57c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d018      	beq.n	800c544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c51a:	d013      	beq.n	800c544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a18      	ldr	r2, [pc, #96]	@ (800c584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d00e      	beq.n	800c544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a17      	ldr	r2, [pc, #92]	@ (800c588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d009      	beq.n	800c544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a12      	ldr	r2, [pc, #72]	@ (800c580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d004      	beq.n	800c544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a13      	ldr	r2, [pc, #76]	@ (800c58c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d10c      	bne.n	800c55e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c54a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	4313      	orrs	r3, r2
 800c554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	40012c00 	.word	0x40012c00
 800c580:	40013400 	.word	0x40013400
 800c584:	40000400 	.word	0x40000400
 800c588:	40000800 	.word	0x40000800
 800c58c:	40014000 	.word	0x40014000

0800c590 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c598:	bf00      	nop
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	e042      	b.n	800c6b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c634:	2b00      	cmp	r3, #0
 800c636:	d106      	bne.n	800c646 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7f8 fc63 	bl	8004f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2224      	movs	r2, #36	@ 0x24
 800c64a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f022 0201 	bic.w	r2, r2, #1
 800c65c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f001 f894 	bl	800d794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fdc5 	bl	800d1fc <UART_SetConfig>
 800c672:	4603      	mov	r3, r0
 800c674:	2b01      	cmp	r3, #1
 800c676:	d101      	bne.n	800c67c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	e01b      	b.n	800c6b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c68a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	689a      	ldr	r2, [r3, #8]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c69a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f042 0201 	orr.w	r2, r2, #1
 800c6aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f001 f913 	bl	800d8d8 <UART_CheckIdleState>
 800c6b2:	4603      	mov	r3, r0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b08a      	sub	sp, #40	@ 0x28
 800c6c0:	af02      	add	r7, sp, #8
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	603b      	str	r3, [r7, #0]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6d2:	2b20      	cmp	r3, #32
 800c6d4:	d17b      	bne.n	800c7ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <HAL_UART_Transmit+0x26>
 800c6dc:	88fb      	ldrh	r3, [r7, #6]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d101      	bne.n	800c6e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e074      	b.n	800c7d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2221      	movs	r2, #33	@ 0x21
 800c6f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c6f6:	f7f9 fb11 	bl	8005d1c <HAL_GetTick>
 800c6fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	88fa      	ldrh	r2, [r7, #6]
 800c700:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	88fa      	ldrh	r2, [r7, #6]
 800c708:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c714:	d108      	bne.n	800c728 <HAL_UART_Transmit+0x6c>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d104      	bne.n	800c728 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c71e:	2300      	movs	r3, #0
 800c720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	61bb      	str	r3, [r7, #24]
 800c726:	e003      	b.n	800c730 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c730:	e030      	b.n	800c794 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	2200      	movs	r2, #0
 800c73a:	2180      	movs	r1, #128	@ 0x80
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f001 f975 	bl	800da2c <UART_WaitOnFlagUntilTimeout>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d005      	beq.n	800c754 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2220      	movs	r2, #32
 800c74c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e03d      	b.n	800c7d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10b      	bne.n	800c772 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c768:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	3302      	adds	r3, #2
 800c76e:	61bb      	str	r3, [r7, #24]
 800c770:	e007      	b.n	800c782 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	781a      	ldrb	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	3301      	adds	r3, #1
 800c780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c788:	b29b      	uxth	r3, r3
 800c78a:	3b01      	subs	r3, #1
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1c8      	bne.n	800c732 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2140      	movs	r1, #64	@ 0x40
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f001 f93e 	bl	800da2c <UART_WaitOnFlagUntilTimeout>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d005      	beq.n	800c7c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e006      	b.n	800c7d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e000      	b.n	800c7d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c7ce:	2302      	movs	r3, #2
  }
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3720      	adds	r7, #32
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b08a      	sub	sp, #40	@ 0x28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7ec:	2b20      	cmp	r3, #32
 800c7ee:	d137      	bne.n	800c860 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <HAL_UART_Receive_IT+0x24>
 800c7f6:	88fb      	ldrh	r3, [r7, #6]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e030      	b.n	800c862 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a18      	ldr	r2, [pc, #96]	@ (800c86c <HAL_UART_Receive_IT+0x94>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d01f      	beq.n	800c850 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d018      	beq.n	800c850 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	613b      	str	r3, [r7, #16]
   return(result);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c832:	627b      	str	r3, [r7, #36]	@ 0x24
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	461a      	mov	r2, r3
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	623b      	str	r3, [r7, #32]
 800c83e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	69f9      	ldr	r1, [r7, #28]
 800c842:	6a3a      	ldr	r2, [r7, #32]
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	61bb      	str	r3, [r7, #24]
   return(result);
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e6      	bne.n	800c81e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c850:	88fb      	ldrh	r3, [r7, #6]
 800c852:	461a      	mov	r2, r3
 800c854:	68b9      	ldr	r1, [r7, #8]
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f001 f956 	bl	800db08 <UART_Start_Receive_IT>
 800c85c:	4603      	mov	r3, r0
 800c85e:	e000      	b.n	800c862 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c860:	2302      	movs	r3, #2
  }
}
 800c862:	4618      	mov	r0, r3
 800c864:	3728      	adds	r7, #40	@ 0x28
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	40008000 	.word	0x40008000

0800c870 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08a      	sub	sp, #40	@ 0x28
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4613      	mov	r3, r2
 800c87c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c884:	2b20      	cmp	r3, #32
 800c886:	d137      	bne.n	800c8f8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <HAL_UART_Receive_DMA+0x24>
 800c88e:	88fb      	ldrh	r3, [r7, #6]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d101      	bne.n	800c898 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c894:	2301      	movs	r3, #1
 800c896:	e030      	b.n	800c8fa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a18      	ldr	r2, [pc, #96]	@ (800c904 <HAL_UART_Receive_DMA+0x94>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d01f      	beq.n	800c8e8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d018      	beq.n	800c8e8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	e853 3f00 	ldrex	r3, [r3]
 800c8c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c8ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d4:	623b      	str	r3, [r7, #32]
 800c8d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d8:	69f9      	ldr	r1, [r7, #28]
 800c8da:	6a3a      	ldr	r2, [r7, #32]
 800c8dc:	e841 2300 	strex	r3, r2, [r1]
 800c8e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1e6      	bne.n	800c8b6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c8e8:	88fb      	ldrh	r3, [r7, #6]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	68b9      	ldr	r1, [r7, #8]
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f001 fa2c 	bl	800dd4c <UART_Start_Receive_DMA>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	e000      	b.n	800c8fa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c8f8:	2302      	movs	r3, #2
  }
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3728      	adds	r7, #40	@ 0x28
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	40008000 	.word	0x40008000

0800c908 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b0a0      	sub	sp, #128	@ 0x80
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c918:	e853 3f00 	ldrex	r3, [r3]
 800c91c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c91e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c920:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800c924:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c92e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c930:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c932:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c934:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c936:	e841 2300 	strex	r3, r2, [r1]
 800c93a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c93c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1e6      	bne.n	800c910 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3308      	adds	r3, #8
 800c948:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c94c:	e853 3f00 	ldrex	r3, [r3]
 800c950:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c954:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800c958:	f023 0301 	bic.w	r3, r3, #1
 800c95c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3308      	adds	r3, #8
 800c964:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c966:	657a      	str	r2, [r7, #84]	@ 0x54
 800c968:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c96c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c96e:	e841 2300 	strex	r3, r2, [r1]
 800c972:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1e3      	bne.n	800c942 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d118      	bne.n	800c9b4 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c992:	f023 0310 	bic.w	r3, r3, #16
 800c996:	677b      	str	r3, [r7, #116]	@ 0x74
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9a8:	e841 2300 	strex	r3, r2, [r1]
 800c9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1e6      	bne.n	800c982 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9be:	2b80      	cmp	r3, #128	@ 0x80
 800c9c0:	d137      	bne.n	800ca32 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3308      	adds	r3, #8
 800c9c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ca:	6a3b      	ldr	r3, [r7, #32]
 800c9cc:	e853 3f00 	ldrex	r3, [r3]
 800c9d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9d8:	673b      	str	r3, [r7, #112]	@ 0x70
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3308      	adds	r3, #8
 800c9e0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c9e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ea:	e841 2300 	strex	r3, r2, [r1]
 800c9ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1e5      	bne.n	800c9c2 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d019      	beq.n	800ca32 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca02:	2200      	movs	r2, #0
 800ca04:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fb f86d 	bl	8007aea <HAL_DMA_Abort>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00d      	beq.n	800ca32 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fb f9d4 	bl	8007dc8 <HAL_DMA_GetError>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b20      	cmp	r3, #32
 800ca24:	d105      	bne.n	800ca32 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2210      	movs	r2, #16
 800ca2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	e073      	b.n	800cb1a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca3c:	2b40      	cmp	r3, #64	@ 0x40
 800ca3e:	d13b      	bne.n	800cab8 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3308      	adds	r3, #8
 800ca46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	e853 3f00 	ldrex	r3, [r3]
 800ca4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca60:	61ba      	str	r2, [r7, #24]
 800ca62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	6979      	ldr	r1, [r7, #20]
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e5      	bne.n	800ca40 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d01c      	beq.n	800cab8 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca84:	2200      	movs	r2, #0
 800ca86:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fb f82b 	bl	8007aea <HAL_DMA_Abort>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00e      	beq.n	800cab8 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fb f991 	bl	8007dc8 <HAL_DMA_GetError>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b20      	cmp	r3, #32
 800caaa:	d105      	bne.n	800cab8 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2210      	movs	r2, #16
 800cab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800cab4:	2303      	movs	r3, #3
 800cab6:	e030      	b.n	800cb1a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	220f      	movs	r2, #15
 800cace:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cad8:	d107      	bne.n	800caea <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	699a      	ldr	r2, [r3, #24]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f042 0210 	orr.w	r2, r2, #16
 800cae8:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	699a      	ldr	r2, [r3, #24]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f042 0208 	orr.w	r2, r2, #8
 800caf8:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2220      	movs	r2, #32
 800cafe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2220      	movs	r2, #32
 800cb06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3780      	adds	r7, #128	@ 0x80
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
	...

0800cb24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b0ba      	sub	sp, #232	@ 0xe8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	69db      	ldr	r3, [r3, #28]
 800cb32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cb4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cb52:	4013      	ands	r3, r2
 800cb54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cb58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d11b      	bne.n	800cb98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb64:	f003 0320 	and.w	r3, r3, #32
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d015      	beq.n	800cb98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb70:	f003 0320 	and.w	r3, r3, #32
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d105      	bne.n	800cb84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d009      	beq.n	800cb98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 8300 	beq.w	800d18e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	4798      	blx	r3
      }
      return;
 800cb96:	e2fa      	b.n	800d18e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cb98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8123 	beq.w	800cde8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cba2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cba6:	4b8d      	ldr	r3, [pc, #564]	@ (800cddc <HAL_UART_IRQHandler+0x2b8>)
 800cba8:	4013      	ands	r3, r2
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d106      	bne.n	800cbbc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cbae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cbb2:	4b8b      	ldr	r3, [pc, #556]	@ (800cde0 <HAL_UART_IRQHandler+0x2bc>)
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f000 8116 	beq.w	800cde8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cbbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d011      	beq.n	800cbec <HAL_UART_IRQHandler+0xc8>
 800cbc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00b      	beq.n	800cbec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbe2:	f043 0201 	orr.w	r2, r3, #1
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbf0:	f003 0302 	and.w	r3, r3, #2
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d011      	beq.n	800cc1c <HAL_UART_IRQHandler+0xf8>
 800cbf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbfc:	f003 0301 	and.w	r3, r3, #1
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00b      	beq.n	800cc1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2202      	movs	r2, #2
 800cc0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc12:	f043 0204 	orr.w	r2, r3, #4
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc20:	f003 0304 	and.w	r3, r3, #4
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d011      	beq.n	800cc4c <HAL_UART_IRQHandler+0x128>
 800cc28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00b      	beq.n	800cc4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2204      	movs	r2, #4
 800cc3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc42:	f043 0202 	orr.w	r2, r3, #2
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d017      	beq.n	800cc88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc5c:	f003 0320 	and.w	r3, r3, #32
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d105      	bne.n	800cc70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc68:	4b5c      	ldr	r3, [pc, #368]	@ (800cddc <HAL_UART_IRQHandler+0x2b8>)
 800cc6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2208      	movs	r2, #8
 800cc76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc7e:	f043 0208 	orr.w	r2, r3, #8
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d012      	beq.n	800ccba <HAL_UART_IRQHandler+0x196>
 800cc94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00c      	beq.n	800ccba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb0:	f043 0220 	orr.w	r2, r3, #32
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 8266 	beq.w	800d192 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ccc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccca:	f003 0320 	and.w	r3, r3, #32
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d013      	beq.n	800ccfa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ccd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccd6:	f003 0320 	and.w	r3, r3, #32
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d105      	bne.n	800ccea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ccde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d007      	beq.n	800ccfa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd0e:	2b40      	cmp	r3, #64	@ 0x40
 800cd10:	d005      	beq.n	800cd1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d054      	beq.n	800cdc8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f001 f8fb 	bl	800df1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd2e:	2b40      	cmp	r3, #64	@ 0x40
 800cd30:	d146      	bne.n	800cdc0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	3308      	adds	r3, #8
 800cd38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd40:	e853 3f00 	ldrex	r3, [r3]
 800cd44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cd48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3308      	adds	r3, #8
 800cd5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cd5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cd62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cd6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cd6e:	e841 2300 	strex	r3, r2, [r1]
 800cd72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cd76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1d9      	bne.n	800cd32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d017      	beq.n	800cdb8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd8e:	4a15      	ldr	r2, [pc, #84]	@ (800cde4 <HAL_UART_IRQHandler+0x2c0>)
 800cd90:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fa feff 	bl	8007b9c <HAL_DMA_Abort_IT>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d019      	beq.n	800cdd8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdb6:	e00f      	b.n	800cdd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 fa09 	bl	800d1d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdbe:	e00b      	b.n	800cdd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fa05 	bl	800d1d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdc6:	e007      	b.n	800cdd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fa01 	bl	800d1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cdd6:	e1dc      	b.n	800d192 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdd8:	bf00      	nop
    return;
 800cdda:	e1da      	b.n	800d192 <HAL_UART_IRQHandler+0x66e>
 800cddc:	10000001 	.word	0x10000001
 800cde0:	04000120 	.word	0x04000120
 800cde4:	0800e1d1 	.word	0x0800e1d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	f040 8170 	bne.w	800d0d2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cdf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdf6:	f003 0310 	and.w	r3, r3, #16
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f000 8169 	beq.w	800d0d2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce04:	f003 0310 	and.w	r3, r3, #16
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 8162 	beq.w	800d0d2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2210      	movs	r2, #16
 800ce14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce20:	2b40      	cmp	r3, #64	@ 0x40
 800ce22:	f040 80d8 	bne.w	800cfd6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 80af 	beq.w	800cf9c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	f080 80a7 	bcs.w	800cf9c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f003 0320 	and.w	r3, r3, #32
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f040 8087 	bne.w	800cf7a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce78:	e853 3f00 	ldrex	r3, [r3]
 800ce7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ce80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	461a      	mov	r2, r3
 800ce92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cea6:	e841 2300 	strex	r3, r2, [r1]
 800ceaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ceae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1da      	bne.n	800ce6c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3308      	adds	r3, #8
 800cebc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cec8:	f023 0301 	bic.w	r3, r3, #1
 800cecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	3308      	adds	r3, #8
 800ced6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ceda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cede:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cee6:	e841 2300 	strex	r3, r2, [r1]
 800ceea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ceec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1e1      	bne.n	800ceb6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3308      	adds	r3, #8
 800cef8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cefc:	e853 3f00 	ldrex	r3, [r3]
 800cf00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3308      	adds	r3, #8
 800cf12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf1e:	e841 2300 	strex	r3, r2, [r1]
 800cf22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e3      	bne.n	800cef2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2220      	movs	r2, #32
 800cf2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf40:	e853 3f00 	ldrex	r3, [r3]
 800cf44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf48:	f023 0310 	bic.w	r3, r3, #16
 800cf4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf62:	e841 2300 	strex	r3, r2, [r1]
 800cf66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1e4      	bne.n	800cf38 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fa fdb8 	bl	8007aea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f925 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cf9a:	e0fc      	b.n	800d196 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cfa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	f040 80f5 	bne.w	800d196 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f003 0320 	and.w	r3, r3, #32
 800cfba:	2b20      	cmp	r3, #32
 800cfbc:	f040 80eb 	bne.w	800d196 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f908 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
      return;
 800cfd4:	e0df      	b.n	800d196 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f000 80d1 	beq.w	800d19a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800cff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f000 80cc 	beq.w	800d19a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d00a:	e853 3f00 	ldrex	r3, [r3]
 800d00e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d016:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	461a      	mov	r2, r3
 800d020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d024:	647b      	str	r3, [r7, #68]	@ 0x44
 800d026:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d02a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d02c:	e841 2300 	strex	r3, r2, [r1]
 800d030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1e4      	bne.n	800d002 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3308      	adds	r3, #8
 800d03e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d042:	e853 3f00 	ldrex	r3, [r3]
 800d046:	623b      	str	r3, [r7, #32]
   return(result);
 800d048:	6a3b      	ldr	r3, [r7, #32]
 800d04a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d04e:	f023 0301 	bic.w	r3, r3, #1
 800d052:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3308      	adds	r3, #8
 800d05c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d060:	633a      	str	r2, [r7, #48]	@ 0x30
 800d062:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d068:	e841 2300 	strex	r3, r2, [r1]
 800d06c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1e1      	bne.n	800d038 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2220      	movs	r2, #32
 800d078:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	e853 3f00 	ldrex	r3, [r3]
 800d094:	60fb      	str	r3, [r7, #12]
   return(result);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f023 0310 	bic.w	r3, r3, #16
 800d09c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d0aa:	61fb      	str	r3, [r7, #28]
 800d0ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ae:	69b9      	ldr	r1, [r7, #24]
 800d0b0:	69fa      	ldr	r2, [r7, #28]
 800d0b2:	e841 2300 	strex	r3, r2, [r1]
 800d0b6:	617b      	str	r3, [r7, #20]
   return(result);
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1e4      	bne.n	800d088 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 f88a 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0d0:	e063      	b.n	800d19a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00e      	beq.n	800d0fc <HAL_UART_IRQHandler+0x5d8>
 800d0de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d008      	beq.n	800d0fc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d0f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f001 fdc9 	bl	800ec8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0fa:	e051      	b.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d104:	2b00      	cmp	r3, #0
 800d106:	d014      	beq.n	800d132 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d10c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d110:	2b00      	cmp	r3, #0
 800d112:	d105      	bne.n	800d120 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d008      	beq.n	800d132 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d124:	2b00      	cmp	r3, #0
 800d126:	d03a      	beq.n	800d19e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	4798      	blx	r3
    }
    return;
 800d130:	e035      	b.n	800d19e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <HAL_UART_IRQHandler+0x62e>
 800d13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d146:	2b00      	cmp	r3, #0
 800d148:	d003      	beq.n	800d152 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 f852 	bl	800e1f4 <UART_EndTransmit_IT>
    return;
 800d150:	e026      	b.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d009      	beq.n	800d172 <HAL_UART_IRQHandler+0x64e>
 800d15e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d162:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d166:	2b00      	cmp	r3, #0
 800d168:	d003      	beq.n	800d172 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f001 fda2 	bl	800ecb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d170:	e016      	b.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d176:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d010      	beq.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
 800d17e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d182:	2b00      	cmp	r3, #0
 800d184:	da0c      	bge.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f001 fd8a 	bl	800eca0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d18c:	e008      	b.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
      return;
 800d18e:	bf00      	nop
 800d190:	e006      	b.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
    return;
 800d192:	bf00      	nop
 800d194:	e004      	b.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
      return;
 800d196:	bf00      	nop
 800d198:	e002      	b.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
      return;
 800d19a:	bf00      	nop
 800d19c:	e000      	b.n	800d1a0 <HAL_UART_IRQHandler+0x67c>
    return;
 800d19e:	bf00      	nop
  }
}
 800d1a0:	37e8      	adds	r7, #232	@ 0xe8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop

0800d1a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d200:	b08c      	sub	sp, #48	@ 0x30
 800d202:	af00      	add	r7, sp, #0
 800d204:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d206:	2300      	movs	r3, #0
 800d208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	689a      	ldr	r2, [r3, #8]
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	431a      	orrs	r2, r3
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	695b      	ldr	r3, [r3, #20]
 800d21a:	431a      	orrs	r2, r3
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	69db      	ldr	r3, [r3, #28]
 800d220:	4313      	orrs	r3, r2
 800d222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	4bab      	ldr	r3, [pc, #684]	@ (800d4d8 <UART_SetConfig+0x2dc>)
 800d22c:	4013      	ands	r3, r2
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	6812      	ldr	r2, [r2, #0]
 800d232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d234:	430b      	orrs	r3, r1
 800d236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	68da      	ldr	r2, [r3, #12]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	430a      	orrs	r2, r1
 800d24c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	699b      	ldr	r3, [r3, #24]
 800d252:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4aa0      	ldr	r2, [pc, #640]	@ (800d4dc <UART_SetConfig+0x2e0>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d004      	beq.n	800d268 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	6a1b      	ldr	r3, [r3, #32]
 800d262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d264:	4313      	orrs	r3, r2
 800d266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d272:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	6812      	ldr	r2, [r2, #0]
 800d27a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d27c:	430b      	orrs	r3, r1
 800d27e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d286:	f023 010f 	bic.w	r1, r3, #15
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	430a      	orrs	r2, r1
 800d294:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a91      	ldr	r2, [pc, #580]	@ (800d4e0 <UART_SetConfig+0x2e4>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d125      	bne.n	800d2ec <UART_SetConfig+0xf0>
 800d2a0:	4b90      	ldr	r3, [pc, #576]	@ (800d4e4 <UART_SetConfig+0x2e8>)
 800d2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2a6:	f003 0303 	and.w	r3, r3, #3
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	d81a      	bhi.n	800d2e4 <UART_SetConfig+0xe8>
 800d2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b4 <UART_SetConfig+0xb8>)
 800d2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b4:	0800d2c5 	.word	0x0800d2c5
 800d2b8:	0800d2d5 	.word	0x0800d2d5
 800d2bc:	0800d2cd 	.word	0x0800d2cd
 800d2c0:	0800d2dd 	.word	0x0800d2dd
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2ca:	e0d6      	b.n	800d47a <UART_SetConfig+0x27e>
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2d2:	e0d2      	b.n	800d47a <UART_SetConfig+0x27e>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2da:	e0ce      	b.n	800d47a <UART_SetConfig+0x27e>
 800d2dc:	2308      	movs	r3, #8
 800d2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2e2:	e0ca      	b.n	800d47a <UART_SetConfig+0x27e>
 800d2e4:	2310      	movs	r3, #16
 800d2e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2ea:	e0c6      	b.n	800d47a <UART_SetConfig+0x27e>
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a7d      	ldr	r2, [pc, #500]	@ (800d4e8 <UART_SetConfig+0x2ec>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d138      	bne.n	800d368 <UART_SetConfig+0x16c>
 800d2f6:	4b7b      	ldr	r3, [pc, #492]	@ (800d4e4 <UART_SetConfig+0x2e8>)
 800d2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2fc:	f003 030c 	and.w	r3, r3, #12
 800d300:	2b0c      	cmp	r3, #12
 800d302:	d82d      	bhi.n	800d360 <UART_SetConfig+0x164>
 800d304:	a201      	add	r2, pc, #4	@ (adr r2, 800d30c <UART_SetConfig+0x110>)
 800d306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30a:	bf00      	nop
 800d30c:	0800d341 	.word	0x0800d341
 800d310:	0800d361 	.word	0x0800d361
 800d314:	0800d361 	.word	0x0800d361
 800d318:	0800d361 	.word	0x0800d361
 800d31c:	0800d351 	.word	0x0800d351
 800d320:	0800d361 	.word	0x0800d361
 800d324:	0800d361 	.word	0x0800d361
 800d328:	0800d361 	.word	0x0800d361
 800d32c:	0800d349 	.word	0x0800d349
 800d330:	0800d361 	.word	0x0800d361
 800d334:	0800d361 	.word	0x0800d361
 800d338:	0800d361 	.word	0x0800d361
 800d33c:	0800d359 	.word	0x0800d359
 800d340:	2300      	movs	r3, #0
 800d342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d346:	e098      	b.n	800d47a <UART_SetConfig+0x27e>
 800d348:	2302      	movs	r3, #2
 800d34a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d34e:	e094      	b.n	800d47a <UART_SetConfig+0x27e>
 800d350:	2304      	movs	r3, #4
 800d352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d356:	e090      	b.n	800d47a <UART_SetConfig+0x27e>
 800d358:	2308      	movs	r3, #8
 800d35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d35e:	e08c      	b.n	800d47a <UART_SetConfig+0x27e>
 800d360:	2310      	movs	r3, #16
 800d362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d366:	e088      	b.n	800d47a <UART_SetConfig+0x27e>
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a5f      	ldr	r2, [pc, #380]	@ (800d4ec <UART_SetConfig+0x2f0>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d125      	bne.n	800d3be <UART_SetConfig+0x1c2>
 800d372:	4b5c      	ldr	r3, [pc, #368]	@ (800d4e4 <UART_SetConfig+0x2e8>)
 800d374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d378:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d37c:	2b30      	cmp	r3, #48	@ 0x30
 800d37e:	d016      	beq.n	800d3ae <UART_SetConfig+0x1b2>
 800d380:	2b30      	cmp	r3, #48	@ 0x30
 800d382:	d818      	bhi.n	800d3b6 <UART_SetConfig+0x1ba>
 800d384:	2b20      	cmp	r3, #32
 800d386:	d00a      	beq.n	800d39e <UART_SetConfig+0x1a2>
 800d388:	2b20      	cmp	r3, #32
 800d38a:	d814      	bhi.n	800d3b6 <UART_SetConfig+0x1ba>
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <UART_SetConfig+0x19a>
 800d390:	2b10      	cmp	r3, #16
 800d392:	d008      	beq.n	800d3a6 <UART_SetConfig+0x1aa>
 800d394:	e00f      	b.n	800d3b6 <UART_SetConfig+0x1ba>
 800d396:	2300      	movs	r3, #0
 800d398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d39c:	e06d      	b.n	800d47a <UART_SetConfig+0x27e>
 800d39e:	2302      	movs	r3, #2
 800d3a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3a4:	e069      	b.n	800d47a <UART_SetConfig+0x27e>
 800d3a6:	2304      	movs	r3, #4
 800d3a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3ac:	e065      	b.n	800d47a <UART_SetConfig+0x27e>
 800d3ae:	2308      	movs	r3, #8
 800d3b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3b4:	e061      	b.n	800d47a <UART_SetConfig+0x27e>
 800d3b6:	2310      	movs	r3, #16
 800d3b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3bc:	e05d      	b.n	800d47a <UART_SetConfig+0x27e>
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a4b      	ldr	r2, [pc, #300]	@ (800d4f0 <UART_SetConfig+0x2f4>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d125      	bne.n	800d414 <UART_SetConfig+0x218>
 800d3c8:	4b46      	ldr	r3, [pc, #280]	@ (800d4e4 <UART_SetConfig+0x2e8>)
 800d3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d3d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800d3d4:	d016      	beq.n	800d404 <UART_SetConfig+0x208>
 800d3d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d3d8:	d818      	bhi.n	800d40c <UART_SetConfig+0x210>
 800d3da:	2b80      	cmp	r3, #128	@ 0x80
 800d3dc:	d00a      	beq.n	800d3f4 <UART_SetConfig+0x1f8>
 800d3de:	2b80      	cmp	r3, #128	@ 0x80
 800d3e0:	d814      	bhi.n	800d40c <UART_SetConfig+0x210>
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d002      	beq.n	800d3ec <UART_SetConfig+0x1f0>
 800d3e6:	2b40      	cmp	r3, #64	@ 0x40
 800d3e8:	d008      	beq.n	800d3fc <UART_SetConfig+0x200>
 800d3ea:	e00f      	b.n	800d40c <UART_SetConfig+0x210>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3f2:	e042      	b.n	800d47a <UART_SetConfig+0x27e>
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3fa:	e03e      	b.n	800d47a <UART_SetConfig+0x27e>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d402:	e03a      	b.n	800d47a <UART_SetConfig+0x27e>
 800d404:	2308      	movs	r3, #8
 800d406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d40a:	e036      	b.n	800d47a <UART_SetConfig+0x27e>
 800d40c:	2310      	movs	r3, #16
 800d40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d412:	e032      	b.n	800d47a <UART_SetConfig+0x27e>
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a30      	ldr	r2, [pc, #192]	@ (800d4dc <UART_SetConfig+0x2e0>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d12a      	bne.n	800d474 <UART_SetConfig+0x278>
 800d41e:	4b31      	ldr	r3, [pc, #196]	@ (800d4e4 <UART_SetConfig+0x2e8>)
 800d420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d424:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d428:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d42c:	d01a      	beq.n	800d464 <UART_SetConfig+0x268>
 800d42e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d432:	d81b      	bhi.n	800d46c <UART_SetConfig+0x270>
 800d434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d438:	d00c      	beq.n	800d454 <UART_SetConfig+0x258>
 800d43a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d43e:	d815      	bhi.n	800d46c <UART_SetConfig+0x270>
 800d440:	2b00      	cmp	r3, #0
 800d442:	d003      	beq.n	800d44c <UART_SetConfig+0x250>
 800d444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d448:	d008      	beq.n	800d45c <UART_SetConfig+0x260>
 800d44a:	e00f      	b.n	800d46c <UART_SetConfig+0x270>
 800d44c:	2300      	movs	r3, #0
 800d44e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d452:	e012      	b.n	800d47a <UART_SetConfig+0x27e>
 800d454:	2302      	movs	r3, #2
 800d456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d45a:	e00e      	b.n	800d47a <UART_SetConfig+0x27e>
 800d45c:	2304      	movs	r3, #4
 800d45e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d462:	e00a      	b.n	800d47a <UART_SetConfig+0x27e>
 800d464:	2308      	movs	r3, #8
 800d466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d46a:	e006      	b.n	800d47a <UART_SetConfig+0x27e>
 800d46c:	2310      	movs	r3, #16
 800d46e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d472:	e002      	b.n	800d47a <UART_SetConfig+0x27e>
 800d474:	2310      	movs	r3, #16
 800d476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a17      	ldr	r2, [pc, #92]	@ (800d4dc <UART_SetConfig+0x2e0>)
 800d480:	4293      	cmp	r3, r2
 800d482:	f040 80a8 	bne.w	800d5d6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d486:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d48a:	2b08      	cmp	r3, #8
 800d48c:	d834      	bhi.n	800d4f8 <UART_SetConfig+0x2fc>
 800d48e:	a201      	add	r2, pc, #4	@ (adr r2, 800d494 <UART_SetConfig+0x298>)
 800d490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d494:	0800d4b9 	.word	0x0800d4b9
 800d498:	0800d4f9 	.word	0x0800d4f9
 800d49c:	0800d4c1 	.word	0x0800d4c1
 800d4a0:	0800d4f9 	.word	0x0800d4f9
 800d4a4:	0800d4c7 	.word	0x0800d4c7
 800d4a8:	0800d4f9 	.word	0x0800d4f9
 800d4ac:	0800d4f9 	.word	0x0800d4f9
 800d4b0:	0800d4f9 	.word	0x0800d4f9
 800d4b4:	0800d4cf 	.word	0x0800d4cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4b8:	f7fc faa8 	bl	8009a0c <HAL_RCC_GetPCLK1Freq>
 800d4bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d4be:	e021      	b.n	800d504 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d4f4 <UART_SetConfig+0x2f8>)
 800d4c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d4c4:	e01e      	b.n	800d504 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4c6:	f7fc fa35 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 800d4ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d4cc:	e01a      	b.n	800d504 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d4d4:	e016      	b.n	800d504 <UART_SetConfig+0x308>
 800d4d6:	bf00      	nop
 800d4d8:	cfff69f3 	.word	0xcfff69f3
 800d4dc:	40008000 	.word	0x40008000
 800d4e0:	40013800 	.word	0x40013800
 800d4e4:	40021000 	.word	0x40021000
 800d4e8:	40004400 	.word	0x40004400
 800d4ec:	40004800 	.word	0x40004800
 800d4f0:	40004c00 	.word	0x40004c00
 800d4f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d502:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d506:	2b00      	cmp	r3, #0
 800d508:	f000 812a 	beq.w	800d760 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d510:	4a9e      	ldr	r2, [pc, #632]	@ (800d78c <UART_SetConfig+0x590>)
 800d512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d516:	461a      	mov	r2, r3
 800d518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d51e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	4613      	mov	r3, r2
 800d526:	005b      	lsls	r3, r3, #1
 800d528:	4413      	add	r3, r2
 800d52a:	69ba      	ldr	r2, [r7, #24]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d305      	bcc.n	800d53c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d536:	69ba      	ldr	r2, [r7, #24]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d903      	bls.n	800d544 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d542:	e10d      	b.n	800d760 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d546:	2200      	movs	r2, #0
 800d548:	60bb      	str	r3, [r7, #8]
 800d54a:	60fa      	str	r2, [r7, #12]
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d550:	4a8e      	ldr	r2, [pc, #568]	@ (800d78c <UART_SetConfig+0x590>)
 800d552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d556:	b29b      	uxth	r3, r3
 800d558:	2200      	movs	r2, #0
 800d55a:	603b      	str	r3, [r7, #0]
 800d55c:	607a      	str	r2, [r7, #4]
 800d55e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d566:	f7f3 fbb7 	bl	8000cd8 <__aeabi_uldivmod>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4610      	mov	r0, r2
 800d570:	4619      	mov	r1, r3
 800d572:	f04f 0200 	mov.w	r2, #0
 800d576:	f04f 0300 	mov.w	r3, #0
 800d57a:	020b      	lsls	r3, r1, #8
 800d57c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d580:	0202      	lsls	r2, r0, #8
 800d582:	6979      	ldr	r1, [r7, #20]
 800d584:	6849      	ldr	r1, [r1, #4]
 800d586:	0849      	lsrs	r1, r1, #1
 800d588:	2000      	movs	r0, #0
 800d58a:	460c      	mov	r4, r1
 800d58c:	4605      	mov	r5, r0
 800d58e:	eb12 0804 	adds.w	r8, r2, r4
 800d592:	eb43 0905 	adc.w	r9, r3, r5
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	469a      	mov	sl, r3
 800d59e:	4693      	mov	fp, r2
 800d5a0:	4652      	mov	r2, sl
 800d5a2:	465b      	mov	r3, fp
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	4649      	mov	r1, r9
 800d5a8:	f7f3 fb96 	bl	8000cd8 <__aeabi_uldivmod>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d5b4:	6a3b      	ldr	r3, [r7, #32]
 800d5b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d5ba:	d308      	bcc.n	800d5ce <UART_SetConfig+0x3d2>
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5c2:	d204      	bcs.n	800d5ce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6a3a      	ldr	r2, [r7, #32]
 800d5ca:	60da      	str	r2, [r3, #12]
 800d5cc:	e0c8      	b.n	800d760 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d5d4:	e0c4      	b.n	800d760 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	69db      	ldr	r3, [r3, #28]
 800d5da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d5de:	d167      	bne.n	800d6b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d5e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d828      	bhi.n	800d63a <UART_SetConfig+0x43e>
 800d5e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f0 <UART_SetConfig+0x3f4>)
 800d5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ee:	bf00      	nop
 800d5f0:	0800d615 	.word	0x0800d615
 800d5f4:	0800d61d 	.word	0x0800d61d
 800d5f8:	0800d625 	.word	0x0800d625
 800d5fc:	0800d63b 	.word	0x0800d63b
 800d600:	0800d62b 	.word	0x0800d62b
 800d604:	0800d63b 	.word	0x0800d63b
 800d608:	0800d63b 	.word	0x0800d63b
 800d60c:	0800d63b 	.word	0x0800d63b
 800d610:	0800d633 	.word	0x0800d633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d614:	f7fc f9fa 	bl	8009a0c <HAL_RCC_GetPCLK1Freq>
 800d618:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d61a:	e014      	b.n	800d646 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d61c:	f7fc fa0c 	bl	8009a38 <HAL_RCC_GetPCLK2Freq>
 800d620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d622:	e010      	b.n	800d646 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d624:	4b5a      	ldr	r3, [pc, #360]	@ (800d790 <UART_SetConfig+0x594>)
 800d626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d628:	e00d      	b.n	800d646 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d62a:	f7fc f983 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 800d62e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d630:	e009      	b.n	800d646 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d638:	e005      	b.n	800d646 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d63a:	2300      	movs	r3, #0
 800d63c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 8089 	beq.w	800d760 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d652:	4a4e      	ldr	r2, [pc, #312]	@ (800d78c <UART_SetConfig+0x590>)
 800d654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d658:	461a      	mov	r2, r3
 800d65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d660:	005a      	lsls	r2, r3, #1
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	085b      	lsrs	r3, r3, #1
 800d668:	441a      	add	r2, r3
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d672:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	2b0f      	cmp	r3, #15
 800d678:	d916      	bls.n	800d6a8 <UART_SetConfig+0x4ac>
 800d67a:	6a3b      	ldr	r3, [r7, #32]
 800d67c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d680:	d212      	bcs.n	800d6a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	b29b      	uxth	r3, r3
 800d686:	f023 030f 	bic.w	r3, r3, #15
 800d68a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	085b      	lsrs	r3, r3, #1
 800d690:	b29b      	uxth	r3, r3
 800d692:	f003 0307 	and.w	r3, r3, #7
 800d696:	b29a      	uxth	r2, r3
 800d698:	8bfb      	ldrh	r3, [r7, #30]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	8bfa      	ldrh	r2, [r7, #30]
 800d6a4:	60da      	str	r2, [r3, #12]
 800d6a6:	e05b      	b.n	800d760 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d6ae:	e057      	b.n	800d760 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d6b4:	2b08      	cmp	r3, #8
 800d6b6:	d828      	bhi.n	800d70a <UART_SetConfig+0x50e>
 800d6b8:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c0 <UART_SetConfig+0x4c4>)
 800d6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6be:	bf00      	nop
 800d6c0:	0800d6e5 	.word	0x0800d6e5
 800d6c4:	0800d6ed 	.word	0x0800d6ed
 800d6c8:	0800d6f5 	.word	0x0800d6f5
 800d6cc:	0800d70b 	.word	0x0800d70b
 800d6d0:	0800d6fb 	.word	0x0800d6fb
 800d6d4:	0800d70b 	.word	0x0800d70b
 800d6d8:	0800d70b 	.word	0x0800d70b
 800d6dc:	0800d70b 	.word	0x0800d70b
 800d6e0:	0800d703 	.word	0x0800d703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6e4:	f7fc f992 	bl	8009a0c <HAL_RCC_GetPCLK1Freq>
 800d6e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d6ea:	e014      	b.n	800d716 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6ec:	f7fc f9a4 	bl	8009a38 <HAL_RCC_GetPCLK2Freq>
 800d6f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d6f2:	e010      	b.n	800d716 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6f4:	4b26      	ldr	r3, [pc, #152]	@ (800d790 <UART_SetConfig+0x594>)
 800d6f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d6f8:	e00d      	b.n	800d716 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6fa:	f7fc f91b 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 800d6fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d700:	e009      	b.n	800d716 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d708:	e005      	b.n	800d716 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d70a:	2300      	movs	r3, #0
 800d70c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d714:	bf00      	nop
    }

    if (pclk != 0U)
 800d716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d021      	beq.n	800d760 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d720:	4a1a      	ldr	r2, [pc, #104]	@ (800d78c <UART_SetConfig+0x590>)
 800d722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d726:	461a      	mov	r2, r3
 800d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	085b      	lsrs	r3, r3, #1
 800d734:	441a      	add	r2, r3
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d73e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	2b0f      	cmp	r3, #15
 800d744:	d909      	bls.n	800d75a <UART_SetConfig+0x55e>
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d74c:	d205      	bcs.n	800d75a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	b29a      	uxth	r2, r3
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	60da      	str	r2, [r3, #12]
 800d758:	e002      	b.n	800d760 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2201      	movs	r2, #1
 800d764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	2200      	movs	r2, #0
 800d774:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	2200      	movs	r2, #0
 800d77a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d77c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d780:	4618      	mov	r0, r3
 800d782:	3730      	adds	r7, #48	@ 0x30
 800d784:	46bd      	mov	sp, r7
 800d786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d78a:	bf00      	nop
 800d78c:	0801c7e4 	.word	0x0801c7e4
 800d790:	00f42400 	.word	0x00f42400

0800d794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7a0:	f003 0308 	and.w	r3, r3, #8
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00a      	beq.n	800d7be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	430a      	orrs	r2, r1
 800d7bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7c2:	f003 0301 	and.w	r3, r3, #1
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	430a      	orrs	r2, r1
 800d7de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e4:	f003 0302 	and.w	r3, r3, #2
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00a      	beq.n	800d802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	430a      	orrs	r2, r1
 800d800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d806:	f003 0304 	and.w	r3, r3, #4
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00a      	beq.n	800d824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	430a      	orrs	r2, r1
 800d822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d828:	f003 0310 	and.w	r3, r3, #16
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00a      	beq.n	800d846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	430a      	orrs	r2, r1
 800d844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d84a:	f003 0320 	and.w	r3, r3, #32
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00a      	beq.n	800d868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	430a      	orrs	r2, r1
 800d866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d870:	2b00      	cmp	r3, #0
 800d872:	d01a      	beq.n	800d8aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	430a      	orrs	r2, r1
 800d888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d88e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d892:	d10a      	bne.n	800d8aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	430a      	orrs	r2, r1
 800d8a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00a      	beq.n	800d8cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	430a      	orrs	r2, r1
 800d8ca:	605a      	str	r2, [r3, #4]
  }
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b098      	sub	sp, #96	@ 0x60
 800d8dc:	af02      	add	r7, sp, #8
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8e8:	f7f8 fa18 	bl	8005d1c <HAL_GetTick>
 800d8ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 0308 	and.w	r3, r3, #8
 800d8f8:	2b08      	cmp	r3, #8
 800d8fa:	d12f      	bne.n	800d95c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d904:	2200      	movs	r2, #0
 800d906:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f88e 	bl	800da2c <UART_WaitOnFlagUntilTimeout>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d022      	beq.n	800d95c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d91e:	e853 3f00 	ldrex	r3, [r3]
 800d922:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d92a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	461a      	mov	r2, r3
 800d932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d934:	647b      	str	r3, [r7, #68]	@ 0x44
 800d936:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d93a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d93c:	e841 2300 	strex	r3, r2, [r1]
 800d940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e6      	bne.n	800d916 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2220      	movs	r2, #32
 800d94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d958:	2303      	movs	r3, #3
 800d95a:	e063      	b.n	800da24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f003 0304 	and.w	r3, r3, #4
 800d966:	2b04      	cmp	r3, #4
 800d968:	d149      	bne.n	800d9fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d96a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d972:	2200      	movs	r2, #0
 800d974:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 f857 	bl	800da2c <UART_WaitOnFlagUntilTimeout>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d03c      	beq.n	800d9fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98c:	e853 3f00 	ldrex	r3, [r3]
 800d990:	623b      	str	r3, [r7, #32]
   return(result);
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9aa:	e841 2300 	strex	r3, r2, [r1]
 800d9ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1e6      	bne.n	800d984 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	3308      	adds	r3, #8
 800d9bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	e853 3f00 	ldrex	r3, [r3]
 800d9c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f023 0301 	bic.w	r3, r3, #1
 800d9cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9d6:	61fa      	str	r2, [r7, #28]
 800d9d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9da:	69b9      	ldr	r1, [r7, #24]
 800d9dc:	69fa      	ldr	r2, [r7, #28]
 800d9de:	e841 2300 	strex	r3, r2, [r1]
 800d9e2:	617b      	str	r3, [r7, #20]
   return(result);
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1e5      	bne.n	800d9b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2220      	movs	r2, #32
 800d9ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	e012      	b.n	800da24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2220      	movs	r2, #32
 800da02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2220      	movs	r2, #32
 800da0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3758      	adds	r7, #88	@ 0x58
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	603b      	str	r3, [r7, #0]
 800da38:	4613      	mov	r3, r2
 800da3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da3c:	e04f      	b.n	800dade <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da44:	d04b      	beq.n	800dade <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da46:	f7f8 f969 	bl	8005d1c <HAL_GetTick>
 800da4a:	4602      	mov	r2, r0
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	69ba      	ldr	r2, [r7, #24]
 800da52:	429a      	cmp	r2, r3
 800da54:	d302      	bcc.n	800da5c <UART_WaitOnFlagUntilTimeout+0x30>
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d101      	bne.n	800da60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800da5c:	2303      	movs	r3, #3
 800da5e:	e04e      	b.n	800dafe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 0304 	and.w	r3, r3, #4
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d037      	beq.n	800dade <UART_WaitOnFlagUntilTimeout+0xb2>
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2b80      	cmp	r3, #128	@ 0x80
 800da72:	d034      	beq.n	800dade <UART_WaitOnFlagUntilTimeout+0xb2>
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	2b40      	cmp	r3, #64	@ 0x40
 800da78:	d031      	beq.n	800dade <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	69db      	ldr	r3, [r3, #28]
 800da80:	f003 0308 	and.w	r3, r3, #8
 800da84:	2b08      	cmp	r3, #8
 800da86:	d110      	bne.n	800daaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2208      	movs	r2, #8
 800da8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f000 fa42 	bl	800df1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2208      	movs	r2, #8
 800da9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e029      	b.n	800dafe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	69db      	ldr	r3, [r3, #28]
 800dab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dab8:	d111      	bne.n	800dade <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f000 fa28 	bl	800df1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2220      	movs	r2, #32
 800dace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dada:	2303      	movs	r3, #3
 800dadc:	e00f      	b.n	800dafe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69da      	ldr	r2, [r3, #28]
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	4013      	ands	r3, r2
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	429a      	cmp	r2, r3
 800daec:	bf0c      	ite	eq
 800daee:	2301      	moveq	r3, #1
 800daf0:	2300      	movne	r3, #0
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	461a      	mov	r2, r3
 800daf6:	79fb      	ldrb	r3, [r7, #7]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d0a0      	beq.n	800da3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
	...

0800db08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db08:	b480      	push	{r7}
 800db0a:	b0a3      	sub	sp, #140	@ 0x8c
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	4613      	mov	r3, r2
 800db14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	88fa      	ldrh	r2, [r7, #6]
 800db20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	88fa      	ldrh	r2, [r7, #6]
 800db28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db3a:	d10e      	bne.n	800db5a <UART_Start_Receive_IT+0x52>
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d105      	bne.n	800db50 <UART_Start_Receive_IT+0x48>
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800db4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db4e:	e02d      	b.n	800dbac <UART_Start_Receive_IT+0xa4>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	22ff      	movs	r2, #255	@ 0xff
 800db54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db58:	e028      	b.n	800dbac <UART_Start_Receive_IT+0xa4>
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d10d      	bne.n	800db7e <UART_Start_Receive_IT+0x76>
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d104      	bne.n	800db74 <UART_Start_Receive_IT+0x6c>
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	22ff      	movs	r2, #255	@ 0xff
 800db6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db72:	e01b      	b.n	800dbac <UART_Start_Receive_IT+0xa4>
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	227f      	movs	r2, #127	@ 0x7f
 800db78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db7c:	e016      	b.n	800dbac <UART_Start_Receive_IT+0xa4>
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db86:	d10d      	bne.n	800dba4 <UART_Start_Receive_IT+0x9c>
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d104      	bne.n	800db9a <UART_Start_Receive_IT+0x92>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	227f      	movs	r2, #127	@ 0x7f
 800db94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db98:	e008      	b.n	800dbac <UART_Start_Receive_IT+0xa4>
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	223f      	movs	r2, #63	@ 0x3f
 800db9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dba2:	e003      	b.n	800dbac <UART_Start_Receive_IT+0xa4>
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2222      	movs	r2, #34	@ 0x22
 800dbb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3308      	adds	r3, #8
 800dbc2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dbc6:	e853 3f00 	ldrex	r3, [r3]
 800dbca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dbcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dbce:	f043 0301 	orr.w	r3, r3, #1
 800dbd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dbe0:	673a      	str	r2, [r7, #112]	@ 0x70
 800dbe2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800dbe6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800dbe8:	e841 2300 	strex	r3, r2, [r1]
 800dbec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800dbee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1e3      	bne.n	800dbbc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dbfc:	d14f      	bne.n	800dc9e <UART_Start_Receive_IT+0x196>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dc04:	88fa      	ldrh	r2, [r7, #6]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d349      	bcc.n	800dc9e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc12:	d107      	bne.n	800dc24 <UART_Start_Receive_IT+0x11c>
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d103      	bne.n	800dc24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	4a47      	ldr	r2, [pc, #284]	@ (800dd3c <UART_Start_Receive_IT+0x234>)
 800dc20:	675a      	str	r2, [r3, #116]	@ 0x74
 800dc22:	e002      	b.n	800dc2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	4a46      	ldr	r2, [pc, #280]	@ (800dd40 <UART_Start_Receive_IT+0x238>)
 800dc28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d01a      	beq.n	800dc68 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc3a:	e853 3f00 	ldrex	r3, [r3]
 800dc3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dc40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dc54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dc56:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dc5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dc5c:	e841 2300 	strex	r3, r2, [r1]
 800dc60:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800dc62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1e4      	bne.n	800dc32 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3308      	adds	r3, #8
 800dc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc72:	e853 3f00 	ldrex	r3, [r3]
 800dc76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dc7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	3308      	adds	r3, #8
 800dc86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dc88:	64ba      	str	r2, [r7, #72]	@ 0x48
 800dc8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dc8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc90:	e841 2300 	strex	r3, r2, [r1]
 800dc94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dc96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1e5      	bne.n	800dc68 <UART_Start_Receive_IT+0x160>
 800dc9c:	e046      	b.n	800dd2c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dca6:	d107      	bne.n	800dcb8 <UART_Start_Receive_IT+0x1b0>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d103      	bne.n	800dcb8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	4a24      	ldr	r2, [pc, #144]	@ (800dd44 <UART_Start_Receive_IT+0x23c>)
 800dcb4:	675a      	str	r2, [r3, #116]	@ 0x74
 800dcb6:	e002      	b.n	800dcbe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	4a23      	ldr	r2, [pc, #140]	@ (800dd48 <UART_Start_Receive_IT+0x240>)
 800dcbc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d019      	beq.n	800dcfa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcce:	e853 3f00 	ldrex	r3, [r3]
 800dcd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800dcda:	677b      	str	r3, [r7, #116]	@ 0x74
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	461a      	mov	r2, r3
 800dce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dce4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dce6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dcea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcec:	e841 2300 	strex	r3, r2, [r1]
 800dcf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dcf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d1e6      	bne.n	800dcc6 <UART_Start_Receive_IT+0x1be>
 800dcf8:	e018      	b.n	800dd2c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	e853 3f00 	ldrex	r3, [r3]
 800dd06:	613b      	str	r3, [r7, #16]
   return(result);
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	f043 0320 	orr.w	r3, r3, #32
 800dd0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	461a      	mov	r2, r3
 800dd16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd18:	623b      	str	r3, [r7, #32]
 800dd1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1c:	69f9      	ldr	r1, [r7, #28]
 800dd1e:	6a3a      	ldr	r2, [r7, #32]
 800dd20:	e841 2300 	strex	r3, r2, [r1]
 800dd24:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1e6      	bne.n	800dcfa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	378c      	adds	r7, #140	@ 0x8c
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	0800e921 	.word	0x0800e921
 800dd40:	0800e5bd 	.word	0x0800e5bd
 800dd44:	0800e405 	.word	0x0800e405
 800dd48:	0800e24d 	.word	0x0800e24d

0800dd4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b096      	sub	sp, #88	@ 0x58
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	4613      	mov	r3, r2
 800dd58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	88fa      	ldrh	r2, [r7, #6]
 800dd64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2222      	movs	r2, #34	@ 0x22
 800dd74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d02d      	beq.n	800ddde <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd88:	4a40      	ldr	r2, [pc, #256]	@ (800de8c <UART_Start_Receive_DMA+0x140>)
 800dd8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd92:	4a3f      	ldr	r2, [pc, #252]	@ (800de90 <UART_Start_Receive_DMA+0x144>)
 800dd94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd9c:	4a3d      	ldr	r2, [pc, #244]	@ (800de94 <UART_Start_Receive_DMA+0x148>)
 800dd9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dda6:	2200      	movs	r2, #0
 800dda8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	3324      	adds	r3, #36	@ 0x24
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	88fb      	ldrh	r3, [r7, #6]
 800ddc0:	f7f9 fe18 	bl	80079f4 <HAL_DMA_Start_IT>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d009      	beq.n	800ddde <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2210      	movs	r2, #16
 800ddce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2220      	movs	r2, #32
 800ddd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ddda:	2301      	movs	r3, #1
 800dddc:	e051      	b.n	800de82 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d018      	beq.n	800de18 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddee:	e853 3f00 	ldrex	r3, [r3]
 800ddf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ddf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ddfa:	657b      	str	r3, [r7, #84]	@ 0x54
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	461a      	mov	r2, r3
 800de02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de06:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800de0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de0c:	e841 2300 	strex	r3, r2, [r1]
 800de10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800de12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1e6      	bne.n	800dde6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3308      	adds	r3, #8
 800de1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de22:	e853 3f00 	ldrex	r3, [r3]
 800de26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	f043 0301 	orr.w	r3, r3, #1
 800de2e:	653b      	str	r3, [r7, #80]	@ 0x50
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3308      	adds	r3, #8
 800de36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de38:	637a      	str	r2, [r7, #52]	@ 0x34
 800de3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de40:	e841 2300 	strex	r3, r2, [r1]
 800de44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800de46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1e5      	bne.n	800de18 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3308      	adds	r3, #8
 800de52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	e853 3f00 	ldrex	r3, [r3]
 800de5a:	613b      	str	r3, [r7, #16]
   return(result);
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3308      	adds	r3, #8
 800de6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de6c:	623a      	str	r2, [r7, #32]
 800de6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de70:	69f9      	ldr	r1, [r7, #28]
 800de72:	6a3a      	ldr	r2, [r7, #32]
 800de74:	e841 2300 	strex	r3, r2, [r1]
 800de78:	61bb      	str	r3, [r7, #24]
   return(result);
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d1e5      	bne.n	800de4c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3758      	adds	r7, #88	@ 0x58
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	0800dfe7 	.word	0x0800dfe7
 800de90:	0800e113 	.word	0x0800e113
 800de94:	0800e151 	.word	0x0800e151

0800de98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de98:	b480      	push	{r7}
 800de9a:	b08f      	sub	sp, #60	@ 0x3c
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	e853 3f00 	ldrex	r3, [r3]
 800deac:	61fb      	str	r3, [r7, #28]
   return(result);
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800deb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	461a      	mov	r2, r3
 800debc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800debe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dec0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dec6:	e841 2300 	strex	r3, r2, [r1]
 800deca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800decc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1e6      	bne.n	800dea0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	3308      	adds	r3, #8
 800ded8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	e853 3f00 	ldrex	r3, [r3]
 800dee0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dee8:	633b      	str	r3, [r7, #48]	@ 0x30
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	3308      	adds	r3, #8
 800def0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800def2:	61ba      	str	r2, [r7, #24]
 800def4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def6:	6979      	ldr	r1, [r7, #20]
 800def8:	69ba      	ldr	r2, [r7, #24]
 800defa:	e841 2300 	strex	r3, r2, [r1]
 800defe:	613b      	str	r3, [r7, #16]
   return(result);
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1e5      	bne.n	800ded2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2220      	movs	r2, #32
 800df0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800df0e:	bf00      	nop
 800df10:	373c      	adds	r7, #60	@ 0x3c
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b095      	sub	sp, #84	@ 0x54
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df2a:	e853 3f00 	ldrex	r3, [r3]
 800df2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	461a      	mov	r2, r3
 800df3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df40:	643b      	str	r3, [r7, #64]	@ 0x40
 800df42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df48:	e841 2300 	strex	r3, r2, [r1]
 800df4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1e6      	bne.n	800df22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	3308      	adds	r3, #8
 800df5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5c:	6a3b      	ldr	r3, [r7, #32]
 800df5e:	e853 3f00 	ldrex	r3, [r3]
 800df62:	61fb      	str	r3, [r7, #28]
   return(result);
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df6a:	f023 0301 	bic.w	r3, r3, #1
 800df6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	3308      	adds	r3, #8
 800df76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800df7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df80:	e841 2300 	strex	r3, r2, [r1]
 800df84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1e3      	bne.n	800df54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df90:	2b01      	cmp	r3, #1
 800df92:	d118      	bne.n	800dfc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	e853 3f00 	ldrex	r3, [r3]
 800dfa0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	f023 0310 	bic.w	r3, r3, #16
 800dfa8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfb2:	61bb      	str	r3, [r7, #24]
 800dfb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb6:	6979      	ldr	r1, [r7, #20]
 800dfb8:	69ba      	ldr	r2, [r7, #24]
 800dfba:	e841 2300 	strex	r3, r2, [r1]
 800dfbe:	613b      	str	r3, [r7, #16]
   return(result);
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1e6      	bne.n	800df94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2220      	movs	r2, #32
 800dfca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dfda:	bf00      	nop
 800dfdc:	3754      	adds	r7, #84	@ 0x54
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b09c      	sub	sp, #112	@ 0x70
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f003 0320 	and.w	r3, r3, #32
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d171      	bne.n	800e0e6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e004:	2200      	movs	r2, #0
 800e006:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e00a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e012:	e853 3f00 	ldrex	r3, [r3]
 800e016:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e01a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e01e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	461a      	mov	r2, r3
 800e026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e028:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e02a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e02e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e030:	e841 2300 	strex	r3, r2, [r1]
 800e034:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1e6      	bne.n	800e00a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e03c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	3308      	adds	r3, #8
 800e042:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e046:	e853 3f00 	ldrex	r3, [r3]
 800e04a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e04e:	f023 0301 	bic.w	r3, r3, #1
 800e052:	667b      	str	r3, [r7, #100]	@ 0x64
 800e054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3308      	adds	r3, #8
 800e05a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e05c:	647a      	str	r2, [r7, #68]	@ 0x44
 800e05e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e060:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e064:	e841 2300 	strex	r3, r2, [r1]
 800e068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1e5      	bne.n	800e03c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	3308      	adds	r3, #8
 800e076:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e07a:	e853 3f00 	ldrex	r3, [r3]
 800e07e:	623b      	str	r3, [r7, #32]
   return(result);
 800e080:	6a3b      	ldr	r3, [r7, #32]
 800e082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e086:	663b      	str	r3, [r7, #96]	@ 0x60
 800e088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3308      	adds	r3, #8
 800e08e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e090:	633a      	str	r2, [r7, #48]	@ 0x30
 800e092:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e094:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e098:	e841 2300 	strex	r3, r2, [r1]
 800e09c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1e5      	bne.n	800e070 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e0a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0a6:	2220      	movs	r2, #32
 800e0a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d118      	bne.n	800e0e6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	e853 3f00 	ldrex	r3, [r3]
 800e0c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f023 0310 	bic.w	r3, r3, #16
 800e0c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0d2:	61fb      	str	r3, [r7, #28]
 800e0d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d6:	69b9      	ldr	r1, [r7, #24]
 800e0d8:	69fa      	ldr	r2, [r7, #28]
 800e0da:	e841 2300 	strex	r3, r2, [r1]
 800e0de:	617b      	str	r3, [r7, #20]
   return(result);
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1e6      	bne.n	800e0b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e0e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d107      	bne.n	800e104 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e0fe:	f7ff f871 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e102:	e002      	b.n	800e10a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e104:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e106:	f7f7 f823 	bl	8005150 <HAL_UART_RxCpltCallback>
}
 800e10a:	bf00      	nop
 800e10c:	3770      	adds	r7, #112	@ 0x70
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b084      	sub	sp, #16
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e11e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2201      	movs	r2, #1
 800e124:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d109      	bne.n	800e142 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e134:	085b      	lsrs	r3, r3, #1
 800e136:	b29b      	uxth	r3, r3
 800e138:	4619      	mov	r1, r3
 800e13a:	68f8      	ldr	r0, [r7, #12]
 800e13c:	f7ff f852 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e140:	e002      	b.n	800e148 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f7ff f83a 	bl	800d1bc <HAL_UART_RxHalfCpltCallback>
}
 800e148:	bf00      	nop
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e164:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e16c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e178:	2b80      	cmp	r3, #128	@ 0x80
 800e17a:	d109      	bne.n	800e190 <UART_DMAError+0x40>
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	2b21      	cmp	r3, #33	@ 0x21
 800e180:	d106      	bne.n	800e190 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	2200      	movs	r2, #0
 800e186:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e18a:	6978      	ldr	r0, [r7, #20]
 800e18c:	f7ff fe84 	bl	800de98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e19a:	2b40      	cmp	r3, #64	@ 0x40
 800e19c:	d109      	bne.n	800e1b2 <UART_DMAError+0x62>
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2b22      	cmp	r3, #34	@ 0x22
 800e1a2:	d106      	bne.n	800e1b2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e1ac:	6978      	ldr	r0, [r7, #20]
 800e1ae:	f7ff feb4 	bl	800df1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1b8:	f043 0210 	orr.w	r2, r3, #16
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1c2:	6978      	ldr	r0, [r7, #20]
 800e1c4:	f7ff f804 	bl	800d1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1c8:	bf00      	nop
 800e1ca:	3718      	adds	r7, #24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f7fe fff2 	bl	800d1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1ec:	bf00      	nop
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b088      	sub	sp, #32
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	e853 3f00 	ldrex	r3, [r3]
 800e208:	60bb      	str	r3, [r7, #8]
   return(result);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e210:	61fb      	str	r3, [r7, #28]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	461a      	mov	r2, r3
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	61bb      	str	r3, [r7, #24]
 800e21c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21e:	6979      	ldr	r1, [r7, #20]
 800e220:	69ba      	ldr	r2, [r7, #24]
 800e222:	e841 2300 	strex	r3, r2, [r1]
 800e226:	613b      	str	r3, [r7, #16]
   return(result);
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1e6      	bne.n	800e1fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2220      	movs	r2, #32
 800e232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f7fe ffb3 	bl	800d1a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e242:	bf00      	nop
 800e244:	3720      	adds	r7, #32
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
	...

0800e24c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b09c      	sub	sp, #112	@ 0x70
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e25a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e264:	2b22      	cmp	r3, #34	@ 0x22
 800e266:	f040 80be 	bne.w	800e3e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e270:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e274:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e278:	b2d9      	uxtb	r1, r3
 800e27a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e27e:	b2da      	uxtb	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e284:	400a      	ands	r2, r1
 800e286:	b2d2      	uxtb	r2, r2
 800e288:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	3b01      	subs	r3, #1
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f040 80a1 	bne.w	800e3f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2bc:	e853 3f00 	ldrex	r3, [r3]
 800e2c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e2c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e2c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e2d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e2d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e2da:	e841 2300 	strex	r3, r2, [r1]
 800e2de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e2e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1e6      	bne.n	800e2b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3308      	adds	r3, #8
 800e2ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f0:	e853 3f00 	ldrex	r3, [r3]
 800e2f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2f8:	f023 0301 	bic.w	r3, r3, #1
 800e2fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3308      	adds	r3, #8
 800e304:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e306:	647a      	str	r2, [r7, #68]	@ 0x44
 800e308:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e30c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e30e:	e841 2300 	strex	r3, r2, [r1]
 800e312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1e5      	bne.n	800e2e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2220      	movs	r2, #32
 800e31e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a33      	ldr	r2, [pc, #204]	@ (800e400 <UART_RxISR_8BIT+0x1b4>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d01f      	beq.n	800e378 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e342:	2b00      	cmp	r3, #0
 800e344:	d018      	beq.n	800e378 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34e:	e853 3f00 	ldrex	r3, [r3]
 800e352:	623b      	str	r3, [r7, #32]
   return(result);
 800e354:	6a3b      	ldr	r3, [r7, #32]
 800e356:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e35a:	663b      	str	r3, [r7, #96]	@ 0x60
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	461a      	mov	r2, r3
 800e362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e364:	633b      	str	r3, [r7, #48]	@ 0x30
 800e366:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e368:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e36c:	e841 2300 	strex	r3, r2, [r1]
 800e370:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1e6      	bne.n	800e346 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d12e      	bne.n	800e3de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	e853 3f00 	ldrex	r3, [r3]
 800e392:	60fb      	str	r3, [r7, #12]
   return(result);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f023 0310 	bic.w	r3, r3, #16
 800e39a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3a4:	61fb      	str	r3, [r7, #28]
 800e3a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a8:	69b9      	ldr	r1, [r7, #24]
 800e3aa:	69fa      	ldr	r2, [r7, #28]
 800e3ac:	e841 2300 	strex	r3, r2, [r1]
 800e3b0:	617b      	str	r3, [r7, #20]
   return(result);
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e6      	bne.n	800e386 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	69db      	ldr	r3, [r3, #28]
 800e3be:	f003 0310 	and.w	r3, r3, #16
 800e3c2:	2b10      	cmp	r3, #16
 800e3c4:	d103      	bne.n	800e3ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2210      	movs	r2, #16
 800e3cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7fe ff04 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3dc:	e00b      	b.n	800e3f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7f6 feb6 	bl	8005150 <HAL_UART_RxCpltCallback>
}
 800e3e4:	e007      	b.n	800e3f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	699a      	ldr	r2, [r3, #24]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f042 0208 	orr.w	r2, r2, #8
 800e3f4:	619a      	str	r2, [r3, #24]
}
 800e3f6:	bf00      	nop
 800e3f8:	3770      	adds	r7, #112	@ 0x70
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	40008000 	.word	0x40008000

0800e404 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b09c      	sub	sp, #112	@ 0x70
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e412:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e41c:	2b22      	cmp	r3, #34	@ 0x22
 800e41e:	f040 80be 	bne.w	800e59e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e428:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e430:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e432:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e436:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e43a:	4013      	ands	r3, r2
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e440:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e446:	1c9a      	adds	r2, r3, #2
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e452:	b29b      	uxth	r3, r3
 800e454:	3b01      	subs	r3, #1
 800e456:	b29a      	uxth	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e464:	b29b      	uxth	r3, r3
 800e466:	2b00      	cmp	r3, #0
 800e468:	f040 80a1 	bne.w	800e5ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e474:	e853 3f00 	ldrex	r3, [r3]
 800e478:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e47a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e47c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e480:	667b      	str	r3, [r7, #100]	@ 0x64
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	461a      	mov	r2, r3
 800e488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e48a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e48c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e490:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e492:	e841 2300 	strex	r3, r2, [r1]
 800e496:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1e6      	bne.n	800e46c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3308      	adds	r3, #8
 800e4a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b0:	f023 0301 	bic.w	r3, r3, #1
 800e4b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e4be:	643a      	str	r2, [r7, #64]	@ 0x40
 800e4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e4c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e5      	bne.n	800e49e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2220      	movs	r2, #32
 800e4d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a33      	ldr	r2, [pc, #204]	@ (800e5b8 <UART_RxISR_16BIT+0x1b4>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d01f      	beq.n	800e530 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d018      	beq.n	800e530 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	e853 3f00 	ldrex	r3, [r3]
 800e50a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	461a      	mov	r2, r3
 800e51a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e51c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e51e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e524:	e841 2300 	strex	r3, r2, [r1]
 800e528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1e6      	bne.n	800e4fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e534:	2b01      	cmp	r3, #1
 800e536:	d12e      	bne.n	800e596 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	e853 3f00 	ldrex	r3, [r3]
 800e54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	f023 0310 	bic.w	r3, r3, #16
 800e552:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	461a      	mov	r2, r3
 800e55a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e55c:	61bb      	str	r3, [r7, #24]
 800e55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e560:	6979      	ldr	r1, [r7, #20]
 800e562:	69ba      	ldr	r2, [r7, #24]
 800e564:	e841 2300 	strex	r3, r2, [r1]
 800e568:	613b      	str	r3, [r7, #16]
   return(result);
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1e6      	bne.n	800e53e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	69db      	ldr	r3, [r3, #28]
 800e576:	f003 0310 	and.w	r3, r3, #16
 800e57a:	2b10      	cmp	r3, #16
 800e57c:	d103      	bne.n	800e586 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2210      	movs	r2, #16
 800e584:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e58c:	4619      	mov	r1, r3
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7fe fe28 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e594:	e00b      	b.n	800e5ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7f6 fdda 	bl	8005150 <HAL_UART_RxCpltCallback>
}
 800e59c:	e007      	b.n	800e5ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	699a      	ldr	r2, [r3, #24]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f042 0208 	orr.w	r2, r2, #8
 800e5ac:	619a      	str	r2, [r3, #24]
}
 800e5ae:	bf00      	nop
 800e5b0:	3770      	adds	r7, #112	@ 0x70
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	40008000 	.word	0x40008000

0800e5bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b0ac      	sub	sp, #176	@ 0xb0
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e5ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	69db      	ldr	r3, [r3, #28]
 800e5d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5f2:	2b22      	cmp	r3, #34	@ 0x22
 800e5f4:	f040 8183 	bne.w	800e8fe <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e5fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e602:	e126      	b.n	800e852 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e60a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e60e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e612:	b2d9      	uxtb	r1, r3
 800e614:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e61e:	400a      	ands	r2, r1
 800e620:	b2d2      	uxtb	r2, r2
 800e622:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e634:	b29b      	uxth	r3, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	b29a      	uxth	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	69db      	ldr	r3, [r3, #28]
 800e646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e64a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e64e:	f003 0307 	and.w	r3, r3, #7
 800e652:	2b00      	cmp	r3, #0
 800e654:	d053      	beq.n	800e6fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e65a:	f003 0301 	and.w	r3, r3, #1
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d011      	beq.n	800e686 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00b      	beq.n	800e686 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2201      	movs	r2, #1
 800e674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e67c:	f043 0201 	orr.w	r2, r3, #1
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e68a:	f003 0302 	and.w	r3, r3, #2
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d011      	beq.n	800e6b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00b      	beq.n	800e6b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6ac:	f043 0204 	orr.w	r2, r3, #4
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6ba:	f003 0304 	and.w	r3, r3, #4
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d011      	beq.n	800e6e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e6c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e6c6:	f003 0301 	and.w	r3, r3, #1
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00b      	beq.n	800e6e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2204      	movs	r2, #4
 800e6d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6dc:	f043 0202 	orr.w	r2, r3, #2
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d006      	beq.n	800e6fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7fe fd6d 	bl	800d1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e704:	b29b      	uxth	r3, r3
 800e706:	2b00      	cmp	r3, #0
 800e708:	f040 80a3 	bne.w	800e852 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e714:	e853 3f00 	ldrex	r3, [r3]
 800e718:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e71a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e71c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	461a      	mov	r2, r3
 800e72a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e72e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e730:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e732:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e734:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e736:	e841 2300 	strex	r3, r2, [r1]
 800e73a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e73c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1e4      	bne.n	800e70c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3308      	adds	r3, #8
 800e748:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e74a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e74c:	e853 3f00 	ldrex	r3, [r3]
 800e750:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e758:	f023 0301 	bic.w	r3, r3, #1
 800e75c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	3308      	adds	r3, #8
 800e766:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e76a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e76c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e76e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e770:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e772:	e841 2300 	strex	r3, r2, [r1]
 800e776:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1e1      	bne.n	800e742 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2220      	movs	r2, #32
 800e782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2200      	movs	r2, #0
 800e78a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a60      	ldr	r2, [pc, #384]	@ (800e918 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d021      	beq.n	800e7e0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d01a      	beq.n	800e7e0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7b2:	e853 3f00 	ldrex	r3, [r3]
 800e7b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e7b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e7be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e7cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800e7ce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e7d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e7d4:	e841 2300 	strex	r3, r2, [r1]
 800e7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e7da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1e4      	bne.n	800e7aa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d130      	bne.n	800e84a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7f6:	e853 3f00 	ldrex	r3, [r3]
 800e7fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fe:	f023 0310 	bic.w	r3, r3, #16
 800e802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	461a      	mov	r2, r3
 800e80c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e810:	643b      	str	r3, [r7, #64]	@ 0x40
 800e812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e818:	e841 2300 	strex	r3, r2, [r1]
 800e81c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1e4      	bne.n	800e7ee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	69db      	ldr	r3, [r3, #28]
 800e82a:	f003 0310 	and.w	r3, r3, #16
 800e82e:	2b10      	cmp	r3, #16
 800e830:	d103      	bne.n	800e83a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2210      	movs	r2, #16
 800e838:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7fe fcce 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e848:	e00e      	b.n	800e868 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7f6 fc80 	bl	8005150 <HAL_UART_RxCpltCallback>
        break;
 800e850:	e00a      	b.n	800e868 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e852:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e856:	2b00      	cmp	r3, #0
 800e858:	d006      	beq.n	800e868 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800e85a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e85e:	f003 0320 	and.w	r3, r3, #32
 800e862:	2b00      	cmp	r3, #0
 800e864:	f47f aece 	bne.w	800e604 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e86e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e872:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e876:	2b00      	cmp	r3, #0
 800e878:	d049      	beq.n	800e90e <UART_RxISR_8BIT_FIFOEN+0x352>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e880:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e884:	429a      	cmp	r2, r3
 800e886:	d242      	bcs.n	800e90e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	3308      	adds	r3, #8
 800e88e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	e853 3f00 	ldrex	r3, [r3]
 800e896:	61fb      	str	r3, [r7, #28]
   return(result);
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e89e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	3308      	adds	r3, #8
 800e8a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e8ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8b4:	e841 2300 	strex	r3, r2, [r1]
 800e8b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1e3      	bne.n	800e888 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a16      	ldr	r2, [pc, #88]	@ (800e91c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800e8c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	e853 3f00 	ldrex	r3, [r3]
 800e8d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	f043 0320 	orr.w	r3, r3, #32
 800e8da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e8e8:	61bb      	str	r3, [r7, #24]
 800e8ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ec:	6979      	ldr	r1, [r7, #20]
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	e841 2300 	strex	r3, r2, [r1]
 800e8f4:	613b      	str	r3, [r7, #16]
   return(result);
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1e4      	bne.n	800e8c6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e8fc:	e007      	b.n	800e90e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	699a      	ldr	r2, [r3, #24]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f042 0208 	orr.w	r2, r2, #8
 800e90c:	619a      	str	r2, [r3, #24]
}
 800e90e:	bf00      	nop
 800e910:	37b0      	adds	r7, #176	@ 0xb0
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	40008000 	.word	0x40008000
 800e91c:	0800e24d 	.word	0x0800e24d

0800e920 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b0ae      	sub	sp, #184	@ 0xb8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e92e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	69db      	ldr	r3, [r3, #28]
 800e938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e956:	2b22      	cmp	r3, #34	@ 0x22
 800e958:	f040 8187 	bne.w	800ec6a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e962:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e966:	e12a      	b.n	800ebbe <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e96e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e97a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e97e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e982:	4013      	ands	r3, r2
 800e984:	b29a      	uxth	r2, r3
 800e986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e98a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e990:	1c9a      	adds	r2, r3, #2
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	69db      	ldr	r3, [r3, #28]
 800e9ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e9b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e9b6:	f003 0307 	and.w	r3, r3, #7
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d053      	beq.n	800ea66 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e9be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d011      	beq.n	800e9ee <UART_RxISR_16BIT_FIFOEN+0xce>
 800e9ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00b      	beq.n	800e9ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9e4:	f043 0201 	orr.w	r2, r3, #1
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e9ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e9f2:	f003 0302 	and.w	r3, r3, #2
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d011      	beq.n	800ea1e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e9fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00b      	beq.n	800ea1e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea14:	f043 0204 	orr.w	r2, r3, #4
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ea22:	f003 0304 	and.w	r3, r3, #4
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d011      	beq.n	800ea4e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ea2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea2e:	f003 0301 	and.w	r3, r3, #1
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00b      	beq.n	800ea4e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2204      	movs	r2, #4
 800ea3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea44:	f043 0202 	orr.w	r2, r3, #2
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d006      	beq.n	800ea66 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7fe fbb9 	bl	800d1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f040 80a5 	bne.w	800ebbe <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea7c:	e853 3f00 	ldrex	r3, [r3]
 800ea80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ea82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ea84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	461a      	mov	r2, r3
 800ea92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ea96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ea9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ea9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eaa2:	e841 2300 	strex	r3, r2, [r1]
 800eaa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800eaa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1e2      	bne.n	800ea74 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	3308      	adds	r3, #8
 800eab4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eab8:	e853 3f00 	ldrex	r3, [r3]
 800eabc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800eabe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eac4:	f023 0301 	bic.w	r3, r3, #1
 800eac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	3308      	adds	r3, #8
 800ead2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ead6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ead8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eada:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eadc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eade:	e841 2300 	strex	r3, r2, [r1]
 800eae2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1e1      	bne.n	800eaae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2220      	movs	r2, #32
 800eaee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a60      	ldr	r2, [pc, #384]	@ (800ec84 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d021      	beq.n	800eb4c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d01a      	beq.n	800eb4c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb1e:	e853 3f00 	ldrex	r3, [r3]
 800eb22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eb24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eb2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	461a      	mov	r2, r3
 800eb34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800eb38:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb3a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eb3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eb40:	e841 2300 	strex	r3, r2, [r1]
 800eb44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eb46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d1e4      	bne.n	800eb16 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d130      	bne.n	800ebb6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb62:	e853 3f00 	ldrex	r3, [r3]
 800eb66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb6a:	f023 0310 	bic.w	r3, r3, #16
 800eb6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eb7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb84:	e841 2300 	strex	r3, r2, [r1]
 800eb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1e4      	bne.n	800eb5a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	69db      	ldr	r3, [r3, #28]
 800eb96:	f003 0310 	and.w	r3, r3, #16
 800eb9a:	2b10      	cmp	r3, #16
 800eb9c:	d103      	bne.n	800eba6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2210      	movs	r2, #16
 800eba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ebac:	4619      	mov	r1, r3
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f7fe fb18 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ebb4:	e00e      	b.n	800ebd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7f6 faca 	bl	8005150 <HAL_UART_RxCpltCallback>
        break;
 800ebbc:	e00a      	b.n	800ebd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ebbe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d006      	beq.n	800ebd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800ebc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ebca:	f003 0320 	and.w	r3, r3, #32
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f47f aeca 	bne.w	800e968 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ebda:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ebde:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d049      	beq.n	800ec7a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ebec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d242      	bcs.n	800ec7a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebfe:	e853 3f00 	ldrex	r3, [r3]
 800ec02:	623b      	str	r3, [r7, #32]
   return(result);
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3308      	adds	r3, #8
 800ec14:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ec18:	633a      	str	r2, [r7, #48]	@ 0x30
 800ec1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec20:	e841 2300 	strex	r3, r2, [r1]
 800ec24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ec26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1e3      	bne.n	800ebf4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4a16      	ldr	r2, [pc, #88]	@ (800ec88 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800ec30:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	e853 3f00 	ldrex	r3, [r3]
 800ec3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f043 0320 	orr.w	r3, r3, #32
 800ec46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ec54:	61fb      	str	r3, [r7, #28]
 800ec56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec58:	69b9      	ldr	r1, [r7, #24]
 800ec5a:	69fa      	ldr	r2, [r7, #28]
 800ec5c:	e841 2300 	strex	r3, r2, [r1]
 800ec60:	617b      	str	r3, [r7, #20]
   return(result);
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1e4      	bne.n	800ec32 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec68:	e007      	b.n	800ec7a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	699a      	ldr	r2, [r3, #24]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f042 0208 	orr.w	r2, r2, #8
 800ec78:	619a      	str	r2, [r3, #24]
}
 800ec7a:	bf00      	nop
 800ec7c:	37b8      	adds	r7, #184	@ 0xb8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	40008000 	.word	0x40008000
 800ec88:	0800e405 	.word	0x0800e405

0800ec8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ecbc:	bf00      	nop
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d101      	bne.n	800ecde <HAL_UARTEx_DisableFifoMode+0x16>
 800ecda:	2302      	movs	r3, #2
 800ecdc:	e027      	b.n	800ed2e <HAL_UARTEx_DisableFifoMode+0x66>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2201      	movs	r2, #1
 800ece2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2224      	movs	r2, #36	@ 0x24
 800ecea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f022 0201 	bic.w	r2, r2, #1
 800ed04:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ed0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2220      	movs	r2, #32
 800ed20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3714      	adds	r7, #20
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr

0800ed3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b084      	sub	sp, #16
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
 800ed42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d101      	bne.n	800ed52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed4e:	2302      	movs	r3, #2
 800ed50:	e02d      	b.n	800edae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2224      	movs	r2, #36	@ 0x24
 800ed5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f022 0201 	bic.w	r2, r2, #1
 800ed78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	430a      	orrs	r2, r1
 800ed8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f850 	bl	800ee34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2220      	movs	r2, #32
 800eda0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b084      	sub	sp, #16
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
 800edbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d101      	bne.n	800edce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800edca:	2302      	movs	r3, #2
 800edcc:	e02d      	b.n	800ee2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2201      	movs	r2, #1
 800edd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2224      	movs	r2, #36	@ 0x24
 800edda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f022 0201 	bic.w	r2, r2, #1
 800edf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	683a      	ldr	r2, [r7, #0]
 800ee06:	430a      	orrs	r2, r1
 800ee08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 f812 	bl	800ee34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2220      	movs	r2, #32
 800ee1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ee28:	2300      	movs	r3, #0
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
	...

0800ee34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d108      	bne.n	800ee56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2201      	movs	r2, #1
 800ee48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee54:	e031      	b.n	800eeba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee56:	2308      	movs	r3, #8
 800ee58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee5a:	2308      	movs	r3, #8
 800ee5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	0e5b      	lsrs	r3, r3, #25
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	f003 0307 	and.w	r3, r3, #7
 800ee6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	0f5b      	lsrs	r3, r3, #29
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	f003 0307 	and.w	r3, r3, #7
 800ee7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee7e:	7bbb      	ldrb	r3, [r7, #14]
 800ee80:	7b3a      	ldrb	r2, [r7, #12]
 800ee82:	4911      	ldr	r1, [pc, #68]	@ (800eec8 <UARTEx_SetNbDataToProcess+0x94>)
 800ee84:	5c8a      	ldrb	r2, [r1, r2]
 800ee86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee8a:	7b3a      	ldrb	r2, [r7, #12]
 800ee8c:	490f      	ldr	r1, [pc, #60]	@ (800eecc <UARTEx_SetNbDataToProcess+0x98>)
 800ee8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee90:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee9c:	7bfb      	ldrb	r3, [r7, #15]
 800ee9e:	7b7a      	ldrb	r2, [r7, #13]
 800eea0:	4909      	ldr	r1, [pc, #36]	@ (800eec8 <UARTEx_SetNbDataToProcess+0x94>)
 800eea2:	5c8a      	ldrb	r2, [r1, r2]
 800eea4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eea8:	7b7a      	ldrb	r2, [r7, #13]
 800eeaa:	4908      	ldr	r1, [pc, #32]	@ (800eecc <UARTEx_SetNbDataToProcess+0x98>)
 800eeac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eeae:	fb93 f3f2 	sdiv	r3, r3, r2
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800eeba:	bf00      	nop
 800eebc:	3714      	adds	r7, #20
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	0801c7fc 	.word	0x0801c7fc
 800eecc:	0801c804 	.word	0x0801c804

0800eed0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800eed4:	4907      	ldr	r1, [pc, #28]	@ (800eef4 <MX_FATFS_Init+0x24>)
 800eed6:	4808      	ldr	r0, [pc, #32]	@ (800eef8 <MX_FATFS_Init+0x28>)
 800eed8:	f002 fe24 	bl	8011b24 <FATFS_LinkDriver>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d002      	beq.n	800eee8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800eee2:	f04f 33ff 	mov.w	r3, #4294967295
 800eee6:	e003      	b.n	800eef0 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800eee8:	4b04      	ldr	r3, [pc, #16]	@ (800eefc <MX_FATFS_Init+0x2c>)
 800eeea:	2201      	movs	r2, #1
 800eeec:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800eeee:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	20001778 	.word	0x20001778
 800eef8:	20000034 	.word	0x20000034
 800eefc:	2000177c 	.word	0x2000177c

0800ef00 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ef00:	b480      	push	{r7}
 800ef02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ef04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	4603      	mov	r3, r0
 800ef18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7f6 fb55 	bl	80055cc <USER_SPI_initialize>
 800ef22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800ef36:	79fb      	ldrb	r3, [r7, #7]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7f6 fc33 	bl	80057a4 <USER_SPI_status>
 800ef3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60b9      	str	r1, [r7, #8]
 800ef50:	607a      	str	r2, [r7, #4]
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	4603      	mov	r3, r0
 800ef56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800ef58:	7bf8      	ldrb	r0, [r7, #15]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	68b9      	ldr	r1, [r7, #8]
 800ef60:	f7f6 fc36 	bl	80057d0 <USER_SPI_read>
 800ef64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b084      	sub	sp, #16
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	607a      	str	r2, [r7, #4]
 800ef78:	603b      	str	r3, [r7, #0]
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800ef7e:	7bf8      	ldrb	r0, [r7, #15]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	68b9      	ldr	r1, [r7, #8]
 800ef86:	f7f6 fc89 	bl	800589c <USER_SPI_write>
 800ef8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	603a      	str	r2, [r7, #0]
 800ef9e:	71fb      	strb	r3, [r7, #7]
 800efa0:	460b      	mov	r3, r1
 800efa2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800efa4:	79b9      	ldrb	r1, [r7, #6]
 800efa6:	79fb      	ldrb	r3, [r7, #7]
 800efa8:	683a      	ldr	r2, [r7, #0]
 800efaa:	4618      	mov	r0, r3
 800efac:	f7f6 fcf2 	bl	8005994 <USER_SPI_ioctl>
 800efb0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	4603      	mov	r3, r0
 800efc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800efc6:	79fb      	ldrb	r3, [r7, #7]
 800efc8:	4a08      	ldr	r2, [pc, #32]	@ (800efec <disk_status+0x30>)
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	79fa      	ldrb	r2, [r7, #7]
 800efd4:	4905      	ldr	r1, [pc, #20]	@ (800efec <disk_status+0x30>)
 800efd6:	440a      	add	r2, r1
 800efd8:	7a12      	ldrb	r2, [r2, #8]
 800efda:	4610      	mov	r0, r2
 800efdc:	4798      	blx	r3
 800efde:	4603      	mov	r3, r0
 800efe0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800efe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3710      	adds	r7, #16
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	200017a8 	.word	0x200017a8

0800eff0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	4603      	mov	r3, r0
 800eff8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800effa:	2300      	movs	r3, #0
 800effc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800effe:	79fb      	ldrb	r3, [r7, #7]
 800f000:	4a0d      	ldr	r2, [pc, #52]	@ (800f038 <disk_initialize+0x48>)
 800f002:	5cd3      	ldrb	r3, [r2, r3]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d111      	bne.n	800f02c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f008:	79fb      	ldrb	r3, [r7, #7]
 800f00a:	4a0b      	ldr	r2, [pc, #44]	@ (800f038 <disk_initialize+0x48>)
 800f00c:	2101      	movs	r1, #1
 800f00e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f010:	79fb      	ldrb	r3, [r7, #7]
 800f012:	4a09      	ldr	r2, [pc, #36]	@ (800f038 <disk_initialize+0x48>)
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	4413      	add	r3, r2
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	79fa      	ldrb	r2, [r7, #7]
 800f01e:	4906      	ldr	r1, [pc, #24]	@ (800f038 <disk_initialize+0x48>)
 800f020:	440a      	add	r2, r1
 800f022:	7a12      	ldrb	r2, [r2, #8]
 800f024:	4610      	mov	r0, r2
 800f026:	4798      	blx	r3
 800f028:	4603      	mov	r3, r0
 800f02a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	200017a8 	.word	0x200017a8

0800f03c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f03c:	b590      	push	{r4, r7, lr}
 800f03e:	b087      	sub	sp, #28
 800f040:	af00      	add	r7, sp, #0
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	4603      	mov	r3, r0
 800f04a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f04c:	7bfb      	ldrb	r3, [r7, #15]
 800f04e:	4a0a      	ldr	r2, [pc, #40]	@ (800f078 <disk_read+0x3c>)
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	689c      	ldr	r4, [r3, #8]
 800f058:	7bfb      	ldrb	r3, [r7, #15]
 800f05a:	4a07      	ldr	r2, [pc, #28]	@ (800f078 <disk_read+0x3c>)
 800f05c:	4413      	add	r3, r2
 800f05e:	7a18      	ldrb	r0, [r3, #8]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	68b9      	ldr	r1, [r7, #8]
 800f066:	47a0      	blx	r4
 800f068:	4603      	mov	r3, r0
 800f06a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	371c      	adds	r7, #28
 800f072:	46bd      	mov	sp, r7
 800f074:	bd90      	pop	{r4, r7, pc}
 800f076:	bf00      	nop
 800f078:	200017a8 	.word	0x200017a8

0800f07c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f07c:	b590      	push	{r4, r7, lr}
 800f07e:	b087      	sub	sp, #28
 800f080:	af00      	add	r7, sp, #0
 800f082:	60b9      	str	r1, [r7, #8]
 800f084:	607a      	str	r2, [r7, #4]
 800f086:	603b      	str	r3, [r7, #0]
 800f088:	4603      	mov	r3, r0
 800f08a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f08c:	7bfb      	ldrb	r3, [r7, #15]
 800f08e:	4a0a      	ldr	r2, [pc, #40]	@ (800f0b8 <disk_write+0x3c>)
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	4413      	add	r3, r2
 800f094:	685b      	ldr	r3, [r3, #4]
 800f096:	68dc      	ldr	r4, [r3, #12]
 800f098:	7bfb      	ldrb	r3, [r7, #15]
 800f09a:	4a07      	ldr	r2, [pc, #28]	@ (800f0b8 <disk_write+0x3c>)
 800f09c:	4413      	add	r3, r2
 800f09e:	7a18      	ldrb	r0, [r3, #8]
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	68b9      	ldr	r1, [r7, #8]
 800f0a6:	47a0      	blx	r4
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800f0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	371c      	adds	r7, #28
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd90      	pop	{r4, r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	200017a8 	.word	0x200017a8

0800f0bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	603a      	str	r2, [r7, #0]
 800f0c6:	71fb      	strb	r3, [r7, #7]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f0cc:	79fb      	ldrb	r3, [r7, #7]
 800f0ce:	4a09      	ldr	r2, [pc, #36]	@ (800f0f4 <disk_ioctl+0x38>)
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	4413      	add	r3, r2
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	691b      	ldr	r3, [r3, #16]
 800f0d8:	79fa      	ldrb	r2, [r7, #7]
 800f0da:	4906      	ldr	r1, [pc, #24]	@ (800f0f4 <disk_ioctl+0x38>)
 800f0dc:	440a      	add	r2, r1
 800f0de:	7a10      	ldrb	r0, [r2, #8]
 800f0e0:	79b9      	ldrb	r1, [r7, #6]
 800f0e2:	683a      	ldr	r2, [r7, #0]
 800f0e4:	4798      	blx	r3
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	73fb      	strb	r3, [r7, #15]
  return res;
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	200017a8 	.word	0x200017a8

0800f0f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	3301      	adds	r3, #1
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f10c:	021b      	lsls	r3, r3, #8
 800f10e:	b21a      	sxth	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	b21b      	sxth	r3, r3
 800f116:	4313      	orrs	r3, r2
 800f118:	b21b      	sxth	r3, r3
 800f11a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f11c:	89fb      	ldrh	r3, [r7, #14]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f12a:	b480      	push	{r7}
 800f12c:	b085      	sub	sp, #20
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	3303      	adds	r3, #3
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	021b      	lsls	r3, r3, #8
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	3202      	adds	r2, #2
 800f142:	7812      	ldrb	r2, [r2, #0]
 800f144:	4313      	orrs	r3, r2
 800f146:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	021b      	lsls	r3, r3, #8
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	3201      	adds	r2, #1
 800f150:	7812      	ldrb	r2, [r2, #0]
 800f152:	4313      	orrs	r3, r2
 800f154:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	021b      	lsls	r3, r3, #8
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	7812      	ldrb	r2, [r2, #0]
 800f15e:	4313      	orrs	r3, r2
 800f160:	60fb      	str	r3, [r7, #12]
	return rv;
 800f162:	68fb      	ldr	r3, [r7, #12]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	460b      	mov	r3, r1
 800f17a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	1c5a      	adds	r2, r3, #1
 800f180:	607a      	str	r2, [r7, #4]
 800f182:	887a      	ldrh	r2, [r7, #2]
 800f184:	b2d2      	uxtb	r2, r2
 800f186:	701a      	strb	r2, [r3, #0]
 800f188:	887b      	ldrh	r3, [r7, #2]
 800f18a:	0a1b      	lsrs	r3, r3, #8
 800f18c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	1c5a      	adds	r2, r3, #1
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	887a      	ldrh	r2, [r7, #2]
 800f196:	b2d2      	uxtb	r2, r2
 800f198:	701a      	strb	r2, [r3, #0]
}
 800f19a:	bf00      	nop
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f1a6:	b480      	push	{r7}
 800f1a8:	b083      	sub	sp, #12
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
 800f1ae:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	607a      	str	r2, [r7, #4]
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	b2d2      	uxtb	r2, r2
 800f1ba:	701a      	strb	r2, [r3, #0]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	0a1b      	lsrs	r3, r3, #8
 800f1c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	1c5a      	adds	r2, r3, #1
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	b2d2      	uxtb	r2, r2
 800f1cc:	701a      	strb	r2, [r3, #0]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	0a1b      	lsrs	r3, r3, #8
 800f1d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	1c5a      	adds	r2, r3, #1
 800f1d8:	607a      	str	r2, [r7, #4]
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	b2d2      	uxtb	r2, r2
 800f1de:	701a      	strb	r2, [r3, #0]
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	0a1b      	lsrs	r3, r3, #8
 800f1e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	1c5a      	adds	r2, r3, #1
 800f1ea:	607a      	str	r2, [r7, #4]
 800f1ec:	683a      	ldr	r2, [r7, #0]
 800f1ee:	b2d2      	uxtb	r2, r2
 800f1f0:	701a      	strb	r2, [r3, #0]
}
 800f1f2:	bf00      	nop
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f1fe:	b480      	push	{r7}
 800f200:	b087      	sub	sp, #28
 800f202:	af00      	add	r7, sp, #0
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	60b9      	str	r1, [r7, #8]
 800f208:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00d      	beq.n	800f234 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f218:	693a      	ldr	r2, [r7, #16]
 800f21a:	1c53      	adds	r3, r2, #1
 800f21c:	613b      	str	r3, [r7, #16]
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	1c59      	adds	r1, r3, #1
 800f222:	6179      	str	r1, [r7, #20]
 800f224:	7812      	ldrb	r2, [r2, #0]
 800f226:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	3b01      	subs	r3, #1
 800f22c:	607b      	str	r3, [r7, #4]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1f1      	bne.n	800f218 <mem_cpy+0x1a>
	}
}
 800f234:	bf00      	nop
 800f236:	371c      	adds	r7, #28
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f240:	b480      	push	{r7}
 800f242:	b087      	sub	sp, #28
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	1c5a      	adds	r2, r3, #1
 800f254:	617a      	str	r2, [r7, #20]
 800f256:	68ba      	ldr	r2, [r7, #8]
 800f258:	b2d2      	uxtb	r2, r2
 800f25a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	3b01      	subs	r3, #1
 800f260:	607b      	str	r3, [r7, #4]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d1f3      	bne.n	800f250 <mem_set+0x10>
}
 800f268:	bf00      	nop
 800f26a:	bf00      	nop
 800f26c:	371c      	adds	r7, #28
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f276:	b480      	push	{r7}
 800f278:	b089      	sub	sp, #36	@ 0x24
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	60f8      	str	r0, [r7, #12]
 800f27e:	60b9      	str	r1, [r7, #8]
 800f280:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	61fb      	str	r3, [r7, #28]
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	1c5a      	adds	r2, r3, #1
 800f292:	61fa      	str	r2, [r7, #28]
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	4619      	mov	r1, r3
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	1c5a      	adds	r2, r3, #1
 800f29c:	61ba      	str	r2, [r7, #24]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	1acb      	subs	r3, r1, r3
 800f2a2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3b01      	subs	r3, #1
 800f2a8:	607b      	str	r3, [r7, #4]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <mem_cmp+0x40>
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d0eb      	beq.n	800f28e <mem_cmp+0x18>

	return r;
 800f2b6:	697b      	ldr	r3, [r7, #20]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3724      	adds	r7, #36	@ 0x24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f2ce:	e002      	b.n	800f2d6 <chk_chr+0x12>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	607b      	str	r3, [r7, #4]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d005      	beq.n	800f2ea <chk_chr+0x26>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d1f2      	bne.n	800f2d0 <chk_chr+0xc>
	return *str;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	781b      	ldrb	r3, [r3, #0]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	370c      	adds	r7, #12
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d009      	beq.n	800f31c <lock_fs+0x22>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f002 fc42 	bl	8011b96 <ff_req_grant>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	d001      	beq.n	800f31c <lock_fs+0x22>
 800f318:	2301      	movs	r3, #1
 800f31a:	e000      	b.n	800f31e <lock_fs+0x24>
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b082      	sub	sp, #8
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	460b      	mov	r3, r1
 800f330:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d00d      	beq.n	800f354 <unlock_fs+0x2e>
 800f338:	78fb      	ldrb	r3, [r7, #3]
 800f33a:	2b0c      	cmp	r3, #12
 800f33c:	d00a      	beq.n	800f354 <unlock_fs+0x2e>
 800f33e:	78fb      	ldrb	r3, [r7, #3]
 800f340:	2b0b      	cmp	r3, #11
 800f342:	d007      	beq.n	800f354 <unlock_fs+0x2e>
 800f344:	78fb      	ldrb	r3, [r7, #3]
 800f346:	2b0f      	cmp	r3, #15
 800f348:	d004      	beq.n	800f354 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	4618      	mov	r0, r3
 800f350:	f002 fc36 	bl	8011bc0 <ff_rel_grant>
	}
}
 800f354:	bf00      	nop
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b085      	sub	sp, #20
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f366:	2300      	movs	r3, #0
 800f368:	60bb      	str	r3, [r7, #8]
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	60fb      	str	r3, [r7, #12]
 800f36e:	e029      	b.n	800f3c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f370:	4a27      	ldr	r2, [pc, #156]	@ (800f410 <chk_lock+0xb4>)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	011b      	lsls	r3, r3, #4
 800f376:	4413      	add	r3, r2
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d01d      	beq.n	800f3ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f37e:	4a24      	ldr	r2, [pc, #144]	@ (800f410 <chk_lock+0xb4>)
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	011b      	lsls	r3, r3, #4
 800f384:	4413      	add	r3, r2
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d116      	bne.n	800f3be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f390:	4a1f      	ldr	r2, [pc, #124]	@ (800f410 <chk_lock+0xb4>)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	011b      	lsls	r3, r3, #4
 800f396:	4413      	add	r3, r2
 800f398:	3304      	adds	r3, #4
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d10c      	bne.n	800f3be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f3a4:	4a1a      	ldr	r2, [pc, #104]	@ (800f410 <chk_lock+0xb4>)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	011b      	lsls	r3, r3, #4
 800f3aa:	4413      	add	r3, r2
 800f3ac:	3308      	adds	r3, #8
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d102      	bne.n	800f3be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f3b8:	e007      	b.n	800f3ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	60fb      	str	r3, [r7, #12]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d9d2      	bls.n	800f370 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d109      	bne.n	800f3e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d102      	bne.n	800f3dc <chk_lock+0x80>
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d101      	bne.n	800f3e0 <chk_lock+0x84>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	e010      	b.n	800f402 <chk_lock+0xa6>
 800f3e0:	2312      	movs	r3, #18
 800f3e2:	e00e      	b.n	800f402 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d108      	bne.n	800f3fc <chk_lock+0xa0>
 800f3ea:	4a09      	ldr	r2, [pc, #36]	@ (800f410 <chk_lock+0xb4>)
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	011b      	lsls	r3, r3, #4
 800f3f0:	4413      	add	r3, r2
 800f3f2:	330c      	adds	r3, #12
 800f3f4:	881b      	ldrh	r3, [r3, #0]
 800f3f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3fa:	d101      	bne.n	800f400 <chk_lock+0xa4>
 800f3fc:	2310      	movs	r3, #16
 800f3fe:	e000      	b.n	800f402 <chk_lock+0xa6>
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3714      	adds	r7, #20
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	20001788 	.word	0x20001788

0800f414 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f41a:	2300      	movs	r3, #0
 800f41c:	607b      	str	r3, [r7, #4]
 800f41e:	e002      	b.n	800f426 <enq_lock+0x12>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	3301      	adds	r3, #1
 800f424:	607b      	str	r3, [r7, #4]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d806      	bhi.n	800f43a <enq_lock+0x26>
 800f42c:	4a09      	ldr	r2, [pc, #36]	@ (800f454 <enq_lock+0x40>)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	011b      	lsls	r3, r3, #4
 800f432:	4413      	add	r3, r2
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d1f2      	bne.n	800f420 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	bf14      	ite	ne
 800f440:	2301      	movne	r3, #1
 800f442:	2300      	moveq	r3, #0
 800f444:	b2db      	uxtb	r3, r3
}
 800f446:	4618      	mov	r0, r3
 800f448:	370c      	adds	r7, #12
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	20001788 	.word	0x20001788

0800f458 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f462:	2300      	movs	r3, #0
 800f464:	60fb      	str	r3, [r7, #12]
 800f466:	e01f      	b.n	800f4a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f468:	4a41      	ldr	r2, [pc, #260]	@ (800f570 <inc_lock+0x118>)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	011b      	lsls	r3, r3, #4
 800f46e:	4413      	add	r3, r2
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	429a      	cmp	r2, r3
 800f478:	d113      	bne.n	800f4a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f47a:	4a3d      	ldr	r2, [pc, #244]	@ (800f570 <inc_lock+0x118>)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	011b      	lsls	r3, r3, #4
 800f480:	4413      	add	r3, r2
 800f482:	3304      	adds	r3, #4
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d109      	bne.n	800f4a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f48e:	4a38      	ldr	r2, [pc, #224]	@ (800f570 <inc_lock+0x118>)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	011b      	lsls	r3, r3, #4
 800f494:	4413      	add	r3, r2
 800f496:	3308      	adds	r3, #8
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d006      	beq.n	800f4b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	60fb      	str	r3, [r7, #12]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d9dc      	bls.n	800f468 <inc_lock+0x10>
 800f4ae:	e000      	b.n	800f4b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f4b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d132      	bne.n	800f51e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	e002      	b.n	800f4c4 <inc_lock+0x6c>
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	60fb      	str	r3, [r7, #12]
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d806      	bhi.n	800f4d8 <inc_lock+0x80>
 800f4ca:	4a29      	ldr	r2, [pc, #164]	@ (800f570 <inc_lock+0x118>)
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	011b      	lsls	r3, r3, #4
 800f4d0:	4413      	add	r3, r2
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1f2      	bne.n	800f4be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2b02      	cmp	r3, #2
 800f4dc:	d101      	bne.n	800f4e2 <inc_lock+0x8a>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	e040      	b.n	800f564 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	4922      	ldr	r1, [pc, #136]	@ (800f570 <inc_lock+0x118>)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	011b      	lsls	r3, r3, #4
 800f4ec:	440b      	add	r3, r1
 800f4ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	689a      	ldr	r2, [r3, #8]
 800f4f4:	491e      	ldr	r1, [pc, #120]	@ (800f570 <inc_lock+0x118>)
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	011b      	lsls	r3, r3, #4
 800f4fa:	440b      	add	r3, r1
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	695a      	ldr	r2, [r3, #20]
 800f504:	491a      	ldr	r1, [pc, #104]	@ (800f570 <inc_lock+0x118>)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	011b      	lsls	r3, r3, #4
 800f50a:	440b      	add	r3, r1
 800f50c:	3308      	adds	r3, #8
 800f50e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f510:	4a17      	ldr	r2, [pc, #92]	@ (800f570 <inc_lock+0x118>)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	011b      	lsls	r3, r3, #4
 800f516:	4413      	add	r3, r2
 800f518:	330c      	adds	r3, #12
 800f51a:	2200      	movs	r2, #0
 800f51c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d009      	beq.n	800f538 <inc_lock+0xe0>
 800f524:	4a12      	ldr	r2, [pc, #72]	@ (800f570 <inc_lock+0x118>)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	011b      	lsls	r3, r3, #4
 800f52a:	4413      	add	r3, r2
 800f52c:	330c      	adds	r3, #12
 800f52e:	881b      	ldrh	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <inc_lock+0xe0>
 800f534:	2300      	movs	r3, #0
 800f536:	e015      	b.n	800f564 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d108      	bne.n	800f550 <inc_lock+0xf8>
 800f53e:	4a0c      	ldr	r2, [pc, #48]	@ (800f570 <inc_lock+0x118>)
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	011b      	lsls	r3, r3, #4
 800f544:	4413      	add	r3, r2
 800f546:	330c      	adds	r3, #12
 800f548:	881b      	ldrh	r3, [r3, #0]
 800f54a:	3301      	adds	r3, #1
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	e001      	b.n	800f554 <inc_lock+0xfc>
 800f550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f554:	4906      	ldr	r1, [pc, #24]	@ (800f570 <inc_lock+0x118>)
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	011b      	lsls	r3, r3, #4
 800f55a:	440b      	add	r3, r1
 800f55c:	330c      	adds	r3, #12
 800f55e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3301      	adds	r3, #1
}
 800f564:	4618      	mov	r0, r3
 800f566:	3714      	adds	r7, #20
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr
 800f570:	20001788 	.word	0x20001788

0800f574 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f574:	b480      	push	{r7}
 800f576:	b085      	sub	sp, #20
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3b01      	subs	r3, #1
 800f580:	607b      	str	r3, [r7, #4]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d825      	bhi.n	800f5d4 <dec_lock+0x60>
		n = Files[i].ctr;
 800f588:	4a17      	ldr	r2, [pc, #92]	@ (800f5e8 <dec_lock+0x74>)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	011b      	lsls	r3, r3, #4
 800f58e:	4413      	add	r3, r2
 800f590:	330c      	adds	r3, #12
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f596:	89fb      	ldrh	r3, [r7, #14]
 800f598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f59c:	d101      	bne.n	800f5a2 <dec_lock+0x2e>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f5a2:	89fb      	ldrh	r3, [r7, #14]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d002      	beq.n	800f5ae <dec_lock+0x3a>
 800f5a8:	89fb      	ldrh	r3, [r7, #14]
 800f5aa:	3b01      	subs	r3, #1
 800f5ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f5ae:	4a0e      	ldr	r2, [pc, #56]	@ (800f5e8 <dec_lock+0x74>)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	011b      	lsls	r3, r3, #4
 800f5b4:	4413      	add	r3, r2
 800f5b6:	330c      	adds	r3, #12
 800f5b8:	89fa      	ldrh	r2, [r7, #14]
 800f5ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f5bc:	89fb      	ldrh	r3, [r7, #14]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d105      	bne.n	800f5ce <dec_lock+0x5a>
 800f5c2:	4a09      	ldr	r2, [pc, #36]	@ (800f5e8 <dec_lock+0x74>)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	011b      	lsls	r3, r3, #4
 800f5c8:	4413      	add	r3, r2
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	737b      	strb	r3, [r7, #13]
 800f5d2:	e001      	b.n	800f5d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f5d4:	2302      	movs	r3, #2
 800f5d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f5d8:	7b7b      	ldrb	r3, [r7, #13]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3714      	adds	r7, #20
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	20001788 	.word	0x20001788

0800f5ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	60fb      	str	r3, [r7, #12]
 800f5f8:	e010      	b.n	800f61c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f5fa:	4a0d      	ldr	r2, [pc, #52]	@ (800f630 <clear_lock+0x44>)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	011b      	lsls	r3, r3, #4
 800f600:	4413      	add	r3, r2
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	429a      	cmp	r2, r3
 800f608:	d105      	bne.n	800f616 <clear_lock+0x2a>
 800f60a:	4a09      	ldr	r2, [pc, #36]	@ (800f630 <clear_lock+0x44>)
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	011b      	lsls	r3, r3, #4
 800f610:	4413      	add	r3, r2
 800f612:	2200      	movs	r2, #0
 800f614:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3301      	adds	r3, #1
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d9eb      	bls.n	800f5fa <clear_lock+0xe>
	}
}
 800f622:	bf00      	nop
 800f624:	bf00      	nop
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	20001788 	.word	0x20001788

0800f634 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b086      	sub	sp, #24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	78db      	ldrb	r3, [r3, #3]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d034      	beq.n	800f6b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f64c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	7858      	ldrb	r0, [r3, #1]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f658:	2301      	movs	r3, #1
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	f7ff fd0e 	bl	800f07c <disk_write>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d002      	beq.n	800f66c <sync_window+0x38>
			res = FR_DISK_ERR;
 800f666:	2301      	movs	r3, #1
 800f668:	73fb      	strb	r3, [r7, #15]
 800f66a:	e022      	b.n	800f6b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	1ad2      	subs	r2, r2, r3
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	69db      	ldr	r3, [r3, #28]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d217      	bcs.n	800f6b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	789b      	ldrb	r3, [r3, #2]
 800f686:	613b      	str	r3, [r7, #16]
 800f688:	e010      	b.n	800f6ac <sync_window+0x78>
					wsect += fs->fsize;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	69db      	ldr	r3, [r3, #28]
 800f68e:	697a      	ldr	r2, [r7, #20]
 800f690:	4413      	add	r3, r2
 800f692:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	7858      	ldrb	r0, [r3, #1]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f69e:	2301      	movs	r3, #1
 800f6a0:	697a      	ldr	r2, [r7, #20]
 800f6a2:	f7ff fceb 	bl	800f07c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	613b      	str	r3, [r7, #16]
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d8eb      	bhi.n	800f68a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3718      	adds	r7, #24
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ce:	683a      	ldr	r2, [r7, #0]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d01b      	beq.n	800f70c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f7ff ffad 	bl	800f634 <sync_window>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d113      	bne.n	800f70c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	7858      	ldrb	r0, [r3, #1]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	f7ff fca3 	bl	800f03c <disk_read>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d004      	beq.n	800f706 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f700:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f702:	2301      	movs	r3, #1
 800f704:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800f70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
	...

0800f718 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7ff ff87 	bl	800f634 <sync_window>
 800f726:	4603      	mov	r3, r0
 800f728:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f72a:	7bfb      	ldrb	r3, [r7, #15]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d158      	bne.n	800f7e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	2b03      	cmp	r3, #3
 800f736:	d148      	bne.n	800f7ca <sync_fs+0xb2>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	791b      	ldrb	r3, [r3, #4]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d144      	bne.n	800f7ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	3334      	adds	r3, #52	@ 0x34
 800f744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f748:	2100      	movs	r1, #0
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7ff fd78 	bl	800f240 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	3334      	adds	r3, #52	@ 0x34
 800f754:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f758:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7ff fd07 	bl	800f170 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	3334      	adds	r3, #52	@ 0x34
 800f766:	4921      	ldr	r1, [pc, #132]	@ (800f7ec <sync_fs+0xd4>)
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff fd1c 	bl	800f1a6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	3334      	adds	r3, #52	@ 0x34
 800f772:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f776:	491e      	ldr	r1, [pc, #120]	@ (800f7f0 <sync_fs+0xd8>)
 800f778:	4618      	mov	r0, r3
 800f77a:	f7ff fd14 	bl	800f1a6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	3334      	adds	r3, #52	@ 0x34
 800f782:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	695b      	ldr	r3, [r3, #20]
 800f78a:	4619      	mov	r1, r3
 800f78c:	4610      	mov	r0, r2
 800f78e:	f7ff fd0a 	bl	800f1a6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	3334      	adds	r3, #52	@ 0x34
 800f796:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	4610      	mov	r0, r2
 800f7a2:	f7ff fd00 	bl	800f1a6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a1b      	ldr	r3, [r3, #32]
 800f7aa:	1c5a      	adds	r2, r3, #1
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	7858      	ldrb	r0, [r3, #1]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7be:	2301      	movs	r3, #1
 800f7c0:	f7ff fc5c 	bl	800f07c <disk_write>
			fs->fsi_flag = 0;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	785b      	ldrb	r3, [r3, #1]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7ff fc72 	bl	800f0bc <disk_ioctl>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d001      	beq.n	800f7e2 <sync_fs+0xca>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	41615252 	.word	0x41615252
 800f7f0:	61417272 	.word	0x61417272

0800f7f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	3b02      	subs	r3, #2
 800f802:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	699b      	ldr	r3, [r3, #24]
 800f808:	3b02      	subs	r3, #2
 800f80a:	683a      	ldr	r2, [r7, #0]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d301      	bcc.n	800f814 <clust2sect+0x20>
 800f810:	2300      	movs	r3, #0
 800f812:	e008      	b.n	800f826 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	895b      	ldrh	r3, [r3, #10]
 800f818:	461a      	mov	r2, r3
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	fb03 f202 	mul.w	r2, r3, r2
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f824:	4413      	add	r3, r2
}
 800f826:	4618      	mov	r0, r3
 800f828:	370c      	adds	r7, #12
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr

0800f832 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b086      	sub	sp, #24
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b01      	cmp	r3, #1
 800f846:	d904      	bls.n	800f852 <get_fat+0x20>
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	699b      	ldr	r3, [r3, #24]
 800f84c:	683a      	ldr	r2, [r7, #0]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d302      	bcc.n	800f858 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f852:	2301      	movs	r3, #1
 800f854:	617b      	str	r3, [r7, #20]
 800f856:	e08e      	b.n	800f976 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f858:	f04f 33ff 	mov.w	r3, #4294967295
 800f85c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	2b03      	cmp	r3, #3
 800f864:	d061      	beq.n	800f92a <get_fat+0xf8>
 800f866:	2b03      	cmp	r3, #3
 800f868:	dc7b      	bgt.n	800f962 <get_fat+0x130>
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d002      	beq.n	800f874 <get_fat+0x42>
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d041      	beq.n	800f8f6 <get_fat+0xc4>
 800f872:	e076      	b.n	800f962 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	60fb      	str	r3, [r7, #12]
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	085b      	lsrs	r3, r3, #1
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	4413      	add	r3, r2
 800f880:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	0a5b      	lsrs	r3, r3, #9
 800f88a:	4413      	add	r3, r2
 800f88c:	4619      	mov	r1, r3
 800f88e:	6938      	ldr	r0, [r7, #16]
 800f890:	f7ff ff14 	bl	800f6bc <move_window>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d166      	bne.n	800f968 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	1c5a      	adds	r2, r3, #1
 800f89e:	60fa      	str	r2, [r7, #12]
 800f8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8a4:	693a      	ldr	r2, [r7, #16]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f8ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	0a5b      	lsrs	r3, r3, #9
 800f8b6:	4413      	add	r3, r2
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	6938      	ldr	r0, [r7, #16]
 800f8bc:	f7ff fefe 	bl	800f6bc <move_window>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d152      	bne.n	800f96c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f8d4:	021b      	lsls	r3, r3, #8
 800f8d6:	68ba      	ldr	r2, [r7, #8]
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	f003 0301 	and.w	r3, r3, #1
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d002      	beq.n	800f8ec <get_fat+0xba>
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	091b      	lsrs	r3, r3, #4
 800f8ea:	e002      	b.n	800f8f2 <get_fat+0xc0>
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f8f2:	617b      	str	r3, [r7, #20]
			break;
 800f8f4:	e03f      	b.n	800f976 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	0a1b      	lsrs	r3, r3, #8
 800f8fe:	4413      	add	r3, r2
 800f900:	4619      	mov	r1, r3
 800f902:	6938      	ldr	r0, [r7, #16]
 800f904:	f7ff feda 	bl	800f6bc <move_window>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d130      	bne.n	800f970 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	005b      	lsls	r3, r3, #1
 800f918:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f91c:	4413      	add	r3, r2
 800f91e:	4618      	mov	r0, r3
 800f920:	f7ff fbea 	bl	800f0f8 <ld_word>
 800f924:	4603      	mov	r3, r0
 800f926:	617b      	str	r3, [r7, #20]
			break;
 800f928:	e025      	b.n	800f976 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	09db      	lsrs	r3, r3, #7
 800f932:	4413      	add	r3, r2
 800f934:	4619      	mov	r1, r3
 800f936:	6938      	ldr	r0, [r7, #16]
 800f938:	f7ff fec0 	bl	800f6bc <move_window>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d118      	bne.n	800f974 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f950:	4413      	add	r3, r2
 800f952:	4618      	mov	r0, r3
 800f954:	f7ff fbe9 	bl	800f12a <ld_dword>
 800f958:	4603      	mov	r3, r0
 800f95a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f95e:	617b      	str	r3, [r7, #20]
			break;
 800f960:	e009      	b.n	800f976 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f962:	2301      	movs	r3, #1
 800f964:	617b      	str	r3, [r7, #20]
 800f966:	e006      	b.n	800f976 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f968:	bf00      	nop
 800f96a:	e004      	b.n	800f976 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f96c:	bf00      	nop
 800f96e:	e002      	b.n	800f976 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f970:	bf00      	nop
 800f972:	e000      	b.n	800f976 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f974:	bf00      	nop
		}
	}

	return val;
 800f976:	697b      	ldr	r3, [r7, #20]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f980:	b590      	push	{r4, r7, lr}
 800f982:	b089      	sub	sp, #36	@ 0x24
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f98c:	2302      	movs	r3, #2
 800f98e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	2b01      	cmp	r3, #1
 800f994:	f240 80d9 	bls.w	800fb4a <put_fat+0x1ca>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	699b      	ldr	r3, [r3, #24]
 800f99c:	68ba      	ldr	r2, [r7, #8]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	f080 80d3 	bcs.w	800fb4a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	2b03      	cmp	r3, #3
 800f9aa:	f000 8096 	beq.w	800fada <put_fat+0x15a>
 800f9ae:	2b03      	cmp	r3, #3
 800f9b0:	f300 80cb 	bgt.w	800fb4a <put_fat+0x1ca>
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d002      	beq.n	800f9be <put_fat+0x3e>
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d06e      	beq.n	800fa9a <put_fat+0x11a>
 800f9bc:	e0c5      	b.n	800fb4a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	61bb      	str	r3, [r7, #24]
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	085b      	lsrs	r3, r3, #1
 800f9c6:	69ba      	ldr	r2, [r7, #24]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	0a5b      	lsrs	r3, r3, #9
 800f9d4:	4413      	add	r3, r2
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f7ff fe6f 	bl	800f6bc <move_window>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f9e2:	7ffb      	ldrb	r3, [r7, #31]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f040 80a9 	bne.w	800fb3c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	1c59      	adds	r1, r3, #1
 800f9f4:	61b9      	str	r1, [r7, #24]
 800f9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9fa:	4413      	add	r3, r2
 800f9fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	f003 0301 	and.w	r3, r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d00d      	beq.n	800fa24 <put_fat+0xa4>
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	b25b      	sxtb	r3, r3
 800fa0e:	f003 030f 	and.w	r3, r3, #15
 800fa12:	b25a      	sxtb	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	b25b      	sxtb	r3, r3
 800fa18:	011b      	lsls	r3, r3, #4
 800fa1a:	b25b      	sxtb	r3, r3
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	b25b      	sxtb	r3, r3
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	e001      	b.n	800fa28 <put_fat+0xa8>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	697a      	ldr	r2, [r7, #20]
 800fa2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	0a5b      	lsrs	r3, r3, #9
 800fa3a:	4413      	add	r3, r2
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f7ff fe3c 	bl	800f6bc <move_window>
 800fa44:	4603      	mov	r3, r0
 800fa46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fa48:	7ffb      	ldrb	r3, [r7, #31]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d178      	bne.n	800fb40 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa5a:	4413      	add	r3, r2
 800fa5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	f003 0301 	and.w	r3, r3, #1
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d003      	beq.n	800fa70 <put_fat+0xf0>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	091b      	lsrs	r3, r3, #4
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	e00e      	b.n	800fa8e <put_fat+0x10e>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	b25b      	sxtb	r3, r3
 800fa76:	f023 030f 	bic.w	r3, r3, #15
 800fa7a:	b25a      	sxtb	r2, r3
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	0a1b      	lsrs	r3, r3, #8
 800fa80:	b25b      	sxtb	r3, r3
 800fa82:	f003 030f 	and.w	r3, r3, #15
 800fa86:	b25b      	sxtb	r3, r3
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	b25b      	sxtb	r3, r3
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	697a      	ldr	r2, [r7, #20]
 800fa90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2201      	movs	r2, #1
 800fa96:	70da      	strb	r2, [r3, #3]
			break;
 800fa98:	e057      	b.n	800fb4a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	0a1b      	lsrs	r3, r3, #8
 800faa2:	4413      	add	r3, r2
 800faa4:	4619      	mov	r1, r3
 800faa6:	68f8      	ldr	r0, [r7, #12]
 800faa8:	f7ff fe08 	bl	800f6bc <move_window>
 800faac:	4603      	mov	r3, r0
 800faae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fab0:	7ffb      	ldrb	r3, [r7, #31]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d146      	bne.n	800fb44 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	005b      	lsls	r3, r3, #1
 800fac0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fac4:	4413      	add	r3, r2
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	b292      	uxth	r2, r2
 800faca:	4611      	mov	r1, r2
 800facc:	4618      	mov	r0, r3
 800face:	f7ff fb4f 	bl	800f170 <st_word>
			fs->wflag = 1;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2201      	movs	r2, #1
 800fad6:	70da      	strb	r2, [r3, #3]
			break;
 800fad8:	e037      	b.n	800fb4a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	09db      	lsrs	r3, r3, #7
 800fae2:	4413      	add	r3, r2
 800fae4:	4619      	mov	r1, r3
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f7ff fde8 	bl	800f6bc <move_window>
 800faec:	4603      	mov	r3, r0
 800faee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800faf0:	7ffb      	ldrb	r3, [r7, #31]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d128      	bne.n	800fb48 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fb0a:	4413      	add	r3, r2
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff fb0c 	bl	800f12a <ld_dword>
 800fb12:	4603      	mov	r3, r0
 800fb14:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fb18:	4323      	orrs	r3, r4
 800fb1a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fb2a:	4413      	add	r3, r2
 800fb2c:	6879      	ldr	r1, [r7, #4]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff fb39 	bl	800f1a6 <st_dword>
			fs->wflag = 1;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2201      	movs	r2, #1
 800fb38:	70da      	strb	r2, [r3, #3]
			break;
 800fb3a:	e006      	b.n	800fb4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fb3c:	bf00      	nop
 800fb3e:	e004      	b.n	800fb4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fb40:	bf00      	nop
 800fb42:	e002      	b.n	800fb4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fb44:	bf00      	nop
 800fb46:	e000      	b.n	800fb4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fb48:	bf00      	nop
		}
	}
	return res;
 800fb4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3724      	adds	r7, #36	@ 0x24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd90      	pop	{r4, r7, pc}

0800fb54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b088      	sub	sp, #32
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fb60:	2300      	movs	r3, #0
 800fb62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d904      	bls.n	800fb7a <remove_chain+0x26>
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	699b      	ldr	r3, [r3, #24]
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d301      	bcc.n	800fb7e <remove_chain+0x2a>
 800fb7a:	2302      	movs	r3, #2
 800fb7c:	e04b      	b.n	800fc16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00c      	beq.n	800fb9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fb84:	f04f 32ff 	mov.w	r2, #4294967295
 800fb88:	6879      	ldr	r1, [r7, #4]
 800fb8a:	69b8      	ldr	r0, [r7, #24]
 800fb8c:	f7ff fef8 	bl	800f980 <put_fat>
 800fb90:	4603      	mov	r3, r0
 800fb92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fb94:	7ffb      	ldrb	r3, [r7, #31]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <remove_chain+0x4a>
 800fb9a:	7ffb      	ldrb	r3, [r7, #31]
 800fb9c:	e03b      	b.n	800fc16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fb9e:	68b9      	ldr	r1, [r7, #8]
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f7ff fe46 	bl	800f832 <get_fat>
 800fba6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d031      	beq.n	800fc12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d101      	bne.n	800fbb8 <remove_chain+0x64>
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	e02e      	b.n	800fc16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbbe:	d101      	bne.n	800fbc4 <remove_chain+0x70>
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	e028      	b.n	800fc16 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	68b9      	ldr	r1, [r7, #8]
 800fbc8:	69b8      	ldr	r0, [r7, #24]
 800fbca:	f7ff fed9 	bl	800f980 <put_fat>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fbd2:	7ffb      	ldrb	r3, [r7, #31]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d001      	beq.n	800fbdc <remove_chain+0x88>
 800fbd8:	7ffb      	ldrb	r3, [r7, #31]
 800fbda:	e01c      	b.n	800fc16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	695a      	ldr	r2, [r3, #20]
 800fbe0:	69bb      	ldr	r3, [r7, #24]
 800fbe2:	699b      	ldr	r3, [r3, #24]
 800fbe4:	3b02      	subs	r3, #2
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d20b      	bcs.n	800fc02 <remove_chain+0xae>
			fs->free_clst++;
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	695b      	ldr	r3, [r3, #20]
 800fbee:	1c5a      	adds	r2, r3, #1
 800fbf0:	69bb      	ldr	r3, [r7, #24]
 800fbf2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	791b      	ldrb	r3, [r3, #4]
 800fbf8:	f043 0301 	orr.w	r3, r3, #1
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	699b      	ldr	r3, [r3, #24]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d3c6      	bcc.n	800fb9e <remove_chain+0x4a>
 800fc10:	e000      	b.n	800fc14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fc12:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fc14:	2300      	movs	r3, #0
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3720      	adds	r7, #32
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b088      	sub	sp, #32
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
 800fc26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d10d      	bne.n	800fc50 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d004      	beq.n	800fc4a <create_chain+0x2c>
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	69ba      	ldr	r2, [r7, #24]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d31b      	bcc.n	800fc82 <create_chain+0x64>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	61bb      	str	r3, [r7, #24]
 800fc4e:	e018      	b.n	800fc82 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fc50:	6839      	ldr	r1, [r7, #0]
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7ff fded 	bl	800f832 <get_fat>
 800fc58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d801      	bhi.n	800fc64 <create_chain+0x46>
 800fc60:	2301      	movs	r3, #1
 800fc62:	e070      	b.n	800fd46 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6a:	d101      	bne.n	800fc70 <create_chain+0x52>
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	e06a      	b.n	800fd46 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d201      	bcs.n	800fc7e <create_chain+0x60>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	e063      	b.n	800fd46 <create_chain+0x128>
		scl = clst;
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	3301      	adds	r3, #1
 800fc8a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	699b      	ldr	r3, [r3, #24]
 800fc90:	69fa      	ldr	r2, [r7, #28]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d307      	bcc.n	800fca6 <create_chain+0x88>
				ncl = 2;
 800fc96:	2302      	movs	r3, #2
 800fc98:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fc9a:	69fa      	ldr	r2, [r7, #28]
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d901      	bls.n	800fca6 <create_chain+0x88>
 800fca2:	2300      	movs	r3, #0
 800fca4:	e04f      	b.n	800fd46 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fca6:	69f9      	ldr	r1, [r7, #28]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff fdc2 	bl	800f832 <get_fat>
 800fcae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00e      	beq.n	800fcd4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d003      	beq.n	800fcc4 <create_chain+0xa6>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc2:	d101      	bne.n	800fcc8 <create_chain+0xaa>
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	e03e      	b.n	800fd46 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fcc8:	69fa      	ldr	r2, [r7, #28]
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d1da      	bne.n	800fc86 <create_chain+0x68>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	e038      	b.n	800fd46 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fcd4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcda:	69f9      	ldr	r1, [r7, #28]
 800fcdc:	6938      	ldr	r0, [r7, #16]
 800fcde:	f7ff fe4f 	bl	800f980 <put_fat>
 800fce2:	4603      	mov	r3, r0
 800fce4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fce6:	7dfb      	ldrb	r3, [r7, #23]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d109      	bne.n	800fd00 <create_chain+0xe2>
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d006      	beq.n	800fd00 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fcf2:	69fa      	ldr	r2, [r7, #28]
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	6938      	ldr	r0, [r7, #16]
 800fcf8:	f7ff fe42 	bl	800f980 <put_fat>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fd00:	7dfb      	ldrb	r3, [r7, #23]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d116      	bne.n	800fd34 <create_chain+0x116>
		fs->last_clst = ncl;
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	69fa      	ldr	r2, [r7, #28]
 800fd0a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	695a      	ldr	r2, [r3, #20]
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	3b02      	subs	r3, #2
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d804      	bhi.n	800fd24 <create_chain+0x106>
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	695b      	ldr	r3, [r3, #20]
 800fd1e:	1e5a      	subs	r2, r3, #1
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	791b      	ldrb	r3, [r3, #4]
 800fd28:	f043 0301 	orr.w	r3, r3, #1
 800fd2c:	b2da      	uxtb	r2, r3
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	711a      	strb	r2, [r3, #4]
 800fd32:	e007      	b.n	800fd44 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d102      	bne.n	800fd40 <create_chain+0x122>
 800fd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd3e:	e000      	b.n	800fd42 <create_chain+0x124>
 800fd40:	2301      	movs	r3, #1
 800fd42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fd44:	69fb      	ldr	r3, [r7, #28]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3720      	adds	r7, #32
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fd4e:	b480      	push	{r7}
 800fd50:	b087      	sub	sp, #28
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
 800fd56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd62:	3304      	adds	r3, #4
 800fd64:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	0a5b      	lsrs	r3, r3, #9
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	8952      	ldrh	r2, [r2, #10]
 800fd6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd72:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	1d1a      	adds	r2, r3, #4
 800fd78:	613a      	str	r2, [r7, #16]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d101      	bne.n	800fd88 <clmt_clust+0x3a>
 800fd84:	2300      	movs	r3, #0
 800fd86:	e010      	b.n	800fdaa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800fd88:	697a      	ldr	r2, [r7, #20]
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d307      	bcc.n	800fda0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800fd90:	697a      	ldr	r2, [r7, #20]
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	617b      	str	r3, [r7, #20]
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	3304      	adds	r3, #4
 800fd9c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fd9e:	e7e9      	b.n	800fd74 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800fda0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	4413      	add	r3, r2
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	371c      	adds	r7, #28
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr

0800fdb6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b086      	sub	sp, #24
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
 800fdbe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fdcc:	d204      	bcs.n	800fdd8 <dir_sdi+0x22>
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	f003 031f 	and.w	r3, r3, #31
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d001      	beq.n	800fddc <dir_sdi+0x26>
		return FR_INT_ERR;
 800fdd8:	2302      	movs	r3, #2
 800fdda:	e063      	b.n	800fea4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	683a      	ldr	r2, [r7, #0]
 800fde0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d106      	bne.n	800fdfc <dir_sdi+0x46>
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	2b02      	cmp	r3, #2
 800fdf4:	d902      	bls.n	800fdfc <dir_sdi+0x46>
		clst = fs->dirbase;
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdfa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d10c      	bne.n	800fe1c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	095b      	lsrs	r3, r3, #5
 800fe06:	693a      	ldr	r2, [r7, #16]
 800fe08:	8912      	ldrh	r2, [r2, #8]
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d301      	bcc.n	800fe12 <dir_sdi+0x5c>
 800fe0e:	2302      	movs	r3, #2
 800fe10:	e048      	b.n	800fea4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	61da      	str	r2, [r3, #28]
 800fe1a:	e029      	b.n	800fe70 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	895b      	ldrh	r3, [r3, #10]
 800fe20:	025b      	lsls	r3, r3, #9
 800fe22:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fe24:	e019      	b.n	800fe5a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6979      	ldr	r1, [r7, #20]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7ff fd01 	bl	800f832 <get_fat>
 800fe30:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe38:	d101      	bne.n	800fe3e <dir_sdi+0x88>
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	e032      	b.n	800fea4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d904      	bls.n	800fe4e <dir_sdi+0x98>
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	699b      	ldr	r3, [r3, #24]
 800fe48:	697a      	ldr	r2, [r7, #20]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d301      	bcc.n	800fe52 <dir_sdi+0x9c>
 800fe4e:	2302      	movs	r3, #2
 800fe50:	e028      	b.n	800fea4 <dir_sdi+0xee>
			ofs -= csz;
 800fe52:	683a      	ldr	r2, [r7, #0]
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	1ad3      	subs	r3, r2, r3
 800fe58:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fe5a:	683a      	ldr	r2, [r7, #0]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d2e1      	bcs.n	800fe26 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800fe62:	6979      	ldr	r1, [r7, #20]
 800fe64:	6938      	ldr	r0, [r7, #16]
 800fe66:	f7ff fcc5 	bl	800f7f4 <clust2sect>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	69db      	ldr	r3, [r3, #28]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <dir_sdi+0xcc>
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e010      	b.n	800fea4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	69da      	ldr	r2, [r3, #28]
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	0a5b      	lsrs	r3, r3, #9
 800fe8a:	441a      	add	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe9c:	441a      	add	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3718      	adds	r7, #24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b086      	sub	sp, #24
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	695b      	ldr	r3, [r3, #20]
 800fec0:	3320      	adds	r3, #32
 800fec2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	69db      	ldr	r3, [r3, #28]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d003      	beq.n	800fed4 <dir_next+0x28>
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fed2:	d301      	bcc.n	800fed8 <dir_next+0x2c>
 800fed4:	2304      	movs	r3, #4
 800fed6:	e0aa      	b.n	801002e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fede:	2b00      	cmp	r3, #0
 800fee0:	f040 8098 	bne.w	8010014 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	69db      	ldr	r3, [r3, #28]
 800fee8:	1c5a      	adds	r2, r3, #1
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	699b      	ldr	r3, [r3, #24]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d10b      	bne.n	800ff0e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	095b      	lsrs	r3, r3, #5
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	8912      	ldrh	r2, [r2, #8]
 800fefe:	4293      	cmp	r3, r2
 800ff00:	f0c0 8088 	bcc.w	8010014 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	61da      	str	r2, [r3, #28]
 800ff0a:	2304      	movs	r3, #4
 800ff0c:	e08f      	b.n	801002e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	0a5b      	lsrs	r3, r3, #9
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	8952      	ldrh	r2, [r2, #10]
 800ff16:	3a01      	subs	r2, #1
 800ff18:	4013      	ands	r3, r2
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d17a      	bne.n	8010014 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	699b      	ldr	r3, [r3, #24]
 800ff24:	4619      	mov	r1, r3
 800ff26:	4610      	mov	r0, r2
 800ff28:	f7ff fc83 	bl	800f832 <get_fat>
 800ff2c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d801      	bhi.n	800ff38 <dir_next+0x8c>
 800ff34:	2302      	movs	r3, #2
 800ff36:	e07a      	b.n	801002e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff3e:	d101      	bne.n	800ff44 <dir_next+0x98>
 800ff40:	2301      	movs	r3, #1
 800ff42:	e074      	b.n	801002e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	697a      	ldr	r2, [r7, #20]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d358      	bcc.n	8010000 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d104      	bne.n	800ff5e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	61da      	str	r2, [r3, #28]
 800ff5a:	2304      	movs	r3, #4
 800ff5c:	e067      	b.n	801002e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	4619      	mov	r1, r3
 800ff66:	4610      	mov	r0, r2
 800ff68:	f7ff fe59 	bl	800fc1e <create_chain>
 800ff6c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d101      	bne.n	800ff78 <dir_next+0xcc>
 800ff74:	2307      	movs	r3, #7
 800ff76:	e05a      	b.n	801002e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d101      	bne.n	800ff82 <dir_next+0xd6>
 800ff7e:	2302      	movs	r3, #2
 800ff80:	e055      	b.n	801002e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff88:	d101      	bne.n	800ff8e <dir_next+0xe2>
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e04f      	b.n	801002e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f7ff fb50 	bl	800f634 <sync_window>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <dir_next+0xf2>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e047      	b.n	801002e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	3334      	adds	r3, #52	@ 0x34
 800ffa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ffa6:	2100      	movs	r1, #0
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7ff f949 	bl	800f240 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ffae:	2300      	movs	r3, #0
 800ffb0:	613b      	str	r3, [r7, #16]
 800ffb2:	6979      	ldr	r1, [r7, #20]
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f7ff fc1d 	bl	800f7f4 <clust2sect>
 800ffba:	4602      	mov	r2, r0
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	631a      	str	r2, [r3, #48]	@ 0x30
 800ffc0:	e012      	b.n	800ffe8 <dir_next+0x13c>
						fs->wflag = 1;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f7ff fb33 	bl	800f634 <sync_window>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d001      	beq.n	800ffd8 <dir_next+0x12c>
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	e02a      	b.n	801002e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	3301      	adds	r3, #1
 800ffdc:	613b      	str	r3, [r7, #16]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffe2:	1c5a      	adds	r2, r3, #1
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	631a      	str	r2, [r3, #48]	@ 0x30
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	895b      	ldrh	r3, [r3, #10]
 800ffec:	461a      	mov	r2, r3
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d3e6      	bcc.n	800ffc2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	1ad2      	subs	r2, r2, r3
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010006:	6979      	ldr	r1, [r7, #20]
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	f7ff fbf3 	bl	800f7f4 <clust2sect>
 801000e:	4602      	mov	r2, r0
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010026:	441a      	add	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3718      	adds	r7, #24
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b086      	sub	sp, #24
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010046:	2100      	movs	r1, #0
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7ff feb4 	bl	800fdb6 <dir_sdi>
 801004e:	4603      	mov	r3, r0
 8010050:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010052:	7dfb      	ldrb	r3, [r7, #23]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d12b      	bne.n	80100b0 <dir_alloc+0x7a>
		n = 0;
 8010058:	2300      	movs	r3, #0
 801005a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	69db      	ldr	r3, [r3, #28]
 8010060:	4619      	mov	r1, r3
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7ff fb2a 	bl	800f6bc <move_window>
 8010068:	4603      	mov	r3, r0
 801006a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801006c:	7dfb      	ldrb	r3, [r7, #23]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d11d      	bne.n	80100ae <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	2be5      	cmp	r3, #229	@ 0xe5
 801007a:	d004      	beq.n	8010086 <dir_alloc+0x50>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6a1b      	ldr	r3, [r3, #32]
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d107      	bne.n	8010096 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	3301      	adds	r3, #1
 801008a:	613b      	str	r3, [r7, #16]
 801008c:	693a      	ldr	r2, [r7, #16]
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	429a      	cmp	r2, r3
 8010092:	d102      	bne.n	801009a <dir_alloc+0x64>
 8010094:	e00c      	b.n	80100b0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010096:	2300      	movs	r3, #0
 8010098:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801009a:	2101      	movs	r1, #1
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7ff ff05 	bl	800feac <dir_next>
 80100a2:	4603      	mov	r3, r0
 80100a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d0d7      	beq.n	801005c <dir_alloc+0x26>
 80100ac:	e000      	b.n	80100b0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80100ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80100b0:	7dfb      	ldrb	r3, [r7, #23]
 80100b2:	2b04      	cmp	r3, #4
 80100b4:	d101      	bne.n	80100ba <dir_alloc+0x84>
 80100b6:	2307      	movs	r3, #7
 80100b8:	75fb      	strb	r3, [r7, #23]
	return res;
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3718      	adds	r7, #24
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	331a      	adds	r3, #26
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff f810 	bl	800f0f8 <ld_word>
 80100d8:	4603      	mov	r3, r0
 80100da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	2b03      	cmp	r3, #3
 80100e2:	d109      	bne.n	80100f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	3314      	adds	r3, #20
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7ff f805 	bl	800f0f8 <ld_word>
 80100ee:	4603      	mov	r3, r0
 80100f0:	041b      	lsls	r3, r3, #16
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	4313      	orrs	r3, r2
 80100f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80100f8:	68fb      	ldr	r3, [r7, #12]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	60f8      	str	r0, [r7, #12]
 801010a:	60b9      	str	r1, [r7, #8]
 801010c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	331a      	adds	r3, #26
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	b292      	uxth	r2, r2
 8010116:	4611      	mov	r1, r2
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff f829 	bl	800f170 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	2b03      	cmp	r3, #3
 8010124:	d109      	bne.n	801013a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	f103 0214 	add.w	r2, r3, #20
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	0c1b      	lsrs	r3, r3, #16
 8010130:	b29b      	uxth	r3, r3
 8010132:	4619      	mov	r1, r3
 8010134:	4610      	mov	r0, r2
 8010136:	f7ff f81b 	bl	800f170 <st_word>
	}
}
 801013a:	bf00      	nop
 801013c:	3710      	adds	r7, #16
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b086      	sub	sp, #24
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010150:	2100      	movs	r1, #0
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff fe2f 	bl	800fdb6 <dir_sdi>
 8010158:	4603      	mov	r3, r0
 801015a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801015c:	7dfb      	ldrb	r3, [r7, #23]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <dir_find+0x24>
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	e03e      	b.n	80101e4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	4619      	mov	r1, r3
 801016c:	6938      	ldr	r0, [r7, #16]
 801016e:	f7ff faa5 	bl	800f6bc <move_window>
 8010172:	4603      	mov	r3, r0
 8010174:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d12f      	bne.n	80101dc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a1b      	ldr	r3, [r3, #32]
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010184:	7bfb      	ldrb	r3, [r7, #15]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d102      	bne.n	8010190 <dir_find+0x4e>
 801018a:	2304      	movs	r3, #4
 801018c:	75fb      	strb	r3, [r7, #23]
 801018e:	e028      	b.n	80101e2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6a1b      	ldr	r3, [r3, #32]
 8010194:	330b      	adds	r3, #11
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801019c:	b2da      	uxtb	r2, r3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6a1b      	ldr	r3, [r3, #32]
 80101a6:	330b      	adds	r3, #11
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f003 0308 	and.w	r3, r3, #8
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d10a      	bne.n	80101c8 <dir_find+0x86>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6a18      	ldr	r0, [r3, #32]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3324      	adds	r3, #36	@ 0x24
 80101ba:	220b      	movs	r2, #11
 80101bc:	4619      	mov	r1, r3
 80101be:	f7ff f85a 	bl	800f276 <mem_cmp>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00b      	beq.n	80101e0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80101c8:	2100      	movs	r1, #0
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7ff fe6e 	bl	800feac <dir_next>
 80101d0:	4603      	mov	r3, r0
 80101d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80101d4:	7dfb      	ldrb	r3, [r7, #23]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d0c5      	beq.n	8010166 <dir_find+0x24>
 80101da:	e002      	b.n	80101e2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80101dc:	bf00      	nop
 80101de:	e000      	b.n	80101e2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80101e0:	bf00      	nop

	return res;
 80101e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3718      	adds	r7, #24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80101fa:	2101      	movs	r1, #1
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f7ff ff1a 	bl	8010036 <dir_alloc>
 8010202:	4603      	mov	r3, r0
 8010204:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010206:	7bfb      	ldrb	r3, [r7, #15]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d11c      	bne.n	8010246 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	69db      	ldr	r3, [r3, #28]
 8010210:	4619      	mov	r1, r3
 8010212:	68b8      	ldr	r0, [r7, #8]
 8010214:	f7ff fa52 	bl	800f6bc <move_window>
 8010218:	4603      	mov	r3, r0
 801021a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801021c:	7bfb      	ldrb	r3, [r7, #15]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d111      	bne.n	8010246 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6a1b      	ldr	r3, [r3, #32]
 8010226:	2220      	movs	r2, #32
 8010228:	2100      	movs	r1, #0
 801022a:	4618      	mov	r0, r3
 801022c:	f7ff f808 	bl	800f240 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a18      	ldr	r0, [r3, #32]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3324      	adds	r3, #36	@ 0x24
 8010238:	220b      	movs	r2, #11
 801023a:	4619      	mov	r1, r3
 801023c:	f7fe ffdf 	bl	800f1fe <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	2201      	movs	r2, #1
 8010244:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010246:	7bfb      	ldrb	r3, [r7, #15]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3710      	adds	r7, #16
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	60fb      	str	r3, [r7, #12]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	3324      	adds	r3, #36	@ 0x24
 8010264:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010266:	220b      	movs	r2, #11
 8010268:	2120      	movs	r1, #32
 801026a:	68b8      	ldr	r0, [r7, #8]
 801026c:	f7fe ffe8 	bl	800f240 <mem_set>
	si = i = 0; ni = 8;
 8010270:	2300      	movs	r3, #0
 8010272:	613b      	str	r3, [r7, #16]
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	61fb      	str	r3, [r7, #28]
 8010278:	2308      	movs	r3, #8
 801027a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	1c5a      	adds	r2, r3, #1
 8010280:	61fa      	str	r2, [r7, #28]
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	4413      	add	r3, r2
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801028a:	7efb      	ldrb	r3, [r7, #27]
 801028c:	2b20      	cmp	r3, #32
 801028e:	d94e      	bls.n	801032e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010290:	7efb      	ldrb	r3, [r7, #27]
 8010292:	2b2f      	cmp	r3, #47	@ 0x2f
 8010294:	d006      	beq.n	80102a4 <create_name+0x54>
 8010296:	7efb      	ldrb	r3, [r7, #27]
 8010298:	2b5c      	cmp	r3, #92	@ 0x5c
 801029a:	d110      	bne.n	80102be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801029c:	e002      	b.n	80102a4 <create_name+0x54>
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	3301      	adds	r3, #1
 80102a2:	61fb      	str	r3, [r7, #28]
 80102a4:	68fa      	ldr	r2, [r7, #12]
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	4413      	add	r3, r2
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80102ae:	d0f6      	beq.n	801029e <create_name+0x4e>
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	69fb      	ldr	r3, [r7, #28]
 80102b4:	4413      	add	r3, r2
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80102ba:	d0f0      	beq.n	801029e <create_name+0x4e>
			break;
 80102bc:	e038      	b.n	8010330 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80102be:	7efb      	ldrb	r3, [r7, #27]
 80102c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80102c2:	d003      	beq.n	80102cc <create_name+0x7c>
 80102c4:	693a      	ldr	r2, [r7, #16]
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d30c      	bcc.n	80102e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	2b0b      	cmp	r3, #11
 80102d0:	d002      	beq.n	80102d8 <create_name+0x88>
 80102d2:	7efb      	ldrb	r3, [r7, #27]
 80102d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80102d6:	d001      	beq.n	80102dc <create_name+0x8c>
 80102d8:	2306      	movs	r3, #6
 80102da:	e044      	b.n	8010366 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80102dc:	2308      	movs	r3, #8
 80102de:	613b      	str	r3, [r7, #16]
 80102e0:	230b      	movs	r3, #11
 80102e2:	617b      	str	r3, [r7, #20]
			continue;
 80102e4:	e022      	b.n	801032c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80102e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	da04      	bge.n	80102f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80102ee:	7efb      	ldrb	r3, [r7, #27]
 80102f0:	3b80      	subs	r3, #128	@ 0x80
 80102f2:	4a1f      	ldr	r2, [pc, #124]	@ (8010370 <create_name+0x120>)
 80102f4:	5cd3      	ldrb	r3, [r2, r3]
 80102f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80102f8:	7efb      	ldrb	r3, [r7, #27]
 80102fa:	4619      	mov	r1, r3
 80102fc:	481d      	ldr	r0, [pc, #116]	@ (8010374 <create_name+0x124>)
 80102fe:	f7fe ffe1 	bl	800f2c4 <chk_chr>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d001      	beq.n	801030c <create_name+0xbc>
 8010308:	2306      	movs	r3, #6
 801030a:	e02c      	b.n	8010366 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801030c:	7efb      	ldrb	r3, [r7, #27]
 801030e:	2b60      	cmp	r3, #96	@ 0x60
 8010310:	d905      	bls.n	801031e <create_name+0xce>
 8010312:	7efb      	ldrb	r3, [r7, #27]
 8010314:	2b7a      	cmp	r3, #122	@ 0x7a
 8010316:	d802      	bhi.n	801031e <create_name+0xce>
 8010318:	7efb      	ldrb	r3, [r7, #27]
 801031a:	3b20      	subs	r3, #32
 801031c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	1c5a      	adds	r2, r3, #1
 8010322:	613a      	str	r2, [r7, #16]
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	4413      	add	r3, r2
 8010328:	7efa      	ldrb	r2, [r7, #27]
 801032a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801032c:	e7a6      	b.n	801027c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801032e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	441a      	add	r2, r3
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <create_name+0xf4>
 8010340:	2306      	movs	r3, #6
 8010342:	e010      	b.n	8010366 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	2be5      	cmp	r3, #229	@ 0xe5
 801034a:	d102      	bne.n	8010352 <create_name+0x102>
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	2205      	movs	r2, #5
 8010350:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010352:	7efb      	ldrb	r3, [r7, #27]
 8010354:	2b20      	cmp	r3, #32
 8010356:	d801      	bhi.n	801035c <create_name+0x10c>
 8010358:	2204      	movs	r2, #4
 801035a:	e000      	b.n	801035e <create_name+0x10e>
 801035c:	2200      	movs	r2, #0
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	330b      	adds	r3, #11
 8010362:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010364:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010366:	4618      	mov	r0, r3
 8010368:	3720      	adds	r7, #32
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	0801c80c 	.word	0x0801c80c
 8010374:	0801a854 	.word	0x0801a854

08010378 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b086      	sub	sp, #24
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801038c:	e002      	b.n	8010394 <follow_path+0x1c>
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	3301      	adds	r3, #1
 8010392:	603b      	str	r3, [r7, #0]
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	2b2f      	cmp	r3, #47	@ 0x2f
 801039a:	d0f8      	beq.n	801038e <follow_path+0x16>
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80103a2:	d0f4      	beq.n	801038e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	2200      	movs	r2, #0
 80103a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	2b1f      	cmp	r3, #31
 80103b0:	d80a      	bhi.n	80103c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2280      	movs	r2, #128	@ 0x80
 80103b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80103ba:	2100      	movs	r1, #0
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7ff fcfa 	bl	800fdb6 <dir_sdi>
 80103c2:	4603      	mov	r3, r0
 80103c4:	75fb      	strb	r3, [r7, #23]
 80103c6:	e043      	b.n	8010450 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80103c8:	463b      	mov	r3, r7
 80103ca:	4619      	mov	r1, r3
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f7ff ff3f 	bl	8010250 <create_name>
 80103d2:	4603      	mov	r3, r0
 80103d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80103d6:	7dfb      	ldrb	r3, [r7, #23]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d134      	bne.n	8010446 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f7ff feb0 	bl	8010142 <dir_find>
 80103e2:	4603      	mov	r3, r0
 80103e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80103ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80103ee:	7dfb      	ldrb	r3, [r7, #23]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00a      	beq.n	801040a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80103f4:	7dfb      	ldrb	r3, [r7, #23]
 80103f6:	2b04      	cmp	r3, #4
 80103f8:	d127      	bne.n	801044a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80103fa:	7afb      	ldrb	r3, [r7, #11]
 80103fc:	f003 0304 	and.w	r3, r3, #4
 8010400:	2b00      	cmp	r3, #0
 8010402:	d122      	bne.n	801044a <follow_path+0xd2>
 8010404:	2305      	movs	r3, #5
 8010406:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010408:	e01f      	b.n	801044a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801040a:	7afb      	ldrb	r3, [r7, #11]
 801040c:	f003 0304 	and.w	r3, r3, #4
 8010410:	2b00      	cmp	r3, #0
 8010412:	d11c      	bne.n	801044e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	799b      	ldrb	r3, [r3, #6]
 8010418:	f003 0310 	and.w	r3, r3, #16
 801041c:	2b00      	cmp	r3, #0
 801041e:	d102      	bne.n	8010426 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010420:	2305      	movs	r3, #5
 8010422:	75fb      	strb	r3, [r7, #23]
 8010424:	e014      	b.n	8010450 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	695b      	ldr	r3, [r3, #20]
 8010430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010434:	4413      	add	r3, r2
 8010436:	4619      	mov	r1, r3
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f7ff fe43 	bl	80100c4 <ld_clust>
 801043e:	4602      	mov	r2, r0
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010444:	e7c0      	b.n	80103c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8010446:	bf00      	nop
 8010448:	e002      	b.n	8010450 <follow_path+0xd8>
				break;
 801044a:	bf00      	nop
 801044c:	e000      	b.n	8010450 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801044e:	bf00      	nop
			}
		}
	}

	return res;
 8010450:	7dfb      	ldrb	r3, [r7, #23]
}
 8010452:	4618      	mov	r0, r3
 8010454:	3718      	adds	r7, #24
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801045a:	b480      	push	{r7}
 801045c:	b087      	sub	sp, #28
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010462:	f04f 33ff 	mov.w	r3, #4294967295
 8010466:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d031      	beq.n	80104d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	617b      	str	r3, [r7, #20]
 8010476:	e002      	b.n	801047e <get_ldnumber+0x24>
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	3301      	adds	r3, #1
 801047c:	617b      	str	r3, [r7, #20]
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	2b20      	cmp	r3, #32
 8010484:	d903      	bls.n	801048e <get_ldnumber+0x34>
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	2b3a      	cmp	r3, #58	@ 0x3a
 801048c:	d1f4      	bne.n	8010478 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	2b3a      	cmp	r3, #58	@ 0x3a
 8010494:	d11c      	bne.n	80104d0 <get_ldnumber+0x76>
			tp = *path;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	1c5a      	adds	r2, r3, #1
 80104a0:	60fa      	str	r2, [r7, #12]
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	3b30      	subs	r3, #48	@ 0x30
 80104a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	2b09      	cmp	r3, #9
 80104ac:	d80e      	bhi.n	80104cc <get_ldnumber+0x72>
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d10a      	bne.n	80104cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d107      	bne.n	80104cc <get_ldnumber+0x72>
					vol = (int)i;
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	3301      	adds	r3, #1
 80104c4:	617b      	str	r3, [r7, #20]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	697a      	ldr	r2, [r7, #20]
 80104ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	e002      	b.n	80104d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80104d0:	2300      	movs	r3, #0
 80104d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80104d4:	693b      	ldr	r3, [r7, #16]
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	371c      	adds	r7, #28
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr
	...

080104e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	70da      	strb	r2, [r3, #3]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f04f 32ff 	mov.w	r2, #4294967295
 80104fa:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80104fc:	6839      	ldr	r1, [r7, #0]
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7ff f8dc 	bl	800f6bc <move_window>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d001      	beq.n	801050e <check_fs+0x2a>
 801050a:	2304      	movs	r3, #4
 801050c:	e038      	b.n	8010580 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	3334      	adds	r3, #52	@ 0x34
 8010512:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010516:	4618      	mov	r0, r3
 8010518:	f7fe fdee 	bl	800f0f8 <ld_word>
 801051c:	4603      	mov	r3, r0
 801051e:	461a      	mov	r2, r3
 8010520:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010524:	429a      	cmp	r2, r3
 8010526:	d001      	beq.n	801052c <check_fs+0x48>
 8010528:	2303      	movs	r3, #3
 801052a:	e029      	b.n	8010580 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010532:	2be9      	cmp	r3, #233	@ 0xe9
 8010534:	d009      	beq.n	801054a <check_fs+0x66>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801053c:	2beb      	cmp	r3, #235	@ 0xeb
 801053e:	d11e      	bne.n	801057e <check_fs+0x9a>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8010546:	2b90      	cmp	r3, #144	@ 0x90
 8010548:	d119      	bne.n	801057e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	3334      	adds	r3, #52	@ 0x34
 801054e:	3336      	adds	r3, #54	@ 0x36
 8010550:	4618      	mov	r0, r3
 8010552:	f7fe fdea 	bl	800f12a <ld_dword>
 8010556:	4603      	mov	r3, r0
 8010558:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801055c:	4a0a      	ldr	r2, [pc, #40]	@ (8010588 <check_fs+0xa4>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d101      	bne.n	8010566 <check_fs+0x82>
 8010562:	2300      	movs	r3, #0
 8010564:	e00c      	b.n	8010580 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	3334      	adds	r3, #52	@ 0x34
 801056a:	3352      	adds	r3, #82	@ 0x52
 801056c:	4618      	mov	r0, r3
 801056e:	f7fe fddc 	bl	800f12a <ld_dword>
 8010572:	4603      	mov	r3, r0
 8010574:	4a05      	ldr	r2, [pc, #20]	@ (801058c <check_fs+0xa8>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d101      	bne.n	801057e <check_fs+0x9a>
 801057a:	2300      	movs	r3, #0
 801057c:	e000      	b.n	8010580 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801057e:	2302      	movs	r3, #2
}
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	00544146 	.word	0x00544146
 801058c:	33544146 	.word	0x33544146

08010590 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b096      	sub	sp, #88	@ 0x58
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4613      	mov	r3, r2
 801059c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	2200      	movs	r2, #0
 80105a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f7ff ff58 	bl	801045a <get_ldnumber>
 80105aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80105ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	da01      	bge.n	80105b6 <find_volume+0x26>
 80105b2:	230b      	movs	r3, #11
 80105b4:	e235      	b.n	8010a22 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80105b6:	4aa5      	ldr	r2, [pc, #660]	@ (801084c <find_volume+0x2bc>)
 80105b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80105c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d101      	bne.n	80105ca <find_volume+0x3a>
 80105c6:	230c      	movs	r3, #12
 80105c8:	e22b      	b.n	8010a22 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80105ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80105cc:	f7fe fe95 	bl	800f2fa <lock_fs>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d101      	bne.n	80105da <find_volume+0x4a>
 80105d6:	230f      	movs	r3, #15
 80105d8:	e223      	b.n	8010a22 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80105de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80105e0:	79fb      	ldrb	r3, [r7, #7]
 80105e2:	f023 0301 	bic.w	r3, r3, #1
 80105e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80105e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d01a      	beq.n	8010626 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80105f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105f2:	785b      	ldrb	r3, [r3, #1]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fe fce1 	bl	800efbc <disk_status>
 80105fa:	4603      	mov	r3, r0
 80105fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010600:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010604:	f003 0301 	and.w	r3, r3, #1
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10c      	bne.n	8010626 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801060c:	79fb      	ldrb	r3, [r7, #7]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d007      	beq.n	8010622 <find_volume+0x92>
 8010612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010616:	f003 0304 	and.w	r3, r3, #4
 801061a:	2b00      	cmp	r3, #0
 801061c:	d001      	beq.n	8010622 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801061e:	230a      	movs	r3, #10
 8010620:	e1ff      	b.n	8010a22 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010622:	2300      	movs	r3, #0
 8010624:	e1fd      	b.n	8010a22 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010628:	2200      	movs	r2, #0
 801062a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801062c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801062e:	b2da      	uxtb	r2, r3
 8010630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010632:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010636:	785b      	ldrb	r3, [r3, #1]
 8010638:	4618      	mov	r0, r3
 801063a:	f7fe fcd9 	bl	800eff0 <disk_initialize>
 801063e:	4603      	mov	r3, r0
 8010640:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010644:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	d001      	beq.n	8010654 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010650:	2303      	movs	r3, #3
 8010652:	e1e6      	b.n	8010a22 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010654:	79fb      	ldrb	r3, [r7, #7]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d007      	beq.n	801066a <find_volume+0xda>
 801065a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801065e:	f003 0304 	and.w	r3, r3, #4
 8010662:	2b00      	cmp	r3, #0
 8010664:	d001      	beq.n	801066a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010666:	230a      	movs	r3, #10
 8010668:	e1db      	b.n	8010a22 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801066a:	2300      	movs	r3, #0
 801066c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801066e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010670:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010672:	f7ff ff37 	bl	80104e4 <check_fs>
 8010676:	4603      	mov	r3, r0
 8010678:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801067c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010680:	2b02      	cmp	r3, #2
 8010682:	d149      	bne.n	8010718 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010684:	2300      	movs	r3, #0
 8010686:	643b      	str	r3, [r7, #64]	@ 0x40
 8010688:	e01e      	b.n	80106c8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801068a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801068c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010692:	011b      	lsls	r3, r3, #4
 8010694:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010698:	4413      	add	r3, r2
 801069a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801069c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801069e:	3304      	adds	r3, #4
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d006      	beq.n	80106b4 <find_volume+0x124>
 80106a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106a8:	3308      	adds	r3, #8
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7fe fd3d 	bl	800f12a <ld_dword>
 80106b0:	4602      	mov	r2, r0
 80106b2:	e000      	b.n	80106b6 <find_volume+0x126>
 80106b4:	2200      	movs	r2, #0
 80106b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	3358      	adds	r3, #88	@ 0x58
 80106bc:	443b      	add	r3, r7
 80106be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80106c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106c4:	3301      	adds	r3, #1
 80106c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80106c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	d9dd      	bls.n	801068a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80106ce:	2300      	movs	r3, #0
 80106d0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80106d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d002      	beq.n	80106de <find_volume+0x14e>
 80106d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106da:	3b01      	subs	r3, #1
 80106dc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80106de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	3358      	adds	r3, #88	@ 0x58
 80106e4:	443b      	add	r3, r7
 80106e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80106ea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80106ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d005      	beq.n	80106fe <find_volume+0x16e>
 80106f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80106f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80106f6:	f7ff fef5 	bl	80104e4 <check_fs>
 80106fa:	4603      	mov	r3, r0
 80106fc:	e000      	b.n	8010700 <find_volume+0x170>
 80106fe:	2303      	movs	r3, #3
 8010700:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010704:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010708:	2b01      	cmp	r3, #1
 801070a:	d905      	bls.n	8010718 <find_volume+0x188>
 801070c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801070e:	3301      	adds	r3, #1
 8010710:	643b      	str	r3, [r7, #64]	@ 0x40
 8010712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010714:	2b03      	cmp	r3, #3
 8010716:	d9e2      	bls.n	80106de <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801071c:	2b04      	cmp	r3, #4
 801071e:	d101      	bne.n	8010724 <find_volume+0x194>
 8010720:	2301      	movs	r3, #1
 8010722:	e17e      	b.n	8010a22 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010724:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010728:	2b01      	cmp	r3, #1
 801072a:	d901      	bls.n	8010730 <find_volume+0x1a0>
 801072c:	230d      	movs	r3, #13
 801072e:	e178      	b.n	8010a22 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010732:	3334      	adds	r3, #52	@ 0x34
 8010734:	330b      	adds	r3, #11
 8010736:	4618      	mov	r0, r3
 8010738:	f7fe fcde 	bl	800f0f8 <ld_word>
 801073c:	4603      	mov	r3, r0
 801073e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010742:	d001      	beq.n	8010748 <find_volume+0x1b8>
 8010744:	230d      	movs	r3, #13
 8010746:	e16c      	b.n	8010a22 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801074a:	3334      	adds	r3, #52	@ 0x34
 801074c:	3316      	adds	r3, #22
 801074e:	4618      	mov	r0, r3
 8010750:	f7fe fcd2 	bl	800f0f8 <ld_word>
 8010754:	4603      	mov	r3, r0
 8010756:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801075a:	2b00      	cmp	r3, #0
 801075c:	d106      	bne.n	801076c <find_volume+0x1dc>
 801075e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010760:	3334      	adds	r3, #52	@ 0x34
 8010762:	3324      	adds	r3, #36	@ 0x24
 8010764:	4618      	mov	r0, r3
 8010766:	f7fe fce0 	bl	800f12a <ld_dword>
 801076a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801076c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801076e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010770:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010774:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801077a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801077c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801077e:	789b      	ldrb	r3, [r3, #2]
 8010780:	2b01      	cmp	r3, #1
 8010782:	d005      	beq.n	8010790 <find_volume+0x200>
 8010784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010786:	789b      	ldrb	r3, [r3, #2]
 8010788:	2b02      	cmp	r3, #2
 801078a:	d001      	beq.n	8010790 <find_volume+0x200>
 801078c:	230d      	movs	r3, #13
 801078e:	e148      	b.n	8010a22 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010792:	789b      	ldrb	r3, [r3, #2]
 8010794:	461a      	mov	r2, r3
 8010796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010798:	fb02 f303 	mul.w	r3, r2, r3
 801079c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801079e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107a4:	461a      	mov	r2, r3
 80107a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80107aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ac:	895b      	ldrh	r3, [r3, #10]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d008      	beq.n	80107c4 <find_volume+0x234>
 80107b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107b4:	895b      	ldrh	r3, [r3, #10]
 80107b6:	461a      	mov	r2, r3
 80107b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ba:	895b      	ldrh	r3, [r3, #10]
 80107bc:	3b01      	subs	r3, #1
 80107be:	4013      	ands	r3, r2
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d001      	beq.n	80107c8 <find_volume+0x238>
 80107c4:	230d      	movs	r3, #13
 80107c6:	e12c      	b.n	8010a22 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80107c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ca:	3334      	adds	r3, #52	@ 0x34
 80107cc:	3311      	adds	r3, #17
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fe fc92 	bl	800f0f8 <ld_word>
 80107d4:	4603      	mov	r3, r0
 80107d6:	461a      	mov	r2, r3
 80107d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80107dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107de:	891b      	ldrh	r3, [r3, #8]
 80107e0:	f003 030f 	and.w	r3, r3, #15
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d001      	beq.n	80107ee <find_volume+0x25e>
 80107ea:	230d      	movs	r3, #13
 80107ec:	e119      	b.n	8010a22 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80107ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f0:	3334      	adds	r3, #52	@ 0x34
 80107f2:	3313      	adds	r3, #19
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7fe fc7f 	bl	800f0f8 <ld_word>
 80107fa:	4603      	mov	r3, r0
 80107fc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80107fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010800:	2b00      	cmp	r3, #0
 8010802:	d106      	bne.n	8010812 <find_volume+0x282>
 8010804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010806:	3334      	adds	r3, #52	@ 0x34
 8010808:	3320      	adds	r3, #32
 801080a:	4618      	mov	r0, r3
 801080c:	f7fe fc8d 	bl	800f12a <ld_dword>
 8010810:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010814:	3334      	adds	r3, #52	@ 0x34
 8010816:	330e      	adds	r3, #14
 8010818:	4618      	mov	r0, r3
 801081a:	f7fe fc6d 	bl	800f0f8 <ld_word>
 801081e:	4603      	mov	r3, r0
 8010820:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010822:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010824:	2b00      	cmp	r3, #0
 8010826:	d101      	bne.n	801082c <find_volume+0x29c>
 8010828:	230d      	movs	r3, #13
 801082a:	e0fa      	b.n	8010a22 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801082c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801082e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010830:	4413      	add	r3, r2
 8010832:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010834:	8912      	ldrh	r2, [r2, #8]
 8010836:	0912      	lsrs	r2, r2, #4
 8010838:	b292      	uxth	r2, r2
 801083a:	4413      	add	r3, r2
 801083c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801083e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010842:	429a      	cmp	r2, r3
 8010844:	d204      	bcs.n	8010850 <find_volume+0x2c0>
 8010846:	230d      	movs	r3, #13
 8010848:	e0eb      	b.n	8010a22 <find_volume+0x492>
 801084a:	bf00      	nop
 801084c:	20001780 	.word	0x20001780
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010850:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010858:	8952      	ldrh	r2, [r2, #10]
 801085a:	fbb3 f3f2 	udiv	r3, r3, r2
 801085e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010862:	2b00      	cmp	r3, #0
 8010864:	d101      	bne.n	801086a <find_volume+0x2da>
 8010866:	230d      	movs	r3, #13
 8010868:	e0db      	b.n	8010a22 <find_volume+0x492>
		fmt = FS_FAT32;
 801086a:	2303      	movs	r3, #3
 801086c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010872:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010876:	4293      	cmp	r3, r2
 8010878:	d802      	bhi.n	8010880 <find_volume+0x2f0>
 801087a:	2302      	movs	r3, #2
 801087c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010882:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010886:	4293      	cmp	r3, r2
 8010888:	d802      	bhi.n	8010890 <find_volume+0x300>
 801088a:	2301      	movs	r3, #1
 801088c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010892:	1c9a      	adds	r2, r3, #2
 8010894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010896:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801089a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801089c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801089e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80108a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108a2:	441a      	add	r2, r3
 80108a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80108a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80108aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ac:	441a      	add	r2, r3
 80108ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80108b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80108b6:	2b03      	cmp	r3, #3
 80108b8:	d11e      	bne.n	80108f8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80108ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108bc:	3334      	adds	r3, #52	@ 0x34
 80108be:	332a      	adds	r3, #42	@ 0x2a
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fe fc19 	bl	800f0f8 <ld_word>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d001      	beq.n	80108d0 <find_volume+0x340>
 80108cc:	230d      	movs	r3, #13
 80108ce:	e0a8      	b.n	8010a22 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80108d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d2:	891b      	ldrh	r3, [r3, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d001      	beq.n	80108dc <find_volume+0x34c>
 80108d8:	230d      	movs	r3, #13
 80108da:	e0a2      	b.n	8010a22 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80108dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108de:	3334      	adds	r3, #52	@ 0x34
 80108e0:	332c      	adds	r3, #44	@ 0x2c
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fe fc21 	bl	800f12a <ld_dword>
 80108e8:	4602      	mov	r2, r0
 80108ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ec:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80108ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108f0:	699b      	ldr	r3, [r3, #24]
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80108f6:	e01f      	b.n	8010938 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80108f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108fa:	891b      	ldrh	r3, [r3, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <find_volume+0x374>
 8010900:	230d      	movs	r3, #13
 8010902:	e08e      	b.n	8010a22 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801090a:	441a      	add	r2, r3
 801090c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801090e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010910:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010914:	2b02      	cmp	r3, #2
 8010916:	d103      	bne.n	8010920 <find_volume+0x390>
 8010918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801091a:	699b      	ldr	r3, [r3, #24]
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	e00a      	b.n	8010936 <find_volume+0x3a6>
 8010920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010922:	699a      	ldr	r2, [r3, #24]
 8010924:	4613      	mov	r3, r2
 8010926:	005b      	lsls	r3, r3, #1
 8010928:	4413      	add	r3, r2
 801092a:	085a      	lsrs	r2, r3, #1
 801092c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801092e:	699b      	ldr	r3, [r3, #24]
 8010930:	f003 0301 	and.w	r3, r3, #1
 8010934:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010936:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093a:	69da      	ldr	r2, [r3, #28]
 801093c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801093e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010942:	0a5b      	lsrs	r3, r3, #9
 8010944:	429a      	cmp	r2, r3
 8010946:	d201      	bcs.n	801094c <find_volume+0x3bc>
 8010948:	230d      	movs	r3, #13
 801094a:	e06a      	b.n	8010a22 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801094c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094e:	f04f 32ff 	mov.w	r2, #4294967295
 8010952:	615a      	str	r2, [r3, #20]
 8010954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010956:	695a      	ldr	r2, [r3, #20]
 8010958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801095c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095e:	2280      	movs	r2, #128	@ 0x80
 8010960:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010962:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010966:	2b03      	cmp	r3, #3
 8010968:	d149      	bne.n	80109fe <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801096a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801096c:	3334      	adds	r3, #52	@ 0x34
 801096e:	3330      	adds	r3, #48	@ 0x30
 8010970:	4618      	mov	r0, r3
 8010972:	f7fe fbc1 	bl	800f0f8 <ld_word>
 8010976:	4603      	mov	r3, r0
 8010978:	2b01      	cmp	r3, #1
 801097a:	d140      	bne.n	80109fe <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801097c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801097e:	3301      	adds	r3, #1
 8010980:	4619      	mov	r1, r3
 8010982:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010984:	f7fe fe9a 	bl	800f6bc <move_window>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d137      	bne.n	80109fe <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801098e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010990:	2200      	movs	r2, #0
 8010992:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010996:	3334      	adds	r3, #52	@ 0x34
 8010998:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801099c:	4618      	mov	r0, r3
 801099e:	f7fe fbab 	bl	800f0f8 <ld_word>
 80109a2:	4603      	mov	r3, r0
 80109a4:	461a      	mov	r2, r3
 80109a6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d127      	bne.n	80109fe <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80109ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b0:	3334      	adds	r3, #52	@ 0x34
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fe fbb9 	bl	800f12a <ld_dword>
 80109b8:	4603      	mov	r3, r0
 80109ba:	4a1c      	ldr	r2, [pc, #112]	@ (8010a2c <find_volume+0x49c>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d11e      	bne.n	80109fe <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80109c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c2:	3334      	adds	r3, #52	@ 0x34
 80109c4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fe fbae 	bl	800f12a <ld_dword>
 80109ce:	4603      	mov	r3, r0
 80109d0:	4a17      	ldr	r2, [pc, #92]	@ (8010a30 <find_volume+0x4a0>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d113      	bne.n	80109fe <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80109d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d8:	3334      	adds	r3, #52	@ 0x34
 80109da:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fe fba3 	bl	800f12a <ld_dword>
 80109e4:	4602      	mov	r2, r0
 80109e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80109ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ec:	3334      	adds	r3, #52	@ 0x34
 80109ee:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fe fb99 	bl	800f12a <ld_dword>
 80109f8:	4602      	mov	r2, r0
 80109fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80109fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a00:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010a04:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010a06:	4b0b      	ldr	r3, [pc, #44]	@ (8010a34 <find_volume+0x4a4>)
 8010a08:	881b      	ldrh	r3, [r3, #0]
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	4b09      	ldr	r3, [pc, #36]	@ (8010a34 <find_volume+0x4a4>)
 8010a10:	801a      	strh	r2, [r3, #0]
 8010a12:	4b08      	ldr	r3, [pc, #32]	@ (8010a34 <find_volume+0x4a4>)
 8010a14:	881a      	ldrh	r2, [r3, #0]
 8010a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a18:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010a1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a1c:	f7fe fde6 	bl	800f5ec <clear_lock>
#endif
	return FR_OK;
 8010a20:	2300      	movs	r3, #0
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3758      	adds	r7, #88	@ 0x58
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	41615252 	.word	0x41615252
 8010a30:	61417272 	.word	0x61417272
 8010a34:	20001784 	.word	0x20001784

08010a38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010a42:	2309      	movs	r3, #9
 8010a44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d02e      	beq.n	8010aaa <validate+0x72>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d02a      	beq.n	8010aaa <validate+0x72>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d025      	beq.n	8010aaa <validate+0x72>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	889a      	ldrh	r2, [r3, #4]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	88db      	ldrh	r3, [r3, #6]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d11e      	bne.n	8010aaa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7fe fc42 	bl	800f2fa <lock_fs>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d014      	beq.n	8010aa6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	785b      	ldrb	r3, [r3, #1]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fe fa9a 	bl	800efbc <disk_status>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	f003 0301 	and.w	r3, r3, #1
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d102      	bne.n	8010a98 <validate+0x60>
				res = FR_OK;
 8010a92:	2300      	movs	r3, #0
 8010a94:	73fb      	strb	r3, [r7, #15]
 8010a96:	e008      	b.n	8010aaa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fe fc41 	bl	800f326 <unlock_fs>
 8010aa4:	e001      	b.n	8010aaa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010aa6:	230f      	movs	r3, #15
 8010aa8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010aaa:	7bfb      	ldrb	r3, [r7, #15]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d102      	bne.n	8010ab6 <validate+0x7e>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	e000      	b.n	8010ab8 <validate+0x80>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	683a      	ldr	r2, [r7, #0]
 8010aba:	6013      	str	r3, [r2, #0]
	return res;
 8010abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
	...

08010ac8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010ada:	f107 0310 	add.w	r3, r7, #16
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ff fcbb 	bl	801045a <get_ldnumber>
 8010ae4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	da01      	bge.n	8010af0 <f_mount+0x28>
 8010aec:	230b      	movs	r3, #11
 8010aee:	e048      	b.n	8010b82 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010af0:	4a26      	ldr	r2, [pc, #152]	@ (8010b8c <f_mount+0xc4>)
 8010af2:	69fb      	ldr	r3, [r7, #28]
 8010af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010af8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010afa:	69bb      	ldr	r3, [r7, #24]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d00f      	beq.n	8010b20 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010b00:	69b8      	ldr	r0, [r7, #24]
 8010b02:	f7fe fd73 	bl	800f5ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010b06:	69bb      	ldr	r3, [r7, #24]
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f001 f837 	bl	8011b7e <ff_del_syncobj>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d101      	bne.n	8010b1a <f_mount+0x52>
 8010b16:	2302      	movs	r3, #2
 8010b18:	e033      	b.n	8010b82 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010b1a:	69bb      	ldr	r3, [r7, #24]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d00f      	beq.n	8010b46 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	b2da      	uxtb	r2, r3
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	330c      	adds	r3, #12
 8010b34:	4619      	mov	r1, r3
 8010b36:	4610      	mov	r0, r2
 8010b38:	f001 f803 	bl	8011b42 <ff_cre_syncobj>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d101      	bne.n	8010b46 <f_mount+0x7e>
 8010b42:	2302      	movs	r3, #2
 8010b44:	e01d      	b.n	8010b82 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010b46:	68fa      	ldr	r2, [r7, #12]
 8010b48:	4910      	ldr	r1, [pc, #64]	@ (8010b8c <f_mount+0xc4>)
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d002      	beq.n	8010b5c <f_mount+0x94>
 8010b56:	79fb      	ldrb	r3, [r7, #7]
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d001      	beq.n	8010b60 <f_mount+0x98>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	e010      	b.n	8010b82 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010b60:	f107 010c 	add.w	r1, r7, #12
 8010b64:	f107 0308 	add.w	r3, r7, #8
 8010b68:	2200      	movs	r2, #0
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7ff fd10 	bl	8010590 <find_volume>
 8010b70:	4603      	mov	r3, r0
 8010b72:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	7dfa      	ldrb	r2, [r7, #23]
 8010b78:	4611      	mov	r1, r2
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe fbd3 	bl	800f326 <unlock_fs>
 8010b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3720      	adds	r7, #32
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	20001780 	.word	0x20001780

08010b90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b098      	sub	sp, #96	@ 0x60
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d101      	bne.n	8010ba8 <f_open+0x18>
 8010ba4:	2309      	movs	r3, #9
 8010ba6:	e1b0      	b.n	8010f0a <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010ba8:	79fb      	ldrb	r3, [r7, #7]
 8010baa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010bae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010bb0:	79fa      	ldrb	r2, [r7, #7]
 8010bb2:	f107 0110 	add.w	r1, r7, #16
 8010bb6:	f107 0308 	add.w	r3, r7, #8
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7ff fce8 	bl	8010590 <find_volume>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8010bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f040 818d 	bne.w	8010eea <f_open+0x35a>
		dj.obj.fs = fs;
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010bd4:	68ba      	ldr	r2, [r7, #8]
 8010bd6:	f107 0314 	add.w	r3, r7, #20
 8010bda:	4611      	mov	r1, r2
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7ff fbcb 	bl	8010378 <follow_path>
 8010be2:	4603      	mov	r3, r0
 8010be4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010be8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d118      	bne.n	8010c22 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010bf0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010bf4:	b25b      	sxtb	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	da03      	bge.n	8010c02 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010bfa:	2306      	movs	r3, #6
 8010bfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010c00:	e00f      	b.n	8010c22 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010c02:	79fb      	ldrb	r3, [r7, #7]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	bf8c      	ite	hi
 8010c08:	2301      	movhi	r3, #1
 8010c0a:	2300      	movls	r3, #0
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	461a      	mov	r2, r3
 8010c10:	f107 0314 	add.w	r3, r7, #20
 8010c14:	4611      	mov	r1, r2
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fe fba0 	bl	800f35c <chk_lock>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010c22:	79fb      	ldrb	r3, [r7, #7]
 8010c24:	f003 031c 	and.w	r3, r3, #28
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d07f      	beq.n	8010d2c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d017      	beq.n	8010c64 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010c34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010c38:	2b04      	cmp	r3, #4
 8010c3a:	d10e      	bne.n	8010c5a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010c3c:	f7fe fbea 	bl	800f414 <enq_lock>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d006      	beq.n	8010c54 <f_open+0xc4>
 8010c46:	f107 0314 	add.w	r3, r7, #20
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff face 	bl	80101ec <dir_register>
 8010c50:	4603      	mov	r3, r0
 8010c52:	e000      	b.n	8010c56 <f_open+0xc6>
 8010c54:	2312      	movs	r3, #18
 8010c56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010c5a:	79fb      	ldrb	r3, [r7, #7]
 8010c5c:	f043 0308 	orr.w	r3, r3, #8
 8010c60:	71fb      	strb	r3, [r7, #7]
 8010c62:	e010      	b.n	8010c86 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010c64:	7ebb      	ldrb	r3, [r7, #26]
 8010c66:	f003 0311 	and.w	r3, r3, #17
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d003      	beq.n	8010c76 <f_open+0xe6>
					res = FR_DENIED;
 8010c6e:	2307      	movs	r3, #7
 8010c70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010c74:	e007      	b.n	8010c86 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010c76:	79fb      	ldrb	r3, [r7, #7]
 8010c78:	f003 0304 	and.w	r3, r3, #4
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <f_open+0xf6>
 8010c80:	2308      	movs	r3, #8
 8010c82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010c86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d168      	bne.n	8010d60 <f_open+0x1d0>
 8010c8e:	79fb      	ldrb	r3, [r7, #7]
 8010c90:	f003 0308 	and.w	r3, r3, #8
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d063      	beq.n	8010d60 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010c98:	f7fe f932 	bl	800ef00 <get_fattime>
 8010c9c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ca0:	330e      	adds	r3, #14
 8010ca2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fe fa7e 	bl	800f1a6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cac:	3316      	adds	r3, #22
 8010cae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7fe fa78 	bl	800f1a6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cb8:	330b      	adds	r3, #11
 8010cba:	2220      	movs	r2, #32
 8010cbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cc2:	4611      	mov	r1, r2
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7ff f9fd 	bl	80100c4 <ld_clust>
 8010cca:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7ff fa15 	bl	8010102 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cda:	331c      	adds	r3, #28
 8010cdc:	2100      	movs	r1, #0
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fe fa61 	bl	800f1a6 <st_dword>
					fs->wflag = 1;
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d037      	beq.n	8010d60 <f_open+0x1d0>
						dw = fs->winsect;
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cf4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010cf6:	f107 0314 	add.w	r3, r7, #20
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fe ff28 	bl	800fb54 <remove_chain>
 8010d04:	4603      	mov	r3, r0
 8010d06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8010d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d126      	bne.n	8010d60 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fe fcd0 	bl	800f6bc <move_window>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010d26:	3a01      	subs	r2, #1
 8010d28:	611a      	str	r2, [r3, #16]
 8010d2a:	e019      	b.n	8010d60 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d115      	bne.n	8010d60 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010d34:	7ebb      	ldrb	r3, [r7, #26]
 8010d36:	f003 0310 	and.w	r3, r3, #16
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d003      	beq.n	8010d46 <f_open+0x1b6>
					res = FR_NO_FILE;
 8010d3e:	2304      	movs	r3, #4
 8010d40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010d44:	e00c      	b.n	8010d60 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010d46:	79fb      	ldrb	r3, [r7, #7]
 8010d48:	f003 0302 	and.w	r3, r3, #2
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d007      	beq.n	8010d60 <f_open+0x1d0>
 8010d50:	7ebb      	ldrb	r3, [r7, #26]
 8010d52:	f003 0301 	and.w	r3, r3, #1
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d002      	beq.n	8010d60 <f_open+0x1d0>
						res = FR_DENIED;
 8010d5a:	2307      	movs	r3, #7
 8010d5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010d60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d126      	bne.n	8010db6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010d68:	79fb      	ldrb	r3, [r7, #7]
 8010d6a:	f003 0308 	and.w	r3, r3, #8
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d003      	beq.n	8010d7a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010d72:	79fb      	ldrb	r3, [r7, #7]
 8010d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010d88:	79fb      	ldrb	r3, [r7, #7]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	bf8c      	ite	hi
 8010d8e:	2301      	movhi	r3, #1
 8010d90:	2300      	movls	r3, #0
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	461a      	mov	r2, r3
 8010d96:	f107 0314 	add.w	r3, r7, #20
 8010d9a:	4611      	mov	r1, r2
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fe fb5b 	bl	800f458 <inc_lock>
 8010da2:	4602      	mov	r2, r0
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	691b      	ldr	r3, [r3, #16]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d102      	bne.n	8010db6 <f_open+0x226>
 8010db0:	2302      	movs	r3, #2
 8010db2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010db6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f040 8095 	bne.w	8010eea <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7ff f97c 	bl	80100c4 <ld_clust>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dd4:	331c      	adds	r3, #28
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fe f9a7 	bl	800f12a <ld_dword>
 8010ddc:	4602      	mov	r2, r0
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2200      	movs	r2, #0
 8010de6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010de8:	693a      	ldr	r2, [r7, #16]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	88da      	ldrh	r2, [r3, #6]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	79fa      	ldrb	r2, [r7, #7]
 8010dfa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2200      	movs	r2, #0
 8010e06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	3330      	adds	r3, #48	@ 0x30
 8010e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e16:	2100      	movs	r1, #0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe fa11 	bl	800f240 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010e1e:	79fb      	ldrb	r3, [r7, #7]
 8010e20:	f003 0320 	and.w	r3, r3, #32
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d060      	beq.n	8010eea <f_open+0x35a>
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d05c      	beq.n	8010eea <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	68da      	ldr	r2, [r3, #12]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	895b      	ldrh	r3, [r3, #10]
 8010e3c:	025b      	lsls	r3, r3, #9
 8010e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	689b      	ldr	r3, [r3, #8]
 8010e44:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010e4c:	e016      	b.n	8010e7c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fe fced 	bl	800f832 <get_fat>
 8010e58:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d802      	bhi.n	8010e66 <f_open+0x2d6>
 8010e60:	2302      	movs	r3, #2
 8010e62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e6c:	d102      	bne.n	8010e74 <f_open+0x2e4>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e78:	1ad3      	subs	r3, r2, r3
 8010e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d103      	bne.n	8010e8c <f_open+0x2fc>
 8010e84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d8e0      	bhi.n	8010e4e <f_open+0x2be>
				}
				fp->clust = clst;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010e90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010e92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d127      	bne.n	8010eea <f_open+0x35a>
 8010e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d022      	beq.n	8010eea <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fe fca3 	bl	800f7f4 <clust2sect>
 8010eae:	6478      	str	r0, [r7, #68]	@ 0x44
 8010eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d103      	bne.n	8010ebe <f_open+0x32e>
						res = FR_INT_ERR;
 8010eb6:	2302      	movs	r3, #2
 8010eb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010ebc:	e015      	b.n	8010eea <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ec0:	0a5a      	lsrs	r2, r3, #9
 8010ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ec4:	441a      	add	r2, r3
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	7858      	ldrb	r0, [r3, #1]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	6a1a      	ldr	r2, [r3, #32]
 8010ed8:	2301      	movs	r3, #1
 8010eda:	f7fe f8af 	bl	800f03c <disk_read>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d002      	beq.n	8010eea <f_open+0x35a>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010eea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d002      	beq.n	8010ef8 <f_open+0x368>
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8010efe:	4611      	mov	r1, r2
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7fe fa10 	bl	800f326 <unlock_fs>
 8010f06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3760      	adds	r7, #96	@ 0x60
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b08c      	sub	sp, #48	@ 0x30
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	60f8      	str	r0, [r7, #12]
 8010f1a:	60b9      	str	r1, [r7, #8]
 8010f1c:	607a      	str	r2, [r7, #4]
 8010f1e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	2200      	movs	r2, #0
 8010f28:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	f107 0210 	add.w	r2, r7, #16
 8010f30:	4611      	mov	r1, r2
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7ff fd80 	bl	8010a38 <validate>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d107      	bne.n	8010f56 <f_write+0x44>
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	7d5b      	ldrb	r3, [r3, #21]
 8010f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d009      	beq.n	8010f6a <f_write+0x58>
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010f5c:	4611      	mov	r1, r2
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fe f9e1 	bl	800f326 <unlock_fs>
 8010f64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f68:	e173      	b.n	8011252 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	7d1b      	ldrb	r3, [r3, #20]
 8010f6e:	f003 0302 	and.w	r3, r3, #2
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d106      	bne.n	8010f84 <f_write+0x72>
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	2107      	movs	r1, #7
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fe f9d3 	bl	800f326 <unlock_fs>
 8010f80:	2307      	movs	r3, #7
 8010f82:	e166      	b.n	8011252 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	699a      	ldr	r2, [r3, #24]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	441a      	add	r2, r3
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	699b      	ldr	r3, [r3, #24]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	f080 814b 	bcs.w	801122c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	699b      	ldr	r3, [r3, #24]
 8010f9a:	43db      	mvns	r3, r3
 8010f9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010f9e:	e145      	b.n	801122c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	699b      	ldr	r3, [r3, #24]
 8010fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f040 8101 	bne.w	80111b0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	0a5b      	lsrs	r3, r3, #9
 8010fb4:	693a      	ldr	r2, [r7, #16]
 8010fb6:	8952      	ldrh	r2, [r2, #10]
 8010fb8:	3a01      	subs	r2, #1
 8010fba:	4013      	ands	r3, r2
 8010fbc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d14d      	bne.n	8011060 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	699b      	ldr	r3, [r3, #24]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d10c      	bne.n	8010fe6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d11a      	bne.n	801100e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2100      	movs	r1, #0
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7fe fe1e 	bl	800fc1e <create_chain>
 8010fe2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010fe4:	e013      	b.n	801100e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d007      	beq.n	8010ffe <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	699b      	ldr	r3, [r3, #24]
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f7fe feaa 	bl	800fd4e <clmt_clust>
 8010ffa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010ffc:	e007      	b.n	801100e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010ffe:	68fa      	ldr	r2, [r7, #12]
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	69db      	ldr	r3, [r3, #28]
 8011004:	4619      	mov	r1, r3
 8011006:	4610      	mov	r0, r2
 8011008:	f7fe fe09 	bl	800fc1e <create_chain>
 801100c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801100e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011010:	2b00      	cmp	r3, #0
 8011012:	f000 8110 	beq.w	8011236 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011018:	2b01      	cmp	r3, #1
 801101a:	d109      	bne.n	8011030 <f_write+0x11e>
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2202      	movs	r2, #2
 8011020:	755a      	strb	r2, [r3, #21]
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	2102      	movs	r1, #2
 8011026:	4618      	mov	r0, r3
 8011028:	f7fe f97d 	bl	800f326 <unlock_fs>
 801102c:	2302      	movs	r3, #2
 801102e:	e110      	b.n	8011252 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011036:	d109      	bne.n	801104c <f_write+0x13a>
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2201      	movs	r2, #1
 801103c:	755a      	strb	r2, [r3, #21]
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	2101      	movs	r1, #1
 8011042:	4618      	mov	r0, r3
 8011044:	f7fe f96f 	bl	800f326 <unlock_fs>
 8011048:	2301      	movs	r3, #1
 801104a:	e102      	b.n	8011252 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011050:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	689b      	ldr	r3, [r3, #8]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d102      	bne.n	8011060 <f_write+0x14e>
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801105e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	7d1b      	ldrb	r3, [r3, #20]
 8011064:	b25b      	sxtb	r3, r3
 8011066:	2b00      	cmp	r3, #0
 8011068:	da1d      	bge.n	80110a6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	7858      	ldrb	r0, [r3, #1]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	6a1a      	ldr	r2, [r3, #32]
 8011078:	2301      	movs	r3, #1
 801107a:	f7fd ffff 	bl	800f07c <disk_write>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d009      	beq.n	8011098 <f_write+0x186>
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2201      	movs	r2, #1
 8011088:	755a      	strb	r2, [r3, #21]
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	2101      	movs	r1, #1
 801108e:	4618      	mov	r0, r3
 8011090:	f7fe f949 	bl	800f326 <unlock_fs>
 8011094:	2301      	movs	r3, #1
 8011096:	e0dc      	b.n	8011252 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	7d1b      	ldrb	r3, [r3, #20]
 801109c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80110a6:	693a      	ldr	r2, [r7, #16]
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	69db      	ldr	r3, [r3, #28]
 80110ac:	4619      	mov	r1, r3
 80110ae:	4610      	mov	r0, r2
 80110b0:	f7fe fba0 	bl	800f7f4 <clust2sect>
 80110b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d109      	bne.n	80110d0 <f_write+0x1be>
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2202      	movs	r2, #2
 80110c0:	755a      	strb	r2, [r3, #21]
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	2102      	movs	r1, #2
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7fe f92d 	bl	800f326 <unlock_fs>
 80110cc:	2302      	movs	r3, #2
 80110ce:	e0c0      	b.n	8011252 <f_write+0x340>
			sect += csect;
 80110d0:	697a      	ldr	r2, [r7, #20]
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	4413      	add	r3, r2
 80110d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	0a5b      	lsrs	r3, r3, #9
 80110dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80110de:	6a3b      	ldr	r3, [r7, #32]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d041      	beq.n	8011168 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80110e4:	69ba      	ldr	r2, [r7, #24]
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	4413      	add	r3, r2
 80110ea:	693a      	ldr	r2, [r7, #16]
 80110ec:	8952      	ldrh	r2, [r2, #10]
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d905      	bls.n	80110fe <f_write+0x1ec>
					cc = fs->csize - csect;
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	895b      	ldrh	r3, [r3, #10]
 80110f6:	461a      	mov	r2, r3
 80110f8:	69bb      	ldr	r3, [r7, #24]
 80110fa:	1ad3      	subs	r3, r2, r3
 80110fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	7858      	ldrb	r0, [r3, #1]
 8011102:	6a3b      	ldr	r3, [r7, #32]
 8011104:	697a      	ldr	r2, [r7, #20]
 8011106:	69f9      	ldr	r1, [r7, #28]
 8011108:	f7fd ffb8 	bl	800f07c <disk_write>
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d009      	beq.n	8011126 <f_write+0x214>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2201      	movs	r2, #1
 8011116:	755a      	strb	r2, [r3, #21]
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	2101      	movs	r1, #1
 801111c:	4618      	mov	r0, r3
 801111e:	f7fe f902 	bl	800f326 <unlock_fs>
 8011122:	2301      	movs	r3, #1
 8011124:	e095      	b.n	8011252 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	6a1a      	ldr	r2, [r3, #32]
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	6a3a      	ldr	r2, [r7, #32]
 8011130:	429a      	cmp	r2, r3
 8011132:	d915      	bls.n	8011160 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	6a1a      	ldr	r2, [r3, #32]
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	1ad3      	subs	r3, r2, r3
 8011142:	025b      	lsls	r3, r3, #9
 8011144:	69fa      	ldr	r2, [r7, #28]
 8011146:	4413      	add	r3, r2
 8011148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801114c:	4619      	mov	r1, r3
 801114e:	f7fe f856 	bl	800f1fe <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	7d1b      	ldrb	r3, [r3, #20]
 8011156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801115a:	b2da      	uxtb	r2, r3
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011160:	6a3b      	ldr	r3, [r7, #32]
 8011162:	025b      	lsls	r3, r3, #9
 8011164:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011166:	e044      	b.n	80111f2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	6a1b      	ldr	r3, [r3, #32]
 801116c:	697a      	ldr	r2, [r7, #20]
 801116e:	429a      	cmp	r2, r3
 8011170:	d01b      	beq.n	80111aa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	699a      	ldr	r2, [r3, #24]
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801117a:	429a      	cmp	r2, r3
 801117c:	d215      	bcs.n	80111aa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	7858      	ldrb	r0, [r3, #1]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011188:	2301      	movs	r3, #1
 801118a:	697a      	ldr	r2, [r7, #20]
 801118c:	f7fd ff56 	bl	800f03c <disk_read>
 8011190:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011192:	2b00      	cmp	r3, #0
 8011194:	d009      	beq.n	80111aa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2201      	movs	r2, #1
 801119a:	755a      	strb	r2, [r3, #21]
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	2101      	movs	r1, #1
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7fe f8c0 	bl	800f326 <unlock_fs>
 80111a6:	2301      	movs	r3, #1
 80111a8:	e053      	b.n	8011252 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	697a      	ldr	r2, [r7, #20]
 80111ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	699b      	ldr	r3, [r3, #24]
 80111b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80111bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80111be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d901      	bls.n	80111ca <f_write+0x2b8>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	699b      	ldr	r3, [r3, #24]
 80111d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d8:	4413      	add	r3, r2
 80111da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111dc:	69f9      	ldr	r1, [r7, #28]
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fe f80d 	bl	800f1fe <mem_cpy>
		fp->flag |= FA_DIRTY;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	7d1b      	ldrb	r3, [r3, #20]
 80111e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80111f2:	69fa      	ldr	r2, [r7, #28]
 80111f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f6:	4413      	add	r3, r2
 80111f8:	61fb      	str	r3, [r7, #28]
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	699a      	ldr	r2, [r3, #24]
 80111fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011200:	441a      	add	r2, r3
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	619a      	str	r2, [r3, #24]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	68da      	ldr	r2, [r3, #12]
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	699b      	ldr	r3, [r3, #24]
 801120e:	429a      	cmp	r2, r3
 8011210:	bf38      	it	cc
 8011212:	461a      	movcc	r2, r3
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	60da      	str	r2, [r3, #12]
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801121e:	441a      	add	r2, r3
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	601a      	str	r2, [r3, #0]
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011228:	1ad3      	subs	r3, r2, r3
 801122a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2b00      	cmp	r3, #0
 8011230:	f47f aeb6 	bne.w	8010fa0 <f_write+0x8e>
 8011234:	e000      	b.n	8011238 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011236:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	7d1b      	ldrb	r3, [r3, #20]
 801123c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011240:	b2da      	uxtb	r2, r3
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	2100      	movs	r1, #0
 801124a:	4618      	mov	r0, r3
 801124c:	f7fe f86b 	bl	800f326 <unlock_fs>
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3730      	adds	r7, #48	@ 0x30
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b086      	sub	sp, #24
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f107 0208 	add.w	r2, r7, #8
 8011268:	4611      	mov	r1, r2
 801126a:	4618      	mov	r0, r3
 801126c:	f7ff fbe4 	bl	8010a38 <validate>
 8011270:	4603      	mov	r3, r0
 8011272:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011274:	7dfb      	ldrb	r3, [r7, #23]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d16d      	bne.n	8011356 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	7d1b      	ldrb	r3, [r3, #20]
 801127e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011282:	2b00      	cmp	r3, #0
 8011284:	d067      	beq.n	8011356 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	7d1b      	ldrb	r3, [r3, #20]
 801128a:	b25b      	sxtb	r3, r3
 801128c:	2b00      	cmp	r3, #0
 801128e:	da1a      	bge.n	80112c6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	7858      	ldrb	r0, [r3, #1]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6a1a      	ldr	r2, [r3, #32]
 801129e:	2301      	movs	r3, #1
 80112a0:	f7fd feec 	bl	800f07c <disk_write>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d006      	beq.n	80112b8 <f_sync+0x5e>
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	2101      	movs	r1, #1
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fe f839 	bl	800f326 <unlock_fs>
 80112b4:	2301      	movs	r3, #1
 80112b6:	e055      	b.n	8011364 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	7d1b      	ldrb	r3, [r3, #20]
 80112bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112c0:	b2da      	uxtb	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80112c6:	f7fd fe1b 	bl	800ef00 <get_fattime>
 80112ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112d2:	4619      	mov	r1, r3
 80112d4:	4610      	mov	r0, r2
 80112d6:	f7fe f9f1 	bl	800f6bc <move_window>
 80112da:	4603      	mov	r3, r0
 80112dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80112de:	7dfb      	ldrb	r3, [r7, #23]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d138      	bne.n	8011356 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	330b      	adds	r3, #11
 80112ee:	781a      	ldrb	r2, [r3, #0]
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	330b      	adds	r3, #11
 80112f4:	f042 0220 	orr.w	r2, r2, #32
 80112f8:	b2d2      	uxtb	r2, r2
 80112fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6818      	ldr	r0, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	689b      	ldr	r3, [r3, #8]
 8011304:	461a      	mov	r2, r3
 8011306:	68f9      	ldr	r1, [r7, #12]
 8011308:	f7fe fefb 	bl	8010102 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f103 021c 	add.w	r2, r3, #28
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	4619      	mov	r1, r3
 8011318:	4610      	mov	r0, r2
 801131a:	f7fd ff44 	bl	800f1a6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	3316      	adds	r3, #22
 8011322:	6939      	ldr	r1, [r7, #16]
 8011324:	4618      	mov	r0, r3
 8011326:	f7fd ff3e 	bl	800f1a6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	3312      	adds	r3, #18
 801132e:	2100      	movs	r1, #0
 8011330:	4618      	mov	r0, r3
 8011332:	f7fd ff1d 	bl	800f170 <st_word>
					fs->wflag = 1;
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	2201      	movs	r2, #1
 801133a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	4618      	mov	r0, r3
 8011340:	f7fe f9ea 	bl	800f718 <sync_fs>
 8011344:	4603      	mov	r3, r0
 8011346:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	7d1b      	ldrb	r3, [r3, #20]
 801134c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011350:	b2da      	uxtb	r2, r3
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	7dfa      	ldrb	r2, [r7, #23]
 801135a:	4611      	mov	r1, r2
 801135c:	4618      	mov	r0, r3
 801135e:	f7fd ffe2 	bl	800f326 <unlock_fs>
 8011362:	7dfb      	ldrb	r3, [r7, #23]
}
 8011364:	4618      	mov	r0, r3
 8011366:	3718      	adds	r7, #24
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f7ff ff70 	bl	801125a <f_sync>
 801137a:	4603      	mov	r3, r0
 801137c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801137e:	7bfb      	ldrb	r3, [r7, #15]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d11d      	bne.n	80113c0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f107 0208 	add.w	r2, r7, #8
 801138a:	4611      	mov	r1, r2
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff fb53 	bl	8010a38 <validate>
 8011392:	4603      	mov	r3, r0
 8011394:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011396:	7bfb      	ldrb	r3, [r7, #15]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d111      	bne.n	80113c0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fe f8e7 	bl	800f574 <dec_lock>
 80113a6:	4603      	mov	r3, r0
 80113a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80113aa:	7bfb      	ldrb	r3, [r7, #15]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d102      	bne.n	80113b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	2100      	movs	r1, #0
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7fd ffb3 	bl	800f326 <unlock_fs>
#endif
		}
	}
	return res;
 80113c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}

080113ca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80113ca:	b580      	push	{r7, lr}
 80113cc:	b090      	sub	sp, #64	@ 0x40
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
 80113d2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f107 0208 	add.w	r2, r7, #8
 80113da:	4611      	mov	r1, r2
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff fb2b 	bl	8010a38 <validate>
 80113e2:	4603      	mov	r3, r0
 80113e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80113e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d103      	bne.n	80113f8 <f_lseek+0x2e>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	7d5b      	ldrb	r3, [r3, #21]
 80113f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80113f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d009      	beq.n	8011414 <f_lseek+0x4a>
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011406:	4611      	mov	r1, r2
 8011408:	4618      	mov	r0, r3
 801140a:	f7fd ff8c 	bl	800f326 <unlock_fs>
 801140e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011412:	e229      	b.n	8011868 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011418:	2b00      	cmp	r3, #0
 801141a:	f000 80ea 	beq.w	80115f2 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011424:	d164      	bne.n	80114f0 <f_lseek+0x126>
			tbl = fp->cltbl;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801142a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801142e:	1d1a      	adds	r2, r3, #4
 8011430:	627a      	str	r2, [r7, #36]	@ 0x24
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	617b      	str	r3, [r7, #20]
 8011436:	2302      	movs	r3, #2
 8011438:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	689b      	ldr	r3, [r3, #8]
 801143e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011442:	2b00      	cmp	r3, #0
 8011444:	d044      	beq.n	80114d0 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011448:	613b      	str	r3, [r7, #16]
 801144a:	2300      	movs	r3, #0
 801144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011450:	3302      	adds	r3, #2
 8011452:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011456:	60fb      	str	r3, [r7, #12]
 8011458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801145a:	3301      	adds	r3, #1
 801145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011462:	4618      	mov	r0, r3
 8011464:	f7fe f9e5 	bl	800f832 <get_fat>
 8011468:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801146a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801146c:	2b01      	cmp	r3, #1
 801146e:	d809      	bhi.n	8011484 <f_lseek+0xba>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2202      	movs	r2, #2
 8011474:	755a      	strb	r2, [r3, #21]
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	2102      	movs	r1, #2
 801147a:	4618      	mov	r0, r3
 801147c:	f7fd ff53 	bl	800f326 <unlock_fs>
 8011480:	2302      	movs	r3, #2
 8011482:	e1f1      	b.n	8011868 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801148a:	d109      	bne.n	80114a0 <f_lseek+0xd6>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2201      	movs	r2, #1
 8011490:	755a      	strb	r2, [r3, #21]
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	2101      	movs	r1, #1
 8011496:	4618      	mov	r0, r3
 8011498:	f7fd ff45 	bl	800f326 <unlock_fs>
 801149c:	2301      	movs	r3, #1
 801149e:	e1e3      	b.n	8011868 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	3301      	adds	r3, #1
 80114a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d0d4      	beq.n	8011454 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80114aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d809      	bhi.n	80114c6 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80114b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b4:	1d1a      	adds	r2, r3, #4
 80114b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80114b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80114ba:	601a      	str	r2, [r3, #0]
 80114bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114be:	1d1a      	adds	r2, r3, #4
 80114c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80114c2:	693a      	ldr	r2, [r7, #16]
 80114c4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	699b      	ldr	r3, [r3, #24]
 80114ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d3ba      	bcc.n	8011446 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80114d6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80114d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d803      	bhi.n	80114e8 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80114e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e2:	2200      	movs	r2, #0
 80114e4:	601a      	str	r2, [r3, #0]
 80114e6:	e1b6      	b.n	8011856 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80114e8:	2311      	movs	r3, #17
 80114ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80114ee:	e1b2      	b.n	8011856 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	68db      	ldr	r3, [r3, #12]
 80114f4:	683a      	ldr	r2, [r7, #0]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d902      	bls.n	8011500 <f_lseek+0x136>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	683a      	ldr	r2, [r7, #0]
 8011504:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	f000 81a4 	beq.w	8011856 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	3b01      	subs	r3, #1
 8011512:	4619      	mov	r1, r3
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f7fe fc1a 	bl	800fd4e <clmt_clust>
 801151a:	4602      	mov	r2, r0
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	69db      	ldr	r3, [r3, #28]
 8011526:	4619      	mov	r1, r3
 8011528:	4610      	mov	r0, r2
 801152a:	f7fe f963 	bl	800f7f4 <clust2sect>
 801152e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d109      	bne.n	801154a <f_lseek+0x180>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2202      	movs	r2, #2
 801153a:	755a      	strb	r2, [r3, #21]
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	2102      	movs	r1, #2
 8011540:	4618      	mov	r0, r3
 8011542:	f7fd fef0 	bl	800f326 <unlock_fs>
 8011546:	2302      	movs	r3, #2
 8011548:	e18e      	b.n	8011868 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	3b01      	subs	r3, #1
 801154e:	0a5b      	lsrs	r3, r3, #9
 8011550:	68ba      	ldr	r2, [r7, #8]
 8011552:	8952      	ldrh	r2, [r2, #10]
 8011554:	3a01      	subs	r2, #1
 8011556:	4013      	ands	r3, r2
 8011558:	69ba      	ldr	r2, [r7, #24]
 801155a:	4413      	add	r3, r2
 801155c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	699b      	ldr	r3, [r3, #24]
 8011562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011566:	2b00      	cmp	r3, #0
 8011568:	f000 8175 	beq.w	8011856 <f_lseek+0x48c>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6a1b      	ldr	r3, [r3, #32]
 8011570:	69ba      	ldr	r2, [r7, #24]
 8011572:	429a      	cmp	r2, r3
 8011574:	f000 816f 	beq.w	8011856 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	7d1b      	ldrb	r3, [r3, #20]
 801157c:	b25b      	sxtb	r3, r3
 801157e:	2b00      	cmp	r3, #0
 8011580:	da1d      	bge.n	80115be <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	7858      	ldrb	r0, [r3, #1]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6a1a      	ldr	r2, [r3, #32]
 8011590:	2301      	movs	r3, #1
 8011592:	f7fd fd73 	bl	800f07c <disk_write>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d009      	beq.n	80115b0 <f_lseek+0x1e6>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2201      	movs	r2, #1
 80115a0:	755a      	strb	r2, [r3, #21]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	2101      	movs	r1, #1
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fd febd 	bl	800f326 <unlock_fs>
 80115ac:	2301      	movs	r3, #1
 80115ae:	e15b      	b.n	8011868 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	7d1b      	ldrb	r3, [r3, #20]
 80115b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115b8:	b2da      	uxtb	r2, r3
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	7858      	ldrb	r0, [r3, #1]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80115c8:	2301      	movs	r3, #1
 80115ca:	69ba      	ldr	r2, [r7, #24]
 80115cc:	f7fd fd36 	bl	800f03c <disk_read>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d009      	beq.n	80115ea <f_lseek+0x220>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2201      	movs	r2, #1
 80115da:	755a      	strb	r2, [r3, #21]
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	2101      	movs	r1, #1
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7fd fea0 	bl	800f326 <unlock_fs>
 80115e6:	2301      	movs	r3, #1
 80115e8:	e13e      	b.n	8011868 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	69ba      	ldr	r2, [r7, #24]
 80115ee:	621a      	str	r2, [r3, #32]
 80115f0:	e131      	b.n	8011856 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	683a      	ldr	r2, [r7, #0]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d908      	bls.n	801160e <f_lseek+0x244>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	7d1b      	ldrb	r3, [r3, #20]
 8011600:	f003 0302 	and.w	r3, r3, #2
 8011604:	2b00      	cmp	r3, #0
 8011606:	d102      	bne.n	801160e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	699b      	ldr	r3, [r3, #24]
 8011612:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011614:	2300      	movs	r3, #0
 8011616:	637b      	str	r3, [r7, #52]	@ 0x34
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801161c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	f000 80c0 	beq.w	80117a6 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	895b      	ldrh	r3, [r3, #10]
 801162a:	025b      	lsls	r3, r3, #9
 801162c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801162e:	6a3b      	ldr	r3, [r7, #32]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d01b      	beq.n	801166c <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	1e5a      	subs	r2, r3, #1
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	fbb2 f2f3 	udiv	r2, r2, r3
 801163e:	6a3b      	ldr	r3, [r7, #32]
 8011640:	1e59      	subs	r1, r3, #1
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011648:	429a      	cmp	r2, r3
 801164a:	d30f      	bcc.n	801166c <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801164c:	6a3b      	ldr	r3, [r7, #32]
 801164e:	1e5a      	subs	r2, r3, #1
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	425b      	negs	r3, r3
 8011654:	401a      	ands	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	699b      	ldr	r3, [r3, #24]
 801165e:	683a      	ldr	r2, [r7, #0]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	69db      	ldr	r3, [r3, #28]
 8011668:	63bb      	str	r3, [r7, #56]	@ 0x38
 801166a:	e02c      	b.n	80116c6 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011674:	2b00      	cmp	r3, #0
 8011676:	d123      	bne.n	80116c0 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2100      	movs	r1, #0
 801167c:	4618      	mov	r0, r3
 801167e:	f7fe face 	bl	800fc1e <create_chain>
 8011682:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011686:	2b01      	cmp	r3, #1
 8011688:	d109      	bne.n	801169e <f_lseek+0x2d4>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2202      	movs	r2, #2
 801168e:	755a      	strb	r2, [r3, #21]
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	2102      	movs	r1, #2
 8011694:	4618      	mov	r0, r3
 8011696:	f7fd fe46 	bl	800f326 <unlock_fs>
 801169a:	2302      	movs	r3, #2
 801169c:	e0e4      	b.n	8011868 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801169e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116a4:	d109      	bne.n	80116ba <f_lseek+0x2f0>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2201      	movs	r2, #1
 80116aa:	755a      	strb	r2, [r3, #21]
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	2101      	movs	r1, #1
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7fd fe38 	bl	800f326 <unlock_fs>
 80116b6:	2301      	movs	r3, #1
 80116b8:	e0d6      	b.n	8011868 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116be:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116c4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80116c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d06c      	beq.n	80117a6 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80116cc:	e044      	b.n	8011758 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	1ad3      	subs	r3, r2, r3
 80116d4:	603b      	str	r3, [r7, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	699a      	ldr	r2, [r3, #24]
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	441a      	add	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	7d1b      	ldrb	r3, [r3, #20]
 80116e6:	f003 0302 	and.w	r3, r3, #2
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00b      	beq.n	8011706 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fe fa93 	bl	800fc1e <create_chain>
 80116f8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80116fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d108      	bne.n	8011712 <f_lseek+0x348>
							ofs = 0; break;
 8011700:	2300      	movs	r3, #0
 8011702:	603b      	str	r3, [r7, #0]
 8011704:	e02c      	b.n	8011760 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801170a:	4618      	mov	r0, r3
 801170c:	f7fe f891 	bl	800f832 <get_fat>
 8011710:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011718:	d109      	bne.n	801172e <f_lseek+0x364>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2201      	movs	r2, #1
 801171e:	755a      	strb	r2, [r3, #21]
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	2101      	movs	r1, #1
 8011724:	4618      	mov	r0, r3
 8011726:	f7fd fdfe 	bl	800f326 <unlock_fs>
 801172a:	2301      	movs	r3, #1
 801172c:	e09c      	b.n	8011868 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801172e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011730:	2b01      	cmp	r3, #1
 8011732:	d904      	bls.n	801173e <f_lseek+0x374>
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801173a:	429a      	cmp	r2, r3
 801173c:	d309      	bcc.n	8011752 <f_lseek+0x388>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2202      	movs	r2, #2
 8011742:	755a      	strb	r2, [r3, #21]
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	2102      	movs	r1, #2
 8011748:	4618      	mov	r0, r3
 801174a:	f7fd fdec 	bl	800f326 <unlock_fs>
 801174e:	2302      	movs	r3, #2
 8011750:	e08a      	b.n	8011868 <f_lseek+0x49e>
					fp->clust = clst;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011756:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011758:	683a      	ldr	r2, [r7, #0]
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	429a      	cmp	r2, r3
 801175e:	d8b6      	bhi.n	80116ce <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	699a      	ldr	r2, [r3, #24]
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	441a      	add	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011772:	2b00      	cmp	r3, #0
 8011774:	d017      	beq.n	80117a6 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801177a:	4618      	mov	r0, r3
 801177c:	f7fe f83a 	bl	800f7f4 <clust2sect>
 8011780:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011784:	2b00      	cmp	r3, #0
 8011786:	d109      	bne.n	801179c <f_lseek+0x3d2>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2202      	movs	r2, #2
 801178c:	755a      	strb	r2, [r3, #21]
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	2102      	movs	r1, #2
 8011792:	4618      	mov	r0, r3
 8011794:	f7fd fdc7 	bl	800f326 <unlock_fs>
 8011798:	2302      	movs	r3, #2
 801179a:	e065      	b.n	8011868 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	0a5b      	lsrs	r3, r3, #9
 80117a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117a2:	4413      	add	r3, r2
 80117a4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	699a      	ldr	r2, [r3, #24]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d90a      	bls.n	80117c8 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	699a      	ldr	r2, [r3, #24]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	7d1b      	ldrb	r3, [r3, #20]
 80117be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117c2:	b2da      	uxtb	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	699b      	ldr	r3, [r3, #24]
 80117cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d040      	beq.n	8011856 <f_lseek+0x48c>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6a1b      	ldr	r3, [r3, #32]
 80117d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117da:	429a      	cmp	r2, r3
 80117dc:	d03b      	beq.n	8011856 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	7d1b      	ldrb	r3, [r3, #20]
 80117e2:	b25b      	sxtb	r3, r3
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	da1d      	bge.n	8011824 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	7858      	ldrb	r0, [r3, #1]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6a1a      	ldr	r2, [r3, #32]
 80117f6:	2301      	movs	r3, #1
 80117f8:	f7fd fc40 	bl	800f07c <disk_write>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d009      	beq.n	8011816 <f_lseek+0x44c>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2201      	movs	r2, #1
 8011806:	755a      	strb	r2, [r3, #21]
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	2101      	movs	r1, #1
 801180c:	4618      	mov	r0, r3
 801180e:	f7fd fd8a 	bl	800f326 <unlock_fs>
 8011812:	2301      	movs	r3, #1
 8011814:	e028      	b.n	8011868 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	7d1b      	ldrb	r3, [r3, #20]
 801181a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801181e:	b2da      	uxtb	r2, r3
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	7858      	ldrb	r0, [r3, #1]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801182e:	2301      	movs	r3, #1
 8011830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011832:	f7fd fc03 	bl	800f03c <disk_read>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d009      	beq.n	8011850 <f_lseek+0x486>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2201      	movs	r2, #1
 8011840:	755a      	strb	r2, [r3, #21]
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	2101      	movs	r1, #1
 8011846:	4618      	mov	r0, r3
 8011848:	f7fd fd6d 	bl	800f326 <unlock_fs>
 801184c:	2301      	movs	r3, #1
 801184e:	e00b      	b.n	8011868 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011854:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801185c:	4611      	mov	r1, r2
 801185e:	4618      	mov	r0, r3
 8011860:	f7fd fd61 	bl	800f326 <unlock_fs>
 8011864:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011868:	4618      	mov	r0, r3
 801186a:	3740      	adds	r7, #64	@ 0x40
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b096      	sub	sp, #88	@ 0x58
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011878:	f107 0108 	add.w	r1, r7, #8
 801187c:	1d3b      	adds	r3, r7, #4
 801187e:	2202      	movs	r2, #2
 8011880:	4618      	mov	r0, r3
 8011882:	f7fe fe85 	bl	8010590 <find_volume>
 8011886:	4603      	mov	r3, r0
 8011888:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011890:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011894:	2b00      	cmp	r3, #0
 8011896:	f040 80ec 	bne.w	8011a72 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	f107 030c 	add.w	r3, r7, #12
 80118a0:	4611      	mov	r1, r2
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fe fd68 	bl	8010378 <follow_path>
 80118a8:	4603      	mov	r3, r0
 80118aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80118ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d102      	bne.n	80118bc <f_mkdir+0x4c>
 80118b6:	2308      	movs	r3, #8
 80118b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80118bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118c0:	2b04      	cmp	r3, #4
 80118c2:	f040 80d6 	bne.w	8011a72 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80118c6:	f107 030c 	add.w	r3, r7, #12
 80118ca:	2100      	movs	r1, #0
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7fe f9a6 	bl	800fc1e <create_chain>
 80118d2:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	895b      	ldrh	r3, [r3, #10]
 80118d8:	025b      	lsls	r3, r3, #9
 80118da:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80118dc:	2300      	movs	r3, #0
 80118de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80118e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d102      	bne.n	80118ee <f_mkdir+0x7e>
 80118e8:	2307      	movs	r3, #7
 80118ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80118ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d102      	bne.n	80118fa <f_mkdir+0x8a>
 80118f4:	2302      	movs	r3, #2
 80118f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80118fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011900:	d102      	bne.n	8011908 <f_mkdir+0x98>
 8011902:	2301      	movs	r3, #1
 8011904:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011908:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801190c:	2b00      	cmp	r3, #0
 801190e:	d106      	bne.n	801191e <f_mkdir+0xae>
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	4618      	mov	r0, r3
 8011914:	f7fd fe8e 	bl	800f634 <sync_window>
 8011918:	4603      	mov	r3, r0
 801191a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 801191e:	f7fd faef 	bl	800ef00 <get_fattime>
 8011922:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011924:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011928:	2b00      	cmp	r3, #0
 801192a:	d16a      	bne.n	8011a02 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011930:	4618      	mov	r0, r3
 8011932:	f7fd ff5f 	bl	800f7f4 <clust2sect>
 8011936:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	3334      	adds	r3, #52	@ 0x34
 801193c:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 801193e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011942:	2100      	movs	r1, #0
 8011944:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011946:	f7fd fc7b 	bl	800f240 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801194a:	220b      	movs	r2, #11
 801194c:	2120      	movs	r1, #32
 801194e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011950:	f7fd fc76 	bl	800f240 <mem_set>
					dir[DIR_Name] = '.';
 8011954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011956:	222e      	movs	r2, #46	@ 0x2e
 8011958:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801195a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801195c:	330b      	adds	r3, #11
 801195e:	2210      	movs	r2, #16
 8011960:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011964:	3316      	adds	r3, #22
 8011966:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011968:	4618      	mov	r0, r3
 801196a:	f7fd fc1c 	bl	800f1a6 <st_dword>
					st_clust(fs, dir, dcl);
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011972:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011974:	4618      	mov	r0, r3
 8011976:	f7fe fbc4 	bl	8010102 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801197a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801197c:	3320      	adds	r3, #32
 801197e:	2220      	movs	r2, #32
 8011980:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011982:	4618      	mov	r0, r3
 8011984:	f7fd fc3b 	bl	800f1fe <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801198a:	3321      	adds	r3, #33	@ 0x21
 801198c:	222e      	movs	r2, #46	@ 0x2e
 801198e:	701a      	strb	r2, [r3, #0]
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	2b03      	cmp	r3, #3
 801199a:	d106      	bne.n	80119aa <f_mkdir+0x13a>
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d101      	bne.n	80119aa <f_mkdir+0x13a>
 80119a6:	2300      	movs	r3, #0
 80119a8:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80119aa:	68b8      	ldr	r0, [r7, #8]
 80119ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119ae:	3320      	adds	r3, #32
 80119b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119b2:	4619      	mov	r1, r3
 80119b4:	f7fe fba5 	bl	8010102 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	895b      	ldrh	r3, [r3, #10]
 80119bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80119be:	e01b      	b.n	80119f8 <f_mkdir+0x188>
					fs->winsect = dsc++;
 80119c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119c2:	1c5a      	adds	r2, r3, #1
 80119c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80119c6:	68ba      	ldr	r2, [r7, #8]
 80119c8:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	2201      	movs	r2, #1
 80119ce:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fd fe2e 	bl	800f634 <sync_window>
 80119d8:	4603      	mov	r3, r0
 80119da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 80119de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d10c      	bne.n	8011a00 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 80119e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119ea:	2100      	movs	r1, #0
 80119ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80119ee:	f7fd fc27 	bl	800f240 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80119f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119f4:	3b01      	subs	r3, #1
 80119f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80119f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1e0      	bne.n	80119c0 <f_mkdir+0x150>
 80119fe:	e000      	b.n	8011a02 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8011a00:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011a02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d107      	bne.n	8011a1a <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011a0a:	f107 030c 	add.w	r3, r7, #12
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7fe fbec 	bl	80101ec <dir_register>
 8011a14:	4603      	mov	r3, r0
 8011a16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8011a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d120      	bne.n	8011a64 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a28:	3316      	adds	r3, #22
 8011a2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fd fbba 	bl	800f1a6 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7fe fb62 	bl	8010102 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a40:	330b      	adds	r3, #11
 8011a42:	2210      	movs	r2, #16
 8011a44:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	2201      	movs	r2, #1
 8011a4a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10e      	bne.n	8011a72 <f_mkdir+0x202>
					res = sync_fs(fs);
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7fd fe5e 	bl	800f718 <sync_fs>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8011a62:	e006      	b.n	8011a72 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011a64:	f107 030c 	add.w	r3, r7, #12
 8011a68:	2200      	movs	r2, #0
 8011a6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7fe f871 	bl	800fb54 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011a78:	4611      	mov	r1, r2
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fd fc53 	bl	800f326 <unlock_fs>
 8011a80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3758      	adds	r7, #88	@ 0x58
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b087      	sub	sp, #28
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	4613      	mov	r3, r2
 8011a98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011aa4:	7a5b      	ldrb	r3, [r3, #9]
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d131      	bne.n	8011b10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011aac:	4b1c      	ldr	r3, [pc, #112]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011aae:	7a5b      	ldrb	r3, [r3, #9]
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	461a      	mov	r2, r3
 8011ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011aba:	4b19      	ldr	r3, [pc, #100]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011abc:	7a5b      	ldrb	r3, [r3, #9]
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	4a17      	ldr	r2, [pc, #92]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	4413      	add	r3, r2
 8011ac6:	68fa      	ldr	r2, [r7, #12]
 8011ac8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011aca:	4b15      	ldr	r3, [pc, #84]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011acc:	7a5b      	ldrb	r3, [r3, #9]
 8011ace:	b2db      	uxtb	r3, r3
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	4b13      	ldr	r3, [pc, #76]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011ad4:	4413      	add	r3, r2
 8011ad6:	79fa      	ldrb	r2, [r7, #7]
 8011ad8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011ada:	4b11      	ldr	r3, [pc, #68]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011adc:	7a5b      	ldrb	r3, [r3, #9]
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	1c5a      	adds	r2, r3, #1
 8011ae2:	b2d1      	uxtb	r1, r2
 8011ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8011b20 <FATFS_LinkDriverEx+0x94>)
 8011ae6:	7251      	strb	r1, [r2, #9]
 8011ae8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011aea:	7dbb      	ldrb	r3, [r7, #22]
 8011aec:	3330      	adds	r3, #48	@ 0x30
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	3301      	adds	r3, #1
 8011af8:	223a      	movs	r2, #58	@ 0x3a
 8011afa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	3302      	adds	r3, #2
 8011b00:	222f      	movs	r2, #47	@ 0x2f
 8011b02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	3303      	adds	r3, #3
 8011b08:	2200      	movs	r2, #0
 8011b0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	371c      	adds	r7, #28
 8011b16:	46bd      	mov	sp, r7
 8011b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop
 8011b20:	200017a8 	.word	0x200017a8

08011b24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011b2e:	2200      	movs	r2, #0
 8011b30:	6839      	ldr	r1, [r7, #0]
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7ff ffaa 	bl	8011a8c <FATFS_LinkDriverEx>
 8011b38:	4603      	mov	r3, r0
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3708      	adds	r7, #8
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b084      	sub	sp, #16
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	4603      	mov	r3, r0
 8011b4a:	6039      	str	r1, [r7, #0]
 8011b4c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011b4e:	2300      	movs	r3, #0
 8011b50:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011b52:	f107 0308 	add.w	r3, r7, #8
 8011b56:	2101      	movs	r1, #1
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f000 f939 	bl	8011dd0 <osSemaphoreCreate>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	bf14      	ite	ne
 8011b6c:	2301      	movne	r3, #1
 8011b6e:	2300      	moveq	r3, #0
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	60fb      	str	r3, [r7, #12]

    return ret;
 8011b74:	68fb      	ldr	r3, [r7, #12]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}

08011b7e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011b7e:	b580      	push	{r7, lr}
 8011b80:	b082      	sub	sp, #8
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 f9c4 	bl	8011f14 <osSemaphoreDelete>
#endif
    return 1;
 8011b8c:	2301      	movs	r3, #1
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3708      	adds	r7, #8
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}

08011b96 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011b96:	b580      	push	{r7, lr}
 8011b98:	b084      	sub	sp, #16
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011ba2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 f930 	bl	8011e0c <osSemaphoreWait>
 8011bac:	4603      	mov	r3, r0
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d101      	bne.n	8011bb6 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3710      	adds	r7, #16
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f000 f96d 	bl	8011ea8 <osSemaphoreRelease>
#endif
}
 8011bce:	bf00      	nop
 8011bd0:	3708      	adds	r7, #8
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}

08011bd6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011bd6:	b480      	push	{r7}
 8011bd8:	b085      	sub	sp, #20
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	4603      	mov	r3, r0
 8011bde:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011be0:	2300      	movs	r3, #0
 8011be2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011be8:	2b84      	cmp	r3, #132	@ 0x84
 8011bea:	d005      	beq.n	8011bf8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011bec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	3303      	adds	r3, #3
 8011bf6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3714      	adds	r7, #20
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c04:	4770      	bx	lr

08011c06 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011c06:	b480      	push	{r7}
 8011c08:	b083      	sub	sp, #12
 8011c0a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c0c:	f3ef 8305 	mrs	r3, IPSR
 8011c10:	607b      	str	r3, [r7, #4]
  return(result);
 8011c12:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	bf14      	ite	ne
 8011c18:	2301      	movne	r3, #1
 8011c1a:	2300      	moveq	r3, #0
 8011c1c:	b2db      	uxtb	r3, r3
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	370c      	adds	r7, #12
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr

08011c2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011c2a:	b580      	push	{r7, lr}
 8011c2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011c2e:	f001 f9eb 	bl	8013008 <vTaskStartScheduler>
  
  return osOK;
 8011c32:	2300      	movs	r3, #0
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c3a:	b087      	sub	sp, #28
 8011c3c:	af02      	add	r7, sp, #8
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	685c      	ldr	r4, [r3, #4]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011c4e:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7ff ffbd 	bl	8011bd6 <makeFreeRtosPriority>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	f107 030c 	add.w	r3, r7, #12
 8011c62:	9301      	str	r3, [sp, #4]
 8011c64:	9200      	str	r2, [sp, #0]
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	4632      	mov	r2, r6
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f000 ffad 	bl	8012bcc <xTaskCreate>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d001      	beq.n	8011c7c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	e000      	b.n	8011c7e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3714      	adds	r7, #20
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b084      	sub	sp, #16
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d001      	beq.n	8011c9c <osDelay+0x16>
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	e000      	b.n	8011c9e <osDelay+0x18>
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f001 f8e8 	bl	8012e74 <vTaskDelay>
  
  return osOK;
 8011ca4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3710      	adds	r7, #16
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}

08011cae <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b082      	sub	sp, #8
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8011cb6:	2001      	movs	r0, #1
 8011cb8:	f000 fada 	bl	8012270 <xQueueCreateMutex>
 8011cbc:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
	...

08011cc8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d101      	bne.n	8011ce0 <osMutexWait+0x18>
    return osErrorParameter;
 8011cdc:	2380      	movs	r3, #128	@ 0x80
 8011cde:	e03a      	b.n	8011d56 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cea:	d103      	bne.n	8011cf4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011cec:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf0:	60fb      	str	r3, [r7, #12]
 8011cf2:	e009      	b.n	8011d08 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d006      	beq.n	8011d08 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d101      	bne.n	8011d08 <osMutexWait+0x40>
      ticks = 1;
 8011d04:	2301      	movs	r3, #1
 8011d06:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011d08:	f7ff ff7d 	bl	8011c06 <inHandlerMode>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d017      	beq.n	8011d42 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011d12:	f107 0308 	add.w	r3, r7, #8
 8011d16:	461a      	mov	r2, r3
 8011d18:	2100      	movs	r1, #0
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 fd62 	bl	80127e4 <xQueueReceiveFromISR>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d001      	beq.n	8011d2a <osMutexWait+0x62>
      return osErrorOS;
 8011d26:	23ff      	movs	r3, #255	@ 0xff
 8011d28:	e015      	b.n	8011d56 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d011      	beq.n	8011d54 <osMutexWait+0x8c>
 8011d30:	4b0b      	ldr	r3, [pc, #44]	@ (8011d60 <osMutexWait+0x98>)
 8011d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d36:	601a      	str	r2, [r3, #0]
 8011d38:	f3bf 8f4f 	dsb	sy
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	e008      	b.n	8011d54 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011d42:	68f9      	ldr	r1, [r7, #12]
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f000 fc3d 	bl	80125c4 <xQueueSemaphoreTake>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b01      	cmp	r3, #1
 8011d4e:	d001      	beq.n	8011d54 <osMutexWait+0x8c>
    return osErrorOS;
 8011d50:	23ff      	movs	r3, #255	@ 0xff
 8011d52:	e000      	b.n	8011d56 <osMutexWait+0x8e>
  }
  
  return osOK;
 8011d54:	2300      	movs	r3, #0
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	e000ed04 	.word	0xe000ed04

08011d64 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011d70:	2300      	movs	r3, #0
 8011d72:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011d74:	f7ff ff47 	bl	8011c06 <inHandlerMode>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d016      	beq.n	8011dac <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011d7e:	f107 0308 	add.w	r3, r7, #8
 8011d82:	4619      	mov	r1, r3
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 fb8d 	bl	80124a4 <xQueueGiveFromISR>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	d001      	beq.n	8011d94 <osMutexRelease+0x30>
      return osErrorOS;
 8011d90:	23ff      	movs	r3, #255	@ 0xff
 8011d92:	e017      	b.n	8011dc4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d013      	beq.n	8011dc2 <osMutexRelease+0x5e>
 8011d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8011dcc <osMutexRelease+0x68>)
 8011d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011da0:	601a      	str	r2, [r3, #0]
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	f3bf 8f6f 	isb	sy
 8011daa:	e00a      	b.n	8011dc2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011dac:	2300      	movs	r3, #0
 8011dae:	2200      	movs	r2, #0
 8011db0:	2100      	movs	r1, #0
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f000 fa74 	bl	80122a0 <xQueueGenericSend>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b01      	cmp	r3, #1
 8011dbc:	d001      	beq.n	8011dc2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011dbe:	23ff      	movs	r3, #255	@ 0xff
 8011dc0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	e000ed04 	.word	0xe000ed04

08011dd0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d110      	bne.n	8011e02 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8011de0:	2203      	movs	r2, #3
 8011de2:	2100      	movs	r1, #0
 8011de4:	2001      	movs	r0, #1
 8011de6:	f000 f9d3 	bl	8012190 <xQueueGenericCreate>
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d005      	beq.n	8011dfe <osSemaphoreCreate+0x2e>
 8011df2:	2300      	movs	r3, #0
 8011df4:	2200      	movs	r2, #0
 8011df6:	2100      	movs	r1, #0
 8011df8:	68f8      	ldr	r0, [r7, #12]
 8011dfa:	f000 fa51 	bl	80122a0 <xQueueGenericSend>
    return sema;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	e000      	b.n	8011e04 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8011e02:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3710      	adds	r7, #16
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011e16:	2300      	movs	r3, #0
 8011e18:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d101      	bne.n	8011e24 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011e20:	2380      	movs	r3, #128	@ 0x80
 8011e22:	e03a      	b.n	8011e9a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011e24:	2300      	movs	r3, #0
 8011e26:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e2e:	d103      	bne.n	8011e38 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011e30:	f04f 33ff 	mov.w	r3, #4294967295
 8011e34:	60fb      	str	r3, [r7, #12]
 8011e36:	e009      	b.n	8011e4c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d006      	beq.n	8011e4c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d101      	bne.n	8011e4c <osSemaphoreWait+0x40>
      ticks = 1;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011e4c:	f7ff fedb 	bl	8011c06 <inHandlerMode>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d017      	beq.n	8011e86 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011e56:	f107 0308 	add.w	r3, r7, #8
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fcc0 	bl	80127e4 <xQueueReceiveFromISR>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d001      	beq.n	8011e6e <osSemaphoreWait+0x62>
      return osErrorOS;
 8011e6a:	23ff      	movs	r3, #255	@ 0xff
 8011e6c:	e015      	b.n	8011e9a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d011      	beq.n	8011e98 <osSemaphoreWait+0x8c>
 8011e74:	4b0b      	ldr	r3, [pc, #44]	@ (8011ea4 <osSemaphoreWait+0x98>)
 8011e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e7a:	601a      	str	r2, [r3, #0]
 8011e7c:	f3bf 8f4f 	dsb	sy
 8011e80:	f3bf 8f6f 	isb	sy
 8011e84:	e008      	b.n	8011e98 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011e86:	68f9      	ldr	r1, [r7, #12]
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f000 fb9b 	bl	80125c4 <xQueueSemaphoreTake>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d001      	beq.n	8011e98 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011e94:	23ff      	movs	r3, #255	@ 0xff
 8011e96:	e000      	b.n	8011e9a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011e98:	2300      	movs	r3, #0
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	e000ed04 	.word	0xe000ed04

08011ea8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011eb8:	f7ff fea5 	bl	8011c06 <inHandlerMode>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d016      	beq.n	8011ef0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011ec2:	f107 0308 	add.w	r3, r7, #8
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 faeb 	bl	80124a4 <xQueueGiveFromISR>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	d001      	beq.n	8011ed8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011ed4:	23ff      	movs	r3, #255	@ 0xff
 8011ed6:	e017      	b.n	8011f08 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d013      	beq.n	8011f06 <osSemaphoreRelease+0x5e>
 8011ede:	4b0c      	ldr	r3, [pc, #48]	@ (8011f10 <osSemaphoreRelease+0x68>)
 8011ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	f3bf 8f6f 	isb	sy
 8011eee:	e00a      	b.n	8011f06 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	2100      	movs	r1, #0
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 f9d2 	bl	80122a0 <xQueueGenericSend>
 8011efc:	4603      	mov	r3, r0
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d001      	beq.n	8011f06 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011f02:	23ff      	movs	r3, #255	@ 0xff
 8011f04:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011f06:	68fb      	ldr	r3, [r7, #12]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	e000ed04 	.word	0xe000ed04

08011f14 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011f1c:	f7ff fe73 	bl	8011c06 <inHandlerMode>
 8011f20:	4603      	mov	r3, r0
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d001      	beq.n	8011f2a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011f26:	2382      	movs	r3, #130	@ 0x82
 8011f28:	e003      	b.n	8011f32 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f000 fcdc 	bl	80128e8 <vQueueDelete>

  return osOK; 
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3708      	adds	r7, #8
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}

08011f3a <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8011f3a:	b580      	push	{r7, lr}
 8011f3c:	b082      	sub	sp, #8
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 ffcc 	bl	8012ee0 <vTaskSuspend>
  
  return osOK;
 8011f48:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}

08011f52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f52:	b480      	push	{r7}
 8011f54:	b083      	sub	sp, #12
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f103 0208 	add.w	r2, r3, #8
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f04f 32ff 	mov.w	r2, #4294967295
 8011f6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f103 0208 	add.w	r2, r3, #8
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f103 0208 	add.w	r2, r3, #8
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011f86:	bf00      	nop
 8011f88:	370c      	adds	r7, #12
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr

08011f92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011f92:	b480      	push	{r7}
 8011f94:	b083      	sub	sp, #12
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011fa0:	bf00      	nop
 8011fa2:	370c      	adds	r7, #12
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011faa:	4770      	bx	lr

08011fac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fac:	b480      	push	{r7}
 8011fae:	b085      	sub	sp, #20
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	689a      	ldr	r2, [r3, #8]
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	689b      	ldr	r3, [r3, #8]
 8011fce:	683a      	ldr	r2, [r7, #0]
 8011fd0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	683a      	ldr	r2, [r7, #0]
 8011fd6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	1c5a      	adds	r2, r3, #1
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	601a      	str	r2, [r3, #0]
}
 8011fe8:	bf00      	nop
 8011fea:	3714      	adds	r7, #20
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr

08011ff4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801200a:	d103      	bne.n	8012014 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	691b      	ldr	r3, [r3, #16]
 8012010:	60fb      	str	r3, [r7, #12]
 8012012:	e00c      	b.n	801202e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	3308      	adds	r3, #8
 8012018:	60fb      	str	r3, [r7, #12]
 801201a:	e002      	b.n	8012022 <vListInsert+0x2e>
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	60fb      	str	r3, [r7, #12]
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	68ba      	ldr	r2, [r7, #8]
 801202a:	429a      	cmp	r2, r3
 801202c:	d2f6      	bcs.n	801201c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	685a      	ldr	r2, [r3, #4]
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	683a      	ldr	r2, [r7, #0]
 801203c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	68fa      	ldr	r2, [r7, #12]
 8012042:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	683a      	ldr	r2, [r7, #0]
 8012048:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	1c5a      	adds	r2, r3, #1
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	601a      	str	r2, [r3, #0]
}
 801205a:	bf00      	nop
 801205c:	3714      	adds	r7, #20
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr

08012066 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012066:	b480      	push	{r7}
 8012068:	b085      	sub	sp, #20
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	691b      	ldr	r3, [r3, #16]
 8012072:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	6892      	ldr	r2, [r2, #8]
 801207c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	689b      	ldr	r3, [r3, #8]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	6852      	ldr	r2, [r2, #4]
 8012086:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	685b      	ldr	r3, [r3, #4]
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	429a      	cmp	r2, r3
 8012090:	d103      	bne.n	801209a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	689a      	ldr	r2, [r3, #8]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2200      	movs	r2, #0
 801209e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	1e5a      	subs	r2, r3, #1
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	681b      	ldr	r3, [r3, #0]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3714      	adds	r7, #20
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
	...

080120bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d10b      	bne.n	80120e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80120d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d4:	f383 8811 	msr	BASEPRI, r3
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	f3bf 8f4f 	dsb	sy
 80120e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80120e2:	bf00      	nop
 80120e4:	bf00      	nop
 80120e6:	e7fd      	b.n	80120e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80120e8:	f001 ff06 	bl	8013ef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120f4:	68f9      	ldr	r1, [r7, #12]
 80120f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80120f8:	fb01 f303 	mul.w	r3, r1, r3
 80120fc:	441a      	add	r2, r3
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2200      	movs	r2, #0
 8012106:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012118:	3b01      	subs	r3, #1
 801211a:	68f9      	ldr	r1, [r7, #12]
 801211c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801211e:	fb01 f303 	mul.w	r3, r1, r3
 8012122:	441a      	add	r2, r3
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	22ff      	movs	r2, #255	@ 0xff
 801212c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	22ff      	movs	r2, #255	@ 0xff
 8012134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d114      	bne.n	8012168 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	691b      	ldr	r3, [r3, #16]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d01a      	beq.n	801217c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	3310      	adds	r3, #16
 801214a:	4618      	mov	r0, r3
 801214c:	f001 f99e 	bl	801348c <xTaskRemoveFromEventList>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d012      	beq.n	801217c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012156:	4b0d      	ldr	r3, [pc, #52]	@ (801218c <xQueueGenericReset+0xd0>)
 8012158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801215c:	601a      	str	r2, [r3, #0]
 801215e:	f3bf 8f4f 	dsb	sy
 8012162:	f3bf 8f6f 	isb	sy
 8012166:	e009      	b.n	801217c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	3310      	adds	r3, #16
 801216c:	4618      	mov	r0, r3
 801216e:	f7ff fef0 	bl	8011f52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	3324      	adds	r3, #36	@ 0x24
 8012176:	4618      	mov	r0, r3
 8012178:	f7ff feeb 	bl	8011f52 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801217c:	f001 feee 	bl	8013f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012180:	2301      	movs	r3, #1
}
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	e000ed04 	.word	0xe000ed04

08012190 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08a      	sub	sp, #40	@ 0x28
 8012194:	af02      	add	r7, sp, #8
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	4613      	mov	r3, r2
 801219c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d10b      	bne.n	80121bc <xQueueGenericCreate+0x2c>
	__asm volatile
 80121a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121a8:	f383 8811 	msr	BASEPRI, r3
 80121ac:	f3bf 8f6f 	isb	sy
 80121b0:	f3bf 8f4f 	dsb	sy
 80121b4:	613b      	str	r3, [r7, #16]
}
 80121b6:	bf00      	nop
 80121b8:	bf00      	nop
 80121ba:	e7fd      	b.n	80121b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	68ba      	ldr	r2, [r7, #8]
 80121c0:	fb02 f303 	mul.w	r3, r2, r3
 80121c4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80121c6:	69fb      	ldr	r3, [r7, #28]
 80121c8:	3348      	adds	r3, #72	@ 0x48
 80121ca:	4618      	mov	r0, r3
 80121cc:	f001 ffb6 	bl	801413c <pvPortMalloc>
 80121d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00d      	beq.n	80121f4 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	3348      	adds	r3, #72	@ 0x48
 80121e0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80121e2:	79fa      	ldrb	r2, [r7, #7]
 80121e4:	69bb      	ldr	r3, [r7, #24]
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	4613      	mov	r3, r2
 80121ea:	697a      	ldr	r2, [r7, #20]
 80121ec:	68b9      	ldr	r1, [r7, #8]
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	f000 f805 	bl	80121fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80121f4:	69bb      	ldr	r3, [r7, #24]
	}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3720      	adds	r7, #32
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b084      	sub	sp, #16
 8012202:	af00      	add	r7, sp, #0
 8012204:	60f8      	str	r0, [r7, #12]
 8012206:	60b9      	str	r1, [r7, #8]
 8012208:	607a      	str	r2, [r7, #4]
 801220a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d103      	bne.n	801221a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	69ba      	ldr	r2, [r7, #24]
 8012216:	601a      	str	r2, [r3, #0]
 8012218:	e002      	b.n	8012220 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	68fa      	ldr	r2, [r7, #12]
 8012224:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	68ba      	ldr	r2, [r7, #8]
 801222a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801222c:	2101      	movs	r1, #1
 801222e:	69b8      	ldr	r0, [r7, #24]
 8012230:	f7ff ff44 	bl	80120bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012234:	bf00      	nop
 8012236:	3710      	adds	r7, #16
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00e      	beq.n	8012268 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2200      	movs	r2, #0
 801224e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2200      	movs	r2, #0
 8012254:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801225c:	2300      	movs	r3, #0
 801225e:	2200      	movs	r2, #0
 8012260:	2100      	movs	r1, #0
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 f81c 	bl	80122a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012268:	bf00      	nop
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012270:	b580      	push	{r7, lr}
 8012272:	b086      	sub	sp, #24
 8012274:	af00      	add	r7, sp, #0
 8012276:	4603      	mov	r3, r0
 8012278:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801227a:	2301      	movs	r3, #1
 801227c:	617b      	str	r3, [r7, #20]
 801227e:	2300      	movs	r3, #0
 8012280:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012282:	79fb      	ldrb	r3, [r7, #7]
 8012284:	461a      	mov	r2, r3
 8012286:	6939      	ldr	r1, [r7, #16]
 8012288:	6978      	ldr	r0, [r7, #20]
 801228a:	f7ff ff81 	bl	8012190 <xQueueGenericCreate>
 801228e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f7ff ffd3 	bl	801223c <prvInitialiseMutex>

		return xNewQueue;
 8012296:	68fb      	ldr	r3, [r7, #12]
	}
 8012298:	4618      	mov	r0, r3
 801229a:	3718      	adds	r7, #24
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b08e      	sub	sp, #56	@ 0x38
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	607a      	str	r2, [r7, #4]
 80122ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80122ae:	2300      	movs	r3, #0
 80122b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80122b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10b      	bne.n	80122d4 <xQueueGenericSend+0x34>
	__asm volatile
 80122bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122c0:	f383 8811 	msr	BASEPRI, r3
 80122c4:	f3bf 8f6f 	isb	sy
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80122ce:	bf00      	nop
 80122d0:	bf00      	nop
 80122d2:	e7fd      	b.n	80122d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d103      	bne.n	80122e2 <xQueueGenericSend+0x42>
 80122da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d101      	bne.n	80122e6 <xQueueGenericSend+0x46>
 80122e2:	2301      	movs	r3, #1
 80122e4:	e000      	b.n	80122e8 <xQueueGenericSend+0x48>
 80122e6:	2300      	movs	r3, #0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d10b      	bne.n	8012304 <xQueueGenericSend+0x64>
	__asm volatile
 80122ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f0:	f383 8811 	msr	BASEPRI, r3
 80122f4:	f3bf 8f6f 	isb	sy
 80122f8:	f3bf 8f4f 	dsb	sy
 80122fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80122fe:	bf00      	nop
 8012300:	bf00      	nop
 8012302:	e7fd      	b.n	8012300 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b02      	cmp	r3, #2
 8012308:	d103      	bne.n	8012312 <xQueueGenericSend+0x72>
 801230a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801230c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801230e:	2b01      	cmp	r3, #1
 8012310:	d101      	bne.n	8012316 <xQueueGenericSend+0x76>
 8012312:	2301      	movs	r3, #1
 8012314:	e000      	b.n	8012318 <xQueueGenericSend+0x78>
 8012316:	2300      	movs	r3, #0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10b      	bne.n	8012334 <xQueueGenericSend+0x94>
	__asm volatile
 801231c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012320:	f383 8811 	msr	BASEPRI, r3
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	623b      	str	r3, [r7, #32]
}
 801232e:	bf00      	nop
 8012330:	bf00      	nop
 8012332:	e7fd      	b.n	8012330 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012334:	f001 fa88 	bl	8013848 <xTaskGetSchedulerState>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d102      	bne.n	8012344 <xQueueGenericSend+0xa4>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d101      	bne.n	8012348 <xQueueGenericSend+0xa8>
 8012344:	2301      	movs	r3, #1
 8012346:	e000      	b.n	801234a <xQueueGenericSend+0xaa>
 8012348:	2300      	movs	r3, #0
 801234a:	2b00      	cmp	r3, #0
 801234c:	d10b      	bne.n	8012366 <xQueueGenericSend+0xc6>
	__asm volatile
 801234e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012352:	f383 8811 	msr	BASEPRI, r3
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	f3bf 8f4f 	dsb	sy
 801235e:	61fb      	str	r3, [r7, #28]
}
 8012360:	bf00      	nop
 8012362:	bf00      	nop
 8012364:	e7fd      	b.n	8012362 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012366:	f001 fdc7 	bl	8013ef8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801236c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012372:	429a      	cmp	r2, r3
 8012374:	d302      	bcc.n	801237c <xQueueGenericSend+0xdc>
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b02      	cmp	r3, #2
 801237a:	d129      	bne.n	80123d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801237c:	683a      	ldr	r2, [r7, #0]
 801237e:	68b9      	ldr	r1, [r7, #8]
 8012380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012382:	f000 fae8 	bl	8012956 <prvCopyDataToQueue>
 8012386:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801238c:	2b00      	cmp	r3, #0
 801238e:	d010      	beq.n	80123b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012392:	3324      	adds	r3, #36	@ 0x24
 8012394:	4618      	mov	r0, r3
 8012396:	f001 f879 	bl	801348c <xTaskRemoveFromEventList>
 801239a:	4603      	mov	r3, r0
 801239c:	2b00      	cmp	r3, #0
 801239e:	d013      	beq.n	80123c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80123a0:	4b3f      	ldr	r3, [pc, #252]	@ (80124a0 <xQueueGenericSend+0x200>)
 80123a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123a6:	601a      	str	r2, [r3, #0]
 80123a8:	f3bf 8f4f 	dsb	sy
 80123ac:	f3bf 8f6f 	isb	sy
 80123b0:	e00a      	b.n	80123c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80123b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d007      	beq.n	80123c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80123b8:	4b39      	ldr	r3, [pc, #228]	@ (80124a0 <xQueueGenericSend+0x200>)
 80123ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123be:	601a      	str	r2, [r3, #0]
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80123c8:	f001 fdc8 	bl	8013f5c <vPortExitCritical>
				return pdPASS;
 80123cc:	2301      	movs	r3, #1
 80123ce:	e063      	b.n	8012498 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d103      	bne.n	80123de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80123d6:	f001 fdc1 	bl	8013f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80123da:	2300      	movs	r3, #0
 80123dc:	e05c      	b.n	8012498 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d106      	bne.n	80123f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123e4:	f107 0314 	add.w	r3, r7, #20
 80123e8:	4618      	mov	r0, r3
 80123ea:	f001 f8b3 	bl	8013554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123ee:	2301      	movs	r3, #1
 80123f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123f2:	f001 fdb3 	bl	8013f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123f6:	f000 fe59 	bl	80130ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123fa:	f001 fd7d 	bl	8013ef8 <vPortEnterCritical>
 80123fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012404:	b25b      	sxtb	r3, r3
 8012406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801240a:	d103      	bne.n	8012414 <xQueueGenericSend+0x174>
 801240c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801240e:	2200      	movs	r2, #0
 8012410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801241a:	b25b      	sxtb	r3, r3
 801241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012420:	d103      	bne.n	801242a <xQueueGenericSend+0x18a>
 8012422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012424:	2200      	movs	r2, #0
 8012426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801242a:	f001 fd97 	bl	8013f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801242e:	1d3a      	adds	r2, r7, #4
 8012430:	f107 0314 	add.w	r3, r7, #20
 8012434:	4611      	mov	r1, r2
 8012436:	4618      	mov	r0, r3
 8012438:	f001 f8a2 	bl	8013580 <xTaskCheckForTimeOut>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d124      	bne.n	801248c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012442:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012444:	f000 fb7f 	bl	8012b46 <prvIsQueueFull>
 8012448:	4603      	mov	r3, r0
 801244a:	2b00      	cmp	r3, #0
 801244c:	d018      	beq.n	8012480 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801244e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012450:	3310      	adds	r3, #16
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	4611      	mov	r1, r2
 8012456:	4618      	mov	r0, r3
 8012458:	f000 fff2 	bl	8013440 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801245c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801245e:	f000 fb0a 	bl	8012a76 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012462:	f000 fe31 	bl	80130c8 <xTaskResumeAll>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	f47f af7c 	bne.w	8012366 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801246e:	4b0c      	ldr	r3, [pc, #48]	@ (80124a0 <xQueueGenericSend+0x200>)
 8012470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012474:	601a      	str	r2, [r3, #0]
 8012476:	f3bf 8f4f 	dsb	sy
 801247a:	f3bf 8f6f 	isb	sy
 801247e:	e772      	b.n	8012366 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012482:	f000 faf8 	bl	8012a76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012486:	f000 fe1f 	bl	80130c8 <xTaskResumeAll>
 801248a:	e76c      	b.n	8012366 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801248c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801248e:	f000 faf2 	bl	8012a76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012492:	f000 fe19 	bl	80130c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012496:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012498:	4618      	mov	r0, r3
 801249a:	3738      	adds	r7, #56	@ 0x38
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	e000ed04 	.word	0xe000ed04

080124a4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b08e      	sub	sp, #56	@ 0x38
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80124b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d10b      	bne.n	80124d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80124b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124bc:	f383 8811 	msr	BASEPRI, r3
 80124c0:	f3bf 8f6f 	isb	sy
 80124c4:	f3bf 8f4f 	dsb	sy
 80124c8:	623b      	str	r3, [r7, #32]
}
 80124ca:	bf00      	nop
 80124cc:	bf00      	nop
 80124ce:	e7fd      	b.n	80124cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80124d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d00b      	beq.n	80124f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80124d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124dc:	f383 8811 	msr	BASEPRI, r3
 80124e0:	f3bf 8f6f 	isb	sy
 80124e4:	f3bf 8f4f 	dsb	sy
 80124e8:	61fb      	str	r3, [r7, #28]
}
 80124ea:	bf00      	nop
 80124ec:	bf00      	nop
 80124ee:	e7fd      	b.n	80124ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80124f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d103      	bne.n	8012500 <xQueueGiveFromISR+0x5c>
 80124f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d101      	bne.n	8012504 <xQueueGiveFromISR+0x60>
 8012500:	2301      	movs	r3, #1
 8012502:	e000      	b.n	8012506 <xQueueGiveFromISR+0x62>
 8012504:	2300      	movs	r3, #0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d10b      	bne.n	8012522 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801250a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801250e:	f383 8811 	msr	BASEPRI, r3
 8012512:	f3bf 8f6f 	isb	sy
 8012516:	f3bf 8f4f 	dsb	sy
 801251a:	61bb      	str	r3, [r7, #24]
}
 801251c:	bf00      	nop
 801251e:	bf00      	nop
 8012520:	e7fd      	b.n	801251e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012522:	f001 fdc9 	bl	80140b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012526:	f3ef 8211 	mrs	r2, BASEPRI
 801252a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801252e:	f383 8811 	msr	BASEPRI, r3
 8012532:	f3bf 8f6f 	isb	sy
 8012536:	f3bf 8f4f 	dsb	sy
 801253a:	617a      	str	r2, [r7, #20]
 801253c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801253e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012540:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012546:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801254c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801254e:	429a      	cmp	r2, r3
 8012550:	d22b      	bcs.n	80125aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012554:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012562:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012564:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801256c:	d112      	bne.n	8012594 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012572:	2b00      	cmp	r3, #0
 8012574:	d016      	beq.n	80125a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012578:	3324      	adds	r3, #36	@ 0x24
 801257a:	4618      	mov	r0, r3
 801257c:	f000 ff86 	bl	801348c <xTaskRemoveFromEventList>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00e      	beq.n	80125a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d00b      	beq.n	80125a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2201      	movs	r2, #1
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	e007      	b.n	80125a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012598:	3301      	adds	r3, #1
 801259a:	b2db      	uxtb	r3, r3
 801259c:	b25a      	sxtb	r2, r3
 801259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80125a4:	2301      	movs	r3, #1
 80125a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80125a8:	e001      	b.n	80125ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80125aa:	2300      	movs	r3, #0
 80125ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80125ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125b0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80125b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80125ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3738      	adds	r7, #56	@ 0x38
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b08e      	sub	sp, #56	@ 0x38
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80125ce:	2300      	movs	r3, #0
 80125d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80125d6:	2300      	movs	r3, #0
 80125d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80125da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d10b      	bne.n	80125f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80125e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125e4:	f383 8811 	msr	BASEPRI, r3
 80125e8:	f3bf 8f6f 	isb	sy
 80125ec:	f3bf 8f4f 	dsb	sy
 80125f0:	623b      	str	r3, [r7, #32]
}
 80125f2:	bf00      	nop
 80125f4:	bf00      	nop
 80125f6:	e7fd      	b.n	80125f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80125f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d00b      	beq.n	8012618 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8012600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012604:	f383 8811 	msr	BASEPRI, r3
 8012608:	f3bf 8f6f 	isb	sy
 801260c:	f3bf 8f4f 	dsb	sy
 8012610:	61fb      	str	r3, [r7, #28]
}
 8012612:	bf00      	nop
 8012614:	bf00      	nop
 8012616:	e7fd      	b.n	8012614 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012618:	f001 f916 	bl	8013848 <xTaskGetSchedulerState>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d102      	bne.n	8012628 <xQueueSemaphoreTake+0x64>
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d101      	bne.n	801262c <xQueueSemaphoreTake+0x68>
 8012628:	2301      	movs	r3, #1
 801262a:	e000      	b.n	801262e <xQueueSemaphoreTake+0x6a>
 801262c:	2300      	movs	r3, #0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d10b      	bne.n	801264a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8012632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012636:	f383 8811 	msr	BASEPRI, r3
 801263a:	f3bf 8f6f 	isb	sy
 801263e:	f3bf 8f4f 	dsb	sy
 8012642:	61bb      	str	r3, [r7, #24]
}
 8012644:	bf00      	nop
 8012646:	bf00      	nop
 8012648:	e7fd      	b.n	8012646 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801264a:	f001 fc55 	bl	8013ef8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801264e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012652:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012656:	2b00      	cmp	r3, #0
 8012658:	d024      	beq.n	80126a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801265c:	1e5a      	subs	r2, r3, #1
 801265e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012660:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d104      	bne.n	8012674 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801266a:	f001 fa99 	bl	8013ba0 <pvTaskIncrementMutexHeldCount>
 801266e:	4602      	mov	r2, r0
 8012670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012672:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012676:	691b      	ldr	r3, [r3, #16]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00f      	beq.n	801269c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801267c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801267e:	3310      	adds	r3, #16
 8012680:	4618      	mov	r0, r3
 8012682:	f000 ff03 	bl	801348c <xTaskRemoveFromEventList>
 8012686:	4603      	mov	r3, r0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d007      	beq.n	801269c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801268c:	4b54      	ldr	r3, [pc, #336]	@ (80127e0 <xQueueSemaphoreTake+0x21c>)
 801268e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012692:	601a      	str	r2, [r3, #0]
 8012694:	f3bf 8f4f 	dsb	sy
 8012698:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801269c:	f001 fc5e 	bl	8013f5c <vPortExitCritical>
				return pdPASS;
 80126a0:	2301      	movs	r3, #1
 80126a2:	e098      	b.n	80127d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d112      	bne.n	80126d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80126aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d00b      	beq.n	80126c8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80126b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	617b      	str	r3, [r7, #20]
}
 80126c2:	bf00      	nop
 80126c4:	bf00      	nop
 80126c6:	e7fd      	b.n	80126c4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80126c8:	f001 fc48 	bl	8013f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80126cc:	2300      	movs	r3, #0
 80126ce:	e082      	b.n	80127d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80126d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d106      	bne.n	80126e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80126d6:	f107 030c 	add.w	r3, r7, #12
 80126da:	4618      	mov	r0, r3
 80126dc:	f000 ff3a 	bl	8013554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80126e0:	2301      	movs	r3, #1
 80126e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80126e4:	f001 fc3a 	bl	8013f5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80126e8:	f000 fce0 	bl	80130ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80126ec:	f001 fc04 	bl	8013ef8 <vPortEnterCritical>
 80126f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80126f6:	b25b      	sxtb	r3, r3
 80126f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126fc:	d103      	bne.n	8012706 <xQueueSemaphoreTake+0x142>
 80126fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012700:	2200      	movs	r2, #0
 8012702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012708:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801270c:	b25b      	sxtb	r3, r3
 801270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012712:	d103      	bne.n	801271c <xQueueSemaphoreTake+0x158>
 8012714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012716:	2200      	movs	r2, #0
 8012718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801271c:	f001 fc1e 	bl	8013f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012720:	463a      	mov	r2, r7
 8012722:	f107 030c 	add.w	r3, r7, #12
 8012726:	4611      	mov	r1, r2
 8012728:	4618      	mov	r0, r3
 801272a:	f000 ff29 	bl	8013580 <xTaskCheckForTimeOut>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d132      	bne.n	801279a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012734:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012736:	f000 f9f0 	bl	8012b1a <prvIsQueueEmpty>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d026      	beq.n	801278e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d109      	bne.n	801275c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012748:	f001 fbd6 	bl	8013ef8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	4618      	mov	r0, r3
 8012752:	f001 f897 	bl	8013884 <xTaskPriorityInherit>
 8012756:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012758:	f001 fc00 	bl	8013f5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801275c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801275e:	3324      	adds	r3, #36	@ 0x24
 8012760:	683a      	ldr	r2, [r7, #0]
 8012762:	4611      	mov	r1, r2
 8012764:	4618      	mov	r0, r3
 8012766:	f000 fe6b 	bl	8013440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801276a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801276c:	f000 f983 	bl	8012a76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012770:	f000 fcaa 	bl	80130c8 <xTaskResumeAll>
 8012774:	4603      	mov	r3, r0
 8012776:	2b00      	cmp	r3, #0
 8012778:	f47f af67 	bne.w	801264a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801277c:	4b18      	ldr	r3, [pc, #96]	@ (80127e0 <xQueueSemaphoreTake+0x21c>)
 801277e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	f3bf 8f4f 	dsb	sy
 8012788:	f3bf 8f6f 	isb	sy
 801278c:	e75d      	b.n	801264a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801278e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012790:	f000 f971 	bl	8012a76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012794:	f000 fc98 	bl	80130c8 <xTaskResumeAll>
 8012798:	e757      	b.n	801264a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801279a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801279c:	f000 f96b 	bl	8012a76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80127a0:	f000 fc92 	bl	80130c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80127a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127a6:	f000 f9b8 	bl	8012b1a <prvIsQueueEmpty>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f43f af4c 	beq.w	801264a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80127b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d00d      	beq.n	80127d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80127b8:	f001 fb9e 	bl	8013ef8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80127bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127be:	f000 f8b2 	bl	8012926 <prvGetDisinheritPriorityAfterTimeout>
 80127c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80127c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127c6:	689b      	ldr	r3, [r3, #8]
 80127c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80127ca:	4618      	mov	r0, r3
 80127cc:	f001 f958 	bl	8013a80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80127d0:	f001 fbc4 	bl	8013f5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80127d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3738      	adds	r7, #56	@ 0x38
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	e000ed04 	.word	0xe000ed04

080127e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b08e      	sub	sp, #56	@ 0x38
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80127f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d10b      	bne.n	8012812 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80127fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127fe:	f383 8811 	msr	BASEPRI, r3
 8012802:	f3bf 8f6f 	isb	sy
 8012806:	f3bf 8f4f 	dsb	sy
 801280a:	623b      	str	r3, [r7, #32]
}
 801280c:	bf00      	nop
 801280e:	bf00      	nop
 8012810:	e7fd      	b.n	801280e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d103      	bne.n	8012820 <xQueueReceiveFromISR+0x3c>
 8012818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801281c:	2b00      	cmp	r3, #0
 801281e:	d101      	bne.n	8012824 <xQueueReceiveFromISR+0x40>
 8012820:	2301      	movs	r3, #1
 8012822:	e000      	b.n	8012826 <xQueueReceiveFromISR+0x42>
 8012824:	2300      	movs	r3, #0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d10b      	bne.n	8012842 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801282a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801282e:	f383 8811 	msr	BASEPRI, r3
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	f3bf 8f4f 	dsb	sy
 801283a:	61fb      	str	r3, [r7, #28]
}
 801283c:	bf00      	nop
 801283e:	bf00      	nop
 8012840:	e7fd      	b.n	801283e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012842:	f001 fc39 	bl	80140b8 <vPortValidateInterruptPriority>
	__asm volatile
 8012846:	f3ef 8211 	mrs	r2, BASEPRI
 801284a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801284e:	f383 8811 	msr	BASEPRI, r3
 8012852:	f3bf 8f6f 	isb	sy
 8012856:	f3bf 8f4f 	dsb	sy
 801285a:	61ba      	str	r2, [r7, #24]
 801285c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801285e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012860:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012866:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801286a:	2b00      	cmp	r3, #0
 801286c:	d02f      	beq.n	80128ce <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012878:	68b9      	ldr	r1, [r7, #8]
 801287a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801287c:	f000 f8d5 	bl	8012a2a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012882:	1e5a      	subs	r2, r3, #1
 8012884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012886:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012888:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012890:	d112      	bne.n	80128b8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012894:	691b      	ldr	r3, [r3, #16]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d016      	beq.n	80128c8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801289c:	3310      	adds	r3, #16
 801289e:	4618      	mov	r0, r3
 80128a0:	f000 fdf4 	bl	801348c <xTaskRemoveFromEventList>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00e      	beq.n	80128c8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00b      	beq.n	80128c8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2201      	movs	r2, #1
 80128b4:	601a      	str	r2, [r3, #0]
 80128b6:	e007      	b.n	80128c8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80128b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128bc:	3301      	adds	r3, #1
 80128be:	b2db      	uxtb	r3, r3
 80128c0:	b25a      	sxtb	r2, r3
 80128c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80128c8:	2301      	movs	r3, #1
 80128ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80128cc:	e001      	b.n	80128d2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80128ce:	2300      	movs	r3, #0
 80128d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80128d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	f383 8811 	msr	BASEPRI, r3
}
 80128dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80128de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3738      	adds	r7, #56	@ 0x38
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10b      	bne.n	8012912 <vQueueDelete+0x2a>
	__asm volatile
 80128fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128fe:	f383 8811 	msr	BASEPRI, r3
 8012902:	f3bf 8f6f 	isb	sy
 8012906:	f3bf 8f4f 	dsb	sy
 801290a:	60bb      	str	r3, [r7, #8]
}
 801290c:	bf00      	nop
 801290e:	bf00      	nop
 8012910:	e7fd      	b.n	801290e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012912:	68f8      	ldr	r0, [r7, #12]
 8012914:	f000 f930 	bl	8012b78 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f001 fcdd 	bl	80142d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801291e:	bf00      	nop
 8012920:	3710      	adds	r7, #16
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}

08012926 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012926:	b480      	push	{r7}
 8012928:	b085      	sub	sp, #20
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012932:	2b00      	cmp	r3, #0
 8012934:	d006      	beq.n	8012944 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	f1c3 0307 	rsb	r3, r3, #7
 8012940:	60fb      	str	r3, [r7, #12]
 8012942:	e001      	b.n	8012948 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012944:	2300      	movs	r3, #0
 8012946:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012948:	68fb      	ldr	r3, [r7, #12]
	}
 801294a:	4618      	mov	r0, r3
 801294c:	3714      	adds	r7, #20
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr

08012956 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012956:	b580      	push	{r7, lr}
 8012958:	b086      	sub	sp, #24
 801295a:	af00      	add	r7, sp, #0
 801295c:	60f8      	str	r0, [r7, #12]
 801295e:	60b9      	str	r1, [r7, #8]
 8012960:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012962:	2300      	movs	r3, #0
 8012964:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801296a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10d      	bne.n	8012990 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d14d      	bne.n	8012a18 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	689b      	ldr	r3, [r3, #8]
 8012980:	4618      	mov	r0, r3
 8012982:	f000 fff5 	bl	8013970 <xTaskPriorityDisinherit>
 8012986:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	2200      	movs	r2, #0
 801298c:	609a      	str	r2, [r3, #8]
 801298e:	e043      	b.n	8012a18 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d119      	bne.n	80129ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	6858      	ldr	r0, [r3, #4]
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801299e:	461a      	mov	r2, r3
 80129a0:	68b9      	ldr	r1, [r7, #8]
 80129a2:	f002 ff4a 	bl	801583a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	685a      	ldr	r2, [r3, #4]
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129ae:	441a      	add	r2, r3
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	685a      	ldr	r2, [r3, #4]
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	689b      	ldr	r3, [r3, #8]
 80129bc:	429a      	cmp	r2, r3
 80129be:	d32b      	bcc.n	8012a18 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	605a      	str	r2, [r3, #4]
 80129c8:	e026      	b.n	8012a18 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	68d8      	ldr	r0, [r3, #12]
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129d2:	461a      	mov	r2, r3
 80129d4:	68b9      	ldr	r1, [r7, #8]
 80129d6:	f002 ff30 	bl	801583a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	68da      	ldr	r2, [r3, #12]
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129e2:	425b      	negs	r3, r3
 80129e4:	441a      	add	r2, r3
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	68da      	ldr	r2, [r3, #12]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d207      	bcs.n	8012a06 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	689a      	ldr	r2, [r3, #8]
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129fe:	425b      	negs	r3, r3
 8012a00:	441a      	add	r2, r3
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2b02      	cmp	r3, #2
 8012a0a:	d105      	bne.n	8012a18 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d002      	beq.n	8012a18 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	3b01      	subs	r3, #1
 8012a16:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	1c5a      	adds	r2, r3, #1
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012a20:	697b      	ldr	r3, [r7, #20]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}

08012a2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012a2a:	b580      	push	{r7, lr}
 8012a2c:	b082      	sub	sp, #8
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
 8012a32:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d018      	beq.n	8012a6e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	68da      	ldr	r2, [r3, #12]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a44:	441a      	add	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	68da      	ldr	r2, [r3, #12]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	689b      	ldr	r3, [r3, #8]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d303      	bcc.n	8012a5e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	68d9      	ldr	r1, [r3, #12]
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a66:	461a      	mov	r2, r3
 8012a68:	6838      	ldr	r0, [r7, #0]
 8012a6a:	f002 fee6 	bl	801583a <memcpy>
	}
}
 8012a6e:	bf00      	nop
 8012a70:	3708      	adds	r7, #8
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}

08012a76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012a76:	b580      	push	{r7, lr}
 8012a78:	b084      	sub	sp, #16
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012a7e:	f001 fa3b 	bl	8013ef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012a88:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012a8a:	e011      	b.n	8012ab0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d012      	beq.n	8012aba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	3324      	adds	r3, #36	@ 0x24
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f000 fcf7 	bl	801348c <xTaskRemoveFromEventList>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d001      	beq.n	8012aa8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012aa4:	f000 fdd0 	bl	8013648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012aa8:	7bfb      	ldrb	r3, [r7, #15]
 8012aaa:	3b01      	subs	r3, #1
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	dce9      	bgt.n	8012a8c <prvUnlockQueue+0x16>
 8012ab8:	e000      	b.n	8012abc <prvUnlockQueue+0x46>
					break;
 8012aba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	22ff      	movs	r2, #255	@ 0xff
 8012ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012ac4:	f001 fa4a 	bl	8013f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012ac8:	f001 fa16 	bl	8013ef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012ad2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ad4:	e011      	b.n	8012afa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	691b      	ldr	r3, [r3, #16]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d012      	beq.n	8012b04 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	3310      	adds	r3, #16
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f000 fcd2 	bl	801348c <xTaskRemoveFromEventList>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d001      	beq.n	8012af2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012aee:	f000 fdab 	bl	8013648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012af2:	7bbb      	ldrb	r3, [r7, #14]
 8012af4:	3b01      	subs	r3, #1
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012afa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	dce9      	bgt.n	8012ad6 <prvUnlockQueue+0x60>
 8012b02:	e000      	b.n	8012b06 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012b04:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	22ff      	movs	r2, #255	@ 0xff
 8012b0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8012b0e:	f001 fa25 	bl	8013f5c <vPortExitCritical>
}
 8012b12:	bf00      	nop
 8012b14:	3710      	adds	r7, #16
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}

08012b1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b084      	sub	sp, #16
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012b22:	f001 f9e9 	bl	8013ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d102      	bne.n	8012b34 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012b2e:	2301      	movs	r3, #1
 8012b30:	60fb      	str	r3, [r7, #12]
 8012b32:	e001      	b.n	8012b38 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012b34:	2300      	movs	r3, #0
 8012b36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012b38:	f001 fa10 	bl	8013f5c <vPortExitCritical>

	return xReturn;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3710      	adds	r7, #16
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012b46:	b580      	push	{r7, lr}
 8012b48:	b084      	sub	sp, #16
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012b4e:	f001 f9d3 	bl	8013ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d102      	bne.n	8012b64 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	60fb      	str	r3, [r7, #12]
 8012b62:	e001      	b.n	8012b68 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012b64:	2300      	movs	r3, #0
 8012b66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012b68:	f001 f9f8 	bl	8013f5c <vPortExitCritical>

	return xReturn;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3710      	adds	r7, #16
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
	...

08012b78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012b78:	b480      	push	{r7}
 8012b7a:	b085      	sub	sp, #20
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012b80:	2300      	movs	r3, #0
 8012b82:	60fb      	str	r3, [r7, #12]
 8012b84:	e016      	b.n	8012bb4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012b86:	4a10      	ldr	r2, [pc, #64]	@ (8012bc8 <vQueueUnregisterQueue+0x50>)
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	00db      	lsls	r3, r3, #3
 8012b8c:	4413      	add	r3, r2
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d10b      	bne.n	8012bae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012b96:	4a0c      	ldr	r2, [pc, #48]	@ (8012bc8 <vQueueUnregisterQueue+0x50>)
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012ba0:	4a09      	ldr	r2, [pc, #36]	@ (8012bc8 <vQueueUnregisterQueue+0x50>)
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	00db      	lsls	r3, r3, #3
 8012ba6:	4413      	add	r3, r2
 8012ba8:	2200      	movs	r2, #0
 8012baa:	605a      	str	r2, [r3, #4]
				break;
 8012bac:	e006      	b.n	8012bbc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	60fb      	str	r3, [r7, #12]
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	2b07      	cmp	r3, #7
 8012bb8:	d9e5      	bls.n	8012b86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012bba:	bf00      	nop
 8012bbc:	bf00      	nop
 8012bbe:	3714      	adds	r7, #20
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr
 8012bc8:	200017b4 	.word	0x200017b4

08012bcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b08c      	sub	sp, #48	@ 0x30
 8012bd0:	af04      	add	r7, sp, #16
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	603b      	str	r3, [r7, #0]
 8012bd8:	4613      	mov	r3, r2
 8012bda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012bdc:	88fb      	ldrh	r3, [r7, #6]
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	4618      	mov	r0, r3
 8012be2:	f001 faab 	bl	801413c <pvPortMalloc>
 8012be6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d00e      	beq.n	8012c0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012bee:	20a0      	movs	r0, #160	@ 0xa0
 8012bf0:	f001 faa4 	bl	801413c <pvPortMalloc>
 8012bf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d003      	beq.n	8012c04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	697a      	ldr	r2, [r7, #20]
 8012c00:	631a      	str	r2, [r3, #48]	@ 0x30
 8012c02:	e005      	b.n	8012c10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012c04:	6978      	ldr	r0, [r7, #20]
 8012c06:	f001 fb67 	bl	80142d8 <vPortFree>
 8012c0a:	e001      	b.n	8012c10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d013      	beq.n	8012c3e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012c16:	88fa      	ldrh	r2, [r7, #6]
 8012c18:	2300      	movs	r3, #0
 8012c1a:	9303      	str	r3, [sp, #12]
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	9302      	str	r3, [sp, #8]
 8012c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c22:	9301      	str	r3, [sp, #4]
 8012c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	68b9      	ldr	r1, [r7, #8]
 8012c2c:	68f8      	ldr	r0, [r7, #12]
 8012c2e:	f000 f80f 	bl	8012c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c32:	69f8      	ldr	r0, [r7, #28]
 8012c34:	f000 f8b4 	bl	8012da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	61bb      	str	r3, [r7, #24]
 8012c3c:	e002      	b.n	8012c44 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012c44:	69bb      	ldr	r3, [r7, #24]
	}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3720      	adds	r7, #32
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
	...

08012c50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b088      	sub	sp, #32
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	60f8      	str	r0, [r7, #12]
 8012c58:	60b9      	str	r1, [r7, #8]
 8012c5a:	607a      	str	r2, [r7, #4]
 8012c5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	461a      	mov	r2, r3
 8012c68:	21a5      	movs	r1, #165	@ 0xa5
 8012c6a:	f002 fd09 	bl	8015680 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c78:	3b01      	subs	r3, #1
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	4413      	add	r3, r2
 8012c7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	f023 0307 	bic.w	r3, r3, #7
 8012c86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012c88:	69bb      	ldr	r3, [r7, #24]
 8012c8a:	f003 0307 	and.w	r3, r3, #7
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d00b      	beq.n	8012caa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8012c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c96:	f383 8811 	msr	BASEPRI, r3
 8012c9a:	f3bf 8f6f 	isb	sy
 8012c9e:	f3bf 8f4f 	dsb	sy
 8012ca2:	617b      	str	r3, [r7, #20]
}
 8012ca4:	bf00      	nop
 8012ca6:	bf00      	nop
 8012ca8:	e7fd      	b.n	8012ca6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d01f      	beq.n	8012cf0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	61fb      	str	r3, [r7, #28]
 8012cb4:	e012      	b.n	8012cdc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	4413      	add	r3, r2
 8012cbc:	7819      	ldrb	r1, [r3, #0]
 8012cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012cc0:	69fb      	ldr	r3, [r7, #28]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	3334      	adds	r3, #52	@ 0x34
 8012cc6:	460a      	mov	r2, r1
 8012cc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012cca:	68ba      	ldr	r2, [r7, #8]
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	4413      	add	r3, r2
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d006      	beq.n	8012ce4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	61fb      	str	r3, [r7, #28]
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	2b0f      	cmp	r3, #15
 8012ce0:	d9e9      	bls.n	8012cb6 <prvInitialiseNewTask+0x66>
 8012ce2:	e000      	b.n	8012ce6 <prvInitialiseNewTask+0x96>
			{
				break;
 8012ce4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ce8:	2200      	movs	r2, #0
 8012cea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012cee:	e003      	b.n	8012cf8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cfa:	2b06      	cmp	r3, #6
 8012cfc:	d901      	bls.n	8012d02 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012cfe:	2306      	movs	r3, #6
 8012d00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d0c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d10:	2200      	movs	r2, #0
 8012d12:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d16:	3304      	adds	r3, #4
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7ff f93a 	bl	8011f92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d20:	3318      	adds	r3, #24
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ff f935 	bl	8011f92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d30:	f1c3 0207 	rsb	r2, r3, #7
 8012d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d40:	2200      	movs	r2, #0
 8012d42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d48:	2200      	movs	r2, #0
 8012d4a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d50:	334c      	adds	r3, #76	@ 0x4c
 8012d52:	224c      	movs	r2, #76	@ 0x4c
 8012d54:	2100      	movs	r1, #0
 8012d56:	4618      	mov	r0, r3
 8012d58:	f002 fc92 	bl	8015680 <memset>
 8012d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8012d94 <prvInitialiseNewTask+0x144>)
 8012d60:	651a      	str	r2, [r3, #80]	@ 0x50
 8012d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d64:	4a0c      	ldr	r2, [pc, #48]	@ (8012d98 <prvInitialiseNewTask+0x148>)
 8012d66:	655a      	str	r2, [r3, #84]	@ 0x54
 8012d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8012d9c <prvInitialiseNewTask+0x14c>)
 8012d6c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012d6e:	683a      	ldr	r2, [r7, #0]
 8012d70:	68f9      	ldr	r1, [r7, #12]
 8012d72:	69b8      	ldr	r0, [r7, #24]
 8012d74:	f000 ff8e 	bl	8013c94 <pxPortInitialiseStack>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d002      	beq.n	8012d8a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d8a:	bf00      	nop
 8012d8c:	3720      	adds	r7, #32
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	20004828 	.word	0x20004828
 8012d98:	20004890 	.word	0x20004890
 8012d9c:	200048f8 	.word	0x200048f8

08012da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012da8:	f001 f8a6 	bl	8013ef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012dac:	4b2a      	ldr	r3, [pc, #168]	@ (8012e58 <prvAddNewTaskToReadyList+0xb8>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	3301      	adds	r3, #1
 8012db2:	4a29      	ldr	r2, [pc, #164]	@ (8012e58 <prvAddNewTaskToReadyList+0xb8>)
 8012db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012db6:	4b29      	ldr	r3, [pc, #164]	@ (8012e5c <prvAddNewTaskToReadyList+0xbc>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d109      	bne.n	8012dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012dbe:	4a27      	ldr	r2, [pc, #156]	@ (8012e5c <prvAddNewTaskToReadyList+0xbc>)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012dc4:	4b24      	ldr	r3, [pc, #144]	@ (8012e58 <prvAddNewTaskToReadyList+0xb8>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d110      	bne.n	8012dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012dcc:	f000 fc60 	bl	8013690 <prvInitialiseTaskLists>
 8012dd0:	e00d      	b.n	8012dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012dd2:	4b23      	ldr	r3, [pc, #140]	@ (8012e60 <prvAddNewTaskToReadyList+0xc0>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d109      	bne.n	8012dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012dda:	4b20      	ldr	r3, [pc, #128]	@ (8012e5c <prvAddNewTaskToReadyList+0xbc>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d802      	bhi.n	8012dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012de8:	4a1c      	ldr	r2, [pc, #112]	@ (8012e5c <prvAddNewTaskToReadyList+0xbc>)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012dee:	4b1d      	ldr	r3, [pc, #116]	@ (8012e64 <prvAddNewTaskToReadyList+0xc4>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	3301      	adds	r3, #1
 8012df4:	4a1b      	ldr	r2, [pc, #108]	@ (8012e64 <prvAddNewTaskToReadyList+0xc4>)
 8012df6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	409a      	lsls	r2, r3
 8012e00:	4b19      	ldr	r3, [pc, #100]	@ (8012e68 <prvAddNewTaskToReadyList+0xc8>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4313      	orrs	r3, r2
 8012e06:	4a18      	ldr	r2, [pc, #96]	@ (8012e68 <prvAddNewTaskToReadyList+0xc8>)
 8012e08:	6013      	str	r3, [r2, #0]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e0e:	4613      	mov	r3, r2
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	4413      	add	r3, r2
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	4a15      	ldr	r2, [pc, #84]	@ (8012e6c <prvAddNewTaskToReadyList+0xcc>)
 8012e18:	441a      	add	r2, r3
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	3304      	adds	r3, #4
 8012e1e:	4619      	mov	r1, r3
 8012e20:	4610      	mov	r0, r2
 8012e22:	f7ff f8c3 	bl	8011fac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012e26:	f001 f899 	bl	8013f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012e60 <prvAddNewTaskToReadyList+0xc0>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d00e      	beq.n	8012e50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012e32:	4b0a      	ldr	r3, [pc, #40]	@ (8012e5c <prvAddNewTaskToReadyList+0xbc>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d207      	bcs.n	8012e50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012e40:	4b0b      	ldr	r3, [pc, #44]	@ (8012e70 <prvAddNewTaskToReadyList+0xd0>)
 8012e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e46:	601a      	str	r2, [r3, #0]
 8012e48:	f3bf 8f4f 	dsb	sy
 8012e4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e50:	bf00      	nop
 8012e52:	3708      	adds	r7, #8
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}
 8012e58:	200018f4 	.word	0x200018f4
 8012e5c:	200017f4 	.word	0x200017f4
 8012e60:	20001900 	.word	0x20001900
 8012e64:	20001910 	.word	0x20001910
 8012e68:	200018fc 	.word	0x200018fc
 8012e6c:	200017f8 	.word	0x200017f8
 8012e70:	e000ed04 	.word	0xe000ed04

08012e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d018      	beq.n	8012eb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012e86:	4b14      	ldr	r3, [pc, #80]	@ (8012ed8 <vTaskDelay+0x64>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d00b      	beq.n	8012ea6 <vTaskDelay+0x32>
	__asm volatile
 8012e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e92:	f383 8811 	msr	BASEPRI, r3
 8012e96:	f3bf 8f6f 	isb	sy
 8012e9a:	f3bf 8f4f 	dsb	sy
 8012e9e:	60bb      	str	r3, [r7, #8]
}
 8012ea0:	bf00      	nop
 8012ea2:	bf00      	nop
 8012ea4:	e7fd      	b.n	8012ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012ea6:	f000 f901 	bl	80130ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012eaa:	2100      	movs	r1, #0
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 fe8b 	bl	8013bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012eb2:	f000 f909 	bl	80130c8 <xTaskResumeAll>
 8012eb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d107      	bne.n	8012ece <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012ebe:	4b07      	ldr	r3, [pc, #28]	@ (8012edc <vTaskDelay+0x68>)
 8012ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ec4:	601a      	str	r2, [r3, #0]
 8012ec6:	f3bf 8f4f 	dsb	sy
 8012eca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012ece:	bf00      	nop
 8012ed0:	3710      	adds	r7, #16
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	2000191c 	.word	0x2000191c
 8012edc:	e000ed04 	.word	0xe000ed04

08012ee0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012ee8:	f001 f806 	bl	8013ef8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d102      	bne.n	8012ef8 <vTaskSuspend+0x18>
 8012ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8012fe8 <vTaskSuspend+0x108>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	e000      	b.n	8012efa <vTaskSuspend+0x1a>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	3304      	adds	r3, #4
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7ff f8b0 	bl	8012066 <uxListRemove>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d115      	bne.n	8012f38 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f10:	4936      	ldr	r1, [pc, #216]	@ (8012fec <vTaskSuspend+0x10c>)
 8012f12:	4613      	mov	r3, r2
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	4413      	add	r3, r2
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	440b      	add	r3, r1
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d10a      	bne.n	8012f38 <vTaskSuspend+0x58>
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f26:	2201      	movs	r2, #1
 8012f28:	fa02 f303 	lsl.w	r3, r2, r3
 8012f2c:	43da      	mvns	r2, r3
 8012f2e:	4b30      	ldr	r3, [pc, #192]	@ (8012ff0 <vTaskSuspend+0x110>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4013      	ands	r3, r2
 8012f34:	4a2e      	ldr	r2, [pc, #184]	@ (8012ff0 <vTaskSuspend+0x110>)
 8012f36:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d004      	beq.n	8012f4a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	3318      	adds	r3, #24
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff f88e 	bl	8012066 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	4619      	mov	r1, r3
 8012f50:	4828      	ldr	r0, [pc, #160]	@ (8012ff4 <vTaskSuspend+0x114>)
 8012f52:	f7ff f82b 	bl	8011fac <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	d103      	bne.n	8012f6a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	2200      	movs	r2, #0
 8012f66:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012f6a:	f000 fff7 	bl	8013f5c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012f6e:	4b22      	ldr	r3, [pc, #136]	@ (8012ff8 <vTaskSuspend+0x118>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d005      	beq.n	8012f82 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012f76:	f000 ffbf 	bl	8013ef8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012f7a:	f000 fc45 	bl	8013808 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012f7e:	f000 ffed 	bl	8013f5c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012f82:	4b19      	ldr	r3, [pc, #100]	@ (8012fe8 <vTaskSuspend+0x108>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	68fa      	ldr	r2, [r7, #12]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d128      	bne.n	8012fde <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8012f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8012ff8 <vTaskSuspend+0x118>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d018      	beq.n	8012fc6 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012f94:	4b19      	ldr	r3, [pc, #100]	@ (8012ffc <vTaskSuspend+0x11c>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d00b      	beq.n	8012fb4 <vTaskSuspend+0xd4>
	__asm volatile
 8012f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fa0:	f383 8811 	msr	BASEPRI, r3
 8012fa4:	f3bf 8f6f 	isb	sy
 8012fa8:	f3bf 8f4f 	dsb	sy
 8012fac:	60bb      	str	r3, [r7, #8]
}
 8012fae:	bf00      	nop
 8012fb0:	bf00      	nop
 8012fb2:	e7fd      	b.n	8012fb0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8012fb4:	4b12      	ldr	r3, [pc, #72]	@ (8013000 <vTaskSuspend+0x120>)
 8012fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fba:	601a      	str	r2, [r3, #0]
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012fc4:	e00b      	b.n	8012fde <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8012ff4 <vTaskSuspend+0x114>)
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	4b0e      	ldr	r3, [pc, #56]	@ (8013004 <vTaskSuspend+0x124>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d103      	bne.n	8012fda <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8012fd2:	4b05      	ldr	r3, [pc, #20]	@ (8012fe8 <vTaskSuspend+0x108>)
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	601a      	str	r2, [r3, #0]
	}
 8012fd8:	e001      	b.n	8012fde <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8012fda:	f000 f9cd 	bl	8013378 <vTaskSwitchContext>
	}
 8012fde:	bf00      	nop
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	200017f4 	.word	0x200017f4
 8012fec:	200017f8 	.word	0x200017f8
 8012ff0:	200018fc 	.word	0x200018fc
 8012ff4:	200018e0 	.word	0x200018e0
 8012ff8:	20001900 	.word	0x20001900
 8012ffc:	2000191c 	.word	0x2000191c
 8013000:	e000ed04 	.word	0xe000ed04
 8013004:	200018f4 	.word	0x200018f4

08013008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b086      	sub	sp, #24
 801300c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801300e:	4b1f      	ldr	r3, [pc, #124]	@ (801308c <vTaskStartScheduler+0x84>)
 8013010:	9301      	str	r3, [sp, #4]
 8013012:	2300      	movs	r3, #0
 8013014:	9300      	str	r3, [sp, #0]
 8013016:	2300      	movs	r3, #0
 8013018:	2280      	movs	r2, #128	@ 0x80
 801301a:	491d      	ldr	r1, [pc, #116]	@ (8013090 <vTaskStartScheduler+0x88>)
 801301c:	481d      	ldr	r0, [pc, #116]	@ (8013094 <vTaskStartScheduler+0x8c>)
 801301e:	f7ff fdd5 	bl	8012bcc <xTaskCreate>
 8013022:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2b01      	cmp	r3, #1
 8013028:	d11b      	bne.n	8013062 <vTaskStartScheduler+0x5a>
	__asm volatile
 801302a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801302e:	f383 8811 	msr	BASEPRI, r3
 8013032:	f3bf 8f6f 	isb	sy
 8013036:	f3bf 8f4f 	dsb	sy
 801303a:	60bb      	str	r3, [r7, #8]
}
 801303c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801303e:	4b16      	ldr	r3, [pc, #88]	@ (8013098 <vTaskStartScheduler+0x90>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	334c      	adds	r3, #76	@ 0x4c
 8013044:	4a15      	ldr	r2, [pc, #84]	@ (801309c <vTaskStartScheduler+0x94>)
 8013046:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013048:	4b15      	ldr	r3, [pc, #84]	@ (80130a0 <vTaskStartScheduler+0x98>)
 801304a:	f04f 32ff 	mov.w	r2, #4294967295
 801304e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013050:	4b14      	ldr	r3, [pc, #80]	@ (80130a4 <vTaskStartScheduler+0x9c>)
 8013052:	2201      	movs	r2, #1
 8013054:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013056:	4b14      	ldr	r3, [pc, #80]	@ (80130a8 <vTaskStartScheduler+0xa0>)
 8013058:	2200      	movs	r2, #0
 801305a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801305c:	f000 fea8 	bl	8013db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013060:	e00f      	b.n	8013082 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013068:	d10b      	bne.n	8013082 <vTaskStartScheduler+0x7a>
	__asm volatile
 801306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801306e:	f383 8811 	msr	BASEPRI, r3
 8013072:	f3bf 8f6f 	isb	sy
 8013076:	f3bf 8f4f 	dsb	sy
 801307a:	607b      	str	r3, [r7, #4]
}
 801307c:	bf00      	nop
 801307e:	bf00      	nop
 8013080:	e7fd      	b.n	801307e <vTaskStartScheduler+0x76>
}
 8013082:	bf00      	nop
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	20001918 	.word	0x20001918
 8013090:	0801a898 	.word	0x0801a898
 8013094:	08013661 	.word	0x08013661
 8013098:	200017f4 	.word	0x200017f4
 801309c:	20000058 	.word	0x20000058
 80130a0:	20001914 	.word	0x20001914
 80130a4:	20001900 	.word	0x20001900
 80130a8:	200018f8 	.word	0x200018f8

080130ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80130ac:	b480      	push	{r7}
 80130ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80130b0:	4b04      	ldr	r3, [pc, #16]	@ (80130c4 <vTaskSuspendAll+0x18>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	3301      	adds	r3, #1
 80130b6:	4a03      	ldr	r2, [pc, #12]	@ (80130c4 <vTaskSuspendAll+0x18>)
 80130b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80130ba:	bf00      	nop
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr
 80130c4:	2000191c 	.word	0x2000191c

080130c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80130ce:	2300      	movs	r3, #0
 80130d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80130d2:	2300      	movs	r3, #0
 80130d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80130d6:	4b42      	ldr	r3, [pc, #264]	@ (80131e0 <xTaskResumeAll+0x118>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d10b      	bne.n	80130f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80130de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	603b      	str	r3, [r7, #0]
}
 80130f0:	bf00      	nop
 80130f2:	bf00      	nop
 80130f4:	e7fd      	b.n	80130f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80130f6:	f000 feff 	bl	8013ef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80130fa:	4b39      	ldr	r3, [pc, #228]	@ (80131e0 <xTaskResumeAll+0x118>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	3b01      	subs	r3, #1
 8013100:	4a37      	ldr	r2, [pc, #220]	@ (80131e0 <xTaskResumeAll+0x118>)
 8013102:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013104:	4b36      	ldr	r3, [pc, #216]	@ (80131e0 <xTaskResumeAll+0x118>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d161      	bne.n	80131d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801310c:	4b35      	ldr	r3, [pc, #212]	@ (80131e4 <xTaskResumeAll+0x11c>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d05d      	beq.n	80131d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013114:	e02e      	b.n	8013174 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013116:	4b34      	ldr	r3, [pc, #208]	@ (80131e8 <xTaskResumeAll+0x120>)
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	68db      	ldr	r3, [r3, #12]
 801311c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	3318      	adds	r3, #24
 8013122:	4618      	mov	r0, r3
 8013124:	f7fe ff9f 	bl	8012066 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	3304      	adds	r3, #4
 801312c:	4618      	mov	r0, r3
 801312e:	f7fe ff9a 	bl	8012066 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013136:	2201      	movs	r2, #1
 8013138:	409a      	lsls	r2, r3
 801313a:	4b2c      	ldr	r3, [pc, #176]	@ (80131ec <xTaskResumeAll+0x124>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	4313      	orrs	r3, r2
 8013140:	4a2a      	ldr	r2, [pc, #168]	@ (80131ec <xTaskResumeAll+0x124>)
 8013142:	6013      	str	r3, [r2, #0]
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013148:	4613      	mov	r3, r2
 801314a:	009b      	lsls	r3, r3, #2
 801314c:	4413      	add	r3, r2
 801314e:	009b      	lsls	r3, r3, #2
 8013150:	4a27      	ldr	r2, [pc, #156]	@ (80131f0 <xTaskResumeAll+0x128>)
 8013152:	441a      	add	r2, r3
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	3304      	adds	r3, #4
 8013158:	4619      	mov	r1, r3
 801315a:	4610      	mov	r0, r2
 801315c:	f7fe ff26 	bl	8011fac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013164:	4b23      	ldr	r3, [pc, #140]	@ (80131f4 <xTaskResumeAll+0x12c>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801316a:	429a      	cmp	r2, r3
 801316c:	d302      	bcc.n	8013174 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801316e:	4b22      	ldr	r3, [pc, #136]	@ (80131f8 <xTaskResumeAll+0x130>)
 8013170:	2201      	movs	r2, #1
 8013172:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013174:	4b1c      	ldr	r3, [pc, #112]	@ (80131e8 <xTaskResumeAll+0x120>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d1cc      	bne.n	8013116 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013182:	f000 fb41 	bl	8013808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013186:	4b1d      	ldr	r3, [pc, #116]	@ (80131fc <xTaskResumeAll+0x134>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d010      	beq.n	80131b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013192:	f000 f837 	bl	8013204 <xTaskIncrementTick>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d002      	beq.n	80131a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801319c:	4b16      	ldr	r3, [pc, #88]	@ (80131f8 <xTaskResumeAll+0x130>)
 801319e:	2201      	movs	r2, #1
 80131a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	3b01      	subs	r3, #1
 80131a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d1f1      	bne.n	8013192 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80131ae:	4b13      	ldr	r3, [pc, #76]	@ (80131fc <xTaskResumeAll+0x134>)
 80131b0:	2200      	movs	r2, #0
 80131b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80131b4:	4b10      	ldr	r3, [pc, #64]	@ (80131f8 <xTaskResumeAll+0x130>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d009      	beq.n	80131d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80131bc:	2301      	movs	r3, #1
 80131be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80131c0:	4b0f      	ldr	r3, [pc, #60]	@ (8013200 <xTaskResumeAll+0x138>)
 80131c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131c6:	601a      	str	r2, [r3, #0]
 80131c8:	f3bf 8f4f 	dsb	sy
 80131cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80131d0:	f000 fec4 	bl	8013f5c <vPortExitCritical>

	return xAlreadyYielded;
 80131d4:	68bb      	ldr	r3, [r7, #8]
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3710      	adds	r7, #16
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	2000191c 	.word	0x2000191c
 80131e4:	200018f4 	.word	0x200018f4
 80131e8:	200018b4 	.word	0x200018b4
 80131ec:	200018fc 	.word	0x200018fc
 80131f0:	200017f8 	.word	0x200017f8
 80131f4:	200017f4 	.word	0x200017f4
 80131f8:	20001908 	.word	0x20001908
 80131fc:	20001904 	.word	0x20001904
 8013200:	e000ed04 	.word	0xe000ed04

08013204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b086      	sub	sp, #24
 8013208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801320a:	2300      	movs	r3, #0
 801320c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801320e:	4b4f      	ldr	r3, [pc, #316]	@ (801334c <xTaskIncrementTick+0x148>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	f040 808f 	bne.w	8013336 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013218:	4b4d      	ldr	r3, [pc, #308]	@ (8013350 <xTaskIncrementTick+0x14c>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	3301      	adds	r3, #1
 801321e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013220:	4a4b      	ldr	r2, [pc, #300]	@ (8013350 <xTaskIncrementTick+0x14c>)
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d121      	bne.n	8013270 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801322c:	4b49      	ldr	r3, [pc, #292]	@ (8013354 <xTaskIncrementTick+0x150>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d00b      	beq.n	801324e <xTaskIncrementTick+0x4a>
	__asm volatile
 8013236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801323a:	f383 8811 	msr	BASEPRI, r3
 801323e:	f3bf 8f6f 	isb	sy
 8013242:	f3bf 8f4f 	dsb	sy
 8013246:	603b      	str	r3, [r7, #0]
}
 8013248:	bf00      	nop
 801324a:	bf00      	nop
 801324c:	e7fd      	b.n	801324a <xTaskIncrementTick+0x46>
 801324e:	4b41      	ldr	r3, [pc, #260]	@ (8013354 <xTaskIncrementTick+0x150>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	60fb      	str	r3, [r7, #12]
 8013254:	4b40      	ldr	r3, [pc, #256]	@ (8013358 <xTaskIncrementTick+0x154>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4a3e      	ldr	r2, [pc, #248]	@ (8013354 <xTaskIncrementTick+0x150>)
 801325a:	6013      	str	r3, [r2, #0]
 801325c:	4a3e      	ldr	r2, [pc, #248]	@ (8013358 <xTaskIncrementTick+0x154>)
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6013      	str	r3, [r2, #0]
 8013262:	4b3e      	ldr	r3, [pc, #248]	@ (801335c <xTaskIncrementTick+0x158>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	3301      	adds	r3, #1
 8013268:	4a3c      	ldr	r2, [pc, #240]	@ (801335c <xTaskIncrementTick+0x158>)
 801326a:	6013      	str	r3, [r2, #0]
 801326c:	f000 facc 	bl	8013808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013270:	4b3b      	ldr	r3, [pc, #236]	@ (8013360 <xTaskIncrementTick+0x15c>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	693a      	ldr	r2, [r7, #16]
 8013276:	429a      	cmp	r2, r3
 8013278:	d348      	bcc.n	801330c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801327a:	4b36      	ldr	r3, [pc, #216]	@ (8013354 <xTaskIncrementTick+0x150>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d104      	bne.n	801328e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013284:	4b36      	ldr	r3, [pc, #216]	@ (8013360 <xTaskIncrementTick+0x15c>)
 8013286:	f04f 32ff 	mov.w	r2, #4294967295
 801328a:	601a      	str	r2, [r3, #0]
					break;
 801328c:	e03e      	b.n	801330c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801328e:	4b31      	ldr	r3, [pc, #196]	@ (8013354 <xTaskIncrementTick+0x150>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	68db      	ldr	r3, [r3, #12]
 8013294:	68db      	ldr	r3, [r3, #12]
 8013296:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801329e:	693a      	ldr	r2, [r7, #16]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d203      	bcs.n	80132ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80132a6:	4a2e      	ldr	r2, [pc, #184]	@ (8013360 <xTaskIncrementTick+0x15c>)
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80132ac:	e02e      	b.n	801330c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	3304      	adds	r3, #4
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fe fed7 	bl	8012066 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d004      	beq.n	80132ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	3318      	adds	r3, #24
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7fe fece 	bl	8012066 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132ce:	2201      	movs	r2, #1
 80132d0:	409a      	lsls	r2, r3
 80132d2:	4b24      	ldr	r3, [pc, #144]	@ (8013364 <xTaskIncrementTick+0x160>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	4313      	orrs	r3, r2
 80132d8:	4a22      	ldr	r2, [pc, #136]	@ (8013364 <xTaskIncrementTick+0x160>)
 80132da:	6013      	str	r3, [r2, #0]
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132e0:	4613      	mov	r3, r2
 80132e2:	009b      	lsls	r3, r3, #2
 80132e4:	4413      	add	r3, r2
 80132e6:	009b      	lsls	r3, r3, #2
 80132e8:	4a1f      	ldr	r2, [pc, #124]	@ (8013368 <xTaskIncrementTick+0x164>)
 80132ea:	441a      	add	r2, r3
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	3304      	adds	r3, #4
 80132f0:	4619      	mov	r1, r3
 80132f2:	4610      	mov	r0, r2
 80132f4:	f7fe fe5a 	bl	8011fac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132fc:	4b1b      	ldr	r3, [pc, #108]	@ (801336c <xTaskIncrementTick+0x168>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013302:	429a      	cmp	r2, r3
 8013304:	d3b9      	bcc.n	801327a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013306:	2301      	movs	r3, #1
 8013308:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801330a:	e7b6      	b.n	801327a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801330c:	4b17      	ldr	r3, [pc, #92]	@ (801336c <xTaskIncrementTick+0x168>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013312:	4915      	ldr	r1, [pc, #84]	@ (8013368 <xTaskIncrementTick+0x164>)
 8013314:	4613      	mov	r3, r2
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	4413      	add	r3, r2
 801331a:	009b      	lsls	r3, r3, #2
 801331c:	440b      	add	r3, r1
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2b01      	cmp	r3, #1
 8013322:	d901      	bls.n	8013328 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013324:	2301      	movs	r3, #1
 8013326:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013328:	4b11      	ldr	r3, [pc, #68]	@ (8013370 <xTaskIncrementTick+0x16c>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d007      	beq.n	8013340 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013330:	2301      	movs	r3, #1
 8013332:	617b      	str	r3, [r7, #20]
 8013334:	e004      	b.n	8013340 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013336:	4b0f      	ldr	r3, [pc, #60]	@ (8013374 <xTaskIncrementTick+0x170>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	3301      	adds	r3, #1
 801333c:	4a0d      	ldr	r2, [pc, #52]	@ (8013374 <xTaskIncrementTick+0x170>)
 801333e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013340:	697b      	ldr	r3, [r7, #20]
}
 8013342:	4618      	mov	r0, r3
 8013344:	3718      	adds	r7, #24
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	2000191c 	.word	0x2000191c
 8013350:	200018f8 	.word	0x200018f8
 8013354:	200018ac 	.word	0x200018ac
 8013358:	200018b0 	.word	0x200018b0
 801335c:	2000190c 	.word	0x2000190c
 8013360:	20001914 	.word	0x20001914
 8013364:	200018fc 	.word	0x200018fc
 8013368:	200017f8 	.word	0x200017f8
 801336c:	200017f4 	.word	0x200017f4
 8013370:	20001908 	.word	0x20001908
 8013374:	20001904 	.word	0x20001904

08013378 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013378:	b480      	push	{r7}
 801337a:	b087      	sub	sp, #28
 801337c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801337e:	4b2a      	ldr	r3, [pc, #168]	@ (8013428 <vTaskSwitchContext+0xb0>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d003      	beq.n	801338e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013386:	4b29      	ldr	r3, [pc, #164]	@ (801342c <vTaskSwitchContext+0xb4>)
 8013388:	2201      	movs	r2, #1
 801338a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801338c:	e045      	b.n	801341a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 801338e:	4b27      	ldr	r3, [pc, #156]	@ (801342c <vTaskSwitchContext+0xb4>)
 8013390:	2200      	movs	r2, #0
 8013392:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013394:	4b26      	ldr	r3, [pc, #152]	@ (8013430 <vTaskSwitchContext+0xb8>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	fab3 f383 	clz	r3, r3
 80133a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80133a2:	7afb      	ldrb	r3, [r7, #11]
 80133a4:	f1c3 031f 	rsb	r3, r3, #31
 80133a8:	617b      	str	r3, [r7, #20]
 80133aa:	4922      	ldr	r1, [pc, #136]	@ (8013434 <vTaskSwitchContext+0xbc>)
 80133ac:	697a      	ldr	r2, [r7, #20]
 80133ae:	4613      	mov	r3, r2
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	4413      	add	r3, r2
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	440b      	add	r3, r1
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d10b      	bne.n	80133d6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80133be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	607b      	str	r3, [r7, #4]
}
 80133d0:	bf00      	nop
 80133d2:	bf00      	nop
 80133d4:	e7fd      	b.n	80133d2 <vTaskSwitchContext+0x5a>
 80133d6:	697a      	ldr	r2, [r7, #20]
 80133d8:	4613      	mov	r3, r2
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	4413      	add	r3, r2
 80133de:	009b      	lsls	r3, r3, #2
 80133e0:	4a14      	ldr	r2, [pc, #80]	@ (8013434 <vTaskSwitchContext+0xbc>)
 80133e2:	4413      	add	r3, r2
 80133e4:	613b      	str	r3, [r7, #16]
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	685a      	ldr	r2, [r3, #4]
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	605a      	str	r2, [r3, #4]
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	685a      	ldr	r2, [r3, #4]
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	3308      	adds	r3, #8
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d104      	bne.n	8013406 <vTaskSwitchContext+0x8e>
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	685b      	ldr	r3, [r3, #4]
 8013400:	685a      	ldr	r2, [r3, #4]
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	605a      	str	r2, [r3, #4]
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	4a0a      	ldr	r2, [pc, #40]	@ (8013438 <vTaskSwitchContext+0xc0>)
 801340e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013410:	4b09      	ldr	r3, [pc, #36]	@ (8013438 <vTaskSwitchContext+0xc0>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	334c      	adds	r3, #76	@ 0x4c
 8013416:	4a09      	ldr	r2, [pc, #36]	@ (801343c <vTaskSwitchContext+0xc4>)
 8013418:	6013      	str	r3, [r2, #0]
}
 801341a:	bf00      	nop
 801341c:	371c      	adds	r7, #28
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr
 8013426:	bf00      	nop
 8013428:	2000191c 	.word	0x2000191c
 801342c:	20001908 	.word	0x20001908
 8013430:	200018fc 	.word	0x200018fc
 8013434:	200017f8 	.word	0x200017f8
 8013438:	200017f4 	.word	0x200017f4
 801343c:	20000058 	.word	0x20000058

08013440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d10b      	bne.n	8013468 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8013450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013454:	f383 8811 	msr	BASEPRI, r3
 8013458:	f3bf 8f6f 	isb	sy
 801345c:	f3bf 8f4f 	dsb	sy
 8013460:	60fb      	str	r3, [r7, #12]
}
 8013462:	bf00      	nop
 8013464:	bf00      	nop
 8013466:	e7fd      	b.n	8013464 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013468:	4b07      	ldr	r3, [pc, #28]	@ (8013488 <vTaskPlaceOnEventList+0x48>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	3318      	adds	r3, #24
 801346e:	4619      	mov	r1, r3
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f7fe fdbf 	bl	8011ff4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013476:	2101      	movs	r1, #1
 8013478:	6838      	ldr	r0, [r7, #0]
 801347a:	f000 fba5 	bl	8013bc8 <prvAddCurrentTaskToDelayedList>
}
 801347e:	bf00      	nop
 8013480:	3710      	adds	r7, #16
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
 8013486:	bf00      	nop
 8013488:	200017f4 	.word	0x200017f4

0801348c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b086      	sub	sp, #24
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	68db      	ldr	r3, [r3, #12]
 801349a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d10b      	bne.n	80134ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80134a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134a6:	f383 8811 	msr	BASEPRI, r3
 80134aa:	f3bf 8f6f 	isb	sy
 80134ae:	f3bf 8f4f 	dsb	sy
 80134b2:	60fb      	str	r3, [r7, #12]
}
 80134b4:	bf00      	nop
 80134b6:	bf00      	nop
 80134b8:	e7fd      	b.n	80134b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	3318      	adds	r3, #24
 80134be:	4618      	mov	r0, r3
 80134c0:	f7fe fdd1 	bl	8012066 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134c4:	4b1d      	ldr	r3, [pc, #116]	@ (801353c <xTaskRemoveFromEventList+0xb0>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d11c      	bne.n	8013506 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	3304      	adds	r3, #4
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7fe fdc8 	bl	8012066 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134da:	2201      	movs	r2, #1
 80134dc:	409a      	lsls	r2, r3
 80134de:	4b18      	ldr	r3, [pc, #96]	@ (8013540 <xTaskRemoveFromEventList+0xb4>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	4313      	orrs	r3, r2
 80134e4:	4a16      	ldr	r2, [pc, #88]	@ (8013540 <xTaskRemoveFromEventList+0xb4>)
 80134e6:	6013      	str	r3, [r2, #0]
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134ec:	4613      	mov	r3, r2
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4413      	add	r3, r2
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	4a13      	ldr	r2, [pc, #76]	@ (8013544 <xTaskRemoveFromEventList+0xb8>)
 80134f6:	441a      	add	r2, r3
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	3304      	adds	r3, #4
 80134fc:	4619      	mov	r1, r3
 80134fe:	4610      	mov	r0, r2
 8013500:	f7fe fd54 	bl	8011fac <vListInsertEnd>
 8013504:	e005      	b.n	8013512 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	3318      	adds	r3, #24
 801350a:	4619      	mov	r1, r3
 801350c:	480e      	ldr	r0, [pc, #56]	@ (8013548 <xTaskRemoveFromEventList+0xbc>)
 801350e:	f7fe fd4d 	bl	8011fac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013516:	4b0d      	ldr	r3, [pc, #52]	@ (801354c <xTaskRemoveFromEventList+0xc0>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801351c:	429a      	cmp	r2, r3
 801351e:	d905      	bls.n	801352c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013520:	2301      	movs	r3, #1
 8013522:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013524:	4b0a      	ldr	r3, [pc, #40]	@ (8013550 <xTaskRemoveFromEventList+0xc4>)
 8013526:	2201      	movs	r2, #1
 8013528:	601a      	str	r2, [r3, #0]
 801352a:	e001      	b.n	8013530 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801352c:	2300      	movs	r3, #0
 801352e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013530:	697b      	ldr	r3, [r7, #20]
}
 8013532:	4618      	mov	r0, r3
 8013534:	3718      	adds	r7, #24
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	2000191c 	.word	0x2000191c
 8013540:	200018fc 	.word	0x200018fc
 8013544:	200017f8 	.word	0x200017f8
 8013548:	200018b4 	.word	0x200018b4
 801354c:	200017f4 	.word	0x200017f4
 8013550:	20001908 	.word	0x20001908

08013554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013554:	b480      	push	{r7}
 8013556:	b083      	sub	sp, #12
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801355c:	4b06      	ldr	r3, [pc, #24]	@ (8013578 <vTaskInternalSetTimeOutState+0x24>)
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013564:	4b05      	ldr	r3, [pc, #20]	@ (801357c <vTaskInternalSetTimeOutState+0x28>)
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	605a      	str	r2, [r3, #4]
}
 801356c:	bf00      	nop
 801356e:	370c      	adds	r7, #12
 8013570:	46bd      	mov	sp, r7
 8013572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013576:	4770      	bx	lr
 8013578:	2000190c 	.word	0x2000190c
 801357c:	200018f8 	.word	0x200018f8

08013580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b088      	sub	sp, #32
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d10b      	bne.n	80135a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8013590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013594:	f383 8811 	msr	BASEPRI, r3
 8013598:	f3bf 8f6f 	isb	sy
 801359c:	f3bf 8f4f 	dsb	sy
 80135a0:	613b      	str	r3, [r7, #16]
}
 80135a2:	bf00      	nop
 80135a4:	bf00      	nop
 80135a6:	e7fd      	b.n	80135a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d10b      	bne.n	80135c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80135ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135b2:	f383 8811 	msr	BASEPRI, r3
 80135b6:	f3bf 8f6f 	isb	sy
 80135ba:	f3bf 8f4f 	dsb	sy
 80135be:	60fb      	str	r3, [r7, #12]
}
 80135c0:	bf00      	nop
 80135c2:	bf00      	nop
 80135c4:	e7fd      	b.n	80135c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80135c6:	f000 fc97 	bl	8013ef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80135ca:	4b1d      	ldr	r3, [pc, #116]	@ (8013640 <xTaskCheckForTimeOut+0xc0>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	69ba      	ldr	r2, [r7, #24]
 80135d6:	1ad3      	subs	r3, r2, r3
 80135d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135e2:	d102      	bne.n	80135ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80135e4:	2300      	movs	r3, #0
 80135e6:	61fb      	str	r3, [r7, #28]
 80135e8:	e023      	b.n	8013632 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681a      	ldr	r2, [r3, #0]
 80135ee:	4b15      	ldr	r3, [pc, #84]	@ (8013644 <xTaskCheckForTimeOut+0xc4>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d007      	beq.n	8013606 <xTaskCheckForTimeOut+0x86>
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	69ba      	ldr	r2, [r7, #24]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d302      	bcc.n	8013606 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013600:	2301      	movs	r3, #1
 8013602:	61fb      	str	r3, [r7, #28]
 8013604:	e015      	b.n	8013632 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	697a      	ldr	r2, [r7, #20]
 801360c:	429a      	cmp	r2, r3
 801360e:	d20b      	bcs.n	8013628 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	1ad2      	subs	r2, r2, r3
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f7ff ff99 	bl	8013554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013622:	2300      	movs	r3, #0
 8013624:	61fb      	str	r3, [r7, #28]
 8013626:	e004      	b.n	8013632 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	2200      	movs	r2, #0
 801362c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801362e:	2301      	movs	r3, #1
 8013630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013632:	f000 fc93 	bl	8013f5c <vPortExitCritical>

	return xReturn;
 8013636:	69fb      	ldr	r3, [r7, #28]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3720      	adds	r7, #32
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	200018f8 	.word	0x200018f8
 8013644:	2000190c 	.word	0x2000190c

08013648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013648:	b480      	push	{r7}
 801364a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801364c:	4b03      	ldr	r3, [pc, #12]	@ (801365c <vTaskMissedYield+0x14>)
 801364e:	2201      	movs	r2, #1
 8013650:	601a      	str	r2, [r3, #0]
}
 8013652:	bf00      	nop
 8013654:	46bd      	mov	sp, r7
 8013656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365a:	4770      	bx	lr
 801365c:	20001908 	.word	0x20001908

08013660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013668:	f000 f852 	bl	8013710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801366c:	4b06      	ldr	r3, [pc, #24]	@ (8013688 <prvIdleTask+0x28>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	2b01      	cmp	r3, #1
 8013672:	d9f9      	bls.n	8013668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013674:	4b05      	ldr	r3, [pc, #20]	@ (801368c <prvIdleTask+0x2c>)
 8013676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801367a:	601a      	str	r2, [r3, #0]
 801367c:	f3bf 8f4f 	dsb	sy
 8013680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013684:	e7f0      	b.n	8013668 <prvIdleTask+0x8>
 8013686:	bf00      	nop
 8013688:	200017f8 	.word	0x200017f8
 801368c:	e000ed04 	.word	0xe000ed04

08013690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013696:	2300      	movs	r3, #0
 8013698:	607b      	str	r3, [r7, #4]
 801369a:	e00c      	b.n	80136b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801369c:	687a      	ldr	r2, [r7, #4]
 801369e:	4613      	mov	r3, r2
 80136a0:	009b      	lsls	r3, r3, #2
 80136a2:	4413      	add	r3, r2
 80136a4:	009b      	lsls	r3, r3, #2
 80136a6:	4a12      	ldr	r2, [pc, #72]	@ (80136f0 <prvInitialiseTaskLists+0x60>)
 80136a8:	4413      	add	r3, r2
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7fe fc51 	bl	8011f52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	3301      	adds	r3, #1
 80136b4:	607b      	str	r3, [r7, #4]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b06      	cmp	r3, #6
 80136ba:	d9ef      	bls.n	801369c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80136bc:	480d      	ldr	r0, [pc, #52]	@ (80136f4 <prvInitialiseTaskLists+0x64>)
 80136be:	f7fe fc48 	bl	8011f52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80136c2:	480d      	ldr	r0, [pc, #52]	@ (80136f8 <prvInitialiseTaskLists+0x68>)
 80136c4:	f7fe fc45 	bl	8011f52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80136c8:	480c      	ldr	r0, [pc, #48]	@ (80136fc <prvInitialiseTaskLists+0x6c>)
 80136ca:	f7fe fc42 	bl	8011f52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80136ce:	480c      	ldr	r0, [pc, #48]	@ (8013700 <prvInitialiseTaskLists+0x70>)
 80136d0:	f7fe fc3f 	bl	8011f52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80136d4:	480b      	ldr	r0, [pc, #44]	@ (8013704 <prvInitialiseTaskLists+0x74>)
 80136d6:	f7fe fc3c 	bl	8011f52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80136da:	4b0b      	ldr	r3, [pc, #44]	@ (8013708 <prvInitialiseTaskLists+0x78>)
 80136dc:	4a05      	ldr	r2, [pc, #20]	@ (80136f4 <prvInitialiseTaskLists+0x64>)
 80136de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80136e0:	4b0a      	ldr	r3, [pc, #40]	@ (801370c <prvInitialiseTaskLists+0x7c>)
 80136e2:	4a05      	ldr	r2, [pc, #20]	@ (80136f8 <prvInitialiseTaskLists+0x68>)
 80136e4:	601a      	str	r2, [r3, #0]
}
 80136e6:	bf00      	nop
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	200017f8 	.word	0x200017f8
 80136f4:	20001884 	.word	0x20001884
 80136f8:	20001898 	.word	0x20001898
 80136fc:	200018b4 	.word	0x200018b4
 8013700:	200018c8 	.word	0x200018c8
 8013704:	200018e0 	.word	0x200018e0
 8013708:	200018ac 	.word	0x200018ac
 801370c:	200018b0 	.word	0x200018b0

08013710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013716:	e019      	b.n	801374c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013718:	f000 fbee 	bl	8013ef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801371c:	4b10      	ldr	r3, [pc, #64]	@ (8013760 <prvCheckTasksWaitingTermination+0x50>)
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	68db      	ldr	r3, [r3, #12]
 8013722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	3304      	adds	r3, #4
 8013728:	4618      	mov	r0, r3
 801372a:	f7fe fc9c 	bl	8012066 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801372e:	4b0d      	ldr	r3, [pc, #52]	@ (8013764 <prvCheckTasksWaitingTermination+0x54>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	3b01      	subs	r3, #1
 8013734:	4a0b      	ldr	r2, [pc, #44]	@ (8013764 <prvCheckTasksWaitingTermination+0x54>)
 8013736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013738:	4b0b      	ldr	r3, [pc, #44]	@ (8013768 <prvCheckTasksWaitingTermination+0x58>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	3b01      	subs	r3, #1
 801373e:	4a0a      	ldr	r2, [pc, #40]	@ (8013768 <prvCheckTasksWaitingTermination+0x58>)
 8013740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013742:	f000 fc0b 	bl	8013f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 f848 	bl	80137dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801374c:	4b06      	ldr	r3, [pc, #24]	@ (8013768 <prvCheckTasksWaitingTermination+0x58>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d1e1      	bne.n	8013718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013754:	bf00      	nop
 8013756:	bf00      	nop
 8013758:	3708      	adds	r7, #8
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}
 801375e:	bf00      	nop
 8013760:	200018c8 	.word	0x200018c8
 8013764:	200018f4 	.word	0x200018f4
 8013768:	200018dc 	.word	0x200018dc

0801376c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 801376c:	b480      	push	{r7}
 801376e:	b085      	sub	sp, #20
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8013774:	2300      	movs	r3, #0
 8013776:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013778:	e005      	b.n	8013786 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	3301      	adds	r3, #1
 801377e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	3301      	adds	r3, #1
 8013784:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	2ba5      	cmp	r3, #165	@ 0xa5
 801378c:	d0f5      	beq.n	801377a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	089b      	lsrs	r3, r3, #2
 8013792:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	b29b      	uxth	r3, r3
	}
 8013798:	4618      	mov	r0, r3
 801379a:	3714      	adds	r7, #20
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b086      	sub	sp, #24
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d102      	bne.n	80137b8 <uxTaskGetStackHighWaterMark+0x14>
 80137b2:	4b09      	ldr	r3, [pc, #36]	@ (80137d8 <uxTaskGetStackHighWaterMark+0x34>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	e000      	b.n	80137ba <uxTaskGetStackHighWaterMark+0x16>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137c0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80137c2:	6938      	ldr	r0, [r7, #16]
 80137c4:	f7ff ffd2 	bl	801376c <prvTaskCheckFreeStackSpace>
 80137c8:	4603      	mov	r3, r0
 80137ca:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80137cc:	68fb      	ldr	r3, [r7, #12]
	}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3718      	adds	r7, #24
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	200017f4 	.word	0x200017f4

080137dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	334c      	adds	r3, #76	@ 0x4c
 80137e8:	4618      	mov	r0, r3
 80137ea:	f001 ff65 	bl	80156b8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137f2:	4618      	mov	r0, r3
 80137f4:	f000 fd70 	bl	80142d8 <vPortFree>
			vPortFree( pxTCB );
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f000 fd6d 	bl	80142d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80137fe:	bf00      	nop
 8013800:	3708      	adds	r7, #8
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
	...

08013808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801380e:	4b0c      	ldr	r3, [pc, #48]	@ (8013840 <prvResetNextTaskUnblockTime+0x38>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d104      	bne.n	8013822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013818:	4b0a      	ldr	r3, [pc, #40]	@ (8013844 <prvResetNextTaskUnblockTime+0x3c>)
 801381a:	f04f 32ff 	mov.w	r2, #4294967295
 801381e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013820:	e008      	b.n	8013834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013822:	4b07      	ldr	r3, [pc, #28]	@ (8013840 <prvResetNextTaskUnblockTime+0x38>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	4a04      	ldr	r2, [pc, #16]	@ (8013844 <prvResetNextTaskUnblockTime+0x3c>)
 8013832:	6013      	str	r3, [r2, #0]
}
 8013834:	bf00      	nop
 8013836:	370c      	adds	r7, #12
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr
 8013840:	200018ac 	.word	0x200018ac
 8013844:	20001914 	.word	0x20001914

08013848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013848:	b480      	push	{r7}
 801384a:	b083      	sub	sp, #12
 801384c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801384e:	4b0b      	ldr	r3, [pc, #44]	@ (801387c <xTaskGetSchedulerState+0x34>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d102      	bne.n	801385c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013856:	2301      	movs	r3, #1
 8013858:	607b      	str	r3, [r7, #4]
 801385a:	e008      	b.n	801386e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801385c:	4b08      	ldr	r3, [pc, #32]	@ (8013880 <xTaskGetSchedulerState+0x38>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d102      	bne.n	801386a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013864:	2302      	movs	r3, #2
 8013866:	607b      	str	r3, [r7, #4]
 8013868:	e001      	b.n	801386e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801386a:	2300      	movs	r3, #0
 801386c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801386e:	687b      	ldr	r3, [r7, #4]
	}
 8013870:	4618      	mov	r0, r3
 8013872:	370c      	adds	r7, #12
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr
 801387c:	20001900 	.word	0x20001900
 8013880:	2000191c 	.word	0x2000191c

08013884 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013884:	b580      	push	{r7, lr}
 8013886:	b084      	sub	sp, #16
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013890:	2300      	movs	r3, #0
 8013892:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d05e      	beq.n	8013958 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801389e:	4b31      	ldr	r3, [pc, #196]	@ (8013964 <xTaskPriorityInherit+0xe0>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d24e      	bcs.n	8013946 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	699b      	ldr	r3, [r3, #24]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	db06      	blt.n	80138be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138b0:	4b2c      	ldr	r3, [pc, #176]	@ (8013964 <xTaskPriorityInherit+0xe0>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138b6:	f1c3 0207 	rsb	r2, r3, #7
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	6959      	ldr	r1, [r3, #20]
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138c6:	4613      	mov	r3, r2
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	4413      	add	r3, r2
 80138cc:	009b      	lsls	r3, r3, #2
 80138ce:	4a26      	ldr	r2, [pc, #152]	@ (8013968 <xTaskPriorityInherit+0xe4>)
 80138d0:	4413      	add	r3, r2
 80138d2:	4299      	cmp	r1, r3
 80138d4:	d12f      	bne.n	8013936 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	3304      	adds	r3, #4
 80138da:	4618      	mov	r0, r3
 80138dc:	f7fe fbc3 	bl	8012066 <uxListRemove>
 80138e0:	4603      	mov	r3, r0
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d10a      	bne.n	80138fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ea:	2201      	movs	r2, #1
 80138ec:	fa02 f303 	lsl.w	r3, r2, r3
 80138f0:	43da      	mvns	r2, r3
 80138f2:	4b1e      	ldr	r3, [pc, #120]	@ (801396c <xTaskPriorityInherit+0xe8>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4013      	ands	r3, r2
 80138f8:	4a1c      	ldr	r2, [pc, #112]	@ (801396c <xTaskPriorityInherit+0xe8>)
 80138fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80138fc:	4b19      	ldr	r3, [pc, #100]	@ (8013964 <xTaskPriorityInherit+0xe0>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801390a:	2201      	movs	r2, #1
 801390c:	409a      	lsls	r2, r3
 801390e:	4b17      	ldr	r3, [pc, #92]	@ (801396c <xTaskPriorityInherit+0xe8>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	4313      	orrs	r3, r2
 8013914:	4a15      	ldr	r2, [pc, #84]	@ (801396c <xTaskPriorityInherit+0xe8>)
 8013916:	6013      	str	r3, [r2, #0]
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801391c:	4613      	mov	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4413      	add	r3, r2
 8013922:	009b      	lsls	r3, r3, #2
 8013924:	4a10      	ldr	r2, [pc, #64]	@ (8013968 <xTaskPriorityInherit+0xe4>)
 8013926:	441a      	add	r2, r3
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	3304      	adds	r3, #4
 801392c:	4619      	mov	r1, r3
 801392e:	4610      	mov	r0, r2
 8013930:	f7fe fb3c 	bl	8011fac <vListInsertEnd>
 8013934:	e004      	b.n	8013940 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013936:	4b0b      	ldr	r3, [pc, #44]	@ (8013964 <xTaskPriorityInherit+0xe0>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013940:	2301      	movs	r3, #1
 8013942:	60fb      	str	r3, [r7, #12]
 8013944:	e008      	b.n	8013958 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801394a:	4b06      	ldr	r3, [pc, #24]	@ (8013964 <xTaskPriorityInherit+0xe0>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013950:	429a      	cmp	r2, r3
 8013952:	d201      	bcs.n	8013958 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013954:	2301      	movs	r3, #1
 8013956:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013958:	68fb      	ldr	r3, [r7, #12]
	}
 801395a:	4618      	mov	r0, r3
 801395c:	3710      	adds	r7, #16
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	200017f4 	.word	0x200017f4
 8013968:	200017f8 	.word	0x200017f8
 801396c:	200018fc 	.word	0x200018fc

08013970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013970:	b580      	push	{r7, lr}
 8013972:	b086      	sub	sp, #24
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801397c:	2300      	movs	r3, #0
 801397e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d070      	beq.n	8013a68 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013986:	4b3b      	ldr	r3, [pc, #236]	@ (8013a74 <xTaskPriorityDisinherit+0x104>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	693a      	ldr	r2, [r7, #16]
 801398c:	429a      	cmp	r2, r3
 801398e:	d00b      	beq.n	80139a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8013990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013994:	f383 8811 	msr	BASEPRI, r3
 8013998:	f3bf 8f6f 	isb	sy
 801399c:	f3bf 8f4f 	dsb	sy
 80139a0:	60fb      	str	r3, [r7, #12]
}
 80139a2:	bf00      	nop
 80139a4:	bf00      	nop
 80139a6:	e7fd      	b.n	80139a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d10b      	bne.n	80139c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80139b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139b4:	f383 8811 	msr	BASEPRI, r3
 80139b8:	f3bf 8f6f 	isb	sy
 80139bc:	f3bf 8f4f 	dsb	sy
 80139c0:	60bb      	str	r3, [r7, #8]
}
 80139c2:	bf00      	nop
 80139c4:	bf00      	nop
 80139c6:	e7fd      	b.n	80139c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80139cc:	1e5a      	subs	r2, r3, #1
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139da:	429a      	cmp	r2, r3
 80139dc:	d044      	beq.n	8013a68 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d140      	bne.n	8013a68 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	3304      	adds	r3, #4
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fe fb3b 	bl	8012066 <uxListRemove>
 80139f0:	4603      	mov	r3, r0
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d115      	bne.n	8013a22 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139fa:	491f      	ldr	r1, [pc, #124]	@ (8013a78 <xTaskPriorityDisinherit+0x108>)
 80139fc:	4613      	mov	r3, r2
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	4413      	add	r3, r2
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	440b      	add	r3, r1
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d10a      	bne.n	8013a22 <xTaskPriorityDisinherit+0xb2>
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a10:	2201      	movs	r2, #1
 8013a12:	fa02 f303 	lsl.w	r3, r2, r3
 8013a16:	43da      	mvns	r2, r3
 8013a18:	4b18      	ldr	r3, [pc, #96]	@ (8013a7c <xTaskPriorityDisinherit+0x10c>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4013      	ands	r3, r2
 8013a1e:	4a17      	ldr	r2, [pc, #92]	@ (8013a7c <xTaskPriorityDisinherit+0x10c>)
 8013a20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a2e:	f1c3 0207 	rsb	r2, r3, #7
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	409a      	lsls	r2, r3
 8013a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8013a7c <xTaskPriorityDisinherit+0x10c>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	4313      	orrs	r3, r2
 8013a44:	4a0d      	ldr	r2, [pc, #52]	@ (8013a7c <xTaskPriorityDisinherit+0x10c>)
 8013a46:	6013      	str	r3, [r2, #0]
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a4c:	4613      	mov	r3, r2
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	4413      	add	r3, r2
 8013a52:	009b      	lsls	r3, r3, #2
 8013a54:	4a08      	ldr	r2, [pc, #32]	@ (8013a78 <xTaskPriorityDisinherit+0x108>)
 8013a56:	441a      	add	r2, r3
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	3304      	adds	r3, #4
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	4610      	mov	r0, r2
 8013a60:	f7fe faa4 	bl	8011fac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013a64:	2301      	movs	r3, #1
 8013a66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013a68:	697b      	ldr	r3, [r7, #20]
	}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3718      	adds	r7, #24
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	200017f4 	.word	0x200017f4
 8013a78:	200017f8 	.word	0x200017f8
 8013a7c:	200018fc 	.word	0x200018fc

08013a80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b088      	sub	sp, #32
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013a8e:	2301      	movs	r3, #1
 8013a90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d079      	beq.n	8013b8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013a98:	69bb      	ldr	r3, [r7, #24]
 8013a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d10b      	bne.n	8013ab8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8013aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aa4:	f383 8811 	msr	BASEPRI, r3
 8013aa8:	f3bf 8f6f 	isb	sy
 8013aac:	f3bf 8f4f 	dsb	sy
 8013ab0:	60fb      	str	r3, [r7, #12]
}
 8013ab2:	bf00      	nop
 8013ab4:	bf00      	nop
 8013ab6:	e7fd      	b.n	8013ab4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013ab8:	69bb      	ldr	r3, [r7, #24]
 8013aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013abc:	683a      	ldr	r2, [r7, #0]
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d902      	bls.n	8013ac8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	61fb      	str	r3, [r7, #28]
 8013ac6:	e002      	b.n	8013ace <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013acc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ad2:	69fa      	ldr	r2, [r7, #28]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d059      	beq.n	8013b8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013adc:	697a      	ldr	r2, [r7, #20]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d154      	bne.n	8013b8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8013b94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	69ba      	ldr	r2, [r7, #24]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d10b      	bne.n	8013b04 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8013aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013af0:	f383 8811 	msr	BASEPRI, r3
 8013af4:	f3bf 8f6f 	isb	sy
 8013af8:	f3bf 8f4f 	dsb	sy
 8013afc:	60bb      	str	r3, [r7, #8]
}
 8013afe:	bf00      	nop
 8013b00:	bf00      	nop
 8013b02:	e7fd      	b.n	8013b00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013b04:	69bb      	ldr	r3, [r7, #24]
 8013b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	69fa      	ldr	r2, [r7, #28]
 8013b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	699b      	ldr	r3, [r3, #24]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	db04      	blt.n	8013b22 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	f1c3 0207 	rsb	r2, r3, #7
 8013b1e:	69bb      	ldr	r3, [r7, #24]
 8013b20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	6959      	ldr	r1, [r3, #20]
 8013b26:	693a      	ldr	r2, [r7, #16]
 8013b28:	4613      	mov	r3, r2
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	4413      	add	r3, r2
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	4a19      	ldr	r2, [pc, #100]	@ (8013b98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013b32:	4413      	add	r3, r2
 8013b34:	4299      	cmp	r1, r3
 8013b36:	d129      	bne.n	8013b8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b38:	69bb      	ldr	r3, [r7, #24]
 8013b3a:	3304      	adds	r3, #4
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7fe fa92 	bl	8012066 <uxListRemove>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d10a      	bne.n	8013b5e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8013b52:	43da      	mvns	r2, r3
 8013b54:	4b11      	ldr	r3, [pc, #68]	@ (8013b9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4013      	ands	r3, r2
 8013b5a:	4a10      	ldr	r2, [pc, #64]	@ (8013b9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013b5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b62:	2201      	movs	r2, #1
 8013b64:	409a      	lsls	r2, r3
 8013b66:	4b0d      	ldr	r3, [pc, #52]	@ (8013b9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	4313      	orrs	r3, r2
 8013b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8013b9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013b6e:	6013      	str	r3, [r2, #0]
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b74:	4613      	mov	r3, r2
 8013b76:	009b      	lsls	r3, r3, #2
 8013b78:	4413      	add	r3, r2
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	4a06      	ldr	r2, [pc, #24]	@ (8013b98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013b7e:	441a      	add	r2, r3
 8013b80:	69bb      	ldr	r3, [r7, #24]
 8013b82:	3304      	adds	r3, #4
 8013b84:	4619      	mov	r1, r3
 8013b86:	4610      	mov	r0, r2
 8013b88:	f7fe fa10 	bl	8011fac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b8c:	bf00      	nop
 8013b8e:	3720      	adds	r7, #32
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	200017f4 	.word	0x200017f4
 8013b98:	200017f8 	.word	0x200017f8
 8013b9c:	200018fc 	.word	0x200018fc

08013ba0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013ba0:	b480      	push	{r7}
 8013ba2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013ba4:	4b07      	ldr	r3, [pc, #28]	@ (8013bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d004      	beq.n	8013bb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013bac:	4b05      	ldr	r3, [pc, #20]	@ (8013bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013bb2:	3201      	adds	r2, #1
 8013bb4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8013bb6:	4b03      	ldr	r3, [pc, #12]	@ (8013bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
	}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr
 8013bc4:	200017f4 	.word	0x200017f4

08013bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b084      	sub	sp, #16
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013bd2:	4b29      	ldr	r3, [pc, #164]	@ (8013c78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013bd8:	4b28      	ldr	r3, [pc, #160]	@ (8013c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	3304      	adds	r3, #4
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7fe fa41 	bl	8012066 <uxListRemove>
 8013be4:	4603      	mov	r3, r0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d10b      	bne.n	8013c02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013bea:	4b24      	ldr	r3, [pc, #144]	@ (8013c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8013bf6:	43da      	mvns	r2, r3
 8013bf8:	4b21      	ldr	r3, [pc, #132]	@ (8013c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	4013      	ands	r3, r2
 8013bfe:	4a20      	ldr	r2, [pc, #128]	@ (8013c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013c00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c08:	d10a      	bne.n	8013c20 <prvAddCurrentTaskToDelayedList+0x58>
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d007      	beq.n	8013c20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c10:	4b1a      	ldr	r3, [pc, #104]	@ (8013c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	3304      	adds	r3, #4
 8013c16:	4619      	mov	r1, r3
 8013c18:	481a      	ldr	r0, [pc, #104]	@ (8013c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013c1a:	f7fe f9c7 	bl	8011fac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013c1e:	e026      	b.n	8013c6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	4413      	add	r3, r2
 8013c26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013c28:	4b14      	ldr	r3, [pc, #80]	@ (8013c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	68ba      	ldr	r2, [r7, #8]
 8013c2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013c30:	68ba      	ldr	r2, [r7, #8]
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d209      	bcs.n	8013c4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c38:	4b13      	ldr	r3, [pc, #76]	@ (8013c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8013c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	3304      	adds	r3, #4
 8013c42:	4619      	mov	r1, r3
 8013c44:	4610      	mov	r0, r2
 8013c46:	f7fe f9d5 	bl	8011ff4 <vListInsert>
}
 8013c4a:	e010      	b.n	8013c6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8013c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8013c4e:	681a      	ldr	r2, [r3, #0]
 8013c50:	4b0a      	ldr	r3, [pc, #40]	@ (8013c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	3304      	adds	r3, #4
 8013c56:	4619      	mov	r1, r3
 8013c58:	4610      	mov	r0, r2
 8013c5a:	f7fe f9cb 	bl	8011ff4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8013c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	68ba      	ldr	r2, [r7, #8]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d202      	bcs.n	8013c6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013c68:	4a09      	ldr	r2, [pc, #36]	@ (8013c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	6013      	str	r3, [r2, #0]
}
 8013c6e:	bf00      	nop
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	200018f8 	.word	0x200018f8
 8013c7c:	200017f4 	.word	0x200017f4
 8013c80:	200018fc 	.word	0x200018fc
 8013c84:	200018e0 	.word	0x200018e0
 8013c88:	200018b0 	.word	0x200018b0
 8013c8c:	200018ac 	.word	0x200018ac
 8013c90:	20001914 	.word	0x20001914

08013c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013c94:	b480      	push	{r7}
 8013c96:	b085      	sub	sp, #20
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	60b9      	str	r1, [r7, #8]
 8013c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	3b04      	subs	r3, #4
 8013ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	3b04      	subs	r3, #4
 8013cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	f023 0201 	bic.w	r2, r3, #1
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	3b04      	subs	r3, #4
 8013cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8013cf8 <pxPortInitialiseStack+0x64>)
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	3b14      	subs	r3, #20
 8013cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	3b04      	subs	r3, #4
 8013cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f06f 0202 	mvn.w	r2, #2
 8013ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	3b20      	subs	r3, #32
 8013ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013cea:	68fb      	ldr	r3, [r7, #12]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3714      	adds	r7, #20
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	08013cfd 	.word	0x08013cfd

08013cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013cfc:	b480      	push	{r7}
 8013cfe:	b085      	sub	sp, #20
 8013d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013d02:	2300      	movs	r3, #0
 8013d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013d06:	4b13      	ldr	r3, [pc, #76]	@ (8013d54 <prvTaskExitError+0x58>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d0e:	d00b      	beq.n	8013d28 <prvTaskExitError+0x2c>
	__asm volatile
 8013d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d14:	f383 8811 	msr	BASEPRI, r3
 8013d18:	f3bf 8f6f 	isb	sy
 8013d1c:	f3bf 8f4f 	dsb	sy
 8013d20:	60fb      	str	r3, [r7, #12]
}
 8013d22:	bf00      	nop
 8013d24:	bf00      	nop
 8013d26:	e7fd      	b.n	8013d24 <prvTaskExitError+0x28>
	__asm volatile
 8013d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d2c:	f383 8811 	msr	BASEPRI, r3
 8013d30:	f3bf 8f6f 	isb	sy
 8013d34:	f3bf 8f4f 	dsb	sy
 8013d38:	60bb      	str	r3, [r7, #8]
}
 8013d3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013d3c:	bf00      	nop
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d0fc      	beq.n	8013d3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013d44:	bf00      	nop
 8013d46:	bf00      	nop
 8013d48:	3714      	adds	r7, #20
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d50:	4770      	bx	lr
 8013d52:	bf00      	nop
 8013d54:	20000048 	.word	0x20000048
	...

08013d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013d60:	4b07      	ldr	r3, [pc, #28]	@ (8013d80 <pxCurrentTCBConst2>)
 8013d62:	6819      	ldr	r1, [r3, #0]
 8013d64:	6808      	ldr	r0, [r1, #0]
 8013d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d6a:	f380 8809 	msr	PSP, r0
 8013d6e:	f3bf 8f6f 	isb	sy
 8013d72:	f04f 0000 	mov.w	r0, #0
 8013d76:	f380 8811 	msr	BASEPRI, r0
 8013d7a:	4770      	bx	lr
 8013d7c:	f3af 8000 	nop.w

08013d80 <pxCurrentTCBConst2>:
 8013d80:	200017f4 	.word	0x200017f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013d84:	bf00      	nop
 8013d86:	bf00      	nop

08013d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013d88:	4808      	ldr	r0, [pc, #32]	@ (8013dac <prvPortStartFirstTask+0x24>)
 8013d8a:	6800      	ldr	r0, [r0, #0]
 8013d8c:	6800      	ldr	r0, [r0, #0]
 8013d8e:	f380 8808 	msr	MSP, r0
 8013d92:	f04f 0000 	mov.w	r0, #0
 8013d96:	f380 8814 	msr	CONTROL, r0
 8013d9a:	b662      	cpsie	i
 8013d9c:	b661      	cpsie	f
 8013d9e:	f3bf 8f4f 	dsb	sy
 8013da2:	f3bf 8f6f 	isb	sy
 8013da6:	df00      	svc	0
 8013da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013daa:	bf00      	nop
 8013dac:	e000ed08 	.word	0xe000ed08

08013db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b086      	sub	sp, #24
 8013db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013db6:	4b47      	ldr	r3, [pc, #284]	@ (8013ed4 <xPortStartScheduler+0x124>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	4a47      	ldr	r2, [pc, #284]	@ (8013ed8 <xPortStartScheduler+0x128>)
 8013dbc:	4293      	cmp	r3, r2
 8013dbe:	d10b      	bne.n	8013dd8 <xPortStartScheduler+0x28>
	__asm volatile
 8013dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dc4:	f383 8811 	msr	BASEPRI, r3
 8013dc8:	f3bf 8f6f 	isb	sy
 8013dcc:	f3bf 8f4f 	dsb	sy
 8013dd0:	60fb      	str	r3, [r7, #12]
}
 8013dd2:	bf00      	nop
 8013dd4:	bf00      	nop
 8013dd6:	e7fd      	b.n	8013dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8013ed4 <xPortStartScheduler+0x124>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8013edc <xPortStartScheduler+0x12c>)
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d10b      	bne.n	8013dfa <xPortStartScheduler+0x4a>
	__asm volatile
 8013de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013de6:	f383 8811 	msr	BASEPRI, r3
 8013dea:	f3bf 8f6f 	isb	sy
 8013dee:	f3bf 8f4f 	dsb	sy
 8013df2:	613b      	str	r3, [r7, #16]
}
 8013df4:	bf00      	nop
 8013df6:	bf00      	nop
 8013df8:	e7fd      	b.n	8013df6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013dfa:	4b39      	ldr	r3, [pc, #228]	@ (8013ee0 <xPortStartScheduler+0x130>)
 8013dfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	b2db      	uxtb	r3, r3
 8013e04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	22ff      	movs	r2, #255	@ 0xff
 8013e0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	781b      	ldrb	r3, [r3, #0]
 8013e10:	b2db      	uxtb	r3, r3
 8013e12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013e14:	78fb      	ldrb	r3, [r7, #3]
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013e1c:	b2da      	uxtb	r2, r3
 8013e1e:	4b31      	ldr	r3, [pc, #196]	@ (8013ee4 <xPortStartScheduler+0x134>)
 8013e20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013e22:	4b31      	ldr	r3, [pc, #196]	@ (8013ee8 <xPortStartScheduler+0x138>)
 8013e24:	2207      	movs	r2, #7
 8013e26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e28:	e009      	b.n	8013e3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8013e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8013ee8 <xPortStartScheduler+0x138>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	3b01      	subs	r3, #1
 8013e30:	4a2d      	ldr	r2, [pc, #180]	@ (8013ee8 <xPortStartScheduler+0x138>)
 8013e32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013e34:	78fb      	ldrb	r3, [r7, #3]
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	005b      	lsls	r3, r3, #1
 8013e3a:	b2db      	uxtb	r3, r3
 8013e3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e3e:	78fb      	ldrb	r3, [r7, #3]
 8013e40:	b2db      	uxtb	r3, r3
 8013e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013e46:	2b80      	cmp	r3, #128	@ 0x80
 8013e48:	d0ef      	beq.n	8013e2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013e4a:	4b27      	ldr	r3, [pc, #156]	@ (8013ee8 <xPortStartScheduler+0x138>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	f1c3 0307 	rsb	r3, r3, #7
 8013e52:	2b04      	cmp	r3, #4
 8013e54:	d00b      	beq.n	8013e6e <xPortStartScheduler+0xbe>
	__asm volatile
 8013e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e5a:	f383 8811 	msr	BASEPRI, r3
 8013e5e:	f3bf 8f6f 	isb	sy
 8013e62:	f3bf 8f4f 	dsb	sy
 8013e66:	60bb      	str	r3, [r7, #8]
}
 8013e68:	bf00      	nop
 8013e6a:	bf00      	nop
 8013e6c:	e7fd      	b.n	8013e6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8013ee8 <xPortStartScheduler+0x138>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	021b      	lsls	r3, r3, #8
 8013e74:	4a1c      	ldr	r2, [pc, #112]	@ (8013ee8 <xPortStartScheduler+0x138>)
 8013e76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013e78:	4b1b      	ldr	r3, [pc, #108]	@ (8013ee8 <xPortStartScheduler+0x138>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013e80:	4a19      	ldr	r2, [pc, #100]	@ (8013ee8 <xPortStartScheduler+0x138>)
 8013e82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	b2da      	uxtb	r2, r3
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013e8c:	4b17      	ldr	r3, [pc, #92]	@ (8013eec <xPortStartScheduler+0x13c>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4a16      	ldr	r2, [pc, #88]	@ (8013eec <xPortStartScheduler+0x13c>)
 8013e92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013e96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013e98:	4b14      	ldr	r3, [pc, #80]	@ (8013eec <xPortStartScheduler+0x13c>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	4a13      	ldr	r2, [pc, #76]	@ (8013eec <xPortStartScheduler+0x13c>)
 8013e9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013ea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013ea4:	f000 f8da 	bl	801405c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013ea8:	4b11      	ldr	r3, [pc, #68]	@ (8013ef0 <xPortStartScheduler+0x140>)
 8013eaa:	2200      	movs	r2, #0
 8013eac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013eae:	f000 f8f9 	bl	80140a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013eb2:	4b10      	ldr	r3, [pc, #64]	@ (8013ef4 <xPortStartScheduler+0x144>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8013ef4 <xPortStartScheduler+0x144>)
 8013eb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8013ebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013ebe:	f7ff ff63 	bl	8013d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013ec2:	f7ff fa59 	bl	8013378 <vTaskSwitchContext>
	prvTaskExitError();
 8013ec6:	f7ff ff19 	bl	8013cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013eca:	2300      	movs	r3, #0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3718      	adds	r7, #24
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}
 8013ed4:	e000ed00 	.word	0xe000ed00
 8013ed8:	410fc271 	.word	0x410fc271
 8013edc:	410fc270 	.word	0x410fc270
 8013ee0:	e000e400 	.word	0xe000e400
 8013ee4:	20001920 	.word	0x20001920
 8013ee8:	20001924 	.word	0x20001924
 8013eec:	e000ed20 	.word	0xe000ed20
 8013ef0:	20000048 	.word	0x20000048
 8013ef4:	e000ef34 	.word	0xe000ef34

08013ef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b083      	sub	sp, #12
 8013efc:	af00      	add	r7, sp, #0
	__asm volatile
 8013efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f02:	f383 8811 	msr	BASEPRI, r3
 8013f06:	f3bf 8f6f 	isb	sy
 8013f0a:	f3bf 8f4f 	dsb	sy
 8013f0e:	607b      	str	r3, [r7, #4]
}
 8013f10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013f12:	4b10      	ldr	r3, [pc, #64]	@ (8013f54 <vPortEnterCritical+0x5c>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	3301      	adds	r3, #1
 8013f18:	4a0e      	ldr	r2, [pc, #56]	@ (8013f54 <vPortEnterCritical+0x5c>)
 8013f1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8013f54 <vPortEnterCritical+0x5c>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d110      	bne.n	8013f46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013f24:	4b0c      	ldr	r3, [pc, #48]	@ (8013f58 <vPortEnterCritical+0x60>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	b2db      	uxtb	r3, r3
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d00b      	beq.n	8013f46 <vPortEnterCritical+0x4e>
	__asm volatile
 8013f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f32:	f383 8811 	msr	BASEPRI, r3
 8013f36:	f3bf 8f6f 	isb	sy
 8013f3a:	f3bf 8f4f 	dsb	sy
 8013f3e:	603b      	str	r3, [r7, #0]
}
 8013f40:	bf00      	nop
 8013f42:	bf00      	nop
 8013f44:	e7fd      	b.n	8013f42 <vPortEnterCritical+0x4a>
	}
}
 8013f46:	bf00      	nop
 8013f48:	370c      	adds	r7, #12
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f50:	4770      	bx	lr
 8013f52:	bf00      	nop
 8013f54:	20000048 	.word	0x20000048
 8013f58:	e000ed04 	.word	0xe000ed04

08013f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013f5c:	b480      	push	{r7}
 8013f5e:	b083      	sub	sp, #12
 8013f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013f62:	4b12      	ldr	r3, [pc, #72]	@ (8013fac <vPortExitCritical+0x50>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d10b      	bne.n	8013f82 <vPortExitCritical+0x26>
	__asm volatile
 8013f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f6e:	f383 8811 	msr	BASEPRI, r3
 8013f72:	f3bf 8f6f 	isb	sy
 8013f76:	f3bf 8f4f 	dsb	sy
 8013f7a:	607b      	str	r3, [r7, #4]
}
 8013f7c:	bf00      	nop
 8013f7e:	bf00      	nop
 8013f80:	e7fd      	b.n	8013f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013f82:	4b0a      	ldr	r3, [pc, #40]	@ (8013fac <vPortExitCritical+0x50>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	3b01      	subs	r3, #1
 8013f88:	4a08      	ldr	r2, [pc, #32]	@ (8013fac <vPortExitCritical+0x50>)
 8013f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013f8c:	4b07      	ldr	r3, [pc, #28]	@ (8013fac <vPortExitCritical+0x50>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d105      	bne.n	8013fa0 <vPortExitCritical+0x44>
 8013f94:	2300      	movs	r3, #0
 8013f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	f383 8811 	msr	BASEPRI, r3
}
 8013f9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013fa0:	bf00      	nop
 8013fa2:	370c      	adds	r7, #12
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013faa:	4770      	bx	lr
 8013fac:	20000048 	.word	0x20000048

08013fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013fb0:	f3ef 8009 	mrs	r0, PSP
 8013fb4:	f3bf 8f6f 	isb	sy
 8013fb8:	4b15      	ldr	r3, [pc, #84]	@ (8014010 <pxCurrentTCBConst>)
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	f01e 0f10 	tst.w	lr, #16
 8013fc0:	bf08      	it	eq
 8013fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fca:	6010      	str	r0, [r2, #0]
 8013fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013fd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013fd4:	f380 8811 	msr	BASEPRI, r0
 8013fd8:	f3bf 8f4f 	dsb	sy
 8013fdc:	f3bf 8f6f 	isb	sy
 8013fe0:	f7ff f9ca 	bl	8013378 <vTaskSwitchContext>
 8013fe4:	f04f 0000 	mov.w	r0, #0
 8013fe8:	f380 8811 	msr	BASEPRI, r0
 8013fec:	bc09      	pop	{r0, r3}
 8013fee:	6819      	ldr	r1, [r3, #0]
 8013ff0:	6808      	ldr	r0, [r1, #0]
 8013ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff6:	f01e 0f10 	tst.w	lr, #16
 8013ffa:	bf08      	it	eq
 8013ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014000:	f380 8809 	msr	PSP, r0
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	4770      	bx	lr
 801400a:	bf00      	nop
 801400c:	f3af 8000 	nop.w

08014010 <pxCurrentTCBConst>:
 8014010:	200017f4 	.word	0x200017f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014014:	bf00      	nop
 8014016:	bf00      	nop

08014018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
	__asm volatile
 801401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014022:	f383 8811 	msr	BASEPRI, r3
 8014026:	f3bf 8f6f 	isb	sy
 801402a:	f3bf 8f4f 	dsb	sy
 801402e:	607b      	str	r3, [r7, #4]
}
 8014030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014032:	f7ff f8e7 	bl	8013204 <xTaskIncrementTick>
 8014036:	4603      	mov	r3, r0
 8014038:	2b00      	cmp	r3, #0
 801403a:	d003      	beq.n	8014044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801403c:	4b06      	ldr	r3, [pc, #24]	@ (8014058 <SysTick_Handler+0x40>)
 801403e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014042:	601a      	str	r2, [r3, #0]
 8014044:	2300      	movs	r3, #0
 8014046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	f383 8811 	msr	BASEPRI, r3
}
 801404e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014050:	bf00      	nop
 8014052:	3708      	adds	r7, #8
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	e000ed04 	.word	0xe000ed04

0801405c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801405c:	b480      	push	{r7}
 801405e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014060:	4b0b      	ldr	r3, [pc, #44]	@ (8014090 <vPortSetupTimerInterrupt+0x34>)
 8014062:	2200      	movs	r2, #0
 8014064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014066:	4b0b      	ldr	r3, [pc, #44]	@ (8014094 <vPortSetupTimerInterrupt+0x38>)
 8014068:	2200      	movs	r2, #0
 801406a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801406c:	4b0a      	ldr	r3, [pc, #40]	@ (8014098 <vPortSetupTimerInterrupt+0x3c>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	4a0a      	ldr	r2, [pc, #40]	@ (801409c <vPortSetupTimerInterrupt+0x40>)
 8014072:	fba2 2303 	umull	r2, r3, r2, r3
 8014076:	099b      	lsrs	r3, r3, #6
 8014078:	4a09      	ldr	r2, [pc, #36]	@ (80140a0 <vPortSetupTimerInterrupt+0x44>)
 801407a:	3b01      	subs	r3, #1
 801407c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801407e:	4b04      	ldr	r3, [pc, #16]	@ (8014090 <vPortSetupTimerInterrupt+0x34>)
 8014080:	2207      	movs	r2, #7
 8014082:	601a      	str	r2, [r3, #0]
}
 8014084:	bf00      	nop
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop
 8014090:	e000e010 	.word	0xe000e010
 8014094:	e000e018 	.word	0xe000e018
 8014098:	20000024 	.word	0x20000024
 801409c:	10624dd3 	.word	0x10624dd3
 80140a0:	e000e014 	.word	0xe000e014

080140a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80140a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80140b4 <vPortEnableVFP+0x10>
 80140a8:	6801      	ldr	r1, [r0, #0]
 80140aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80140ae:	6001      	str	r1, [r0, #0]
 80140b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80140b2:	bf00      	nop
 80140b4:	e000ed88 	.word	0xe000ed88

080140b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80140b8:	b480      	push	{r7}
 80140ba:	b085      	sub	sp, #20
 80140bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80140be:	f3ef 8305 	mrs	r3, IPSR
 80140c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2b0f      	cmp	r3, #15
 80140c8:	d915      	bls.n	80140f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80140ca:	4a18      	ldr	r2, [pc, #96]	@ (801412c <vPortValidateInterruptPriority+0x74>)
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	4413      	add	r3, r2
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80140d4:	4b16      	ldr	r3, [pc, #88]	@ (8014130 <vPortValidateInterruptPriority+0x78>)
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	7afa      	ldrb	r2, [r7, #11]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d20b      	bcs.n	80140f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80140de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140e2:	f383 8811 	msr	BASEPRI, r3
 80140e6:	f3bf 8f6f 	isb	sy
 80140ea:	f3bf 8f4f 	dsb	sy
 80140ee:	607b      	str	r3, [r7, #4]
}
 80140f0:	bf00      	nop
 80140f2:	bf00      	nop
 80140f4:	e7fd      	b.n	80140f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80140f6:	4b0f      	ldr	r3, [pc, #60]	@ (8014134 <vPortValidateInterruptPriority+0x7c>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80140fe:	4b0e      	ldr	r3, [pc, #56]	@ (8014138 <vPortValidateInterruptPriority+0x80>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	429a      	cmp	r2, r3
 8014104:	d90b      	bls.n	801411e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801410a:	f383 8811 	msr	BASEPRI, r3
 801410e:	f3bf 8f6f 	isb	sy
 8014112:	f3bf 8f4f 	dsb	sy
 8014116:	603b      	str	r3, [r7, #0]
}
 8014118:	bf00      	nop
 801411a:	bf00      	nop
 801411c:	e7fd      	b.n	801411a <vPortValidateInterruptPriority+0x62>
	}
 801411e:	bf00      	nop
 8014120:	3714      	adds	r7, #20
 8014122:	46bd      	mov	sp, r7
 8014124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014128:	4770      	bx	lr
 801412a:	bf00      	nop
 801412c:	e000e3f0 	.word	0xe000e3f0
 8014130:	20001920 	.word	0x20001920
 8014134:	e000ed0c 	.word	0xe000ed0c
 8014138:	20001924 	.word	0x20001924

0801413c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b08a      	sub	sp, #40	@ 0x28
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014144:	2300      	movs	r3, #0
 8014146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014148:	f7fe ffb0 	bl	80130ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801414c:	4b5c      	ldr	r3, [pc, #368]	@ (80142c0 <pvPortMalloc+0x184>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014154:	f000 f924 	bl	80143a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014158:	4b5a      	ldr	r3, [pc, #360]	@ (80142c4 <pvPortMalloc+0x188>)
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	4013      	ands	r3, r2
 8014160:	2b00      	cmp	r3, #0
 8014162:	f040 8095 	bne.w	8014290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d01e      	beq.n	80141aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801416c:	2208      	movs	r2, #8
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	4413      	add	r3, r2
 8014172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f003 0307 	and.w	r3, r3, #7
 801417a:	2b00      	cmp	r3, #0
 801417c:	d015      	beq.n	80141aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f023 0307 	bic.w	r3, r3, #7
 8014184:	3308      	adds	r3, #8
 8014186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f003 0307 	and.w	r3, r3, #7
 801418e:	2b00      	cmp	r3, #0
 8014190:	d00b      	beq.n	80141aa <pvPortMalloc+0x6e>
	__asm volatile
 8014192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014196:	f383 8811 	msr	BASEPRI, r3
 801419a:	f3bf 8f6f 	isb	sy
 801419e:	f3bf 8f4f 	dsb	sy
 80141a2:	617b      	str	r3, [r7, #20]
}
 80141a4:	bf00      	nop
 80141a6:	bf00      	nop
 80141a8:	e7fd      	b.n	80141a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d06f      	beq.n	8014290 <pvPortMalloc+0x154>
 80141b0:	4b45      	ldr	r3, [pc, #276]	@ (80142c8 <pvPortMalloc+0x18c>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d86a      	bhi.n	8014290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80141ba:	4b44      	ldr	r3, [pc, #272]	@ (80142cc <pvPortMalloc+0x190>)
 80141bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80141be:	4b43      	ldr	r3, [pc, #268]	@ (80142cc <pvPortMalloc+0x190>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141c4:	e004      	b.n	80141d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80141c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80141ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d903      	bls.n	80141e2 <pvPortMalloc+0xa6>
 80141da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d1f1      	bne.n	80141c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80141e2:	4b37      	ldr	r3, [pc, #220]	@ (80142c0 <pvPortMalloc+0x184>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d051      	beq.n	8014290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80141ec:	6a3b      	ldr	r3, [r7, #32]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2208      	movs	r2, #8
 80141f2:	4413      	add	r3, r2
 80141f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80141f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f8:	681a      	ldr	r2, [r3, #0]
 80141fa:	6a3b      	ldr	r3, [r7, #32]
 80141fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80141fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014200:	685a      	ldr	r2, [r3, #4]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	1ad2      	subs	r2, r2, r3
 8014206:	2308      	movs	r3, #8
 8014208:	005b      	lsls	r3, r3, #1
 801420a:	429a      	cmp	r2, r3
 801420c:	d920      	bls.n	8014250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801420e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	4413      	add	r3, r2
 8014214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014216:	69bb      	ldr	r3, [r7, #24]
 8014218:	f003 0307 	and.w	r3, r3, #7
 801421c:	2b00      	cmp	r3, #0
 801421e:	d00b      	beq.n	8014238 <pvPortMalloc+0xfc>
	__asm volatile
 8014220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014224:	f383 8811 	msr	BASEPRI, r3
 8014228:	f3bf 8f6f 	isb	sy
 801422c:	f3bf 8f4f 	dsb	sy
 8014230:	613b      	str	r3, [r7, #16]
}
 8014232:	bf00      	nop
 8014234:	bf00      	nop
 8014236:	e7fd      	b.n	8014234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801423a:	685a      	ldr	r2, [r3, #4]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	1ad2      	subs	r2, r2, r3
 8014240:	69bb      	ldr	r3, [r7, #24]
 8014242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014246:	687a      	ldr	r2, [r7, #4]
 8014248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801424a:	69b8      	ldr	r0, [r7, #24]
 801424c:	f000 f90a 	bl	8014464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014250:	4b1d      	ldr	r3, [pc, #116]	@ (80142c8 <pvPortMalloc+0x18c>)
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	1ad3      	subs	r3, r2, r3
 801425a:	4a1b      	ldr	r2, [pc, #108]	@ (80142c8 <pvPortMalloc+0x18c>)
 801425c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801425e:	4b1a      	ldr	r3, [pc, #104]	@ (80142c8 <pvPortMalloc+0x18c>)
 8014260:	681a      	ldr	r2, [r3, #0]
 8014262:	4b1b      	ldr	r3, [pc, #108]	@ (80142d0 <pvPortMalloc+0x194>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	429a      	cmp	r2, r3
 8014268:	d203      	bcs.n	8014272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801426a:	4b17      	ldr	r3, [pc, #92]	@ (80142c8 <pvPortMalloc+0x18c>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4a18      	ldr	r2, [pc, #96]	@ (80142d0 <pvPortMalloc+0x194>)
 8014270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014274:	685a      	ldr	r2, [r3, #4]
 8014276:	4b13      	ldr	r3, [pc, #76]	@ (80142c4 <pvPortMalloc+0x188>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	431a      	orrs	r2, r3
 801427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801427e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014282:	2200      	movs	r2, #0
 8014284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014286:	4b13      	ldr	r3, [pc, #76]	@ (80142d4 <pvPortMalloc+0x198>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	3301      	adds	r3, #1
 801428c:	4a11      	ldr	r2, [pc, #68]	@ (80142d4 <pvPortMalloc+0x198>)
 801428e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014290:	f7fe ff1a 	bl	80130c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014294:	69fb      	ldr	r3, [r7, #28]
 8014296:	f003 0307 	and.w	r3, r3, #7
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00b      	beq.n	80142b6 <pvPortMalloc+0x17a>
	__asm volatile
 801429e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142a2:	f383 8811 	msr	BASEPRI, r3
 80142a6:	f3bf 8f6f 	isb	sy
 80142aa:	f3bf 8f4f 	dsb	sy
 80142ae:	60fb      	str	r3, [r7, #12]
}
 80142b0:	bf00      	nop
 80142b2:	bf00      	nop
 80142b4:	e7fd      	b.n	80142b2 <pvPortMalloc+0x176>
	return pvReturn;
 80142b6:	69fb      	ldr	r3, [r7, #28]
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3728      	adds	r7, #40	@ 0x28
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	20004810 	.word	0x20004810
 80142c4:	20004824 	.word	0x20004824
 80142c8:	20004814 	.word	0x20004814
 80142cc:	20004808 	.word	0x20004808
 80142d0:	20004818 	.word	0x20004818
 80142d4:	2000481c 	.word	0x2000481c

080142d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b086      	sub	sp, #24
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d04f      	beq.n	801438a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80142ea:	2308      	movs	r3, #8
 80142ec:	425b      	negs	r3, r3
 80142ee:	697a      	ldr	r2, [r7, #20]
 80142f0:	4413      	add	r3, r2
 80142f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80142f8:	693b      	ldr	r3, [r7, #16]
 80142fa:	685a      	ldr	r2, [r3, #4]
 80142fc:	4b25      	ldr	r3, [pc, #148]	@ (8014394 <vPortFree+0xbc>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	4013      	ands	r3, r2
 8014302:	2b00      	cmp	r3, #0
 8014304:	d10b      	bne.n	801431e <vPortFree+0x46>
	__asm volatile
 8014306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801430a:	f383 8811 	msr	BASEPRI, r3
 801430e:	f3bf 8f6f 	isb	sy
 8014312:	f3bf 8f4f 	dsb	sy
 8014316:	60fb      	str	r3, [r7, #12]
}
 8014318:	bf00      	nop
 801431a:	bf00      	nop
 801431c:	e7fd      	b.n	801431a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801431e:	693b      	ldr	r3, [r7, #16]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00b      	beq.n	801433e <vPortFree+0x66>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	60bb      	str	r3, [r7, #8]
}
 8014338:	bf00      	nop
 801433a:	bf00      	nop
 801433c:	e7fd      	b.n	801433a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	685a      	ldr	r2, [r3, #4]
 8014342:	4b14      	ldr	r3, [pc, #80]	@ (8014394 <vPortFree+0xbc>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	4013      	ands	r3, r2
 8014348:	2b00      	cmp	r3, #0
 801434a:	d01e      	beq.n	801438a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d11a      	bne.n	801438a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	685a      	ldr	r2, [r3, #4]
 8014358:	4b0e      	ldr	r3, [pc, #56]	@ (8014394 <vPortFree+0xbc>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	43db      	mvns	r3, r3
 801435e:	401a      	ands	r2, r3
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014364:	f7fe fea2 	bl	80130ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	685a      	ldr	r2, [r3, #4]
 801436c:	4b0a      	ldr	r3, [pc, #40]	@ (8014398 <vPortFree+0xc0>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	4413      	add	r3, r2
 8014372:	4a09      	ldr	r2, [pc, #36]	@ (8014398 <vPortFree+0xc0>)
 8014374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014376:	6938      	ldr	r0, [r7, #16]
 8014378:	f000 f874 	bl	8014464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801437c:	4b07      	ldr	r3, [pc, #28]	@ (801439c <vPortFree+0xc4>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	3301      	adds	r3, #1
 8014382:	4a06      	ldr	r2, [pc, #24]	@ (801439c <vPortFree+0xc4>)
 8014384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014386:	f7fe fe9f 	bl	80130c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801438a:	bf00      	nop
 801438c:	3718      	adds	r7, #24
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
 8014392:	bf00      	nop
 8014394:	20004824 	.word	0x20004824
 8014398:	20004814 	.word	0x20004814
 801439c:	20004820 	.word	0x20004820

080143a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80143a0:	b480      	push	{r7}
 80143a2:	b085      	sub	sp, #20
 80143a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80143a6:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80143aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80143ac:	4b27      	ldr	r3, [pc, #156]	@ (801444c <prvHeapInit+0xac>)
 80143ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f003 0307 	and.w	r3, r3, #7
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d00c      	beq.n	80143d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	3307      	adds	r3, #7
 80143be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	f023 0307 	bic.w	r3, r3, #7
 80143c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80143c8:	68ba      	ldr	r2, [r7, #8]
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	1ad3      	subs	r3, r2, r3
 80143ce:	4a1f      	ldr	r2, [pc, #124]	@ (801444c <prvHeapInit+0xac>)
 80143d0:	4413      	add	r3, r2
 80143d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80143d8:	4a1d      	ldr	r2, [pc, #116]	@ (8014450 <prvHeapInit+0xb0>)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80143de:	4b1c      	ldr	r3, [pc, #112]	@ (8014450 <prvHeapInit+0xb0>)
 80143e0:	2200      	movs	r2, #0
 80143e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	68ba      	ldr	r2, [r7, #8]
 80143e8:	4413      	add	r3, r2
 80143ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80143ec:	2208      	movs	r2, #8
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	1a9b      	subs	r3, r3, r2
 80143f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f023 0307 	bic.w	r3, r3, #7
 80143fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	4a15      	ldr	r2, [pc, #84]	@ (8014454 <prvHeapInit+0xb4>)
 8014400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014402:	4b14      	ldr	r3, [pc, #80]	@ (8014454 <prvHeapInit+0xb4>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	2200      	movs	r2, #0
 8014408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801440a:	4b12      	ldr	r3, [pc, #72]	@ (8014454 <prvHeapInit+0xb4>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2200      	movs	r2, #0
 8014410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	68fa      	ldr	r2, [r7, #12]
 801441a:	1ad2      	subs	r2, r2, r3
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014420:	4b0c      	ldr	r3, [pc, #48]	@ (8014454 <prvHeapInit+0xb4>)
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	4a0a      	ldr	r2, [pc, #40]	@ (8014458 <prvHeapInit+0xb8>)
 801442e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	4a09      	ldr	r2, [pc, #36]	@ (801445c <prvHeapInit+0xbc>)
 8014436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014438:	4b09      	ldr	r3, [pc, #36]	@ (8014460 <prvHeapInit+0xc0>)
 801443a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801443e:	601a      	str	r2, [r3, #0]
}
 8014440:	bf00      	nop
 8014442:	3714      	adds	r7, #20
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	20001928 	.word	0x20001928
 8014450:	20004808 	.word	0x20004808
 8014454:	20004810 	.word	0x20004810
 8014458:	20004818 	.word	0x20004818
 801445c:	20004814 	.word	0x20004814
 8014460:	20004824 	.word	0x20004824

08014464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014464:	b480      	push	{r7}
 8014466:	b085      	sub	sp, #20
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801446c:	4b28      	ldr	r3, [pc, #160]	@ (8014510 <prvInsertBlockIntoFreeList+0xac>)
 801446e:	60fb      	str	r3, [r7, #12]
 8014470:	e002      	b.n	8014478 <prvInsertBlockIntoFreeList+0x14>
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	60fb      	str	r3, [r7, #12]
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	687a      	ldr	r2, [r7, #4]
 801447e:	429a      	cmp	r2, r3
 8014480:	d8f7      	bhi.n	8014472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	685b      	ldr	r3, [r3, #4]
 801448a:	68ba      	ldr	r2, [r7, #8]
 801448c:	4413      	add	r3, r2
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	429a      	cmp	r2, r3
 8014492:	d108      	bne.n	80144a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	685a      	ldr	r2, [r3, #4]
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	685b      	ldr	r3, [r3, #4]
 801449c:	441a      	add	r2, r3
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	68ba      	ldr	r2, [r7, #8]
 80144b0:	441a      	add	r2, r3
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	429a      	cmp	r2, r3
 80144b8:	d118      	bne.n	80144ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	681a      	ldr	r2, [r3, #0]
 80144be:	4b15      	ldr	r3, [pc, #84]	@ (8014514 <prvInsertBlockIntoFreeList+0xb0>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d00d      	beq.n	80144e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	685a      	ldr	r2, [r3, #4]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	441a      	add	r2, r3
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	681a      	ldr	r2, [r3, #0]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	601a      	str	r2, [r3, #0]
 80144e0:	e008      	b.n	80144f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80144e2:	4b0c      	ldr	r3, [pc, #48]	@ (8014514 <prvInsertBlockIntoFreeList+0xb0>)
 80144e4:	681a      	ldr	r2, [r3, #0]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	601a      	str	r2, [r3, #0]
 80144ea:	e003      	b.n	80144f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	681a      	ldr	r2, [r3, #0]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80144f4:	68fa      	ldr	r2, [r7, #12]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d002      	beq.n	8014502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014502:	bf00      	nop
 8014504:	3714      	adds	r7, #20
 8014506:	46bd      	mov	sp, r7
 8014508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450c:	4770      	bx	lr
 801450e:	bf00      	nop
 8014510:	20004808 	.word	0x20004808
 8014514:	20004810 	.word	0x20004810

08014518 <__cvt>:
 8014518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801451c:	ec57 6b10 	vmov	r6, r7, d0
 8014520:	2f00      	cmp	r7, #0
 8014522:	460c      	mov	r4, r1
 8014524:	4619      	mov	r1, r3
 8014526:	463b      	mov	r3, r7
 8014528:	bfbb      	ittet	lt
 801452a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801452e:	461f      	movlt	r7, r3
 8014530:	2300      	movge	r3, #0
 8014532:	232d      	movlt	r3, #45	@ 0x2d
 8014534:	700b      	strb	r3, [r1, #0]
 8014536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014538:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801453c:	4691      	mov	r9, r2
 801453e:	f023 0820 	bic.w	r8, r3, #32
 8014542:	bfbc      	itt	lt
 8014544:	4632      	movlt	r2, r6
 8014546:	4616      	movlt	r6, r2
 8014548:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801454c:	d005      	beq.n	801455a <__cvt+0x42>
 801454e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014552:	d100      	bne.n	8014556 <__cvt+0x3e>
 8014554:	3401      	adds	r4, #1
 8014556:	2102      	movs	r1, #2
 8014558:	e000      	b.n	801455c <__cvt+0x44>
 801455a:	2103      	movs	r1, #3
 801455c:	ab03      	add	r3, sp, #12
 801455e:	9301      	str	r3, [sp, #4]
 8014560:	ab02      	add	r3, sp, #8
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	ec47 6b10 	vmov	d0, r6, r7
 8014568:	4653      	mov	r3, sl
 801456a:	4622      	mov	r2, r4
 801456c:	f001 fa04 	bl	8015978 <_dtoa_r>
 8014570:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014574:	4605      	mov	r5, r0
 8014576:	d119      	bne.n	80145ac <__cvt+0x94>
 8014578:	f019 0f01 	tst.w	r9, #1
 801457c:	d00e      	beq.n	801459c <__cvt+0x84>
 801457e:	eb00 0904 	add.w	r9, r0, r4
 8014582:	2200      	movs	r2, #0
 8014584:	2300      	movs	r3, #0
 8014586:	4630      	mov	r0, r6
 8014588:	4639      	mov	r1, r7
 801458a:	f7ec fac5 	bl	8000b18 <__aeabi_dcmpeq>
 801458e:	b108      	cbz	r0, 8014594 <__cvt+0x7c>
 8014590:	f8cd 900c 	str.w	r9, [sp, #12]
 8014594:	2230      	movs	r2, #48	@ 0x30
 8014596:	9b03      	ldr	r3, [sp, #12]
 8014598:	454b      	cmp	r3, r9
 801459a:	d31e      	bcc.n	80145da <__cvt+0xc2>
 801459c:	9b03      	ldr	r3, [sp, #12]
 801459e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80145a0:	1b5b      	subs	r3, r3, r5
 80145a2:	4628      	mov	r0, r5
 80145a4:	6013      	str	r3, [r2, #0]
 80145a6:	b004      	add	sp, #16
 80145a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80145b0:	eb00 0904 	add.w	r9, r0, r4
 80145b4:	d1e5      	bne.n	8014582 <__cvt+0x6a>
 80145b6:	7803      	ldrb	r3, [r0, #0]
 80145b8:	2b30      	cmp	r3, #48	@ 0x30
 80145ba:	d10a      	bne.n	80145d2 <__cvt+0xba>
 80145bc:	2200      	movs	r2, #0
 80145be:	2300      	movs	r3, #0
 80145c0:	4630      	mov	r0, r6
 80145c2:	4639      	mov	r1, r7
 80145c4:	f7ec faa8 	bl	8000b18 <__aeabi_dcmpeq>
 80145c8:	b918      	cbnz	r0, 80145d2 <__cvt+0xba>
 80145ca:	f1c4 0401 	rsb	r4, r4, #1
 80145ce:	f8ca 4000 	str.w	r4, [sl]
 80145d2:	f8da 3000 	ldr.w	r3, [sl]
 80145d6:	4499      	add	r9, r3
 80145d8:	e7d3      	b.n	8014582 <__cvt+0x6a>
 80145da:	1c59      	adds	r1, r3, #1
 80145dc:	9103      	str	r1, [sp, #12]
 80145de:	701a      	strb	r2, [r3, #0]
 80145e0:	e7d9      	b.n	8014596 <__cvt+0x7e>

080145e2 <__exponent>:
 80145e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145e4:	2900      	cmp	r1, #0
 80145e6:	bfba      	itte	lt
 80145e8:	4249      	neglt	r1, r1
 80145ea:	232d      	movlt	r3, #45	@ 0x2d
 80145ec:	232b      	movge	r3, #43	@ 0x2b
 80145ee:	2909      	cmp	r1, #9
 80145f0:	7002      	strb	r2, [r0, #0]
 80145f2:	7043      	strb	r3, [r0, #1]
 80145f4:	dd29      	ble.n	801464a <__exponent+0x68>
 80145f6:	f10d 0307 	add.w	r3, sp, #7
 80145fa:	461d      	mov	r5, r3
 80145fc:	270a      	movs	r7, #10
 80145fe:	461a      	mov	r2, r3
 8014600:	fbb1 f6f7 	udiv	r6, r1, r7
 8014604:	fb07 1416 	mls	r4, r7, r6, r1
 8014608:	3430      	adds	r4, #48	@ 0x30
 801460a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801460e:	460c      	mov	r4, r1
 8014610:	2c63      	cmp	r4, #99	@ 0x63
 8014612:	f103 33ff 	add.w	r3, r3, #4294967295
 8014616:	4631      	mov	r1, r6
 8014618:	dcf1      	bgt.n	80145fe <__exponent+0x1c>
 801461a:	3130      	adds	r1, #48	@ 0x30
 801461c:	1e94      	subs	r4, r2, #2
 801461e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014622:	1c41      	adds	r1, r0, #1
 8014624:	4623      	mov	r3, r4
 8014626:	42ab      	cmp	r3, r5
 8014628:	d30a      	bcc.n	8014640 <__exponent+0x5e>
 801462a:	f10d 0309 	add.w	r3, sp, #9
 801462e:	1a9b      	subs	r3, r3, r2
 8014630:	42ac      	cmp	r4, r5
 8014632:	bf88      	it	hi
 8014634:	2300      	movhi	r3, #0
 8014636:	3302      	adds	r3, #2
 8014638:	4403      	add	r3, r0
 801463a:	1a18      	subs	r0, r3, r0
 801463c:	b003      	add	sp, #12
 801463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014640:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014644:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014648:	e7ed      	b.n	8014626 <__exponent+0x44>
 801464a:	2330      	movs	r3, #48	@ 0x30
 801464c:	3130      	adds	r1, #48	@ 0x30
 801464e:	7083      	strb	r3, [r0, #2]
 8014650:	70c1      	strb	r1, [r0, #3]
 8014652:	1d03      	adds	r3, r0, #4
 8014654:	e7f1      	b.n	801463a <__exponent+0x58>
	...

08014658 <_printf_float>:
 8014658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801465c:	b08d      	sub	sp, #52	@ 0x34
 801465e:	460c      	mov	r4, r1
 8014660:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014664:	4616      	mov	r6, r2
 8014666:	461f      	mov	r7, r3
 8014668:	4605      	mov	r5, r0
 801466a:	f001 f811 	bl	8015690 <_localeconv_r>
 801466e:	6803      	ldr	r3, [r0, #0]
 8014670:	9304      	str	r3, [sp, #16]
 8014672:	4618      	mov	r0, r3
 8014674:	f7eb fe24 	bl	80002c0 <strlen>
 8014678:	2300      	movs	r3, #0
 801467a:	930a      	str	r3, [sp, #40]	@ 0x28
 801467c:	f8d8 3000 	ldr.w	r3, [r8]
 8014680:	9005      	str	r0, [sp, #20]
 8014682:	3307      	adds	r3, #7
 8014684:	f023 0307 	bic.w	r3, r3, #7
 8014688:	f103 0208 	add.w	r2, r3, #8
 801468c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014690:	f8d4 b000 	ldr.w	fp, [r4]
 8014694:	f8c8 2000 	str.w	r2, [r8]
 8014698:	e9d3 8900 	ldrd	r8, r9, [r3]
 801469c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80146a0:	9307      	str	r3, [sp, #28]
 80146a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80146a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80146aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146ae:	4b9c      	ldr	r3, [pc, #624]	@ (8014920 <_printf_float+0x2c8>)
 80146b0:	f04f 32ff 	mov.w	r2, #4294967295
 80146b4:	f7ec fa62 	bl	8000b7c <__aeabi_dcmpun>
 80146b8:	bb70      	cbnz	r0, 8014718 <_printf_float+0xc0>
 80146ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146be:	4b98      	ldr	r3, [pc, #608]	@ (8014920 <_printf_float+0x2c8>)
 80146c0:	f04f 32ff 	mov.w	r2, #4294967295
 80146c4:	f7ec fa3c 	bl	8000b40 <__aeabi_dcmple>
 80146c8:	bb30      	cbnz	r0, 8014718 <_printf_float+0xc0>
 80146ca:	2200      	movs	r2, #0
 80146cc:	2300      	movs	r3, #0
 80146ce:	4640      	mov	r0, r8
 80146d0:	4649      	mov	r1, r9
 80146d2:	f7ec fa2b 	bl	8000b2c <__aeabi_dcmplt>
 80146d6:	b110      	cbz	r0, 80146de <_printf_float+0x86>
 80146d8:	232d      	movs	r3, #45	@ 0x2d
 80146da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146de:	4a91      	ldr	r2, [pc, #580]	@ (8014924 <_printf_float+0x2cc>)
 80146e0:	4b91      	ldr	r3, [pc, #580]	@ (8014928 <_printf_float+0x2d0>)
 80146e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80146e6:	bf8c      	ite	hi
 80146e8:	4690      	movhi	r8, r2
 80146ea:	4698      	movls	r8, r3
 80146ec:	2303      	movs	r3, #3
 80146ee:	6123      	str	r3, [r4, #16]
 80146f0:	f02b 0304 	bic.w	r3, fp, #4
 80146f4:	6023      	str	r3, [r4, #0]
 80146f6:	f04f 0900 	mov.w	r9, #0
 80146fa:	9700      	str	r7, [sp, #0]
 80146fc:	4633      	mov	r3, r6
 80146fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014700:	4621      	mov	r1, r4
 8014702:	4628      	mov	r0, r5
 8014704:	f000 f9d2 	bl	8014aac <_printf_common>
 8014708:	3001      	adds	r0, #1
 801470a:	f040 808d 	bne.w	8014828 <_printf_float+0x1d0>
 801470e:	f04f 30ff 	mov.w	r0, #4294967295
 8014712:	b00d      	add	sp, #52	@ 0x34
 8014714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014718:	4642      	mov	r2, r8
 801471a:	464b      	mov	r3, r9
 801471c:	4640      	mov	r0, r8
 801471e:	4649      	mov	r1, r9
 8014720:	f7ec fa2c 	bl	8000b7c <__aeabi_dcmpun>
 8014724:	b140      	cbz	r0, 8014738 <_printf_float+0xe0>
 8014726:	464b      	mov	r3, r9
 8014728:	2b00      	cmp	r3, #0
 801472a:	bfbc      	itt	lt
 801472c:	232d      	movlt	r3, #45	@ 0x2d
 801472e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014732:	4a7e      	ldr	r2, [pc, #504]	@ (801492c <_printf_float+0x2d4>)
 8014734:	4b7e      	ldr	r3, [pc, #504]	@ (8014930 <_printf_float+0x2d8>)
 8014736:	e7d4      	b.n	80146e2 <_printf_float+0x8a>
 8014738:	6863      	ldr	r3, [r4, #4]
 801473a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801473e:	9206      	str	r2, [sp, #24]
 8014740:	1c5a      	adds	r2, r3, #1
 8014742:	d13b      	bne.n	80147bc <_printf_float+0x164>
 8014744:	2306      	movs	r3, #6
 8014746:	6063      	str	r3, [r4, #4]
 8014748:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801474c:	2300      	movs	r3, #0
 801474e:	6022      	str	r2, [r4, #0]
 8014750:	9303      	str	r3, [sp, #12]
 8014752:	ab0a      	add	r3, sp, #40	@ 0x28
 8014754:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014758:	ab09      	add	r3, sp, #36	@ 0x24
 801475a:	9300      	str	r3, [sp, #0]
 801475c:	6861      	ldr	r1, [r4, #4]
 801475e:	ec49 8b10 	vmov	d0, r8, r9
 8014762:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014766:	4628      	mov	r0, r5
 8014768:	f7ff fed6 	bl	8014518 <__cvt>
 801476c:	9b06      	ldr	r3, [sp, #24]
 801476e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014770:	2b47      	cmp	r3, #71	@ 0x47
 8014772:	4680      	mov	r8, r0
 8014774:	d129      	bne.n	80147ca <_printf_float+0x172>
 8014776:	1cc8      	adds	r0, r1, #3
 8014778:	db02      	blt.n	8014780 <_printf_float+0x128>
 801477a:	6863      	ldr	r3, [r4, #4]
 801477c:	4299      	cmp	r1, r3
 801477e:	dd41      	ble.n	8014804 <_printf_float+0x1ac>
 8014780:	f1aa 0a02 	sub.w	sl, sl, #2
 8014784:	fa5f fa8a 	uxtb.w	sl, sl
 8014788:	3901      	subs	r1, #1
 801478a:	4652      	mov	r2, sl
 801478c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014790:	9109      	str	r1, [sp, #36]	@ 0x24
 8014792:	f7ff ff26 	bl	80145e2 <__exponent>
 8014796:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014798:	1813      	adds	r3, r2, r0
 801479a:	2a01      	cmp	r2, #1
 801479c:	4681      	mov	r9, r0
 801479e:	6123      	str	r3, [r4, #16]
 80147a0:	dc02      	bgt.n	80147a8 <_printf_float+0x150>
 80147a2:	6822      	ldr	r2, [r4, #0]
 80147a4:	07d2      	lsls	r2, r2, #31
 80147a6:	d501      	bpl.n	80147ac <_printf_float+0x154>
 80147a8:	3301      	adds	r3, #1
 80147aa:	6123      	str	r3, [r4, #16]
 80147ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d0a2      	beq.n	80146fa <_printf_float+0xa2>
 80147b4:	232d      	movs	r3, #45	@ 0x2d
 80147b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80147ba:	e79e      	b.n	80146fa <_printf_float+0xa2>
 80147bc:	9a06      	ldr	r2, [sp, #24]
 80147be:	2a47      	cmp	r2, #71	@ 0x47
 80147c0:	d1c2      	bne.n	8014748 <_printf_float+0xf0>
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d1c0      	bne.n	8014748 <_printf_float+0xf0>
 80147c6:	2301      	movs	r3, #1
 80147c8:	e7bd      	b.n	8014746 <_printf_float+0xee>
 80147ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80147ce:	d9db      	bls.n	8014788 <_printf_float+0x130>
 80147d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80147d4:	d118      	bne.n	8014808 <_printf_float+0x1b0>
 80147d6:	2900      	cmp	r1, #0
 80147d8:	6863      	ldr	r3, [r4, #4]
 80147da:	dd0b      	ble.n	80147f4 <_printf_float+0x19c>
 80147dc:	6121      	str	r1, [r4, #16]
 80147de:	b913      	cbnz	r3, 80147e6 <_printf_float+0x18e>
 80147e0:	6822      	ldr	r2, [r4, #0]
 80147e2:	07d0      	lsls	r0, r2, #31
 80147e4:	d502      	bpl.n	80147ec <_printf_float+0x194>
 80147e6:	3301      	adds	r3, #1
 80147e8:	440b      	add	r3, r1
 80147ea:	6123      	str	r3, [r4, #16]
 80147ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80147ee:	f04f 0900 	mov.w	r9, #0
 80147f2:	e7db      	b.n	80147ac <_printf_float+0x154>
 80147f4:	b913      	cbnz	r3, 80147fc <_printf_float+0x1a4>
 80147f6:	6822      	ldr	r2, [r4, #0]
 80147f8:	07d2      	lsls	r2, r2, #31
 80147fa:	d501      	bpl.n	8014800 <_printf_float+0x1a8>
 80147fc:	3302      	adds	r3, #2
 80147fe:	e7f4      	b.n	80147ea <_printf_float+0x192>
 8014800:	2301      	movs	r3, #1
 8014802:	e7f2      	b.n	80147ea <_printf_float+0x192>
 8014804:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801480a:	4299      	cmp	r1, r3
 801480c:	db05      	blt.n	801481a <_printf_float+0x1c2>
 801480e:	6823      	ldr	r3, [r4, #0]
 8014810:	6121      	str	r1, [r4, #16]
 8014812:	07d8      	lsls	r0, r3, #31
 8014814:	d5ea      	bpl.n	80147ec <_printf_float+0x194>
 8014816:	1c4b      	adds	r3, r1, #1
 8014818:	e7e7      	b.n	80147ea <_printf_float+0x192>
 801481a:	2900      	cmp	r1, #0
 801481c:	bfd4      	ite	le
 801481e:	f1c1 0202 	rsble	r2, r1, #2
 8014822:	2201      	movgt	r2, #1
 8014824:	4413      	add	r3, r2
 8014826:	e7e0      	b.n	80147ea <_printf_float+0x192>
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	055a      	lsls	r2, r3, #21
 801482c:	d407      	bmi.n	801483e <_printf_float+0x1e6>
 801482e:	6923      	ldr	r3, [r4, #16]
 8014830:	4642      	mov	r2, r8
 8014832:	4631      	mov	r1, r6
 8014834:	4628      	mov	r0, r5
 8014836:	47b8      	blx	r7
 8014838:	3001      	adds	r0, #1
 801483a:	d12b      	bne.n	8014894 <_printf_float+0x23c>
 801483c:	e767      	b.n	801470e <_printf_float+0xb6>
 801483e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014842:	f240 80dd 	bls.w	8014a00 <_printf_float+0x3a8>
 8014846:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801484a:	2200      	movs	r2, #0
 801484c:	2300      	movs	r3, #0
 801484e:	f7ec f963 	bl	8000b18 <__aeabi_dcmpeq>
 8014852:	2800      	cmp	r0, #0
 8014854:	d033      	beq.n	80148be <_printf_float+0x266>
 8014856:	4a37      	ldr	r2, [pc, #220]	@ (8014934 <_printf_float+0x2dc>)
 8014858:	2301      	movs	r3, #1
 801485a:	4631      	mov	r1, r6
 801485c:	4628      	mov	r0, r5
 801485e:	47b8      	blx	r7
 8014860:	3001      	adds	r0, #1
 8014862:	f43f af54 	beq.w	801470e <_printf_float+0xb6>
 8014866:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801486a:	4543      	cmp	r3, r8
 801486c:	db02      	blt.n	8014874 <_printf_float+0x21c>
 801486e:	6823      	ldr	r3, [r4, #0]
 8014870:	07d8      	lsls	r0, r3, #31
 8014872:	d50f      	bpl.n	8014894 <_printf_float+0x23c>
 8014874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014878:	4631      	mov	r1, r6
 801487a:	4628      	mov	r0, r5
 801487c:	47b8      	blx	r7
 801487e:	3001      	adds	r0, #1
 8014880:	f43f af45 	beq.w	801470e <_printf_float+0xb6>
 8014884:	f04f 0900 	mov.w	r9, #0
 8014888:	f108 38ff 	add.w	r8, r8, #4294967295
 801488c:	f104 0a1a 	add.w	sl, r4, #26
 8014890:	45c8      	cmp	r8, r9
 8014892:	dc09      	bgt.n	80148a8 <_printf_float+0x250>
 8014894:	6823      	ldr	r3, [r4, #0]
 8014896:	079b      	lsls	r3, r3, #30
 8014898:	f100 8103 	bmi.w	8014aa2 <_printf_float+0x44a>
 801489c:	68e0      	ldr	r0, [r4, #12]
 801489e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80148a0:	4298      	cmp	r0, r3
 80148a2:	bfb8      	it	lt
 80148a4:	4618      	movlt	r0, r3
 80148a6:	e734      	b.n	8014712 <_printf_float+0xba>
 80148a8:	2301      	movs	r3, #1
 80148aa:	4652      	mov	r2, sl
 80148ac:	4631      	mov	r1, r6
 80148ae:	4628      	mov	r0, r5
 80148b0:	47b8      	blx	r7
 80148b2:	3001      	adds	r0, #1
 80148b4:	f43f af2b 	beq.w	801470e <_printf_float+0xb6>
 80148b8:	f109 0901 	add.w	r9, r9, #1
 80148bc:	e7e8      	b.n	8014890 <_printf_float+0x238>
 80148be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	dc39      	bgt.n	8014938 <_printf_float+0x2e0>
 80148c4:	4a1b      	ldr	r2, [pc, #108]	@ (8014934 <_printf_float+0x2dc>)
 80148c6:	2301      	movs	r3, #1
 80148c8:	4631      	mov	r1, r6
 80148ca:	4628      	mov	r0, r5
 80148cc:	47b8      	blx	r7
 80148ce:	3001      	adds	r0, #1
 80148d0:	f43f af1d 	beq.w	801470e <_printf_float+0xb6>
 80148d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80148d8:	ea59 0303 	orrs.w	r3, r9, r3
 80148dc:	d102      	bne.n	80148e4 <_printf_float+0x28c>
 80148de:	6823      	ldr	r3, [r4, #0]
 80148e0:	07d9      	lsls	r1, r3, #31
 80148e2:	d5d7      	bpl.n	8014894 <_printf_float+0x23c>
 80148e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148e8:	4631      	mov	r1, r6
 80148ea:	4628      	mov	r0, r5
 80148ec:	47b8      	blx	r7
 80148ee:	3001      	adds	r0, #1
 80148f0:	f43f af0d 	beq.w	801470e <_printf_float+0xb6>
 80148f4:	f04f 0a00 	mov.w	sl, #0
 80148f8:	f104 0b1a 	add.w	fp, r4, #26
 80148fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148fe:	425b      	negs	r3, r3
 8014900:	4553      	cmp	r3, sl
 8014902:	dc01      	bgt.n	8014908 <_printf_float+0x2b0>
 8014904:	464b      	mov	r3, r9
 8014906:	e793      	b.n	8014830 <_printf_float+0x1d8>
 8014908:	2301      	movs	r3, #1
 801490a:	465a      	mov	r2, fp
 801490c:	4631      	mov	r1, r6
 801490e:	4628      	mov	r0, r5
 8014910:	47b8      	blx	r7
 8014912:	3001      	adds	r0, #1
 8014914:	f43f aefb 	beq.w	801470e <_printf_float+0xb6>
 8014918:	f10a 0a01 	add.w	sl, sl, #1
 801491c:	e7ee      	b.n	80148fc <_printf_float+0x2a4>
 801491e:	bf00      	nop
 8014920:	7fefffff 	.word	0x7fefffff
 8014924:	0801c890 	.word	0x0801c890
 8014928:	0801c88c 	.word	0x0801c88c
 801492c:	0801c898 	.word	0x0801c898
 8014930:	0801c894 	.word	0x0801c894
 8014934:	0801c89c 	.word	0x0801c89c
 8014938:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801493a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801493e:	4553      	cmp	r3, sl
 8014940:	bfa8      	it	ge
 8014942:	4653      	movge	r3, sl
 8014944:	2b00      	cmp	r3, #0
 8014946:	4699      	mov	r9, r3
 8014948:	dc36      	bgt.n	80149b8 <_printf_float+0x360>
 801494a:	f04f 0b00 	mov.w	fp, #0
 801494e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014952:	f104 021a 	add.w	r2, r4, #26
 8014956:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014958:	9306      	str	r3, [sp, #24]
 801495a:	eba3 0309 	sub.w	r3, r3, r9
 801495e:	455b      	cmp	r3, fp
 8014960:	dc31      	bgt.n	80149c6 <_printf_float+0x36e>
 8014962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014964:	459a      	cmp	sl, r3
 8014966:	dc3a      	bgt.n	80149de <_printf_float+0x386>
 8014968:	6823      	ldr	r3, [r4, #0]
 801496a:	07da      	lsls	r2, r3, #31
 801496c:	d437      	bmi.n	80149de <_printf_float+0x386>
 801496e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014970:	ebaa 0903 	sub.w	r9, sl, r3
 8014974:	9b06      	ldr	r3, [sp, #24]
 8014976:	ebaa 0303 	sub.w	r3, sl, r3
 801497a:	4599      	cmp	r9, r3
 801497c:	bfa8      	it	ge
 801497e:	4699      	movge	r9, r3
 8014980:	f1b9 0f00 	cmp.w	r9, #0
 8014984:	dc33      	bgt.n	80149ee <_printf_float+0x396>
 8014986:	f04f 0800 	mov.w	r8, #0
 801498a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801498e:	f104 0b1a 	add.w	fp, r4, #26
 8014992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014994:	ebaa 0303 	sub.w	r3, sl, r3
 8014998:	eba3 0309 	sub.w	r3, r3, r9
 801499c:	4543      	cmp	r3, r8
 801499e:	f77f af79 	ble.w	8014894 <_printf_float+0x23c>
 80149a2:	2301      	movs	r3, #1
 80149a4:	465a      	mov	r2, fp
 80149a6:	4631      	mov	r1, r6
 80149a8:	4628      	mov	r0, r5
 80149aa:	47b8      	blx	r7
 80149ac:	3001      	adds	r0, #1
 80149ae:	f43f aeae 	beq.w	801470e <_printf_float+0xb6>
 80149b2:	f108 0801 	add.w	r8, r8, #1
 80149b6:	e7ec      	b.n	8014992 <_printf_float+0x33a>
 80149b8:	4642      	mov	r2, r8
 80149ba:	4631      	mov	r1, r6
 80149bc:	4628      	mov	r0, r5
 80149be:	47b8      	blx	r7
 80149c0:	3001      	adds	r0, #1
 80149c2:	d1c2      	bne.n	801494a <_printf_float+0x2f2>
 80149c4:	e6a3      	b.n	801470e <_printf_float+0xb6>
 80149c6:	2301      	movs	r3, #1
 80149c8:	4631      	mov	r1, r6
 80149ca:	4628      	mov	r0, r5
 80149cc:	9206      	str	r2, [sp, #24]
 80149ce:	47b8      	blx	r7
 80149d0:	3001      	adds	r0, #1
 80149d2:	f43f ae9c 	beq.w	801470e <_printf_float+0xb6>
 80149d6:	9a06      	ldr	r2, [sp, #24]
 80149d8:	f10b 0b01 	add.w	fp, fp, #1
 80149dc:	e7bb      	b.n	8014956 <_printf_float+0x2fe>
 80149de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149e2:	4631      	mov	r1, r6
 80149e4:	4628      	mov	r0, r5
 80149e6:	47b8      	blx	r7
 80149e8:	3001      	adds	r0, #1
 80149ea:	d1c0      	bne.n	801496e <_printf_float+0x316>
 80149ec:	e68f      	b.n	801470e <_printf_float+0xb6>
 80149ee:	9a06      	ldr	r2, [sp, #24]
 80149f0:	464b      	mov	r3, r9
 80149f2:	4442      	add	r2, r8
 80149f4:	4631      	mov	r1, r6
 80149f6:	4628      	mov	r0, r5
 80149f8:	47b8      	blx	r7
 80149fa:	3001      	adds	r0, #1
 80149fc:	d1c3      	bne.n	8014986 <_printf_float+0x32e>
 80149fe:	e686      	b.n	801470e <_printf_float+0xb6>
 8014a00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014a04:	f1ba 0f01 	cmp.w	sl, #1
 8014a08:	dc01      	bgt.n	8014a0e <_printf_float+0x3b6>
 8014a0a:	07db      	lsls	r3, r3, #31
 8014a0c:	d536      	bpl.n	8014a7c <_printf_float+0x424>
 8014a0e:	2301      	movs	r3, #1
 8014a10:	4642      	mov	r2, r8
 8014a12:	4631      	mov	r1, r6
 8014a14:	4628      	mov	r0, r5
 8014a16:	47b8      	blx	r7
 8014a18:	3001      	adds	r0, #1
 8014a1a:	f43f ae78 	beq.w	801470e <_printf_float+0xb6>
 8014a1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a22:	4631      	mov	r1, r6
 8014a24:	4628      	mov	r0, r5
 8014a26:	47b8      	blx	r7
 8014a28:	3001      	adds	r0, #1
 8014a2a:	f43f ae70 	beq.w	801470e <_printf_float+0xb6>
 8014a2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014a32:	2200      	movs	r2, #0
 8014a34:	2300      	movs	r3, #0
 8014a36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a3a:	f7ec f86d 	bl	8000b18 <__aeabi_dcmpeq>
 8014a3e:	b9c0      	cbnz	r0, 8014a72 <_printf_float+0x41a>
 8014a40:	4653      	mov	r3, sl
 8014a42:	f108 0201 	add.w	r2, r8, #1
 8014a46:	4631      	mov	r1, r6
 8014a48:	4628      	mov	r0, r5
 8014a4a:	47b8      	blx	r7
 8014a4c:	3001      	adds	r0, #1
 8014a4e:	d10c      	bne.n	8014a6a <_printf_float+0x412>
 8014a50:	e65d      	b.n	801470e <_printf_float+0xb6>
 8014a52:	2301      	movs	r3, #1
 8014a54:	465a      	mov	r2, fp
 8014a56:	4631      	mov	r1, r6
 8014a58:	4628      	mov	r0, r5
 8014a5a:	47b8      	blx	r7
 8014a5c:	3001      	adds	r0, #1
 8014a5e:	f43f ae56 	beq.w	801470e <_printf_float+0xb6>
 8014a62:	f108 0801 	add.w	r8, r8, #1
 8014a66:	45d0      	cmp	r8, sl
 8014a68:	dbf3      	blt.n	8014a52 <_printf_float+0x3fa>
 8014a6a:	464b      	mov	r3, r9
 8014a6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014a70:	e6df      	b.n	8014832 <_printf_float+0x1da>
 8014a72:	f04f 0800 	mov.w	r8, #0
 8014a76:	f104 0b1a 	add.w	fp, r4, #26
 8014a7a:	e7f4      	b.n	8014a66 <_printf_float+0x40e>
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	4642      	mov	r2, r8
 8014a80:	e7e1      	b.n	8014a46 <_printf_float+0x3ee>
 8014a82:	2301      	movs	r3, #1
 8014a84:	464a      	mov	r2, r9
 8014a86:	4631      	mov	r1, r6
 8014a88:	4628      	mov	r0, r5
 8014a8a:	47b8      	blx	r7
 8014a8c:	3001      	adds	r0, #1
 8014a8e:	f43f ae3e 	beq.w	801470e <_printf_float+0xb6>
 8014a92:	f108 0801 	add.w	r8, r8, #1
 8014a96:	68e3      	ldr	r3, [r4, #12]
 8014a98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014a9a:	1a5b      	subs	r3, r3, r1
 8014a9c:	4543      	cmp	r3, r8
 8014a9e:	dcf0      	bgt.n	8014a82 <_printf_float+0x42a>
 8014aa0:	e6fc      	b.n	801489c <_printf_float+0x244>
 8014aa2:	f04f 0800 	mov.w	r8, #0
 8014aa6:	f104 0919 	add.w	r9, r4, #25
 8014aaa:	e7f4      	b.n	8014a96 <_printf_float+0x43e>

08014aac <_printf_common>:
 8014aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ab0:	4616      	mov	r6, r2
 8014ab2:	4698      	mov	r8, r3
 8014ab4:	688a      	ldr	r2, [r1, #8]
 8014ab6:	690b      	ldr	r3, [r1, #16]
 8014ab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014abc:	4293      	cmp	r3, r2
 8014abe:	bfb8      	it	lt
 8014ac0:	4613      	movlt	r3, r2
 8014ac2:	6033      	str	r3, [r6, #0]
 8014ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014ac8:	4607      	mov	r7, r0
 8014aca:	460c      	mov	r4, r1
 8014acc:	b10a      	cbz	r2, 8014ad2 <_printf_common+0x26>
 8014ace:	3301      	adds	r3, #1
 8014ad0:	6033      	str	r3, [r6, #0]
 8014ad2:	6823      	ldr	r3, [r4, #0]
 8014ad4:	0699      	lsls	r1, r3, #26
 8014ad6:	bf42      	ittt	mi
 8014ad8:	6833      	ldrmi	r3, [r6, #0]
 8014ada:	3302      	addmi	r3, #2
 8014adc:	6033      	strmi	r3, [r6, #0]
 8014ade:	6825      	ldr	r5, [r4, #0]
 8014ae0:	f015 0506 	ands.w	r5, r5, #6
 8014ae4:	d106      	bne.n	8014af4 <_printf_common+0x48>
 8014ae6:	f104 0a19 	add.w	sl, r4, #25
 8014aea:	68e3      	ldr	r3, [r4, #12]
 8014aec:	6832      	ldr	r2, [r6, #0]
 8014aee:	1a9b      	subs	r3, r3, r2
 8014af0:	42ab      	cmp	r3, r5
 8014af2:	dc26      	bgt.n	8014b42 <_printf_common+0x96>
 8014af4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014af8:	6822      	ldr	r2, [r4, #0]
 8014afa:	3b00      	subs	r3, #0
 8014afc:	bf18      	it	ne
 8014afe:	2301      	movne	r3, #1
 8014b00:	0692      	lsls	r2, r2, #26
 8014b02:	d42b      	bmi.n	8014b5c <_printf_common+0xb0>
 8014b04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014b08:	4641      	mov	r1, r8
 8014b0a:	4638      	mov	r0, r7
 8014b0c:	47c8      	blx	r9
 8014b0e:	3001      	adds	r0, #1
 8014b10:	d01e      	beq.n	8014b50 <_printf_common+0xa4>
 8014b12:	6823      	ldr	r3, [r4, #0]
 8014b14:	6922      	ldr	r2, [r4, #16]
 8014b16:	f003 0306 	and.w	r3, r3, #6
 8014b1a:	2b04      	cmp	r3, #4
 8014b1c:	bf02      	ittt	eq
 8014b1e:	68e5      	ldreq	r5, [r4, #12]
 8014b20:	6833      	ldreq	r3, [r6, #0]
 8014b22:	1aed      	subeq	r5, r5, r3
 8014b24:	68a3      	ldr	r3, [r4, #8]
 8014b26:	bf0c      	ite	eq
 8014b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b2c:	2500      	movne	r5, #0
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	bfc4      	itt	gt
 8014b32:	1a9b      	subgt	r3, r3, r2
 8014b34:	18ed      	addgt	r5, r5, r3
 8014b36:	2600      	movs	r6, #0
 8014b38:	341a      	adds	r4, #26
 8014b3a:	42b5      	cmp	r5, r6
 8014b3c:	d11a      	bne.n	8014b74 <_printf_common+0xc8>
 8014b3e:	2000      	movs	r0, #0
 8014b40:	e008      	b.n	8014b54 <_printf_common+0xa8>
 8014b42:	2301      	movs	r3, #1
 8014b44:	4652      	mov	r2, sl
 8014b46:	4641      	mov	r1, r8
 8014b48:	4638      	mov	r0, r7
 8014b4a:	47c8      	blx	r9
 8014b4c:	3001      	adds	r0, #1
 8014b4e:	d103      	bne.n	8014b58 <_printf_common+0xac>
 8014b50:	f04f 30ff 	mov.w	r0, #4294967295
 8014b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b58:	3501      	adds	r5, #1
 8014b5a:	e7c6      	b.n	8014aea <_printf_common+0x3e>
 8014b5c:	18e1      	adds	r1, r4, r3
 8014b5e:	1c5a      	adds	r2, r3, #1
 8014b60:	2030      	movs	r0, #48	@ 0x30
 8014b62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014b66:	4422      	add	r2, r4
 8014b68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014b6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014b70:	3302      	adds	r3, #2
 8014b72:	e7c7      	b.n	8014b04 <_printf_common+0x58>
 8014b74:	2301      	movs	r3, #1
 8014b76:	4622      	mov	r2, r4
 8014b78:	4641      	mov	r1, r8
 8014b7a:	4638      	mov	r0, r7
 8014b7c:	47c8      	blx	r9
 8014b7e:	3001      	adds	r0, #1
 8014b80:	d0e6      	beq.n	8014b50 <_printf_common+0xa4>
 8014b82:	3601      	adds	r6, #1
 8014b84:	e7d9      	b.n	8014b3a <_printf_common+0x8e>
	...

08014b88 <_printf_i>:
 8014b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b8c:	7e0f      	ldrb	r7, [r1, #24]
 8014b8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014b90:	2f78      	cmp	r7, #120	@ 0x78
 8014b92:	4691      	mov	r9, r2
 8014b94:	4680      	mov	r8, r0
 8014b96:	460c      	mov	r4, r1
 8014b98:	469a      	mov	sl, r3
 8014b9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014b9e:	d807      	bhi.n	8014bb0 <_printf_i+0x28>
 8014ba0:	2f62      	cmp	r7, #98	@ 0x62
 8014ba2:	d80a      	bhi.n	8014bba <_printf_i+0x32>
 8014ba4:	2f00      	cmp	r7, #0
 8014ba6:	f000 80d1 	beq.w	8014d4c <_printf_i+0x1c4>
 8014baa:	2f58      	cmp	r7, #88	@ 0x58
 8014bac:	f000 80b8 	beq.w	8014d20 <_printf_i+0x198>
 8014bb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014bb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014bb8:	e03a      	b.n	8014c30 <_printf_i+0xa8>
 8014bba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014bbe:	2b15      	cmp	r3, #21
 8014bc0:	d8f6      	bhi.n	8014bb0 <_printf_i+0x28>
 8014bc2:	a101      	add	r1, pc, #4	@ (adr r1, 8014bc8 <_printf_i+0x40>)
 8014bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014bc8:	08014c21 	.word	0x08014c21
 8014bcc:	08014c35 	.word	0x08014c35
 8014bd0:	08014bb1 	.word	0x08014bb1
 8014bd4:	08014bb1 	.word	0x08014bb1
 8014bd8:	08014bb1 	.word	0x08014bb1
 8014bdc:	08014bb1 	.word	0x08014bb1
 8014be0:	08014c35 	.word	0x08014c35
 8014be4:	08014bb1 	.word	0x08014bb1
 8014be8:	08014bb1 	.word	0x08014bb1
 8014bec:	08014bb1 	.word	0x08014bb1
 8014bf0:	08014bb1 	.word	0x08014bb1
 8014bf4:	08014d33 	.word	0x08014d33
 8014bf8:	08014c5f 	.word	0x08014c5f
 8014bfc:	08014ced 	.word	0x08014ced
 8014c00:	08014bb1 	.word	0x08014bb1
 8014c04:	08014bb1 	.word	0x08014bb1
 8014c08:	08014d55 	.word	0x08014d55
 8014c0c:	08014bb1 	.word	0x08014bb1
 8014c10:	08014c5f 	.word	0x08014c5f
 8014c14:	08014bb1 	.word	0x08014bb1
 8014c18:	08014bb1 	.word	0x08014bb1
 8014c1c:	08014cf5 	.word	0x08014cf5
 8014c20:	6833      	ldr	r3, [r6, #0]
 8014c22:	1d1a      	adds	r2, r3, #4
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	6032      	str	r2, [r6, #0]
 8014c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014c30:	2301      	movs	r3, #1
 8014c32:	e09c      	b.n	8014d6e <_printf_i+0x1e6>
 8014c34:	6833      	ldr	r3, [r6, #0]
 8014c36:	6820      	ldr	r0, [r4, #0]
 8014c38:	1d19      	adds	r1, r3, #4
 8014c3a:	6031      	str	r1, [r6, #0]
 8014c3c:	0606      	lsls	r6, r0, #24
 8014c3e:	d501      	bpl.n	8014c44 <_printf_i+0xbc>
 8014c40:	681d      	ldr	r5, [r3, #0]
 8014c42:	e003      	b.n	8014c4c <_printf_i+0xc4>
 8014c44:	0645      	lsls	r5, r0, #25
 8014c46:	d5fb      	bpl.n	8014c40 <_printf_i+0xb8>
 8014c48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014c4c:	2d00      	cmp	r5, #0
 8014c4e:	da03      	bge.n	8014c58 <_printf_i+0xd0>
 8014c50:	232d      	movs	r3, #45	@ 0x2d
 8014c52:	426d      	negs	r5, r5
 8014c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014c58:	4858      	ldr	r0, [pc, #352]	@ (8014dbc <_printf_i+0x234>)
 8014c5a:	230a      	movs	r3, #10
 8014c5c:	e011      	b.n	8014c82 <_printf_i+0xfa>
 8014c5e:	6821      	ldr	r1, [r4, #0]
 8014c60:	6833      	ldr	r3, [r6, #0]
 8014c62:	0608      	lsls	r0, r1, #24
 8014c64:	f853 5b04 	ldr.w	r5, [r3], #4
 8014c68:	d402      	bmi.n	8014c70 <_printf_i+0xe8>
 8014c6a:	0649      	lsls	r1, r1, #25
 8014c6c:	bf48      	it	mi
 8014c6e:	b2ad      	uxthmi	r5, r5
 8014c70:	2f6f      	cmp	r7, #111	@ 0x6f
 8014c72:	4852      	ldr	r0, [pc, #328]	@ (8014dbc <_printf_i+0x234>)
 8014c74:	6033      	str	r3, [r6, #0]
 8014c76:	bf14      	ite	ne
 8014c78:	230a      	movne	r3, #10
 8014c7a:	2308      	moveq	r3, #8
 8014c7c:	2100      	movs	r1, #0
 8014c7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014c82:	6866      	ldr	r6, [r4, #4]
 8014c84:	60a6      	str	r6, [r4, #8]
 8014c86:	2e00      	cmp	r6, #0
 8014c88:	db05      	blt.n	8014c96 <_printf_i+0x10e>
 8014c8a:	6821      	ldr	r1, [r4, #0]
 8014c8c:	432e      	orrs	r6, r5
 8014c8e:	f021 0104 	bic.w	r1, r1, #4
 8014c92:	6021      	str	r1, [r4, #0]
 8014c94:	d04b      	beq.n	8014d2e <_printf_i+0x1a6>
 8014c96:	4616      	mov	r6, r2
 8014c98:	fbb5 f1f3 	udiv	r1, r5, r3
 8014c9c:	fb03 5711 	mls	r7, r3, r1, r5
 8014ca0:	5dc7      	ldrb	r7, [r0, r7]
 8014ca2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014ca6:	462f      	mov	r7, r5
 8014ca8:	42bb      	cmp	r3, r7
 8014caa:	460d      	mov	r5, r1
 8014cac:	d9f4      	bls.n	8014c98 <_printf_i+0x110>
 8014cae:	2b08      	cmp	r3, #8
 8014cb0:	d10b      	bne.n	8014cca <_printf_i+0x142>
 8014cb2:	6823      	ldr	r3, [r4, #0]
 8014cb4:	07df      	lsls	r7, r3, #31
 8014cb6:	d508      	bpl.n	8014cca <_printf_i+0x142>
 8014cb8:	6923      	ldr	r3, [r4, #16]
 8014cba:	6861      	ldr	r1, [r4, #4]
 8014cbc:	4299      	cmp	r1, r3
 8014cbe:	bfde      	ittt	le
 8014cc0:	2330      	movle	r3, #48	@ 0x30
 8014cc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014cc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014cca:	1b92      	subs	r2, r2, r6
 8014ccc:	6122      	str	r2, [r4, #16]
 8014cce:	f8cd a000 	str.w	sl, [sp]
 8014cd2:	464b      	mov	r3, r9
 8014cd4:	aa03      	add	r2, sp, #12
 8014cd6:	4621      	mov	r1, r4
 8014cd8:	4640      	mov	r0, r8
 8014cda:	f7ff fee7 	bl	8014aac <_printf_common>
 8014cde:	3001      	adds	r0, #1
 8014ce0:	d14a      	bne.n	8014d78 <_printf_i+0x1f0>
 8014ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce6:	b004      	add	sp, #16
 8014ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cec:	6823      	ldr	r3, [r4, #0]
 8014cee:	f043 0320 	orr.w	r3, r3, #32
 8014cf2:	6023      	str	r3, [r4, #0]
 8014cf4:	4832      	ldr	r0, [pc, #200]	@ (8014dc0 <_printf_i+0x238>)
 8014cf6:	2778      	movs	r7, #120	@ 0x78
 8014cf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014cfc:	6823      	ldr	r3, [r4, #0]
 8014cfe:	6831      	ldr	r1, [r6, #0]
 8014d00:	061f      	lsls	r7, r3, #24
 8014d02:	f851 5b04 	ldr.w	r5, [r1], #4
 8014d06:	d402      	bmi.n	8014d0e <_printf_i+0x186>
 8014d08:	065f      	lsls	r7, r3, #25
 8014d0a:	bf48      	it	mi
 8014d0c:	b2ad      	uxthmi	r5, r5
 8014d0e:	6031      	str	r1, [r6, #0]
 8014d10:	07d9      	lsls	r1, r3, #31
 8014d12:	bf44      	itt	mi
 8014d14:	f043 0320 	orrmi.w	r3, r3, #32
 8014d18:	6023      	strmi	r3, [r4, #0]
 8014d1a:	b11d      	cbz	r5, 8014d24 <_printf_i+0x19c>
 8014d1c:	2310      	movs	r3, #16
 8014d1e:	e7ad      	b.n	8014c7c <_printf_i+0xf4>
 8014d20:	4826      	ldr	r0, [pc, #152]	@ (8014dbc <_printf_i+0x234>)
 8014d22:	e7e9      	b.n	8014cf8 <_printf_i+0x170>
 8014d24:	6823      	ldr	r3, [r4, #0]
 8014d26:	f023 0320 	bic.w	r3, r3, #32
 8014d2a:	6023      	str	r3, [r4, #0]
 8014d2c:	e7f6      	b.n	8014d1c <_printf_i+0x194>
 8014d2e:	4616      	mov	r6, r2
 8014d30:	e7bd      	b.n	8014cae <_printf_i+0x126>
 8014d32:	6833      	ldr	r3, [r6, #0]
 8014d34:	6825      	ldr	r5, [r4, #0]
 8014d36:	6961      	ldr	r1, [r4, #20]
 8014d38:	1d18      	adds	r0, r3, #4
 8014d3a:	6030      	str	r0, [r6, #0]
 8014d3c:	062e      	lsls	r6, r5, #24
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	d501      	bpl.n	8014d46 <_printf_i+0x1be>
 8014d42:	6019      	str	r1, [r3, #0]
 8014d44:	e002      	b.n	8014d4c <_printf_i+0x1c4>
 8014d46:	0668      	lsls	r0, r5, #25
 8014d48:	d5fb      	bpl.n	8014d42 <_printf_i+0x1ba>
 8014d4a:	8019      	strh	r1, [r3, #0]
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	6123      	str	r3, [r4, #16]
 8014d50:	4616      	mov	r6, r2
 8014d52:	e7bc      	b.n	8014cce <_printf_i+0x146>
 8014d54:	6833      	ldr	r3, [r6, #0]
 8014d56:	1d1a      	adds	r2, r3, #4
 8014d58:	6032      	str	r2, [r6, #0]
 8014d5a:	681e      	ldr	r6, [r3, #0]
 8014d5c:	6862      	ldr	r2, [r4, #4]
 8014d5e:	2100      	movs	r1, #0
 8014d60:	4630      	mov	r0, r6
 8014d62:	f7eb fa5d 	bl	8000220 <memchr>
 8014d66:	b108      	cbz	r0, 8014d6c <_printf_i+0x1e4>
 8014d68:	1b80      	subs	r0, r0, r6
 8014d6a:	6060      	str	r0, [r4, #4]
 8014d6c:	6863      	ldr	r3, [r4, #4]
 8014d6e:	6123      	str	r3, [r4, #16]
 8014d70:	2300      	movs	r3, #0
 8014d72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014d76:	e7aa      	b.n	8014cce <_printf_i+0x146>
 8014d78:	6923      	ldr	r3, [r4, #16]
 8014d7a:	4632      	mov	r2, r6
 8014d7c:	4649      	mov	r1, r9
 8014d7e:	4640      	mov	r0, r8
 8014d80:	47d0      	blx	sl
 8014d82:	3001      	adds	r0, #1
 8014d84:	d0ad      	beq.n	8014ce2 <_printf_i+0x15a>
 8014d86:	6823      	ldr	r3, [r4, #0]
 8014d88:	079b      	lsls	r3, r3, #30
 8014d8a:	d413      	bmi.n	8014db4 <_printf_i+0x22c>
 8014d8c:	68e0      	ldr	r0, [r4, #12]
 8014d8e:	9b03      	ldr	r3, [sp, #12]
 8014d90:	4298      	cmp	r0, r3
 8014d92:	bfb8      	it	lt
 8014d94:	4618      	movlt	r0, r3
 8014d96:	e7a6      	b.n	8014ce6 <_printf_i+0x15e>
 8014d98:	2301      	movs	r3, #1
 8014d9a:	4632      	mov	r2, r6
 8014d9c:	4649      	mov	r1, r9
 8014d9e:	4640      	mov	r0, r8
 8014da0:	47d0      	blx	sl
 8014da2:	3001      	adds	r0, #1
 8014da4:	d09d      	beq.n	8014ce2 <_printf_i+0x15a>
 8014da6:	3501      	adds	r5, #1
 8014da8:	68e3      	ldr	r3, [r4, #12]
 8014daa:	9903      	ldr	r1, [sp, #12]
 8014dac:	1a5b      	subs	r3, r3, r1
 8014dae:	42ab      	cmp	r3, r5
 8014db0:	dcf2      	bgt.n	8014d98 <_printf_i+0x210>
 8014db2:	e7eb      	b.n	8014d8c <_printf_i+0x204>
 8014db4:	2500      	movs	r5, #0
 8014db6:	f104 0619 	add.w	r6, r4, #25
 8014dba:	e7f5      	b.n	8014da8 <_printf_i+0x220>
 8014dbc:	0801c89e 	.word	0x0801c89e
 8014dc0:	0801c8af 	.word	0x0801c8af

08014dc4 <_scanf_float>:
 8014dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dc8:	b087      	sub	sp, #28
 8014dca:	4691      	mov	r9, r2
 8014dcc:	9303      	str	r3, [sp, #12]
 8014dce:	688b      	ldr	r3, [r1, #8]
 8014dd0:	1e5a      	subs	r2, r3, #1
 8014dd2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014dd6:	bf81      	itttt	hi
 8014dd8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014ddc:	eb03 0b05 	addhi.w	fp, r3, r5
 8014de0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014de4:	608b      	strhi	r3, [r1, #8]
 8014de6:	680b      	ldr	r3, [r1, #0]
 8014de8:	460a      	mov	r2, r1
 8014dea:	f04f 0500 	mov.w	r5, #0
 8014dee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014df2:	f842 3b1c 	str.w	r3, [r2], #28
 8014df6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014dfa:	4680      	mov	r8, r0
 8014dfc:	460c      	mov	r4, r1
 8014dfe:	bf98      	it	ls
 8014e00:	f04f 0b00 	movls.w	fp, #0
 8014e04:	9201      	str	r2, [sp, #4]
 8014e06:	4616      	mov	r6, r2
 8014e08:	46aa      	mov	sl, r5
 8014e0a:	462f      	mov	r7, r5
 8014e0c:	9502      	str	r5, [sp, #8]
 8014e0e:	68a2      	ldr	r2, [r4, #8]
 8014e10:	b15a      	cbz	r2, 8014e2a <_scanf_float+0x66>
 8014e12:	f8d9 3000 	ldr.w	r3, [r9]
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	2b4e      	cmp	r3, #78	@ 0x4e
 8014e1a:	d863      	bhi.n	8014ee4 <_scanf_float+0x120>
 8014e1c:	2b40      	cmp	r3, #64	@ 0x40
 8014e1e:	d83b      	bhi.n	8014e98 <_scanf_float+0xd4>
 8014e20:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014e24:	b2c8      	uxtb	r0, r1
 8014e26:	280e      	cmp	r0, #14
 8014e28:	d939      	bls.n	8014e9e <_scanf_float+0xda>
 8014e2a:	b11f      	cbz	r7, 8014e34 <_scanf_float+0x70>
 8014e2c:	6823      	ldr	r3, [r4, #0]
 8014e2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014e32:	6023      	str	r3, [r4, #0]
 8014e34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e38:	f1ba 0f01 	cmp.w	sl, #1
 8014e3c:	f200 8114 	bhi.w	8015068 <_scanf_float+0x2a4>
 8014e40:	9b01      	ldr	r3, [sp, #4]
 8014e42:	429e      	cmp	r6, r3
 8014e44:	f200 8105 	bhi.w	8015052 <_scanf_float+0x28e>
 8014e48:	2001      	movs	r0, #1
 8014e4a:	b007      	add	sp, #28
 8014e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e50:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014e54:	2a0d      	cmp	r2, #13
 8014e56:	d8e8      	bhi.n	8014e2a <_scanf_float+0x66>
 8014e58:	a101      	add	r1, pc, #4	@ (adr r1, 8014e60 <_scanf_float+0x9c>)
 8014e5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014e5e:	bf00      	nop
 8014e60:	08014fa9 	.word	0x08014fa9
 8014e64:	08014e2b 	.word	0x08014e2b
 8014e68:	08014e2b 	.word	0x08014e2b
 8014e6c:	08014e2b 	.word	0x08014e2b
 8014e70:	08015005 	.word	0x08015005
 8014e74:	08014fdf 	.word	0x08014fdf
 8014e78:	08014e2b 	.word	0x08014e2b
 8014e7c:	08014e2b 	.word	0x08014e2b
 8014e80:	08014fb7 	.word	0x08014fb7
 8014e84:	08014e2b 	.word	0x08014e2b
 8014e88:	08014e2b 	.word	0x08014e2b
 8014e8c:	08014e2b 	.word	0x08014e2b
 8014e90:	08014e2b 	.word	0x08014e2b
 8014e94:	08014f73 	.word	0x08014f73
 8014e98:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014e9c:	e7da      	b.n	8014e54 <_scanf_float+0x90>
 8014e9e:	290e      	cmp	r1, #14
 8014ea0:	d8c3      	bhi.n	8014e2a <_scanf_float+0x66>
 8014ea2:	a001      	add	r0, pc, #4	@ (adr r0, 8014ea8 <_scanf_float+0xe4>)
 8014ea4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014ea8:	08014f63 	.word	0x08014f63
 8014eac:	08014e2b 	.word	0x08014e2b
 8014eb0:	08014f63 	.word	0x08014f63
 8014eb4:	08014ff3 	.word	0x08014ff3
 8014eb8:	08014e2b 	.word	0x08014e2b
 8014ebc:	08014f05 	.word	0x08014f05
 8014ec0:	08014f49 	.word	0x08014f49
 8014ec4:	08014f49 	.word	0x08014f49
 8014ec8:	08014f49 	.word	0x08014f49
 8014ecc:	08014f49 	.word	0x08014f49
 8014ed0:	08014f49 	.word	0x08014f49
 8014ed4:	08014f49 	.word	0x08014f49
 8014ed8:	08014f49 	.word	0x08014f49
 8014edc:	08014f49 	.word	0x08014f49
 8014ee0:	08014f49 	.word	0x08014f49
 8014ee4:	2b6e      	cmp	r3, #110	@ 0x6e
 8014ee6:	d809      	bhi.n	8014efc <_scanf_float+0x138>
 8014ee8:	2b60      	cmp	r3, #96	@ 0x60
 8014eea:	d8b1      	bhi.n	8014e50 <_scanf_float+0x8c>
 8014eec:	2b54      	cmp	r3, #84	@ 0x54
 8014eee:	d07b      	beq.n	8014fe8 <_scanf_float+0x224>
 8014ef0:	2b59      	cmp	r3, #89	@ 0x59
 8014ef2:	d19a      	bne.n	8014e2a <_scanf_float+0x66>
 8014ef4:	2d07      	cmp	r5, #7
 8014ef6:	d198      	bne.n	8014e2a <_scanf_float+0x66>
 8014ef8:	2508      	movs	r5, #8
 8014efa:	e02f      	b.n	8014f5c <_scanf_float+0x198>
 8014efc:	2b74      	cmp	r3, #116	@ 0x74
 8014efe:	d073      	beq.n	8014fe8 <_scanf_float+0x224>
 8014f00:	2b79      	cmp	r3, #121	@ 0x79
 8014f02:	e7f6      	b.n	8014ef2 <_scanf_float+0x12e>
 8014f04:	6821      	ldr	r1, [r4, #0]
 8014f06:	05c8      	lsls	r0, r1, #23
 8014f08:	d51e      	bpl.n	8014f48 <_scanf_float+0x184>
 8014f0a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014f0e:	6021      	str	r1, [r4, #0]
 8014f10:	3701      	adds	r7, #1
 8014f12:	f1bb 0f00 	cmp.w	fp, #0
 8014f16:	d003      	beq.n	8014f20 <_scanf_float+0x15c>
 8014f18:	3201      	adds	r2, #1
 8014f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f1e:	60a2      	str	r2, [r4, #8]
 8014f20:	68a3      	ldr	r3, [r4, #8]
 8014f22:	3b01      	subs	r3, #1
 8014f24:	60a3      	str	r3, [r4, #8]
 8014f26:	6923      	ldr	r3, [r4, #16]
 8014f28:	3301      	adds	r3, #1
 8014f2a:	6123      	str	r3, [r4, #16]
 8014f2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014f30:	3b01      	subs	r3, #1
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	f8c9 3004 	str.w	r3, [r9, #4]
 8014f38:	f340 8082 	ble.w	8015040 <_scanf_float+0x27c>
 8014f3c:	f8d9 3000 	ldr.w	r3, [r9]
 8014f40:	3301      	adds	r3, #1
 8014f42:	f8c9 3000 	str.w	r3, [r9]
 8014f46:	e762      	b.n	8014e0e <_scanf_float+0x4a>
 8014f48:	eb1a 0105 	adds.w	r1, sl, r5
 8014f4c:	f47f af6d 	bne.w	8014e2a <_scanf_float+0x66>
 8014f50:	6822      	ldr	r2, [r4, #0]
 8014f52:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014f56:	6022      	str	r2, [r4, #0]
 8014f58:	460d      	mov	r5, r1
 8014f5a:	468a      	mov	sl, r1
 8014f5c:	f806 3b01 	strb.w	r3, [r6], #1
 8014f60:	e7de      	b.n	8014f20 <_scanf_float+0x15c>
 8014f62:	6822      	ldr	r2, [r4, #0]
 8014f64:	0610      	lsls	r0, r2, #24
 8014f66:	f57f af60 	bpl.w	8014e2a <_scanf_float+0x66>
 8014f6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014f6e:	6022      	str	r2, [r4, #0]
 8014f70:	e7f4      	b.n	8014f5c <_scanf_float+0x198>
 8014f72:	f1ba 0f00 	cmp.w	sl, #0
 8014f76:	d10c      	bne.n	8014f92 <_scanf_float+0x1ce>
 8014f78:	b977      	cbnz	r7, 8014f98 <_scanf_float+0x1d4>
 8014f7a:	6822      	ldr	r2, [r4, #0]
 8014f7c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014f80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014f84:	d108      	bne.n	8014f98 <_scanf_float+0x1d4>
 8014f86:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014f8a:	6022      	str	r2, [r4, #0]
 8014f8c:	f04f 0a01 	mov.w	sl, #1
 8014f90:	e7e4      	b.n	8014f5c <_scanf_float+0x198>
 8014f92:	f1ba 0f02 	cmp.w	sl, #2
 8014f96:	d050      	beq.n	801503a <_scanf_float+0x276>
 8014f98:	2d01      	cmp	r5, #1
 8014f9a:	d002      	beq.n	8014fa2 <_scanf_float+0x1de>
 8014f9c:	2d04      	cmp	r5, #4
 8014f9e:	f47f af44 	bne.w	8014e2a <_scanf_float+0x66>
 8014fa2:	3501      	adds	r5, #1
 8014fa4:	b2ed      	uxtb	r5, r5
 8014fa6:	e7d9      	b.n	8014f5c <_scanf_float+0x198>
 8014fa8:	f1ba 0f01 	cmp.w	sl, #1
 8014fac:	f47f af3d 	bne.w	8014e2a <_scanf_float+0x66>
 8014fb0:	f04f 0a02 	mov.w	sl, #2
 8014fb4:	e7d2      	b.n	8014f5c <_scanf_float+0x198>
 8014fb6:	b975      	cbnz	r5, 8014fd6 <_scanf_float+0x212>
 8014fb8:	2f00      	cmp	r7, #0
 8014fba:	f47f af37 	bne.w	8014e2c <_scanf_float+0x68>
 8014fbe:	6822      	ldr	r2, [r4, #0]
 8014fc0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014fc4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014fc8:	f040 8103 	bne.w	80151d2 <_scanf_float+0x40e>
 8014fcc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014fd0:	6022      	str	r2, [r4, #0]
 8014fd2:	2501      	movs	r5, #1
 8014fd4:	e7c2      	b.n	8014f5c <_scanf_float+0x198>
 8014fd6:	2d03      	cmp	r5, #3
 8014fd8:	d0e3      	beq.n	8014fa2 <_scanf_float+0x1de>
 8014fda:	2d05      	cmp	r5, #5
 8014fdc:	e7df      	b.n	8014f9e <_scanf_float+0x1da>
 8014fde:	2d02      	cmp	r5, #2
 8014fe0:	f47f af23 	bne.w	8014e2a <_scanf_float+0x66>
 8014fe4:	2503      	movs	r5, #3
 8014fe6:	e7b9      	b.n	8014f5c <_scanf_float+0x198>
 8014fe8:	2d06      	cmp	r5, #6
 8014fea:	f47f af1e 	bne.w	8014e2a <_scanf_float+0x66>
 8014fee:	2507      	movs	r5, #7
 8014ff0:	e7b4      	b.n	8014f5c <_scanf_float+0x198>
 8014ff2:	6822      	ldr	r2, [r4, #0]
 8014ff4:	0591      	lsls	r1, r2, #22
 8014ff6:	f57f af18 	bpl.w	8014e2a <_scanf_float+0x66>
 8014ffa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014ffe:	6022      	str	r2, [r4, #0]
 8015000:	9702      	str	r7, [sp, #8]
 8015002:	e7ab      	b.n	8014f5c <_scanf_float+0x198>
 8015004:	6822      	ldr	r2, [r4, #0]
 8015006:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801500a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801500e:	d005      	beq.n	801501c <_scanf_float+0x258>
 8015010:	0550      	lsls	r0, r2, #21
 8015012:	f57f af0a 	bpl.w	8014e2a <_scanf_float+0x66>
 8015016:	2f00      	cmp	r7, #0
 8015018:	f000 80db 	beq.w	80151d2 <_scanf_float+0x40e>
 801501c:	0591      	lsls	r1, r2, #22
 801501e:	bf58      	it	pl
 8015020:	9902      	ldrpl	r1, [sp, #8]
 8015022:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015026:	bf58      	it	pl
 8015028:	1a79      	subpl	r1, r7, r1
 801502a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801502e:	bf58      	it	pl
 8015030:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015034:	6022      	str	r2, [r4, #0]
 8015036:	2700      	movs	r7, #0
 8015038:	e790      	b.n	8014f5c <_scanf_float+0x198>
 801503a:	f04f 0a03 	mov.w	sl, #3
 801503e:	e78d      	b.n	8014f5c <_scanf_float+0x198>
 8015040:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015044:	4649      	mov	r1, r9
 8015046:	4640      	mov	r0, r8
 8015048:	4798      	blx	r3
 801504a:	2800      	cmp	r0, #0
 801504c:	f43f aedf 	beq.w	8014e0e <_scanf_float+0x4a>
 8015050:	e6eb      	b.n	8014e2a <_scanf_float+0x66>
 8015052:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015056:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801505a:	464a      	mov	r2, r9
 801505c:	4640      	mov	r0, r8
 801505e:	4798      	blx	r3
 8015060:	6923      	ldr	r3, [r4, #16]
 8015062:	3b01      	subs	r3, #1
 8015064:	6123      	str	r3, [r4, #16]
 8015066:	e6eb      	b.n	8014e40 <_scanf_float+0x7c>
 8015068:	1e6b      	subs	r3, r5, #1
 801506a:	2b06      	cmp	r3, #6
 801506c:	d824      	bhi.n	80150b8 <_scanf_float+0x2f4>
 801506e:	2d02      	cmp	r5, #2
 8015070:	d836      	bhi.n	80150e0 <_scanf_float+0x31c>
 8015072:	9b01      	ldr	r3, [sp, #4]
 8015074:	429e      	cmp	r6, r3
 8015076:	f67f aee7 	bls.w	8014e48 <_scanf_float+0x84>
 801507a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801507e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015082:	464a      	mov	r2, r9
 8015084:	4640      	mov	r0, r8
 8015086:	4798      	blx	r3
 8015088:	6923      	ldr	r3, [r4, #16]
 801508a:	3b01      	subs	r3, #1
 801508c:	6123      	str	r3, [r4, #16]
 801508e:	e7f0      	b.n	8015072 <_scanf_float+0x2ae>
 8015090:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015094:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8015098:	464a      	mov	r2, r9
 801509a:	4640      	mov	r0, r8
 801509c:	4798      	blx	r3
 801509e:	6923      	ldr	r3, [r4, #16]
 80150a0:	3b01      	subs	r3, #1
 80150a2:	6123      	str	r3, [r4, #16]
 80150a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80150a8:	fa5f fa8a 	uxtb.w	sl, sl
 80150ac:	f1ba 0f02 	cmp.w	sl, #2
 80150b0:	d1ee      	bne.n	8015090 <_scanf_float+0x2cc>
 80150b2:	3d03      	subs	r5, #3
 80150b4:	b2ed      	uxtb	r5, r5
 80150b6:	1b76      	subs	r6, r6, r5
 80150b8:	6823      	ldr	r3, [r4, #0]
 80150ba:	05da      	lsls	r2, r3, #23
 80150bc:	d530      	bpl.n	8015120 <_scanf_float+0x35c>
 80150be:	055b      	lsls	r3, r3, #21
 80150c0:	d511      	bpl.n	80150e6 <_scanf_float+0x322>
 80150c2:	9b01      	ldr	r3, [sp, #4]
 80150c4:	429e      	cmp	r6, r3
 80150c6:	f67f aebf 	bls.w	8014e48 <_scanf_float+0x84>
 80150ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80150ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80150d2:	464a      	mov	r2, r9
 80150d4:	4640      	mov	r0, r8
 80150d6:	4798      	blx	r3
 80150d8:	6923      	ldr	r3, [r4, #16]
 80150da:	3b01      	subs	r3, #1
 80150dc:	6123      	str	r3, [r4, #16]
 80150de:	e7f0      	b.n	80150c2 <_scanf_float+0x2fe>
 80150e0:	46aa      	mov	sl, r5
 80150e2:	46b3      	mov	fp, r6
 80150e4:	e7de      	b.n	80150a4 <_scanf_float+0x2e0>
 80150e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80150ea:	6923      	ldr	r3, [r4, #16]
 80150ec:	2965      	cmp	r1, #101	@ 0x65
 80150ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80150f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80150f6:	6123      	str	r3, [r4, #16]
 80150f8:	d00c      	beq.n	8015114 <_scanf_float+0x350>
 80150fa:	2945      	cmp	r1, #69	@ 0x45
 80150fc:	d00a      	beq.n	8015114 <_scanf_float+0x350>
 80150fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015102:	464a      	mov	r2, r9
 8015104:	4640      	mov	r0, r8
 8015106:	4798      	blx	r3
 8015108:	6923      	ldr	r3, [r4, #16]
 801510a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801510e:	3b01      	subs	r3, #1
 8015110:	1eb5      	subs	r5, r6, #2
 8015112:	6123      	str	r3, [r4, #16]
 8015114:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015118:	464a      	mov	r2, r9
 801511a:	4640      	mov	r0, r8
 801511c:	4798      	blx	r3
 801511e:	462e      	mov	r6, r5
 8015120:	6822      	ldr	r2, [r4, #0]
 8015122:	f012 0210 	ands.w	r2, r2, #16
 8015126:	d001      	beq.n	801512c <_scanf_float+0x368>
 8015128:	2000      	movs	r0, #0
 801512a:	e68e      	b.n	8014e4a <_scanf_float+0x86>
 801512c:	7032      	strb	r2, [r6, #0]
 801512e:	6823      	ldr	r3, [r4, #0]
 8015130:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8015134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015138:	d125      	bne.n	8015186 <_scanf_float+0x3c2>
 801513a:	9b02      	ldr	r3, [sp, #8]
 801513c:	429f      	cmp	r7, r3
 801513e:	d00a      	beq.n	8015156 <_scanf_float+0x392>
 8015140:	1bda      	subs	r2, r3, r7
 8015142:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8015146:	429e      	cmp	r6, r3
 8015148:	bf28      	it	cs
 801514a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801514e:	4922      	ldr	r1, [pc, #136]	@ (80151d8 <_scanf_float+0x414>)
 8015150:	4630      	mov	r0, r6
 8015152:	f000 f99b 	bl	801548c <siprintf>
 8015156:	9901      	ldr	r1, [sp, #4]
 8015158:	2200      	movs	r2, #0
 801515a:	4640      	mov	r0, r8
 801515c:	f002 fd88 	bl	8017c70 <_strtod_r>
 8015160:	9b03      	ldr	r3, [sp, #12]
 8015162:	6821      	ldr	r1, [r4, #0]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	f011 0f02 	tst.w	r1, #2
 801516a:	ec57 6b10 	vmov	r6, r7, d0
 801516e:	f103 0204 	add.w	r2, r3, #4
 8015172:	d015      	beq.n	80151a0 <_scanf_float+0x3dc>
 8015174:	9903      	ldr	r1, [sp, #12]
 8015176:	600a      	str	r2, [r1, #0]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	e9c3 6700 	strd	r6, r7, [r3]
 801517e:	68e3      	ldr	r3, [r4, #12]
 8015180:	3301      	adds	r3, #1
 8015182:	60e3      	str	r3, [r4, #12]
 8015184:	e7d0      	b.n	8015128 <_scanf_float+0x364>
 8015186:	9b04      	ldr	r3, [sp, #16]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d0e4      	beq.n	8015156 <_scanf_float+0x392>
 801518c:	9905      	ldr	r1, [sp, #20]
 801518e:	230a      	movs	r3, #10
 8015190:	3101      	adds	r1, #1
 8015192:	4640      	mov	r0, r8
 8015194:	f002 fdec 	bl	8017d70 <_strtol_r>
 8015198:	9b04      	ldr	r3, [sp, #16]
 801519a:	9e05      	ldr	r6, [sp, #20]
 801519c:	1ac2      	subs	r2, r0, r3
 801519e:	e7d0      	b.n	8015142 <_scanf_float+0x37e>
 80151a0:	f011 0f04 	tst.w	r1, #4
 80151a4:	9903      	ldr	r1, [sp, #12]
 80151a6:	600a      	str	r2, [r1, #0]
 80151a8:	d1e6      	bne.n	8015178 <_scanf_float+0x3b4>
 80151aa:	681d      	ldr	r5, [r3, #0]
 80151ac:	4632      	mov	r2, r6
 80151ae:	463b      	mov	r3, r7
 80151b0:	4630      	mov	r0, r6
 80151b2:	4639      	mov	r1, r7
 80151b4:	f7eb fce2 	bl	8000b7c <__aeabi_dcmpun>
 80151b8:	b128      	cbz	r0, 80151c6 <_scanf_float+0x402>
 80151ba:	4808      	ldr	r0, [pc, #32]	@ (80151dc <_scanf_float+0x418>)
 80151bc:	f000 fb4c 	bl	8015858 <nanf>
 80151c0:	ed85 0a00 	vstr	s0, [r5]
 80151c4:	e7db      	b.n	801517e <_scanf_float+0x3ba>
 80151c6:	4630      	mov	r0, r6
 80151c8:	4639      	mov	r1, r7
 80151ca:	f7eb fd35 	bl	8000c38 <__aeabi_d2f>
 80151ce:	6028      	str	r0, [r5, #0]
 80151d0:	e7d5      	b.n	801517e <_scanf_float+0x3ba>
 80151d2:	2700      	movs	r7, #0
 80151d4:	e62e      	b.n	8014e34 <_scanf_float+0x70>
 80151d6:	bf00      	nop
 80151d8:	0801c8c0 	.word	0x0801c8c0
 80151dc:	0801ca01 	.word	0x0801ca01

080151e0 <std>:
 80151e0:	2300      	movs	r3, #0
 80151e2:	b510      	push	{r4, lr}
 80151e4:	4604      	mov	r4, r0
 80151e6:	e9c0 3300 	strd	r3, r3, [r0]
 80151ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80151ee:	6083      	str	r3, [r0, #8]
 80151f0:	8181      	strh	r1, [r0, #12]
 80151f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80151f4:	81c2      	strh	r2, [r0, #14]
 80151f6:	6183      	str	r3, [r0, #24]
 80151f8:	4619      	mov	r1, r3
 80151fa:	2208      	movs	r2, #8
 80151fc:	305c      	adds	r0, #92	@ 0x5c
 80151fe:	f000 fa3f 	bl	8015680 <memset>
 8015202:	4b0d      	ldr	r3, [pc, #52]	@ (8015238 <std+0x58>)
 8015204:	6263      	str	r3, [r4, #36]	@ 0x24
 8015206:	4b0d      	ldr	r3, [pc, #52]	@ (801523c <std+0x5c>)
 8015208:	62a3      	str	r3, [r4, #40]	@ 0x28
 801520a:	4b0d      	ldr	r3, [pc, #52]	@ (8015240 <std+0x60>)
 801520c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801520e:	4b0d      	ldr	r3, [pc, #52]	@ (8015244 <std+0x64>)
 8015210:	6323      	str	r3, [r4, #48]	@ 0x30
 8015212:	4b0d      	ldr	r3, [pc, #52]	@ (8015248 <std+0x68>)
 8015214:	6224      	str	r4, [r4, #32]
 8015216:	429c      	cmp	r4, r3
 8015218:	d006      	beq.n	8015228 <std+0x48>
 801521a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801521e:	4294      	cmp	r4, r2
 8015220:	d002      	beq.n	8015228 <std+0x48>
 8015222:	33d0      	adds	r3, #208	@ 0xd0
 8015224:	429c      	cmp	r4, r3
 8015226:	d105      	bne.n	8015234 <std+0x54>
 8015228:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801522c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015230:	f000 bb00 	b.w	8015834 <__retarget_lock_init_recursive>
 8015234:	bd10      	pop	{r4, pc}
 8015236:	bf00      	nop
 8015238:	080154d1 	.word	0x080154d1
 801523c:	080154f3 	.word	0x080154f3
 8015240:	0801552b 	.word	0x0801552b
 8015244:	0801554f 	.word	0x0801554f
 8015248:	20004828 	.word	0x20004828

0801524c <stdio_exit_handler>:
 801524c:	4a02      	ldr	r2, [pc, #8]	@ (8015258 <stdio_exit_handler+0xc>)
 801524e:	4903      	ldr	r1, [pc, #12]	@ (801525c <stdio_exit_handler+0x10>)
 8015250:	4803      	ldr	r0, [pc, #12]	@ (8015260 <stdio_exit_handler+0x14>)
 8015252:	f000 b869 	b.w	8015328 <_fwalk_sglue>
 8015256:	bf00      	nop
 8015258:	2000004c 	.word	0x2000004c
 801525c:	0801812d 	.word	0x0801812d
 8015260:	2000005c 	.word	0x2000005c

08015264 <cleanup_stdio>:
 8015264:	6841      	ldr	r1, [r0, #4]
 8015266:	4b0c      	ldr	r3, [pc, #48]	@ (8015298 <cleanup_stdio+0x34>)
 8015268:	4299      	cmp	r1, r3
 801526a:	b510      	push	{r4, lr}
 801526c:	4604      	mov	r4, r0
 801526e:	d001      	beq.n	8015274 <cleanup_stdio+0x10>
 8015270:	f002 ff5c 	bl	801812c <_fflush_r>
 8015274:	68a1      	ldr	r1, [r4, #8]
 8015276:	4b09      	ldr	r3, [pc, #36]	@ (801529c <cleanup_stdio+0x38>)
 8015278:	4299      	cmp	r1, r3
 801527a:	d002      	beq.n	8015282 <cleanup_stdio+0x1e>
 801527c:	4620      	mov	r0, r4
 801527e:	f002 ff55 	bl	801812c <_fflush_r>
 8015282:	68e1      	ldr	r1, [r4, #12]
 8015284:	4b06      	ldr	r3, [pc, #24]	@ (80152a0 <cleanup_stdio+0x3c>)
 8015286:	4299      	cmp	r1, r3
 8015288:	d004      	beq.n	8015294 <cleanup_stdio+0x30>
 801528a:	4620      	mov	r0, r4
 801528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015290:	f002 bf4c 	b.w	801812c <_fflush_r>
 8015294:	bd10      	pop	{r4, pc}
 8015296:	bf00      	nop
 8015298:	20004828 	.word	0x20004828
 801529c:	20004890 	.word	0x20004890
 80152a0:	200048f8 	.word	0x200048f8

080152a4 <global_stdio_init.part.0>:
 80152a4:	b510      	push	{r4, lr}
 80152a6:	4b0b      	ldr	r3, [pc, #44]	@ (80152d4 <global_stdio_init.part.0+0x30>)
 80152a8:	4c0b      	ldr	r4, [pc, #44]	@ (80152d8 <global_stdio_init.part.0+0x34>)
 80152aa:	4a0c      	ldr	r2, [pc, #48]	@ (80152dc <global_stdio_init.part.0+0x38>)
 80152ac:	601a      	str	r2, [r3, #0]
 80152ae:	4620      	mov	r0, r4
 80152b0:	2200      	movs	r2, #0
 80152b2:	2104      	movs	r1, #4
 80152b4:	f7ff ff94 	bl	80151e0 <std>
 80152b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80152bc:	2201      	movs	r2, #1
 80152be:	2109      	movs	r1, #9
 80152c0:	f7ff ff8e 	bl	80151e0 <std>
 80152c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80152c8:	2202      	movs	r2, #2
 80152ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152ce:	2112      	movs	r1, #18
 80152d0:	f7ff bf86 	b.w	80151e0 <std>
 80152d4:	20004960 	.word	0x20004960
 80152d8:	20004828 	.word	0x20004828
 80152dc:	0801524d 	.word	0x0801524d

080152e0 <__sfp_lock_acquire>:
 80152e0:	4801      	ldr	r0, [pc, #4]	@ (80152e8 <__sfp_lock_acquire+0x8>)
 80152e2:	f000 baa8 	b.w	8015836 <__retarget_lock_acquire_recursive>
 80152e6:	bf00      	nop
 80152e8:	20004969 	.word	0x20004969

080152ec <__sfp_lock_release>:
 80152ec:	4801      	ldr	r0, [pc, #4]	@ (80152f4 <__sfp_lock_release+0x8>)
 80152ee:	f000 baa3 	b.w	8015838 <__retarget_lock_release_recursive>
 80152f2:	bf00      	nop
 80152f4:	20004969 	.word	0x20004969

080152f8 <__sinit>:
 80152f8:	b510      	push	{r4, lr}
 80152fa:	4604      	mov	r4, r0
 80152fc:	f7ff fff0 	bl	80152e0 <__sfp_lock_acquire>
 8015300:	6a23      	ldr	r3, [r4, #32]
 8015302:	b11b      	cbz	r3, 801530c <__sinit+0x14>
 8015304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015308:	f7ff bff0 	b.w	80152ec <__sfp_lock_release>
 801530c:	4b04      	ldr	r3, [pc, #16]	@ (8015320 <__sinit+0x28>)
 801530e:	6223      	str	r3, [r4, #32]
 8015310:	4b04      	ldr	r3, [pc, #16]	@ (8015324 <__sinit+0x2c>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d1f5      	bne.n	8015304 <__sinit+0xc>
 8015318:	f7ff ffc4 	bl	80152a4 <global_stdio_init.part.0>
 801531c:	e7f2      	b.n	8015304 <__sinit+0xc>
 801531e:	bf00      	nop
 8015320:	08015265 	.word	0x08015265
 8015324:	20004960 	.word	0x20004960

08015328 <_fwalk_sglue>:
 8015328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801532c:	4607      	mov	r7, r0
 801532e:	4688      	mov	r8, r1
 8015330:	4614      	mov	r4, r2
 8015332:	2600      	movs	r6, #0
 8015334:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015338:	f1b9 0901 	subs.w	r9, r9, #1
 801533c:	d505      	bpl.n	801534a <_fwalk_sglue+0x22>
 801533e:	6824      	ldr	r4, [r4, #0]
 8015340:	2c00      	cmp	r4, #0
 8015342:	d1f7      	bne.n	8015334 <_fwalk_sglue+0xc>
 8015344:	4630      	mov	r0, r6
 8015346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801534a:	89ab      	ldrh	r3, [r5, #12]
 801534c:	2b01      	cmp	r3, #1
 801534e:	d907      	bls.n	8015360 <_fwalk_sglue+0x38>
 8015350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015354:	3301      	adds	r3, #1
 8015356:	d003      	beq.n	8015360 <_fwalk_sglue+0x38>
 8015358:	4629      	mov	r1, r5
 801535a:	4638      	mov	r0, r7
 801535c:	47c0      	blx	r8
 801535e:	4306      	orrs	r6, r0
 8015360:	3568      	adds	r5, #104	@ 0x68
 8015362:	e7e9      	b.n	8015338 <_fwalk_sglue+0x10>

08015364 <_puts_r>:
 8015364:	6a03      	ldr	r3, [r0, #32]
 8015366:	b570      	push	{r4, r5, r6, lr}
 8015368:	6884      	ldr	r4, [r0, #8]
 801536a:	4605      	mov	r5, r0
 801536c:	460e      	mov	r6, r1
 801536e:	b90b      	cbnz	r3, 8015374 <_puts_r+0x10>
 8015370:	f7ff ffc2 	bl	80152f8 <__sinit>
 8015374:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015376:	07db      	lsls	r3, r3, #31
 8015378:	d405      	bmi.n	8015386 <_puts_r+0x22>
 801537a:	89a3      	ldrh	r3, [r4, #12]
 801537c:	0598      	lsls	r0, r3, #22
 801537e:	d402      	bmi.n	8015386 <_puts_r+0x22>
 8015380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015382:	f000 fa58 	bl	8015836 <__retarget_lock_acquire_recursive>
 8015386:	89a3      	ldrh	r3, [r4, #12]
 8015388:	0719      	lsls	r1, r3, #28
 801538a:	d502      	bpl.n	8015392 <_puts_r+0x2e>
 801538c:	6923      	ldr	r3, [r4, #16]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d135      	bne.n	80153fe <_puts_r+0x9a>
 8015392:	4621      	mov	r1, r4
 8015394:	4628      	mov	r0, r5
 8015396:	f000 f91d 	bl	80155d4 <__swsetup_r>
 801539a:	b380      	cbz	r0, 80153fe <_puts_r+0x9a>
 801539c:	f04f 35ff 	mov.w	r5, #4294967295
 80153a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80153a2:	07da      	lsls	r2, r3, #31
 80153a4:	d405      	bmi.n	80153b2 <_puts_r+0x4e>
 80153a6:	89a3      	ldrh	r3, [r4, #12]
 80153a8:	059b      	lsls	r3, r3, #22
 80153aa:	d402      	bmi.n	80153b2 <_puts_r+0x4e>
 80153ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80153ae:	f000 fa43 	bl	8015838 <__retarget_lock_release_recursive>
 80153b2:	4628      	mov	r0, r5
 80153b4:	bd70      	pop	{r4, r5, r6, pc}
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	da04      	bge.n	80153c4 <_puts_r+0x60>
 80153ba:	69a2      	ldr	r2, [r4, #24]
 80153bc:	429a      	cmp	r2, r3
 80153be:	dc17      	bgt.n	80153f0 <_puts_r+0x8c>
 80153c0:	290a      	cmp	r1, #10
 80153c2:	d015      	beq.n	80153f0 <_puts_r+0x8c>
 80153c4:	6823      	ldr	r3, [r4, #0]
 80153c6:	1c5a      	adds	r2, r3, #1
 80153c8:	6022      	str	r2, [r4, #0]
 80153ca:	7019      	strb	r1, [r3, #0]
 80153cc:	68a3      	ldr	r3, [r4, #8]
 80153ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80153d2:	3b01      	subs	r3, #1
 80153d4:	60a3      	str	r3, [r4, #8]
 80153d6:	2900      	cmp	r1, #0
 80153d8:	d1ed      	bne.n	80153b6 <_puts_r+0x52>
 80153da:	2b00      	cmp	r3, #0
 80153dc:	da11      	bge.n	8015402 <_puts_r+0x9e>
 80153de:	4622      	mov	r2, r4
 80153e0:	210a      	movs	r1, #10
 80153e2:	4628      	mov	r0, r5
 80153e4:	f000 f8b7 	bl	8015556 <__swbuf_r>
 80153e8:	3001      	adds	r0, #1
 80153ea:	d0d7      	beq.n	801539c <_puts_r+0x38>
 80153ec:	250a      	movs	r5, #10
 80153ee:	e7d7      	b.n	80153a0 <_puts_r+0x3c>
 80153f0:	4622      	mov	r2, r4
 80153f2:	4628      	mov	r0, r5
 80153f4:	f000 f8af 	bl	8015556 <__swbuf_r>
 80153f8:	3001      	adds	r0, #1
 80153fa:	d1e7      	bne.n	80153cc <_puts_r+0x68>
 80153fc:	e7ce      	b.n	801539c <_puts_r+0x38>
 80153fe:	3e01      	subs	r6, #1
 8015400:	e7e4      	b.n	80153cc <_puts_r+0x68>
 8015402:	6823      	ldr	r3, [r4, #0]
 8015404:	1c5a      	adds	r2, r3, #1
 8015406:	6022      	str	r2, [r4, #0]
 8015408:	220a      	movs	r2, #10
 801540a:	701a      	strb	r2, [r3, #0]
 801540c:	e7ee      	b.n	80153ec <_puts_r+0x88>
	...

08015410 <puts>:
 8015410:	4b02      	ldr	r3, [pc, #8]	@ (801541c <puts+0xc>)
 8015412:	4601      	mov	r1, r0
 8015414:	6818      	ldr	r0, [r3, #0]
 8015416:	f7ff bfa5 	b.w	8015364 <_puts_r>
 801541a:	bf00      	nop
 801541c:	20000058 	.word	0x20000058

08015420 <sniprintf>:
 8015420:	b40c      	push	{r2, r3}
 8015422:	b530      	push	{r4, r5, lr}
 8015424:	4b18      	ldr	r3, [pc, #96]	@ (8015488 <sniprintf+0x68>)
 8015426:	1e0c      	subs	r4, r1, #0
 8015428:	681d      	ldr	r5, [r3, #0]
 801542a:	b09d      	sub	sp, #116	@ 0x74
 801542c:	da08      	bge.n	8015440 <sniprintf+0x20>
 801542e:	238b      	movs	r3, #139	@ 0x8b
 8015430:	602b      	str	r3, [r5, #0]
 8015432:	f04f 30ff 	mov.w	r0, #4294967295
 8015436:	b01d      	add	sp, #116	@ 0x74
 8015438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801543c:	b002      	add	sp, #8
 801543e:	4770      	bx	lr
 8015440:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015444:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015448:	f04f 0300 	mov.w	r3, #0
 801544c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801544e:	bf14      	ite	ne
 8015450:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015454:	4623      	moveq	r3, r4
 8015456:	9304      	str	r3, [sp, #16]
 8015458:	9307      	str	r3, [sp, #28]
 801545a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801545e:	9002      	str	r0, [sp, #8]
 8015460:	9006      	str	r0, [sp, #24]
 8015462:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015466:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015468:	ab21      	add	r3, sp, #132	@ 0x84
 801546a:	a902      	add	r1, sp, #8
 801546c:	4628      	mov	r0, r5
 801546e:	9301      	str	r3, [sp, #4]
 8015470:	f002 fcdc 	bl	8017e2c <_svfiprintf_r>
 8015474:	1c43      	adds	r3, r0, #1
 8015476:	bfbc      	itt	lt
 8015478:	238b      	movlt	r3, #139	@ 0x8b
 801547a:	602b      	strlt	r3, [r5, #0]
 801547c:	2c00      	cmp	r4, #0
 801547e:	d0da      	beq.n	8015436 <sniprintf+0x16>
 8015480:	9b02      	ldr	r3, [sp, #8]
 8015482:	2200      	movs	r2, #0
 8015484:	701a      	strb	r2, [r3, #0]
 8015486:	e7d6      	b.n	8015436 <sniprintf+0x16>
 8015488:	20000058 	.word	0x20000058

0801548c <siprintf>:
 801548c:	b40e      	push	{r1, r2, r3}
 801548e:	b510      	push	{r4, lr}
 8015490:	b09d      	sub	sp, #116	@ 0x74
 8015492:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015494:	9002      	str	r0, [sp, #8]
 8015496:	9006      	str	r0, [sp, #24]
 8015498:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801549c:	480a      	ldr	r0, [pc, #40]	@ (80154c8 <siprintf+0x3c>)
 801549e:	9107      	str	r1, [sp, #28]
 80154a0:	9104      	str	r1, [sp, #16]
 80154a2:	490a      	ldr	r1, [pc, #40]	@ (80154cc <siprintf+0x40>)
 80154a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80154a8:	9105      	str	r1, [sp, #20]
 80154aa:	2400      	movs	r4, #0
 80154ac:	a902      	add	r1, sp, #8
 80154ae:	6800      	ldr	r0, [r0, #0]
 80154b0:	9301      	str	r3, [sp, #4]
 80154b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80154b4:	f002 fcba 	bl	8017e2c <_svfiprintf_r>
 80154b8:	9b02      	ldr	r3, [sp, #8]
 80154ba:	701c      	strb	r4, [r3, #0]
 80154bc:	b01d      	add	sp, #116	@ 0x74
 80154be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154c2:	b003      	add	sp, #12
 80154c4:	4770      	bx	lr
 80154c6:	bf00      	nop
 80154c8:	20000058 	.word	0x20000058
 80154cc:	ffff0208 	.word	0xffff0208

080154d0 <__sread>:
 80154d0:	b510      	push	{r4, lr}
 80154d2:	460c      	mov	r4, r1
 80154d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154d8:	f000 f95e 	bl	8015798 <_read_r>
 80154dc:	2800      	cmp	r0, #0
 80154de:	bfab      	itete	ge
 80154e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80154e2:	89a3      	ldrhlt	r3, [r4, #12]
 80154e4:	181b      	addge	r3, r3, r0
 80154e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80154ea:	bfac      	ite	ge
 80154ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80154ee:	81a3      	strhlt	r3, [r4, #12]
 80154f0:	bd10      	pop	{r4, pc}

080154f2 <__swrite>:
 80154f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154f6:	461f      	mov	r7, r3
 80154f8:	898b      	ldrh	r3, [r1, #12]
 80154fa:	05db      	lsls	r3, r3, #23
 80154fc:	4605      	mov	r5, r0
 80154fe:	460c      	mov	r4, r1
 8015500:	4616      	mov	r6, r2
 8015502:	d505      	bpl.n	8015510 <__swrite+0x1e>
 8015504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015508:	2302      	movs	r3, #2
 801550a:	2200      	movs	r2, #0
 801550c:	f000 f932 	bl	8015774 <_lseek_r>
 8015510:	89a3      	ldrh	r3, [r4, #12]
 8015512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015516:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801551a:	81a3      	strh	r3, [r4, #12]
 801551c:	4632      	mov	r2, r6
 801551e:	463b      	mov	r3, r7
 8015520:	4628      	mov	r0, r5
 8015522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015526:	f000 b949 	b.w	80157bc <_write_r>

0801552a <__sseek>:
 801552a:	b510      	push	{r4, lr}
 801552c:	460c      	mov	r4, r1
 801552e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015532:	f000 f91f 	bl	8015774 <_lseek_r>
 8015536:	1c43      	adds	r3, r0, #1
 8015538:	89a3      	ldrh	r3, [r4, #12]
 801553a:	bf15      	itete	ne
 801553c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801553e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015546:	81a3      	strheq	r3, [r4, #12]
 8015548:	bf18      	it	ne
 801554a:	81a3      	strhne	r3, [r4, #12]
 801554c:	bd10      	pop	{r4, pc}

0801554e <__sclose>:
 801554e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015552:	f000 b8a1 	b.w	8015698 <_close_r>

08015556 <__swbuf_r>:
 8015556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015558:	460e      	mov	r6, r1
 801555a:	4614      	mov	r4, r2
 801555c:	4605      	mov	r5, r0
 801555e:	b118      	cbz	r0, 8015568 <__swbuf_r+0x12>
 8015560:	6a03      	ldr	r3, [r0, #32]
 8015562:	b90b      	cbnz	r3, 8015568 <__swbuf_r+0x12>
 8015564:	f7ff fec8 	bl	80152f8 <__sinit>
 8015568:	69a3      	ldr	r3, [r4, #24]
 801556a:	60a3      	str	r3, [r4, #8]
 801556c:	89a3      	ldrh	r3, [r4, #12]
 801556e:	071a      	lsls	r2, r3, #28
 8015570:	d501      	bpl.n	8015576 <__swbuf_r+0x20>
 8015572:	6923      	ldr	r3, [r4, #16]
 8015574:	b943      	cbnz	r3, 8015588 <__swbuf_r+0x32>
 8015576:	4621      	mov	r1, r4
 8015578:	4628      	mov	r0, r5
 801557a:	f000 f82b 	bl	80155d4 <__swsetup_r>
 801557e:	b118      	cbz	r0, 8015588 <__swbuf_r+0x32>
 8015580:	f04f 37ff 	mov.w	r7, #4294967295
 8015584:	4638      	mov	r0, r7
 8015586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015588:	6823      	ldr	r3, [r4, #0]
 801558a:	6922      	ldr	r2, [r4, #16]
 801558c:	1a98      	subs	r0, r3, r2
 801558e:	6963      	ldr	r3, [r4, #20]
 8015590:	b2f6      	uxtb	r6, r6
 8015592:	4283      	cmp	r3, r0
 8015594:	4637      	mov	r7, r6
 8015596:	dc05      	bgt.n	80155a4 <__swbuf_r+0x4e>
 8015598:	4621      	mov	r1, r4
 801559a:	4628      	mov	r0, r5
 801559c:	f002 fdc6 	bl	801812c <_fflush_r>
 80155a0:	2800      	cmp	r0, #0
 80155a2:	d1ed      	bne.n	8015580 <__swbuf_r+0x2a>
 80155a4:	68a3      	ldr	r3, [r4, #8]
 80155a6:	3b01      	subs	r3, #1
 80155a8:	60a3      	str	r3, [r4, #8]
 80155aa:	6823      	ldr	r3, [r4, #0]
 80155ac:	1c5a      	adds	r2, r3, #1
 80155ae:	6022      	str	r2, [r4, #0]
 80155b0:	701e      	strb	r6, [r3, #0]
 80155b2:	6962      	ldr	r2, [r4, #20]
 80155b4:	1c43      	adds	r3, r0, #1
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d004      	beq.n	80155c4 <__swbuf_r+0x6e>
 80155ba:	89a3      	ldrh	r3, [r4, #12]
 80155bc:	07db      	lsls	r3, r3, #31
 80155be:	d5e1      	bpl.n	8015584 <__swbuf_r+0x2e>
 80155c0:	2e0a      	cmp	r6, #10
 80155c2:	d1df      	bne.n	8015584 <__swbuf_r+0x2e>
 80155c4:	4621      	mov	r1, r4
 80155c6:	4628      	mov	r0, r5
 80155c8:	f002 fdb0 	bl	801812c <_fflush_r>
 80155cc:	2800      	cmp	r0, #0
 80155ce:	d0d9      	beq.n	8015584 <__swbuf_r+0x2e>
 80155d0:	e7d6      	b.n	8015580 <__swbuf_r+0x2a>
	...

080155d4 <__swsetup_r>:
 80155d4:	b538      	push	{r3, r4, r5, lr}
 80155d6:	4b29      	ldr	r3, [pc, #164]	@ (801567c <__swsetup_r+0xa8>)
 80155d8:	4605      	mov	r5, r0
 80155da:	6818      	ldr	r0, [r3, #0]
 80155dc:	460c      	mov	r4, r1
 80155de:	b118      	cbz	r0, 80155e8 <__swsetup_r+0x14>
 80155e0:	6a03      	ldr	r3, [r0, #32]
 80155e2:	b90b      	cbnz	r3, 80155e8 <__swsetup_r+0x14>
 80155e4:	f7ff fe88 	bl	80152f8 <__sinit>
 80155e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155ec:	0719      	lsls	r1, r3, #28
 80155ee:	d422      	bmi.n	8015636 <__swsetup_r+0x62>
 80155f0:	06da      	lsls	r2, r3, #27
 80155f2:	d407      	bmi.n	8015604 <__swsetup_r+0x30>
 80155f4:	2209      	movs	r2, #9
 80155f6:	602a      	str	r2, [r5, #0]
 80155f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80155fc:	81a3      	strh	r3, [r4, #12]
 80155fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015602:	e033      	b.n	801566c <__swsetup_r+0x98>
 8015604:	0758      	lsls	r0, r3, #29
 8015606:	d512      	bpl.n	801562e <__swsetup_r+0x5a>
 8015608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801560a:	b141      	cbz	r1, 801561e <__swsetup_r+0x4a>
 801560c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015610:	4299      	cmp	r1, r3
 8015612:	d002      	beq.n	801561a <__swsetup_r+0x46>
 8015614:	4628      	mov	r0, r5
 8015616:	f000 ff7f 	bl	8016518 <_free_r>
 801561a:	2300      	movs	r3, #0
 801561c:	6363      	str	r3, [r4, #52]	@ 0x34
 801561e:	89a3      	ldrh	r3, [r4, #12]
 8015620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015624:	81a3      	strh	r3, [r4, #12]
 8015626:	2300      	movs	r3, #0
 8015628:	6063      	str	r3, [r4, #4]
 801562a:	6923      	ldr	r3, [r4, #16]
 801562c:	6023      	str	r3, [r4, #0]
 801562e:	89a3      	ldrh	r3, [r4, #12]
 8015630:	f043 0308 	orr.w	r3, r3, #8
 8015634:	81a3      	strh	r3, [r4, #12]
 8015636:	6923      	ldr	r3, [r4, #16]
 8015638:	b94b      	cbnz	r3, 801564e <__swsetup_r+0x7a>
 801563a:	89a3      	ldrh	r3, [r4, #12]
 801563c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015644:	d003      	beq.n	801564e <__swsetup_r+0x7a>
 8015646:	4621      	mov	r1, r4
 8015648:	4628      	mov	r0, r5
 801564a:	f002 fdbd 	bl	80181c8 <__smakebuf_r>
 801564e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015652:	f013 0201 	ands.w	r2, r3, #1
 8015656:	d00a      	beq.n	801566e <__swsetup_r+0x9a>
 8015658:	2200      	movs	r2, #0
 801565a:	60a2      	str	r2, [r4, #8]
 801565c:	6962      	ldr	r2, [r4, #20]
 801565e:	4252      	negs	r2, r2
 8015660:	61a2      	str	r2, [r4, #24]
 8015662:	6922      	ldr	r2, [r4, #16]
 8015664:	b942      	cbnz	r2, 8015678 <__swsetup_r+0xa4>
 8015666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801566a:	d1c5      	bne.n	80155f8 <__swsetup_r+0x24>
 801566c:	bd38      	pop	{r3, r4, r5, pc}
 801566e:	0799      	lsls	r1, r3, #30
 8015670:	bf58      	it	pl
 8015672:	6962      	ldrpl	r2, [r4, #20]
 8015674:	60a2      	str	r2, [r4, #8]
 8015676:	e7f4      	b.n	8015662 <__swsetup_r+0x8e>
 8015678:	2000      	movs	r0, #0
 801567a:	e7f7      	b.n	801566c <__swsetup_r+0x98>
 801567c:	20000058 	.word	0x20000058

08015680 <memset>:
 8015680:	4402      	add	r2, r0
 8015682:	4603      	mov	r3, r0
 8015684:	4293      	cmp	r3, r2
 8015686:	d100      	bne.n	801568a <memset+0xa>
 8015688:	4770      	bx	lr
 801568a:	f803 1b01 	strb.w	r1, [r3], #1
 801568e:	e7f9      	b.n	8015684 <memset+0x4>

08015690 <_localeconv_r>:
 8015690:	4800      	ldr	r0, [pc, #0]	@ (8015694 <_localeconv_r+0x4>)
 8015692:	4770      	bx	lr
 8015694:	20000198 	.word	0x20000198

08015698 <_close_r>:
 8015698:	b538      	push	{r3, r4, r5, lr}
 801569a:	4d06      	ldr	r5, [pc, #24]	@ (80156b4 <_close_r+0x1c>)
 801569c:	2300      	movs	r3, #0
 801569e:	4604      	mov	r4, r0
 80156a0:	4608      	mov	r0, r1
 80156a2:	602b      	str	r3, [r5, #0]
 80156a4:	f7ee fe12 	bl	80042cc <_close>
 80156a8:	1c43      	adds	r3, r0, #1
 80156aa:	d102      	bne.n	80156b2 <_close_r+0x1a>
 80156ac:	682b      	ldr	r3, [r5, #0]
 80156ae:	b103      	cbz	r3, 80156b2 <_close_r+0x1a>
 80156b0:	6023      	str	r3, [r4, #0]
 80156b2:	bd38      	pop	{r3, r4, r5, pc}
 80156b4:	20004964 	.word	0x20004964

080156b8 <_reclaim_reent>:
 80156b8:	4b2d      	ldr	r3, [pc, #180]	@ (8015770 <_reclaim_reent+0xb8>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	4283      	cmp	r3, r0
 80156be:	b570      	push	{r4, r5, r6, lr}
 80156c0:	4604      	mov	r4, r0
 80156c2:	d053      	beq.n	801576c <_reclaim_reent+0xb4>
 80156c4:	69c3      	ldr	r3, [r0, #28]
 80156c6:	b31b      	cbz	r3, 8015710 <_reclaim_reent+0x58>
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	b163      	cbz	r3, 80156e6 <_reclaim_reent+0x2e>
 80156cc:	2500      	movs	r5, #0
 80156ce:	69e3      	ldr	r3, [r4, #28]
 80156d0:	68db      	ldr	r3, [r3, #12]
 80156d2:	5959      	ldr	r1, [r3, r5]
 80156d4:	b9b1      	cbnz	r1, 8015704 <_reclaim_reent+0x4c>
 80156d6:	3504      	adds	r5, #4
 80156d8:	2d80      	cmp	r5, #128	@ 0x80
 80156da:	d1f8      	bne.n	80156ce <_reclaim_reent+0x16>
 80156dc:	69e3      	ldr	r3, [r4, #28]
 80156de:	4620      	mov	r0, r4
 80156e0:	68d9      	ldr	r1, [r3, #12]
 80156e2:	f000 ff19 	bl	8016518 <_free_r>
 80156e6:	69e3      	ldr	r3, [r4, #28]
 80156e8:	6819      	ldr	r1, [r3, #0]
 80156ea:	b111      	cbz	r1, 80156f2 <_reclaim_reent+0x3a>
 80156ec:	4620      	mov	r0, r4
 80156ee:	f000 ff13 	bl	8016518 <_free_r>
 80156f2:	69e3      	ldr	r3, [r4, #28]
 80156f4:	689d      	ldr	r5, [r3, #8]
 80156f6:	b15d      	cbz	r5, 8015710 <_reclaim_reent+0x58>
 80156f8:	4629      	mov	r1, r5
 80156fa:	4620      	mov	r0, r4
 80156fc:	682d      	ldr	r5, [r5, #0]
 80156fe:	f000 ff0b 	bl	8016518 <_free_r>
 8015702:	e7f8      	b.n	80156f6 <_reclaim_reent+0x3e>
 8015704:	680e      	ldr	r6, [r1, #0]
 8015706:	4620      	mov	r0, r4
 8015708:	f000 ff06 	bl	8016518 <_free_r>
 801570c:	4631      	mov	r1, r6
 801570e:	e7e1      	b.n	80156d4 <_reclaim_reent+0x1c>
 8015710:	6961      	ldr	r1, [r4, #20]
 8015712:	b111      	cbz	r1, 801571a <_reclaim_reent+0x62>
 8015714:	4620      	mov	r0, r4
 8015716:	f000 feff 	bl	8016518 <_free_r>
 801571a:	69e1      	ldr	r1, [r4, #28]
 801571c:	b111      	cbz	r1, 8015724 <_reclaim_reent+0x6c>
 801571e:	4620      	mov	r0, r4
 8015720:	f000 fefa 	bl	8016518 <_free_r>
 8015724:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015726:	b111      	cbz	r1, 801572e <_reclaim_reent+0x76>
 8015728:	4620      	mov	r0, r4
 801572a:	f000 fef5 	bl	8016518 <_free_r>
 801572e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015730:	b111      	cbz	r1, 8015738 <_reclaim_reent+0x80>
 8015732:	4620      	mov	r0, r4
 8015734:	f000 fef0 	bl	8016518 <_free_r>
 8015738:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801573a:	b111      	cbz	r1, 8015742 <_reclaim_reent+0x8a>
 801573c:	4620      	mov	r0, r4
 801573e:	f000 feeb 	bl	8016518 <_free_r>
 8015742:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015744:	b111      	cbz	r1, 801574c <_reclaim_reent+0x94>
 8015746:	4620      	mov	r0, r4
 8015748:	f000 fee6 	bl	8016518 <_free_r>
 801574c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801574e:	b111      	cbz	r1, 8015756 <_reclaim_reent+0x9e>
 8015750:	4620      	mov	r0, r4
 8015752:	f000 fee1 	bl	8016518 <_free_r>
 8015756:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015758:	b111      	cbz	r1, 8015760 <_reclaim_reent+0xa8>
 801575a:	4620      	mov	r0, r4
 801575c:	f000 fedc 	bl	8016518 <_free_r>
 8015760:	6a23      	ldr	r3, [r4, #32]
 8015762:	b11b      	cbz	r3, 801576c <_reclaim_reent+0xb4>
 8015764:	4620      	mov	r0, r4
 8015766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801576a:	4718      	bx	r3
 801576c:	bd70      	pop	{r4, r5, r6, pc}
 801576e:	bf00      	nop
 8015770:	20000058 	.word	0x20000058

08015774 <_lseek_r>:
 8015774:	b538      	push	{r3, r4, r5, lr}
 8015776:	4d07      	ldr	r5, [pc, #28]	@ (8015794 <_lseek_r+0x20>)
 8015778:	4604      	mov	r4, r0
 801577a:	4608      	mov	r0, r1
 801577c:	4611      	mov	r1, r2
 801577e:	2200      	movs	r2, #0
 8015780:	602a      	str	r2, [r5, #0]
 8015782:	461a      	mov	r2, r3
 8015784:	f7ee fdc9 	bl	800431a <_lseek>
 8015788:	1c43      	adds	r3, r0, #1
 801578a:	d102      	bne.n	8015792 <_lseek_r+0x1e>
 801578c:	682b      	ldr	r3, [r5, #0]
 801578e:	b103      	cbz	r3, 8015792 <_lseek_r+0x1e>
 8015790:	6023      	str	r3, [r4, #0]
 8015792:	bd38      	pop	{r3, r4, r5, pc}
 8015794:	20004964 	.word	0x20004964

08015798 <_read_r>:
 8015798:	b538      	push	{r3, r4, r5, lr}
 801579a:	4d07      	ldr	r5, [pc, #28]	@ (80157b8 <_read_r+0x20>)
 801579c:	4604      	mov	r4, r0
 801579e:	4608      	mov	r0, r1
 80157a0:	4611      	mov	r1, r2
 80157a2:	2200      	movs	r2, #0
 80157a4:	602a      	str	r2, [r5, #0]
 80157a6:	461a      	mov	r2, r3
 80157a8:	f7ee fd57 	bl	800425a <_read>
 80157ac:	1c43      	adds	r3, r0, #1
 80157ae:	d102      	bne.n	80157b6 <_read_r+0x1e>
 80157b0:	682b      	ldr	r3, [r5, #0]
 80157b2:	b103      	cbz	r3, 80157b6 <_read_r+0x1e>
 80157b4:	6023      	str	r3, [r4, #0]
 80157b6:	bd38      	pop	{r3, r4, r5, pc}
 80157b8:	20004964 	.word	0x20004964

080157bc <_write_r>:
 80157bc:	b538      	push	{r3, r4, r5, lr}
 80157be:	4d07      	ldr	r5, [pc, #28]	@ (80157dc <_write_r+0x20>)
 80157c0:	4604      	mov	r4, r0
 80157c2:	4608      	mov	r0, r1
 80157c4:	4611      	mov	r1, r2
 80157c6:	2200      	movs	r2, #0
 80157c8:	602a      	str	r2, [r5, #0]
 80157ca:	461a      	mov	r2, r3
 80157cc:	f7ee fd62 	bl	8004294 <_write>
 80157d0:	1c43      	adds	r3, r0, #1
 80157d2:	d102      	bne.n	80157da <_write_r+0x1e>
 80157d4:	682b      	ldr	r3, [r5, #0]
 80157d6:	b103      	cbz	r3, 80157da <_write_r+0x1e>
 80157d8:	6023      	str	r3, [r4, #0]
 80157da:	bd38      	pop	{r3, r4, r5, pc}
 80157dc:	20004964 	.word	0x20004964

080157e0 <__errno>:
 80157e0:	4b01      	ldr	r3, [pc, #4]	@ (80157e8 <__errno+0x8>)
 80157e2:	6818      	ldr	r0, [r3, #0]
 80157e4:	4770      	bx	lr
 80157e6:	bf00      	nop
 80157e8:	20000058 	.word	0x20000058

080157ec <__libc_init_array>:
 80157ec:	b570      	push	{r4, r5, r6, lr}
 80157ee:	4d0d      	ldr	r5, [pc, #52]	@ (8015824 <__libc_init_array+0x38>)
 80157f0:	4c0d      	ldr	r4, [pc, #52]	@ (8015828 <__libc_init_array+0x3c>)
 80157f2:	1b64      	subs	r4, r4, r5
 80157f4:	10a4      	asrs	r4, r4, #2
 80157f6:	2600      	movs	r6, #0
 80157f8:	42a6      	cmp	r6, r4
 80157fa:	d109      	bne.n	8015810 <__libc_init_array+0x24>
 80157fc:	4d0b      	ldr	r5, [pc, #44]	@ (801582c <__libc_init_array+0x40>)
 80157fe:	4c0c      	ldr	r4, [pc, #48]	@ (8015830 <__libc_init_array+0x44>)
 8015800:	f004 fe66 	bl	801a4d0 <_init>
 8015804:	1b64      	subs	r4, r4, r5
 8015806:	10a4      	asrs	r4, r4, #2
 8015808:	2600      	movs	r6, #0
 801580a:	42a6      	cmp	r6, r4
 801580c:	d105      	bne.n	801581a <__libc_init_array+0x2e>
 801580e:	bd70      	pop	{r4, r5, r6, pc}
 8015810:	f855 3b04 	ldr.w	r3, [r5], #4
 8015814:	4798      	blx	r3
 8015816:	3601      	adds	r6, #1
 8015818:	e7ee      	b.n	80157f8 <__libc_init_array+0xc>
 801581a:	f855 3b04 	ldr.w	r3, [r5], #4
 801581e:	4798      	blx	r3
 8015820:	3601      	adds	r6, #1
 8015822:	e7f2      	b.n	801580a <__libc_init_array+0x1e>
 8015824:	0801d0dc 	.word	0x0801d0dc
 8015828:	0801d0dc 	.word	0x0801d0dc
 801582c:	0801d0dc 	.word	0x0801d0dc
 8015830:	0801d0e0 	.word	0x0801d0e0

08015834 <__retarget_lock_init_recursive>:
 8015834:	4770      	bx	lr

08015836 <__retarget_lock_acquire_recursive>:
 8015836:	4770      	bx	lr

08015838 <__retarget_lock_release_recursive>:
 8015838:	4770      	bx	lr

0801583a <memcpy>:
 801583a:	440a      	add	r2, r1
 801583c:	4291      	cmp	r1, r2
 801583e:	f100 33ff 	add.w	r3, r0, #4294967295
 8015842:	d100      	bne.n	8015846 <memcpy+0xc>
 8015844:	4770      	bx	lr
 8015846:	b510      	push	{r4, lr}
 8015848:	f811 4b01 	ldrb.w	r4, [r1], #1
 801584c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015850:	4291      	cmp	r1, r2
 8015852:	d1f9      	bne.n	8015848 <memcpy+0xe>
 8015854:	bd10      	pop	{r4, pc}
	...

08015858 <nanf>:
 8015858:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015860 <nanf+0x8>
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop
 8015860:	7fc00000 	.word	0x7fc00000

08015864 <quorem>:
 8015864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015868:	6903      	ldr	r3, [r0, #16]
 801586a:	690c      	ldr	r4, [r1, #16]
 801586c:	42a3      	cmp	r3, r4
 801586e:	4607      	mov	r7, r0
 8015870:	db7e      	blt.n	8015970 <quorem+0x10c>
 8015872:	3c01      	subs	r4, #1
 8015874:	f101 0814 	add.w	r8, r1, #20
 8015878:	00a3      	lsls	r3, r4, #2
 801587a:	f100 0514 	add.w	r5, r0, #20
 801587e:	9300      	str	r3, [sp, #0]
 8015880:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015884:	9301      	str	r3, [sp, #4]
 8015886:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801588a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801588e:	3301      	adds	r3, #1
 8015890:	429a      	cmp	r2, r3
 8015892:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015896:	fbb2 f6f3 	udiv	r6, r2, r3
 801589a:	d32e      	bcc.n	80158fa <quorem+0x96>
 801589c:	f04f 0a00 	mov.w	sl, #0
 80158a0:	46c4      	mov	ip, r8
 80158a2:	46ae      	mov	lr, r5
 80158a4:	46d3      	mov	fp, sl
 80158a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80158aa:	b298      	uxth	r0, r3
 80158ac:	fb06 a000 	mla	r0, r6, r0, sl
 80158b0:	0c02      	lsrs	r2, r0, #16
 80158b2:	0c1b      	lsrs	r3, r3, #16
 80158b4:	fb06 2303 	mla	r3, r6, r3, r2
 80158b8:	f8de 2000 	ldr.w	r2, [lr]
 80158bc:	b280      	uxth	r0, r0
 80158be:	b292      	uxth	r2, r2
 80158c0:	1a12      	subs	r2, r2, r0
 80158c2:	445a      	add	r2, fp
 80158c4:	f8de 0000 	ldr.w	r0, [lr]
 80158c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80158cc:	b29b      	uxth	r3, r3
 80158ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80158d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80158d6:	b292      	uxth	r2, r2
 80158d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80158dc:	45e1      	cmp	r9, ip
 80158de:	f84e 2b04 	str.w	r2, [lr], #4
 80158e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80158e6:	d2de      	bcs.n	80158a6 <quorem+0x42>
 80158e8:	9b00      	ldr	r3, [sp, #0]
 80158ea:	58eb      	ldr	r3, [r5, r3]
 80158ec:	b92b      	cbnz	r3, 80158fa <quorem+0x96>
 80158ee:	9b01      	ldr	r3, [sp, #4]
 80158f0:	3b04      	subs	r3, #4
 80158f2:	429d      	cmp	r5, r3
 80158f4:	461a      	mov	r2, r3
 80158f6:	d32f      	bcc.n	8015958 <quorem+0xf4>
 80158f8:	613c      	str	r4, [r7, #16]
 80158fa:	4638      	mov	r0, r7
 80158fc:	f001 f9c8 	bl	8016c90 <__mcmp>
 8015900:	2800      	cmp	r0, #0
 8015902:	db25      	blt.n	8015950 <quorem+0xec>
 8015904:	4629      	mov	r1, r5
 8015906:	2000      	movs	r0, #0
 8015908:	f858 2b04 	ldr.w	r2, [r8], #4
 801590c:	f8d1 c000 	ldr.w	ip, [r1]
 8015910:	fa1f fe82 	uxth.w	lr, r2
 8015914:	fa1f f38c 	uxth.w	r3, ip
 8015918:	eba3 030e 	sub.w	r3, r3, lr
 801591c:	4403      	add	r3, r0
 801591e:	0c12      	lsrs	r2, r2, #16
 8015920:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015924:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015928:	b29b      	uxth	r3, r3
 801592a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801592e:	45c1      	cmp	r9, r8
 8015930:	f841 3b04 	str.w	r3, [r1], #4
 8015934:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015938:	d2e6      	bcs.n	8015908 <quorem+0xa4>
 801593a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801593e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015942:	b922      	cbnz	r2, 801594e <quorem+0xea>
 8015944:	3b04      	subs	r3, #4
 8015946:	429d      	cmp	r5, r3
 8015948:	461a      	mov	r2, r3
 801594a:	d30b      	bcc.n	8015964 <quorem+0x100>
 801594c:	613c      	str	r4, [r7, #16]
 801594e:	3601      	adds	r6, #1
 8015950:	4630      	mov	r0, r6
 8015952:	b003      	add	sp, #12
 8015954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015958:	6812      	ldr	r2, [r2, #0]
 801595a:	3b04      	subs	r3, #4
 801595c:	2a00      	cmp	r2, #0
 801595e:	d1cb      	bne.n	80158f8 <quorem+0x94>
 8015960:	3c01      	subs	r4, #1
 8015962:	e7c6      	b.n	80158f2 <quorem+0x8e>
 8015964:	6812      	ldr	r2, [r2, #0]
 8015966:	3b04      	subs	r3, #4
 8015968:	2a00      	cmp	r2, #0
 801596a:	d1ef      	bne.n	801594c <quorem+0xe8>
 801596c:	3c01      	subs	r4, #1
 801596e:	e7ea      	b.n	8015946 <quorem+0xe2>
 8015970:	2000      	movs	r0, #0
 8015972:	e7ee      	b.n	8015952 <quorem+0xee>
 8015974:	0000      	movs	r0, r0
	...

08015978 <_dtoa_r>:
 8015978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801597c:	69c7      	ldr	r7, [r0, #28]
 801597e:	b097      	sub	sp, #92	@ 0x5c
 8015980:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015984:	ec55 4b10 	vmov	r4, r5, d0
 8015988:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801598a:	9107      	str	r1, [sp, #28]
 801598c:	4681      	mov	r9, r0
 801598e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015990:	9311      	str	r3, [sp, #68]	@ 0x44
 8015992:	b97f      	cbnz	r7, 80159b4 <_dtoa_r+0x3c>
 8015994:	2010      	movs	r0, #16
 8015996:	f000 fe09 	bl	80165ac <malloc>
 801599a:	4602      	mov	r2, r0
 801599c:	f8c9 001c 	str.w	r0, [r9, #28]
 80159a0:	b920      	cbnz	r0, 80159ac <_dtoa_r+0x34>
 80159a2:	4ba9      	ldr	r3, [pc, #676]	@ (8015c48 <_dtoa_r+0x2d0>)
 80159a4:	21ef      	movs	r1, #239	@ 0xef
 80159a6:	48a9      	ldr	r0, [pc, #676]	@ (8015c4c <_dtoa_r+0x2d4>)
 80159a8:	f002 fcb2 	bl	8018310 <__assert_func>
 80159ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80159b0:	6007      	str	r7, [r0, #0]
 80159b2:	60c7      	str	r7, [r0, #12]
 80159b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80159b8:	6819      	ldr	r1, [r3, #0]
 80159ba:	b159      	cbz	r1, 80159d4 <_dtoa_r+0x5c>
 80159bc:	685a      	ldr	r2, [r3, #4]
 80159be:	604a      	str	r2, [r1, #4]
 80159c0:	2301      	movs	r3, #1
 80159c2:	4093      	lsls	r3, r2
 80159c4:	608b      	str	r3, [r1, #8]
 80159c6:	4648      	mov	r0, r9
 80159c8:	f000 fee6 	bl	8016798 <_Bfree>
 80159cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80159d0:	2200      	movs	r2, #0
 80159d2:	601a      	str	r2, [r3, #0]
 80159d4:	1e2b      	subs	r3, r5, #0
 80159d6:	bfb9      	ittee	lt
 80159d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80159dc:	9305      	strlt	r3, [sp, #20]
 80159de:	2300      	movge	r3, #0
 80159e0:	6033      	strge	r3, [r6, #0]
 80159e2:	9f05      	ldr	r7, [sp, #20]
 80159e4:	4b9a      	ldr	r3, [pc, #616]	@ (8015c50 <_dtoa_r+0x2d8>)
 80159e6:	bfbc      	itt	lt
 80159e8:	2201      	movlt	r2, #1
 80159ea:	6032      	strlt	r2, [r6, #0]
 80159ec:	43bb      	bics	r3, r7
 80159ee:	d112      	bne.n	8015a16 <_dtoa_r+0x9e>
 80159f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80159f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80159f6:	6013      	str	r3, [r2, #0]
 80159f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80159fc:	4323      	orrs	r3, r4
 80159fe:	f000 855a 	beq.w	80164b6 <_dtoa_r+0xb3e>
 8015a02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015a04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015c64 <_dtoa_r+0x2ec>
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	f000 855c 	beq.w	80164c6 <_dtoa_r+0xb4e>
 8015a0e:	f10a 0303 	add.w	r3, sl, #3
 8015a12:	f000 bd56 	b.w	80164c2 <_dtoa_r+0xb4a>
 8015a16:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	ec51 0b17 	vmov	r0, r1, d7
 8015a20:	2300      	movs	r3, #0
 8015a22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8015a26:	f7eb f877 	bl	8000b18 <__aeabi_dcmpeq>
 8015a2a:	4680      	mov	r8, r0
 8015a2c:	b158      	cbz	r0, 8015a46 <_dtoa_r+0xce>
 8015a2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015a30:	2301      	movs	r3, #1
 8015a32:	6013      	str	r3, [r2, #0]
 8015a34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015a36:	b113      	cbz	r3, 8015a3e <_dtoa_r+0xc6>
 8015a38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015a3a:	4b86      	ldr	r3, [pc, #536]	@ (8015c54 <_dtoa_r+0x2dc>)
 8015a3c:	6013      	str	r3, [r2, #0]
 8015a3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015c68 <_dtoa_r+0x2f0>
 8015a42:	f000 bd40 	b.w	80164c6 <_dtoa_r+0xb4e>
 8015a46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8015a4a:	aa14      	add	r2, sp, #80	@ 0x50
 8015a4c:	a915      	add	r1, sp, #84	@ 0x54
 8015a4e:	4648      	mov	r0, r9
 8015a50:	f001 fa3e 	bl	8016ed0 <__d2b>
 8015a54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015a58:	9002      	str	r0, [sp, #8]
 8015a5a:	2e00      	cmp	r6, #0
 8015a5c:	d078      	beq.n	8015b50 <_dtoa_r+0x1d8>
 8015a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015a60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8015a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015a68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015a6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015a70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015a74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015a78:	4619      	mov	r1, r3
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	4b76      	ldr	r3, [pc, #472]	@ (8015c58 <_dtoa_r+0x2e0>)
 8015a7e:	f7ea fc2b 	bl	80002d8 <__aeabi_dsub>
 8015a82:	a36b      	add	r3, pc, #428	@ (adr r3, 8015c30 <_dtoa_r+0x2b8>)
 8015a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a88:	f7ea fdde 	bl	8000648 <__aeabi_dmul>
 8015a8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8015c38 <_dtoa_r+0x2c0>)
 8015a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a92:	f7ea fc23 	bl	80002dc <__adddf3>
 8015a96:	4604      	mov	r4, r0
 8015a98:	4630      	mov	r0, r6
 8015a9a:	460d      	mov	r5, r1
 8015a9c:	f7ea fd6a 	bl	8000574 <__aeabi_i2d>
 8015aa0:	a367      	add	r3, pc, #412	@ (adr r3, 8015c40 <_dtoa_r+0x2c8>)
 8015aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa6:	f7ea fdcf 	bl	8000648 <__aeabi_dmul>
 8015aaa:	4602      	mov	r2, r0
 8015aac:	460b      	mov	r3, r1
 8015aae:	4620      	mov	r0, r4
 8015ab0:	4629      	mov	r1, r5
 8015ab2:	f7ea fc13 	bl	80002dc <__adddf3>
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	460d      	mov	r5, r1
 8015aba:	f7eb f875 	bl	8000ba8 <__aeabi_d2iz>
 8015abe:	2200      	movs	r2, #0
 8015ac0:	4607      	mov	r7, r0
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	4620      	mov	r0, r4
 8015ac6:	4629      	mov	r1, r5
 8015ac8:	f7eb f830 	bl	8000b2c <__aeabi_dcmplt>
 8015acc:	b140      	cbz	r0, 8015ae0 <_dtoa_r+0x168>
 8015ace:	4638      	mov	r0, r7
 8015ad0:	f7ea fd50 	bl	8000574 <__aeabi_i2d>
 8015ad4:	4622      	mov	r2, r4
 8015ad6:	462b      	mov	r3, r5
 8015ad8:	f7eb f81e 	bl	8000b18 <__aeabi_dcmpeq>
 8015adc:	b900      	cbnz	r0, 8015ae0 <_dtoa_r+0x168>
 8015ade:	3f01      	subs	r7, #1
 8015ae0:	2f16      	cmp	r7, #22
 8015ae2:	d852      	bhi.n	8015b8a <_dtoa_r+0x212>
 8015ae4:	4b5d      	ldr	r3, [pc, #372]	@ (8015c5c <_dtoa_r+0x2e4>)
 8015ae6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015af2:	f7eb f81b 	bl	8000b2c <__aeabi_dcmplt>
 8015af6:	2800      	cmp	r0, #0
 8015af8:	d049      	beq.n	8015b8e <_dtoa_r+0x216>
 8015afa:	3f01      	subs	r7, #1
 8015afc:	2300      	movs	r3, #0
 8015afe:	9310      	str	r3, [sp, #64]	@ 0x40
 8015b00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015b02:	1b9b      	subs	r3, r3, r6
 8015b04:	1e5a      	subs	r2, r3, #1
 8015b06:	bf45      	ittet	mi
 8015b08:	f1c3 0301 	rsbmi	r3, r3, #1
 8015b0c:	9300      	strmi	r3, [sp, #0]
 8015b0e:	2300      	movpl	r3, #0
 8015b10:	2300      	movmi	r3, #0
 8015b12:	9206      	str	r2, [sp, #24]
 8015b14:	bf54      	ite	pl
 8015b16:	9300      	strpl	r3, [sp, #0]
 8015b18:	9306      	strmi	r3, [sp, #24]
 8015b1a:	2f00      	cmp	r7, #0
 8015b1c:	db39      	blt.n	8015b92 <_dtoa_r+0x21a>
 8015b1e:	9b06      	ldr	r3, [sp, #24]
 8015b20:	970d      	str	r7, [sp, #52]	@ 0x34
 8015b22:	443b      	add	r3, r7
 8015b24:	9306      	str	r3, [sp, #24]
 8015b26:	2300      	movs	r3, #0
 8015b28:	9308      	str	r3, [sp, #32]
 8015b2a:	9b07      	ldr	r3, [sp, #28]
 8015b2c:	2b09      	cmp	r3, #9
 8015b2e:	d863      	bhi.n	8015bf8 <_dtoa_r+0x280>
 8015b30:	2b05      	cmp	r3, #5
 8015b32:	bfc4      	itt	gt
 8015b34:	3b04      	subgt	r3, #4
 8015b36:	9307      	strgt	r3, [sp, #28]
 8015b38:	9b07      	ldr	r3, [sp, #28]
 8015b3a:	f1a3 0302 	sub.w	r3, r3, #2
 8015b3e:	bfcc      	ite	gt
 8015b40:	2400      	movgt	r4, #0
 8015b42:	2401      	movle	r4, #1
 8015b44:	2b03      	cmp	r3, #3
 8015b46:	d863      	bhi.n	8015c10 <_dtoa_r+0x298>
 8015b48:	e8df f003 	tbb	[pc, r3]
 8015b4c:	2b375452 	.word	0x2b375452
 8015b50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015b54:	441e      	add	r6, r3
 8015b56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015b5a:	2b20      	cmp	r3, #32
 8015b5c:	bfc1      	itttt	gt
 8015b5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015b62:	409f      	lslgt	r7, r3
 8015b64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015b68:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015b6c:	bfd6      	itet	le
 8015b6e:	f1c3 0320 	rsble	r3, r3, #32
 8015b72:	ea47 0003 	orrgt.w	r0, r7, r3
 8015b76:	fa04 f003 	lslle.w	r0, r4, r3
 8015b7a:	f7ea fceb 	bl	8000554 <__aeabi_ui2d>
 8015b7e:	2201      	movs	r2, #1
 8015b80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015b84:	3e01      	subs	r6, #1
 8015b86:	9212      	str	r2, [sp, #72]	@ 0x48
 8015b88:	e776      	b.n	8015a78 <_dtoa_r+0x100>
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	e7b7      	b.n	8015afe <_dtoa_r+0x186>
 8015b8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8015b90:	e7b6      	b.n	8015b00 <_dtoa_r+0x188>
 8015b92:	9b00      	ldr	r3, [sp, #0]
 8015b94:	1bdb      	subs	r3, r3, r7
 8015b96:	9300      	str	r3, [sp, #0]
 8015b98:	427b      	negs	r3, r7
 8015b9a:	9308      	str	r3, [sp, #32]
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015ba0:	e7c3      	b.n	8015b2a <_dtoa_r+0x1b2>
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ba8:	eb07 0b03 	add.w	fp, r7, r3
 8015bac:	f10b 0301 	add.w	r3, fp, #1
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	9303      	str	r3, [sp, #12]
 8015bb4:	bfb8      	it	lt
 8015bb6:	2301      	movlt	r3, #1
 8015bb8:	e006      	b.n	8015bc8 <_dtoa_r+0x250>
 8015bba:	2301      	movs	r3, #1
 8015bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8015bbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	dd28      	ble.n	8015c16 <_dtoa_r+0x29e>
 8015bc4:	469b      	mov	fp, r3
 8015bc6:	9303      	str	r3, [sp, #12]
 8015bc8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8015bcc:	2100      	movs	r1, #0
 8015bce:	2204      	movs	r2, #4
 8015bd0:	f102 0514 	add.w	r5, r2, #20
 8015bd4:	429d      	cmp	r5, r3
 8015bd6:	d926      	bls.n	8015c26 <_dtoa_r+0x2ae>
 8015bd8:	6041      	str	r1, [r0, #4]
 8015bda:	4648      	mov	r0, r9
 8015bdc:	f000 fd9c 	bl	8016718 <_Balloc>
 8015be0:	4682      	mov	sl, r0
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d142      	bne.n	8015c6c <_dtoa_r+0x2f4>
 8015be6:	4b1e      	ldr	r3, [pc, #120]	@ (8015c60 <_dtoa_r+0x2e8>)
 8015be8:	4602      	mov	r2, r0
 8015bea:	f240 11af 	movw	r1, #431	@ 0x1af
 8015bee:	e6da      	b.n	80159a6 <_dtoa_r+0x2e>
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e7e3      	b.n	8015bbc <_dtoa_r+0x244>
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	e7d5      	b.n	8015ba4 <_dtoa_r+0x22c>
 8015bf8:	2401      	movs	r4, #1
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	9307      	str	r3, [sp, #28]
 8015bfe:	9409      	str	r4, [sp, #36]	@ 0x24
 8015c00:	f04f 3bff 	mov.w	fp, #4294967295
 8015c04:	2200      	movs	r2, #0
 8015c06:	f8cd b00c 	str.w	fp, [sp, #12]
 8015c0a:	2312      	movs	r3, #18
 8015c0c:	920c      	str	r2, [sp, #48]	@ 0x30
 8015c0e:	e7db      	b.n	8015bc8 <_dtoa_r+0x250>
 8015c10:	2301      	movs	r3, #1
 8015c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c14:	e7f4      	b.n	8015c00 <_dtoa_r+0x288>
 8015c16:	f04f 0b01 	mov.w	fp, #1
 8015c1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8015c1e:	465b      	mov	r3, fp
 8015c20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015c24:	e7d0      	b.n	8015bc8 <_dtoa_r+0x250>
 8015c26:	3101      	adds	r1, #1
 8015c28:	0052      	lsls	r2, r2, #1
 8015c2a:	e7d1      	b.n	8015bd0 <_dtoa_r+0x258>
 8015c2c:	f3af 8000 	nop.w
 8015c30:	636f4361 	.word	0x636f4361
 8015c34:	3fd287a7 	.word	0x3fd287a7
 8015c38:	8b60c8b3 	.word	0x8b60c8b3
 8015c3c:	3fc68a28 	.word	0x3fc68a28
 8015c40:	509f79fb 	.word	0x509f79fb
 8015c44:	3fd34413 	.word	0x3fd34413
 8015c48:	0801c8d2 	.word	0x0801c8d2
 8015c4c:	0801c8e9 	.word	0x0801c8e9
 8015c50:	7ff00000 	.word	0x7ff00000
 8015c54:	0801c89d 	.word	0x0801c89d
 8015c58:	3ff80000 	.word	0x3ff80000
 8015c5c:	0801ca98 	.word	0x0801ca98
 8015c60:	0801c941 	.word	0x0801c941
 8015c64:	0801c8ce 	.word	0x0801c8ce
 8015c68:	0801c89c 	.word	0x0801c89c
 8015c6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015c70:	6018      	str	r0, [r3, #0]
 8015c72:	9b03      	ldr	r3, [sp, #12]
 8015c74:	2b0e      	cmp	r3, #14
 8015c76:	f200 80a1 	bhi.w	8015dbc <_dtoa_r+0x444>
 8015c7a:	2c00      	cmp	r4, #0
 8015c7c:	f000 809e 	beq.w	8015dbc <_dtoa_r+0x444>
 8015c80:	2f00      	cmp	r7, #0
 8015c82:	dd33      	ble.n	8015cec <_dtoa_r+0x374>
 8015c84:	4b9c      	ldr	r3, [pc, #624]	@ (8015ef8 <_dtoa_r+0x580>)
 8015c86:	f007 020f 	and.w	r2, r7, #15
 8015c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c8e:	ed93 7b00 	vldr	d7, [r3]
 8015c92:	05f8      	lsls	r0, r7, #23
 8015c94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015c98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015c9c:	d516      	bpl.n	8015ccc <_dtoa_r+0x354>
 8015c9e:	4b97      	ldr	r3, [pc, #604]	@ (8015efc <_dtoa_r+0x584>)
 8015ca0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015ca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015ca8:	f7ea fdf8 	bl	800089c <__aeabi_ddiv>
 8015cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015cb0:	f004 040f 	and.w	r4, r4, #15
 8015cb4:	2603      	movs	r6, #3
 8015cb6:	4d91      	ldr	r5, [pc, #580]	@ (8015efc <_dtoa_r+0x584>)
 8015cb8:	b954      	cbnz	r4, 8015cd0 <_dtoa_r+0x358>
 8015cba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015cc2:	f7ea fdeb 	bl	800089c <__aeabi_ddiv>
 8015cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015cca:	e028      	b.n	8015d1e <_dtoa_r+0x3a6>
 8015ccc:	2602      	movs	r6, #2
 8015cce:	e7f2      	b.n	8015cb6 <_dtoa_r+0x33e>
 8015cd0:	07e1      	lsls	r1, r4, #31
 8015cd2:	d508      	bpl.n	8015ce6 <_dtoa_r+0x36e>
 8015cd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015cd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015cdc:	f7ea fcb4 	bl	8000648 <__aeabi_dmul>
 8015ce0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015ce4:	3601      	adds	r6, #1
 8015ce6:	1064      	asrs	r4, r4, #1
 8015ce8:	3508      	adds	r5, #8
 8015cea:	e7e5      	b.n	8015cb8 <_dtoa_r+0x340>
 8015cec:	f000 80af 	beq.w	8015e4e <_dtoa_r+0x4d6>
 8015cf0:	427c      	negs	r4, r7
 8015cf2:	4b81      	ldr	r3, [pc, #516]	@ (8015ef8 <_dtoa_r+0x580>)
 8015cf4:	4d81      	ldr	r5, [pc, #516]	@ (8015efc <_dtoa_r+0x584>)
 8015cf6:	f004 020f 	and.w	r2, r4, #15
 8015cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015d06:	f7ea fc9f 	bl	8000648 <__aeabi_dmul>
 8015d0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d0e:	1124      	asrs	r4, r4, #4
 8015d10:	2300      	movs	r3, #0
 8015d12:	2602      	movs	r6, #2
 8015d14:	2c00      	cmp	r4, #0
 8015d16:	f040 808f 	bne.w	8015e38 <_dtoa_r+0x4c0>
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d1d3      	bne.n	8015cc6 <_dtoa_r+0x34e>
 8015d1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015d20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	f000 8094 	beq.w	8015e52 <_dtoa_r+0x4da>
 8015d2a:	4b75      	ldr	r3, [pc, #468]	@ (8015f00 <_dtoa_r+0x588>)
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	4620      	mov	r0, r4
 8015d30:	4629      	mov	r1, r5
 8015d32:	f7ea fefb 	bl	8000b2c <__aeabi_dcmplt>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	f000 808b 	beq.w	8015e52 <_dtoa_r+0x4da>
 8015d3c:	9b03      	ldr	r3, [sp, #12]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	f000 8087 	beq.w	8015e52 <_dtoa_r+0x4da>
 8015d44:	f1bb 0f00 	cmp.w	fp, #0
 8015d48:	dd34      	ble.n	8015db4 <_dtoa_r+0x43c>
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8015f04 <_dtoa_r+0x58c>)
 8015d4e:	2200      	movs	r2, #0
 8015d50:	4629      	mov	r1, r5
 8015d52:	f7ea fc79 	bl	8000648 <__aeabi_dmul>
 8015d56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d5a:	f107 38ff 	add.w	r8, r7, #4294967295
 8015d5e:	3601      	adds	r6, #1
 8015d60:	465c      	mov	r4, fp
 8015d62:	4630      	mov	r0, r6
 8015d64:	f7ea fc06 	bl	8000574 <__aeabi_i2d>
 8015d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d6c:	f7ea fc6c 	bl	8000648 <__aeabi_dmul>
 8015d70:	4b65      	ldr	r3, [pc, #404]	@ (8015f08 <_dtoa_r+0x590>)
 8015d72:	2200      	movs	r2, #0
 8015d74:	f7ea fab2 	bl	80002dc <__adddf3>
 8015d78:	4605      	mov	r5, r0
 8015d7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015d7e:	2c00      	cmp	r4, #0
 8015d80:	d16a      	bne.n	8015e58 <_dtoa_r+0x4e0>
 8015d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015d86:	4b61      	ldr	r3, [pc, #388]	@ (8015f0c <_dtoa_r+0x594>)
 8015d88:	2200      	movs	r2, #0
 8015d8a:	f7ea faa5 	bl	80002d8 <__aeabi_dsub>
 8015d8e:	4602      	mov	r2, r0
 8015d90:	460b      	mov	r3, r1
 8015d92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015d96:	462a      	mov	r2, r5
 8015d98:	4633      	mov	r3, r6
 8015d9a:	f7ea fee5 	bl	8000b68 <__aeabi_dcmpgt>
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	f040 8298 	bne.w	80162d4 <_dtoa_r+0x95c>
 8015da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015da8:	462a      	mov	r2, r5
 8015daa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015dae:	f7ea febd 	bl	8000b2c <__aeabi_dcmplt>
 8015db2:	bb38      	cbnz	r0, 8015e04 <_dtoa_r+0x48c>
 8015db4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015db8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015dbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	f2c0 8157 	blt.w	8016072 <_dtoa_r+0x6fa>
 8015dc4:	2f0e      	cmp	r7, #14
 8015dc6:	f300 8154 	bgt.w	8016072 <_dtoa_r+0x6fa>
 8015dca:	4b4b      	ldr	r3, [pc, #300]	@ (8015ef8 <_dtoa_r+0x580>)
 8015dcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015dd0:	ed93 7b00 	vldr	d7, [r3]
 8015dd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	ed8d 7b00 	vstr	d7, [sp]
 8015ddc:	f280 80e5 	bge.w	8015faa <_dtoa_r+0x632>
 8015de0:	9b03      	ldr	r3, [sp, #12]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	f300 80e1 	bgt.w	8015faa <_dtoa_r+0x632>
 8015de8:	d10c      	bne.n	8015e04 <_dtoa_r+0x48c>
 8015dea:	4b48      	ldr	r3, [pc, #288]	@ (8015f0c <_dtoa_r+0x594>)
 8015dec:	2200      	movs	r2, #0
 8015dee:	ec51 0b17 	vmov	r0, r1, d7
 8015df2:	f7ea fc29 	bl	8000648 <__aeabi_dmul>
 8015df6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015dfa:	f7ea feab 	bl	8000b54 <__aeabi_dcmpge>
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	f000 8266 	beq.w	80162d0 <_dtoa_r+0x958>
 8015e04:	2400      	movs	r4, #0
 8015e06:	4625      	mov	r5, r4
 8015e08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e0a:	4656      	mov	r6, sl
 8015e0c:	ea6f 0803 	mvn.w	r8, r3
 8015e10:	2700      	movs	r7, #0
 8015e12:	4621      	mov	r1, r4
 8015e14:	4648      	mov	r0, r9
 8015e16:	f000 fcbf 	bl	8016798 <_Bfree>
 8015e1a:	2d00      	cmp	r5, #0
 8015e1c:	f000 80bd 	beq.w	8015f9a <_dtoa_r+0x622>
 8015e20:	b12f      	cbz	r7, 8015e2e <_dtoa_r+0x4b6>
 8015e22:	42af      	cmp	r7, r5
 8015e24:	d003      	beq.n	8015e2e <_dtoa_r+0x4b6>
 8015e26:	4639      	mov	r1, r7
 8015e28:	4648      	mov	r0, r9
 8015e2a:	f000 fcb5 	bl	8016798 <_Bfree>
 8015e2e:	4629      	mov	r1, r5
 8015e30:	4648      	mov	r0, r9
 8015e32:	f000 fcb1 	bl	8016798 <_Bfree>
 8015e36:	e0b0      	b.n	8015f9a <_dtoa_r+0x622>
 8015e38:	07e2      	lsls	r2, r4, #31
 8015e3a:	d505      	bpl.n	8015e48 <_dtoa_r+0x4d0>
 8015e3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015e40:	f7ea fc02 	bl	8000648 <__aeabi_dmul>
 8015e44:	3601      	adds	r6, #1
 8015e46:	2301      	movs	r3, #1
 8015e48:	1064      	asrs	r4, r4, #1
 8015e4a:	3508      	adds	r5, #8
 8015e4c:	e762      	b.n	8015d14 <_dtoa_r+0x39c>
 8015e4e:	2602      	movs	r6, #2
 8015e50:	e765      	b.n	8015d1e <_dtoa_r+0x3a6>
 8015e52:	9c03      	ldr	r4, [sp, #12]
 8015e54:	46b8      	mov	r8, r7
 8015e56:	e784      	b.n	8015d62 <_dtoa_r+0x3ea>
 8015e58:	4b27      	ldr	r3, [pc, #156]	@ (8015ef8 <_dtoa_r+0x580>)
 8015e5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015e5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015e60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015e64:	4454      	add	r4, sl
 8015e66:	2900      	cmp	r1, #0
 8015e68:	d054      	beq.n	8015f14 <_dtoa_r+0x59c>
 8015e6a:	4929      	ldr	r1, [pc, #164]	@ (8015f10 <_dtoa_r+0x598>)
 8015e6c:	2000      	movs	r0, #0
 8015e6e:	f7ea fd15 	bl	800089c <__aeabi_ddiv>
 8015e72:	4633      	mov	r3, r6
 8015e74:	462a      	mov	r2, r5
 8015e76:	f7ea fa2f 	bl	80002d8 <__aeabi_dsub>
 8015e7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015e7e:	4656      	mov	r6, sl
 8015e80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015e84:	f7ea fe90 	bl	8000ba8 <__aeabi_d2iz>
 8015e88:	4605      	mov	r5, r0
 8015e8a:	f7ea fb73 	bl	8000574 <__aeabi_i2d>
 8015e8e:	4602      	mov	r2, r0
 8015e90:	460b      	mov	r3, r1
 8015e92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015e96:	f7ea fa1f 	bl	80002d8 <__aeabi_dsub>
 8015e9a:	3530      	adds	r5, #48	@ 0x30
 8015e9c:	4602      	mov	r2, r0
 8015e9e:	460b      	mov	r3, r1
 8015ea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015ea4:	f806 5b01 	strb.w	r5, [r6], #1
 8015ea8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015eac:	f7ea fe3e 	bl	8000b2c <__aeabi_dcmplt>
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	d172      	bne.n	8015f9a <_dtoa_r+0x622>
 8015eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015eb8:	4911      	ldr	r1, [pc, #68]	@ (8015f00 <_dtoa_r+0x588>)
 8015eba:	2000      	movs	r0, #0
 8015ebc:	f7ea fa0c 	bl	80002d8 <__aeabi_dsub>
 8015ec0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015ec4:	f7ea fe32 	bl	8000b2c <__aeabi_dcmplt>
 8015ec8:	2800      	cmp	r0, #0
 8015eca:	f040 80b4 	bne.w	8016036 <_dtoa_r+0x6be>
 8015ece:	42a6      	cmp	r6, r4
 8015ed0:	f43f af70 	beq.w	8015db4 <_dtoa_r+0x43c>
 8015ed4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8015f04 <_dtoa_r+0x58c>)
 8015eda:	2200      	movs	r2, #0
 8015edc:	f7ea fbb4 	bl	8000648 <__aeabi_dmul>
 8015ee0:	4b08      	ldr	r3, [pc, #32]	@ (8015f04 <_dtoa_r+0x58c>)
 8015ee2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015eec:	f7ea fbac 	bl	8000648 <__aeabi_dmul>
 8015ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ef4:	e7c4      	b.n	8015e80 <_dtoa_r+0x508>
 8015ef6:	bf00      	nop
 8015ef8:	0801ca98 	.word	0x0801ca98
 8015efc:	0801ca70 	.word	0x0801ca70
 8015f00:	3ff00000 	.word	0x3ff00000
 8015f04:	40240000 	.word	0x40240000
 8015f08:	401c0000 	.word	0x401c0000
 8015f0c:	40140000 	.word	0x40140000
 8015f10:	3fe00000 	.word	0x3fe00000
 8015f14:	4631      	mov	r1, r6
 8015f16:	4628      	mov	r0, r5
 8015f18:	f7ea fb96 	bl	8000648 <__aeabi_dmul>
 8015f1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015f20:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015f22:	4656      	mov	r6, sl
 8015f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f28:	f7ea fe3e 	bl	8000ba8 <__aeabi_d2iz>
 8015f2c:	4605      	mov	r5, r0
 8015f2e:	f7ea fb21 	bl	8000574 <__aeabi_i2d>
 8015f32:	4602      	mov	r2, r0
 8015f34:	460b      	mov	r3, r1
 8015f36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f3a:	f7ea f9cd 	bl	80002d8 <__aeabi_dsub>
 8015f3e:	3530      	adds	r5, #48	@ 0x30
 8015f40:	f806 5b01 	strb.w	r5, [r6], #1
 8015f44:	4602      	mov	r2, r0
 8015f46:	460b      	mov	r3, r1
 8015f48:	42a6      	cmp	r6, r4
 8015f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015f4e:	f04f 0200 	mov.w	r2, #0
 8015f52:	d124      	bne.n	8015f9e <_dtoa_r+0x626>
 8015f54:	4baf      	ldr	r3, [pc, #700]	@ (8016214 <_dtoa_r+0x89c>)
 8015f56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015f5a:	f7ea f9bf 	bl	80002dc <__adddf3>
 8015f5e:	4602      	mov	r2, r0
 8015f60:	460b      	mov	r3, r1
 8015f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f66:	f7ea fdff 	bl	8000b68 <__aeabi_dcmpgt>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	d163      	bne.n	8016036 <_dtoa_r+0x6be>
 8015f6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015f72:	49a8      	ldr	r1, [pc, #672]	@ (8016214 <_dtoa_r+0x89c>)
 8015f74:	2000      	movs	r0, #0
 8015f76:	f7ea f9af 	bl	80002d8 <__aeabi_dsub>
 8015f7a:	4602      	mov	r2, r0
 8015f7c:	460b      	mov	r3, r1
 8015f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f82:	f7ea fdd3 	bl	8000b2c <__aeabi_dcmplt>
 8015f86:	2800      	cmp	r0, #0
 8015f88:	f43f af14 	beq.w	8015db4 <_dtoa_r+0x43c>
 8015f8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015f8e:	1e73      	subs	r3, r6, #1
 8015f90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015f92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015f96:	2b30      	cmp	r3, #48	@ 0x30
 8015f98:	d0f8      	beq.n	8015f8c <_dtoa_r+0x614>
 8015f9a:	4647      	mov	r7, r8
 8015f9c:	e03b      	b.n	8016016 <_dtoa_r+0x69e>
 8015f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8016218 <_dtoa_r+0x8a0>)
 8015fa0:	f7ea fb52 	bl	8000648 <__aeabi_dmul>
 8015fa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015fa8:	e7bc      	b.n	8015f24 <_dtoa_r+0x5ac>
 8015faa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015fae:	4656      	mov	r6, sl
 8015fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	4629      	mov	r1, r5
 8015fb8:	f7ea fc70 	bl	800089c <__aeabi_ddiv>
 8015fbc:	f7ea fdf4 	bl	8000ba8 <__aeabi_d2iz>
 8015fc0:	4680      	mov	r8, r0
 8015fc2:	f7ea fad7 	bl	8000574 <__aeabi_i2d>
 8015fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fca:	f7ea fb3d 	bl	8000648 <__aeabi_dmul>
 8015fce:	4602      	mov	r2, r0
 8015fd0:	460b      	mov	r3, r1
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	4629      	mov	r1, r5
 8015fd6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015fda:	f7ea f97d 	bl	80002d8 <__aeabi_dsub>
 8015fde:	f806 4b01 	strb.w	r4, [r6], #1
 8015fe2:	9d03      	ldr	r5, [sp, #12]
 8015fe4:	eba6 040a 	sub.w	r4, r6, sl
 8015fe8:	42a5      	cmp	r5, r4
 8015fea:	4602      	mov	r2, r0
 8015fec:	460b      	mov	r3, r1
 8015fee:	d133      	bne.n	8016058 <_dtoa_r+0x6e0>
 8015ff0:	f7ea f974 	bl	80002dc <__adddf3>
 8015ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ff8:	4604      	mov	r4, r0
 8015ffa:	460d      	mov	r5, r1
 8015ffc:	f7ea fdb4 	bl	8000b68 <__aeabi_dcmpgt>
 8016000:	b9c0      	cbnz	r0, 8016034 <_dtoa_r+0x6bc>
 8016002:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016006:	4620      	mov	r0, r4
 8016008:	4629      	mov	r1, r5
 801600a:	f7ea fd85 	bl	8000b18 <__aeabi_dcmpeq>
 801600e:	b110      	cbz	r0, 8016016 <_dtoa_r+0x69e>
 8016010:	f018 0f01 	tst.w	r8, #1
 8016014:	d10e      	bne.n	8016034 <_dtoa_r+0x6bc>
 8016016:	9902      	ldr	r1, [sp, #8]
 8016018:	4648      	mov	r0, r9
 801601a:	f000 fbbd 	bl	8016798 <_Bfree>
 801601e:	2300      	movs	r3, #0
 8016020:	7033      	strb	r3, [r6, #0]
 8016022:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016024:	3701      	adds	r7, #1
 8016026:	601f      	str	r7, [r3, #0]
 8016028:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801602a:	2b00      	cmp	r3, #0
 801602c:	f000 824b 	beq.w	80164c6 <_dtoa_r+0xb4e>
 8016030:	601e      	str	r6, [r3, #0]
 8016032:	e248      	b.n	80164c6 <_dtoa_r+0xb4e>
 8016034:	46b8      	mov	r8, r7
 8016036:	4633      	mov	r3, r6
 8016038:	461e      	mov	r6, r3
 801603a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801603e:	2a39      	cmp	r2, #57	@ 0x39
 8016040:	d106      	bne.n	8016050 <_dtoa_r+0x6d8>
 8016042:	459a      	cmp	sl, r3
 8016044:	d1f8      	bne.n	8016038 <_dtoa_r+0x6c0>
 8016046:	2230      	movs	r2, #48	@ 0x30
 8016048:	f108 0801 	add.w	r8, r8, #1
 801604c:	f88a 2000 	strb.w	r2, [sl]
 8016050:	781a      	ldrb	r2, [r3, #0]
 8016052:	3201      	adds	r2, #1
 8016054:	701a      	strb	r2, [r3, #0]
 8016056:	e7a0      	b.n	8015f9a <_dtoa_r+0x622>
 8016058:	4b6f      	ldr	r3, [pc, #444]	@ (8016218 <_dtoa_r+0x8a0>)
 801605a:	2200      	movs	r2, #0
 801605c:	f7ea faf4 	bl	8000648 <__aeabi_dmul>
 8016060:	2200      	movs	r2, #0
 8016062:	2300      	movs	r3, #0
 8016064:	4604      	mov	r4, r0
 8016066:	460d      	mov	r5, r1
 8016068:	f7ea fd56 	bl	8000b18 <__aeabi_dcmpeq>
 801606c:	2800      	cmp	r0, #0
 801606e:	d09f      	beq.n	8015fb0 <_dtoa_r+0x638>
 8016070:	e7d1      	b.n	8016016 <_dtoa_r+0x69e>
 8016072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016074:	2a00      	cmp	r2, #0
 8016076:	f000 80ea 	beq.w	801624e <_dtoa_r+0x8d6>
 801607a:	9a07      	ldr	r2, [sp, #28]
 801607c:	2a01      	cmp	r2, #1
 801607e:	f300 80cd 	bgt.w	801621c <_dtoa_r+0x8a4>
 8016082:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016084:	2a00      	cmp	r2, #0
 8016086:	f000 80c1 	beq.w	801620c <_dtoa_r+0x894>
 801608a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801608e:	9c08      	ldr	r4, [sp, #32]
 8016090:	9e00      	ldr	r6, [sp, #0]
 8016092:	9a00      	ldr	r2, [sp, #0]
 8016094:	441a      	add	r2, r3
 8016096:	9200      	str	r2, [sp, #0]
 8016098:	9a06      	ldr	r2, [sp, #24]
 801609a:	2101      	movs	r1, #1
 801609c:	441a      	add	r2, r3
 801609e:	4648      	mov	r0, r9
 80160a0:	9206      	str	r2, [sp, #24]
 80160a2:	f000 fc77 	bl	8016994 <__i2b>
 80160a6:	4605      	mov	r5, r0
 80160a8:	b166      	cbz	r6, 80160c4 <_dtoa_r+0x74c>
 80160aa:	9b06      	ldr	r3, [sp, #24]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	dd09      	ble.n	80160c4 <_dtoa_r+0x74c>
 80160b0:	42b3      	cmp	r3, r6
 80160b2:	9a00      	ldr	r2, [sp, #0]
 80160b4:	bfa8      	it	ge
 80160b6:	4633      	movge	r3, r6
 80160b8:	1ad2      	subs	r2, r2, r3
 80160ba:	9200      	str	r2, [sp, #0]
 80160bc:	9a06      	ldr	r2, [sp, #24]
 80160be:	1af6      	subs	r6, r6, r3
 80160c0:	1ad3      	subs	r3, r2, r3
 80160c2:	9306      	str	r3, [sp, #24]
 80160c4:	9b08      	ldr	r3, [sp, #32]
 80160c6:	b30b      	cbz	r3, 801610c <_dtoa_r+0x794>
 80160c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	f000 80c6 	beq.w	801625c <_dtoa_r+0x8e4>
 80160d0:	2c00      	cmp	r4, #0
 80160d2:	f000 80c0 	beq.w	8016256 <_dtoa_r+0x8de>
 80160d6:	4629      	mov	r1, r5
 80160d8:	4622      	mov	r2, r4
 80160da:	4648      	mov	r0, r9
 80160dc:	f000 fd12 	bl	8016b04 <__pow5mult>
 80160e0:	9a02      	ldr	r2, [sp, #8]
 80160e2:	4601      	mov	r1, r0
 80160e4:	4605      	mov	r5, r0
 80160e6:	4648      	mov	r0, r9
 80160e8:	f000 fc6a 	bl	80169c0 <__multiply>
 80160ec:	9902      	ldr	r1, [sp, #8]
 80160ee:	4680      	mov	r8, r0
 80160f0:	4648      	mov	r0, r9
 80160f2:	f000 fb51 	bl	8016798 <_Bfree>
 80160f6:	9b08      	ldr	r3, [sp, #32]
 80160f8:	1b1b      	subs	r3, r3, r4
 80160fa:	9308      	str	r3, [sp, #32]
 80160fc:	f000 80b1 	beq.w	8016262 <_dtoa_r+0x8ea>
 8016100:	9a08      	ldr	r2, [sp, #32]
 8016102:	4641      	mov	r1, r8
 8016104:	4648      	mov	r0, r9
 8016106:	f000 fcfd 	bl	8016b04 <__pow5mult>
 801610a:	9002      	str	r0, [sp, #8]
 801610c:	2101      	movs	r1, #1
 801610e:	4648      	mov	r0, r9
 8016110:	f000 fc40 	bl	8016994 <__i2b>
 8016114:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016116:	4604      	mov	r4, r0
 8016118:	2b00      	cmp	r3, #0
 801611a:	f000 81d8 	beq.w	80164ce <_dtoa_r+0xb56>
 801611e:	461a      	mov	r2, r3
 8016120:	4601      	mov	r1, r0
 8016122:	4648      	mov	r0, r9
 8016124:	f000 fcee 	bl	8016b04 <__pow5mult>
 8016128:	9b07      	ldr	r3, [sp, #28]
 801612a:	2b01      	cmp	r3, #1
 801612c:	4604      	mov	r4, r0
 801612e:	f300 809f 	bgt.w	8016270 <_dtoa_r+0x8f8>
 8016132:	9b04      	ldr	r3, [sp, #16]
 8016134:	2b00      	cmp	r3, #0
 8016136:	f040 8097 	bne.w	8016268 <_dtoa_r+0x8f0>
 801613a:	9b05      	ldr	r3, [sp, #20]
 801613c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016140:	2b00      	cmp	r3, #0
 8016142:	f040 8093 	bne.w	801626c <_dtoa_r+0x8f4>
 8016146:	9b05      	ldr	r3, [sp, #20]
 8016148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801614c:	0d1b      	lsrs	r3, r3, #20
 801614e:	051b      	lsls	r3, r3, #20
 8016150:	b133      	cbz	r3, 8016160 <_dtoa_r+0x7e8>
 8016152:	9b00      	ldr	r3, [sp, #0]
 8016154:	3301      	adds	r3, #1
 8016156:	9300      	str	r3, [sp, #0]
 8016158:	9b06      	ldr	r3, [sp, #24]
 801615a:	3301      	adds	r3, #1
 801615c:	9306      	str	r3, [sp, #24]
 801615e:	2301      	movs	r3, #1
 8016160:	9308      	str	r3, [sp, #32]
 8016162:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016164:	2b00      	cmp	r3, #0
 8016166:	f000 81b8 	beq.w	80164da <_dtoa_r+0xb62>
 801616a:	6923      	ldr	r3, [r4, #16]
 801616c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016170:	6918      	ldr	r0, [r3, #16]
 8016172:	f000 fbc3 	bl	80168fc <__hi0bits>
 8016176:	f1c0 0020 	rsb	r0, r0, #32
 801617a:	9b06      	ldr	r3, [sp, #24]
 801617c:	4418      	add	r0, r3
 801617e:	f010 001f 	ands.w	r0, r0, #31
 8016182:	f000 8082 	beq.w	801628a <_dtoa_r+0x912>
 8016186:	f1c0 0320 	rsb	r3, r0, #32
 801618a:	2b04      	cmp	r3, #4
 801618c:	dd73      	ble.n	8016276 <_dtoa_r+0x8fe>
 801618e:	9b00      	ldr	r3, [sp, #0]
 8016190:	f1c0 001c 	rsb	r0, r0, #28
 8016194:	4403      	add	r3, r0
 8016196:	9300      	str	r3, [sp, #0]
 8016198:	9b06      	ldr	r3, [sp, #24]
 801619a:	4403      	add	r3, r0
 801619c:	4406      	add	r6, r0
 801619e:	9306      	str	r3, [sp, #24]
 80161a0:	9b00      	ldr	r3, [sp, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	dd05      	ble.n	80161b2 <_dtoa_r+0x83a>
 80161a6:	9902      	ldr	r1, [sp, #8]
 80161a8:	461a      	mov	r2, r3
 80161aa:	4648      	mov	r0, r9
 80161ac:	f000 fd04 	bl	8016bb8 <__lshift>
 80161b0:	9002      	str	r0, [sp, #8]
 80161b2:	9b06      	ldr	r3, [sp, #24]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	dd05      	ble.n	80161c4 <_dtoa_r+0x84c>
 80161b8:	4621      	mov	r1, r4
 80161ba:	461a      	mov	r2, r3
 80161bc:	4648      	mov	r0, r9
 80161be:	f000 fcfb 	bl	8016bb8 <__lshift>
 80161c2:	4604      	mov	r4, r0
 80161c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d061      	beq.n	801628e <_dtoa_r+0x916>
 80161ca:	9802      	ldr	r0, [sp, #8]
 80161cc:	4621      	mov	r1, r4
 80161ce:	f000 fd5f 	bl	8016c90 <__mcmp>
 80161d2:	2800      	cmp	r0, #0
 80161d4:	da5b      	bge.n	801628e <_dtoa_r+0x916>
 80161d6:	2300      	movs	r3, #0
 80161d8:	9902      	ldr	r1, [sp, #8]
 80161da:	220a      	movs	r2, #10
 80161dc:	4648      	mov	r0, r9
 80161de:	f000 fafd 	bl	80167dc <__multadd>
 80161e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161e4:	9002      	str	r0, [sp, #8]
 80161e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	f000 8177 	beq.w	80164de <_dtoa_r+0xb66>
 80161f0:	4629      	mov	r1, r5
 80161f2:	2300      	movs	r3, #0
 80161f4:	220a      	movs	r2, #10
 80161f6:	4648      	mov	r0, r9
 80161f8:	f000 faf0 	bl	80167dc <__multadd>
 80161fc:	f1bb 0f00 	cmp.w	fp, #0
 8016200:	4605      	mov	r5, r0
 8016202:	dc6f      	bgt.n	80162e4 <_dtoa_r+0x96c>
 8016204:	9b07      	ldr	r3, [sp, #28]
 8016206:	2b02      	cmp	r3, #2
 8016208:	dc49      	bgt.n	801629e <_dtoa_r+0x926>
 801620a:	e06b      	b.n	80162e4 <_dtoa_r+0x96c>
 801620c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801620e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8016212:	e73c      	b.n	801608e <_dtoa_r+0x716>
 8016214:	3fe00000 	.word	0x3fe00000
 8016218:	40240000 	.word	0x40240000
 801621c:	9b03      	ldr	r3, [sp, #12]
 801621e:	1e5c      	subs	r4, r3, #1
 8016220:	9b08      	ldr	r3, [sp, #32]
 8016222:	42a3      	cmp	r3, r4
 8016224:	db09      	blt.n	801623a <_dtoa_r+0x8c2>
 8016226:	1b1c      	subs	r4, r3, r4
 8016228:	9b03      	ldr	r3, [sp, #12]
 801622a:	2b00      	cmp	r3, #0
 801622c:	f6bf af30 	bge.w	8016090 <_dtoa_r+0x718>
 8016230:	9b00      	ldr	r3, [sp, #0]
 8016232:	9a03      	ldr	r2, [sp, #12]
 8016234:	1a9e      	subs	r6, r3, r2
 8016236:	2300      	movs	r3, #0
 8016238:	e72b      	b.n	8016092 <_dtoa_r+0x71a>
 801623a:	9b08      	ldr	r3, [sp, #32]
 801623c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801623e:	9408      	str	r4, [sp, #32]
 8016240:	1ae3      	subs	r3, r4, r3
 8016242:	441a      	add	r2, r3
 8016244:	9e00      	ldr	r6, [sp, #0]
 8016246:	9b03      	ldr	r3, [sp, #12]
 8016248:	920d      	str	r2, [sp, #52]	@ 0x34
 801624a:	2400      	movs	r4, #0
 801624c:	e721      	b.n	8016092 <_dtoa_r+0x71a>
 801624e:	9c08      	ldr	r4, [sp, #32]
 8016250:	9e00      	ldr	r6, [sp, #0]
 8016252:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8016254:	e728      	b.n	80160a8 <_dtoa_r+0x730>
 8016256:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801625a:	e751      	b.n	8016100 <_dtoa_r+0x788>
 801625c:	9a08      	ldr	r2, [sp, #32]
 801625e:	9902      	ldr	r1, [sp, #8]
 8016260:	e750      	b.n	8016104 <_dtoa_r+0x78c>
 8016262:	f8cd 8008 	str.w	r8, [sp, #8]
 8016266:	e751      	b.n	801610c <_dtoa_r+0x794>
 8016268:	2300      	movs	r3, #0
 801626a:	e779      	b.n	8016160 <_dtoa_r+0x7e8>
 801626c:	9b04      	ldr	r3, [sp, #16]
 801626e:	e777      	b.n	8016160 <_dtoa_r+0x7e8>
 8016270:	2300      	movs	r3, #0
 8016272:	9308      	str	r3, [sp, #32]
 8016274:	e779      	b.n	801616a <_dtoa_r+0x7f2>
 8016276:	d093      	beq.n	80161a0 <_dtoa_r+0x828>
 8016278:	9a00      	ldr	r2, [sp, #0]
 801627a:	331c      	adds	r3, #28
 801627c:	441a      	add	r2, r3
 801627e:	9200      	str	r2, [sp, #0]
 8016280:	9a06      	ldr	r2, [sp, #24]
 8016282:	441a      	add	r2, r3
 8016284:	441e      	add	r6, r3
 8016286:	9206      	str	r2, [sp, #24]
 8016288:	e78a      	b.n	80161a0 <_dtoa_r+0x828>
 801628a:	4603      	mov	r3, r0
 801628c:	e7f4      	b.n	8016278 <_dtoa_r+0x900>
 801628e:	9b03      	ldr	r3, [sp, #12]
 8016290:	2b00      	cmp	r3, #0
 8016292:	46b8      	mov	r8, r7
 8016294:	dc20      	bgt.n	80162d8 <_dtoa_r+0x960>
 8016296:	469b      	mov	fp, r3
 8016298:	9b07      	ldr	r3, [sp, #28]
 801629a:	2b02      	cmp	r3, #2
 801629c:	dd1e      	ble.n	80162dc <_dtoa_r+0x964>
 801629e:	f1bb 0f00 	cmp.w	fp, #0
 80162a2:	f47f adb1 	bne.w	8015e08 <_dtoa_r+0x490>
 80162a6:	4621      	mov	r1, r4
 80162a8:	465b      	mov	r3, fp
 80162aa:	2205      	movs	r2, #5
 80162ac:	4648      	mov	r0, r9
 80162ae:	f000 fa95 	bl	80167dc <__multadd>
 80162b2:	4601      	mov	r1, r0
 80162b4:	4604      	mov	r4, r0
 80162b6:	9802      	ldr	r0, [sp, #8]
 80162b8:	f000 fcea 	bl	8016c90 <__mcmp>
 80162bc:	2800      	cmp	r0, #0
 80162be:	f77f ada3 	ble.w	8015e08 <_dtoa_r+0x490>
 80162c2:	4656      	mov	r6, sl
 80162c4:	2331      	movs	r3, #49	@ 0x31
 80162c6:	f806 3b01 	strb.w	r3, [r6], #1
 80162ca:	f108 0801 	add.w	r8, r8, #1
 80162ce:	e59f      	b.n	8015e10 <_dtoa_r+0x498>
 80162d0:	9c03      	ldr	r4, [sp, #12]
 80162d2:	46b8      	mov	r8, r7
 80162d4:	4625      	mov	r5, r4
 80162d6:	e7f4      	b.n	80162c2 <_dtoa_r+0x94a>
 80162d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80162dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162de:	2b00      	cmp	r3, #0
 80162e0:	f000 8101 	beq.w	80164e6 <_dtoa_r+0xb6e>
 80162e4:	2e00      	cmp	r6, #0
 80162e6:	dd05      	ble.n	80162f4 <_dtoa_r+0x97c>
 80162e8:	4629      	mov	r1, r5
 80162ea:	4632      	mov	r2, r6
 80162ec:	4648      	mov	r0, r9
 80162ee:	f000 fc63 	bl	8016bb8 <__lshift>
 80162f2:	4605      	mov	r5, r0
 80162f4:	9b08      	ldr	r3, [sp, #32]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d05c      	beq.n	80163b4 <_dtoa_r+0xa3c>
 80162fa:	6869      	ldr	r1, [r5, #4]
 80162fc:	4648      	mov	r0, r9
 80162fe:	f000 fa0b 	bl	8016718 <_Balloc>
 8016302:	4606      	mov	r6, r0
 8016304:	b928      	cbnz	r0, 8016312 <_dtoa_r+0x99a>
 8016306:	4b82      	ldr	r3, [pc, #520]	@ (8016510 <_dtoa_r+0xb98>)
 8016308:	4602      	mov	r2, r0
 801630a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801630e:	f7ff bb4a 	b.w	80159a6 <_dtoa_r+0x2e>
 8016312:	692a      	ldr	r2, [r5, #16]
 8016314:	3202      	adds	r2, #2
 8016316:	0092      	lsls	r2, r2, #2
 8016318:	f105 010c 	add.w	r1, r5, #12
 801631c:	300c      	adds	r0, #12
 801631e:	f7ff fa8c 	bl	801583a <memcpy>
 8016322:	2201      	movs	r2, #1
 8016324:	4631      	mov	r1, r6
 8016326:	4648      	mov	r0, r9
 8016328:	f000 fc46 	bl	8016bb8 <__lshift>
 801632c:	f10a 0301 	add.w	r3, sl, #1
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	eb0a 030b 	add.w	r3, sl, fp
 8016336:	9308      	str	r3, [sp, #32]
 8016338:	9b04      	ldr	r3, [sp, #16]
 801633a:	f003 0301 	and.w	r3, r3, #1
 801633e:	462f      	mov	r7, r5
 8016340:	9306      	str	r3, [sp, #24]
 8016342:	4605      	mov	r5, r0
 8016344:	9b00      	ldr	r3, [sp, #0]
 8016346:	9802      	ldr	r0, [sp, #8]
 8016348:	4621      	mov	r1, r4
 801634a:	f103 3bff 	add.w	fp, r3, #4294967295
 801634e:	f7ff fa89 	bl	8015864 <quorem>
 8016352:	4603      	mov	r3, r0
 8016354:	3330      	adds	r3, #48	@ 0x30
 8016356:	9003      	str	r0, [sp, #12]
 8016358:	4639      	mov	r1, r7
 801635a:	9802      	ldr	r0, [sp, #8]
 801635c:	9309      	str	r3, [sp, #36]	@ 0x24
 801635e:	f000 fc97 	bl	8016c90 <__mcmp>
 8016362:	462a      	mov	r2, r5
 8016364:	9004      	str	r0, [sp, #16]
 8016366:	4621      	mov	r1, r4
 8016368:	4648      	mov	r0, r9
 801636a:	f000 fcad 	bl	8016cc8 <__mdiff>
 801636e:	68c2      	ldr	r2, [r0, #12]
 8016370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016372:	4606      	mov	r6, r0
 8016374:	bb02      	cbnz	r2, 80163b8 <_dtoa_r+0xa40>
 8016376:	4601      	mov	r1, r0
 8016378:	9802      	ldr	r0, [sp, #8]
 801637a:	f000 fc89 	bl	8016c90 <__mcmp>
 801637e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016380:	4602      	mov	r2, r0
 8016382:	4631      	mov	r1, r6
 8016384:	4648      	mov	r0, r9
 8016386:	920c      	str	r2, [sp, #48]	@ 0x30
 8016388:	9309      	str	r3, [sp, #36]	@ 0x24
 801638a:	f000 fa05 	bl	8016798 <_Bfree>
 801638e:	9b07      	ldr	r3, [sp, #28]
 8016390:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016392:	9e00      	ldr	r6, [sp, #0]
 8016394:	ea42 0103 	orr.w	r1, r2, r3
 8016398:	9b06      	ldr	r3, [sp, #24]
 801639a:	4319      	orrs	r1, r3
 801639c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801639e:	d10d      	bne.n	80163bc <_dtoa_r+0xa44>
 80163a0:	2b39      	cmp	r3, #57	@ 0x39
 80163a2:	d027      	beq.n	80163f4 <_dtoa_r+0xa7c>
 80163a4:	9a04      	ldr	r2, [sp, #16]
 80163a6:	2a00      	cmp	r2, #0
 80163a8:	dd01      	ble.n	80163ae <_dtoa_r+0xa36>
 80163aa:	9b03      	ldr	r3, [sp, #12]
 80163ac:	3331      	adds	r3, #49	@ 0x31
 80163ae:	f88b 3000 	strb.w	r3, [fp]
 80163b2:	e52e      	b.n	8015e12 <_dtoa_r+0x49a>
 80163b4:	4628      	mov	r0, r5
 80163b6:	e7b9      	b.n	801632c <_dtoa_r+0x9b4>
 80163b8:	2201      	movs	r2, #1
 80163ba:	e7e2      	b.n	8016382 <_dtoa_r+0xa0a>
 80163bc:	9904      	ldr	r1, [sp, #16]
 80163be:	2900      	cmp	r1, #0
 80163c0:	db04      	blt.n	80163cc <_dtoa_r+0xa54>
 80163c2:	9807      	ldr	r0, [sp, #28]
 80163c4:	4301      	orrs	r1, r0
 80163c6:	9806      	ldr	r0, [sp, #24]
 80163c8:	4301      	orrs	r1, r0
 80163ca:	d120      	bne.n	801640e <_dtoa_r+0xa96>
 80163cc:	2a00      	cmp	r2, #0
 80163ce:	ddee      	ble.n	80163ae <_dtoa_r+0xa36>
 80163d0:	9902      	ldr	r1, [sp, #8]
 80163d2:	9300      	str	r3, [sp, #0]
 80163d4:	2201      	movs	r2, #1
 80163d6:	4648      	mov	r0, r9
 80163d8:	f000 fbee 	bl	8016bb8 <__lshift>
 80163dc:	4621      	mov	r1, r4
 80163de:	9002      	str	r0, [sp, #8]
 80163e0:	f000 fc56 	bl	8016c90 <__mcmp>
 80163e4:	2800      	cmp	r0, #0
 80163e6:	9b00      	ldr	r3, [sp, #0]
 80163e8:	dc02      	bgt.n	80163f0 <_dtoa_r+0xa78>
 80163ea:	d1e0      	bne.n	80163ae <_dtoa_r+0xa36>
 80163ec:	07da      	lsls	r2, r3, #31
 80163ee:	d5de      	bpl.n	80163ae <_dtoa_r+0xa36>
 80163f0:	2b39      	cmp	r3, #57	@ 0x39
 80163f2:	d1da      	bne.n	80163aa <_dtoa_r+0xa32>
 80163f4:	2339      	movs	r3, #57	@ 0x39
 80163f6:	f88b 3000 	strb.w	r3, [fp]
 80163fa:	4633      	mov	r3, r6
 80163fc:	461e      	mov	r6, r3
 80163fe:	3b01      	subs	r3, #1
 8016400:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016404:	2a39      	cmp	r2, #57	@ 0x39
 8016406:	d04e      	beq.n	80164a6 <_dtoa_r+0xb2e>
 8016408:	3201      	adds	r2, #1
 801640a:	701a      	strb	r2, [r3, #0]
 801640c:	e501      	b.n	8015e12 <_dtoa_r+0x49a>
 801640e:	2a00      	cmp	r2, #0
 8016410:	dd03      	ble.n	801641a <_dtoa_r+0xaa2>
 8016412:	2b39      	cmp	r3, #57	@ 0x39
 8016414:	d0ee      	beq.n	80163f4 <_dtoa_r+0xa7c>
 8016416:	3301      	adds	r3, #1
 8016418:	e7c9      	b.n	80163ae <_dtoa_r+0xa36>
 801641a:	9a00      	ldr	r2, [sp, #0]
 801641c:	9908      	ldr	r1, [sp, #32]
 801641e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016422:	428a      	cmp	r2, r1
 8016424:	d028      	beq.n	8016478 <_dtoa_r+0xb00>
 8016426:	9902      	ldr	r1, [sp, #8]
 8016428:	2300      	movs	r3, #0
 801642a:	220a      	movs	r2, #10
 801642c:	4648      	mov	r0, r9
 801642e:	f000 f9d5 	bl	80167dc <__multadd>
 8016432:	42af      	cmp	r7, r5
 8016434:	9002      	str	r0, [sp, #8]
 8016436:	f04f 0300 	mov.w	r3, #0
 801643a:	f04f 020a 	mov.w	r2, #10
 801643e:	4639      	mov	r1, r7
 8016440:	4648      	mov	r0, r9
 8016442:	d107      	bne.n	8016454 <_dtoa_r+0xadc>
 8016444:	f000 f9ca 	bl	80167dc <__multadd>
 8016448:	4607      	mov	r7, r0
 801644a:	4605      	mov	r5, r0
 801644c:	9b00      	ldr	r3, [sp, #0]
 801644e:	3301      	adds	r3, #1
 8016450:	9300      	str	r3, [sp, #0]
 8016452:	e777      	b.n	8016344 <_dtoa_r+0x9cc>
 8016454:	f000 f9c2 	bl	80167dc <__multadd>
 8016458:	4629      	mov	r1, r5
 801645a:	4607      	mov	r7, r0
 801645c:	2300      	movs	r3, #0
 801645e:	220a      	movs	r2, #10
 8016460:	4648      	mov	r0, r9
 8016462:	f000 f9bb 	bl	80167dc <__multadd>
 8016466:	4605      	mov	r5, r0
 8016468:	e7f0      	b.n	801644c <_dtoa_r+0xad4>
 801646a:	f1bb 0f00 	cmp.w	fp, #0
 801646e:	bfcc      	ite	gt
 8016470:	465e      	movgt	r6, fp
 8016472:	2601      	movle	r6, #1
 8016474:	4456      	add	r6, sl
 8016476:	2700      	movs	r7, #0
 8016478:	9902      	ldr	r1, [sp, #8]
 801647a:	9300      	str	r3, [sp, #0]
 801647c:	2201      	movs	r2, #1
 801647e:	4648      	mov	r0, r9
 8016480:	f000 fb9a 	bl	8016bb8 <__lshift>
 8016484:	4621      	mov	r1, r4
 8016486:	9002      	str	r0, [sp, #8]
 8016488:	f000 fc02 	bl	8016c90 <__mcmp>
 801648c:	2800      	cmp	r0, #0
 801648e:	dcb4      	bgt.n	80163fa <_dtoa_r+0xa82>
 8016490:	d102      	bne.n	8016498 <_dtoa_r+0xb20>
 8016492:	9b00      	ldr	r3, [sp, #0]
 8016494:	07db      	lsls	r3, r3, #31
 8016496:	d4b0      	bmi.n	80163fa <_dtoa_r+0xa82>
 8016498:	4633      	mov	r3, r6
 801649a:	461e      	mov	r6, r3
 801649c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80164a0:	2a30      	cmp	r2, #48	@ 0x30
 80164a2:	d0fa      	beq.n	801649a <_dtoa_r+0xb22>
 80164a4:	e4b5      	b.n	8015e12 <_dtoa_r+0x49a>
 80164a6:	459a      	cmp	sl, r3
 80164a8:	d1a8      	bne.n	80163fc <_dtoa_r+0xa84>
 80164aa:	2331      	movs	r3, #49	@ 0x31
 80164ac:	f108 0801 	add.w	r8, r8, #1
 80164b0:	f88a 3000 	strb.w	r3, [sl]
 80164b4:	e4ad      	b.n	8015e12 <_dtoa_r+0x49a>
 80164b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80164b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8016514 <_dtoa_r+0xb9c>
 80164bc:	b11b      	cbz	r3, 80164c6 <_dtoa_r+0xb4e>
 80164be:	f10a 0308 	add.w	r3, sl, #8
 80164c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80164c4:	6013      	str	r3, [r2, #0]
 80164c6:	4650      	mov	r0, sl
 80164c8:	b017      	add	sp, #92	@ 0x5c
 80164ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ce:	9b07      	ldr	r3, [sp, #28]
 80164d0:	2b01      	cmp	r3, #1
 80164d2:	f77f ae2e 	ble.w	8016132 <_dtoa_r+0x7ba>
 80164d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80164d8:	9308      	str	r3, [sp, #32]
 80164da:	2001      	movs	r0, #1
 80164dc:	e64d      	b.n	801617a <_dtoa_r+0x802>
 80164de:	f1bb 0f00 	cmp.w	fp, #0
 80164e2:	f77f aed9 	ble.w	8016298 <_dtoa_r+0x920>
 80164e6:	4656      	mov	r6, sl
 80164e8:	9802      	ldr	r0, [sp, #8]
 80164ea:	4621      	mov	r1, r4
 80164ec:	f7ff f9ba 	bl	8015864 <quorem>
 80164f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80164f4:	f806 3b01 	strb.w	r3, [r6], #1
 80164f8:	eba6 020a 	sub.w	r2, r6, sl
 80164fc:	4593      	cmp	fp, r2
 80164fe:	ddb4      	ble.n	801646a <_dtoa_r+0xaf2>
 8016500:	9902      	ldr	r1, [sp, #8]
 8016502:	2300      	movs	r3, #0
 8016504:	220a      	movs	r2, #10
 8016506:	4648      	mov	r0, r9
 8016508:	f000 f968 	bl	80167dc <__multadd>
 801650c:	9002      	str	r0, [sp, #8]
 801650e:	e7eb      	b.n	80164e8 <_dtoa_r+0xb70>
 8016510:	0801c941 	.word	0x0801c941
 8016514:	0801c8c5 	.word	0x0801c8c5

08016518 <_free_r>:
 8016518:	b538      	push	{r3, r4, r5, lr}
 801651a:	4605      	mov	r5, r0
 801651c:	2900      	cmp	r1, #0
 801651e:	d041      	beq.n	80165a4 <_free_r+0x8c>
 8016520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016524:	1f0c      	subs	r4, r1, #4
 8016526:	2b00      	cmp	r3, #0
 8016528:	bfb8      	it	lt
 801652a:	18e4      	addlt	r4, r4, r3
 801652c:	f000 f8e8 	bl	8016700 <__malloc_lock>
 8016530:	4a1d      	ldr	r2, [pc, #116]	@ (80165a8 <_free_r+0x90>)
 8016532:	6813      	ldr	r3, [r2, #0]
 8016534:	b933      	cbnz	r3, 8016544 <_free_r+0x2c>
 8016536:	6063      	str	r3, [r4, #4]
 8016538:	6014      	str	r4, [r2, #0]
 801653a:	4628      	mov	r0, r5
 801653c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016540:	f000 b8e4 	b.w	801670c <__malloc_unlock>
 8016544:	42a3      	cmp	r3, r4
 8016546:	d908      	bls.n	801655a <_free_r+0x42>
 8016548:	6820      	ldr	r0, [r4, #0]
 801654a:	1821      	adds	r1, r4, r0
 801654c:	428b      	cmp	r3, r1
 801654e:	bf01      	itttt	eq
 8016550:	6819      	ldreq	r1, [r3, #0]
 8016552:	685b      	ldreq	r3, [r3, #4]
 8016554:	1809      	addeq	r1, r1, r0
 8016556:	6021      	streq	r1, [r4, #0]
 8016558:	e7ed      	b.n	8016536 <_free_r+0x1e>
 801655a:	461a      	mov	r2, r3
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	b10b      	cbz	r3, 8016564 <_free_r+0x4c>
 8016560:	42a3      	cmp	r3, r4
 8016562:	d9fa      	bls.n	801655a <_free_r+0x42>
 8016564:	6811      	ldr	r1, [r2, #0]
 8016566:	1850      	adds	r0, r2, r1
 8016568:	42a0      	cmp	r0, r4
 801656a:	d10b      	bne.n	8016584 <_free_r+0x6c>
 801656c:	6820      	ldr	r0, [r4, #0]
 801656e:	4401      	add	r1, r0
 8016570:	1850      	adds	r0, r2, r1
 8016572:	4283      	cmp	r3, r0
 8016574:	6011      	str	r1, [r2, #0]
 8016576:	d1e0      	bne.n	801653a <_free_r+0x22>
 8016578:	6818      	ldr	r0, [r3, #0]
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	6053      	str	r3, [r2, #4]
 801657e:	4408      	add	r0, r1
 8016580:	6010      	str	r0, [r2, #0]
 8016582:	e7da      	b.n	801653a <_free_r+0x22>
 8016584:	d902      	bls.n	801658c <_free_r+0x74>
 8016586:	230c      	movs	r3, #12
 8016588:	602b      	str	r3, [r5, #0]
 801658a:	e7d6      	b.n	801653a <_free_r+0x22>
 801658c:	6820      	ldr	r0, [r4, #0]
 801658e:	1821      	adds	r1, r4, r0
 8016590:	428b      	cmp	r3, r1
 8016592:	bf04      	itt	eq
 8016594:	6819      	ldreq	r1, [r3, #0]
 8016596:	685b      	ldreq	r3, [r3, #4]
 8016598:	6063      	str	r3, [r4, #4]
 801659a:	bf04      	itt	eq
 801659c:	1809      	addeq	r1, r1, r0
 801659e:	6021      	streq	r1, [r4, #0]
 80165a0:	6054      	str	r4, [r2, #4]
 80165a2:	e7ca      	b.n	801653a <_free_r+0x22>
 80165a4:	bd38      	pop	{r3, r4, r5, pc}
 80165a6:	bf00      	nop
 80165a8:	20004970 	.word	0x20004970

080165ac <malloc>:
 80165ac:	4b02      	ldr	r3, [pc, #8]	@ (80165b8 <malloc+0xc>)
 80165ae:	4601      	mov	r1, r0
 80165b0:	6818      	ldr	r0, [r3, #0]
 80165b2:	f000 b825 	b.w	8016600 <_malloc_r>
 80165b6:	bf00      	nop
 80165b8:	20000058 	.word	0x20000058

080165bc <sbrk_aligned>:
 80165bc:	b570      	push	{r4, r5, r6, lr}
 80165be:	4e0f      	ldr	r6, [pc, #60]	@ (80165fc <sbrk_aligned+0x40>)
 80165c0:	460c      	mov	r4, r1
 80165c2:	6831      	ldr	r1, [r6, #0]
 80165c4:	4605      	mov	r5, r0
 80165c6:	b911      	cbnz	r1, 80165ce <sbrk_aligned+0x12>
 80165c8:	f001 fe88 	bl	80182dc <_sbrk_r>
 80165cc:	6030      	str	r0, [r6, #0]
 80165ce:	4621      	mov	r1, r4
 80165d0:	4628      	mov	r0, r5
 80165d2:	f001 fe83 	bl	80182dc <_sbrk_r>
 80165d6:	1c43      	adds	r3, r0, #1
 80165d8:	d103      	bne.n	80165e2 <sbrk_aligned+0x26>
 80165da:	f04f 34ff 	mov.w	r4, #4294967295
 80165de:	4620      	mov	r0, r4
 80165e0:	bd70      	pop	{r4, r5, r6, pc}
 80165e2:	1cc4      	adds	r4, r0, #3
 80165e4:	f024 0403 	bic.w	r4, r4, #3
 80165e8:	42a0      	cmp	r0, r4
 80165ea:	d0f8      	beq.n	80165de <sbrk_aligned+0x22>
 80165ec:	1a21      	subs	r1, r4, r0
 80165ee:	4628      	mov	r0, r5
 80165f0:	f001 fe74 	bl	80182dc <_sbrk_r>
 80165f4:	3001      	adds	r0, #1
 80165f6:	d1f2      	bne.n	80165de <sbrk_aligned+0x22>
 80165f8:	e7ef      	b.n	80165da <sbrk_aligned+0x1e>
 80165fa:	bf00      	nop
 80165fc:	2000496c 	.word	0x2000496c

08016600 <_malloc_r>:
 8016600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016604:	1ccd      	adds	r5, r1, #3
 8016606:	f025 0503 	bic.w	r5, r5, #3
 801660a:	3508      	adds	r5, #8
 801660c:	2d0c      	cmp	r5, #12
 801660e:	bf38      	it	cc
 8016610:	250c      	movcc	r5, #12
 8016612:	2d00      	cmp	r5, #0
 8016614:	4606      	mov	r6, r0
 8016616:	db01      	blt.n	801661c <_malloc_r+0x1c>
 8016618:	42a9      	cmp	r1, r5
 801661a:	d904      	bls.n	8016626 <_malloc_r+0x26>
 801661c:	230c      	movs	r3, #12
 801661e:	6033      	str	r3, [r6, #0]
 8016620:	2000      	movs	r0, #0
 8016622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80166fc <_malloc_r+0xfc>
 801662a:	f000 f869 	bl	8016700 <__malloc_lock>
 801662e:	f8d8 3000 	ldr.w	r3, [r8]
 8016632:	461c      	mov	r4, r3
 8016634:	bb44      	cbnz	r4, 8016688 <_malloc_r+0x88>
 8016636:	4629      	mov	r1, r5
 8016638:	4630      	mov	r0, r6
 801663a:	f7ff ffbf 	bl	80165bc <sbrk_aligned>
 801663e:	1c43      	adds	r3, r0, #1
 8016640:	4604      	mov	r4, r0
 8016642:	d158      	bne.n	80166f6 <_malloc_r+0xf6>
 8016644:	f8d8 4000 	ldr.w	r4, [r8]
 8016648:	4627      	mov	r7, r4
 801664a:	2f00      	cmp	r7, #0
 801664c:	d143      	bne.n	80166d6 <_malloc_r+0xd6>
 801664e:	2c00      	cmp	r4, #0
 8016650:	d04b      	beq.n	80166ea <_malloc_r+0xea>
 8016652:	6823      	ldr	r3, [r4, #0]
 8016654:	4639      	mov	r1, r7
 8016656:	4630      	mov	r0, r6
 8016658:	eb04 0903 	add.w	r9, r4, r3
 801665c:	f001 fe3e 	bl	80182dc <_sbrk_r>
 8016660:	4581      	cmp	r9, r0
 8016662:	d142      	bne.n	80166ea <_malloc_r+0xea>
 8016664:	6821      	ldr	r1, [r4, #0]
 8016666:	1a6d      	subs	r5, r5, r1
 8016668:	4629      	mov	r1, r5
 801666a:	4630      	mov	r0, r6
 801666c:	f7ff ffa6 	bl	80165bc <sbrk_aligned>
 8016670:	3001      	adds	r0, #1
 8016672:	d03a      	beq.n	80166ea <_malloc_r+0xea>
 8016674:	6823      	ldr	r3, [r4, #0]
 8016676:	442b      	add	r3, r5
 8016678:	6023      	str	r3, [r4, #0]
 801667a:	f8d8 3000 	ldr.w	r3, [r8]
 801667e:	685a      	ldr	r2, [r3, #4]
 8016680:	bb62      	cbnz	r2, 80166dc <_malloc_r+0xdc>
 8016682:	f8c8 7000 	str.w	r7, [r8]
 8016686:	e00f      	b.n	80166a8 <_malloc_r+0xa8>
 8016688:	6822      	ldr	r2, [r4, #0]
 801668a:	1b52      	subs	r2, r2, r5
 801668c:	d420      	bmi.n	80166d0 <_malloc_r+0xd0>
 801668e:	2a0b      	cmp	r2, #11
 8016690:	d917      	bls.n	80166c2 <_malloc_r+0xc2>
 8016692:	1961      	adds	r1, r4, r5
 8016694:	42a3      	cmp	r3, r4
 8016696:	6025      	str	r5, [r4, #0]
 8016698:	bf18      	it	ne
 801669a:	6059      	strne	r1, [r3, #4]
 801669c:	6863      	ldr	r3, [r4, #4]
 801669e:	bf08      	it	eq
 80166a0:	f8c8 1000 	streq.w	r1, [r8]
 80166a4:	5162      	str	r2, [r4, r5]
 80166a6:	604b      	str	r3, [r1, #4]
 80166a8:	4630      	mov	r0, r6
 80166aa:	f000 f82f 	bl	801670c <__malloc_unlock>
 80166ae:	f104 000b 	add.w	r0, r4, #11
 80166b2:	1d23      	adds	r3, r4, #4
 80166b4:	f020 0007 	bic.w	r0, r0, #7
 80166b8:	1ac2      	subs	r2, r0, r3
 80166ba:	bf1c      	itt	ne
 80166bc:	1a1b      	subne	r3, r3, r0
 80166be:	50a3      	strne	r3, [r4, r2]
 80166c0:	e7af      	b.n	8016622 <_malloc_r+0x22>
 80166c2:	6862      	ldr	r2, [r4, #4]
 80166c4:	42a3      	cmp	r3, r4
 80166c6:	bf0c      	ite	eq
 80166c8:	f8c8 2000 	streq.w	r2, [r8]
 80166cc:	605a      	strne	r2, [r3, #4]
 80166ce:	e7eb      	b.n	80166a8 <_malloc_r+0xa8>
 80166d0:	4623      	mov	r3, r4
 80166d2:	6864      	ldr	r4, [r4, #4]
 80166d4:	e7ae      	b.n	8016634 <_malloc_r+0x34>
 80166d6:	463c      	mov	r4, r7
 80166d8:	687f      	ldr	r7, [r7, #4]
 80166da:	e7b6      	b.n	801664a <_malloc_r+0x4a>
 80166dc:	461a      	mov	r2, r3
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	42a3      	cmp	r3, r4
 80166e2:	d1fb      	bne.n	80166dc <_malloc_r+0xdc>
 80166e4:	2300      	movs	r3, #0
 80166e6:	6053      	str	r3, [r2, #4]
 80166e8:	e7de      	b.n	80166a8 <_malloc_r+0xa8>
 80166ea:	230c      	movs	r3, #12
 80166ec:	6033      	str	r3, [r6, #0]
 80166ee:	4630      	mov	r0, r6
 80166f0:	f000 f80c 	bl	801670c <__malloc_unlock>
 80166f4:	e794      	b.n	8016620 <_malloc_r+0x20>
 80166f6:	6005      	str	r5, [r0, #0]
 80166f8:	e7d6      	b.n	80166a8 <_malloc_r+0xa8>
 80166fa:	bf00      	nop
 80166fc:	20004970 	.word	0x20004970

08016700 <__malloc_lock>:
 8016700:	4801      	ldr	r0, [pc, #4]	@ (8016708 <__malloc_lock+0x8>)
 8016702:	f7ff b898 	b.w	8015836 <__retarget_lock_acquire_recursive>
 8016706:	bf00      	nop
 8016708:	20004968 	.word	0x20004968

0801670c <__malloc_unlock>:
 801670c:	4801      	ldr	r0, [pc, #4]	@ (8016714 <__malloc_unlock+0x8>)
 801670e:	f7ff b893 	b.w	8015838 <__retarget_lock_release_recursive>
 8016712:	bf00      	nop
 8016714:	20004968 	.word	0x20004968

08016718 <_Balloc>:
 8016718:	b570      	push	{r4, r5, r6, lr}
 801671a:	69c6      	ldr	r6, [r0, #28]
 801671c:	4604      	mov	r4, r0
 801671e:	460d      	mov	r5, r1
 8016720:	b976      	cbnz	r6, 8016740 <_Balloc+0x28>
 8016722:	2010      	movs	r0, #16
 8016724:	f7ff ff42 	bl	80165ac <malloc>
 8016728:	4602      	mov	r2, r0
 801672a:	61e0      	str	r0, [r4, #28]
 801672c:	b920      	cbnz	r0, 8016738 <_Balloc+0x20>
 801672e:	4b18      	ldr	r3, [pc, #96]	@ (8016790 <_Balloc+0x78>)
 8016730:	4818      	ldr	r0, [pc, #96]	@ (8016794 <_Balloc+0x7c>)
 8016732:	216b      	movs	r1, #107	@ 0x6b
 8016734:	f001 fdec 	bl	8018310 <__assert_func>
 8016738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801673c:	6006      	str	r6, [r0, #0]
 801673e:	60c6      	str	r6, [r0, #12]
 8016740:	69e6      	ldr	r6, [r4, #28]
 8016742:	68f3      	ldr	r3, [r6, #12]
 8016744:	b183      	cbz	r3, 8016768 <_Balloc+0x50>
 8016746:	69e3      	ldr	r3, [r4, #28]
 8016748:	68db      	ldr	r3, [r3, #12]
 801674a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801674e:	b9b8      	cbnz	r0, 8016780 <_Balloc+0x68>
 8016750:	2101      	movs	r1, #1
 8016752:	fa01 f605 	lsl.w	r6, r1, r5
 8016756:	1d72      	adds	r2, r6, #5
 8016758:	0092      	lsls	r2, r2, #2
 801675a:	4620      	mov	r0, r4
 801675c:	f001 fdf6 	bl	801834c <_calloc_r>
 8016760:	b160      	cbz	r0, 801677c <_Balloc+0x64>
 8016762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016766:	e00e      	b.n	8016786 <_Balloc+0x6e>
 8016768:	2221      	movs	r2, #33	@ 0x21
 801676a:	2104      	movs	r1, #4
 801676c:	4620      	mov	r0, r4
 801676e:	f001 fded 	bl	801834c <_calloc_r>
 8016772:	69e3      	ldr	r3, [r4, #28]
 8016774:	60f0      	str	r0, [r6, #12]
 8016776:	68db      	ldr	r3, [r3, #12]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d1e4      	bne.n	8016746 <_Balloc+0x2e>
 801677c:	2000      	movs	r0, #0
 801677e:	bd70      	pop	{r4, r5, r6, pc}
 8016780:	6802      	ldr	r2, [r0, #0]
 8016782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016786:	2300      	movs	r3, #0
 8016788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801678c:	e7f7      	b.n	801677e <_Balloc+0x66>
 801678e:	bf00      	nop
 8016790:	0801c8d2 	.word	0x0801c8d2
 8016794:	0801c952 	.word	0x0801c952

08016798 <_Bfree>:
 8016798:	b570      	push	{r4, r5, r6, lr}
 801679a:	69c6      	ldr	r6, [r0, #28]
 801679c:	4605      	mov	r5, r0
 801679e:	460c      	mov	r4, r1
 80167a0:	b976      	cbnz	r6, 80167c0 <_Bfree+0x28>
 80167a2:	2010      	movs	r0, #16
 80167a4:	f7ff ff02 	bl	80165ac <malloc>
 80167a8:	4602      	mov	r2, r0
 80167aa:	61e8      	str	r0, [r5, #28]
 80167ac:	b920      	cbnz	r0, 80167b8 <_Bfree+0x20>
 80167ae:	4b09      	ldr	r3, [pc, #36]	@ (80167d4 <_Bfree+0x3c>)
 80167b0:	4809      	ldr	r0, [pc, #36]	@ (80167d8 <_Bfree+0x40>)
 80167b2:	218f      	movs	r1, #143	@ 0x8f
 80167b4:	f001 fdac 	bl	8018310 <__assert_func>
 80167b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80167bc:	6006      	str	r6, [r0, #0]
 80167be:	60c6      	str	r6, [r0, #12]
 80167c0:	b13c      	cbz	r4, 80167d2 <_Bfree+0x3a>
 80167c2:	69eb      	ldr	r3, [r5, #28]
 80167c4:	6862      	ldr	r2, [r4, #4]
 80167c6:	68db      	ldr	r3, [r3, #12]
 80167c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80167cc:	6021      	str	r1, [r4, #0]
 80167ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80167d2:	bd70      	pop	{r4, r5, r6, pc}
 80167d4:	0801c8d2 	.word	0x0801c8d2
 80167d8:	0801c952 	.word	0x0801c952

080167dc <__multadd>:
 80167dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e0:	690d      	ldr	r5, [r1, #16]
 80167e2:	4607      	mov	r7, r0
 80167e4:	460c      	mov	r4, r1
 80167e6:	461e      	mov	r6, r3
 80167e8:	f101 0c14 	add.w	ip, r1, #20
 80167ec:	2000      	movs	r0, #0
 80167ee:	f8dc 3000 	ldr.w	r3, [ip]
 80167f2:	b299      	uxth	r1, r3
 80167f4:	fb02 6101 	mla	r1, r2, r1, r6
 80167f8:	0c1e      	lsrs	r6, r3, #16
 80167fa:	0c0b      	lsrs	r3, r1, #16
 80167fc:	fb02 3306 	mla	r3, r2, r6, r3
 8016800:	b289      	uxth	r1, r1
 8016802:	3001      	adds	r0, #1
 8016804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016808:	4285      	cmp	r5, r0
 801680a:	f84c 1b04 	str.w	r1, [ip], #4
 801680e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016812:	dcec      	bgt.n	80167ee <__multadd+0x12>
 8016814:	b30e      	cbz	r6, 801685a <__multadd+0x7e>
 8016816:	68a3      	ldr	r3, [r4, #8]
 8016818:	42ab      	cmp	r3, r5
 801681a:	dc19      	bgt.n	8016850 <__multadd+0x74>
 801681c:	6861      	ldr	r1, [r4, #4]
 801681e:	4638      	mov	r0, r7
 8016820:	3101      	adds	r1, #1
 8016822:	f7ff ff79 	bl	8016718 <_Balloc>
 8016826:	4680      	mov	r8, r0
 8016828:	b928      	cbnz	r0, 8016836 <__multadd+0x5a>
 801682a:	4602      	mov	r2, r0
 801682c:	4b0c      	ldr	r3, [pc, #48]	@ (8016860 <__multadd+0x84>)
 801682e:	480d      	ldr	r0, [pc, #52]	@ (8016864 <__multadd+0x88>)
 8016830:	21ba      	movs	r1, #186	@ 0xba
 8016832:	f001 fd6d 	bl	8018310 <__assert_func>
 8016836:	6922      	ldr	r2, [r4, #16]
 8016838:	3202      	adds	r2, #2
 801683a:	f104 010c 	add.w	r1, r4, #12
 801683e:	0092      	lsls	r2, r2, #2
 8016840:	300c      	adds	r0, #12
 8016842:	f7fe fffa 	bl	801583a <memcpy>
 8016846:	4621      	mov	r1, r4
 8016848:	4638      	mov	r0, r7
 801684a:	f7ff ffa5 	bl	8016798 <_Bfree>
 801684e:	4644      	mov	r4, r8
 8016850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016854:	3501      	adds	r5, #1
 8016856:	615e      	str	r6, [r3, #20]
 8016858:	6125      	str	r5, [r4, #16]
 801685a:	4620      	mov	r0, r4
 801685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016860:	0801c941 	.word	0x0801c941
 8016864:	0801c952 	.word	0x0801c952

08016868 <__s2b>:
 8016868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801686c:	460c      	mov	r4, r1
 801686e:	4615      	mov	r5, r2
 8016870:	461f      	mov	r7, r3
 8016872:	2209      	movs	r2, #9
 8016874:	3308      	adds	r3, #8
 8016876:	4606      	mov	r6, r0
 8016878:	fb93 f3f2 	sdiv	r3, r3, r2
 801687c:	2100      	movs	r1, #0
 801687e:	2201      	movs	r2, #1
 8016880:	429a      	cmp	r2, r3
 8016882:	db09      	blt.n	8016898 <__s2b+0x30>
 8016884:	4630      	mov	r0, r6
 8016886:	f7ff ff47 	bl	8016718 <_Balloc>
 801688a:	b940      	cbnz	r0, 801689e <__s2b+0x36>
 801688c:	4602      	mov	r2, r0
 801688e:	4b19      	ldr	r3, [pc, #100]	@ (80168f4 <__s2b+0x8c>)
 8016890:	4819      	ldr	r0, [pc, #100]	@ (80168f8 <__s2b+0x90>)
 8016892:	21d3      	movs	r1, #211	@ 0xd3
 8016894:	f001 fd3c 	bl	8018310 <__assert_func>
 8016898:	0052      	lsls	r2, r2, #1
 801689a:	3101      	adds	r1, #1
 801689c:	e7f0      	b.n	8016880 <__s2b+0x18>
 801689e:	9b08      	ldr	r3, [sp, #32]
 80168a0:	6143      	str	r3, [r0, #20]
 80168a2:	2d09      	cmp	r5, #9
 80168a4:	f04f 0301 	mov.w	r3, #1
 80168a8:	6103      	str	r3, [r0, #16]
 80168aa:	dd16      	ble.n	80168da <__s2b+0x72>
 80168ac:	f104 0909 	add.w	r9, r4, #9
 80168b0:	46c8      	mov	r8, r9
 80168b2:	442c      	add	r4, r5
 80168b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80168b8:	4601      	mov	r1, r0
 80168ba:	3b30      	subs	r3, #48	@ 0x30
 80168bc:	220a      	movs	r2, #10
 80168be:	4630      	mov	r0, r6
 80168c0:	f7ff ff8c 	bl	80167dc <__multadd>
 80168c4:	45a0      	cmp	r8, r4
 80168c6:	d1f5      	bne.n	80168b4 <__s2b+0x4c>
 80168c8:	f1a5 0408 	sub.w	r4, r5, #8
 80168cc:	444c      	add	r4, r9
 80168ce:	1b2d      	subs	r5, r5, r4
 80168d0:	1963      	adds	r3, r4, r5
 80168d2:	42bb      	cmp	r3, r7
 80168d4:	db04      	blt.n	80168e0 <__s2b+0x78>
 80168d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168da:	340a      	adds	r4, #10
 80168dc:	2509      	movs	r5, #9
 80168de:	e7f6      	b.n	80168ce <__s2b+0x66>
 80168e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80168e4:	4601      	mov	r1, r0
 80168e6:	3b30      	subs	r3, #48	@ 0x30
 80168e8:	220a      	movs	r2, #10
 80168ea:	4630      	mov	r0, r6
 80168ec:	f7ff ff76 	bl	80167dc <__multadd>
 80168f0:	e7ee      	b.n	80168d0 <__s2b+0x68>
 80168f2:	bf00      	nop
 80168f4:	0801c941 	.word	0x0801c941
 80168f8:	0801c952 	.word	0x0801c952

080168fc <__hi0bits>:
 80168fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016900:	4603      	mov	r3, r0
 8016902:	bf36      	itet	cc
 8016904:	0403      	lslcc	r3, r0, #16
 8016906:	2000      	movcs	r0, #0
 8016908:	2010      	movcc	r0, #16
 801690a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801690e:	bf3c      	itt	cc
 8016910:	021b      	lslcc	r3, r3, #8
 8016912:	3008      	addcc	r0, #8
 8016914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016918:	bf3c      	itt	cc
 801691a:	011b      	lslcc	r3, r3, #4
 801691c:	3004      	addcc	r0, #4
 801691e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016922:	bf3c      	itt	cc
 8016924:	009b      	lslcc	r3, r3, #2
 8016926:	3002      	addcc	r0, #2
 8016928:	2b00      	cmp	r3, #0
 801692a:	db05      	blt.n	8016938 <__hi0bits+0x3c>
 801692c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016930:	f100 0001 	add.w	r0, r0, #1
 8016934:	bf08      	it	eq
 8016936:	2020      	moveq	r0, #32
 8016938:	4770      	bx	lr

0801693a <__lo0bits>:
 801693a:	6803      	ldr	r3, [r0, #0]
 801693c:	4602      	mov	r2, r0
 801693e:	f013 0007 	ands.w	r0, r3, #7
 8016942:	d00b      	beq.n	801695c <__lo0bits+0x22>
 8016944:	07d9      	lsls	r1, r3, #31
 8016946:	d421      	bmi.n	801698c <__lo0bits+0x52>
 8016948:	0798      	lsls	r0, r3, #30
 801694a:	bf49      	itett	mi
 801694c:	085b      	lsrmi	r3, r3, #1
 801694e:	089b      	lsrpl	r3, r3, #2
 8016950:	2001      	movmi	r0, #1
 8016952:	6013      	strmi	r3, [r2, #0]
 8016954:	bf5c      	itt	pl
 8016956:	6013      	strpl	r3, [r2, #0]
 8016958:	2002      	movpl	r0, #2
 801695a:	4770      	bx	lr
 801695c:	b299      	uxth	r1, r3
 801695e:	b909      	cbnz	r1, 8016964 <__lo0bits+0x2a>
 8016960:	0c1b      	lsrs	r3, r3, #16
 8016962:	2010      	movs	r0, #16
 8016964:	b2d9      	uxtb	r1, r3
 8016966:	b909      	cbnz	r1, 801696c <__lo0bits+0x32>
 8016968:	3008      	adds	r0, #8
 801696a:	0a1b      	lsrs	r3, r3, #8
 801696c:	0719      	lsls	r1, r3, #28
 801696e:	bf04      	itt	eq
 8016970:	091b      	lsreq	r3, r3, #4
 8016972:	3004      	addeq	r0, #4
 8016974:	0799      	lsls	r1, r3, #30
 8016976:	bf04      	itt	eq
 8016978:	089b      	lsreq	r3, r3, #2
 801697a:	3002      	addeq	r0, #2
 801697c:	07d9      	lsls	r1, r3, #31
 801697e:	d403      	bmi.n	8016988 <__lo0bits+0x4e>
 8016980:	085b      	lsrs	r3, r3, #1
 8016982:	f100 0001 	add.w	r0, r0, #1
 8016986:	d003      	beq.n	8016990 <__lo0bits+0x56>
 8016988:	6013      	str	r3, [r2, #0]
 801698a:	4770      	bx	lr
 801698c:	2000      	movs	r0, #0
 801698e:	4770      	bx	lr
 8016990:	2020      	movs	r0, #32
 8016992:	4770      	bx	lr

08016994 <__i2b>:
 8016994:	b510      	push	{r4, lr}
 8016996:	460c      	mov	r4, r1
 8016998:	2101      	movs	r1, #1
 801699a:	f7ff febd 	bl	8016718 <_Balloc>
 801699e:	4602      	mov	r2, r0
 80169a0:	b928      	cbnz	r0, 80169ae <__i2b+0x1a>
 80169a2:	4b05      	ldr	r3, [pc, #20]	@ (80169b8 <__i2b+0x24>)
 80169a4:	4805      	ldr	r0, [pc, #20]	@ (80169bc <__i2b+0x28>)
 80169a6:	f240 1145 	movw	r1, #325	@ 0x145
 80169aa:	f001 fcb1 	bl	8018310 <__assert_func>
 80169ae:	2301      	movs	r3, #1
 80169b0:	6144      	str	r4, [r0, #20]
 80169b2:	6103      	str	r3, [r0, #16]
 80169b4:	bd10      	pop	{r4, pc}
 80169b6:	bf00      	nop
 80169b8:	0801c941 	.word	0x0801c941
 80169bc:	0801c952 	.word	0x0801c952

080169c0 <__multiply>:
 80169c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c4:	4617      	mov	r7, r2
 80169c6:	690a      	ldr	r2, [r1, #16]
 80169c8:	693b      	ldr	r3, [r7, #16]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	bfa8      	it	ge
 80169ce:	463b      	movge	r3, r7
 80169d0:	4689      	mov	r9, r1
 80169d2:	bfa4      	itt	ge
 80169d4:	460f      	movge	r7, r1
 80169d6:	4699      	movge	r9, r3
 80169d8:	693d      	ldr	r5, [r7, #16]
 80169da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	6879      	ldr	r1, [r7, #4]
 80169e2:	eb05 060a 	add.w	r6, r5, sl
 80169e6:	42b3      	cmp	r3, r6
 80169e8:	b085      	sub	sp, #20
 80169ea:	bfb8      	it	lt
 80169ec:	3101      	addlt	r1, #1
 80169ee:	f7ff fe93 	bl	8016718 <_Balloc>
 80169f2:	b930      	cbnz	r0, 8016a02 <__multiply+0x42>
 80169f4:	4602      	mov	r2, r0
 80169f6:	4b41      	ldr	r3, [pc, #260]	@ (8016afc <__multiply+0x13c>)
 80169f8:	4841      	ldr	r0, [pc, #260]	@ (8016b00 <__multiply+0x140>)
 80169fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80169fe:	f001 fc87 	bl	8018310 <__assert_func>
 8016a02:	f100 0414 	add.w	r4, r0, #20
 8016a06:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016a0a:	4623      	mov	r3, r4
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	4573      	cmp	r3, lr
 8016a10:	d320      	bcc.n	8016a54 <__multiply+0x94>
 8016a12:	f107 0814 	add.w	r8, r7, #20
 8016a16:	f109 0114 	add.w	r1, r9, #20
 8016a1a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016a1e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016a22:	9302      	str	r3, [sp, #8]
 8016a24:	1beb      	subs	r3, r5, r7
 8016a26:	3b15      	subs	r3, #21
 8016a28:	f023 0303 	bic.w	r3, r3, #3
 8016a2c:	3304      	adds	r3, #4
 8016a2e:	3715      	adds	r7, #21
 8016a30:	42bd      	cmp	r5, r7
 8016a32:	bf38      	it	cc
 8016a34:	2304      	movcc	r3, #4
 8016a36:	9301      	str	r3, [sp, #4]
 8016a38:	9b02      	ldr	r3, [sp, #8]
 8016a3a:	9103      	str	r1, [sp, #12]
 8016a3c:	428b      	cmp	r3, r1
 8016a3e:	d80c      	bhi.n	8016a5a <__multiply+0x9a>
 8016a40:	2e00      	cmp	r6, #0
 8016a42:	dd03      	ble.n	8016a4c <__multiply+0x8c>
 8016a44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d055      	beq.n	8016af8 <__multiply+0x138>
 8016a4c:	6106      	str	r6, [r0, #16]
 8016a4e:	b005      	add	sp, #20
 8016a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a54:	f843 2b04 	str.w	r2, [r3], #4
 8016a58:	e7d9      	b.n	8016a0e <__multiply+0x4e>
 8016a5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8016a5e:	f1ba 0f00 	cmp.w	sl, #0
 8016a62:	d01f      	beq.n	8016aa4 <__multiply+0xe4>
 8016a64:	46c4      	mov	ip, r8
 8016a66:	46a1      	mov	r9, r4
 8016a68:	2700      	movs	r7, #0
 8016a6a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016a6e:	f8d9 3000 	ldr.w	r3, [r9]
 8016a72:	fa1f fb82 	uxth.w	fp, r2
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	fb0a 330b 	mla	r3, sl, fp, r3
 8016a7c:	443b      	add	r3, r7
 8016a7e:	f8d9 7000 	ldr.w	r7, [r9]
 8016a82:	0c12      	lsrs	r2, r2, #16
 8016a84:	0c3f      	lsrs	r7, r7, #16
 8016a86:	fb0a 7202 	mla	r2, sl, r2, r7
 8016a8a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a94:	4565      	cmp	r5, ip
 8016a96:	f849 3b04 	str.w	r3, [r9], #4
 8016a9a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016a9e:	d8e4      	bhi.n	8016a6a <__multiply+0xaa>
 8016aa0:	9b01      	ldr	r3, [sp, #4]
 8016aa2:	50e7      	str	r7, [r4, r3]
 8016aa4:	9b03      	ldr	r3, [sp, #12]
 8016aa6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016aaa:	3104      	adds	r1, #4
 8016aac:	f1b9 0f00 	cmp.w	r9, #0
 8016ab0:	d020      	beq.n	8016af4 <__multiply+0x134>
 8016ab2:	6823      	ldr	r3, [r4, #0]
 8016ab4:	4647      	mov	r7, r8
 8016ab6:	46a4      	mov	ip, r4
 8016ab8:	f04f 0a00 	mov.w	sl, #0
 8016abc:	f8b7 b000 	ldrh.w	fp, [r7]
 8016ac0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016ac4:	fb09 220b 	mla	r2, r9, fp, r2
 8016ac8:	4452      	add	r2, sl
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ad0:	f84c 3b04 	str.w	r3, [ip], #4
 8016ad4:	f857 3b04 	ldr.w	r3, [r7], #4
 8016ad8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016adc:	f8bc 3000 	ldrh.w	r3, [ip]
 8016ae0:	fb09 330a 	mla	r3, r9, sl, r3
 8016ae4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016ae8:	42bd      	cmp	r5, r7
 8016aea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016aee:	d8e5      	bhi.n	8016abc <__multiply+0xfc>
 8016af0:	9a01      	ldr	r2, [sp, #4]
 8016af2:	50a3      	str	r3, [r4, r2]
 8016af4:	3404      	adds	r4, #4
 8016af6:	e79f      	b.n	8016a38 <__multiply+0x78>
 8016af8:	3e01      	subs	r6, #1
 8016afa:	e7a1      	b.n	8016a40 <__multiply+0x80>
 8016afc:	0801c941 	.word	0x0801c941
 8016b00:	0801c952 	.word	0x0801c952

08016b04 <__pow5mult>:
 8016b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b08:	4615      	mov	r5, r2
 8016b0a:	f012 0203 	ands.w	r2, r2, #3
 8016b0e:	4607      	mov	r7, r0
 8016b10:	460e      	mov	r6, r1
 8016b12:	d007      	beq.n	8016b24 <__pow5mult+0x20>
 8016b14:	4c25      	ldr	r4, [pc, #148]	@ (8016bac <__pow5mult+0xa8>)
 8016b16:	3a01      	subs	r2, #1
 8016b18:	2300      	movs	r3, #0
 8016b1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b1e:	f7ff fe5d 	bl	80167dc <__multadd>
 8016b22:	4606      	mov	r6, r0
 8016b24:	10ad      	asrs	r5, r5, #2
 8016b26:	d03d      	beq.n	8016ba4 <__pow5mult+0xa0>
 8016b28:	69fc      	ldr	r4, [r7, #28]
 8016b2a:	b97c      	cbnz	r4, 8016b4c <__pow5mult+0x48>
 8016b2c:	2010      	movs	r0, #16
 8016b2e:	f7ff fd3d 	bl	80165ac <malloc>
 8016b32:	4602      	mov	r2, r0
 8016b34:	61f8      	str	r0, [r7, #28]
 8016b36:	b928      	cbnz	r0, 8016b44 <__pow5mult+0x40>
 8016b38:	4b1d      	ldr	r3, [pc, #116]	@ (8016bb0 <__pow5mult+0xac>)
 8016b3a:	481e      	ldr	r0, [pc, #120]	@ (8016bb4 <__pow5mult+0xb0>)
 8016b3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016b40:	f001 fbe6 	bl	8018310 <__assert_func>
 8016b44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b48:	6004      	str	r4, [r0, #0]
 8016b4a:	60c4      	str	r4, [r0, #12]
 8016b4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016b50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b54:	b94c      	cbnz	r4, 8016b6a <__pow5mult+0x66>
 8016b56:	f240 2171 	movw	r1, #625	@ 0x271
 8016b5a:	4638      	mov	r0, r7
 8016b5c:	f7ff ff1a 	bl	8016994 <__i2b>
 8016b60:	2300      	movs	r3, #0
 8016b62:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b66:	4604      	mov	r4, r0
 8016b68:	6003      	str	r3, [r0, #0]
 8016b6a:	f04f 0900 	mov.w	r9, #0
 8016b6e:	07eb      	lsls	r3, r5, #31
 8016b70:	d50a      	bpl.n	8016b88 <__pow5mult+0x84>
 8016b72:	4631      	mov	r1, r6
 8016b74:	4622      	mov	r2, r4
 8016b76:	4638      	mov	r0, r7
 8016b78:	f7ff ff22 	bl	80169c0 <__multiply>
 8016b7c:	4631      	mov	r1, r6
 8016b7e:	4680      	mov	r8, r0
 8016b80:	4638      	mov	r0, r7
 8016b82:	f7ff fe09 	bl	8016798 <_Bfree>
 8016b86:	4646      	mov	r6, r8
 8016b88:	106d      	asrs	r5, r5, #1
 8016b8a:	d00b      	beq.n	8016ba4 <__pow5mult+0xa0>
 8016b8c:	6820      	ldr	r0, [r4, #0]
 8016b8e:	b938      	cbnz	r0, 8016ba0 <__pow5mult+0x9c>
 8016b90:	4622      	mov	r2, r4
 8016b92:	4621      	mov	r1, r4
 8016b94:	4638      	mov	r0, r7
 8016b96:	f7ff ff13 	bl	80169c0 <__multiply>
 8016b9a:	6020      	str	r0, [r4, #0]
 8016b9c:	f8c0 9000 	str.w	r9, [r0]
 8016ba0:	4604      	mov	r4, r0
 8016ba2:	e7e4      	b.n	8016b6e <__pow5mult+0x6a>
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016baa:	bf00      	nop
 8016bac:	0801ca64 	.word	0x0801ca64
 8016bb0:	0801c8d2 	.word	0x0801c8d2
 8016bb4:	0801c952 	.word	0x0801c952

08016bb8 <__lshift>:
 8016bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bbc:	460c      	mov	r4, r1
 8016bbe:	6849      	ldr	r1, [r1, #4]
 8016bc0:	6923      	ldr	r3, [r4, #16]
 8016bc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016bc6:	68a3      	ldr	r3, [r4, #8]
 8016bc8:	4607      	mov	r7, r0
 8016bca:	4691      	mov	r9, r2
 8016bcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016bd0:	f108 0601 	add.w	r6, r8, #1
 8016bd4:	42b3      	cmp	r3, r6
 8016bd6:	db0b      	blt.n	8016bf0 <__lshift+0x38>
 8016bd8:	4638      	mov	r0, r7
 8016bda:	f7ff fd9d 	bl	8016718 <_Balloc>
 8016bde:	4605      	mov	r5, r0
 8016be0:	b948      	cbnz	r0, 8016bf6 <__lshift+0x3e>
 8016be2:	4602      	mov	r2, r0
 8016be4:	4b28      	ldr	r3, [pc, #160]	@ (8016c88 <__lshift+0xd0>)
 8016be6:	4829      	ldr	r0, [pc, #164]	@ (8016c8c <__lshift+0xd4>)
 8016be8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016bec:	f001 fb90 	bl	8018310 <__assert_func>
 8016bf0:	3101      	adds	r1, #1
 8016bf2:	005b      	lsls	r3, r3, #1
 8016bf4:	e7ee      	b.n	8016bd4 <__lshift+0x1c>
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	f100 0114 	add.w	r1, r0, #20
 8016bfc:	f100 0210 	add.w	r2, r0, #16
 8016c00:	4618      	mov	r0, r3
 8016c02:	4553      	cmp	r3, sl
 8016c04:	db33      	blt.n	8016c6e <__lshift+0xb6>
 8016c06:	6920      	ldr	r0, [r4, #16]
 8016c08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016c0c:	f104 0314 	add.w	r3, r4, #20
 8016c10:	f019 091f 	ands.w	r9, r9, #31
 8016c14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c1c:	d02b      	beq.n	8016c76 <__lshift+0xbe>
 8016c1e:	f1c9 0e20 	rsb	lr, r9, #32
 8016c22:	468a      	mov	sl, r1
 8016c24:	2200      	movs	r2, #0
 8016c26:	6818      	ldr	r0, [r3, #0]
 8016c28:	fa00 f009 	lsl.w	r0, r0, r9
 8016c2c:	4310      	orrs	r0, r2
 8016c2e:	f84a 0b04 	str.w	r0, [sl], #4
 8016c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c36:	459c      	cmp	ip, r3
 8016c38:	fa22 f20e 	lsr.w	r2, r2, lr
 8016c3c:	d8f3      	bhi.n	8016c26 <__lshift+0x6e>
 8016c3e:	ebac 0304 	sub.w	r3, ip, r4
 8016c42:	3b15      	subs	r3, #21
 8016c44:	f023 0303 	bic.w	r3, r3, #3
 8016c48:	3304      	adds	r3, #4
 8016c4a:	f104 0015 	add.w	r0, r4, #21
 8016c4e:	4560      	cmp	r0, ip
 8016c50:	bf88      	it	hi
 8016c52:	2304      	movhi	r3, #4
 8016c54:	50ca      	str	r2, [r1, r3]
 8016c56:	b10a      	cbz	r2, 8016c5c <__lshift+0xa4>
 8016c58:	f108 0602 	add.w	r6, r8, #2
 8016c5c:	3e01      	subs	r6, #1
 8016c5e:	4638      	mov	r0, r7
 8016c60:	612e      	str	r6, [r5, #16]
 8016c62:	4621      	mov	r1, r4
 8016c64:	f7ff fd98 	bl	8016798 <_Bfree>
 8016c68:	4628      	mov	r0, r5
 8016c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016c72:	3301      	adds	r3, #1
 8016c74:	e7c5      	b.n	8016c02 <__lshift+0x4a>
 8016c76:	3904      	subs	r1, #4
 8016c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c80:	459c      	cmp	ip, r3
 8016c82:	d8f9      	bhi.n	8016c78 <__lshift+0xc0>
 8016c84:	e7ea      	b.n	8016c5c <__lshift+0xa4>
 8016c86:	bf00      	nop
 8016c88:	0801c941 	.word	0x0801c941
 8016c8c:	0801c952 	.word	0x0801c952

08016c90 <__mcmp>:
 8016c90:	690a      	ldr	r2, [r1, #16]
 8016c92:	4603      	mov	r3, r0
 8016c94:	6900      	ldr	r0, [r0, #16]
 8016c96:	1a80      	subs	r0, r0, r2
 8016c98:	b530      	push	{r4, r5, lr}
 8016c9a:	d10e      	bne.n	8016cba <__mcmp+0x2a>
 8016c9c:	3314      	adds	r3, #20
 8016c9e:	3114      	adds	r1, #20
 8016ca0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016ca4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016ca8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016cac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016cb0:	4295      	cmp	r5, r2
 8016cb2:	d003      	beq.n	8016cbc <__mcmp+0x2c>
 8016cb4:	d205      	bcs.n	8016cc2 <__mcmp+0x32>
 8016cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8016cba:	bd30      	pop	{r4, r5, pc}
 8016cbc:	42a3      	cmp	r3, r4
 8016cbe:	d3f3      	bcc.n	8016ca8 <__mcmp+0x18>
 8016cc0:	e7fb      	b.n	8016cba <__mcmp+0x2a>
 8016cc2:	2001      	movs	r0, #1
 8016cc4:	e7f9      	b.n	8016cba <__mcmp+0x2a>
	...

08016cc8 <__mdiff>:
 8016cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ccc:	4689      	mov	r9, r1
 8016cce:	4606      	mov	r6, r0
 8016cd0:	4611      	mov	r1, r2
 8016cd2:	4648      	mov	r0, r9
 8016cd4:	4614      	mov	r4, r2
 8016cd6:	f7ff ffdb 	bl	8016c90 <__mcmp>
 8016cda:	1e05      	subs	r5, r0, #0
 8016cdc:	d112      	bne.n	8016d04 <__mdiff+0x3c>
 8016cde:	4629      	mov	r1, r5
 8016ce0:	4630      	mov	r0, r6
 8016ce2:	f7ff fd19 	bl	8016718 <_Balloc>
 8016ce6:	4602      	mov	r2, r0
 8016ce8:	b928      	cbnz	r0, 8016cf6 <__mdiff+0x2e>
 8016cea:	4b3f      	ldr	r3, [pc, #252]	@ (8016de8 <__mdiff+0x120>)
 8016cec:	f240 2137 	movw	r1, #567	@ 0x237
 8016cf0:	483e      	ldr	r0, [pc, #248]	@ (8016dec <__mdiff+0x124>)
 8016cf2:	f001 fb0d 	bl	8018310 <__assert_func>
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016cfc:	4610      	mov	r0, r2
 8016cfe:	b003      	add	sp, #12
 8016d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d04:	bfbc      	itt	lt
 8016d06:	464b      	movlt	r3, r9
 8016d08:	46a1      	movlt	r9, r4
 8016d0a:	4630      	mov	r0, r6
 8016d0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016d10:	bfba      	itte	lt
 8016d12:	461c      	movlt	r4, r3
 8016d14:	2501      	movlt	r5, #1
 8016d16:	2500      	movge	r5, #0
 8016d18:	f7ff fcfe 	bl	8016718 <_Balloc>
 8016d1c:	4602      	mov	r2, r0
 8016d1e:	b918      	cbnz	r0, 8016d28 <__mdiff+0x60>
 8016d20:	4b31      	ldr	r3, [pc, #196]	@ (8016de8 <__mdiff+0x120>)
 8016d22:	f240 2145 	movw	r1, #581	@ 0x245
 8016d26:	e7e3      	b.n	8016cf0 <__mdiff+0x28>
 8016d28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016d2c:	6926      	ldr	r6, [r4, #16]
 8016d2e:	60c5      	str	r5, [r0, #12]
 8016d30:	f109 0310 	add.w	r3, r9, #16
 8016d34:	f109 0514 	add.w	r5, r9, #20
 8016d38:	f104 0e14 	add.w	lr, r4, #20
 8016d3c:	f100 0b14 	add.w	fp, r0, #20
 8016d40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016d44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016d48:	9301      	str	r3, [sp, #4]
 8016d4a:	46d9      	mov	r9, fp
 8016d4c:	f04f 0c00 	mov.w	ip, #0
 8016d50:	9b01      	ldr	r3, [sp, #4]
 8016d52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016d56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016d5a:	9301      	str	r3, [sp, #4]
 8016d5c:	fa1f f38a 	uxth.w	r3, sl
 8016d60:	4619      	mov	r1, r3
 8016d62:	b283      	uxth	r3, r0
 8016d64:	1acb      	subs	r3, r1, r3
 8016d66:	0c00      	lsrs	r0, r0, #16
 8016d68:	4463      	add	r3, ip
 8016d6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016d6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016d72:	b29b      	uxth	r3, r3
 8016d74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016d78:	4576      	cmp	r6, lr
 8016d7a:	f849 3b04 	str.w	r3, [r9], #4
 8016d7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016d82:	d8e5      	bhi.n	8016d50 <__mdiff+0x88>
 8016d84:	1b33      	subs	r3, r6, r4
 8016d86:	3b15      	subs	r3, #21
 8016d88:	f023 0303 	bic.w	r3, r3, #3
 8016d8c:	3415      	adds	r4, #21
 8016d8e:	3304      	adds	r3, #4
 8016d90:	42a6      	cmp	r6, r4
 8016d92:	bf38      	it	cc
 8016d94:	2304      	movcc	r3, #4
 8016d96:	441d      	add	r5, r3
 8016d98:	445b      	add	r3, fp
 8016d9a:	461e      	mov	r6, r3
 8016d9c:	462c      	mov	r4, r5
 8016d9e:	4544      	cmp	r4, r8
 8016da0:	d30e      	bcc.n	8016dc0 <__mdiff+0xf8>
 8016da2:	f108 0103 	add.w	r1, r8, #3
 8016da6:	1b49      	subs	r1, r1, r5
 8016da8:	f021 0103 	bic.w	r1, r1, #3
 8016dac:	3d03      	subs	r5, #3
 8016dae:	45a8      	cmp	r8, r5
 8016db0:	bf38      	it	cc
 8016db2:	2100      	movcc	r1, #0
 8016db4:	440b      	add	r3, r1
 8016db6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016dba:	b191      	cbz	r1, 8016de2 <__mdiff+0x11a>
 8016dbc:	6117      	str	r7, [r2, #16]
 8016dbe:	e79d      	b.n	8016cfc <__mdiff+0x34>
 8016dc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8016dc4:	46e6      	mov	lr, ip
 8016dc6:	0c08      	lsrs	r0, r1, #16
 8016dc8:	fa1c fc81 	uxtah	ip, ip, r1
 8016dcc:	4471      	add	r1, lr
 8016dce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016dd2:	b289      	uxth	r1, r1
 8016dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016dd8:	f846 1b04 	str.w	r1, [r6], #4
 8016ddc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016de0:	e7dd      	b.n	8016d9e <__mdiff+0xd6>
 8016de2:	3f01      	subs	r7, #1
 8016de4:	e7e7      	b.n	8016db6 <__mdiff+0xee>
 8016de6:	bf00      	nop
 8016de8:	0801c941 	.word	0x0801c941
 8016dec:	0801c952 	.word	0x0801c952

08016df0 <__ulp>:
 8016df0:	b082      	sub	sp, #8
 8016df2:	ed8d 0b00 	vstr	d0, [sp]
 8016df6:	9a01      	ldr	r2, [sp, #4]
 8016df8:	4b0f      	ldr	r3, [pc, #60]	@ (8016e38 <__ulp+0x48>)
 8016dfa:	4013      	ands	r3, r2
 8016dfc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	dc08      	bgt.n	8016e16 <__ulp+0x26>
 8016e04:	425b      	negs	r3, r3
 8016e06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016e0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016e0e:	da04      	bge.n	8016e1a <__ulp+0x2a>
 8016e10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016e14:	4113      	asrs	r3, r2
 8016e16:	2200      	movs	r2, #0
 8016e18:	e008      	b.n	8016e2c <__ulp+0x3c>
 8016e1a:	f1a2 0314 	sub.w	r3, r2, #20
 8016e1e:	2b1e      	cmp	r3, #30
 8016e20:	bfda      	itte	le
 8016e22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016e26:	40da      	lsrle	r2, r3
 8016e28:	2201      	movgt	r2, #1
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	4610      	mov	r0, r2
 8016e30:	ec41 0b10 	vmov	d0, r0, r1
 8016e34:	b002      	add	sp, #8
 8016e36:	4770      	bx	lr
 8016e38:	7ff00000 	.word	0x7ff00000

08016e3c <__b2d>:
 8016e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e40:	6906      	ldr	r6, [r0, #16]
 8016e42:	f100 0814 	add.w	r8, r0, #20
 8016e46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016e4a:	1f37      	subs	r7, r6, #4
 8016e4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016e50:	4610      	mov	r0, r2
 8016e52:	f7ff fd53 	bl	80168fc <__hi0bits>
 8016e56:	f1c0 0320 	rsb	r3, r0, #32
 8016e5a:	280a      	cmp	r0, #10
 8016e5c:	600b      	str	r3, [r1, #0]
 8016e5e:	491b      	ldr	r1, [pc, #108]	@ (8016ecc <__b2d+0x90>)
 8016e60:	dc15      	bgt.n	8016e8e <__b2d+0x52>
 8016e62:	f1c0 0c0b 	rsb	ip, r0, #11
 8016e66:	fa22 f30c 	lsr.w	r3, r2, ip
 8016e6a:	45b8      	cmp	r8, r7
 8016e6c:	ea43 0501 	orr.w	r5, r3, r1
 8016e70:	bf34      	ite	cc
 8016e72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016e76:	2300      	movcs	r3, #0
 8016e78:	3015      	adds	r0, #21
 8016e7a:	fa02 f000 	lsl.w	r0, r2, r0
 8016e7e:	fa23 f30c 	lsr.w	r3, r3, ip
 8016e82:	4303      	orrs	r3, r0
 8016e84:	461c      	mov	r4, r3
 8016e86:	ec45 4b10 	vmov	d0, r4, r5
 8016e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e8e:	45b8      	cmp	r8, r7
 8016e90:	bf3a      	itte	cc
 8016e92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016e96:	f1a6 0708 	subcc.w	r7, r6, #8
 8016e9a:	2300      	movcs	r3, #0
 8016e9c:	380b      	subs	r0, #11
 8016e9e:	d012      	beq.n	8016ec6 <__b2d+0x8a>
 8016ea0:	f1c0 0120 	rsb	r1, r0, #32
 8016ea4:	fa23 f401 	lsr.w	r4, r3, r1
 8016ea8:	4082      	lsls	r2, r0
 8016eaa:	4322      	orrs	r2, r4
 8016eac:	4547      	cmp	r7, r8
 8016eae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016eb2:	bf8c      	ite	hi
 8016eb4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016eb8:	2200      	movls	r2, #0
 8016eba:	4083      	lsls	r3, r0
 8016ebc:	40ca      	lsrs	r2, r1
 8016ebe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016ec2:	4313      	orrs	r3, r2
 8016ec4:	e7de      	b.n	8016e84 <__b2d+0x48>
 8016ec6:	ea42 0501 	orr.w	r5, r2, r1
 8016eca:	e7db      	b.n	8016e84 <__b2d+0x48>
 8016ecc:	3ff00000 	.word	0x3ff00000

08016ed0 <__d2b>:
 8016ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ed4:	460f      	mov	r7, r1
 8016ed6:	2101      	movs	r1, #1
 8016ed8:	ec59 8b10 	vmov	r8, r9, d0
 8016edc:	4616      	mov	r6, r2
 8016ede:	f7ff fc1b 	bl	8016718 <_Balloc>
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	b930      	cbnz	r0, 8016ef4 <__d2b+0x24>
 8016ee6:	4602      	mov	r2, r0
 8016ee8:	4b23      	ldr	r3, [pc, #140]	@ (8016f78 <__d2b+0xa8>)
 8016eea:	4824      	ldr	r0, [pc, #144]	@ (8016f7c <__d2b+0xac>)
 8016eec:	f240 310f 	movw	r1, #783	@ 0x30f
 8016ef0:	f001 fa0e 	bl	8018310 <__assert_func>
 8016ef4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016efc:	b10d      	cbz	r5, 8016f02 <__d2b+0x32>
 8016efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016f02:	9301      	str	r3, [sp, #4]
 8016f04:	f1b8 0300 	subs.w	r3, r8, #0
 8016f08:	d023      	beq.n	8016f52 <__d2b+0x82>
 8016f0a:	4668      	mov	r0, sp
 8016f0c:	9300      	str	r3, [sp, #0]
 8016f0e:	f7ff fd14 	bl	801693a <__lo0bits>
 8016f12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016f16:	b1d0      	cbz	r0, 8016f4e <__d2b+0x7e>
 8016f18:	f1c0 0320 	rsb	r3, r0, #32
 8016f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8016f20:	430b      	orrs	r3, r1
 8016f22:	40c2      	lsrs	r2, r0
 8016f24:	6163      	str	r3, [r4, #20]
 8016f26:	9201      	str	r2, [sp, #4]
 8016f28:	9b01      	ldr	r3, [sp, #4]
 8016f2a:	61a3      	str	r3, [r4, #24]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	bf0c      	ite	eq
 8016f30:	2201      	moveq	r2, #1
 8016f32:	2202      	movne	r2, #2
 8016f34:	6122      	str	r2, [r4, #16]
 8016f36:	b1a5      	cbz	r5, 8016f62 <__d2b+0x92>
 8016f38:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016f3c:	4405      	add	r5, r0
 8016f3e:	603d      	str	r5, [r7, #0]
 8016f40:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016f44:	6030      	str	r0, [r6, #0]
 8016f46:	4620      	mov	r0, r4
 8016f48:	b003      	add	sp, #12
 8016f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f4e:	6161      	str	r1, [r4, #20]
 8016f50:	e7ea      	b.n	8016f28 <__d2b+0x58>
 8016f52:	a801      	add	r0, sp, #4
 8016f54:	f7ff fcf1 	bl	801693a <__lo0bits>
 8016f58:	9b01      	ldr	r3, [sp, #4]
 8016f5a:	6163      	str	r3, [r4, #20]
 8016f5c:	3020      	adds	r0, #32
 8016f5e:	2201      	movs	r2, #1
 8016f60:	e7e8      	b.n	8016f34 <__d2b+0x64>
 8016f62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016f66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016f6a:	6038      	str	r0, [r7, #0]
 8016f6c:	6918      	ldr	r0, [r3, #16]
 8016f6e:	f7ff fcc5 	bl	80168fc <__hi0bits>
 8016f72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016f76:	e7e5      	b.n	8016f44 <__d2b+0x74>
 8016f78:	0801c941 	.word	0x0801c941
 8016f7c:	0801c952 	.word	0x0801c952

08016f80 <__ratio>:
 8016f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f84:	b085      	sub	sp, #20
 8016f86:	e9cd 1000 	strd	r1, r0, [sp]
 8016f8a:	a902      	add	r1, sp, #8
 8016f8c:	f7ff ff56 	bl	8016e3c <__b2d>
 8016f90:	9800      	ldr	r0, [sp, #0]
 8016f92:	a903      	add	r1, sp, #12
 8016f94:	ec55 4b10 	vmov	r4, r5, d0
 8016f98:	f7ff ff50 	bl	8016e3c <__b2d>
 8016f9c:	9b01      	ldr	r3, [sp, #4]
 8016f9e:	6919      	ldr	r1, [r3, #16]
 8016fa0:	9b00      	ldr	r3, [sp, #0]
 8016fa2:	691b      	ldr	r3, [r3, #16]
 8016fa4:	1ac9      	subs	r1, r1, r3
 8016fa6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016faa:	1a9b      	subs	r3, r3, r2
 8016fac:	ec5b ab10 	vmov	sl, fp, d0
 8016fb0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	bfce      	itee	gt
 8016fb8:	462a      	movgt	r2, r5
 8016fba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016fbe:	465a      	movle	r2, fp
 8016fc0:	462f      	mov	r7, r5
 8016fc2:	46d9      	mov	r9, fp
 8016fc4:	bfcc      	ite	gt
 8016fc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016fca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016fce:	464b      	mov	r3, r9
 8016fd0:	4652      	mov	r2, sl
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	4639      	mov	r1, r7
 8016fd6:	f7e9 fc61 	bl	800089c <__aeabi_ddiv>
 8016fda:	ec41 0b10 	vmov	d0, r0, r1
 8016fde:	b005      	add	sp, #20
 8016fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016fe4 <__copybits>:
 8016fe4:	3901      	subs	r1, #1
 8016fe6:	b570      	push	{r4, r5, r6, lr}
 8016fe8:	1149      	asrs	r1, r1, #5
 8016fea:	6914      	ldr	r4, [r2, #16]
 8016fec:	3101      	adds	r1, #1
 8016fee:	f102 0314 	add.w	r3, r2, #20
 8016ff2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016ff6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016ffa:	1f05      	subs	r5, r0, #4
 8016ffc:	42a3      	cmp	r3, r4
 8016ffe:	d30c      	bcc.n	801701a <__copybits+0x36>
 8017000:	1aa3      	subs	r3, r4, r2
 8017002:	3b11      	subs	r3, #17
 8017004:	f023 0303 	bic.w	r3, r3, #3
 8017008:	3211      	adds	r2, #17
 801700a:	42a2      	cmp	r2, r4
 801700c:	bf88      	it	hi
 801700e:	2300      	movhi	r3, #0
 8017010:	4418      	add	r0, r3
 8017012:	2300      	movs	r3, #0
 8017014:	4288      	cmp	r0, r1
 8017016:	d305      	bcc.n	8017024 <__copybits+0x40>
 8017018:	bd70      	pop	{r4, r5, r6, pc}
 801701a:	f853 6b04 	ldr.w	r6, [r3], #4
 801701e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017022:	e7eb      	b.n	8016ffc <__copybits+0x18>
 8017024:	f840 3b04 	str.w	r3, [r0], #4
 8017028:	e7f4      	b.n	8017014 <__copybits+0x30>

0801702a <__any_on>:
 801702a:	f100 0214 	add.w	r2, r0, #20
 801702e:	6900      	ldr	r0, [r0, #16]
 8017030:	114b      	asrs	r3, r1, #5
 8017032:	4298      	cmp	r0, r3
 8017034:	b510      	push	{r4, lr}
 8017036:	db11      	blt.n	801705c <__any_on+0x32>
 8017038:	dd0a      	ble.n	8017050 <__any_on+0x26>
 801703a:	f011 011f 	ands.w	r1, r1, #31
 801703e:	d007      	beq.n	8017050 <__any_on+0x26>
 8017040:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017044:	fa24 f001 	lsr.w	r0, r4, r1
 8017048:	fa00 f101 	lsl.w	r1, r0, r1
 801704c:	428c      	cmp	r4, r1
 801704e:	d10b      	bne.n	8017068 <__any_on+0x3e>
 8017050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017054:	4293      	cmp	r3, r2
 8017056:	d803      	bhi.n	8017060 <__any_on+0x36>
 8017058:	2000      	movs	r0, #0
 801705a:	bd10      	pop	{r4, pc}
 801705c:	4603      	mov	r3, r0
 801705e:	e7f7      	b.n	8017050 <__any_on+0x26>
 8017060:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017064:	2900      	cmp	r1, #0
 8017066:	d0f5      	beq.n	8017054 <__any_on+0x2a>
 8017068:	2001      	movs	r0, #1
 801706a:	e7f6      	b.n	801705a <__any_on+0x30>

0801706c <sulp>:
 801706c:	b570      	push	{r4, r5, r6, lr}
 801706e:	4604      	mov	r4, r0
 8017070:	460d      	mov	r5, r1
 8017072:	ec45 4b10 	vmov	d0, r4, r5
 8017076:	4616      	mov	r6, r2
 8017078:	f7ff feba 	bl	8016df0 <__ulp>
 801707c:	ec51 0b10 	vmov	r0, r1, d0
 8017080:	b17e      	cbz	r6, 80170a2 <sulp+0x36>
 8017082:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017086:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801708a:	2b00      	cmp	r3, #0
 801708c:	dd09      	ble.n	80170a2 <sulp+0x36>
 801708e:	051b      	lsls	r3, r3, #20
 8017090:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8017094:	2400      	movs	r4, #0
 8017096:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801709a:	4622      	mov	r2, r4
 801709c:	462b      	mov	r3, r5
 801709e:	f7e9 fad3 	bl	8000648 <__aeabi_dmul>
 80170a2:	ec41 0b10 	vmov	d0, r0, r1
 80170a6:	bd70      	pop	{r4, r5, r6, pc}

080170a8 <_strtod_l>:
 80170a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170ac:	b09f      	sub	sp, #124	@ 0x7c
 80170ae:	460c      	mov	r4, r1
 80170b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80170b2:	2200      	movs	r2, #0
 80170b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80170b6:	9005      	str	r0, [sp, #20]
 80170b8:	f04f 0a00 	mov.w	sl, #0
 80170bc:	f04f 0b00 	mov.w	fp, #0
 80170c0:	460a      	mov	r2, r1
 80170c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80170c4:	7811      	ldrb	r1, [r2, #0]
 80170c6:	292b      	cmp	r1, #43	@ 0x2b
 80170c8:	d04a      	beq.n	8017160 <_strtod_l+0xb8>
 80170ca:	d838      	bhi.n	801713e <_strtod_l+0x96>
 80170cc:	290d      	cmp	r1, #13
 80170ce:	d832      	bhi.n	8017136 <_strtod_l+0x8e>
 80170d0:	2908      	cmp	r1, #8
 80170d2:	d832      	bhi.n	801713a <_strtod_l+0x92>
 80170d4:	2900      	cmp	r1, #0
 80170d6:	d03b      	beq.n	8017150 <_strtod_l+0xa8>
 80170d8:	2200      	movs	r2, #0
 80170da:	920e      	str	r2, [sp, #56]	@ 0x38
 80170dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80170de:	782a      	ldrb	r2, [r5, #0]
 80170e0:	2a30      	cmp	r2, #48	@ 0x30
 80170e2:	f040 80b2 	bne.w	801724a <_strtod_l+0x1a2>
 80170e6:	786a      	ldrb	r2, [r5, #1]
 80170e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80170ec:	2a58      	cmp	r2, #88	@ 0x58
 80170ee:	d16e      	bne.n	80171ce <_strtod_l+0x126>
 80170f0:	9302      	str	r3, [sp, #8]
 80170f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170f4:	9301      	str	r3, [sp, #4]
 80170f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	4a8f      	ldr	r2, [pc, #572]	@ (8017338 <_strtod_l+0x290>)
 80170fc:	9805      	ldr	r0, [sp, #20]
 80170fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8017100:	a919      	add	r1, sp, #100	@ 0x64
 8017102:	f001 f99f 	bl	8018444 <__gethex>
 8017106:	f010 060f 	ands.w	r6, r0, #15
 801710a:	4604      	mov	r4, r0
 801710c:	d005      	beq.n	801711a <_strtod_l+0x72>
 801710e:	2e06      	cmp	r6, #6
 8017110:	d128      	bne.n	8017164 <_strtod_l+0xbc>
 8017112:	3501      	adds	r5, #1
 8017114:	2300      	movs	r3, #0
 8017116:	9519      	str	r5, [sp, #100]	@ 0x64
 8017118:	930e      	str	r3, [sp, #56]	@ 0x38
 801711a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801711c:	2b00      	cmp	r3, #0
 801711e:	f040 858e 	bne.w	8017c3e <_strtod_l+0xb96>
 8017122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017124:	b1cb      	cbz	r3, 801715a <_strtod_l+0xb2>
 8017126:	4652      	mov	r2, sl
 8017128:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801712c:	ec43 2b10 	vmov	d0, r2, r3
 8017130:	b01f      	add	sp, #124	@ 0x7c
 8017132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017136:	2920      	cmp	r1, #32
 8017138:	d1ce      	bne.n	80170d8 <_strtod_l+0x30>
 801713a:	3201      	adds	r2, #1
 801713c:	e7c1      	b.n	80170c2 <_strtod_l+0x1a>
 801713e:	292d      	cmp	r1, #45	@ 0x2d
 8017140:	d1ca      	bne.n	80170d8 <_strtod_l+0x30>
 8017142:	2101      	movs	r1, #1
 8017144:	910e      	str	r1, [sp, #56]	@ 0x38
 8017146:	1c51      	adds	r1, r2, #1
 8017148:	9119      	str	r1, [sp, #100]	@ 0x64
 801714a:	7852      	ldrb	r2, [r2, #1]
 801714c:	2a00      	cmp	r2, #0
 801714e:	d1c5      	bne.n	80170dc <_strtod_l+0x34>
 8017150:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017152:	9419      	str	r4, [sp, #100]	@ 0x64
 8017154:	2b00      	cmp	r3, #0
 8017156:	f040 8570 	bne.w	8017c3a <_strtod_l+0xb92>
 801715a:	4652      	mov	r2, sl
 801715c:	465b      	mov	r3, fp
 801715e:	e7e5      	b.n	801712c <_strtod_l+0x84>
 8017160:	2100      	movs	r1, #0
 8017162:	e7ef      	b.n	8017144 <_strtod_l+0x9c>
 8017164:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017166:	b13a      	cbz	r2, 8017178 <_strtod_l+0xd0>
 8017168:	2135      	movs	r1, #53	@ 0x35
 801716a:	a81c      	add	r0, sp, #112	@ 0x70
 801716c:	f7ff ff3a 	bl	8016fe4 <__copybits>
 8017170:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017172:	9805      	ldr	r0, [sp, #20]
 8017174:	f7ff fb10 	bl	8016798 <_Bfree>
 8017178:	3e01      	subs	r6, #1
 801717a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801717c:	2e04      	cmp	r6, #4
 801717e:	d806      	bhi.n	801718e <_strtod_l+0xe6>
 8017180:	e8df f006 	tbb	[pc, r6]
 8017184:	201d0314 	.word	0x201d0314
 8017188:	14          	.byte	0x14
 8017189:	00          	.byte	0x00
 801718a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801718e:	05e1      	lsls	r1, r4, #23
 8017190:	bf48      	it	mi
 8017192:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017196:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801719a:	0d1b      	lsrs	r3, r3, #20
 801719c:	051b      	lsls	r3, r3, #20
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d1bb      	bne.n	801711a <_strtod_l+0x72>
 80171a2:	f7fe fb1d 	bl	80157e0 <__errno>
 80171a6:	2322      	movs	r3, #34	@ 0x22
 80171a8:	6003      	str	r3, [r0, #0]
 80171aa:	e7b6      	b.n	801711a <_strtod_l+0x72>
 80171ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80171b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80171b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80171b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80171bc:	e7e7      	b.n	801718e <_strtod_l+0xe6>
 80171be:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8017340 <_strtod_l+0x298>
 80171c2:	e7e4      	b.n	801718e <_strtod_l+0xe6>
 80171c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80171c8:	f04f 3aff 	mov.w	sl, #4294967295
 80171cc:	e7df      	b.n	801718e <_strtod_l+0xe6>
 80171ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171d0:	1c5a      	adds	r2, r3, #1
 80171d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80171d4:	785b      	ldrb	r3, [r3, #1]
 80171d6:	2b30      	cmp	r3, #48	@ 0x30
 80171d8:	d0f9      	beq.n	80171ce <_strtod_l+0x126>
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d09d      	beq.n	801711a <_strtod_l+0x72>
 80171de:	2301      	movs	r3, #1
 80171e0:	2700      	movs	r7, #0
 80171e2:	9308      	str	r3, [sp, #32]
 80171e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80171e8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80171ea:	46b9      	mov	r9, r7
 80171ec:	220a      	movs	r2, #10
 80171ee:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80171f0:	7805      	ldrb	r5, [r0, #0]
 80171f2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80171f6:	b2d9      	uxtb	r1, r3
 80171f8:	2909      	cmp	r1, #9
 80171fa:	d928      	bls.n	801724e <_strtod_l+0x1a6>
 80171fc:	494f      	ldr	r1, [pc, #316]	@ (801733c <_strtod_l+0x294>)
 80171fe:	2201      	movs	r2, #1
 8017200:	f001 f838 	bl	8018274 <strncmp>
 8017204:	2800      	cmp	r0, #0
 8017206:	d032      	beq.n	801726e <_strtod_l+0x1c6>
 8017208:	2000      	movs	r0, #0
 801720a:	462a      	mov	r2, r5
 801720c:	900a      	str	r0, [sp, #40]	@ 0x28
 801720e:	464d      	mov	r5, r9
 8017210:	4603      	mov	r3, r0
 8017212:	2a65      	cmp	r2, #101	@ 0x65
 8017214:	d001      	beq.n	801721a <_strtod_l+0x172>
 8017216:	2a45      	cmp	r2, #69	@ 0x45
 8017218:	d114      	bne.n	8017244 <_strtod_l+0x19c>
 801721a:	b91d      	cbnz	r5, 8017224 <_strtod_l+0x17c>
 801721c:	9a08      	ldr	r2, [sp, #32]
 801721e:	4302      	orrs	r2, r0
 8017220:	d096      	beq.n	8017150 <_strtod_l+0xa8>
 8017222:	2500      	movs	r5, #0
 8017224:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8017226:	1c62      	adds	r2, r4, #1
 8017228:	9219      	str	r2, [sp, #100]	@ 0x64
 801722a:	7862      	ldrb	r2, [r4, #1]
 801722c:	2a2b      	cmp	r2, #43	@ 0x2b
 801722e:	d07a      	beq.n	8017326 <_strtod_l+0x27e>
 8017230:	2a2d      	cmp	r2, #45	@ 0x2d
 8017232:	d07e      	beq.n	8017332 <_strtod_l+0x28a>
 8017234:	f04f 0c00 	mov.w	ip, #0
 8017238:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801723c:	2909      	cmp	r1, #9
 801723e:	f240 8085 	bls.w	801734c <_strtod_l+0x2a4>
 8017242:	9419      	str	r4, [sp, #100]	@ 0x64
 8017244:	f04f 0800 	mov.w	r8, #0
 8017248:	e0a5      	b.n	8017396 <_strtod_l+0x2ee>
 801724a:	2300      	movs	r3, #0
 801724c:	e7c8      	b.n	80171e0 <_strtod_l+0x138>
 801724e:	f1b9 0f08 	cmp.w	r9, #8
 8017252:	bfd8      	it	le
 8017254:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8017256:	f100 0001 	add.w	r0, r0, #1
 801725a:	bfda      	itte	le
 801725c:	fb02 3301 	mlale	r3, r2, r1, r3
 8017260:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8017262:	fb02 3707 	mlagt	r7, r2, r7, r3
 8017266:	f109 0901 	add.w	r9, r9, #1
 801726a:	9019      	str	r0, [sp, #100]	@ 0x64
 801726c:	e7bf      	b.n	80171ee <_strtod_l+0x146>
 801726e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017270:	1c5a      	adds	r2, r3, #1
 8017272:	9219      	str	r2, [sp, #100]	@ 0x64
 8017274:	785a      	ldrb	r2, [r3, #1]
 8017276:	f1b9 0f00 	cmp.w	r9, #0
 801727a:	d03b      	beq.n	80172f4 <_strtod_l+0x24c>
 801727c:	900a      	str	r0, [sp, #40]	@ 0x28
 801727e:	464d      	mov	r5, r9
 8017280:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8017284:	2b09      	cmp	r3, #9
 8017286:	d912      	bls.n	80172ae <_strtod_l+0x206>
 8017288:	2301      	movs	r3, #1
 801728a:	e7c2      	b.n	8017212 <_strtod_l+0x16a>
 801728c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801728e:	1c5a      	adds	r2, r3, #1
 8017290:	9219      	str	r2, [sp, #100]	@ 0x64
 8017292:	785a      	ldrb	r2, [r3, #1]
 8017294:	3001      	adds	r0, #1
 8017296:	2a30      	cmp	r2, #48	@ 0x30
 8017298:	d0f8      	beq.n	801728c <_strtod_l+0x1e4>
 801729a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801729e:	2b08      	cmp	r3, #8
 80172a0:	f200 84d2 	bhi.w	8017c48 <_strtod_l+0xba0>
 80172a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80172a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80172a8:	2000      	movs	r0, #0
 80172aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80172ac:	4605      	mov	r5, r0
 80172ae:	3a30      	subs	r2, #48	@ 0x30
 80172b0:	f100 0301 	add.w	r3, r0, #1
 80172b4:	d018      	beq.n	80172e8 <_strtod_l+0x240>
 80172b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80172b8:	4419      	add	r1, r3
 80172ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80172bc:	462e      	mov	r6, r5
 80172be:	f04f 0e0a 	mov.w	lr, #10
 80172c2:	1c71      	adds	r1, r6, #1
 80172c4:	eba1 0c05 	sub.w	ip, r1, r5
 80172c8:	4563      	cmp	r3, ip
 80172ca:	dc15      	bgt.n	80172f8 <_strtod_l+0x250>
 80172cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80172d0:	182b      	adds	r3, r5, r0
 80172d2:	2b08      	cmp	r3, #8
 80172d4:	f105 0501 	add.w	r5, r5, #1
 80172d8:	4405      	add	r5, r0
 80172da:	dc1a      	bgt.n	8017312 <_strtod_l+0x26a>
 80172dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80172de:	230a      	movs	r3, #10
 80172e0:	fb03 2301 	mla	r3, r3, r1, r2
 80172e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80172e6:	2300      	movs	r3, #0
 80172e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80172ea:	1c51      	adds	r1, r2, #1
 80172ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80172ee:	7852      	ldrb	r2, [r2, #1]
 80172f0:	4618      	mov	r0, r3
 80172f2:	e7c5      	b.n	8017280 <_strtod_l+0x1d8>
 80172f4:	4648      	mov	r0, r9
 80172f6:	e7ce      	b.n	8017296 <_strtod_l+0x1ee>
 80172f8:	2e08      	cmp	r6, #8
 80172fa:	dc05      	bgt.n	8017308 <_strtod_l+0x260>
 80172fc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80172fe:	fb0e f606 	mul.w	r6, lr, r6
 8017302:	960b      	str	r6, [sp, #44]	@ 0x2c
 8017304:	460e      	mov	r6, r1
 8017306:	e7dc      	b.n	80172c2 <_strtod_l+0x21a>
 8017308:	2910      	cmp	r1, #16
 801730a:	bfd8      	it	le
 801730c:	fb0e f707 	mulle.w	r7, lr, r7
 8017310:	e7f8      	b.n	8017304 <_strtod_l+0x25c>
 8017312:	2b0f      	cmp	r3, #15
 8017314:	bfdc      	itt	le
 8017316:	230a      	movle	r3, #10
 8017318:	fb03 2707 	mlale	r7, r3, r7, r2
 801731c:	e7e3      	b.n	80172e6 <_strtod_l+0x23e>
 801731e:	2300      	movs	r3, #0
 8017320:	930a      	str	r3, [sp, #40]	@ 0x28
 8017322:	2301      	movs	r3, #1
 8017324:	e77a      	b.n	801721c <_strtod_l+0x174>
 8017326:	f04f 0c00 	mov.w	ip, #0
 801732a:	1ca2      	adds	r2, r4, #2
 801732c:	9219      	str	r2, [sp, #100]	@ 0x64
 801732e:	78a2      	ldrb	r2, [r4, #2]
 8017330:	e782      	b.n	8017238 <_strtod_l+0x190>
 8017332:	f04f 0c01 	mov.w	ip, #1
 8017336:	e7f8      	b.n	801732a <_strtod_l+0x282>
 8017338:	0801cb74 	.word	0x0801cb74
 801733c:	0801c9ab 	.word	0x0801c9ab
 8017340:	7ff00000 	.word	0x7ff00000
 8017344:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017346:	1c51      	adds	r1, r2, #1
 8017348:	9119      	str	r1, [sp, #100]	@ 0x64
 801734a:	7852      	ldrb	r2, [r2, #1]
 801734c:	2a30      	cmp	r2, #48	@ 0x30
 801734e:	d0f9      	beq.n	8017344 <_strtod_l+0x29c>
 8017350:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8017354:	2908      	cmp	r1, #8
 8017356:	f63f af75 	bhi.w	8017244 <_strtod_l+0x19c>
 801735a:	3a30      	subs	r2, #48	@ 0x30
 801735c:	9209      	str	r2, [sp, #36]	@ 0x24
 801735e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017360:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017362:	f04f 080a 	mov.w	r8, #10
 8017366:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017368:	1c56      	adds	r6, r2, #1
 801736a:	9619      	str	r6, [sp, #100]	@ 0x64
 801736c:	7852      	ldrb	r2, [r2, #1]
 801736e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017372:	f1be 0f09 	cmp.w	lr, #9
 8017376:	d939      	bls.n	80173ec <_strtod_l+0x344>
 8017378:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801737a:	1a76      	subs	r6, r6, r1
 801737c:	2e08      	cmp	r6, #8
 801737e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8017382:	dc03      	bgt.n	801738c <_strtod_l+0x2e4>
 8017384:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017386:	4588      	cmp	r8, r1
 8017388:	bfa8      	it	ge
 801738a:	4688      	movge	r8, r1
 801738c:	f1bc 0f00 	cmp.w	ip, #0
 8017390:	d001      	beq.n	8017396 <_strtod_l+0x2ee>
 8017392:	f1c8 0800 	rsb	r8, r8, #0
 8017396:	2d00      	cmp	r5, #0
 8017398:	d14e      	bne.n	8017438 <_strtod_l+0x390>
 801739a:	9908      	ldr	r1, [sp, #32]
 801739c:	4308      	orrs	r0, r1
 801739e:	f47f aebc 	bne.w	801711a <_strtod_l+0x72>
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	f47f aed4 	bne.w	8017150 <_strtod_l+0xa8>
 80173a8:	2a69      	cmp	r2, #105	@ 0x69
 80173aa:	d028      	beq.n	80173fe <_strtod_l+0x356>
 80173ac:	dc25      	bgt.n	80173fa <_strtod_l+0x352>
 80173ae:	2a49      	cmp	r2, #73	@ 0x49
 80173b0:	d025      	beq.n	80173fe <_strtod_l+0x356>
 80173b2:	2a4e      	cmp	r2, #78	@ 0x4e
 80173b4:	f47f aecc 	bne.w	8017150 <_strtod_l+0xa8>
 80173b8:	499a      	ldr	r1, [pc, #616]	@ (8017624 <_strtod_l+0x57c>)
 80173ba:	a819      	add	r0, sp, #100	@ 0x64
 80173bc:	f001 fa64 	bl	8018888 <__match>
 80173c0:	2800      	cmp	r0, #0
 80173c2:	f43f aec5 	beq.w	8017150 <_strtod_l+0xa8>
 80173c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	2b28      	cmp	r3, #40	@ 0x28
 80173cc:	d12e      	bne.n	801742c <_strtod_l+0x384>
 80173ce:	4996      	ldr	r1, [pc, #600]	@ (8017628 <_strtod_l+0x580>)
 80173d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80173d2:	a819      	add	r0, sp, #100	@ 0x64
 80173d4:	f001 fa6c 	bl	80188b0 <__hexnan>
 80173d8:	2805      	cmp	r0, #5
 80173da:	d127      	bne.n	801742c <_strtod_l+0x384>
 80173dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80173de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80173e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80173e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80173ea:	e696      	b.n	801711a <_strtod_l+0x72>
 80173ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80173ee:	fb08 2101 	mla	r1, r8, r1, r2
 80173f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80173f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80173f8:	e7b5      	b.n	8017366 <_strtod_l+0x2be>
 80173fa:	2a6e      	cmp	r2, #110	@ 0x6e
 80173fc:	e7da      	b.n	80173b4 <_strtod_l+0x30c>
 80173fe:	498b      	ldr	r1, [pc, #556]	@ (801762c <_strtod_l+0x584>)
 8017400:	a819      	add	r0, sp, #100	@ 0x64
 8017402:	f001 fa41 	bl	8018888 <__match>
 8017406:	2800      	cmp	r0, #0
 8017408:	f43f aea2 	beq.w	8017150 <_strtod_l+0xa8>
 801740c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801740e:	4988      	ldr	r1, [pc, #544]	@ (8017630 <_strtod_l+0x588>)
 8017410:	3b01      	subs	r3, #1
 8017412:	a819      	add	r0, sp, #100	@ 0x64
 8017414:	9319      	str	r3, [sp, #100]	@ 0x64
 8017416:	f001 fa37 	bl	8018888 <__match>
 801741a:	b910      	cbnz	r0, 8017422 <_strtod_l+0x37a>
 801741c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801741e:	3301      	adds	r3, #1
 8017420:	9319      	str	r3, [sp, #100]	@ 0x64
 8017422:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8017640 <_strtod_l+0x598>
 8017426:	f04f 0a00 	mov.w	sl, #0
 801742a:	e676      	b.n	801711a <_strtod_l+0x72>
 801742c:	4881      	ldr	r0, [pc, #516]	@ (8017634 <_strtod_l+0x58c>)
 801742e:	f000 ff67 	bl	8018300 <nan>
 8017432:	ec5b ab10 	vmov	sl, fp, d0
 8017436:	e670      	b.n	801711a <_strtod_l+0x72>
 8017438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801743a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801743c:	eba8 0303 	sub.w	r3, r8, r3
 8017440:	f1b9 0f00 	cmp.w	r9, #0
 8017444:	bf08      	it	eq
 8017446:	46a9      	moveq	r9, r5
 8017448:	2d10      	cmp	r5, #16
 801744a:	9309      	str	r3, [sp, #36]	@ 0x24
 801744c:	462c      	mov	r4, r5
 801744e:	bfa8      	it	ge
 8017450:	2410      	movge	r4, #16
 8017452:	f7e9 f87f 	bl	8000554 <__aeabi_ui2d>
 8017456:	2d09      	cmp	r5, #9
 8017458:	4682      	mov	sl, r0
 801745a:	468b      	mov	fp, r1
 801745c:	dc13      	bgt.n	8017486 <_strtod_l+0x3de>
 801745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017460:	2b00      	cmp	r3, #0
 8017462:	f43f ae5a 	beq.w	801711a <_strtod_l+0x72>
 8017466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017468:	dd78      	ble.n	801755c <_strtod_l+0x4b4>
 801746a:	2b16      	cmp	r3, #22
 801746c:	dc5f      	bgt.n	801752e <_strtod_l+0x486>
 801746e:	4972      	ldr	r1, [pc, #456]	@ (8017638 <_strtod_l+0x590>)
 8017470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017478:	4652      	mov	r2, sl
 801747a:	465b      	mov	r3, fp
 801747c:	f7e9 f8e4 	bl	8000648 <__aeabi_dmul>
 8017480:	4682      	mov	sl, r0
 8017482:	468b      	mov	fp, r1
 8017484:	e649      	b.n	801711a <_strtod_l+0x72>
 8017486:	4b6c      	ldr	r3, [pc, #432]	@ (8017638 <_strtod_l+0x590>)
 8017488:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801748c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8017490:	f7e9 f8da 	bl	8000648 <__aeabi_dmul>
 8017494:	4682      	mov	sl, r0
 8017496:	4638      	mov	r0, r7
 8017498:	468b      	mov	fp, r1
 801749a:	f7e9 f85b 	bl	8000554 <__aeabi_ui2d>
 801749e:	4602      	mov	r2, r0
 80174a0:	460b      	mov	r3, r1
 80174a2:	4650      	mov	r0, sl
 80174a4:	4659      	mov	r1, fp
 80174a6:	f7e8 ff19 	bl	80002dc <__adddf3>
 80174aa:	2d0f      	cmp	r5, #15
 80174ac:	4682      	mov	sl, r0
 80174ae:	468b      	mov	fp, r1
 80174b0:	ddd5      	ble.n	801745e <_strtod_l+0x3b6>
 80174b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174b4:	1b2c      	subs	r4, r5, r4
 80174b6:	441c      	add	r4, r3
 80174b8:	2c00      	cmp	r4, #0
 80174ba:	f340 8093 	ble.w	80175e4 <_strtod_l+0x53c>
 80174be:	f014 030f 	ands.w	r3, r4, #15
 80174c2:	d00a      	beq.n	80174da <_strtod_l+0x432>
 80174c4:	495c      	ldr	r1, [pc, #368]	@ (8017638 <_strtod_l+0x590>)
 80174c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80174ca:	4652      	mov	r2, sl
 80174cc:	465b      	mov	r3, fp
 80174ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174d2:	f7e9 f8b9 	bl	8000648 <__aeabi_dmul>
 80174d6:	4682      	mov	sl, r0
 80174d8:	468b      	mov	fp, r1
 80174da:	f034 040f 	bics.w	r4, r4, #15
 80174de:	d073      	beq.n	80175c8 <_strtod_l+0x520>
 80174e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80174e4:	dd49      	ble.n	801757a <_strtod_l+0x4d2>
 80174e6:	2400      	movs	r4, #0
 80174e8:	46a0      	mov	r8, r4
 80174ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80174ec:	46a1      	mov	r9, r4
 80174ee:	9a05      	ldr	r2, [sp, #20]
 80174f0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8017640 <_strtod_l+0x598>
 80174f4:	2322      	movs	r3, #34	@ 0x22
 80174f6:	6013      	str	r3, [r2, #0]
 80174f8:	f04f 0a00 	mov.w	sl, #0
 80174fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80174fe:	2b00      	cmp	r3, #0
 8017500:	f43f ae0b 	beq.w	801711a <_strtod_l+0x72>
 8017504:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017506:	9805      	ldr	r0, [sp, #20]
 8017508:	f7ff f946 	bl	8016798 <_Bfree>
 801750c:	9805      	ldr	r0, [sp, #20]
 801750e:	4649      	mov	r1, r9
 8017510:	f7ff f942 	bl	8016798 <_Bfree>
 8017514:	9805      	ldr	r0, [sp, #20]
 8017516:	4641      	mov	r1, r8
 8017518:	f7ff f93e 	bl	8016798 <_Bfree>
 801751c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801751e:	9805      	ldr	r0, [sp, #20]
 8017520:	f7ff f93a 	bl	8016798 <_Bfree>
 8017524:	9805      	ldr	r0, [sp, #20]
 8017526:	4621      	mov	r1, r4
 8017528:	f7ff f936 	bl	8016798 <_Bfree>
 801752c:	e5f5      	b.n	801711a <_strtod_l+0x72>
 801752e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017530:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8017534:	4293      	cmp	r3, r2
 8017536:	dbbc      	blt.n	80174b2 <_strtod_l+0x40a>
 8017538:	4c3f      	ldr	r4, [pc, #252]	@ (8017638 <_strtod_l+0x590>)
 801753a:	f1c5 050f 	rsb	r5, r5, #15
 801753e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017542:	4652      	mov	r2, sl
 8017544:	465b      	mov	r3, fp
 8017546:	e9d1 0100 	ldrd	r0, r1, [r1]
 801754a:	f7e9 f87d 	bl	8000648 <__aeabi_dmul>
 801754e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017550:	1b5d      	subs	r5, r3, r5
 8017552:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017556:	e9d4 2300 	ldrd	r2, r3, [r4]
 801755a:	e78f      	b.n	801747c <_strtod_l+0x3d4>
 801755c:	3316      	adds	r3, #22
 801755e:	dba8      	blt.n	80174b2 <_strtod_l+0x40a>
 8017560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017562:	eba3 0808 	sub.w	r8, r3, r8
 8017566:	4b34      	ldr	r3, [pc, #208]	@ (8017638 <_strtod_l+0x590>)
 8017568:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801756c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017570:	4650      	mov	r0, sl
 8017572:	4659      	mov	r1, fp
 8017574:	f7e9 f992 	bl	800089c <__aeabi_ddiv>
 8017578:	e782      	b.n	8017480 <_strtod_l+0x3d8>
 801757a:	2300      	movs	r3, #0
 801757c:	4f2f      	ldr	r7, [pc, #188]	@ (801763c <_strtod_l+0x594>)
 801757e:	1124      	asrs	r4, r4, #4
 8017580:	4650      	mov	r0, sl
 8017582:	4659      	mov	r1, fp
 8017584:	461e      	mov	r6, r3
 8017586:	2c01      	cmp	r4, #1
 8017588:	dc21      	bgt.n	80175ce <_strtod_l+0x526>
 801758a:	b10b      	cbz	r3, 8017590 <_strtod_l+0x4e8>
 801758c:	4682      	mov	sl, r0
 801758e:	468b      	mov	fp, r1
 8017590:	492a      	ldr	r1, [pc, #168]	@ (801763c <_strtod_l+0x594>)
 8017592:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8017596:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801759a:	4652      	mov	r2, sl
 801759c:	465b      	mov	r3, fp
 801759e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175a2:	f7e9 f851 	bl	8000648 <__aeabi_dmul>
 80175a6:	4b26      	ldr	r3, [pc, #152]	@ (8017640 <_strtod_l+0x598>)
 80175a8:	460a      	mov	r2, r1
 80175aa:	400b      	ands	r3, r1
 80175ac:	4925      	ldr	r1, [pc, #148]	@ (8017644 <_strtod_l+0x59c>)
 80175ae:	428b      	cmp	r3, r1
 80175b0:	4682      	mov	sl, r0
 80175b2:	d898      	bhi.n	80174e6 <_strtod_l+0x43e>
 80175b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80175b8:	428b      	cmp	r3, r1
 80175ba:	bf86      	itte	hi
 80175bc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8017648 <_strtod_l+0x5a0>
 80175c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80175c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80175c8:	2300      	movs	r3, #0
 80175ca:	9308      	str	r3, [sp, #32]
 80175cc:	e076      	b.n	80176bc <_strtod_l+0x614>
 80175ce:	07e2      	lsls	r2, r4, #31
 80175d0:	d504      	bpl.n	80175dc <_strtod_l+0x534>
 80175d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80175d6:	f7e9 f837 	bl	8000648 <__aeabi_dmul>
 80175da:	2301      	movs	r3, #1
 80175dc:	3601      	adds	r6, #1
 80175de:	1064      	asrs	r4, r4, #1
 80175e0:	3708      	adds	r7, #8
 80175e2:	e7d0      	b.n	8017586 <_strtod_l+0x4de>
 80175e4:	d0f0      	beq.n	80175c8 <_strtod_l+0x520>
 80175e6:	4264      	negs	r4, r4
 80175e8:	f014 020f 	ands.w	r2, r4, #15
 80175ec:	d00a      	beq.n	8017604 <_strtod_l+0x55c>
 80175ee:	4b12      	ldr	r3, [pc, #72]	@ (8017638 <_strtod_l+0x590>)
 80175f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175f4:	4650      	mov	r0, sl
 80175f6:	4659      	mov	r1, fp
 80175f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fc:	f7e9 f94e 	bl	800089c <__aeabi_ddiv>
 8017600:	4682      	mov	sl, r0
 8017602:	468b      	mov	fp, r1
 8017604:	1124      	asrs	r4, r4, #4
 8017606:	d0df      	beq.n	80175c8 <_strtod_l+0x520>
 8017608:	2c1f      	cmp	r4, #31
 801760a:	dd1f      	ble.n	801764c <_strtod_l+0x5a4>
 801760c:	2400      	movs	r4, #0
 801760e:	46a0      	mov	r8, r4
 8017610:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017612:	46a1      	mov	r9, r4
 8017614:	9a05      	ldr	r2, [sp, #20]
 8017616:	2322      	movs	r3, #34	@ 0x22
 8017618:	f04f 0a00 	mov.w	sl, #0
 801761c:	f04f 0b00 	mov.w	fp, #0
 8017620:	6013      	str	r3, [r2, #0]
 8017622:	e76b      	b.n	80174fc <_strtod_l+0x454>
 8017624:	0801c899 	.word	0x0801c899
 8017628:	0801cb60 	.word	0x0801cb60
 801762c:	0801c891 	.word	0x0801c891
 8017630:	0801c8c8 	.word	0x0801c8c8
 8017634:	0801ca01 	.word	0x0801ca01
 8017638:	0801ca98 	.word	0x0801ca98
 801763c:	0801ca70 	.word	0x0801ca70
 8017640:	7ff00000 	.word	0x7ff00000
 8017644:	7ca00000 	.word	0x7ca00000
 8017648:	7fefffff 	.word	0x7fefffff
 801764c:	f014 0310 	ands.w	r3, r4, #16
 8017650:	bf18      	it	ne
 8017652:	236a      	movne	r3, #106	@ 0x6a
 8017654:	4ea9      	ldr	r6, [pc, #676]	@ (80178fc <_strtod_l+0x854>)
 8017656:	9308      	str	r3, [sp, #32]
 8017658:	4650      	mov	r0, sl
 801765a:	4659      	mov	r1, fp
 801765c:	2300      	movs	r3, #0
 801765e:	07e7      	lsls	r7, r4, #31
 8017660:	d504      	bpl.n	801766c <_strtod_l+0x5c4>
 8017662:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017666:	f7e8 ffef 	bl	8000648 <__aeabi_dmul>
 801766a:	2301      	movs	r3, #1
 801766c:	1064      	asrs	r4, r4, #1
 801766e:	f106 0608 	add.w	r6, r6, #8
 8017672:	d1f4      	bne.n	801765e <_strtod_l+0x5b6>
 8017674:	b10b      	cbz	r3, 801767a <_strtod_l+0x5d2>
 8017676:	4682      	mov	sl, r0
 8017678:	468b      	mov	fp, r1
 801767a:	9b08      	ldr	r3, [sp, #32]
 801767c:	b1b3      	cbz	r3, 80176ac <_strtod_l+0x604>
 801767e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017682:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8017686:	2b00      	cmp	r3, #0
 8017688:	4659      	mov	r1, fp
 801768a:	dd0f      	ble.n	80176ac <_strtod_l+0x604>
 801768c:	2b1f      	cmp	r3, #31
 801768e:	dd56      	ble.n	801773e <_strtod_l+0x696>
 8017690:	2b34      	cmp	r3, #52	@ 0x34
 8017692:	bfde      	ittt	le
 8017694:	f04f 33ff 	movle.w	r3, #4294967295
 8017698:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801769c:	4093      	lslle	r3, r2
 801769e:	f04f 0a00 	mov.w	sl, #0
 80176a2:	bfcc      	ite	gt
 80176a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80176a8:	ea03 0b01 	andle.w	fp, r3, r1
 80176ac:	2200      	movs	r2, #0
 80176ae:	2300      	movs	r3, #0
 80176b0:	4650      	mov	r0, sl
 80176b2:	4659      	mov	r1, fp
 80176b4:	f7e9 fa30 	bl	8000b18 <__aeabi_dcmpeq>
 80176b8:	2800      	cmp	r0, #0
 80176ba:	d1a7      	bne.n	801760c <_strtod_l+0x564>
 80176bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80176be:	9300      	str	r3, [sp, #0]
 80176c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80176c2:	9805      	ldr	r0, [sp, #20]
 80176c4:	462b      	mov	r3, r5
 80176c6:	464a      	mov	r2, r9
 80176c8:	f7ff f8ce 	bl	8016868 <__s2b>
 80176cc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80176ce:	2800      	cmp	r0, #0
 80176d0:	f43f af09 	beq.w	80174e6 <_strtod_l+0x43e>
 80176d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80176d8:	2a00      	cmp	r2, #0
 80176da:	eba3 0308 	sub.w	r3, r3, r8
 80176de:	bfa8      	it	ge
 80176e0:	2300      	movge	r3, #0
 80176e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80176e4:	2400      	movs	r4, #0
 80176e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80176ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80176ec:	46a0      	mov	r8, r4
 80176ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80176f0:	9805      	ldr	r0, [sp, #20]
 80176f2:	6859      	ldr	r1, [r3, #4]
 80176f4:	f7ff f810 	bl	8016718 <_Balloc>
 80176f8:	4681      	mov	r9, r0
 80176fa:	2800      	cmp	r0, #0
 80176fc:	f43f aef7 	beq.w	80174ee <_strtod_l+0x446>
 8017700:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017702:	691a      	ldr	r2, [r3, #16]
 8017704:	3202      	adds	r2, #2
 8017706:	f103 010c 	add.w	r1, r3, #12
 801770a:	0092      	lsls	r2, r2, #2
 801770c:	300c      	adds	r0, #12
 801770e:	f7fe f894 	bl	801583a <memcpy>
 8017712:	ec4b ab10 	vmov	d0, sl, fp
 8017716:	9805      	ldr	r0, [sp, #20]
 8017718:	aa1c      	add	r2, sp, #112	@ 0x70
 801771a:	a91b      	add	r1, sp, #108	@ 0x6c
 801771c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8017720:	f7ff fbd6 	bl	8016ed0 <__d2b>
 8017724:	901a      	str	r0, [sp, #104]	@ 0x68
 8017726:	2800      	cmp	r0, #0
 8017728:	f43f aee1 	beq.w	80174ee <_strtod_l+0x446>
 801772c:	9805      	ldr	r0, [sp, #20]
 801772e:	2101      	movs	r1, #1
 8017730:	f7ff f930 	bl	8016994 <__i2b>
 8017734:	4680      	mov	r8, r0
 8017736:	b948      	cbnz	r0, 801774c <_strtod_l+0x6a4>
 8017738:	f04f 0800 	mov.w	r8, #0
 801773c:	e6d7      	b.n	80174ee <_strtod_l+0x446>
 801773e:	f04f 32ff 	mov.w	r2, #4294967295
 8017742:	fa02 f303 	lsl.w	r3, r2, r3
 8017746:	ea03 0a0a 	and.w	sl, r3, sl
 801774a:	e7af      	b.n	80176ac <_strtod_l+0x604>
 801774c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801774e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017750:	2d00      	cmp	r5, #0
 8017752:	bfab      	itete	ge
 8017754:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8017756:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8017758:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801775a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801775c:	bfac      	ite	ge
 801775e:	18ef      	addge	r7, r5, r3
 8017760:	1b5e      	sublt	r6, r3, r5
 8017762:	9b08      	ldr	r3, [sp, #32]
 8017764:	1aed      	subs	r5, r5, r3
 8017766:	4415      	add	r5, r2
 8017768:	4b65      	ldr	r3, [pc, #404]	@ (8017900 <_strtod_l+0x858>)
 801776a:	3d01      	subs	r5, #1
 801776c:	429d      	cmp	r5, r3
 801776e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8017772:	da50      	bge.n	8017816 <_strtod_l+0x76e>
 8017774:	1b5b      	subs	r3, r3, r5
 8017776:	2b1f      	cmp	r3, #31
 8017778:	eba2 0203 	sub.w	r2, r2, r3
 801777c:	f04f 0101 	mov.w	r1, #1
 8017780:	dc3d      	bgt.n	80177fe <_strtod_l+0x756>
 8017782:	fa01 f303 	lsl.w	r3, r1, r3
 8017786:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017788:	2300      	movs	r3, #0
 801778a:	9310      	str	r3, [sp, #64]	@ 0x40
 801778c:	18bd      	adds	r5, r7, r2
 801778e:	9b08      	ldr	r3, [sp, #32]
 8017790:	42af      	cmp	r7, r5
 8017792:	4416      	add	r6, r2
 8017794:	441e      	add	r6, r3
 8017796:	463b      	mov	r3, r7
 8017798:	bfa8      	it	ge
 801779a:	462b      	movge	r3, r5
 801779c:	42b3      	cmp	r3, r6
 801779e:	bfa8      	it	ge
 80177a0:	4633      	movge	r3, r6
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	bfc2      	ittt	gt
 80177a6:	1aed      	subgt	r5, r5, r3
 80177a8:	1af6      	subgt	r6, r6, r3
 80177aa:	1aff      	subgt	r7, r7, r3
 80177ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	dd16      	ble.n	80177e0 <_strtod_l+0x738>
 80177b2:	4641      	mov	r1, r8
 80177b4:	9805      	ldr	r0, [sp, #20]
 80177b6:	461a      	mov	r2, r3
 80177b8:	f7ff f9a4 	bl	8016b04 <__pow5mult>
 80177bc:	4680      	mov	r8, r0
 80177be:	2800      	cmp	r0, #0
 80177c0:	d0ba      	beq.n	8017738 <_strtod_l+0x690>
 80177c2:	4601      	mov	r1, r0
 80177c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80177c6:	9805      	ldr	r0, [sp, #20]
 80177c8:	f7ff f8fa 	bl	80169c0 <__multiply>
 80177cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80177ce:	2800      	cmp	r0, #0
 80177d0:	f43f ae8d 	beq.w	80174ee <_strtod_l+0x446>
 80177d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80177d6:	9805      	ldr	r0, [sp, #20]
 80177d8:	f7fe ffde 	bl	8016798 <_Bfree>
 80177dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177de:	931a      	str	r3, [sp, #104]	@ 0x68
 80177e0:	2d00      	cmp	r5, #0
 80177e2:	dc1d      	bgt.n	8017820 <_strtod_l+0x778>
 80177e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	dd23      	ble.n	8017832 <_strtod_l+0x78a>
 80177ea:	4649      	mov	r1, r9
 80177ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80177ee:	9805      	ldr	r0, [sp, #20]
 80177f0:	f7ff f988 	bl	8016b04 <__pow5mult>
 80177f4:	4681      	mov	r9, r0
 80177f6:	b9e0      	cbnz	r0, 8017832 <_strtod_l+0x78a>
 80177f8:	f04f 0900 	mov.w	r9, #0
 80177fc:	e677      	b.n	80174ee <_strtod_l+0x446>
 80177fe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8017802:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8017806:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801780a:	35e2      	adds	r5, #226	@ 0xe2
 801780c:	fa01 f305 	lsl.w	r3, r1, r5
 8017810:	9310      	str	r3, [sp, #64]	@ 0x40
 8017812:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017814:	e7ba      	b.n	801778c <_strtod_l+0x6e4>
 8017816:	2300      	movs	r3, #0
 8017818:	9310      	str	r3, [sp, #64]	@ 0x40
 801781a:	2301      	movs	r3, #1
 801781c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801781e:	e7b5      	b.n	801778c <_strtod_l+0x6e4>
 8017820:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017822:	9805      	ldr	r0, [sp, #20]
 8017824:	462a      	mov	r2, r5
 8017826:	f7ff f9c7 	bl	8016bb8 <__lshift>
 801782a:	901a      	str	r0, [sp, #104]	@ 0x68
 801782c:	2800      	cmp	r0, #0
 801782e:	d1d9      	bne.n	80177e4 <_strtod_l+0x73c>
 8017830:	e65d      	b.n	80174ee <_strtod_l+0x446>
 8017832:	2e00      	cmp	r6, #0
 8017834:	dd07      	ble.n	8017846 <_strtod_l+0x79e>
 8017836:	4649      	mov	r1, r9
 8017838:	9805      	ldr	r0, [sp, #20]
 801783a:	4632      	mov	r2, r6
 801783c:	f7ff f9bc 	bl	8016bb8 <__lshift>
 8017840:	4681      	mov	r9, r0
 8017842:	2800      	cmp	r0, #0
 8017844:	d0d8      	beq.n	80177f8 <_strtod_l+0x750>
 8017846:	2f00      	cmp	r7, #0
 8017848:	dd08      	ble.n	801785c <_strtod_l+0x7b4>
 801784a:	4641      	mov	r1, r8
 801784c:	9805      	ldr	r0, [sp, #20]
 801784e:	463a      	mov	r2, r7
 8017850:	f7ff f9b2 	bl	8016bb8 <__lshift>
 8017854:	4680      	mov	r8, r0
 8017856:	2800      	cmp	r0, #0
 8017858:	f43f ae49 	beq.w	80174ee <_strtod_l+0x446>
 801785c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801785e:	9805      	ldr	r0, [sp, #20]
 8017860:	464a      	mov	r2, r9
 8017862:	f7ff fa31 	bl	8016cc8 <__mdiff>
 8017866:	4604      	mov	r4, r0
 8017868:	2800      	cmp	r0, #0
 801786a:	f43f ae40 	beq.w	80174ee <_strtod_l+0x446>
 801786e:	68c3      	ldr	r3, [r0, #12]
 8017870:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017872:	2300      	movs	r3, #0
 8017874:	60c3      	str	r3, [r0, #12]
 8017876:	4641      	mov	r1, r8
 8017878:	f7ff fa0a 	bl	8016c90 <__mcmp>
 801787c:	2800      	cmp	r0, #0
 801787e:	da45      	bge.n	801790c <_strtod_l+0x864>
 8017880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017882:	ea53 030a 	orrs.w	r3, r3, sl
 8017886:	d16b      	bne.n	8017960 <_strtod_l+0x8b8>
 8017888:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801788c:	2b00      	cmp	r3, #0
 801788e:	d167      	bne.n	8017960 <_strtod_l+0x8b8>
 8017890:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017894:	0d1b      	lsrs	r3, r3, #20
 8017896:	051b      	lsls	r3, r3, #20
 8017898:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801789c:	d960      	bls.n	8017960 <_strtod_l+0x8b8>
 801789e:	6963      	ldr	r3, [r4, #20]
 80178a0:	b913      	cbnz	r3, 80178a8 <_strtod_l+0x800>
 80178a2:	6923      	ldr	r3, [r4, #16]
 80178a4:	2b01      	cmp	r3, #1
 80178a6:	dd5b      	ble.n	8017960 <_strtod_l+0x8b8>
 80178a8:	4621      	mov	r1, r4
 80178aa:	2201      	movs	r2, #1
 80178ac:	9805      	ldr	r0, [sp, #20]
 80178ae:	f7ff f983 	bl	8016bb8 <__lshift>
 80178b2:	4641      	mov	r1, r8
 80178b4:	4604      	mov	r4, r0
 80178b6:	f7ff f9eb 	bl	8016c90 <__mcmp>
 80178ba:	2800      	cmp	r0, #0
 80178bc:	dd50      	ble.n	8017960 <_strtod_l+0x8b8>
 80178be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80178c2:	9a08      	ldr	r2, [sp, #32]
 80178c4:	0d1b      	lsrs	r3, r3, #20
 80178c6:	051b      	lsls	r3, r3, #20
 80178c8:	2a00      	cmp	r2, #0
 80178ca:	d06a      	beq.n	80179a2 <_strtod_l+0x8fa>
 80178cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80178d0:	d867      	bhi.n	80179a2 <_strtod_l+0x8fa>
 80178d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80178d6:	f67f ae9d 	bls.w	8017614 <_strtod_l+0x56c>
 80178da:	4b0a      	ldr	r3, [pc, #40]	@ (8017904 <_strtod_l+0x85c>)
 80178dc:	4650      	mov	r0, sl
 80178de:	4659      	mov	r1, fp
 80178e0:	2200      	movs	r2, #0
 80178e2:	f7e8 feb1 	bl	8000648 <__aeabi_dmul>
 80178e6:	4b08      	ldr	r3, [pc, #32]	@ (8017908 <_strtod_l+0x860>)
 80178e8:	400b      	ands	r3, r1
 80178ea:	4682      	mov	sl, r0
 80178ec:	468b      	mov	fp, r1
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	f47f ae08 	bne.w	8017504 <_strtod_l+0x45c>
 80178f4:	9a05      	ldr	r2, [sp, #20]
 80178f6:	2322      	movs	r3, #34	@ 0x22
 80178f8:	6013      	str	r3, [r2, #0]
 80178fa:	e603      	b.n	8017504 <_strtod_l+0x45c>
 80178fc:	0801cb88 	.word	0x0801cb88
 8017900:	fffffc02 	.word	0xfffffc02
 8017904:	39500000 	.word	0x39500000
 8017908:	7ff00000 	.word	0x7ff00000
 801790c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017910:	d165      	bne.n	80179de <_strtod_l+0x936>
 8017912:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017914:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017918:	b35a      	cbz	r2, 8017972 <_strtod_l+0x8ca>
 801791a:	4a9f      	ldr	r2, [pc, #636]	@ (8017b98 <_strtod_l+0xaf0>)
 801791c:	4293      	cmp	r3, r2
 801791e:	d12b      	bne.n	8017978 <_strtod_l+0x8d0>
 8017920:	9b08      	ldr	r3, [sp, #32]
 8017922:	4651      	mov	r1, sl
 8017924:	b303      	cbz	r3, 8017968 <_strtod_l+0x8c0>
 8017926:	4b9d      	ldr	r3, [pc, #628]	@ (8017b9c <_strtod_l+0xaf4>)
 8017928:	465a      	mov	r2, fp
 801792a:	4013      	ands	r3, r2
 801792c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017930:	f04f 32ff 	mov.w	r2, #4294967295
 8017934:	d81b      	bhi.n	801796e <_strtod_l+0x8c6>
 8017936:	0d1b      	lsrs	r3, r3, #20
 8017938:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801793c:	fa02 f303 	lsl.w	r3, r2, r3
 8017940:	4299      	cmp	r1, r3
 8017942:	d119      	bne.n	8017978 <_strtod_l+0x8d0>
 8017944:	4b96      	ldr	r3, [pc, #600]	@ (8017ba0 <_strtod_l+0xaf8>)
 8017946:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017948:	429a      	cmp	r2, r3
 801794a:	d102      	bne.n	8017952 <_strtod_l+0x8aa>
 801794c:	3101      	adds	r1, #1
 801794e:	f43f adce 	beq.w	80174ee <_strtod_l+0x446>
 8017952:	4b92      	ldr	r3, [pc, #584]	@ (8017b9c <_strtod_l+0xaf4>)
 8017954:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017956:	401a      	ands	r2, r3
 8017958:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801795c:	f04f 0a00 	mov.w	sl, #0
 8017960:	9b08      	ldr	r3, [sp, #32]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d1b9      	bne.n	80178da <_strtod_l+0x832>
 8017966:	e5cd      	b.n	8017504 <_strtod_l+0x45c>
 8017968:	f04f 33ff 	mov.w	r3, #4294967295
 801796c:	e7e8      	b.n	8017940 <_strtod_l+0x898>
 801796e:	4613      	mov	r3, r2
 8017970:	e7e6      	b.n	8017940 <_strtod_l+0x898>
 8017972:	ea53 030a 	orrs.w	r3, r3, sl
 8017976:	d0a2      	beq.n	80178be <_strtod_l+0x816>
 8017978:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801797a:	b1db      	cbz	r3, 80179b4 <_strtod_l+0x90c>
 801797c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801797e:	4213      	tst	r3, r2
 8017980:	d0ee      	beq.n	8017960 <_strtod_l+0x8b8>
 8017982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017984:	9a08      	ldr	r2, [sp, #32]
 8017986:	4650      	mov	r0, sl
 8017988:	4659      	mov	r1, fp
 801798a:	b1bb      	cbz	r3, 80179bc <_strtod_l+0x914>
 801798c:	f7ff fb6e 	bl	801706c <sulp>
 8017990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017994:	ec53 2b10 	vmov	r2, r3, d0
 8017998:	f7e8 fca0 	bl	80002dc <__adddf3>
 801799c:	4682      	mov	sl, r0
 801799e:	468b      	mov	fp, r1
 80179a0:	e7de      	b.n	8017960 <_strtod_l+0x8b8>
 80179a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80179a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80179aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80179ae:	f04f 3aff 	mov.w	sl, #4294967295
 80179b2:	e7d5      	b.n	8017960 <_strtod_l+0x8b8>
 80179b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80179b6:	ea13 0f0a 	tst.w	r3, sl
 80179ba:	e7e1      	b.n	8017980 <_strtod_l+0x8d8>
 80179bc:	f7ff fb56 	bl	801706c <sulp>
 80179c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80179c4:	ec53 2b10 	vmov	r2, r3, d0
 80179c8:	f7e8 fc86 	bl	80002d8 <__aeabi_dsub>
 80179cc:	2200      	movs	r2, #0
 80179ce:	2300      	movs	r3, #0
 80179d0:	4682      	mov	sl, r0
 80179d2:	468b      	mov	fp, r1
 80179d4:	f7e9 f8a0 	bl	8000b18 <__aeabi_dcmpeq>
 80179d8:	2800      	cmp	r0, #0
 80179da:	d0c1      	beq.n	8017960 <_strtod_l+0x8b8>
 80179dc:	e61a      	b.n	8017614 <_strtod_l+0x56c>
 80179de:	4641      	mov	r1, r8
 80179e0:	4620      	mov	r0, r4
 80179e2:	f7ff facd 	bl	8016f80 <__ratio>
 80179e6:	ec57 6b10 	vmov	r6, r7, d0
 80179ea:	2200      	movs	r2, #0
 80179ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80179f0:	4630      	mov	r0, r6
 80179f2:	4639      	mov	r1, r7
 80179f4:	f7e9 f8a4 	bl	8000b40 <__aeabi_dcmple>
 80179f8:	2800      	cmp	r0, #0
 80179fa:	d06f      	beq.n	8017adc <_strtod_l+0xa34>
 80179fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d17a      	bne.n	8017af8 <_strtod_l+0xa50>
 8017a02:	f1ba 0f00 	cmp.w	sl, #0
 8017a06:	d158      	bne.n	8017aba <_strtod_l+0xa12>
 8017a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d15a      	bne.n	8017ac8 <_strtod_l+0xa20>
 8017a12:	4b64      	ldr	r3, [pc, #400]	@ (8017ba4 <_strtod_l+0xafc>)
 8017a14:	2200      	movs	r2, #0
 8017a16:	4630      	mov	r0, r6
 8017a18:	4639      	mov	r1, r7
 8017a1a:	f7e9 f887 	bl	8000b2c <__aeabi_dcmplt>
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	d159      	bne.n	8017ad6 <_strtod_l+0xa2e>
 8017a22:	4630      	mov	r0, r6
 8017a24:	4639      	mov	r1, r7
 8017a26:	4b60      	ldr	r3, [pc, #384]	@ (8017ba8 <_strtod_l+0xb00>)
 8017a28:	2200      	movs	r2, #0
 8017a2a:	f7e8 fe0d 	bl	8000648 <__aeabi_dmul>
 8017a2e:	4606      	mov	r6, r0
 8017a30:	460f      	mov	r7, r1
 8017a32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017a36:	9606      	str	r6, [sp, #24]
 8017a38:	9307      	str	r3, [sp, #28]
 8017a3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017a3e:	4d57      	ldr	r5, [pc, #348]	@ (8017b9c <_strtod_l+0xaf4>)
 8017a40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a46:	401d      	ands	r5, r3
 8017a48:	4b58      	ldr	r3, [pc, #352]	@ (8017bac <_strtod_l+0xb04>)
 8017a4a:	429d      	cmp	r5, r3
 8017a4c:	f040 80b2 	bne.w	8017bb4 <_strtod_l+0xb0c>
 8017a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8017a56:	ec4b ab10 	vmov	d0, sl, fp
 8017a5a:	f7ff f9c9 	bl	8016df0 <__ulp>
 8017a5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017a62:	ec51 0b10 	vmov	r0, r1, d0
 8017a66:	f7e8 fdef 	bl	8000648 <__aeabi_dmul>
 8017a6a:	4652      	mov	r2, sl
 8017a6c:	465b      	mov	r3, fp
 8017a6e:	f7e8 fc35 	bl	80002dc <__adddf3>
 8017a72:	460b      	mov	r3, r1
 8017a74:	4949      	ldr	r1, [pc, #292]	@ (8017b9c <_strtod_l+0xaf4>)
 8017a76:	4a4e      	ldr	r2, [pc, #312]	@ (8017bb0 <_strtod_l+0xb08>)
 8017a78:	4019      	ands	r1, r3
 8017a7a:	4291      	cmp	r1, r2
 8017a7c:	4682      	mov	sl, r0
 8017a7e:	d942      	bls.n	8017b06 <_strtod_l+0xa5e>
 8017a80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017a82:	4b47      	ldr	r3, [pc, #284]	@ (8017ba0 <_strtod_l+0xaf8>)
 8017a84:	429a      	cmp	r2, r3
 8017a86:	d103      	bne.n	8017a90 <_strtod_l+0x9e8>
 8017a88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a8a:	3301      	adds	r3, #1
 8017a8c:	f43f ad2f 	beq.w	80174ee <_strtod_l+0x446>
 8017a90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017ba0 <_strtod_l+0xaf8>
 8017a94:	f04f 3aff 	mov.w	sl, #4294967295
 8017a98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017a9a:	9805      	ldr	r0, [sp, #20]
 8017a9c:	f7fe fe7c 	bl	8016798 <_Bfree>
 8017aa0:	9805      	ldr	r0, [sp, #20]
 8017aa2:	4649      	mov	r1, r9
 8017aa4:	f7fe fe78 	bl	8016798 <_Bfree>
 8017aa8:	9805      	ldr	r0, [sp, #20]
 8017aaa:	4641      	mov	r1, r8
 8017aac:	f7fe fe74 	bl	8016798 <_Bfree>
 8017ab0:	9805      	ldr	r0, [sp, #20]
 8017ab2:	4621      	mov	r1, r4
 8017ab4:	f7fe fe70 	bl	8016798 <_Bfree>
 8017ab8:	e619      	b.n	80176ee <_strtod_l+0x646>
 8017aba:	f1ba 0f01 	cmp.w	sl, #1
 8017abe:	d103      	bne.n	8017ac8 <_strtod_l+0xa20>
 8017ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	f43f ada6 	beq.w	8017614 <_strtod_l+0x56c>
 8017ac8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017b78 <_strtod_l+0xad0>
 8017acc:	4f35      	ldr	r7, [pc, #212]	@ (8017ba4 <_strtod_l+0xafc>)
 8017ace:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017ad2:	2600      	movs	r6, #0
 8017ad4:	e7b1      	b.n	8017a3a <_strtod_l+0x992>
 8017ad6:	4f34      	ldr	r7, [pc, #208]	@ (8017ba8 <_strtod_l+0xb00>)
 8017ad8:	2600      	movs	r6, #0
 8017ada:	e7aa      	b.n	8017a32 <_strtod_l+0x98a>
 8017adc:	4b32      	ldr	r3, [pc, #200]	@ (8017ba8 <_strtod_l+0xb00>)
 8017ade:	4630      	mov	r0, r6
 8017ae0:	4639      	mov	r1, r7
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	f7e8 fdb0 	bl	8000648 <__aeabi_dmul>
 8017ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017aea:	4606      	mov	r6, r0
 8017aec:	460f      	mov	r7, r1
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d09f      	beq.n	8017a32 <_strtod_l+0x98a>
 8017af2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017af6:	e7a0      	b.n	8017a3a <_strtod_l+0x992>
 8017af8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017b80 <_strtod_l+0xad8>
 8017afc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017b00:	ec57 6b17 	vmov	r6, r7, d7
 8017b04:	e799      	b.n	8017a3a <_strtod_l+0x992>
 8017b06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017b0a:	9b08      	ldr	r3, [sp, #32]
 8017b0c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d1c1      	bne.n	8017a98 <_strtod_l+0x9f0>
 8017b14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017b18:	0d1b      	lsrs	r3, r3, #20
 8017b1a:	051b      	lsls	r3, r3, #20
 8017b1c:	429d      	cmp	r5, r3
 8017b1e:	d1bb      	bne.n	8017a98 <_strtod_l+0x9f0>
 8017b20:	4630      	mov	r0, r6
 8017b22:	4639      	mov	r1, r7
 8017b24:	f7e9 f8f0 	bl	8000d08 <__aeabi_d2lz>
 8017b28:	f7e8 fd60 	bl	80005ec <__aeabi_l2d>
 8017b2c:	4602      	mov	r2, r0
 8017b2e:	460b      	mov	r3, r1
 8017b30:	4630      	mov	r0, r6
 8017b32:	4639      	mov	r1, r7
 8017b34:	f7e8 fbd0 	bl	80002d8 <__aeabi_dsub>
 8017b38:	460b      	mov	r3, r1
 8017b3a:	4602      	mov	r2, r0
 8017b3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017b40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b46:	ea46 060a 	orr.w	r6, r6, sl
 8017b4a:	431e      	orrs	r6, r3
 8017b4c:	d06f      	beq.n	8017c2e <_strtod_l+0xb86>
 8017b4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017b88 <_strtod_l+0xae0>)
 8017b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b54:	f7e8 ffea 	bl	8000b2c <__aeabi_dcmplt>
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	f47f acd3 	bne.w	8017504 <_strtod_l+0x45c>
 8017b5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8017b90 <_strtod_l+0xae8>)
 8017b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017b68:	f7e8 fffe 	bl	8000b68 <__aeabi_dcmpgt>
 8017b6c:	2800      	cmp	r0, #0
 8017b6e:	d093      	beq.n	8017a98 <_strtod_l+0x9f0>
 8017b70:	e4c8      	b.n	8017504 <_strtod_l+0x45c>
 8017b72:	bf00      	nop
 8017b74:	f3af 8000 	nop.w
 8017b78:	00000000 	.word	0x00000000
 8017b7c:	bff00000 	.word	0xbff00000
 8017b80:	00000000 	.word	0x00000000
 8017b84:	3ff00000 	.word	0x3ff00000
 8017b88:	94a03595 	.word	0x94a03595
 8017b8c:	3fdfffff 	.word	0x3fdfffff
 8017b90:	35afe535 	.word	0x35afe535
 8017b94:	3fe00000 	.word	0x3fe00000
 8017b98:	000fffff 	.word	0x000fffff
 8017b9c:	7ff00000 	.word	0x7ff00000
 8017ba0:	7fefffff 	.word	0x7fefffff
 8017ba4:	3ff00000 	.word	0x3ff00000
 8017ba8:	3fe00000 	.word	0x3fe00000
 8017bac:	7fe00000 	.word	0x7fe00000
 8017bb0:	7c9fffff 	.word	0x7c9fffff
 8017bb4:	9b08      	ldr	r3, [sp, #32]
 8017bb6:	b323      	cbz	r3, 8017c02 <_strtod_l+0xb5a>
 8017bb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017bbc:	d821      	bhi.n	8017c02 <_strtod_l+0xb5a>
 8017bbe:	a328      	add	r3, pc, #160	@ (adr r3, 8017c60 <_strtod_l+0xbb8>)
 8017bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bc4:	4630      	mov	r0, r6
 8017bc6:	4639      	mov	r1, r7
 8017bc8:	f7e8 ffba 	bl	8000b40 <__aeabi_dcmple>
 8017bcc:	b1a0      	cbz	r0, 8017bf8 <_strtod_l+0xb50>
 8017bce:	4639      	mov	r1, r7
 8017bd0:	4630      	mov	r0, r6
 8017bd2:	f7e9 f811 	bl	8000bf8 <__aeabi_d2uiz>
 8017bd6:	2801      	cmp	r0, #1
 8017bd8:	bf38      	it	cc
 8017bda:	2001      	movcc	r0, #1
 8017bdc:	f7e8 fcba 	bl	8000554 <__aeabi_ui2d>
 8017be0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017be2:	4606      	mov	r6, r0
 8017be4:	460f      	mov	r7, r1
 8017be6:	b9fb      	cbnz	r3, 8017c28 <_strtod_l+0xb80>
 8017be8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017bec:	9014      	str	r0, [sp, #80]	@ 0x50
 8017bee:	9315      	str	r3, [sp, #84]	@ 0x54
 8017bf0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8017bf4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017bf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017bfa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8017bfe:	1b5b      	subs	r3, r3, r5
 8017c00:	9311      	str	r3, [sp, #68]	@ 0x44
 8017c02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017c06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8017c0a:	f7ff f8f1 	bl	8016df0 <__ulp>
 8017c0e:	4650      	mov	r0, sl
 8017c10:	ec53 2b10 	vmov	r2, r3, d0
 8017c14:	4659      	mov	r1, fp
 8017c16:	f7e8 fd17 	bl	8000648 <__aeabi_dmul>
 8017c1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8017c1e:	f7e8 fb5d 	bl	80002dc <__adddf3>
 8017c22:	4682      	mov	sl, r0
 8017c24:	468b      	mov	fp, r1
 8017c26:	e770      	b.n	8017b0a <_strtod_l+0xa62>
 8017c28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8017c2c:	e7e0      	b.n	8017bf0 <_strtod_l+0xb48>
 8017c2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017c68 <_strtod_l+0xbc0>)
 8017c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c34:	f7e8 ff7a 	bl	8000b2c <__aeabi_dcmplt>
 8017c38:	e798      	b.n	8017b6c <_strtod_l+0xac4>
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8017c3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017c40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017c42:	6013      	str	r3, [r2, #0]
 8017c44:	f7ff ba6d 	b.w	8017122 <_strtod_l+0x7a>
 8017c48:	2a65      	cmp	r2, #101	@ 0x65
 8017c4a:	f43f ab68 	beq.w	801731e <_strtod_l+0x276>
 8017c4e:	2a45      	cmp	r2, #69	@ 0x45
 8017c50:	f43f ab65 	beq.w	801731e <_strtod_l+0x276>
 8017c54:	2301      	movs	r3, #1
 8017c56:	f7ff bba0 	b.w	801739a <_strtod_l+0x2f2>
 8017c5a:	bf00      	nop
 8017c5c:	f3af 8000 	nop.w
 8017c60:	ffc00000 	.word	0xffc00000
 8017c64:	41dfffff 	.word	0x41dfffff
 8017c68:	94a03595 	.word	0x94a03595
 8017c6c:	3fcfffff 	.word	0x3fcfffff

08017c70 <_strtod_r>:
 8017c70:	4b01      	ldr	r3, [pc, #4]	@ (8017c78 <_strtod_r+0x8>)
 8017c72:	f7ff ba19 	b.w	80170a8 <_strtod_l>
 8017c76:	bf00      	nop
 8017c78:	200000a8 	.word	0x200000a8

08017c7c <_strtol_l.isra.0>:
 8017c7c:	2b24      	cmp	r3, #36	@ 0x24
 8017c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c82:	4686      	mov	lr, r0
 8017c84:	4690      	mov	r8, r2
 8017c86:	d801      	bhi.n	8017c8c <_strtol_l.isra.0+0x10>
 8017c88:	2b01      	cmp	r3, #1
 8017c8a:	d106      	bne.n	8017c9a <_strtol_l.isra.0+0x1e>
 8017c8c:	f7fd fda8 	bl	80157e0 <__errno>
 8017c90:	2316      	movs	r3, #22
 8017c92:	6003      	str	r3, [r0, #0]
 8017c94:	2000      	movs	r0, #0
 8017c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c9a:	4834      	ldr	r0, [pc, #208]	@ (8017d6c <_strtol_l.isra.0+0xf0>)
 8017c9c:	460d      	mov	r5, r1
 8017c9e:	462a      	mov	r2, r5
 8017ca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ca4:	5d06      	ldrb	r6, [r0, r4]
 8017ca6:	f016 0608 	ands.w	r6, r6, #8
 8017caa:	d1f8      	bne.n	8017c9e <_strtol_l.isra.0+0x22>
 8017cac:	2c2d      	cmp	r4, #45	@ 0x2d
 8017cae:	d110      	bne.n	8017cd2 <_strtol_l.isra.0+0x56>
 8017cb0:	782c      	ldrb	r4, [r5, #0]
 8017cb2:	2601      	movs	r6, #1
 8017cb4:	1c95      	adds	r5, r2, #2
 8017cb6:	f033 0210 	bics.w	r2, r3, #16
 8017cba:	d115      	bne.n	8017ce8 <_strtol_l.isra.0+0x6c>
 8017cbc:	2c30      	cmp	r4, #48	@ 0x30
 8017cbe:	d10d      	bne.n	8017cdc <_strtol_l.isra.0+0x60>
 8017cc0:	782a      	ldrb	r2, [r5, #0]
 8017cc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017cc6:	2a58      	cmp	r2, #88	@ 0x58
 8017cc8:	d108      	bne.n	8017cdc <_strtol_l.isra.0+0x60>
 8017cca:	786c      	ldrb	r4, [r5, #1]
 8017ccc:	3502      	adds	r5, #2
 8017cce:	2310      	movs	r3, #16
 8017cd0:	e00a      	b.n	8017ce8 <_strtol_l.isra.0+0x6c>
 8017cd2:	2c2b      	cmp	r4, #43	@ 0x2b
 8017cd4:	bf04      	itt	eq
 8017cd6:	782c      	ldrbeq	r4, [r5, #0]
 8017cd8:	1c95      	addeq	r5, r2, #2
 8017cda:	e7ec      	b.n	8017cb6 <_strtol_l.isra.0+0x3a>
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d1f6      	bne.n	8017cce <_strtol_l.isra.0+0x52>
 8017ce0:	2c30      	cmp	r4, #48	@ 0x30
 8017ce2:	bf14      	ite	ne
 8017ce4:	230a      	movne	r3, #10
 8017ce6:	2308      	moveq	r3, #8
 8017ce8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017cec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	fbbc f9f3 	udiv	r9, ip, r3
 8017cf6:	4610      	mov	r0, r2
 8017cf8:	fb03 ca19 	mls	sl, r3, r9, ip
 8017cfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017d00:	2f09      	cmp	r7, #9
 8017d02:	d80f      	bhi.n	8017d24 <_strtol_l.isra.0+0xa8>
 8017d04:	463c      	mov	r4, r7
 8017d06:	42a3      	cmp	r3, r4
 8017d08:	dd1b      	ble.n	8017d42 <_strtol_l.isra.0+0xc6>
 8017d0a:	1c57      	adds	r7, r2, #1
 8017d0c:	d007      	beq.n	8017d1e <_strtol_l.isra.0+0xa2>
 8017d0e:	4581      	cmp	r9, r0
 8017d10:	d314      	bcc.n	8017d3c <_strtol_l.isra.0+0xc0>
 8017d12:	d101      	bne.n	8017d18 <_strtol_l.isra.0+0x9c>
 8017d14:	45a2      	cmp	sl, r4
 8017d16:	db11      	blt.n	8017d3c <_strtol_l.isra.0+0xc0>
 8017d18:	fb00 4003 	mla	r0, r0, r3, r4
 8017d1c:	2201      	movs	r2, #1
 8017d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d22:	e7eb      	b.n	8017cfc <_strtol_l.isra.0+0x80>
 8017d24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017d28:	2f19      	cmp	r7, #25
 8017d2a:	d801      	bhi.n	8017d30 <_strtol_l.isra.0+0xb4>
 8017d2c:	3c37      	subs	r4, #55	@ 0x37
 8017d2e:	e7ea      	b.n	8017d06 <_strtol_l.isra.0+0x8a>
 8017d30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017d34:	2f19      	cmp	r7, #25
 8017d36:	d804      	bhi.n	8017d42 <_strtol_l.isra.0+0xc6>
 8017d38:	3c57      	subs	r4, #87	@ 0x57
 8017d3a:	e7e4      	b.n	8017d06 <_strtol_l.isra.0+0x8a>
 8017d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8017d40:	e7ed      	b.n	8017d1e <_strtol_l.isra.0+0xa2>
 8017d42:	1c53      	adds	r3, r2, #1
 8017d44:	d108      	bne.n	8017d58 <_strtol_l.isra.0+0xdc>
 8017d46:	2322      	movs	r3, #34	@ 0x22
 8017d48:	f8ce 3000 	str.w	r3, [lr]
 8017d4c:	4660      	mov	r0, ip
 8017d4e:	f1b8 0f00 	cmp.w	r8, #0
 8017d52:	d0a0      	beq.n	8017c96 <_strtol_l.isra.0+0x1a>
 8017d54:	1e69      	subs	r1, r5, #1
 8017d56:	e006      	b.n	8017d66 <_strtol_l.isra.0+0xea>
 8017d58:	b106      	cbz	r6, 8017d5c <_strtol_l.isra.0+0xe0>
 8017d5a:	4240      	negs	r0, r0
 8017d5c:	f1b8 0f00 	cmp.w	r8, #0
 8017d60:	d099      	beq.n	8017c96 <_strtol_l.isra.0+0x1a>
 8017d62:	2a00      	cmp	r2, #0
 8017d64:	d1f6      	bne.n	8017d54 <_strtol_l.isra.0+0xd8>
 8017d66:	f8c8 1000 	str.w	r1, [r8]
 8017d6a:	e794      	b.n	8017c96 <_strtol_l.isra.0+0x1a>
 8017d6c:	0801cbb1 	.word	0x0801cbb1

08017d70 <_strtol_r>:
 8017d70:	f7ff bf84 	b.w	8017c7c <_strtol_l.isra.0>

08017d74 <__ssputs_r>:
 8017d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d78:	688e      	ldr	r6, [r1, #8]
 8017d7a:	461f      	mov	r7, r3
 8017d7c:	42be      	cmp	r6, r7
 8017d7e:	680b      	ldr	r3, [r1, #0]
 8017d80:	4682      	mov	sl, r0
 8017d82:	460c      	mov	r4, r1
 8017d84:	4690      	mov	r8, r2
 8017d86:	d82d      	bhi.n	8017de4 <__ssputs_r+0x70>
 8017d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017d90:	d026      	beq.n	8017de0 <__ssputs_r+0x6c>
 8017d92:	6965      	ldr	r5, [r4, #20]
 8017d94:	6909      	ldr	r1, [r1, #16]
 8017d96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d9a:	eba3 0901 	sub.w	r9, r3, r1
 8017d9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017da2:	1c7b      	adds	r3, r7, #1
 8017da4:	444b      	add	r3, r9
 8017da6:	106d      	asrs	r5, r5, #1
 8017da8:	429d      	cmp	r5, r3
 8017daa:	bf38      	it	cc
 8017dac:	461d      	movcc	r5, r3
 8017dae:	0553      	lsls	r3, r2, #21
 8017db0:	d527      	bpl.n	8017e02 <__ssputs_r+0x8e>
 8017db2:	4629      	mov	r1, r5
 8017db4:	f7fe fc24 	bl	8016600 <_malloc_r>
 8017db8:	4606      	mov	r6, r0
 8017dba:	b360      	cbz	r0, 8017e16 <__ssputs_r+0xa2>
 8017dbc:	6921      	ldr	r1, [r4, #16]
 8017dbe:	464a      	mov	r2, r9
 8017dc0:	f7fd fd3b 	bl	801583a <memcpy>
 8017dc4:	89a3      	ldrh	r3, [r4, #12]
 8017dc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017dce:	81a3      	strh	r3, [r4, #12]
 8017dd0:	6126      	str	r6, [r4, #16]
 8017dd2:	6165      	str	r5, [r4, #20]
 8017dd4:	444e      	add	r6, r9
 8017dd6:	eba5 0509 	sub.w	r5, r5, r9
 8017dda:	6026      	str	r6, [r4, #0]
 8017ddc:	60a5      	str	r5, [r4, #8]
 8017dde:	463e      	mov	r6, r7
 8017de0:	42be      	cmp	r6, r7
 8017de2:	d900      	bls.n	8017de6 <__ssputs_r+0x72>
 8017de4:	463e      	mov	r6, r7
 8017de6:	6820      	ldr	r0, [r4, #0]
 8017de8:	4632      	mov	r2, r6
 8017dea:	4641      	mov	r1, r8
 8017dec:	f000 fa28 	bl	8018240 <memmove>
 8017df0:	68a3      	ldr	r3, [r4, #8]
 8017df2:	1b9b      	subs	r3, r3, r6
 8017df4:	60a3      	str	r3, [r4, #8]
 8017df6:	6823      	ldr	r3, [r4, #0]
 8017df8:	4433      	add	r3, r6
 8017dfa:	6023      	str	r3, [r4, #0]
 8017dfc:	2000      	movs	r0, #0
 8017dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e02:	462a      	mov	r2, r5
 8017e04:	f000 fe01 	bl	8018a0a <_realloc_r>
 8017e08:	4606      	mov	r6, r0
 8017e0a:	2800      	cmp	r0, #0
 8017e0c:	d1e0      	bne.n	8017dd0 <__ssputs_r+0x5c>
 8017e0e:	6921      	ldr	r1, [r4, #16]
 8017e10:	4650      	mov	r0, sl
 8017e12:	f7fe fb81 	bl	8016518 <_free_r>
 8017e16:	230c      	movs	r3, #12
 8017e18:	f8ca 3000 	str.w	r3, [sl]
 8017e1c:	89a3      	ldrh	r3, [r4, #12]
 8017e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e22:	81a3      	strh	r3, [r4, #12]
 8017e24:	f04f 30ff 	mov.w	r0, #4294967295
 8017e28:	e7e9      	b.n	8017dfe <__ssputs_r+0x8a>
	...

08017e2c <_svfiprintf_r>:
 8017e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e30:	4698      	mov	r8, r3
 8017e32:	898b      	ldrh	r3, [r1, #12]
 8017e34:	061b      	lsls	r3, r3, #24
 8017e36:	b09d      	sub	sp, #116	@ 0x74
 8017e38:	4607      	mov	r7, r0
 8017e3a:	460d      	mov	r5, r1
 8017e3c:	4614      	mov	r4, r2
 8017e3e:	d510      	bpl.n	8017e62 <_svfiprintf_r+0x36>
 8017e40:	690b      	ldr	r3, [r1, #16]
 8017e42:	b973      	cbnz	r3, 8017e62 <_svfiprintf_r+0x36>
 8017e44:	2140      	movs	r1, #64	@ 0x40
 8017e46:	f7fe fbdb 	bl	8016600 <_malloc_r>
 8017e4a:	6028      	str	r0, [r5, #0]
 8017e4c:	6128      	str	r0, [r5, #16]
 8017e4e:	b930      	cbnz	r0, 8017e5e <_svfiprintf_r+0x32>
 8017e50:	230c      	movs	r3, #12
 8017e52:	603b      	str	r3, [r7, #0]
 8017e54:	f04f 30ff 	mov.w	r0, #4294967295
 8017e58:	b01d      	add	sp, #116	@ 0x74
 8017e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e5e:	2340      	movs	r3, #64	@ 0x40
 8017e60:	616b      	str	r3, [r5, #20]
 8017e62:	2300      	movs	r3, #0
 8017e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e66:	2320      	movs	r3, #32
 8017e68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e70:	2330      	movs	r3, #48	@ 0x30
 8017e72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018010 <_svfiprintf_r+0x1e4>
 8017e76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e7a:	f04f 0901 	mov.w	r9, #1
 8017e7e:	4623      	mov	r3, r4
 8017e80:	469a      	mov	sl, r3
 8017e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e86:	b10a      	cbz	r2, 8017e8c <_svfiprintf_r+0x60>
 8017e88:	2a25      	cmp	r2, #37	@ 0x25
 8017e8a:	d1f9      	bne.n	8017e80 <_svfiprintf_r+0x54>
 8017e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8017e90:	d00b      	beq.n	8017eaa <_svfiprintf_r+0x7e>
 8017e92:	465b      	mov	r3, fp
 8017e94:	4622      	mov	r2, r4
 8017e96:	4629      	mov	r1, r5
 8017e98:	4638      	mov	r0, r7
 8017e9a:	f7ff ff6b 	bl	8017d74 <__ssputs_r>
 8017e9e:	3001      	adds	r0, #1
 8017ea0:	f000 80a7 	beq.w	8017ff2 <_svfiprintf_r+0x1c6>
 8017ea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ea6:	445a      	add	r2, fp
 8017ea8:	9209      	str	r2, [sp, #36]	@ 0x24
 8017eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	f000 809f 	beq.w	8017ff2 <_svfiprintf_r+0x1c6>
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8017eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ebe:	f10a 0a01 	add.w	sl, sl, #1
 8017ec2:	9304      	str	r3, [sp, #16]
 8017ec4:	9307      	str	r3, [sp, #28]
 8017ec6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017eca:	931a      	str	r3, [sp, #104]	@ 0x68
 8017ecc:	4654      	mov	r4, sl
 8017ece:	2205      	movs	r2, #5
 8017ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ed4:	484e      	ldr	r0, [pc, #312]	@ (8018010 <_svfiprintf_r+0x1e4>)
 8017ed6:	f7e8 f9a3 	bl	8000220 <memchr>
 8017eda:	9a04      	ldr	r2, [sp, #16]
 8017edc:	b9d8      	cbnz	r0, 8017f16 <_svfiprintf_r+0xea>
 8017ede:	06d0      	lsls	r0, r2, #27
 8017ee0:	bf44      	itt	mi
 8017ee2:	2320      	movmi	r3, #32
 8017ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ee8:	0711      	lsls	r1, r2, #28
 8017eea:	bf44      	itt	mi
 8017eec:	232b      	movmi	r3, #43	@ 0x2b
 8017eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8017ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ef8:	d015      	beq.n	8017f26 <_svfiprintf_r+0xfa>
 8017efa:	9a07      	ldr	r2, [sp, #28]
 8017efc:	4654      	mov	r4, sl
 8017efe:	2000      	movs	r0, #0
 8017f00:	f04f 0c0a 	mov.w	ip, #10
 8017f04:	4621      	mov	r1, r4
 8017f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f0a:	3b30      	subs	r3, #48	@ 0x30
 8017f0c:	2b09      	cmp	r3, #9
 8017f0e:	d94b      	bls.n	8017fa8 <_svfiprintf_r+0x17c>
 8017f10:	b1b0      	cbz	r0, 8017f40 <_svfiprintf_r+0x114>
 8017f12:	9207      	str	r2, [sp, #28]
 8017f14:	e014      	b.n	8017f40 <_svfiprintf_r+0x114>
 8017f16:	eba0 0308 	sub.w	r3, r0, r8
 8017f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8017f1e:	4313      	orrs	r3, r2
 8017f20:	9304      	str	r3, [sp, #16]
 8017f22:	46a2      	mov	sl, r4
 8017f24:	e7d2      	b.n	8017ecc <_svfiprintf_r+0xa0>
 8017f26:	9b03      	ldr	r3, [sp, #12]
 8017f28:	1d19      	adds	r1, r3, #4
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	9103      	str	r1, [sp, #12]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	bfbb      	ittet	lt
 8017f32:	425b      	neglt	r3, r3
 8017f34:	f042 0202 	orrlt.w	r2, r2, #2
 8017f38:	9307      	strge	r3, [sp, #28]
 8017f3a:	9307      	strlt	r3, [sp, #28]
 8017f3c:	bfb8      	it	lt
 8017f3e:	9204      	strlt	r2, [sp, #16]
 8017f40:	7823      	ldrb	r3, [r4, #0]
 8017f42:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f44:	d10a      	bne.n	8017f5c <_svfiprintf_r+0x130>
 8017f46:	7863      	ldrb	r3, [r4, #1]
 8017f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f4a:	d132      	bne.n	8017fb2 <_svfiprintf_r+0x186>
 8017f4c:	9b03      	ldr	r3, [sp, #12]
 8017f4e:	1d1a      	adds	r2, r3, #4
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	9203      	str	r2, [sp, #12]
 8017f54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f58:	3402      	adds	r4, #2
 8017f5a:	9305      	str	r3, [sp, #20]
 8017f5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018020 <_svfiprintf_r+0x1f4>
 8017f60:	7821      	ldrb	r1, [r4, #0]
 8017f62:	2203      	movs	r2, #3
 8017f64:	4650      	mov	r0, sl
 8017f66:	f7e8 f95b 	bl	8000220 <memchr>
 8017f6a:	b138      	cbz	r0, 8017f7c <_svfiprintf_r+0x150>
 8017f6c:	9b04      	ldr	r3, [sp, #16]
 8017f6e:	eba0 000a 	sub.w	r0, r0, sl
 8017f72:	2240      	movs	r2, #64	@ 0x40
 8017f74:	4082      	lsls	r2, r0
 8017f76:	4313      	orrs	r3, r2
 8017f78:	3401      	adds	r4, #1
 8017f7a:	9304      	str	r3, [sp, #16]
 8017f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f80:	4824      	ldr	r0, [pc, #144]	@ (8018014 <_svfiprintf_r+0x1e8>)
 8017f82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f86:	2206      	movs	r2, #6
 8017f88:	f7e8 f94a 	bl	8000220 <memchr>
 8017f8c:	2800      	cmp	r0, #0
 8017f8e:	d036      	beq.n	8017ffe <_svfiprintf_r+0x1d2>
 8017f90:	4b21      	ldr	r3, [pc, #132]	@ (8018018 <_svfiprintf_r+0x1ec>)
 8017f92:	bb1b      	cbnz	r3, 8017fdc <_svfiprintf_r+0x1b0>
 8017f94:	9b03      	ldr	r3, [sp, #12]
 8017f96:	3307      	adds	r3, #7
 8017f98:	f023 0307 	bic.w	r3, r3, #7
 8017f9c:	3308      	adds	r3, #8
 8017f9e:	9303      	str	r3, [sp, #12]
 8017fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017fa2:	4433      	add	r3, r6
 8017fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fa6:	e76a      	b.n	8017e7e <_svfiprintf_r+0x52>
 8017fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fac:	460c      	mov	r4, r1
 8017fae:	2001      	movs	r0, #1
 8017fb0:	e7a8      	b.n	8017f04 <_svfiprintf_r+0xd8>
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	3401      	adds	r4, #1
 8017fb6:	9305      	str	r3, [sp, #20]
 8017fb8:	4619      	mov	r1, r3
 8017fba:	f04f 0c0a 	mov.w	ip, #10
 8017fbe:	4620      	mov	r0, r4
 8017fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fc4:	3a30      	subs	r2, #48	@ 0x30
 8017fc6:	2a09      	cmp	r2, #9
 8017fc8:	d903      	bls.n	8017fd2 <_svfiprintf_r+0x1a6>
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d0c6      	beq.n	8017f5c <_svfiprintf_r+0x130>
 8017fce:	9105      	str	r1, [sp, #20]
 8017fd0:	e7c4      	b.n	8017f5c <_svfiprintf_r+0x130>
 8017fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8017fd6:	4604      	mov	r4, r0
 8017fd8:	2301      	movs	r3, #1
 8017fda:	e7f0      	b.n	8017fbe <_svfiprintf_r+0x192>
 8017fdc:	ab03      	add	r3, sp, #12
 8017fde:	9300      	str	r3, [sp, #0]
 8017fe0:	462a      	mov	r2, r5
 8017fe2:	4b0e      	ldr	r3, [pc, #56]	@ (801801c <_svfiprintf_r+0x1f0>)
 8017fe4:	a904      	add	r1, sp, #16
 8017fe6:	4638      	mov	r0, r7
 8017fe8:	f7fc fb36 	bl	8014658 <_printf_float>
 8017fec:	1c42      	adds	r2, r0, #1
 8017fee:	4606      	mov	r6, r0
 8017ff0:	d1d6      	bne.n	8017fa0 <_svfiprintf_r+0x174>
 8017ff2:	89ab      	ldrh	r3, [r5, #12]
 8017ff4:	065b      	lsls	r3, r3, #25
 8017ff6:	f53f af2d 	bmi.w	8017e54 <_svfiprintf_r+0x28>
 8017ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ffc:	e72c      	b.n	8017e58 <_svfiprintf_r+0x2c>
 8017ffe:	ab03      	add	r3, sp, #12
 8018000:	9300      	str	r3, [sp, #0]
 8018002:	462a      	mov	r2, r5
 8018004:	4b05      	ldr	r3, [pc, #20]	@ (801801c <_svfiprintf_r+0x1f0>)
 8018006:	a904      	add	r1, sp, #16
 8018008:	4638      	mov	r0, r7
 801800a:	f7fc fdbd 	bl	8014b88 <_printf_i>
 801800e:	e7ed      	b.n	8017fec <_svfiprintf_r+0x1c0>
 8018010:	0801c9ad 	.word	0x0801c9ad
 8018014:	0801c9b7 	.word	0x0801c9b7
 8018018:	08014659 	.word	0x08014659
 801801c:	08017d75 	.word	0x08017d75
 8018020:	0801c9b3 	.word	0x0801c9b3

08018024 <__sflush_r>:
 8018024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801802c:	0716      	lsls	r6, r2, #28
 801802e:	4605      	mov	r5, r0
 8018030:	460c      	mov	r4, r1
 8018032:	d454      	bmi.n	80180de <__sflush_r+0xba>
 8018034:	684b      	ldr	r3, [r1, #4]
 8018036:	2b00      	cmp	r3, #0
 8018038:	dc02      	bgt.n	8018040 <__sflush_r+0x1c>
 801803a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801803c:	2b00      	cmp	r3, #0
 801803e:	dd48      	ble.n	80180d2 <__sflush_r+0xae>
 8018040:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018042:	2e00      	cmp	r6, #0
 8018044:	d045      	beq.n	80180d2 <__sflush_r+0xae>
 8018046:	2300      	movs	r3, #0
 8018048:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801804c:	682f      	ldr	r7, [r5, #0]
 801804e:	6a21      	ldr	r1, [r4, #32]
 8018050:	602b      	str	r3, [r5, #0]
 8018052:	d030      	beq.n	80180b6 <__sflush_r+0x92>
 8018054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018056:	89a3      	ldrh	r3, [r4, #12]
 8018058:	0759      	lsls	r1, r3, #29
 801805a:	d505      	bpl.n	8018068 <__sflush_r+0x44>
 801805c:	6863      	ldr	r3, [r4, #4]
 801805e:	1ad2      	subs	r2, r2, r3
 8018060:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018062:	b10b      	cbz	r3, 8018068 <__sflush_r+0x44>
 8018064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018066:	1ad2      	subs	r2, r2, r3
 8018068:	2300      	movs	r3, #0
 801806a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801806c:	6a21      	ldr	r1, [r4, #32]
 801806e:	4628      	mov	r0, r5
 8018070:	47b0      	blx	r6
 8018072:	1c43      	adds	r3, r0, #1
 8018074:	89a3      	ldrh	r3, [r4, #12]
 8018076:	d106      	bne.n	8018086 <__sflush_r+0x62>
 8018078:	6829      	ldr	r1, [r5, #0]
 801807a:	291d      	cmp	r1, #29
 801807c:	d82b      	bhi.n	80180d6 <__sflush_r+0xb2>
 801807e:	4a2a      	ldr	r2, [pc, #168]	@ (8018128 <__sflush_r+0x104>)
 8018080:	40ca      	lsrs	r2, r1
 8018082:	07d6      	lsls	r6, r2, #31
 8018084:	d527      	bpl.n	80180d6 <__sflush_r+0xb2>
 8018086:	2200      	movs	r2, #0
 8018088:	6062      	str	r2, [r4, #4]
 801808a:	04d9      	lsls	r1, r3, #19
 801808c:	6922      	ldr	r2, [r4, #16]
 801808e:	6022      	str	r2, [r4, #0]
 8018090:	d504      	bpl.n	801809c <__sflush_r+0x78>
 8018092:	1c42      	adds	r2, r0, #1
 8018094:	d101      	bne.n	801809a <__sflush_r+0x76>
 8018096:	682b      	ldr	r3, [r5, #0]
 8018098:	b903      	cbnz	r3, 801809c <__sflush_r+0x78>
 801809a:	6560      	str	r0, [r4, #84]	@ 0x54
 801809c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801809e:	602f      	str	r7, [r5, #0]
 80180a0:	b1b9      	cbz	r1, 80180d2 <__sflush_r+0xae>
 80180a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80180a6:	4299      	cmp	r1, r3
 80180a8:	d002      	beq.n	80180b0 <__sflush_r+0x8c>
 80180aa:	4628      	mov	r0, r5
 80180ac:	f7fe fa34 	bl	8016518 <_free_r>
 80180b0:	2300      	movs	r3, #0
 80180b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80180b4:	e00d      	b.n	80180d2 <__sflush_r+0xae>
 80180b6:	2301      	movs	r3, #1
 80180b8:	4628      	mov	r0, r5
 80180ba:	47b0      	blx	r6
 80180bc:	4602      	mov	r2, r0
 80180be:	1c50      	adds	r0, r2, #1
 80180c0:	d1c9      	bne.n	8018056 <__sflush_r+0x32>
 80180c2:	682b      	ldr	r3, [r5, #0]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d0c6      	beq.n	8018056 <__sflush_r+0x32>
 80180c8:	2b1d      	cmp	r3, #29
 80180ca:	d001      	beq.n	80180d0 <__sflush_r+0xac>
 80180cc:	2b16      	cmp	r3, #22
 80180ce:	d11e      	bne.n	801810e <__sflush_r+0xea>
 80180d0:	602f      	str	r7, [r5, #0]
 80180d2:	2000      	movs	r0, #0
 80180d4:	e022      	b.n	801811c <__sflush_r+0xf8>
 80180d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80180da:	b21b      	sxth	r3, r3
 80180dc:	e01b      	b.n	8018116 <__sflush_r+0xf2>
 80180de:	690f      	ldr	r7, [r1, #16]
 80180e0:	2f00      	cmp	r7, #0
 80180e2:	d0f6      	beq.n	80180d2 <__sflush_r+0xae>
 80180e4:	0793      	lsls	r3, r2, #30
 80180e6:	680e      	ldr	r6, [r1, #0]
 80180e8:	bf08      	it	eq
 80180ea:	694b      	ldreq	r3, [r1, #20]
 80180ec:	600f      	str	r7, [r1, #0]
 80180ee:	bf18      	it	ne
 80180f0:	2300      	movne	r3, #0
 80180f2:	eba6 0807 	sub.w	r8, r6, r7
 80180f6:	608b      	str	r3, [r1, #8]
 80180f8:	f1b8 0f00 	cmp.w	r8, #0
 80180fc:	dde9      	ble.n	80180d2 <__sflush_r+0xae>
 80180fe:	6a21      	ldr	r1, [r4, #32]
 8018100:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018102:	4643      	mov	r3, r8
 8018104:	463a      	mov	r2, r7
 8018106:	4628      	mov	r0, r5
 8018108:	47b0      	blx	r6
 801810a:	2800      	cmp	r0, #0
 801810c:	dc08      	bgt.n	8018120 <__sflush_r+0xfc>
 801810e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018116:	81a3      	strh	r3, [r4, #12]
 8018118:	f04f 30ff 	mov.w	r0, #4294967295
 801811c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018120:	4407      	add	r7, r0
 8018122:	eba8 0800 	sub.w	r8, r8, r0
 8018126:	e7e7      	b.n	80180f8 <__sflush_r+0xd4>
 8018128:	20400001 	.word	0x20400001

0801812c <_fflush_r>:
 801812c:	b538      	push	{r3, r4, r5, lr}
 801812e:	690b      	ldr	r3, [r1, #16]
 8018130:	4605      	mov	r5, r0
 8018132:	460c      	mov	r4, r1
 8018134:	b913      	cbnz	r3, 801813c <_fflush_r+0x10>
 8018136:	2500      	movs	r5, #0
 8018138:	4628      	mov	r0, r5
 801813a:	bd38      	pop	{r3, r4, r5, pc}
 801813c:	b118      	cbz	r0, 8018146 <_fflush_r+0x1a>
 801813e:	6a03      	ldr	r3, [r0, #32]
 8018140:	b90b      	cbnz	r3, 8018146 <_fflush_r+0x1a>
 8018142:	f7fd f8d9 	bl	80152f8 <__sinit>
 8018146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d0f3      	beq.n	8018136 <_fflush_r+0xa>
 801814e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018150:	07d0      	lsls	r0, r2, #31
 8018152:	d404      	bmi.n	801815e <_fflush_r+0x32>
 8018154:	0599      	lsls	r1, r3, #22
 8018156:	d402      	bmi.n	801815e <_fflush_r+0x32>
 8018158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801815a:	f7fd fb6c 	bl	8015836 <__retarget_lock_acquire_recursive>
 801815e:	4628      	mov	r0, r5
 8018160:	4621      	mov	r1, r4
 8018162:	f7ff ff5f 	bl	8018024 <__sflush_r>
 8018166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018168:	07da      	lsls	r2, r3, #31
 801816a:	4605      	mov	r5, r0
 801816c:	d4e4      	bmi.n	8018138 <_fflush_r+0xc>
 801816e:	89a3      	ldrh	r3, [r4, #12]
 8018170:	059b      	lsls	r3, r3, #22
 8018172:	d4e1      	bmi.n	8018138 <_fflush_r+0xc>
 8018174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018176:	f7fd fb5f 	bl	8015838 <__retarget_lock_release_recursive>
 801817a:	e7dd      	b.n	8018138 <_fflush_r+0xc>

0801817c <__swhatbuf_r>:
 801817c:	b570      	push	{r4, r5, r6, lr}
 801817e:	460c      	mov	r4, r1
 8018180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018184:	2900      	cmp	r1, #0
 8018186:	b096      	sub	sp, #88	@ 0x58
 8018188:	4615      	mov	r5, r2
 801818a:	461e      	mov	r6, r3
 801818c:	da0d      	bge.n	80181aa <__swhatbuf_r+0x2e>
 801818e:	89a3      	ldrh	r3, [r4, #12]
 8018190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018194:	f04f 0100 	mov.w	r1, #0
 8018198:	bf14      	ite	ne
 801819a:	2340      	movne	r3, #64	@ 0x40
 801819c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80181a0:	2000      	movs	r0, #0
 80181a2:	6031      	str	r1, [r6, #0]
 80181a4:	602b      	str	r3, [r5, #0]
 80181a6:	b016      	add	sp, #88	@ 0x58
 80181a8:	bd70      	pop	{r4, r5, r6, pc}
 80181aa:	466a      	mov	r2, sp
 80181ac:	f000 f874 	bl	8018298 <_fstat_r>
 80181b0:	2800      	cmp	r0, #0
 80181b2:	dbec      	blt.n	801818e <__swhatbuf_r+0x12>
 80181b4:	9901      	ldr	r1, [sp, #4]
 80181b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80181ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80181be:	4259      	negs	r1, r3
 80181c0:	4159      	adcs	r1, r3
 80181c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80181c6:	e7eb      	b.n	80181a0 <__swhatbuf_r+0x24>

080181c8 <__smakebuf_r>:
 80181c8:	898b      	ldrh	r3, [r1, #12]
 80181ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181cc:	079d      	lsls	r5, r3, #30
 80181ce:	4606      	mov	r6, r0
 80181d0:	460c      	mov	r4, r1
 80181d2:	d507      	bpl.n	80181e4 <__smakebuf_r+0x1c>
 80181d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80181d8:	6023      	str	r3, [r4, #0]
 80181da:	6123      	str	r3, [r4, #16]
 80181dc:	2301      	movs	r3, #1
 80181de:	6163      	str	r3, [r4, #20]
 80181e0:	b003      	add	sp, #12
 80181e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181e4:	ab01      	add	r3, sp, #4
 80181e6:	466a      	mov	r2, sp
 80181e8:	f7ff ffc8 	bl	801817c <__swhatbuf_r>
 80181ec:	9f00      	ldr	r7, [sp, #0]
 80181ee:	4605      	mov	r5, r0
 80181f0:	4639      	mov	r1, r7
 80181f2:	4630      	mov	r0, r6
 80181f4:	f7fe fa04 	bl	8016600 <_malloc_r>
 80181f8:	b948      	cbnz	r0, 801820e <__smakebuf_r+0x46>
 80181fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181fe:	059a      	lsls	r2, r3, #22
 8018200:	d4ee      	bmi.n	80181e0 <__smakebuf_r+0x18>
 8018202:	f023 0303 	bic.w	r3, r3, #3
 8018206:	f043 0302 	orr.w	r3, r3, #2
 801820a:	81a3      	strh	r3, [r4, #12]
 801820c:	e7e2      	b.n	80181d4 <__smakebuf_r+0xc>
 801820e:	89a3      	ldrh	r3, [r4, #12]
 8018210:	6020      	str	r0, [r4, #0]
 8018212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018216:	81a3      	strh	r3, [r4, #12]
 8018218:	9b01      	ldr	r3, [sp, #4]
 801821a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801821e:	b15b      	cbz	r3, 8018238 <__smakebuf_r+0x70>
 8018220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018224:	4630      	mov	r0, r6
 8018226:	f000 f849 	bl	80182bc <_isatty_r>
 801822a:	b128      	cbz	r0, 8018238 <__smakebuf_r+0x70>
 801822c:	89a3      	ldrh	r3, [r4, #12]
 801822e:	f023 0303 	bic.w	r3, r3, #3
 8018232:	f043 0301 	orr.w	r3, r3, #1
 8018236:	81a3      	strh	r3, [r4, #12]
 8018238:	89a3      	ldrh	r3, [r4, #12]
 801823a:	431d      	orrs	r5, r3
 801823c:	81a5      	strh	r5, [r4, #12]
 801823e:	e7cf      	b.n	80181e0 <__smakebuf_r+0x18>

08018240 <memmove>:
 8018240:	4288      	cmp	r0, r1
 8018242:	b510      	push	{r4, lr}
 8018244:	eb01 0402 	add.w	r4, r1, r2
 8018248:	d902      	bls.n	8018250 <memmove+0x10>
 801824a:	4284      	cmp	r4, r0
 801824c:	4623      	mov	r3, r4
 801824e:	d807      	bhi.n	8018260 <memmove+0x20>
 8018250:	1e43      	subs	r3, r0, #1
 8018252:	42a1      	cmp	r1, r4
 8018254:	d008      	beq.n	8018268 <memmove+0x28>
 8018256:	f811 2b01 	ldrb.w	r2, [r1], #1
 801825a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801825e:	e7f8      	b.n	8018252 <memmove+0x12>
 8018260:	4402      	add	r2, r0
 8018262:	4601      	mov	r1, r0
 8018264:	428a      	cmp	r2, r1
 8018266:	d100      	bne.n	801826a <memmove+0x2a>
 8018268:	bd10      	pop	{r4, pc}
 801826a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801826e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018272:	e7f7      	b.n	8018264 <memmove+0x24>

08018274 <strncmp>:
 8018274:	b510      	push	{r4, lr}
 8018276:	b16a      	cbz	r2, 8018294 <strncmp+0x20>
 8018278:	3901      	subs	r1, #1
 801827a:	1884      	adds	r4, r0, r2
 801827c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018280:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018284:	429a      	cmp	r2, r3
 8018286:	d103      	bne.n	8018290 <strncmp+0x1c>
 8018288:	42a0      	cmp	r0, r4
 801828a:	d001      	beq.n	8018290 <strncmp+0x1c>
 801828c:	2a00      	cmp	r2, #0
 801828e:	d1f5      	bne.n	801827c <strncmp+0x8>
 8018290:	1ad0      	subs	r0, r2, r3
 8018292:	bd10      	pop	{r4, pc}
 8018294:	4610      	mov	r0, r2
 8018296:	e7fc      	b.n	8018292 <strncmp+0x1e>

08018298 <_fstat_r>:
 8018298:	b538      	push	{r3, r4, r5, lr}
 801829a:	4d07      	ldr	r5, [pc, #28]	@ (80182b8 <_fstat_r+0x20>)
 801829c:	2300      	movs	r3, #0
 801829e:	4604      	mov	r4, r0
 80182a0:	4608      	mov	r0, r1
 80182a2:	4611      	mov	r1, r2
 80182a4:	602b      	str	r3, [r5, #0]
 80182a6:	f7ec f81d 	bl	80042e4 <_fstat>
 80182aa:	1c43      	adds	r3, r0, #1
 80182ac:	d102      	bne.n	80182b4 <_fstat_r+0x1c>
 80182ae:	682b      	ldr	r3, [r5, #0]
 80182b0:	b103      	cbz	r3, 80182b4 <_fstat_r+0x1c>
 80182b2:	6023      	str	r3, [r4, #0]
 80182b4:	bd38      	pop	{r3, r4, r5, pc}
 80182b6:	bf00      	nop
 80182b8:	20004964 	.word	0x20004964

080182bc <_isatty_r>:
 80182bc:	b538      	push	{r3, r4, r5, lr}
 80182be:	4d06      	ldr	r5, [pc, #24]	@ (80182d8 <_isatty_r+0x1c>)
 80182c0:	2300      	movs	r3, #0
 80182c2:	4604      	mov	r4, r0
 80182c4:	4608      	mov	r0, r1
 80182c6:	602b      	str	r3, [r5, #0]
 80182c8:	f7ec f81c 	bl	8004304 <_isatty>
 80182cc:	1c43      	adds	r3, r0, #1
 80182ce:	d102      	bne.n	80182d6 <_isatty_r+0x1a>
 80182d0:	682b      	ldr	r3, [r5, #0]
 80182d2:	b103      	cbz	r3, 80182d6 <_isatty_r+0x1a>
 80182d4:	6023      	str	r3, [r4, #0]
 80182d6:	bd38      	pop	{r3, r4, r5, pc}
 80182d8:	20004964 	.word	0x20004964

080182dc <_sbrk_r>:
 80182dc:	b538      	push	{r3, r4, r5, lr}
 80182de:	4d06      	ldr	r5, [pc, #24]	@ (80182f8 <_sbrk_r+0x1c>)
 80182e0:	2300      	movs	r3, #0
 80182e2:	4604      	mov	r4, r0
 80182e4:	4608      	mov	r0, r1
 80182e6:	602b      	str	r3, [r5, #0]
 80182e8:	f7ec f824 	bl	8004334 <_sbrk>
 80182ec:	1c43      	adds	r3, r0, #1
 80182ee:	d102      	bne.n	80182f6 <_sbrk_r+0x1a>
 80182f0:	682b      	ldr	r3, [r5, #0]
 80182f2:	b103      	cbz	r3, 80182f6 <_sbrk_r+0x1a>
 80182f4:	6023      	str	r3, [r4, #0]
 80182f6:	bd38      	pop	{r3, r4, r5, pc}
 80182f8:	20004964 	.word	0x20004964
 80182fc:	00000000 	.word	0x00000000

08018300 <nan>:
 8018300:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018308 <nan+0x8>
 8018304:	4770      	bx	lr
 8018306:	bf00      	nop
 8018308:	00000000 	.word	0x00000000
 801830c:	7ff80000 	.word	0x7ff80000

08018310 <__assert_func>:
 8018310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018312:	4614      	mov	r4, r2
 8018314:	461a      	mov	r2, r3
 8018316:	4b09      	ldr	r3, [pc, #36]	@ (801833c <__assert_func+0x2c>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	4605      	mov	r5, r0
 801831c:	68d8      	ldr	r0, [r3, #12]
 801831e:	b14c      	cbz	r4, 8018334 <__assert_func+0x24>
 8018320:	4b07      	ldr	r3, [pc, #28]	@ (8018340 <__assert_func+0x30>)
 8018322:	9100      	str	r1, [sp, #0]
 8018324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018328:	4906      	ldr	r1, [pc, #24]	@ (8018344 <__assert_func+0x34>)
 801832a:	462b      	mov	r3, r5
 801832c:	f000 fba8 	bl	8018a80 <fiprintf>
 8018330:	f000 fbb8 	bl	8018aa4 <abort>
 8018334:	4b04      	ldr	r3, [pc, #16]	@ (8018348 <__assert_func+0x38>)
 8018336:	461c      	mov	r4, r3
 8018338:	e7f3      	b.n	8018322 <__assert_func+0x12>
 801833a:	bf00      	nop
 801833c:	20000058 	.word	0x20000058
 8018340:	0801c9c6 	.word	0x0801c9c6
 8018344:	0801c9d3 	.word	0x0801c9d3
 8018348:	0801ca01 	.word	0x0801ca01

0801834c <_calloc_r>:
 801834c:	b570      	push	{r4, r5, r6, lr}
 801834e:	fba1 5402 	umull	r5, r4, r1, r2
 8018352:	b934      	cbnz	r4, 8018362 <_calloc_r+0x16>
 8018354:	4629      	mov	r1, r5
 8018356:	f7fe f953 	bl	8016600 <_malloc_r>
 801835a:	4606      	mov	r6, r0
 801835c:	b928      	cbnz	r0, 801836a <_calloc_r+0x1e>
 801835e:	4630      	mov	r0, r6
 8018360:	bd70      	pop	{r4, r5, r6, pc}
 8018362:	220c      	movs	r2, #12
 8018364:	6002      	str	r2, [r0, #0]
 8018366:	2600      	movs	r6, #0
 8018368:	e7f9      	b.n	801835e <_calloc_r+0x12>
 801836a:	462a      	mov	r2, r5
 801836c:	4621      	mov	r1, r4
 801836e:	f7fd f987 	bl	8015680 <memset>
 8018372:	e7f4      	b.n	801835e <_calloc_r+0x12>

08018374 <rshift>:
 8018374:	6903      	ldr	r3, [r0, #16]
 8018376:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801837a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801837e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018382:	f100 0414 	add.w	r4, r0, #20
 8018386:	dd45      	ble.n	8018414 <rshift+0xa0>
 8018388:	f011 011f 	ands.w	r1, r1, #31
 801838c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018390:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018394:	d10c      	bne.n	80183b0 <rshift+0x3c>
 8018396:	f100 0710 	add.w	r7, r0, #16
 801839a:	4629      	mov	r1, r5
 801839c:	42b1      	cmp	r1, r6
 801839e:	d334      	bcc.n	801840a <rshift+0x96>
 80183a0:	1a9b      	subs	r3, r3, r2
 80183a2:	009b      	lsls	r3, r3, #2
 80183a4:	1eea      	subs	r2, r5, #3
 80183a6:	4296      	cmp	r6, r2
 80183a8:	bf38      	it	cc
 80183aa:	2300      	movcc	r3, #0
 80183ac:	4423      	add	r3, r4
 80183ae:	e015      	b.n	80183dc <rshift+0x68>
 80183b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80183b4:	f1c1 0820 	rsb	r8, r1, #32
 80183b8:	40cf      	lsrs	r7, r1
 80183ba:	f105 0e04 	add.w	lr, r5, #4
 80183be:	46a1      	mov	r9, r4
 80183c0:	4576      	cmp	r6, lr
 80183c2:	46f4      	mov	ip, lr
 80183c4:	d815      	bhi.n	80183f2 <rshift+0x7e>
 80183c6:	1a9a      	subs	r2, r3, r2
 80183c8:	0092      	lsls	r2, r2, #2
 80183ca:	3a04      	subs	r2, #4
 80183cc:	3501      	adds	r5, #1
 80183ce:	42ae      	cmp	r6, r5
 80183d0:	bf38      	it	cc
 80183d2:	2200      	movcc	r2, #0
 80183d4:	18a3      	adds	r3, r4, r2
 80183d6:	50a7      	str	r7, [r4, r2]
 80183d8:	b107      	cbz	r7, 80183dc <rshift+0x68>
 80183da:	3304      	adds	r3, #4
 80183dc:	1b1a      	subs	r2, r3, r4
 80183de:	42a3      	cmp	r3, r4
 80183e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80183e4:	bf08      	it	eq
 80183e6:	2300      	moveq	r3, #0
 80183e8:	6102      	str	r2, [r0, #16]
 80183ea:	bf08      	it	eq
 80183ec:	6143      	streq	r3, [r0, #20]
 80183ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183f2:	f8dc c000 	ldr.w	ip, [ip]
 80183f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80183fa:	ea4c 0707 	orr.w	r7, ip, r7
 80183fe:	f849 7b04 	str.w	r7, [r9], #4
 8018402:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018406:	40cf      	lsrs	r7, r1
 8018408:	e7da      	b.n	80183c0 <rshift+0x4c>
 801840a:	f851 cb04 	ldr.w	ip, [r1], #4
 801840e:	f847 cf04 	str.w	ip, [r7, #4]!
 8018412:	e7c3      	b.n	801839c <rshift+0x28>
 8018414:	4623      	mov	r3, r4
 8018416:	e7e1      	b.n	80183dc <rshift+0x68>

08018418 <__hexdig_fun>:
 8018418:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801841c:	2b09      	cmp	r3, #9
 801841e:	d802      	bhi.n	8018426 <__hexdig_fun+0xe>
 8018420:	3820      	subs	r0, #32
 8018422:	b2c0      	uxtb	r0, r0
 8018424:	4770      	bx	lr
 8018426:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801842a:	2b05      	cmp	r3, #5
 801842c:	d801      	bhi.n	8018432 <__hexdig_fun+0x1a>
 801842e:	3847      	subs	r0, #71	@ 0x47
 8018430:	e7f7      	b.n	8018422 <__hexdig_fun+0xa>
 8018432:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8018436:	2b05      	cmp	r3, #5
 8018438:	d801      	bhi.n	801843e <__hexdig_fun+0x26>
 801843a:	3827      	subs	r0, #39	@ 0x27
 801843c:	e7f1      	b.n	8018422 <__hexdig_fun+0xa>
 801843e:	2000      	movs	r0, #0
 8018440:	4770      	bx	lr
	...

08018444 <__gethex>:
 8018444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018448:	b085      	sub	sp, #20
 801844a:	468a      	mov	sl, r1
 801844c:	9302      	str	r3, [sp, #8]
 801844e:	680b      	ldr	r3, [r1, #0]
 8018450:	9001      	str	r0, [sp, #4]
 8018452:	4690      	mov	r8, r2
 8018454:	1c9c      	adds	r4, r3, #2
 8018456:	46a1      	mov	r9, r4
 8018458:	f814 0b01 	ldrb.w	r0, [r4], #1
 801845c:	2830      	cmp	r0, #48	@ 0x30
 801845e:	d0fa      	beq.n	8018456 <__gethex+0x12>
 8018460:	eba9 0303 	sub.w	r3, r9, r3
 8018464:	f1a3 0b02 	sub.w	fp, r3, #2
 8018468:	f7ff ffd6 	bl	8018418 <__hexdig_fun>
 801846c:	4605      	mov	r5, r0
 801846e:	2800      	cmp	r0, #0
 8018470:	d168      	bne.n	8018544 <__gethex+0x100>
 8018472:	49a0      	ldr	r1, [pc, #640]	@ (80186f4 <__gethex+0x2b0>)
 8018474:	2201      	movs	r2, #1
 8018476:	4648      	mov	r0, r9
 8018478:	f7ff fefc 	bl	8018274 <strncmp>
 801847c:	4607      	mov	r7, r0
 801847e:	2800      	cmp	r0, #0
 8018480:	d167      	bne.n	8018552 <__gethex+0x10e>
 8018482:	f899 0001 	ldrb.w	r0, [r9, #1]
 8018486:	4626      	mov	r6, r4
 8018488:	f7ff ffc6 	bl	8018418 <__hexdig_fun>
 801848c:	2800      	cmp	r0, #0
 801848e:	d062      	beq.n	8018556 <__gethex+0x112>
 8018490:	4623      	mov	r3, r4
 8018492:	7818      	ldrb	r0, [r3, #0]
 8018494:	2830      	cmp	r0, #48	@ 0x30
 8018496:	4699      	mov	r9, r3
 8018498:	f103 0301 	add.w	r3, r3, #1
 801849c:	d0f9      	beq.n	8018492 <__gethex+0x4e>
 801849e:	f7ff ffbb 	bl	8018418 <__hexdig_fun>
 80184a2:	fab0 f580 	clz	r5, r0
 80184a6:	096d      	lsrs	r5, r5, #5
 80184a8:	f04f 0b01 	mov.w	fp, #1
 80184ac:	464a      	mov	r2, r9
 80184ae:	4616      	mov	r6, r2
 80184b0:	3201      	adds	r2, #1
 80184b2:	7830      	ldrb	r0, [r6, #0]
 80184b4:	f7ff ffb0 	bl	8018418 <__hexdig_fun>
 80184b8:	2800      	cmp	r0, #0
 80184ba:	d1f8      	bne.n	80184ae <__gethex+0x6a>
 80184bc:	498d      	ldr	r1, [pc, #564]	@ (80186f4 <__gethex+0x2b0>)
 80184be:	2201      	movs	r2, #1
 80184c0:	4630      	mov	r0, r6
 80184c2:	f7ff fed7 	bl	8018274 <strncmp>
 80184c6:	2800      	cmp	r0, #0
 80184c8:	d13f      	bne.n	801854a <__gethex+0x106>
 80184ca:	b944      	cbnz	r4, 80184de <__gethex+0x9a>
 80184cc:	1c74      	adds	r4, r6, #1
 80184ce:	4622      	mov	r2, r4
 80184d0:	4616      	mov	r6, r2
 80184d2:	3201      	adds	r2, #1
 80184d4:	7830      	ldrb	r0, [r6, #0]
 80184d6:	f7ff ff9f 	bl	8018418 <__hexdig_fun>
 80184da:	2800      	cmp	r0, #0
 80184dc:	d1f8      	bne.n	80184d0 <__gethex+0x8c>
 80184de:	1ba4      	subs	r4, r4, r6
 80184e0:	00a7      	lsls	r7, r4, #2
 80184e2:	7833      	ldrb	r3, [r6, #0]
 80184e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80184e8:	2b50      	cmp	r3, #80	@ 0x50
 80184ea:	d13e      	bne.n	801856a <__gethex+0x126>
 80184ec:	7873      	ldrb	r3, [r6, #1]
 80184ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80184f0:	d033      	beq.n	801855a <__gethex+0x116>
 80184f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80184f4:	d034      	beq.n	8018560 <__gethex+0x11c>
 80184f6:	1c71      	adds	r1, r6, #1
 80184f8:	2400      	movs	r4, #0
 80184fa:	7808      	ldrb	r0, [r1, #0]
 80184fc:	f7ff ff8c 	bl	8018418 <__hexdig_fun>
 8018500:	1e43      	subs	r3, r0, #1
 8018502:	b2db      	uxtb	r3, r3
 8018504:	2b18      	cmp	r3, #24
 8018506:	d830      	bhi.n	801856a <__gethex+0x126>
 8018508:	f1a0 0210 	sub.w	r2, r0, #16
 801850c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018510:	f7ff ff82 	bl	8018418 <__hexdig_fun>
 8018514:	f100 3cff 	add.w	ip, r0, #4294967295
 8018518:	fa5f fc8c 	uxtb.w	ip, ip
 801851c:	f1bc 0f18 	cmp.w	ip, #24
 8018520:	f04f 030a 	mov.w	r3, #10
 8018524:	d91e      	bls.n	8018564 <__gethex+0x120>
 8018526:	b104      	cbz	r4, 801852a <__gethex+0xe6>
 8018528:	4252      	negs	r2, r2
 801852a:	4417      	add	r7, r2
 801852c:	f8ca 1000 	str.w	r1, [sl]
 8018530:	b1ed      	cbz	r5, 801856e <__gethex+0x12a>
 8018532:	f1bb 0f00 	cmp.w	fp, #0
 8018536:	bf0c      	ite	eq
 8018538:	2506      	moveq	r5, #6
 801853a:	2500      	movne	r5, #0
 801853c:	4628      	mov	r0, r5
 801853e:	b005      	add	sp, #20
 8018540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018544:	2500      	movs	r5, #0
 8018546:	462c      	mov	r4, r5
 8018548:	e7b0      	b.n	80184ac <__gethex+0x68>
 801854a:	2c00      	cmp	r4, #0
 801854c:	d1c7      	bne.n	80184de <__gethex+0x9a>
 801854e:	4627      	mov	r7, r4
 8018550:	e7c7      	b.n	80184e2 <__gethex+0x9e>
 8018552:	464e      	mov	r6, r9
 8018554:	462f      	mov	r7, r5
 8018556:	2501      	movs	r5, #1
 8018558:	e7c3      	b.n	80184e2 <__gethex+0x9e>
 801855a:	2400      	movs	r4, #0
 801855c:	1cb1      	adds	r1, r6, #2
 801855e:	e7cc      	b.n	80184fa <__gethex+0xb6>
 8018560:	2401      	movs	r4, #1
 8018562:	e7fb      	b.n	801855c <__gethex+0x118>
 8018564:	fb03 0002 	mla	r0, r3, r2, r0
 8018568:	e7ce      	b.n	8018508 <__gethex+0xc4>
 801856a:	4631      	mov	r1, r6
 801856c:	e7de      	b.n	801852c <__gethex+0xe8>
 801856e:	eba6 0309 	sub.w	r3, r6, r9
 8018572:	3b01      	subs	r3, #1
 8018574:	4629      	mov	r1, r5
 8018576:	2b07      	cmp	r3, #7
 8018578:	dc0a      	bgt.n	8018590 <__gethex+0x14c>
 801857a:	9801      	ldr	r0, [sp, #4]
 801857c:	f7fe f8cc 	bl	8016718 <_Balloc>
 8018580:	4604      	mov	r4, r0
 8018582:	b940      	cbnz	r0, 8018596 <__gethex+0x152>
 8018584:	4b5c      	ldr	r3, [pc, #368]	@ (80186f8 <__gethex+0x2b4>)
 8018586:	4602      	mov	r2, r0
 8018588:	21e4      	movs	r1, #228	@ 0xe4
 801858a:	485c      	ldr	r0, [pc, #368]	@ (80186fc <__gethex+0x2b8>)
 801858c:	f7ff fec0 	bl	8018310 <__assert_func>
 8018590:	3101      	adds	r1, #1
 8018592:	105b      	asrs	r3, r3, #1
 8018594:	e7ef      	b.n	8018576 <__gethex+0x132>
 8018596:	f100 0a14 	add.w	sl, r0, #20
 801859a:	2300      	movs	r3, #0
 801859c:	4655      	mov	r5, sl
 801859e:	469b      	mov	fp, r3
 80185a0:	45b1      	cmp	r9, r6
 80185a2:	d337      	bcc.n	8018614 <__gethex+0x1d0>
 80185a4:	f845 bb04 	str.w	fp, [r5], #4
 80185a8:	eba5 050a 	sub.w	r5, r5, sl
 80185ac:	10ad      	asrs	r5, r5, #2
 80185ae:	6125      	str	r5, [r4, #16]
 80185b0:	4658      	mov	r0, fp
 80185b2:	f7fe f9a3 	bl	80168fc <__hi0bits>
 80185b6:	016d      	lsls	r5, r5, #5
 80185b8:	f8d8 6000 	ldr.w	r6, [r8]
 80185bc:	1a2d      	subs	r5, r5, r0
 80185be:	42b5      	cmp	r5, r6
 80185c0:	dd54      	ble.n	801866c <__gethex+0x228>
 80185c2:	1bad      	subs	r5, r5, r6
 80185c4:	4629      	mov	r1, r5
 80185c6:	4620      	mov	r0, r4
 80185c8:	f7fe fd2f 	bl	801702a <__any_on>
 80185cc:	4681      	mov	r9, r0
 80185ce:	b178      	cbz	r0, 80185f0 <__gethex+0x1ac>
 80185d0:	1e6b      	subs	r3, r5, #1
 80185d2:	1159      	asrs	r1, r3, #5
 80185d4:	f003 021f 	and.w	r2, r3, #31
 80185d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80185dc:	f04f 0901 	mov.w	r9, #1
 80185e0:	fa09 f202 	lsl.w	r2, r9, r2
 80185e4:	420a      	tst	r2, r1
 80185e6:	d003      	beq.n	80185f0 <__gethex+0x1ac>
 80185e8:	454b      	cmp	r3, r9
 80185ea:	dc36      	bgt.n	801865a <__gethex+0x216>
 80185ec:	f04f 0902 	mov.w	r9, #2
 80185f0:	4629      	mov	r1, r5
 80185f2:	4620      	mov	r0, r4
 80185f4:	f7ff febe 	bl	8018374 <rshift>
 80185f8:	442f      	add	r7, r5
 80185fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80185fe:	42bb      	cmp	r3, r7
 8018600:	da42      	bge.n	8018688 <__gethex+0x244>
 8018602:	9801      	ldr	r0, [sp, #4]
 8018604:	4621      	mov	r1, r4
 8018606:	f7fe f8c7 	bl	8016798 <_Bfree>
 801860a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801860c:	2300      	movs	r3, #0
 801860e:	6013      	str	r3, [r2, #0]
 8018610:	25a3      	movs	r5, #163	@ 0xa3
 8018612:	e793      	b.n	801853c <__gethex+0xf8>
 8018614:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018618:	2a2e      	cmp	r2, #46	@ 0x2e
 801861a:	d012      	beq.n	8018642 <__gethex+0x1fe>
 801861c:	2b20      	cmp	r3, #32
 801861e:	d104      	bne.n	801862a <__gethex+0x1e6>
 8018620:	f845 bb04 	str.w	fp, [r5], #4
 8018624:	f04f 0b00 	mov.w	fp, #0
 8018628:	465b      	mov	r3, fp
 801862a:	7830      	ldrb	r0, [r6, #0]
 801862c:	9303      	str	r3, [sp, #12]
 801862e:	f7ff fef3 	bl	8018418 <__hexdig_fun>
 8018632:	9b03      	ldr	r3, [sp, #12]
 8018634:	f000 000f 	and.w	r0, r0, #15
 8018638:	4098      	lsls	r0, r3
 801863a:	ea4b 0b00 	orr.w	fp, fp, r0
 801863e:	3304      	adds	r3, #4
 8018640:	e7ae      	b.n	80185a0 <__gethex+0x15c>
 8018642:	45b1      	cmp	r9, r6
 8018644:	d8ea      	bhi.n	801861c <__gethex+0x1d8>
 8018646:	492b      	ldr	r1, [pc, #172]	@ (80186f4 <__gethex+0x2b0>)
 8018648:	9303      	str	r3, [sp, #12]
 801864a:	2201      	movs	r2, #1
 801864c:	4630      	mov	r0, r6
 801864e:	f7ff fe11 	bl	8018274 <strncmp>
 8018652:	9b03      	ldr	r3, [sp, #12]
 8018654:	2800      	cmp	r0, #0
 8018656:	d1e1      	bne.n	801861c <__gethex+0x1d8>
 8018658:	e7a2      	b.n	80185a0 <__gethex+0x15c>
 801865a:	1ea9      	subs	r1, r5, #2
 801865c:	4620      	mov	r0, r4
 801865e:	f7fe fce4 	bl	801702a <__any_on>
 8018662:	2800      	cmp	r0, #0
 8018664:	d0c2      	beq.n	80185ec <__gethex+0x1a8>
 8018666:	f04f 0903 	mov.w	r9, #3
 801866a:	e7c1      	b.n	80185f0 <__gethex+0x1ac>
 801866c:	da09      	bge.n	8018682 <__gethex+0x23e>
 801866e:	1b75      	subs	r5, r6, r5
 8018670:	4621      	mov	r1, r4
 8018672:	9801      	ldr	r0, [sp, #4]
 8018674:	462a      	mov	r2, r5
 8018676:	f7fe fa9f 	bl	8016bb8 <__lshift>
 801867a:	1b7f      	subs	r7, r7, r5
 801867c:	4604      	mov	r4, r0
 801867e:	f100 0a14 	add.w	sl, r0, #20
 8018682:	f04f 0900 	mov.w	r9, #0
 8018686:	e7b8      	b.n	80185fa <__gethex+0x1b6>
 8018688:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801868c:	42bd      	cmp	r5, r7
 801868e:	dd6f      	ble.n	8018770 <__gethex+0x32c>
 8018690:	1bed      	subs	r5, r5, r7
 8018692:	42ae      	cmp	r6, r5
 8018694:	dc34      	bgt.n	8018700 <__gethex+0x2bc>
 8018696:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801869a:	2b02      	cmp	r3, #2
 801869c:	d022      	beq.n	80186e4 <__gethex+0x2a0>
 801869e:	2b03      	cmp	r3, #3
 80186a0:	d024      	beq.n	80186ec <__gethex+0x2a8>
 80186a2:	2b01      	cmp	r3, #1
 80186a4:	d115      	bne.n	80186d2 <__gethex+0x28e>
 80186a6:	42ae      	cmp	r6, r5
 80186a8:	d113      	bne.n	80186d2 <__gethex+0x28e>
 80186aa:	2e01      	cmp	r6, #1
 80186ac:	d10b      	bne.n	80186c6 <__gethex+0x282>
 80186ae:	9a02      	ldr	r2, [sp, #8]
 80186b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80186b4:	6013      	str	r3, [r2, #0]
 80186b6:	2301      	movs	r3, #1
 80186b8:	6123      	str	r3, [r4, #16]
 80186ba:	f8ca 3000 	str.w	r3, [sl]
 80186be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186c0:	2562      	movs	r5, #98	@ 0x62
 80186c2:	601c      	str	r4, [r3, #0]
 80186c4:	e73a      	b.n	801853c <__gethex+0xf8>
 80186c6:	1e71      	subs	r1, r6, #1
 80186c8:	4620      	mov	r0, r4
 80186ca:	f7fe fcae 	bl	801702a <__any_on>
 80186ce:	2800      	cmp	r0, #0
 80186d0:	d1ed      	bne.n	80186ae <__gethex+0x26a>
 80186d2:	9801      	ldr	r0, [sp, #4]
 80186d4:	4621      	mov	r1, r4
 80186d6:	f7fe f85f 	bl	8016798 <_Bfree>
 80186da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80186dc:	2300      	movs	r3, #0
 80186de:	6013      	str	r3, [r2, #0]
 80186e0:	2550      	movs	r5, #80	@ 0x50
 80186e2:	e72b      	b.n	801853c <__gethex+0xf8>
 80186e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d1f3      	bne.n	80186d2 <__gethex+0x28e>
 80186ea:	e7e0      	b.n	80186ae <__gethex+0x26a>
 80186ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d1dd      	bne.n	80186ae <__gethex+0x26a>
 80186f2:	e7ee      	b.n	80186d2 <__gethex+0x28e>
 80186f4:	0801c9ab 	.word	0x0801c9ab
 80186f8:	0801c941 	.word	0x0801c941
 80186fc:	0801ca02 	.word	0x0801ca02
 8018700:	1e6f      	subs	r7, r5, #1
 8018702:	f1b9 0f00 	cmp.w	r9, #0
 8018706:	d130      	bne.n	801876a <__gethex+0x326>
 8018708:	b127      	cbz	r7, 8018714 <__gethex+0x2d0>
 801870a:	4639      	mov	r1, r7
 801870c:	4620      	mov	r0, r4
 801870e:	f7fe fc8c 	bl	801702a <__any_on>
 8018712:	4681      	mov	r9, r0
 8018714:	117a      	asrs	r2, r7, #5
 8018716:	2301      	movs	r3, #1
 8018718:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801871c:	f007 071f 	and.w	r7, r7, #31
 8018720:	40bb      	lsls	r3, r7
 8018722:	4213      	tst	r3, r2
 8018724:	4629      	mov	r1, r5
 8018726:	4620      	mov	r0, r4
 8018728:	bf18      	it	ne
 801872a:	f049 0902 	orrne.w	r9, r9, #2
 801872e:	f7ff fe21 	bl	8018374 <rshift>
 8018732:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018736:	1b76      	subs	r6, r6, r5
 8018738:	2502      	movs	r5, #2
 801873a:	f1b9 0f00 	cmp.w	r9, #0
 801873e:	d047      	beq.n	80187d0 <__gethex+0x38c>
 8018740:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018744:	2b02      	cmp	r3, #2
 8018746:	d015      	beq.n	8018774 <__gethex+0x330>
 8018748:	2b03      	cmp	r3, #3
 801874a:	d017      	beq.n	801877c <__gethex+0x338>
 801874c:	2b01      	cmp	r3, #1
 801874e:	d109      	bne.n	8018764 <__gethex+0x320>
 8018750:	f019 0f02 	tst.w	r9, #2
 8018754:	d006      	beq.n	8018764 <__gethex+0x320>
 8018756:	f8da 3000 	ldr.w	r3, [sl]
 801875a:	ea49 0903 	orr.w	r9, r9, r3
 801875e:	f019 0f01 	tst.w	r9, #1
 8018762:	d10e      	bne.n	8018782 <__gethex+0x33e>
 8018764:	f045 0510 	orr.w	r5, r5, #16
 8018768:	e032      	b.n	80187d0 <__gethex+0x38c>
 801876a:	f04f 0901 	mov.w	r9, #1
 801876e:	e7d1      	b.n	8018714 <__gethex+0x2d0>
 8018770:	2501      	movs	r5, #1
 8018772:	e7e2      	b.n	801873a <__gethex+0x2f6>
 8018774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018776:	f1c3 0301 	rsb	r3, r3, #1
 801877a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801877c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801877e:	2b00      	cmp	r3, #0
 8018780:	d0f0      	beq.n	8018764 <__gethex+0x320>
 8018782:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018786:	f104 0314 	add.w	r3, r4, #20
 801878a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801878e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018792:	f04f 0c00 	mov.w	ip, #0
 8018796:	4618      	mov	r0, r3
 8018798:	f853 2b04 	ldr.w	r2, [r3], #4
 801879c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80187a0:	d01b      	beq.n	80187da <__gethex+0x396>
 80187a2:	3201      	adds	r2, #1
 80187a4:	6002      	str	r2, [r0, #0]
 80187a6:	2d02      	cmp	r5, #2
 80187a8:	f104 0314 	add.w	r3, r4, #20
 80187ac:	d13c      	bne.n	8018828 <__gethex+0x3e4>
 80187ae:	f8d8 2000 	ldr.w	r2, [r8]
 80187b2:	3a01      	subs	r2, #1
 80187b4:	42b2      	cmp	r2, r6
 80187b6:	d109      	bne.n	80187cc <__gethex+0x388>
 80187b8:	1171      	asrs	r1, r6, #5
 80187ba:	2201      	movs	r2, #1
 80187bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80187c0:	f006 061f 	and.w	r6, r6, #31
 80187c4:	fa02 f606 	lsl.w	r6, r2, r6
 80187c8:	421e      	tst	r6, r3
 80187ca:	d13a      	bne.n	8018842 <__gethex+0x3fe>
 80187cc:	f045 0520 	orr.w	r5, r5, #32
 80187d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80187d2:	601c      	str	r4, [r3, #0]
 80187d4:	9b02      	ldr	r3, [sp, #8]
 80187d6:	601f      	str	r7, [r3, #0]
 80187d8:	e6b0      	b.n	801853c <__gethex+0xf8>
 80187da:	4299      	cmp	r1, r3
 80187dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80187e0:	d8d9      	bhi.n	8018796 <__gethex+0x352>
 80187e2:	68a3      	ldr	r3, [r4, #8]
 80187e4:	459b      	cmp	fp, r3
 80187e6:	db17      	blt.n	8018818 <__gethex+0x3d4>
 80187e8:	6861      	ldr	r1, [r4, #4]
 80187ea:	9801      	ldr	r0, [sp, #4]
 80187ec:	3101      	adds	r1, #1
 80187ee:	f7fd ff93 	bl	8016718 <_Balloc>
 80187f2:	4681      	mov	r9, r0
 80187f4:	b918      	cbnz	r0, 80187fe <__gethex+0x3ba>
 80187f6:	4b1a      	ldr	r3, [pc, #104]	@ (8018860 <__gethex+0x41c>)
 80187f8:	4602      	mov	r2, r0
 80187fa:	2184      	movs	r1, #132	@ 0x84
 80187fc:	e6c5      	b.n	801858a <__gethex+0x146>
 80187fe:	6922      	ldr	r2, [r4, #16]
 8018800:	3202      	adds	r2, #2
 8018802:	f104 010c 	add.w	r1, r4, #12
 8018806:	0092      	lsls	r2, r2, #2
 8018808:	300c      	adds	r0, #12
 801880a:	f7fd f816 	bl	801583a <memcpy>
 801880e:	4621      	mov	r1, r4
 8018810:	9801      	ldr	r0, [sp, #4]
 8018812:	f7fd ffc1 	bl	8016798 <_Bfree>
 8018816:	464c      	mov	r4, r9
 8018818:	6923      	ldr	r3, [r4, #16]
 801881a:	1c5a      	adds	r2, r3, #1
 801881c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018820:	6122      	str	r2, [r4, #16]
 8018822:	2201      	movs	r2, #1
 8018824:	615a      	str	r2, [r3, #20]
 8018826:	e7be      	b.n	80187a6 <__gethex+0x362>
 8018828:	6922      	ldr	r2, [r4, #16]
 801882a:	455a      	cmp	r2, fp
 801882c:	dd0b      	ble.n	8018846 <__gethex+0x402>
 801882e:	2101      	movs	r1, #1
 8018830:	4620      	mov	r0, r4
 8018832:	f7ff fd9f 	bl	8018374 <rshift>
 8018836:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801883a:	3701      	adds	r7, #1
 801883c:	42bb      	cmp	r3, r7
 801883e:	f6ff aee0 	blt.w	8018602 <__gethex+0x1be>
 8018842:	2501      	movs	r5, #1
 8018844:	e7c2      	b.n	80187cc <__gethex+0x388>
 8018846:	f016 061f 	ands.w	r6, r6, #31
 801884a:	d0fa      	beq.n	8018842 <__gethex+0x3fe>
 801884c:	4453      	add	r3, sl
 801884e:	f1c6 0620 	rsb	r6, r6, #32
 8018852:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018856:	f7fe f851 	bl	80168fc <__hi0bits>
 801885a:	42b0      	cmp	r0, r6
 801885c:	dbe7      	blt.n	801882e <__gethex+0x3ea>
 801885e:	e7f0      	b.n	8018842 <__gethex+0x3fe>
 8018860:	0801c941 	.word	0x0801c941

08018864 <L_shift>:
 8018864:	f1c2 0208 	rsb	r2, r2, #8
 8018868:	0092      	lsls	r2, r2, #2
 801886a:	b570      	push	{r4, r5, r6, lr}
 801886c:	f1c2 0620 	rsb	r6, r2, #32
 8018870:	6843      	ldr	r3, [r0, #4]
 8018872:	6804      	ldr	r4, [r0, #0]
 8018874:	fa03 f506 	lsl.w	r5, r3, r6
 8018878:	432c      	orrs	r4, r5
 801887a:	40d3      	lsrs	r3, r2
 801887c:	6004      	str	r4, [r0, #0]
 801887e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018882:	4288      	cmp	r0, r1
 8018884:	d3f4      	bcc.n	8018870 <L_shift+0xc>
 8018886:	bd70      	pop	{r4, r5, r6, pc}

08018888 <__match>:
 8018888:	b530      	push	{r4, r5, lr}
 801888a:	6803      	ldr	r3, [r0, #0]
 801888c:	3301      	adds	r3, #1
 801888e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018892:	b914      	cbnz	r4, 801889a <__match+0x12>
 8018894:	6003      	str	r3, [r0, #0]
 8018896:	2001      	movs	r0, #1
 8018898:	bd30      	pop	{r4, r5, pc}
 801889a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801889e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80188a2:	2d19      	cmp	r5, #25
 80188a4:	bf98      	it	ls
 80188a6:	3220      	addls	r2, #32
 80188a8:	42a2      	cmp	r2, r4
 80188aa:	d0f0      	beq.n	801888e <__match+0x6>
 80188ac:	2000      	movs	r0, #0
 80188ae:	e7f3      	b.n	8018898 <__match+0x10>

080188b0 <__hexnan>:
 80188b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188b4:	680b      	ldr	r3, [r1, #0]
 80188b6:	6801      	ldr	r1, [r0, #0]
 80188b8:	115e      	asrs	r6, r3, #5
 80188ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80188be:	f013 031f 	ands.w	r3, r3, #31
 80188c2:	b087      	sub	sp, #28
 80188c4:	bf18      	it	ne
 80188c6:	3604      	addne	r6, #4
 80188c8:	2500      	movs	r5, #0
 80188ca:	1f37      	subs	r7, r6, #4
 80188cc:	4682      	mov	sl, r0
 80188ce:	4690      	mov	r8, r2
 80188d0:	9301      	str	r3, [sp, #4]
 80188d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80188d6:	46b9      	mov	r9, r7
 80188d8:	463c      	mov	r4, r7
 80188da:	9502      	str	r5, [sp, #8]
 80188dc:	46ab      	mov	fp, r5
 80188de:	784a      	ldrb	r2, [r1, #1]
 80188e0:	1c4b      	adds	r3, r1, #1
 80188e2:	9303      	str	r3, [sp, #12]
 80188e4:	b342      	cbz	r2, 8018938 <__hexnan+0x88>
 80188e6:	4610      	mov	r0, r2
 80188e8:	9105      	str	r1, [sp, #20]
 80188ea:	9204      	str	r2, [sp, #16]
 80188ec:	f7ff fd94 	bl	8018418 <__hexdig_fun>
 80188f0:	2800      	cmp	r0, #0
 80188f2:	d151      	bne.n	8018998 <__hexnan+0xe8>
 80188f4:	9a04      	ldr	r2, [sp, #16]
 80188f6:	9905      	ldr	r1, [sp, #20]
 80188f8:	2a20      	cmp	r2, #32
 80188fa:	d818      	bhi.n	801892e <__hexnan+0x7e>
 80188fc:	9b02      	ldr	r3, [sp, #8]
 80188fe:	459b      	cmp	fp, r3
 8018900:	dd13      	ble.n	801892a <__hexnan+0x7a>
 8018902:	454c      	cmp	r4, r9
 8018904:	d206      	bcs.n	8018914 <__hexnan+0x64>
 8018906:	2d07      	cmp	r5, #7
 8018908:	dc04      	bgt.n	8018914 <__hexnan+0x64>
 801890a:	462a      	mov	r2, r5
 801890c:	4649      	mov	r1, r9
 801890e:	4620      	mov	r0, r4
 8018910:	f7ff ffa8 	bl	8018864 <L_shift>
 8018914:	4544      	cmp	r4, r8
 8018916:	d952      	bls.n	80189be <__hexnan+0x10e>
 8018918:	2300      	movs	r3, #0
 801891a:	f1a4 0904 	sub.w	r9, r4, #4
 801891e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018922:	f8cd b008 	str.w	fp, [sp, #8]
 8018926:	464c      	mov	r4, r9
 8018928:	461d      	mov	r5, r3
 801892a:	9903      	ldr	r1, [sp, #12]
 801892c:	e7d7      	b.n	80188de <__hexnan+0x2e>
 801892e:	2a29      	cmp	r2, #41	@ 0x29
 8018930:	d157      	bne.n	80189e2 <__hexnan+0x132>
 8018932:	3102      	adds	r1, #2
 8018934:	f8ca 1000 	str.w	r1, [sl]
 8018938:	f1bb 0f00 	cmp.w	fp, #0
 801893c:	d051      	beq.n	80189e2 <__hexnan+0x132>
 801893e:	454c      	cmp	r4, r9
 8018940:	d206      	bcs.n	8018950 <__hexnan+0xa0>
 8018942:	2d07      	cmp	r5, #7
 8018944:	dc04      	bgt.n	8018950 <__hexnan+0xa0>
 8018946:	462a      	mov	r2, r5
 8018948:	4649      	mov	r1, r9
 801894a:	4620      	mov	r0, r4
 801894c:	f7ff ff8a 	bl	8018864 <L_shift>
 8018950:	4544      	cmp	r4, r8
 8018952:	d936      	bls.n	80189c2 <__hexnan+0x112>
 8018954:	f1a8 0204 	sub.w	r2, r8, #4
 8018958:	4623      	mov	r3, r4
 801895a:	f853 1b04 	ldr.w	r1, [r3], #4
 801895e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018962:	429f      	cmp	r7, r3
 8018964:	d2f9      	bcs.n	801895a <__hexnan+0xaa>
 8018966:	1b3b      	subs	r3, r7, r4
 8018968:	f023 0303 	bic.w	r3, r3, #3
 801896c:	3304      	adds	r3, #4
 801896e:	3401      	adds	r4, #1
 8018970:	3e03      	subs	r6, #3
 8018972:	42b4      	cmp	r4, r6
 8018974:	bf88      	it	hi
 8018976:	2304      	movhi	r3, #4
 8018978:	4443      	add	r3, r8
 801897a:	2200      	movs	r2, #0
 801897c:	f843 2b04 	str.w	r2, [r3], #4
 8018980:	429f      	cmp	r7, r3
 8018982:	d2fb      	bcs.n	801897c <__hexnan+0xcc>
 8018984:	683b      	ldr	r3, [r7, #0]
 8018986:	b91b      	cbnz	r3, 8018990 <__hexnan+0xe0>
 8018988:	4547      	cmp	r7, r8
 801898a:	d128      	bne.n	80189de <__hexnan+0x12e>
 801898c:	2301      	movs	r3, #1
 801898e:	603b      	str	r3, [r7, #0]
 8018990:	2005      	movs	r0, #5
 8018992:	b007      	add	sp, #28
 8018994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018998:	3501      	adds	r5, #1
 801899a:	2d08      	cmp	r5, #8
 801899c:	f10b 0b01 	add.w	fp, fp, #1
 80189a0:	dd06      	ble.n	80189b0 <__hexnan+0x100>
 80189a2:	4544      	cmp	r4, r8
 80189a4:	d9c1      	bls.n	801892a <__hexnan+0x7a>
 80189a6:	2300      	movs	r3, #0
 80189a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80189ac:	2501      	movs	r5, #1
 80189ae:	3c04      	subs	r4, #4
 80189b0:	6822      	ldr	r2, [r4, #0]
 80189b2:	f000 000f 	and.w	r0, r0, #15
 80189b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80189ba:	6020      	str	r0, [r4, #0]
 80189bc:	e7b5      	b.n	801892a <__hexnan+0x7a>
 80189be:	2508      	movs	r5, #8
 80189c0:	e7b3      	b.n	801892a <__hexnan+0x7a>
 80189c2:	9b01      	ldr	r3, [sp, #4]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d0dd      	beq.n	8018984 <__hexnan+0xd4>
 80189c8:	f1c3 0320 	rsb	r3, r3, #32
 80189cc:	f04f 32ff 	mov.w	r2, #4294967295
 80189d0:	40da      	lsrs	r2, r3
 80189d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80189d6:	4013      	ands	r3, r2
 80189d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80189dc:	e7d2      	b.n	8018984 <__hexnan+0xd4>
 80189de:	3f04      	subs	r7, #4
 80189e0:	e7d0      	b.n	8018984 <__hexnan+0xd4>
 80189e2:	2004      	movs	r0, #4
 80189e4:	e7d5      	b.n	8018992 <__hexnan+0xe2>

080189e6 <__ascii_mbtowc>:
 80189e6:	b082      	sub	sp, #8
 80189e8:	b901      	cbnz	r1, 80189ec <__ascii_mbtowc+0x6>
 80189ea:	a901      	add	r1, sp, #4
 80189ec:	b142      	cbz	r2, 8018a00 <__ascii_mbtowc+0x1a>
 80189ee:	b14b      	cbz	r3, 8018a04 <__ascii_mbtowc+0x1e>
 80189f0:	7813      	ldrb	r3, [r2, #0]
 80189f2:	600b      	str	r3, [r1, #0]
 80189f4:	7812      	ldrb	r2, [r2, #0]
 80189f6:	1e10      	subs	r0, r2, #0
 80189f8:	bf18      	it	ne
 80189fa:	2001      	movne	r0, #1
 80189fc:	b002      	add	sp, #8
 80189fe:	4770      	bx	lr
 8018a00:	4610      	mov	r0, r2
 8018a02:	e7fb      	b.n	80189fc <__ascii_mbtowc+0x16>
 8018a04:	f06f 0001 	mvn.w	r0, #1
 8018a08:	e7f8      	b.n	80189fc <__ascii_mbtowc+0x16>

08018a0a <_realloc_r>:
 8018a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a0e:	4607      	mov	r7, r0
 8018a10:	4614      	mov	r4, r2
 8018a12:	460d      	mov	r5, r1
 8018a14:	b921      	cbnz	r1, 8018a20 <_realloc_r+0x16>
 8018a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a1a:	4611      	mov	r1, r2
 8018a1c:	f7fd bdf0 	b.w	8016600 <_malloc_r>
 8018a20:	b92a      	cbnz	r2, 8018a2e <_realloc_r+0x24>
 8018a22:	f7fd fd79 	bl	8016518 <_free_r>
 8018a26:	4625      	mov	r5, r4
 8018a28:	4628      	mov	r0, r5
 8018a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a2e:	f000 f840 	bl	8018ab2 <_malloc_usable_size_r>
 8018a32:	4284      	cmp	r4, r0
 8018a34:	4606      	mov	r6, r0
 8018a36:	d802      	bhi.n	8018a3e <_realloc_r+0x34>
 8018a38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018a3c:	d8f4      	bhi.n	8018a28 <_realloc_r+0x1e>
 8018a3e:	4621      	mov	r1, r4
 8018a40:	4638      	mov	r0, r7
 8018a42:	f7fd fddd 	bl	8016600 <_malloc_r>
 8018a46:	4680      	mov	r8, r0
 8018a48:	b908      	cbnz	r0, 8018a4e <_realloc_r+0x44>
 8018a4a:	4645      	mov	r5, r8
 8018a4c:	e7ec      	b.n	8018a28 <_realloc_r+0x1e>
 8018a4e:	42b4      	cmp	r4, r6
 8018a50:	4622      	mov	r2, r4
 8018a52:	4629      	mov	r1, r5
 8018a54:	bf28      	it	cs
 8018a56:	4632      	movcs	r2, r6
 8018a58:	f7fc feef 	bl	801583a <memcpy>
 8018a5c:	4629      	mov	r1, r5
 8018a5e:	4638      	mov	r0, r7
 8018a60:	f7fd fd5a 	bl	8016518 <_free_r>
 8018a64:	e7f1      	b.n	8018a4a <_realloc_r+0x40>

08018a66 <__ascii_wctomb>:
 8018a66:	4603      	mov	r3, r0
 8018a68:	4608      	mov	r0, r1
 8018a6a:	b141      	cbz	r1, 8018a7e <__ascii_wctomb+0x18>
 8018a6c:	2aff      	cmp	r2, #255	@ 0xff
 8018a6e:	d904      	bls.n	8018a7a <__ascii_wctomb+0x14>
 8018a70:	228a      	movs	r2, #138	@ 0x8a
 8018a72:	601a      	str	r2, [r3, #0]
 8018a74:	f04f 30ff 	mov.w	r0, #4294967295
 8018a78:	4770      	bx	lr
 8018a7a:	700a      	strb	r2, [r1, #0]
 8018a7c:	2001      	movs	r0, #1
 8018a7e:	4770      	bx	lr

08018a80 <fiprintf>:
 8018a80:	b40e      	push	{r1, r2, r3}
 8018a82:	b503      	push	{r0, r1, lr}
 8018a84:	4601      	mov	r1, r0
 8018a86:	ab03      	add	r3, sp, #12
 8018a88:	4805      	ldr	r0, [pc, #20]	@ (8018aa0 <fiprintf+0x20>)
 8018a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a8e:	6800      	ldr	r0, [r0, #0]
 8018a90:	9301      	str	r3, [sp, #4]
 8018a92:	f000 f83f 	bl	8018b14 <_vfiprintf_r>
 8018a96:	b002      	add	sp, #8
 8018a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a9c:	b003      	add	sp, #12
 8018a9e:	4770      	bx	lr
 8018aa0:	20000058 	.word	0x20000058

08018aa4 <abort>:
 8018aa4:	b508      	push	{r3, lr}
 8018aa6:	2006      	movs	r0, #6
 8018aa8:	f000 f974 	bl	8018d94 <raise>
 8018aac:	2001      	movs	r0, #1
 8018aae:	f7eb fbc9 	bl	8004244 <_exit>

08018ab2 <_malloc_usable_size_r>:
 8018ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ab6:	1f18      	subs	r0, r3, #4
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	bfbc      	itt	lt
 8018abc:	580b      	ldrlt	r3, [r1, r0]
 8018abe:	18c0      	addlt	r0, r0, r3
 8018ac0:	4770      	bx	lr

08018ac2 <__sfputc_r>:
 8018ac2:	6893      	ldr	r3, [r2, #8]
 8018ac4:	3b01      	subs	r3, #1
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	b410      	push	{r4}
 8018aca:	6093      	str	r3, [r2, #8]
 8018acc:	da08      	bge.n	8018ae0 <__sfputc_r+0x1e>
 8018ace:	6994      	ldr	r4, [r2, #24]
 8018ad0:	42a3      	cmp	r3, r4
 8018ad2:	db01      	blt.n	8018ad8 <__sfputc_r+0x16>
 8018ad4:	290a      	cmp	r1, #10
 8018ad6:	d103      	bne.n	8018ae0 <__sfputc_r+0x1e>
 8018ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018adc:	f7fc bd3b 	b.w	8015556 <__swbuf_r>
 8018ae0:	6813      	ldr	r3, [r2, #0]
 8018ae2:	1c58      	adds	r0, r3, #1
 8018ae4:	6010      	str	r0, [r2, #0]
 8018ae6:	7019      	strb	r1, [r3, #0]
 8018ae8:	4608      	mov	r0, r1
 8018aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018aee:	4770      	bx	lr

08018af0 <__sfputs_r>:
 8018af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018af2:	4606      	mov	r6, r0
 8018af4:	460f      	mov	r7, r1
 8018af6:	4614      	mov	r4, r2
 8018af8:	18d5      	adds	r5, r2, r3
 8018afa:	42ac      	cmp	r4, r5
 8018afc:	d101      	bne.n	8018b02 <__sfputs_r+0x12>
 8018afe:	2000      	movs	r0, #0
 8018b00:	e007      	b.n	8018b12 <__sfputs_r+0x22>
 8018b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b06:	463a      	mov	r2, r7
 8018b08:	4630      	mov	r0, r6
 8018b0a:	f7ff ffda 	bl	8018ac2 <__sfputc_r>
 8018b0e:	1c43      	adds	r3, r0, #1
 8018b10:	d1f3      	bne.n	8018afa <__sfputs_r+0xa>
 8018b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018b14 <_vfiprintf_r>:
 8018b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b18:	460d      	mov	r5, r1
 8018b1a:	b09d      	sub	sp, #116	@ 0x74
 8018b1c:	4614      	mov	r4, r2
 8018b1e:	4698      	mov	r8, r3
 8018b20:	4606      	mov	r6, r0
 8018b22:	b118      	cbz	r0, 8018b2c <_vfiprintf_r+0x18>
 8018b24:	6a03      	ldr	r3, [r0, #32]
 8018b26:	b90b      	cbnz	r3, 8018b2c <_vfiprintf_r+0x18>
 8018b28:	f7fc fbe6 	bl	80152f8 <__sinit>
 8018b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b2e:	07d9      	lsls	r1, r3, #31
 8018b30:	d405      	bmi.n	8018b3e <_vfiprintf_r+0x2a>
 8018b32:	89ab      	ldrh	r3, [r5, #12]
 8018b34:	059a      	lsls	r2, r3, #22
 8018b36:	d402      	bmi.n	8018b3e <_vfiprintf_r+0x2a>
 8018b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b3a:	f7fc fe7c 	bl	8015836 <__retarget_lock_acquire_recursive>
 8018b3e:	89ab      	ldrh	r3, [r5, #12]
 8018b40:	071b      	lsls	r3, r3, #28
 8018b42:	d501      	bpl.n	8018b48 <_vfiprintf_r+0x34>
 8018b44:	692b      	ldr	r3, [r5, #16]
 8018b46:	b99b      	cbnz	r3, 8018b70 <_vfiprintf_r+0x5c>
 8018b48:	4629      	mov	r1, r5
 8018b4a:	4630      	mov	r0, r6
 8018b4c:	f7fc fd42 	bl	80155d4 <__swsetup_r>
 8018b50:	b170      	cbz	r0, 8018b70 <_vfiprintf_r+0x5c>
 8018b52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b54:	07dc      	lsls	r4, r3, #31
 8018b56:	d504      	bpl.n	8018b62 <_vfiprintf_r+0x4e>
 8018b58:	f04f 30ff 	mov.w	r0, #4294967295
 8018b5c:	b01d      	add	sp, #116	@ 0x74
 8018b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b62:	89ab      	ldrh	r3, [r5, #12]
 8018b64:	0598      	lsls	r0, r3, #22
 8018b66:	d4f7      	bmi.n	8018b58 <_vfiprintf_r+0x44>
 8018b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b6a:	f7fc fe65 	bl	8015838 <__retarget_lock_release_recursive>
 8018b6e:	e7f3      	b.n	8018b58 <_vfiprintf_r+0x44>
 8018b70:	2300      	movs	r3, #0
 8018b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b74:	2320      	movs	r3, #32
 8018b76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b7e:	2330      	movs	r3, #48	@ 0x30
 8018b80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018d30 <_vfiprintf_r+0x21c>
 8018b84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018b88:	f04f 0901 	mov.w	r9, #1
 8018b8c:	4623      	mov	r3, r4
 8018b8e:	469a      	mov	sl, r3
 8018b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b94:	b10a      	cbz	r2, 8018b9a <_vfiprintf_r+0x86>
 8018b96:	2a25      	cmp	r2, #37	@ 0x25
 8018b98:	d1f9      	bne.n	8018b8e <_vfiprintf_r+0x7a>
 8018b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8018b9e:	d00b      	beq.n	8018bb8 <_vfiprintf_r+0xa4>
 8018ba0:	465b      	mov	r3, fp
 8018ba2:	4622      	mov	r2, r4
 8018ba4:	4629      	mov	r1, r5
 8018ba6:	4630      	mov	r0, r6
 8018ba8:	f7ff ffa2 	bl	8018af0 <__sfputs_r>
 8018bac:	3001      	adds	r0, #1
 8018bae:	f000 80a7 	beq.w	8018d00 <_vfiprintf_r+0x1ec>
 8018bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018bb4:	445a      	add	r2, fp
 8018bb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8018bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	f000 809f 	beq.w	8018d00 <_vfiprintf_r+0x1ec>
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8018bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bcc:	f10a 0a01 	add.w	sl, sl, #1
 8018bd0:	9304      	str	r3, [sp, #16]
 8018bd2:	9307      	str	r3, [sp, #28]
 8018bd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018bd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8018bda:	4654      	mov	r4, sl
 8018bdc:	2205      	movs	r2, #5
 8018bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018be2:	4853      	ldr	r0, [pc, #332]	@ (8018d30 <_vfiprintf_r+0x21c>)
 8018be4:	f7e7 fb1c 	bl	8000220 <memchr>
 8018be8:	9a04      	ldr	r2, [sp, #16]
 8018bea:	b9d8      	cbnz	r0, 8018c24 <_vfiprintf_r+0x110>
 8018bec:	06d1      	lsls	r1, r2, #27
 8018bee:	bf44      	itt	mi
 8018bf0:	2320      	movmi	r3, #32
 8018bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018bf6:	0713      	lsls	r3, r2, #28
 8018bf8:	bf44      	itt	mi
 8018bfa:	232b      	movmi	r3, #43	@ 0x2b
 8018bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c00:	f89a 3000 	ldrb.w	r3, [sl]
 8018c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c06:	d015      	beq.n	8018c34 <_vfiprintf_r+0x120>
 8018c08:	9a07      	ldr	r2, [sp, #28]
 8018c0a:	4654      	mov	r4, sl
 8018c0c:	2000      	movs	r0, #0
 8018c0e:	f04f 0c0a 	mov.w	ip, #10
 8018c12:	4621      	mov	r1, r4
 8018c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c18:	3b30      	subs	r3, #48	@ 0x30
 8018c1a:	2b09      	cmp	r3, #9
 8018c1c:	d94b      	bls.n	8018cb6 <_vfiprintf_r+0x1a2>
 8018c1e:	b1b0      	cbz	r0, 8018c4e <_vfiprintf_r+0x13a>
 8018c20:	9207      	str	r2, [sp, #28]
 8018c22:	e014      	b.n	8018c4e <_vfiprintf_r+0x13a>
 8018c24:	eba0 0308 	sub.w	r3, r0, r8
 8018c28:	fa09 f303 	lsl.w	r3, r9, r3
 8018c2c:	4313      	orrs	r3, r2
 8018c2e:	9304      	str	r3, [sp, #16]
 8018c30:	46a2      	mov	sl, r4
 8018c32:	e7d2      	b.n	8018bda <_vfiprintf_r+0xc6>
 8018c34:	9b03      	ldr	r3, [sp, #12]
 8018c36:	1d19      	adds	r1, r3, #4
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	9103      	str	r1, [sp, #12]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	bfbb      	ittet	lt
 8018c40:	425b      	neglt	r3, r3
 8018c42:	f042 0202 	orrlt.w	r2, r2, #2
 8018c46:	9307      	strge	r3, [sp, #28]
 8018c48:	9307      	strlt	r3, [sp, #28]
 8018c4a:	bfb8      	it	lt
 8018c4c:	9204      	strlt	r2, [sp, #16]
 8018c4e:	7823      	ldrb	r3, [r4, #0]
 8018c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8018c52:	d10a      	bne.n	8018c6a <_vfiprintf_r+0x156>
 8018c54:	7863      	ldrb	r3, [r4, #1]
 8018c56:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c58:	d132      	bne.n	8018cc0 <_vfiprintf_r+0x1ac>
 8018c5a:	9b03      	ldr	r3, [sp, #12]
 8018c5c:	1d1a      	adds	r2, r3, #4
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	9203      	str	r2, [sp, #12]
 8018c62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018c66:	3402      	adds	r4, #2
 8018c68:	9305      	str	r3, [sp, #20]
 8018c6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018d40 <_vfiprintf_r+0x22c>
 8018c6e:	7821      	ldrb	r1, [r4, #0]
 8018c70:	2203      	movs	r2, #3
 8018c72:	4650      	mov	r0, sl
 8018c74:	f7e7 fad4 	bl	8000220 <memchr>
 8018c78:	b138      	cbz	r0, 8018c8a <_vfiprintf_r+0x176>
 8018c7a:	9b04      	ldr	r3, [sp, #16]
 8018c7c:	eba0 000a 	sub.w	r0, r0, sl
 8018c80:	2240      	movs	r2, #64	@ 0x40
 8018c82:	4082      	lsls	r2, r0
 8018c84:	4313      	orrs	r3, r2
 8018c86:	3401      	adds	r4, #1
 8018c88:	9304      	str	r3, [sp, #16]
 8018c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c8e:	4829      	ldr	r0, [pc, #164]	@ (8018d34 <_vfiprintf_r+0x220>)
 8018c90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018c94:	2206      	movs	r2, #6
 8018c96:	f7e7 fac3 	bl	8000220 <memchr>
 8018c9a:	2800      	cmp	r0, #0
 8018c9c:	d03f      	beq.n	8018d1e <_vfiprintf_r+0x20a>
 8018c9e:	4b26      	ldr	r3, [pc, #152]	@ (8018d38 <_vfiprintf_r+0x224>)
 8018ca0:	bb1b      	cbnz	r3, 8018cea <_vfiprintf_r+0x1d6>
 8018ca2:	9b03      	ldr	r3, [sp, #12]
 8018ca4:	3307      	adds	r3, #7
 8018ca6:	f023 0307 	bic.w	r3, r3, #7
 8018caa:	3308      	adds	r3, #8
 8018cac:	9303      	str	r3, [sp, #12]
 8018cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cb0:	443b      	add	r3, r7
 8018cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018cb4:	e76a      	b.n	8018b8c <_vfiprintf_r+0x78>
 8018cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018cba:	460c      	mov	r4, r1
 8018cbc:	2001      	movs	r0, #1
 8018cbe:	e7a8      	b.n	8018c12 <_vfiprintf_r+0xfe>
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	3401      	adds	r4, #1
 8018cc4:	9305      	str	r3, [sp, #20]
 8018cc6:	4619      	mov	r1, r3
 8018cc8:	f04f 0c0a 	mov.w	ip, #10
 8018ccc:	4620      	mov	r0, r4
 8018cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cd2:	3a30      	subs	r2, #48	@ 0x30
 8018cd4:	2a09      	cmp	r2, #9
 8018cd6:	d903      	bls.n	8018ce0 <_vfiprintf_r+0x1cc>
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d0c6      	beq.n	8018c6a <_vfiprintf_r+0x156>
 8018cdc:	9105      	str	r1, [sp, #20]
 8018cde:	e7c4      	b.n	8018c6a <_vfiprintf_r+0x156>
 8018ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ce4:	4604      	mov	r4, r0
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	e7f0      	b.n	8018ccc <_vfiprintf_r+0x1b8>
 8018cea:	ab03      	add	r3, sp, #12
 8018cec:	9300      	str	r3, [sp, #0]
 8018cee:	462a      	mov	r2, r5
 8018cf0:	4b12      	ldr	r3, [pc, #72]	@ (8018d3c <_vfiprintf_r+0x228>)
 8018cf2:	a904      	add	r1, sp, #16
 8018cf4:	4630      	mov	r0, r6
 8018cf6:	f7fb fcaf 	bl	8014658 <_printf_float>
 8018cfa:	4607      	mov	r7, r0
 8018cfc:	1c78      	adds	r0, r7, #1
 8018cfe:	d1d6      	bne.n	8018cae <_vfiprintf_r+0x19a>
 8018d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d02:	07d9      	lsls	r1, r3, #31
 8018d04:	d405      	bmi.n	8018d12 <_vfiprintf_r+0x1fe>
 8018d06:	89ab      	ldrh	r3, [r5, #12]
 8018d08:	059a      	lsls	r2, r3, #22
 8018d0a:	d402      	bmi.n	8018d12 <_vfiprintf_r+0x1fe>
 8018d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d0e:	f7fc fd93 	bl	8015838 <__retarget_lock_release_recursive>
 8018d12:	89ab      	ldrh	r3, [r5, #12]
 8018d14:	065b      	lsls	r3, r3, #25
 8018d16:	f53f af1f 	bmi.w	8018b58 <_vfiprintf_r+0x44>
 8018d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d1c:	e71e      	b.n	8018b5c <_vfiprintf_r+0x48>
 8018d1e:	ab03      	add	r3, sp, #12
 8018d20:	9300      	str	r3, [sp, #0]
 8018d22:	462a      	mov	r2, r5
 8018d24:	4b05      	ldr	r3, [pc, #20]	@ (8018d3c <_vfiprintf_r+0x228>)
 8018d26:	a904      	add	r1, sp, #16
 8018d28:	4630      	mov	r0, r6
 8018d2a:	f7fb ff2d 	bl	8014b88 <_printf_i>
 8018d2e:	e7e4      	b.n	8018cfa <_vfiprintf_r+0x1e6>
 8018d30:	0801c9ad 	.word	0x0801c9ad
 8018d34:	0801c9b7 	.word	0x0801c9b7
 8018d38:	08014659 	.word	0x08014659
 8018d3c:	08018af1 	.word	0x08018af1
 8018d40:	0801c9b3 	.word	0x0801c9b3

08018d44 <_raise_r>:
 8018d44:	291f      	cmp	r1, #31
 8018d46:	b538      	push	{r3, r4, r5, lr}
 8018d48:	4605      	mov	r5, r0
 8018d4a:	460c      	mov	r4, r1
 8018d4c:	d904      	bls.n	8018d58 <_raise_r+0x14>
 8018d4e:	2316      	movs	r3, #22
 8018d50:	6003      	str	r3, [r0, #0]
 8018d52:	f04f 30ff 	mov.w	r0, #4294967295
 8018d56:	bd38      	pop	{r3, r4, r5, pc}
 8018d58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018d5a:	b112      	cbz	r2, 8018d62 <_raise_r+0x1e>
 8018d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018d60:	b94b      	cbnz	r3, 8018d76 <_raise_r+0x32>
 8018d62:	4628      	mov	r0, r5
 8018d64:	f000 f830 	bl	8018dc8 <_getpid_r>
 8018d68:	4622      	mov	r2, r4
 8018d6a:	4601      	mov	r1, r0
 8018d6c:	4628      	mov	r0, r5
 8018d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d72:	f000 b817 	b.w	8018da4 <_kill_r>
 8018d76:	2b01      	cmp	r3, #1
 8018d78:	d00a      	beq.n	8018d90 <_raise_r+0x4c>
 8018d7a:	1c59      	adds	r1, r3, #1
 8018d7c:	d103      	bne.n	8018d86 <_raise_r+0x42>
 8018d7e:	2316      	movs	r3, #22
 8018d80:	6003      	str	r3, [r0, #0]
 8018d82:	2001      	movs	r0, #1
 8018d84:	e7e7      	b.n	8018d56 <_raise_r+0x12>
 8018d86:	2100      	movs	r1, #0
 8018d88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018d8c:	4620      	mov	r0, r4
 8018d8e:	4798      	blx	r3
 8018d90:	2000      	movs	r0, #0
 8018d92:	e7e0      	b.n	8018d56 <_raise_r+0x12>

08018d94 <raise>:
 8018d94:	4b02      	ldr	r3, [pc, #8]	@ (8018da0 <raise+0xc>)
 8018d96:	4601      	mov	r1, r0
 8018d98:	6818      	ldr	r0, [r3, #0]
 8018d9a:	f7ff bfd3 	b.w	8018d44 <_raise_r>
 8018d9e:	bf00      	nop
 8018da0:	20000058 	.word	0x20000058

08018da4 <_kill_r>:
 8018da4:	b538      	push	{r3, r4, r5, lr}
 8018da6:	4d07      	ldr	r5, [pc, #28]	@ (8018dc4 <_kill_r+0x20>)
 8018da8:	2300      	movs	r3, #0
 8018daa:	4604      	mov	r4, r0
 8018dac:	4608      	mov	r0, r1
 8018dae:	4611      	mov	r1, r2
 8018db0:	602b      	str	r3, [r5, #0]
 8018db2:	f7eb fa37 	bl	8004224 <_kill>
 8018db6:	1c43      	adds	r3, r0, #1
 8018db8:	d102      	bne.n	8018dc0 <_kill_r+0x1c>
 8018dba:	682b      	ldr	r3, [r5, #0]
 8018dbc:	b103      	cbz	r3, 8018dc0 <_kill_r+0x1c>
 8018dbe:	6023      	str	r3, [r4, #0]
 8018dc0:	bd38      	pop	{r3, r4, r5, pc}
 8018dc2:	bf00      	nop
 8018dc4:	20004964 	.word	0x20004964

08018dc8 <_getpid_r>:
 8018dc8:	f7eb ba24 	b.w	8004214 <_getpid>

08018dcc <atan2f>:
 8018dcc:	f000 b9dc 	b.w	8019188 <__ieee754_atan2f>

08018dd0 <logf>:
 8018dd0:	b508      	push	{r3, lr}
 8018dd2:	ed2d 8b02 	vpush	{d8}
 8018dd6:	eeb0 8a40 	vmov.f32	s16, s0
 8018dda:	f000 fa75 	bl	80192c8 <__ieee754_logf>
 8018dde:	eeb4 8a48 	vcmp.f32	s16, s16
 8018de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de6:	d60f      	bvs.n	8018e08 <logf+0x38>
 8018de8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018df0:	dc0a      	bgt.n	8018e08 <logf+0x38>
 8018df2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dfa:	d108      	bne.n	8018e0e <logf+0x3e>
 8018dfc:	f7fc fcf0 	bl	80157e0 <__errno>
 8018e00:	2322      	movs	r3, #34	@ 0x22
 8018e02:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018e24 <logf+0x54>
 8018e06:	6003      	str	r3, [r0, #0]
 8018e08:	ecbd 8b02 	vpop	{d8}
 8018e0c:	bd08      	pop	{r3, pc}
 8018e0e:	f7fc fce7 	bl	80157e0 <__errno>
 8018e12:	ecbd 8b02 	vpop	{d8}
 8018e16:	2321      	movs	r3, #33	@ 0x21
 8018e18:	6003      	str	r3, [r0, #0]
 8018e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018e1e:	4802      	ldr	r0, [pc, #8]	@ (8018e28 <logf+0x58>)
 8018e20:	f7fc bd1a 	b.w	8015858 <nanf>
 8018e24:	ff800000 	.word	0xff800000
 8018e28:	0801ca01 	.word	0x0801ca01

08018e2c <powf>:
 8018e2c:	b508      	push	{r3, lr}
 8018e2e:	ed2d 8b04 	vpush	{d8-d9}
 8018e32:	eeb0 8a60 	vmov.f32	s16, s1
 8018e36:	eeb0 9a40 	vmov.f32	s18, s0
 8018e3a:	f000 fb37 	bl	80194ac <__ieee754_powf>
 8018e3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e46:	eef0 8a40 	vmov.f32	s17, s0
 8018e4a:	d63e      	bvs.n	8018eca <powf+0x9e>
 8018e4c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e54:	d112      	bne.n	8018e7c <powf+0x50>
 8018e56:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e5e:	d039      	beq.n	8018ed4 <powf+0xa8>
 8018e60:	eeb0 0a48 	vmov.f32	s0, s16
 8018e64:	f000 f8e2 	bl	801902c <finitef>
 8018e68:	b378      	cbz	r0, 8018eca <powf+0x9e>
 8018e6a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e72:	d52a      	bpl.n	8018eca <powf+0x9e>
 8018e74:	f7fc fcb4 	bl	80157e0 <__errno>
 8018e78:	2322      	movs	r3, #34	@ 0x22
 8018e7a:	e014      	b.n	8018ea6 <powf+0x7a>
 8018e7c:	f000 f8d6 	bl	801902c <finitef>
 8018e80:	b998      	cbnz	r0, 8018eaa <powf+0x7e>
 8018e82:	eeb0 0a49 	vmov.f32	s0, s18
 8018e86:	f000 f8d1 	bl	801902c <finitef>
 8018e8a:	b170      	cbz	r0, 8018eaa <powf+0x7e>
 8018e8c:	eeb0 0a48 	vmov.f32	s0, s16
 8018e90:	f000 f8cc 	bl	801902c <finitef>
 8018e94:	b148      	cbz	r0, 8018eaa <powf+0x7e>
 8018e96:	eef4 8a68 	vcmp.f32	s17, s17
 8018e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e9e:	d7e9      	bvc.n	8018e74 <powf+0x48>
 8018ea0:	f7fc fc9e 	bl	80157e0 <__errno>
 8018ea4:	2321      	movs	r3, #33	@ 0x21
 8018ea6:	6003      	str	r3, [r0, #0]
 8018ea8:	e00f      	b.n	8018eca <powf+0x9e>
 8018eaa:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eb2:	d10a      	bne.n	8018eca <powf+0x9e>
 8018eb4:	eeb0 0a49 	vmov.f32	s0, s18
 8018eb8:	f000 f8b8 	bl	801902c <finitef>
 8018ebc:	b128      	cbz	r0, 8018eca <powf+0x9e>
 8018ebe:	eeb0 0a48 	vmov.f32	s0, s16
 8018ec2:	f000 f8b3 	bl	801902c <finitef>
 8018ec6:	2800      	cmp	r0, #0
 8018ec8:	d1d4      	bne.n	8018e74 <powf+0x48>
 8018eca:	eeb0 0a68 	vmov.f32	s0, s17
 8018ece:	ecbd 8b04 	vpop	{d8-d9}
 8018ed2:	bd08      	pop	{r3, pc}
 8018ed4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8018ed8:	e7f7      	b.n	8018eca <powf+0x9e>
	...

08018edc <sqrtf>:
 8018edc:	b508      	push	{r3, lr}
 8018ede:	ed2d 8b02 	vpush	{d8}
 8018ee2:	eeb0 8a40 	vmov.f32	s16, s0
 8018ee6:	f000 f8ab 	bl	8019040 <__ieee754_sqrtf>
 8018eea:	eeb4 8a48 	vcmp.f32	s16, s16
 8018eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ef2:	d60c      	bvs.n	8018f0e <sqrtf+0x32>
 8018ef4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8018f14 <sqrtf+0x38>
 8018ef8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f00:	d505      	bpl.n	8018f0e <sqrtf+0x32>
 8018f02:	f7fc fc6d 	bl	80157e0 <__errno>
 8018f06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018f0a:	2321      	movs	r3, #33	@ 0x21
 8018f0c:	6003      	str	r3, [r0, #0]
 8018f0e:	ecbd 8b02 	vpop	{d8}
 8018f12:	bd08      	pop	{r3, pc}
 8018f14:	00000000 	.word	0x00000000

08018f18 <cosf>:
 8018f18:	ee10 3a10 	vmov	r3, s0
 8018f1c:	b507      	push	{r0, r1, r2, lr}
 8018f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8018f98 <cosf+0x80>)
 8018f20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018f24:	4293      	cmp	r3, r2
 8018f26:	d806      	bhi.n	8018f36 <cosf+0x1e>
 8018f28:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8018f9c <cosf+0x84>
 8018f2c:	b003      	add	sp, #12
 8018f2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f32:	f000 b889 	b.w	8019048 <__kernel_cosf>
 8018f36:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018f3a:	d304      	bcc.n	8018f46 <cosf+0x2e>
 8018f3c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018f40:	b003      	add	sp, #12
 8018f42:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f46:	4668      	mov	r0, sp
 8018f48:	f000 fd7e 	bl	8019a48 <__ieee754_rem_pio2f>
 8018f4c:	f000 0003 	and.w	r0, r0, #3
 8018f50:	2801      	cmp	r0, #1
 8018f52:	d009      	beq.n	8018f68 <cosf+0x50>
 8018f54:	2802      	cmp	r0, #2
 8018f56:	d010      	beq.n	8018f7a <cosf+0x62>
 8018f58:	b9b0      	cbnz	r0, 8018f88 <cosf+0x70>
 8018f5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8018f5e:	ed9d 0a00 	vldr	s0, [sp]
 8018f62:	f000 f871 	bl	8019048 <__kernel_cosf>
 8018f66:	e7eb      	b.n	8018f40 <cosf+0x28>
 8018f68:	eddd 0a01 	vldr	s1, [sp, #4]
 8018f6c:	ed9d 0a00 	vldr	s0, [sp]
 8018f70:	f000 f8c2 	bl	80190f8 <__kernel_sinf>
 8018f74:	eeb1 0a40 	vneg.f32	s0, s0
 8018f78:	e7e2      	b.n	8018f40 <cosf+0x28>
 8018f7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8018f7e:	ed9d 0a00 	vldr	s0, [sp]
 8018f82:	f000 f861 	bl	8019048 <__kernel_cosf>
 8018f86:	e7f5      	b.n	8018f74 <cosf+0x5c>
 8018f88:	eddd 0a01 	vldr	s1, [sp, #4]
 8018f8c:	ed9d 0a00 	vldr	s0, [sp]
 8018f90:	2001      	movs	r0, #1
 8018f92:	f000 f8b1 	bl	80190f8 <__kernel_sinf>
 8018f96:	e7d3      	b.n	8018f40 <cosf+0x28>
 8018f98:	3f490fd8 	.word	0x3f490fd8
 8018f9c:	00000000 	.word	0x00000000

08018fa0 <sinf>:
 8018fa0:	ee10 3a10 	vmov	r3, s0
 8018fa4:	b507      	push	{r0, r1, r2, lr}
 8018fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8019024 <sinf+0x84>)
 8018fa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018fac:	4293      	cmp	r3, r2
 8018fae:	d807      	bhi.n	8018fc0 <sinf+0x20>
 8018fb0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8019028 <sinf+0x88>
 8018fb4:	2000      	movs	r0, #0
 8018fb6:	b003      	add	sp, #12
 8018fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fbc:	f000 b89c 	b.w	80190f8 <__kernel_sinf>
 8018fc0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018fc4:	d304      	bcc.n	8018fd0 <sinf+0x30>
 8018fc6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018fca:	b003      	add	sp, #12
 8018fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018fd0:	4668      	mov	r0, sp
 8018fd2:	f000 fd39 	bl	8019a48 <__ieee754_rem_pio2f>
 8018fd6:	f000 0003 	and.w	r0, r0, #3
 8018fda:	2801      	cmp	r0, #1
 8018fdc:	d00a      	beq.n	8018ff4 <sinf+0x54>
 8018fde:	2802      	cmp	r0, #2
 8018fe0:	d00f      	beq.n	8019002 <sinf+0x62>
 8018fe2:	b9c0      	cbnz	r0, 8019016 <sinf+0x76>
 8018fe4:	eddd 0a01 	vldr	s1, [sp, #4]
 8018fe8:	ed9d 0a00 	vldr	s0, [sp]
 8018fec:	2001      	movs	r0, #1
 8018fee:	f000 f883 	bl	80190f8 <__kernel_sinf>
 8018ff2:	e7ea      	b.n	8018fca <sinf+0x2a>
 8018ff4:	eddd 0a01 	vldr	s1, [sp, #4]
 8018ff8:	ed9d 0a00 	vldr	s0, [sp]
 8018ffc:	f000 f824 	bl	8019048 <__kernel_cosf>
 8019000:	e7e3      	b.n	8018fca <sinf+0x2a>
 8019002:	eddd 0a01 	vldr	s1, [sp, #4]
 8019006:	ed9d 0a00 	vldr	s0, [sp]
 801900a:	2001      	movs	r0, #1
 801900c:	f000 f874 	bl	80190f8 <__kernel_sinf>
 8019010:	eeb1 0a40 	vneg.f32	s0, s0
 8019014:	e7d9      	b.n	8018fca <sinf+0x2a>
 8019016:	eddd 0a01 	vldr	s1, [sp, #4]
 801901a:	ed9d 0a00 	vldr	s0, [sp]
 801901e:	f000 f813 	bl	8019048 <__kernel_cosf>
 8019022:	e7f5      	b.n	8019010 <sinf+0x70>
 8019024:	3f490fd8 	.word	0x3f490fd8
 8019028:	00000000 	.word	0x00000000

0801902c <finitef>:
 801902c:	ee10 3a10 	vmov	r3, s0
 8019030:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8019034:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8019038:	bfac      	ite	ge
 801903a:	2000      	movge	r0, #0
 801903c:	2001      	movlt	r0, #1
 801903e:	4770      	bx	lr

08019040 <__ieee754_sqrtf>:
 8019040:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019044:	4770      	bx	lr
	...

08019048 <__kernel_cosf>:
 8019048:	ee10 3a10 	vmov	r3, s0
 801904c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019050:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019054:	eef0 6a40 	vmov.f32	s13, s0
 8019058:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801905c:	d204      	bcs.n	8019068 <__kernel_cosf+0x20>
 801905e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8019062:	ee17 2a90 	vmov	r2, s15
 8019066:	b342      	cbz	r2, 80190ba <__kernel_cosf+0x72>
 8019068:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801906c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80190d8 <__kernel_cosf+0x90>
 8019070:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80190dc <__kernel_cosf+0x94>
 8019074:	4a1a      	ldr	r2, [pc, #104]	@ (80190e0 <__kernel_cosf+0x98>)
 8019076:	eea7 6a27 	vfma.f32	s12, s14, s15
 801907a:	4293      	cmp	r3, r2
 801907c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80190e4 <__kernel_cosf+0x9c>
 8019080:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019084:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80190e8 <__kernel_cosf+0xa0>
 8019088:	eea7 6a87 	vfma.f32	s12, s15, s14
 801908c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80190ec <__kernel_cosf+0xa4>
 8019090:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019094:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80190f0 <__kernel_cosf+0xa8>
 8019098:	eea7 6a87 	vfma.f32	s12, s15, s14
 801909c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80190a0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80190a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80190a8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80190ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80190b0:	d804      	bhi.n	80190bc <__kernel_cosf+0x74>
 80190b2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80190b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80190ba:	4770      	bx	lr
 80190bc:	4a0d      	ldr	r2, [pc, #52]	@ (80190f4 <__kernel_cosf+0xac>)
 80190be:	4293      	cmp	r3, r2
 80190c0:	bf9a      	itte	ls
 80190c2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80190c6:	ee07 3a10 	vmovls	s14, r3
 80190ca:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80190ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 80190d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80190d6:	e7ec      	b.n	80190b2 <__kernel_cosf+0x6a>
 80190d8:	ad47d74e 	.word	0xad47d74e
 80190dc:	310f74f6 	.word	0x310f74f6
 80190e0:	3e999999 	.word	0x3e999999
 80190e4:	b493f27c 	.word	0xb493f27c
 80190e8:	37d00d01 	.word	0x37d00d01
 80190ec:	bab60b61 	.word	0xbab60b61
 80190f0:	3d2aaaab 	.word	0x3d2aaaab
 80190f4:	3f480000 	.word	0x3f480000

080190f8 <__kernel_sinf>:
 80190f8:	ee10 3a10 	vmov	r3, s0
 80190fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019100:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019104:	d204      	bcs.n	8019110 <__kernel_sinf+0x18>
 8019106:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801910a:	ee17 3a90 	vmov	r3, s15
 801910e:	b35b      	cbz	r3, 8019168 <__kernel_sinf+0x70>
 8019110:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019114:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801916c <__kernel_sinf+0x74>
 8019118:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8019170 <__kernel_sinf+0x78>
 801911c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019120:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8019174 <__kernel_sinf+0x7c>
 8019124:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019128:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8019178 <__kernel_sinf+0x80>
 801912c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019130:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801917c <__kernel_sinf+0x84>
 8019134:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019138:	eee6 7a07 	vfma.f32	s15, s12, s14
 801913c:	b930      	cbnz	r0, 801914c <__kernel_sinf+0x54>
 801913e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8019180 <__kernel_sinf+0x88>
 8019142:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019146:	eea6 0a26 	vfma.f32	s0, s12, s13
 801914a:	4770      	bx	lr
 801914c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019150:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019154:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019158:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801915c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019184 <__kernel_sinf+0x8c>
 8019160:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019164:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019168:	4770      	bx	lr
 801916a:	bf00      	nop
 801916c:	2f2ec9d3 	.word	0x2f2ec9d3
 8019170:	b2d72f34 	.word	0xb2d72f34
 8019174:	3638ef1b 	.word	0x3638ef1b
 8019178:	b9500d01 	.word	0xb9500d01
 801917c:	3c088889 	.word	0x3c088889
 8019180:	be2aaaab 	.word	0xbe2aaaab
 8019184:	3e2aaaab 	.word	0x3e2aaaab

08019188 <__ieee754_atan2f>:
 8019188:	ee10 2a90 	vmov	r2, s1
 801918c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8019190:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019194:	b510      	push	{r4, lr}
 8019196:	eef0 7a40 	vmov.f32	s15, s0
 801919a:	d806      	bhi.n	80191aa <__ieee754_atan2f+0x22>
 801919c:	ee10 0a10 	vmov	r0, s0
 80191a0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80191a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80191a8:	d904      	bls.n	80191b4 <__ieee754_atan2f+0x2c>
 80191aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80191ae:	eeb0 0a67 	vmov.f32	s0, s15
 80191b2:	bd10      	pop	{r4, pc}
 80191b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80191b8:	d103      	bne.n	80191c2 <__ieee754_atan2f+0x3a>
 80191ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191be:	f000 bd73 	b.w	8019ca8 <atanf>
 80191c2:	1794      	asrs	r4, r2, #30
 80191c4:	f004 0402 	and.w	r4, r4, #2
 80191c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80191cc:	b943      	cbnz	r3, 80191e0 <__ieee754_atan2f+0x58>
 80191ce:	2c02      	cmp	r4, #2
 80191d0:	d05e      	beq.n	8019290 <__ieee754_atan2f+0x108>
 80191d2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80192a4 <__ieee754_atan2f+0x11c>
 80191d6:	2c03      	cmp	r4, #3
 80191d8:	bf08      	it	eq
 80191da:	eef0 7a47 	vmoveq.f32	s15, s14
 80191de:	e7e6      	b.n	80191ae <__ieee754_atan2f+0x26>
 80191e0:	b941      	cbnz	r1, 80191f4 <__ieee754_atan2f+0x6c>
 80191e2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80192a8 <__ieee754_atan2f+0x120>
 80191e6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80192ac <__ieee754_atan2f+0x124>
 80191ea:	2800      	cmp	r0, #0
 80191ec:	bfa8      	it	ge
 80191ee:	eef0 7a47 	vmovge.f32	s15, s14
 80191f2:	e7dc      	b.n	80191ae <__ieee754_atan2f+0x26>
 80191f4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80191f8:	d110      	bne.n	801921c <__ieee754_atan2f+0x94>
 80191fa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80191fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8019202:	d107      	bne.n	8019214 <__ieee754_atan2f+0x8c>
 8019204:	2c02      	cmp	r4, #2
 8019206:	d846      	bhi.n	8019296 <__ieee754_atan2f+0x10e>
 8019208:	4b29      	ldr	r3, [pc, #164]	@ (80192b0 <__ieee754_atan2f+0x128>)
 801920a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801920e:	edd3 7a00 	vldr	s15, [r3]
 8019212:	e7cc      	b.n	80191ae <__ieee754_atan2f+0x26>
 8019214:	2c02      	cmp	r4, #2
 8019216:	d841      	bhi.n	801929c <__ieee754_atan2f+0x114>
 8019218:	4b26      	ldr	r3, [pc, #152]	@ (80192b4 <__ieee754_atan2f+0x12c>)
 801921a:	e7f6      	b.n	801920a <__ieee754_atan2f+0x82>
 801921c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019220:	d0df      	beq.n	80191e2 <__ieee754_atan2f+0x5a>
 8019222:	1a5b      	subs	r3, r3, r1
 8019224:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8019228:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801922c:	da1a      	bge.n	8019264 <__ieee754_atan2f+0xdc>
 801922e:	2a00      	cmp	r2, #0
 8019230:	da01      	bge.n	8019236 <__ieee754_atan2f+0xae>
 8019232:	313c      	adds	r1, #60	@ 0x3c
 8019234:	db19      	blt.n	801926a <__ieee754_atan2f+0xe2>
 8019236:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801923a:	f000 fe09 	bl	8019e50 <fabsf>
 801923e:	f000 fd33 	bl	8019ca8 <atanf>
 8019242:	eef0 7a40 	vmov.f32	s15, s0
 8019246:	2c01      	cmp	r4, #1
 8019248:	d012      	beq.n	8019270 <__ieee754_atan2f+0xe8>
 801924a:	2c02      	cmp	r4, #2
 801924c:	d017      	beq.n	801927e <__ieee754_atan2f+0xf6>
 801924e:	2c00      	cmp	r4, #0
 8019250:	d0ad      	beq.n	80191ae <__ieee754_atan2f+0x26>
 8019252:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80192b8 <__ieee754_atan2f+0x130>
 8019256:	ee77 7a87 	vadd.f32	s15, s15, s14
 801925a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80192bc <__ieee754_atan2f+0x134>
 801925e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019262:	e7a4      	b.n	80191ae <__ieee754_atan2f+0x26>
 8019264:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80192ac <__ieee754_atan2f+0x124>
 8019268:	e7ed      	b.n	8019246 <__ieee754_atan2f+0xbe>
 801926a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80192c0 <__ieee754_atan2f+0x138>
 801926e:	e7ea      	b.n	8019246 <__ieee754_atan2f+0xbe>
 8019270:	ee17 3a90 	vmov	r3, s15
 8019274:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019278:	ee07 3a90 	vmov	s15, r3
 801927c:	e797      	b.n	80191ae <__ieee754_atan2f+0x26>
 801927e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80192b8 <__ieee754_atan2f+0x130>
 8019282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019286:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80192bc <__ieee754_atan2f+0x134>
 801928a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801928e:	e78e      	b.n	80191ae <__ieee754_atan2f+0x26>
 8019290:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80192bc <__ieee754_atan2f+0x134>
 8019294:	e78b      	b.n	80191ae <__ieee754_atan2f+0x26>
 8019296:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80192c4 <__ieee754_atan2f+0x13c>
 801929a:	e788      	b.n	80191ae <__ieee754_atan2f+0x26>
 801929c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80192c0 <__ieee754_atan2f+0x138>
 80192a0:	e785      	b.n	80191ae <__ieee754_atan2f+0x26>
 80192a2:	bf00      	nop
 80192a4:	c0490fdb 	.word	0xc0490fdb
 80192a8:	bfc90fdb 	.word	0xbfc90fdb
 80192ac:	3fc90fdb 	.word	0x3fc90fdb
 80192b0:	0801ccc0 	.word	0x0801ccc0
 80192b4:	0801ccb4 	.word	0x0801ccb4
 80192b8:	33bbbd2e 	.word	0x33bbbd2e
 80192bc:	40490fdb 	.word	0x40490fdb
 80192c0:	00000000 	.word	0x00000000
 80192c4:	3f490fdb 	.word	0x3f490fdb

080192c8 <__ieee754_logf>:
 80192c8:	ee10 3a10 	vmov	r3, s0
 80192cc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80192d0:	d106      	bne.n	80192e0 <__ieee754_logf+0x18>
 80192d2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 801946c <__ieee754_logf+0x1a4>
 80192d6:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8019470 <__ieee754_logf+0x1a8>
 80192da:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80192de:	4770      	bx	lr
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	461a      	mov	r2, r3
 80192e4:	da02      	bge.n	80192ec <__ieee754_logf+0x24>
 80192e6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80192ea:	e7f4      	b.n	80192d6 <__ieee754_logf+0xe>
 80192ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80192f0:	db02      	blt.n	80192f8 <__ieee754_logf+0x30>
 80192f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80192f6:	4770      	bx	lr
 80192f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80192fc:	bfb8      	it	lt
 80192fe:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8019474 <__ieee754_logf+0x1ac>
 8019302:	485d      	ldr	r0, [pc, #372]	@ (8019478 <__ieee754_logf+0x1b0>)
 8019304:	bfbe      	ittt	lt
 8019306:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801930a:	f06f 0118 	mvnlt.w	r1, #24
 801930e:	ee17 2a90 	vmovlt	r2, s15
 8019312:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8019316:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801931a:	4410      	add	r0, r2
 801931c:	bfa8      	it	ge
 801931e:	2100      	movge	r1, #0
 8019320:	3b7f      	subs	r3, #127	@ 0x7f
 8019322:	440b      	add	r3, r1
 8019324:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8019328:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801932c:	4311      	orrs	r1, r2
 801932e:	ee00 1a10 	vmov	s0, r1
 8019332:	4952      	ldr	r1, [pc, #328]	@ (801947c <__ieee754_logf+0x1b4>)
 8019334:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8019338:	f102 000f 	add.w	r0, r2, #15
 801933c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019340:	4001      	ands	r1, r0
 8019342:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019346:	bb89      	cbnz	r1, 80193ac <__ieee754_logf+0xe4>
 8019348:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801934c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019350:	d10f      	bne.n	8019372 <__ieee754_logf+0xaa>
 8019352:	2b00      	cmp	r3, #0
 8019354:	f000 8087 	beq.w	8019466 <__ieee754_logf+0x19e>
 8019358:	ee07 3a90 	vmov	s15, r3
 801935c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8019480 <__ieee754_logf+0x1b8>
 8019360:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8019484 <__ieee754_logf+0x1bc>
 8019364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019368:	ee27 0a80 	vmul.f32	s0, s15, s0
 801936c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8019370:	4770      	bx	lr
 8019372:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8019488 <__ieee754_logf+0x1c0>
 8019376:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801937a:	eee0 7a66 	vfms.f32	s15, s0, s13
 801937e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019386:	b913      	cbnz	r3, 801938e <__ieee754_logf+0xc6>
 8019388:	ee30 0a47 	vsub.f32	s0, s0, s14
 801938c:	4770      	bx	lr
 801938e:	ee07 3a90 	vmov	s15, r3
 8019392:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8019480 <__ieee754_logf+0x1b8>
 8019396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801939a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801939e:	ee37 0a40 	vsub.f32	s0, s14, s0
 80193a2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8019484 <__ieee754_logf+0x1bc>
 80193a6:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80193aa:	4770      	bx	lr
 80193ac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80193b0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80193b4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801948c <__ieee754_logf+0x1c4>
 80193b8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8019490 <__ieee754_logf+0x1c8>
 80193bc:	4935      	ldr	r1, [pc, #212]	@ (8019494 <__ieee754_logf+0x1cc>)
 80193be:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80193c2:	4411      	add	r1, r2
 80193c4:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80193c8:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80193cc:	430a      	orrs	r2, r1
 80193ce:	2a00      	cmp	r2, #0
 80193d0:	ee07 3a90 	vmov	s15, r3
 80193d4:	ee26 5a06 	vmul.f32	s10, s12, s12
 80193d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80193dc:	ee25 7a05 	vmul.f32	s14, s10, s10
 80193e0:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8019498 <__ieee754_logf+0x1d0>
 80193e4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80193e8:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 801949c <__ieee754_logf+0x1d4>
 80193ec:	eee7 5a87 	vfma.f32	s11, s15, s14
 80193f0:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80194a0 <__ieee754_logf+0x1d8>
 80193f4:	eee7 7a24 	vfma.f32	s15, s14, s9
 80193f8:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80194a4 <__ieee754_logf+0x1dc>
 80193fc:	eee7 4a87 	vfma.f32	s9, s15, s14
 8019400:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80194a8 <__ieee754_logf+0x1e0>
 8019404:	eee4 7a87 	vfma.f32	s15, s9, s14
 8019408:	ee67 7a85 	vmul.f32	s15, s15, s10
 801940c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8019410:	dd1a      	ble.n	8019448 <__ieee754_logf+0x180>
 8019412:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019416:	ee20 7a07 	vmul.f32	s14, s0, s14
 801941a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801941e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019422:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019426:	b913      	cbnz	r3, 801942e <__ieee754_logf+0x166>
 8019428:	ee37 7a67 	vsub.f32	s14, s14, s15
 801942c:	e7ac      	b.n	8019388 <__ieee754_logf+0xc0>
 801942e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8019480 <__ieee754_logf+0x1b8>
 8019432:	eee6 7a86 	vfma.f32	s15, s13, s12
 8019436:	ee37 7a67 	vsub.f32	s14, s14, s15
 801943a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801943e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8019484 <__ieee754_logf+0x1bc>
 8019442:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8019446:	4770      	bx	lr
 8019448:	ee70 7a67 	vsub.f32	s15, s0, s15
 801944c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019450:	b913      	cbnz	r3, 8019458 <__ieee754_logf+0x190>
 8019452:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019456:	4770      	bx	lr
 8019458:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8019480 <__ieee754_logf+0x1b8>
 801945c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8019460:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019464:	e7eb      	b.n	801943e <__ieee754_logf+0x176>
 8019466:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8019470 <__ieee754_logf+0x1a8>
 801946a:	4770      	bx	lr
 801946c:	cc000000 	.word	0xcc000000
 8019470:	00000000 	.word	0x00000000
 8019474:	4c000000 	.word	0x4c000000
 8019478:	004afb20 	.word	0x004afb20
 801947c:	007ffff0 	.word	0x007ffff0
 8019480:	3717f7d1 	.word	0x3717f7d1
 8019484:	3f317180 	.word	0x3f317180
 8019488:	3eaaaaab 	.word	0x3eaaaaab
 801948c:	3e1cd04f 	.word	0x3e1cd04f
 8019490:	3e178897 	.word	0x3e178897
 8019494:	ffcf5c30 	.word	0xffcf5c30
 8019498:	3e638e29 	.word	0x3e638e29
 801949c:	3ecccccd 	.word	0x3ecccccd
 80194a0:	3e3a3325 	.word	0x3e3a3325
 80194a4:	3e924925 	.word	0x3e924925
 80194a8:	3f2aaaab 	.word	0x3f2aaaab

080194ac <__ieee754_powf>:
 80194ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194b0:	ee10 4a90 	vmov	r4, s1
 80194b4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80194b8:	ed2d 8b02 	vpush	{d8}
 80194bc:	ee10 6a10 	vmov	r6, s0
 80194c0:	eeb0 8a40 	vmov.f32	s16, s0
 80194c4:	eef0 8a60 	vmov.f32	s17, s1
 80194c8:	d10c      	bne.n	80194e4 <__ieee754_powf+0x38>
 80194ca:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80194ce:	0076      	lsls	r6, r6, #1
 80194d0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80194d4:	f240 8274 	bls.w	80199c0 <__ieee754_powf+0x514>
 80194d8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80194dc:	ecbd 8b02 	vpop	{d8}
 80194e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194e4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80194e8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80194ec:	d802      	bhi.n	80194f4 <__ieee754_powf+0x48>
 80194ee:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80194f2:	d908      	bls.n	8019506 <__ieee754_powf+0x5a>
 80194f4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80194f8:	d1ee      	bne.n	80194d8 <__ieee754_powf+0x2c>
 80194fa:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80194fe:	0064      	lsls	r4, r4, #1
 8019500:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8019504:	e7e6      	b.n	80194d4 <__ieee754_powf+0x28>
 8019506:	2e00      	cmp	r6, #0
 8019508:	da1f      	bge.n	801954a <__ieee754_powf+0x9e>
 801950a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801950e:	f080 8260 	bcs.w	80199d2 <__ieee754_powf+0x526>
 8019512:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019516:	d32f      	bcc.n	8019578 <__ieee754_powf+0xcc>
 8019518:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801951c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8019520:	fa49 f503 	asr.w	r5, r9, r3
 8019524:	fa05 f303 	lsl.w	r3, r5, r3
 8019528:	454b      	cmp	r3, r9
 801952a:	d123      	bne.n	8019574 <__ieee754_powf+0xc8>
 801952c:	f005 0501 	and.w	r5, r5, #1
 8019530:	f1c5 0502 	rsb	r5, r5, #2
 8019534:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019538:	d11f      	bne.n	801957a <__ieee754_powf+0xce>
 801953a:	2c00      	cmp	r4, #0
 801953c:	f280 8246 	bge.w	80199cc <__ieee754_powf+0x520>
 8019540:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019544:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019548:	e7c8      	b.n	80194dc <__ieee754_powf+0x30>
 801954a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801954e:	d111      	bne.n	8019574 <__ieee754_powf+0xc8>
 8019550:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8019554:	f000 8234 	beq.w	80199c0 <__ieee754_powf+0x514>
 8019558:	d906      	bls.n	8019568 <__ieee754_powf+0xbc>
 801955a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8019870 <__ieee754_powf+0x3c4>
 801955e:	2c00      	cmp	r4, #0
 8019560:	bfa8      	it	ge
 8019562:	eeb0 0a68 	vmovge.f32	s0, s17
 8019566:	e7b9      	b.n	80194dc <__ieee754_powf+0x30>
 8019568:	2c00      	cmp	r4, #0
 801956a:	f280 822c 	bge.w	80199c6 <__ieee754_powf+0x51a>
 801956e:	eeb1 0a68 	vneg.f32	s0, s17
 8019572:	e7b3      	b.n	80194dc <__ieee754_powf+0x30>
 8019574:	2500      	movs	r5, #0
 8019576:	e7dd      	b.n	8019534 <__ieee754_powf+0x88>
 8019578:	2500      	movs	r5, #0
 801957a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801957e:	d102      	bne.n	8019586 <__ieee754_powf+0xda>
 8019580:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019584:	e7aa      	b.n	80194dc <__ieee754_powf+0x30>
 8019586:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801958a:	f040 8227 	bne.w	80199dc <__ieee754_powf+0x530>
 801958e:	2e00      	cmp	r6, #0
 8019590:	f2c0 8224 	blt.w	80199dc <__ieee754_powf+0x530>
 8019594:	eeb0 0a48 	vmov.f32	s0, s16
 8019598:	ecbd 8b02 	vpop	{d8}
 801959c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195a0:	f7ff bd4e 	b.w	8019040 <__ieee754_sqrtf>
 80195a4:	2d01      	cmp	r5, #1
 80195a6:	d199      	bne.n	80194dc <__ieee754_powf+0x30>
 80195a8:	eeb1 0a40 	vneg.f32	s0, s0
 80195ac:	e796      	b.n	80194dc <__ieee754_powf+0x30>
 80195ae:	0ff0      	lsrs	r0, r6, #31
 80195b0:	3801      	subs	r0, #1
 80195b2:	ea55 0300 	orrs.w	r3, r5, r0
 80195b6:	d104      	bne.n	80195c2 <__ieee754_powf+0x116>
 80195b8:	ee38 8a48 	vsub.f32	s16, s16, s16
 80195bc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80195c0:	e78c      	b.n	80194dc <__ieee754_powf+0x30>
 80195c2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80195c6:	d96d      	bls.n	80196a4 <__ieee754_powf+0x1f8>
 80195c8:	4baa      	ldr	r3, [pc, #680]	@ (8019874 <__ieee754_powf+0x3c8>)
 80195ca:	4598      	cmp	r8, r3
 80195cc:	d808      	bhi.n	80195e0 <__ieee754_powf+0x134>
 80195ce:	2c00      	cmp	r4, #0
 80195d0:	da0b      	bge.n	80195ea <__ieee754_powf+0x13e>
 80195d2:	2000      	movs	r0, #0
 80195d4:	ecbd 8b02 	vpop	{d8}
 80195d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195dc:	f000 bcc6 	b.w	8019f6c <__math_oflowf>
 80195e0:	4ba5      	ldr	r3, [pc, #660]	@ (8019878 <__ieee754_powf+0x3cc>)
 80195e2:	4598      	cmp	r8, r3
 80195e4:	d908      	bls.n	80195f8 <__ieee754_powf+0x14c>
 80195e6:	2c00      	cmp	r4, #0
 80195e8:	dcf3      	bgt.n	80195d2 <__ieee754_powf+0x126>
 80195ea:	2000      	movs	r0, #0
 80195ec:	ecbd 8b02 	vpop	{d8}
 80195f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195f4:	f000 bcb4 	b.w	8019f60 <__math_uflowf>
 80195f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80195fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019600:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801987c <__ieee754_powf+0x3d0>
 8019604:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8019608:	eee0 6a67 	vfms.f32	s13, s0, s15
 801960c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019610:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8019614:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019618:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8019880 <__ieee754_powf+0x3d4>
 801961c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019620:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8019884 <__ieee754_powf+0x3d8>
 8019624:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8019628:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8019888 <__ieee754_powf+0x3dc>
 801962c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019630:	eeb0 7a67 	vmov.f32	s14, s15
 8019634:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019638:	ee17 3a10 	vmov	r3, s14
 801963c:	f36f 030b 	bfc	r3, #0, #12
 8019640:	ee07 3a10 	vmov	s14, r3
 8019644:	eeb0 6a47 	vmov.f32	s12, s14
 8019648:	eea0 6a66 	vfms.f32	s12, s0, s13
 801964c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019650:	3d01      	subs	r5, #1
 8019652:	4305      	orrs	r5, r0
 8019654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019658:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801965c:	f36f 040b 	bfc	r4, #0, #12
 8019660:	bf18      	it	ne
 8019662:	eeb0 8a66 	vmovne.f32	s16, s13
 8019666:	ee06 4a90 	vmov	s13, r4
 801966a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801966e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8019672:	ee67 7a26 	vmul.f32	s15, s14, s13
 8019676:	eee6 0a07 	vfma.f32	s1, s12, s14
 801967a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801967e:	ee17 1a10 	vmov	r1, s14
 8019682:	2900      	cmp	r1, #0
 8019684:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019688:	f340 80dd 	ble.w	8019846 <__ieee754_powf+0x39a>
 801968c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8019690:	f240 80ca 	bls.w	8019828 <__ieee754_powf+0x37c>
 8019694:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801969c:	bf4c      	ite	mi
 801969e:	2001      	movmi	r0, #1
 80196a0:	2000      	movpl	r0, #0
 80196a2:	e797      	b.n	80195d4 <__ieee754_powf+0x128>
 80196a4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80196a8:	bf01      	itttt	eq
 80196aa:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801988c <__ieee754_powf+0x3e0>
 80196ae:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80196b2:	f06f 0317 	mvneq.w	r3, #23
 80196b6:	ee17 7a90 	vmoveq	r7, s15
 80196ba:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80196be:	bf18      	it	ne
 80196c0:	2300      	movne	r3, #0
 80196c2:	3a7f      	subs	r2, #127	@ 0x7f
 80196c4:	441a      	add	r2, r3
 80196c6:	4b72      	ldr	r3, [pc, #456]	@ (8019890 <__ieee754_powf+0x3e4>)
 80196c8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80196cc:	429f      	cmp	r7, r3
 80196ce:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80196d2:	dd06      	ble.n	80196e2 <__ieee754_powf+0x236>
 80196d4:	4b6f      	ldr	r3, [pc, #444]	@ (8019894 <__ieee754_powf+0x3e8>)
 80196d6:	429f      	cmp	r7, r3
 80196d8:	f340 80a4 	ble.w	8019824 <__ieee754_powf+0x378>
 80196dc:	3201      	adds	r2, #1
 80196de:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80196e2:	2600      	movs	r6, #0
 80196e4:	4b6c      	ldr	r3, [pc, #432]	@ (8019898 <__ieee754_powf+0x3ec>)
 80196e6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80196ea:	ee07 1a10 	vmov	s14, r1
 80196ee:	edd3 5a00 	vldr	s11, [r3]
 80196f2:	4b6a      	ldr	r3, [pc, #424]	@ (801989c <__ieee754_powf+0x3f0>)
 80196f4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80196f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80196fc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8019700:	1049      	asrs	r1, r1, #1
 8019702:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8019706:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801970a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801970e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8019712:	ee07 1a90 	vmov	s15, r1
 8019716:	ee26 5a24 	vmul.f32	s10, s12, s9
 801971a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801971e:	ee15 7a10 	vmov	r7, s10
 8019722:	401f      	ands	r7, r3
 8019724:	ee06 7a90 	vmov	s13, r7
 8019728:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801972c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019730:	ee65 7a05 	vmul.f32	s15, s10, s10
 8019734:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019738:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80198a0 <__ieee754_powf+0x3f4>
 801973c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80198a4 <__ieee754_powf+0x3f8>
 8019740:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019744:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80198a8 <__ieee754_powf+0x3fc>
 8019748:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801974c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801987c <__ieee754_powf+0x3d0>
 8019750:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019754:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80198ac <__ieee754_powf+0x400>
 8019758:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801975c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80198b0 <__ieee754_powf+0x404>
 8019760:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019764:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019768:	ee35 7a26 	vadd.f32	s14, s10, s13
 801976c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8019770:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019774:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8019778:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801977c:	eef0 5a67 	vmov.f32	s11, s15
 8019780:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8019784:	ee75 5a87 	vadd.f32	s11, s11, s14
 8019788:	ee15 1a90 	vmov	r1, s11
 801978c:	4019      	ands	r1, r3
 801978e:	ee05 1a90 	vmov	s11, r1
 8019792:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019796:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801979a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801979e:	ee67 7a85 	vmul.f32	s15, s15, s10
 80197a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80197a6:	eeb0 6a67 	vmov.f32	s12, s15
 80197aa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80197ae:	ee16 1a10 	vmov	r1, s12
 80197b2:	4019      	ands	r1, r3
 80197b4:	ee06 1a10 	vmov	s12, r1
 80197b8:	eeb0 7a46 	vmov.f32	s14, s12
 80197bc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80197c0:	493c      	ldr	r1, [pc, #240]	@ (80198b4 <__ieee754_powf+0x408>)
 80197c2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80197c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197ca:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80198b8 <__ieee754_powf+0x40c>
 80197ce:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80198bc <__ieee754_powf+0x410>
 80197d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80197d6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80198c0 <__ieee754_powf+0x414>
 80197da:	eee6 7a07 	vfma.f32	s15, s12, s14
 80197de:	ed91 7a00 	vldr	s14, [r1]
 80197e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80197e6:	ee07 2a10 	vmov	s14, r2
 80197ea:	4a36      	ldr	r2, [pc, #216]	@ (80198c4 <__ieee754_powf+0x418>)
 80197ec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80197f0:	eeb0 7a67 	vmov.f32	s14, s15
 80197f4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80197f8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80197fc:	ed92 5a00 	vldr	s10, [r2]
 8019800:	ee37 7a05 	vadd.f32	s14, s14, s10
 8019804:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019808:	ee17 2a10 	vmov	r2, s14
 801980c:	401a      	ands	r2, r3
 801980e:	ee07 2a10 	vmov	s14, r2
 8019812:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019816:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801981a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801981e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019822:	e715      	b.n	8019650 <__ieee754_powf+0x1a4>
 8019824:	2601      	movs	r6, #1
 8019826:	e75d      	b.n	80196e4 <__ieee754_powf+0x238>
 8019828:	d152      	bne.n	80198d0 <__ieee754_powf+0x424>
 801982a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80198c8 <__ieee754_powf+0x41c>
 801982e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019832:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019836:	eef4 6ac7 	vcmpe.f32	s13, s14
 801983a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801983e:	f73f af29 	bgt.w	8019694 <__ieee754_powf+0x1e8>
 8019842:	2386      	movs	r3, #134	@ 0x86
 8019844:	e048      	b.n	80198d8 <__ieee754_powf+0x42c>
 8019846:	4a21      	ldr	r2, [pc, #132]	@ (80198cc <__ieee754_powf+0x420>)
 8019848:	4293      	cmp	r3, r2
 801984a:	d907      	bls.n	801985c <__ieee754_powf+0x3b0>
 801984c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019854:	bf4c      	ite	mi
 8019856:	2001      	movmi	r0, #1
 8019858:	2000      	movpl	r0, #0
 801985a:	e6c7      	b.n	80195ec <__ieee754_powf+0x140>
 801985c:	d138      	bne.n	80198d0 <__ieee754_powf+0x424>
 801985e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019862:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801986a:	dbea      	blt.n	8019842 <__ieee754_powf+0x396>
 801986c:	e7ee      	b.n	801984c <__ieee754_powf+0x3a0>
 801986e:	bf00      	nop
 8019870:	00000000 	.word	0x00000000
 8019874:	3f7ffff3 	.word	0x3f7ffff3
 8019878:	3f800007 	.word	0x3f800007
 801987c:	3eaaaaab 	.word	0x3eaaaaab
 8019880:	3fb8aa00 	.word	0x3fb8aa00
 8019884:	3fb8aa3b 	.word	0x3fb8aa3b
 8019888:	36eca570 	.word	0x36eca570
 801988c:	4b800000 	.word	0x4b800000
 8019890:	001cc471 	.word	0x001cc471
 8019894:	005db3d6 	.word	0x005db3d6
 8019898:	0801ccdc 	.word	0x0801ccdc
 801989c:	fffff000 	.word	0xfffff000
 80198a0:	3e6c3255 	.word	0x3e6c3255
 80198a4:	3e53f142 	.word	0x3e53f142
 80198a8:	3e8ba305 	.word	0x3e8ba305
 80198ac:	3edb6db7 	.word	0x3edb6db7
 80198b0:	3f19999a 	.word	0x3f19999a
 80198b4:	0801cccc 	.word	0x0801cccc
 80198b8:	3f76384f 	.word	0x3f76384f
 80198bc:	3f763800 	.word	0x3f763800
 80198c0:	369dc3a0 	.word	0x369dc3a0
 80198c4:	0801ccd4 	.word	0x0801ccd4
 80198c8:	3338aa3c 	.word	0x3338aa3c
 80198cc:	43160000 	.word	0x43160000
 80198d0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80198d4:	d96f      	bls.n	80199b6 <__ieee754_powf+0x50a>
 80198d6:	15db      	asrs	r3, r3, #23
 80198d8:	3b7e      	subs	r3, #126	@ 0x7e
 80198da:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80198de:	4118      	asrs	r0, r3
 80198e0:	4408      	add	r0, r1
 80198e2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80198e6:	4a4e      	ldr	r2, [pc, #312]	@ (8019a20 <__ieee754_powf+0x574>)
 80198e8:	3b7f      	subs	r3, #127	@ 0x7f
 80198ea:	411a      	asrs	r2, r3
 80198ec:	4002      	ands	r2, r0
 80198ee:	ee07 2a10 	vmov	s14, r2
 80198f2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80198f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80198fa:	f1c3 0317 	rsb	r3, r3, #23
 80198fe:	4118      	asrs	r0, r3
 8019900:	2900      	cmp	r1, #0
 8019902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019906:	bfb8      	it	lt
 8019908:	4240      	neglt	r0, r0
 801990a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801990e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8019a24 <__ieee754_powf+0x578>
 8019912:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8019a28 <__ieee754_powf+0x57c>
 8019916:	ee16 3a90 	vmov	r3, s13
 801991a:	f36f 030b 	bfc	r3, #0, #12
 801991e:	ee06 3a90 	vmov	s13, r3
 8019922:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019926:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801992a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801992e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8019a2c <__ieee754_powf+0x580>
 8019932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019936:	eee0 7a87 	vfma.f32	s15, s1, s14
 801993a:	eeb0 7a67 	vmov.f32	s14, s15
 801993e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8019942:	eef0 5a47 	vmov.f32	s11, s14
 8019946:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801994a:	ee67 6a07 	vmul.f32	s13, s14, s14
 801994e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019952:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8019a30 <__ieee754_powf+0x584>
 8019956:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8019a34 <__ieee754_powf+0x588>
 801995a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801995e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8019a38 <__ieee754_powf+0x58c>
 8019962:	eee6 5a26 	vfma.f32	s11, s12, s13
 8019966:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8019a3c <__ieee754_powf+0x590>
 801996a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801996e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8019a40 <__ieee754_powf+0x594>
 8019972:	eee6 5a26 	vfma.f32	s11, s12, s13
 8019976:	eeb0 6a47 	vmov.f32	s12, s14
 801997a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801997e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8019982:	ee67 5a06 	vmul.f32	s11, s14, s12
 8019986:	ee36 6a66 	vsub.f32	s12, s12, s13
 801998a:	eee7 7a27 	vfma.f32	s15, s14, s15
 801998e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8019992:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801999a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801999e:	ee10 3a10 	vmov	r3, s0
 80199a2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80199a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80199aa:	da06      	bge.n	80199ba <__ieee754_powf+0x50e>
 80199ac:	f000 fa58 	bl	8019e60 <scalbnf>
 80199b0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80199b4:	e592      	b.n	80194dc <__ieee754_powf+0x30>
 80199b6:	2000      	movs	r0, #0
 80199b8:	e7a7      	b.n	801990a <__ieee754_powf+0x45e>
 80199ba:	ee00 3a10 	vmov	s0, r3
 80199be:	e7f7      	b.n	80199b0 <__ieee754_powf+0x504>
 80199c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80199c4:	e58a      	b.n	80194dc <__ieee754_powf+0x30>
 80199c6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8019a44 <__ieee754_powf+0x598>
 80199ca:	e587      	b.n	80194dc <__ieee754_powf+0x30>
 80199cc:	eeb0 0a48 	vmov.f32	s0, s16
 80199d0:	e584      	b.n	80194dc <__ieee754_powf+0x30>
 80199d2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80199d6:	f43f adbb 	beq.w	8019550 <__ieee754_powf+0xa4>
 80199da:	2502      	movs	r5, #2
 80199dc:	eeb0 0a48 	vmov.f32	s0, s16
 80199e0:	f000 fa36 	bl	8019e50 <fabsf>
 80199e4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80199e8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80199ec:	4647      	mov	r7, r8
 80199ee:	d003      	beq.n	80199f8 <__ieee754_powf+0x54c>
 80199f0:	f1b8 0f00 	cmp.w	r8, #0
 80199f4:	f47f addb 	bne.w	80195ae <__ieee754_powf+0x102>
 80199f8:	2c00      	cmp	r4, #0
 80199fa:	bfbc      	itt	lt
 80199fc:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8019a00:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8019a04:	2e00      	cmp	r6, #0
 8019a06:	f6bf ad69 	bge.w	80194dc <__ieee754_powf+0x30>
 8019a0a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8019a0e:	ea58 0805 	orrs.w	r8, r8, r5
 8019a12:	f47f adc7 	bne.w	80195a4 <__ieee754_powf+0xf8>
 8019a16:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019a1a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019a1e:	e55d      	b.n	80194dc <__ieee754_powf+0x30>
 8019a20:	ff800000 	.word	0xff800000
 8019a24:	3f317218 	.word	0x3f317218
 8019a28:	3f317200 	.word	0x3f317200
 8019a2c:	35bfbe8c 	.word	0x35bfbe8c
 8019a30:	b5ddea0e 	.word	0xb5ddea0e
 8019a34:	3331bb4c 	.word	0x3331bb4c
 8019a38:	388ab355 	.word	0x388ab355
 8019a3c:	bb360b61 	.word	0xbb360b61
 8019a40:	3e2aaaab 	.word	0x3e2aaaab
 8019a44:	00000000 	.word	0x00000000

08019a48 <__ieee754_rem_pio2f>:
 8019a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a4a:	ee10 6a10 	vmov	r6, s0
 8019a4e:	4b88      	ldr	r3, [pc, #544]	@ (8019c70 <__ieee754_rem_pio2f+0x228>)
 8019a50:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019a54:	429d      	cmp	r5, r3
 8019a56:	b087      	sub	sp, #28
 8019a58:	4604      	mov	r4, r0
 8019a5a:	d805      	bhi.n	8019a68 <__ieee754_rem_pio2f+0x20>
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	ed80 0a00 	vstr	s0, [r0]
 8019a62:	6043      	str	r3, [r0, #4]
 8019a64:	2000      	movs	r0, #0
 8019a66:	e022      	b.n	8019aae <__ieee754_rem_pio2f+0x66>
 8019a68:	4b82      	ldr	r3, [pc, #520]	@ (8019c74 <__ieee754_rem_pio2f+0x22c>)
 8019a6a:	429d      	cmp	r5, r3
 8019a6c:	d83a      	bhi.n	8019ae4 <__ieee754_rem_pio2f+0x9c>
 8019a6e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019a72:	2e00      	cmp	r6, #0
 8019a74:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8019c78 <__ieee754_rem_pio2f+0x230>
 8019a78:	4a80      	ldr	r2, [pc, #512]	@ (8019c7c <__ieee754_rem_pio2f+0x234>)
 8019a7a:	f023 030f 	bic.w	r3, r3, #15
 8019a7e:	dd18      	ble.n	8019ab2 <__ieee754_rem_pio2f+0x6a>
 8019a80:	4293      	cmp	r3, r2
 8019a82:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019a86:	bf09      	itett	eq
 8019a88:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8019c80 <__ieee754_rem_pio2f+0x238>
 8019a8c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019c84 <__ieee754_rem_pio2f+0x23c>
 8019a90:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8019c88 <__ieee754_rem_pio2f+0x240>
 8019a94:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019a98:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8019a9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019aa0:	ed80 7a00 	vstr	s14, [r0]
 8019aa4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019aa8:	edc0 7a01 	vstr	s15, [r0, #4]
 8019aac:	2001      	movs	r0, #1
 8019aae:	b007      	add	sp, #28
 8019ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ab2:	4293      	cmp	r3, r2
 8019ab4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019ab8:	bf09      	itett	eq
 8019aba:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8019c80 <__ieee754_rem_pio2f+0x238>
 8019abe:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019c84 <__ieee754_rem_pio2f+0x23c>
 8019ac2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8019c88 <__ieee754_rem_pio2f+0x240>
 8019ac6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019aca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ad2:	ed80 7a00 	vstr	s14, [r0]
 8019ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ada:	edc0 7a01 	vstr	s15, [r0, #4]
 8019ade:	f04f 30ff 	mov.w	r0, #4294967295
 8019ae2:	e7e4      	b.n	8019aae <__ieee754_rem_pio2f+0x66>
 8019ae4:	4b69      	ldr	r3, [pc, #420]	@ (8019c8c <__ieee754_rem_pio2f+0x244>)
 8019ae6:	429d      	cmp	r5, r3
 8019ae8:	d873      	bhi.n	8019bd2 <__ieee754_rem_pio2f+0x18a>
 8019aea:	f000 f9b1 	bl	8019e50 <fabsf>
 8019aee:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8019c90 <__ieee754_rem_pio2f+0x248>
 8019af2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019af6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019b02:	ee17 0a90 	vmov	r0, s15
 8019b06:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019c78 <__ieee754_rem_pio2f+0x230>
 8019b0a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019b0e:	281f      	cmp	r0, #31
 8019b10:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019c84 <__ieee754_rem_pio2f+0x23c>
 8019b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019b18:	eeb1 6a47 	vneg.f32	s12, s14
 8019b1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019b20:	ee16 1a90 	vmov	r1, s13
 8019b24:	dc09      	bgt.n	8019b3a <__ieee754_rem_pio2f+0xf2>
 8019b26:	4a5b      	ldr	r2, [pc, #364]	@ (8019c94 <__ieee754_rem_pio2f+0x24c>)
 8019b28:	1e47      	subs	r7, r0, #1
 8019b2a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019b2e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8019b32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019b36:	4293      	cmp	r3, r2
 8019b38:	d107      	bne.n	8019b4a <__ieee754_rem_pio2f+0x102>
 8019b3a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8019b3e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8019b42:	2a08      	cmp	r2, #8
 8019b44:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019b48:	dc14      	bgt.n	8019b74 <__ieee754_rem_pio2f+0x12c>
 8019b4a:	6021      	str	r1, [r4, #0]
 8019b4c:	ed94 7a00 	vldr	s14, [r4]
 8019b50:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019b54:	2e00      	cmp	r6, #0
 8019b56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019b5a:	ed84 0a01 	vstr	s0, [r4, #4]
 8019b5e:	daa6      	bge.n	8019aae <__ieee754_rem_pio2f+0x66>
 8019b60:	eeb1 7a47 	vneg.f32	s14, s14
 8019b64:	eeb1 0a40 	vneg.f32	s0, s0
 8019b68:	ed84 7a00 	vstr	s14, [r4]
 8019b6c:	ed84 0a01 	vstr	s0, [r4, #4]
 8019b70:	4240      	negs	r0, r0
 8019b72:	e79c      	b.n	8019aae <__ieee754_rem_pio2f+0x66>
 8019b74:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8019c80 <__ieee754_rem_pio2f+0x238>
 8019b78:	eef0 6a40 	vmov.f32	s13, s0
 8019b7c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019b80:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019b84:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019b88:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019c88 <__ieee754_rem_pio2f+0x240>
 8019b8c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019b90:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019b94:	ee15 2a90 	vmov	r2, s11
 8019b98:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019b9c:	1a5b      	subs	r3, r3, r1
 8019b9e:	2b19      	cmp	r3, #25
 8019ba0:	dc04      	bgt.n	8019bac <__ieee754_rem_pio2f+0x164>
 8019ba2:	edc4 5a00 	vstr	s11, [r4]
 8019ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8019baa:	e7cf      	b.n	8019b4c <__ieee754_rem_pio2f+0x104>
 8019bac:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8019c98 <__ieee754_rem_pio2f+0x250>
 8019bb0:	eeb0 0a66 	vmov.f32	s0, s13
 8019bb4:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019bb8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019bbc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8019c9c <__ieee754_rem_pio2f+0x254>
 8019bc0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019bc4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019bc8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019bcc:	ed84 7a00 	vstr	s14, [r4]
 8019bd0:	e7bc      	b.n	8019b4c <__ieee754_rem_pio2f+0x104>
 8019bd2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8019bd6:	d306      	bcc.n	8019be6 <__ieee754_rem_pio2f+0x19e>
 8019bd8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019bdc:	edc0 7a01 	vstr	s15, [r0, #4]
 8019be0:	edc0 7a00 	vstr	s15, [r0]
 8019be4:	e73e      	b.n	8019a64 <__ieee754_rem_pio2f+0x1c>
 8019be6:	15ea      	asrs	r2, r5, #23
 8019be8:	3a86      	subs	r2, #134	@ 0x86
 8019bea:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019bee:	ee07 3a90 	vmov	s15, r3
 8019bf2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019bf6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8019ca0 <__ieee754_rem_pio2f+0x258>
 8019bfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c02:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019c06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019c0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019c0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c16:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019c1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019c1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c26:	edcd 7a05 	vstr	s15, [sp, #20]
 8019c2a:	d11e      	bne.n	8019c6a <__ieee754_rem_pio2f+0x222>
 8019c2c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c34:	bf0c      	ite	eq
 8019c36:	2301      	moveq	r3, #1
 8019c38:	2302      	movne	r3, #2
 8019c3a:	491a      	ldr	r1, [pc, #104]	@ (8019ca4 <__ieee754_rem_pio2f+0x25c>)
 8019c3c:	9101      	str	r1, [sp, #4]
 8019c3e:	2102      	movs	r1, #2
 8019c40:	9100      	str	r1, [sp, #0]
 8019c42:	a803      	add	r0, sp, #12
 8019c44:	4621      	mov	r1, r4
 8019c46:	f000 f997 	bl	8019f78 <__kernel_rem_pio2f>
 8019c4a:	2e00      	cmp	r6, #0
 8019c4c:	f6bf af2f 	bge.w	8019aae <__ieee754_rem_pio2f+0x66>
 8019c50:	edd4 7a00 	vldr	s15, [r4]
 8019c54:	eef1 7a67 	vneg.f32	s15, s15
 8019c58:	edc4 7a00 	vstr	s15, [r4]
 8019c5c:	edd4 7a01 	vldr	s15, [r4, #4]
 8019c60:	eef1 7a67 	vneg.f32	s15, s15
 8019c64:	edc4 7a01 	vstr	s15, [r4, #4]
 8019c68:	e782      	b.n	8019b70 <__ieee754_rem_pio2f+0x128>
 8019c6a:	2303      	movs	r3, #3
 8019c6c:	e7e5      	b.n	8019c3a <__ieee754_rem_pio2f+0x1f2>
 8019c6e:	bf00      	nop
 8019c70:	3f490fd8 	.word	0x3f490fd8
 8019c74:	4016cbe3 	.word	0x4016cbe3
 8019c78:	3fc90f80 	.word	0x3fc90f80
 8019c7c:	3fc90fd0 	.word	0x3fc90fd0
 8019c80:	37354400 	.word	0x37354400
 8019c84:	37354443 	.word	0x37354443
 8019c88:	2e85a308 	.word	0x2e85a308
 8019c8c:	43490f80 	.word	0x43490f80
 8019c90:	3f22f984 	.word	0x3f22f984
 8019c94:	0801cce4 	.word	0x0801cce4
 8019c98:	2e85a300 	.word	0x2e85a300
 8019c9c:	248d3132 	.word	0x248d3132
 8019ca0:	43800000 	.word	0x43800000
 8019ca4:	0801cd64 	.word	0x0801cd64

08019ca8 <atanf>:
 8019ca8:	b538      	push	{r3, r4, r5, lr}
 8019caa:	ee10 5a10 	vmov	r5, s0
 8019cae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8019cb2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8019cb6:	eef0 7a40 	vmov.f32	s15, s0
 8019cba:	d310      	bcc.n	8019cde <atanf+0x36>
 8019cbc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8019cc0:	d904      	bls.n	8019ccc <atanf+0x24>
 8019cc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8019cca:	bd38      	pop	{r3, r4, r5, pc}
 8019ccc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8019e04 <atanf+0x15c>
 8019cd0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8019e08 <atanf+0x160>
 8019cd4:	2d00      	cmp	r5, #0
 8019cd6:	bfc8      	it	gt
 8019cd8:	eef0 7a47 	vmovgt.f32	s15, s14
 8019cdc:	e7f3      	b.n	8019cc6 <atanf+0x1e>
 8019cde:	4b4b      	ldr	r3, [pc, #300]	@ (8019e0c <atanf+0x164>)
 8019ce0:	429c      	cmp	r4, r3
 8019ce2:	d810      	bhi.n	8019d06 <atanf+0x5e>
 8019ce4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8019ce8:	d20a      	bcs.n	8019d00 <atanf+0x58>
 8019cea:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8019e10 <atanf+0x168>
 8019cee:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019cf6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cfe:	dce2      	bgt.n	8019cc6 <atanf+0x1e>
 8019d00:	f04f 33ff 	mov.w	r3, #4294967295
 8019d04:	e013      	b.n	8019d2e <atanf+0x86>
 8019d06:	f000 f8a3 	bl	8019e50 <fabsf>
 8019d0a:	4b42      	ldr	r3, [pc, #264]	@ (8019e14 <atanf+0x16c>)
 8019d0c:	429c      	cmp	r4, r3
 8019d0e:	d84f      	bhi.n	8019db0 <atanf+0x108>
 8019d10:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8019d14:	429c      	cmp	r4, r3
 8019d16:	d841      	bhi.n	8019d9c <atanf+0xf4>
 8019d18:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8019d1c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8019d20:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019d24:	2300      	movs	r3, #0
 8019d26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019d2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019d2e:	1c5a      	adds	r2, r3, #1
 8019d30:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019d34:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8019e18 <atanf+0x170>
 8019d38:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8019e1c <atanf+0x174>
 8019d3c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8019e20 <atanf+0x178>
 8019d40:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019d44:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019d48:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8019e24 <atanf+0x17c>
 8019d4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019d50:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8019e28 <atanf+0x180>
 8019d54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019d58:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8019e2c <atanf+0x184>
 8019d5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019d60:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8019e30 <atanf+0x188>
 8019d64:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019d68:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8019e34 <atanf+0x18c>
 8019d6c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019d70:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8019e38 <atanf+0x190>
 8019d74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019d78:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8019e3c <atanf+0x194>
 8019d7c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019d80:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8019e40 <atanf+0x198>
 8019d84:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019d88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019d8c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019d90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019d94:	d121      	bne.n	8019dda <atanf+0x132>
 8019d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d9a:	e794      	b.n	8019cc6 <atanf+0x1e>
 8019d9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019da0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019da4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019da8:	2301      	movs	r3, #1
 8019daa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019dae:	e7be      	b.n	8019d2e <atanf+0x86>
 8019db0:	4b24      	ldr	r3, [pc, #144]	@ (8019e44 <atanf+0x19c>)
 8019db2:	429c      	cmp	r4, r3
 8019db4:	d80b      	bhi.n	8019dce <atanf+0x126>
 8019db6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8019dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019dbe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019dc2:	2302      	movs	r3, #2
 8019dc4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019dcc:	e7af      	b.n	8019d2e <atanf+0x86>
 8019dce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8019dd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019dd6:	2303      	movs	r3, #3
 8019dd8:	e7a9      	b.n	8019d2e <atanf+0x86>
 8019dda:	4a1b      	ldr	r2, [pc, #108]	@ (8019e48 <atanf+0x1a0>)
 8019ddc:	491b      	ldr	r1, [pc, #108]	@ (8019e4c <atanf+0x1a4>)
 8019dde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019de2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019de6:	edd3 6a00 	vldr	s13, [r3]
 8019dea:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019dee:	2d00      	cmp	r5, #0
 8019df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019df4:	edd2 7a00 	vldr	s15, [r2]
 8019df8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019dfc:	bfb8      	it	lt
 8019dfe:	eef1 7a67 	vneglt.f32	s15, s15
 8019e02:	e760      	b.n	8019cc6 <atanf+0x1e>
 8019e04:	bfc90fdb 	.word	0xbfc90fdb
 8019e08:	3fc90fdb 	.word	0x3fc90fdb
 8019e0c:	3edfffff 	.word	0x3edfffff
 8019e10:	7149f2ca 	.word	0x7149f2ca
 8019e14:	3f97ffff 	.word	0x3f97ffff
 8019e18:	3c8569d7 	.word	0x3c8569d7
 8019e1c:	3d4bda59 	.word	0x3d4bda59
 8019e20:	bd6ef16b 	.word	0xbd6ef16b
 8019e24:	3d886b35 	.word	0x3d886b35
 8019e28:	3dba2e6e 	.word	0x3dba2e6e
 8019e2c:	3e124925 	.word	0x3e124925
 8019e30:	3eaaaaab 	.word	0x3eaaaaab
 8019e34:	bd15a221 	.word	0xbd15a221
 8019e38:	bd9d8795 	.word	0xbd9d8795
 8019e3c:	bde38e38 	.word	0xbde38e38
 8019e40:	be4ccccd 	.word	0xbe4ccccd
 8019e44:	401bffff 	.word	0x401bffff
 8019e48:	0801d08c 	.word	0x0801d08c
 8019e4c:	0801d07c 	.word	0x0801d07c

08019e50 <fabsf>:
 8019e50:	ee10 3a10 	vmov	r3, s0
 8019e54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019e58:	ee00 3a10 	vmov	s0, r3
 8019e5c:	4770      	bx	lr
	...

08019e60 <scalbnf>:
 8019e60:	ee10 3a10 	vmov	r3, s0
 8019e64:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019e68:	d02b      	beq.n	8019ec2 <scalbnf+0x62>
 8019e6a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8019e6e:	d302      	bcc.n	8019e76 <scalbnf+0x16>
 8019e70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019e74:	4770      	bx	lr
 8019e76:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019e7a:	d123      	bne.n	8019ec4 <scalbnf+0x64>
 8019e7c:	4b24      	ldr	r3, [pc, #144]	@ (8019f10 <scalbnf+0xb0>)
 8019e7e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019f14 <scalbnf+0xb4>
 8019e82:	4298      	cmp	r0, r3
 8019e84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019e88:	db17      	blt.n	8019eba <scalbnf+0x5a>
 8019e8a:	ee10 3a10 	vmov	r3, s0
 8019e8e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019e92:	3a19      	subs	r2, #25
 8019e94:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019e98:	4288      	cmp	r0, r1
 8019e9a:	dd15      	ble.n	8019ec8 <scalbnf+0x68>
 8019e9c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8019f18 <scalbnf+0xb8>
 8019ea0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8019f1c <scalbnf+0xbc>
 8019ea4:	ee10 3a10 	vmov	r3, s0
 8019ea8:	eeb0 7a67 	vmov.f32	s14, s15
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	bfb8      	it	lt
 8019eb0:	eef0 7a66 	vmovlt.f32	s15, s13
 8019eb4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019eb8:	4770      	bx	lr
 8019eba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019f20 <scalbnf+0xc0>
 8019ebe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019ec2:	4770      	bx	lr
 8019ec4:	0dd2      	lsrs	r2, r2, #23
 8019ec6:	e7e5      	b.n	8019e94 <scalbnf+0x34>
 8019ec8:	4410      	add	r0, r2
 8019eca:	28fe      	cmp	r0, #254	@ 0xfe
 8019ecc:	dce6      	bgt.n	8019e9c <scalbnf+0x3c>
 8019ece:	2800      	cmp	r0, #0
 8019ed0:	dd06      	ble.n	8019ee0 <scalbnf+0x80>
 8019ed2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019ed6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019eda:	ee00 3a10 	vmov	s0, r3
 8019ede:	4770      	bx	lr
 8019ee0:	f110 0f16 	cmn.w	r0, #22
 8019ee4:	da09      	bge.n	8019efa <scalbnf+0x9a>
 8019ee6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019f20 <scalbnf+0xc0>
 8019eea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8019f24 <scalbnf+0xc4>
 8019eee:	ee10 3a10 	vmov	r3, s0
 8019ef2:	eeb0 7a67 	vmov.f32	s14, s15
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	e7d9      	b.n	8019eae <scalbnf+0x4e>
 8019efa:	3019      	adds	r0, #25
 8019efc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019f00:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019f04:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8019f28 <scalbnf+0xc8>
 8019f08:	ee07 3a90 	vmov	s15, r3
 8019f0c:	e7d7      	b.n	8019ebe <scalbnf+0x5e>
 8019f0e:	bf00      	nop
 8019f10:	ffff3cb0 	.word	0xffff3cb0
 8019f14:	4c000000 	.word	0x4c000000
 8019f18:	7149f2ca 	.word	0x7149f2ca
 8019f1c:	f149f2ca 	.word	0xf149f2ca
 8019f20:	0da24260 	.word	0x0da24260
 8019f24:	8da24260 	.word	0x8da24260
 8019f28:	33000000 	.word	0x33000000

08019f2c <with_errnof>:
 8019f2c:	b510      	push	{r4, lr}
 8019f2e:	ed2d 8b02 	vpush	{d8}
 8019f32:	eeb0 8a40 	vmov.f32	s16, s0
 8019f36:	4604      	mov	r4, r0
 8019f38:	f7fb fc52 	bl	80157e0 <__errno>
 8019f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8019f40:	ecbd 8b02 	vpop	{d8}
 8019f44:	6004      	str	r4, [r0, #0]
 8019f46:	bd10      	pop	{r4, pc}

08019f48 <xflowf>:
 8019f48:	b130      	cbz	r0, 8019f58 <xflowf+0x10>
 8019f4a:	eef1 7a40 	vneg.f32	s15, s0
 8019f4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019f52:	2022      	movs	r0, #34	@ 0x22
 8019f54:	f7ff bfea 	b.w	8019f2c <with_errnof>
 8019f58:	eef0 7a40 	vmov.f32	s15, s0
 8019f5c:	e7f7      	b.n	8019f4e <xflowf+0x6>
	...

08019f60 <__math_uflowf>:
 8019f60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019f68 <__math_uflowf+0x8>
 8019f64:	f7ff bff0 	b.w	8019f48 <xflowf>
 8019f68:	10000000 	.word	0x10000000

08019f6c <__math_oflowf>:
 8019f6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019f74 <__math_oflowf+0x8>
 8019f70:	f7ff bfea 	b.w	8019f48 <xflowf>
 8019f74:	70000000 	.word	0x70000000

08019f78 <__kernel_rem_pio2f>:
 8019f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f7c:	ed2d 8b04 	vpush	{d8-d9}
 8019f80:	b0d9      	sub	sp, #356	@ 0x164
 8019f82:	4690      	mov	r8, r2
 8019f84:	9001      	str	r0, [sp, #4]
 8019f86:	4ab6      	ldr	r2, [pc, #728]	@ (801a260 <__kernel_rem_pio2f+0x2e8>)
 8019f88:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8019f8a:	f118 0f04 	cmn.w	r8, #4
 8019f8e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8019f92:	460f      	mov	r7, r1
 8019f94:	f103 3bff 	add.w	fp, r3, #4294967295
 8019f98:	db26      	blt.n	8019fe8 <__kernel_rem_pio2f+0x70>
 8019f9a:	f1b8 0203 	subs.w	r2, r8, #3
 8019f9e:	bf48      	it	mi
 8019fa0:	f108 0204 	addmi.w	r2, r8, #4
 8019fa4:	10d2      	asrs	r2, r2, #3
 8019fa6:	1c55      	adds	r5, r2, #1
 8019fa8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019faa:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801a270 <__kernel_rem_pio2f+0x2f8>
 8019fae:	00e8      	lsls	r0, r5, #3
 8019fb0:	eba2 060b 	sub.w	r6, r2, fp
 8019fb4:	9002      	str	r0, [sp, #8]
 8019fb6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8019fba:	eb0a 0c0b 	add.w	ip, sl, fp
 8019fbe:	ac1c      	add	r4, sp, #112	@ 0x70
 8019fc0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019fc4:	2000      	movs	r0, #0
 8019fc6:	4560      	cmp	r0, ip
 8019fc8:	dd10      	ble.n	8019fec <__kernel_rem_pio2f+0x74>
 8019fca:	a91c      	add	r1, sp, #112	@ 0x70
 8019fcc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019fd0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019fd4:	2600      	movs	r6, #0
 8019fd6:	4556      	cmp	r6, sl
 8019fd8:	dc24      	bgt.n	801a024 <__kernel_rem_pio2f+0xac>
 8019fda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019fde:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801a270 <__kernel_rem_pio2f+0x2f8>
 8019fe2:	4684      	mov	ip, r0
 8019fe4:	2400      	movs	r4, #0
 8019fe6:	e016      	b.n	801a016 <__kernel_rem_pio2f+0x9e>
 8019fe8:	2200      	movs	r2, #0
 8019fea:	e7dc      	b.n	8019fa6 <__kernel_rem_pio2f+0x2e>
 8019fec:	42c6      	cmn	r6, r0
 8019fee:	bf5d      	ittte	pl
 8019ff0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019ff4:	ee07 1a90 	vmovpl	s15, r1
 8019ff8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019ffc:	eef0 7a47 	vmovmi.f32	s15, s14
 801a000:	ece4 7a01 	vstmia	r4!, {s15}
 801a004:	3001      	adds	r0, #1
 801a006:	e7de      	b.n	8019fc6 <__kernel_rem_pio2f+0x4e>
 801a008:	ecfe 6a01 	vldmia	lr!, {s13}
 801a00c:	ed3c 7a01 	vldmdb	ip!, {s14}
 801a010:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a014:	3401      	adds	r4, #1
 801a016:	455c      	cmp	r4, fp
 801a018:	ddf6      	ble.n	801a008 <__kernel_rem_pio2f+0x90>
 801a01a:	ece9 7a01 	vstmia	r9!, {s15}
 801a01e:	3601      	adds	r6, #1
 801a020:	3004      	adds	r0, #4
 801a022:	e7d8      	b.n	8019fd6 <__kernel_rem_pio2f+0x5e>
 801a024:	a908      	add	r1, sp, #32
 801a026:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a02a:	9104      	str	r1, [sp, #16]
 801a02c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a02e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801a26c <__kernel_rem_pio2f+0x2f4>
 801a032:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801a268 <__kernel_rem_pio2f+0x2f0>
 801a036:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a03a:	9203      	str	r2, [sp, #12]
 801a03c:	4654      	mov	r4, sl
 801a03e:	00a2      	lsls	r2, r4, #2
 801a040:	9205      	str	r2, [sp, #20]
 801a042:	aa58      	add	r2, sp, #352	@ 0x160
 801a044:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801a048:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801a04c:	a944      	add	r1, sp, #272	@ 0x110
 801a04e:	aa08      	add	r2, sp, #32
 801a050:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801a054:	4694      	mov	ip, r2
 801a056:	4626      	mov	r6, r4
 801a058:	2e00      	cmp	r6, #0
 801a05a:	dc4c      	bgt.n	801a0f6 <__kernel_rem_pio2f+0x17e>
 801a05c:	4628      	mov	r0, r5
 801a05e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a062:	f7ff fefd 	bl	8019e60 <scalbnf>
 801a066:	eeb0 8a40 	vmov.f32	s16, s0
 801a06a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801a06e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a072:	f000 f9e9 	bl	801a448 <floorf>
 801a076:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801a07a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a07e:	2d00      	cmp	r5, #0
 801a080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a084:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a088:	ee17 9a90 	vmov	r9, s15
 801a08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a090:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a094:	dd41      	ble.n	801a11a <__kernel_rem_pio2f+0x1a2>
 801a096:	f104 3cff 	add.w	ip, r4, #4294967295
 801a09a:	a908      	add	r1, sp, #32
 801a09c:	f1c5 0e08 	rsb	lr, r5, #8
 801a0a0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801a0a4:	fa46 f00e 	asr.w	r0, r6, lr
 801a0a8:	4481      	add	r9, r0
 801a0aa:	fa00 f00e 	lsl.w	r0, r0, lr
 801a0ae:	1a36      	subs	r6, r6, r0
 801a0b0:	f1c5 0007 	rsb	r0, r5, #7
 801a0b4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801a0b8:	4106      	asrs	r6, r0
 801a0ba:	2e00      	cmp	r6, #0
 801a0bc:	dd3c      	ble.n	801a138 <__kernel_rem_pio2f+0x1c0>
 801a0be:	f04f 0e00 	mov.w	lr, #0
 801a0c2:	f109 0901 	add.w	r9, r9, #1
 801a0c6:	4670      	mov	r0, lr
 801a0c8:	4574      	cmp	r4, lr
 801a0ca:	dc68      	bgt.n	801a19e <__kernel_rem_pio2f+0x226>
 801a0cc:	2d00      	cmp	r5, #0
 801a0ce:	dd03      	ble.n	801a0d8 <__kernel_rem_pio2f+0x160>
 801a0d0:	2d01      	cmp	r5, #1
 801a0d2:	d074      	beq.n	801a1be <__kernel_rem_pio2f+0x246>
 801a0d4:	2d02      	cmp	r5, #2
 801a0d6:	d07d      	beq.n	801a1d4 <__kernel_rem_pio2f+0x25c>
 801a0d8:	2e02      	cmp	r6, #2
 801a0da:	d12d      	bne.n	801a138 <__kernel_rem_pio2f+0x1c0>
 801a0dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a0e0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a0e4:	b340      	cbz	r0, 801a138 <__kernel_rem_pio2f+0x1c0>
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	9306      	str	r3, [sp, #24]
 801a0ea:	f7ff feb9 	bl	8019e60 <scalbnf>
 801a0ee:	9b06      	ldr	r3, [sp, #24]
 801a0f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a0f4:	e020      	b.n	801a138 <__kernel_rem_pio2f+0x1c0>
 801a0f6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a0fa:	3e01      	subs	r6, #1
 801a0fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a104:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a108:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a10c:	ecac 0a01 	vstmia	ip!, {s0}
 801a110:	ed30 0a01 	vldmdb	r0!, {s0}
 801a114:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a118:	e79e      	b.n	801a058 <__kernel_rem_pio2f+0xe0>
 801a11a:	d105      	bne.n	801a128 <__kernel_rem_pio2f+0x1b0>
 801a11c:	1e60      	subs	r0, r4, #1
 801a11e:	a908      	add	r1, sp, #32
 801a120:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801a124:	11f6      	asrs	r6, r6, #7
 801a126:	e7c8      	b.n	801a0ba <__kernel_rem_pio2f+0x142>
 801a128:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a12c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a134:	da31      	bge.n	801a19a <__kernel_rem_pio2f+0x222>
 801a136:	2600      	movs	r6, #0
 801a138:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a140:	f040 8098 	bne.w	801a274 <__kernel_rem_pio2f+0x2fc>
 801a144:	1e60      	subs	r0, r4, #1
 801a146:	2200      	movs	r2, #0
 801a148:	4550      	cmp	r0, sl
 801a14a:	da4b      	bge.n	801a1e4 <__kernel_rem_pio2f+0x26c>
 801a14c:	2a00      	cmp	r2, #0
 801a14e:	d065      	beq.n	801a21c <__kernel_rem_pio2f+0x2a4>
 801a150:	3c01      	subs	r4, #1
 801a152:	ab08      	add	r3, sp, #32
 801a154:	3d08      	subs	r5, #8
 801a156:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d0f8      	beq.n	801a150 <__kernel_rem_pio2f+0x1d8>
 801a15e:	4628      	mov	r0, r5
 801a160:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a164:	f7ff fe7c 	bl	8019e60 <scalbnf>
 801a168:	1c63      	adds	r3, r4, #1
 801a16a:	aa44      	add	r2, sp, #272	@ 0x110
 801a16c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801a26c <__kernel_rem_pio2f+0x2f4>
 801a170:	0099      	lsls	r1, r3, #2
 801a172:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a176:	4623      	mov	r3, r4
 801a178:	2b00      	cmp	r3, #0
 801a17a:	f280 80a9 	bge.w	801a2d0 <__kernel_rem_pio2f+0x358>
 801a17e:	4623      	mov	r3, r4
 801a180:	2b00      	cmp	r3, #0
 801a182:	f2c0 80c7 	blt.w	801a314 <__kernel_rem_pio2f+0x39c>
 801a186:	aa44      	add	r2, sp, #272	@ 0x110
 801a188:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801a18c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801a264 <__kernel_rem_pio2f+0x2ec>
 801a190:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801a270 <__kernel_rem_pio2f+0x2f8>
 801a194:	2000      	movs	r0, #0
 801a196:	1ae2      	subs	r2, r4, r3
 801a198:	e0b1      	b.n	801a2fe <__kernel_rem_pio2f+0x386>
 801a19a:	2602      	movs	r6, #2
 801a19c:	e78f      	b.n	801a0be <__kernel_rem_pio2f+0x146>
 801a19e:	f852 1b04 	ldr.w	r1, [r2], #4
 801a1a2:	b948      	cbnz	r0, 801a1b8 <__kernel_rem_pio2f+0x240>
 801a1a4:	b121      	cbz	r1, 801a1b0 <__kernel_rem_pio2f+0x238>
 801a1a6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801a1aa:	f842 1c04 	str.w	r1, [r2, #-4]
 801a1ae:	2101      	movs	r1, #1
 801a1b0:	f10e 0e01 	add.w	lr, lr, #1
 801a1b4:	4608      	mov	r0, r1
 801a1b6:	e787      	b.n	801a0c8 <__kernel_rem_pio2f+0x150>
 801a1b8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801a1bc:	e7f5      	b.n	801a1aa <__kernel_rem_pio2f+0x232>
 801a1be:	f104 3cff 	add.w	ip, r4, #4294967295
 801a1c2:	aa08      	add	r2, sp, #32
 801a1c4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a1c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801a1cc:	a908      	add	r1, sp, #32
 801a1ce:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a1d2:	e781      	b.n	801a0d8 <__kernel_rem_pio2f+0x160>
 801a1d4:	f104 3cff 	add.w	ip, r4, #4294967295
 801a1d8:	aa08      	add	r2, sp, #32
 801a1da:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a1de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a1e2:	e7f3      	b.n	801a1cc <__kernel_rem_pio2f+0x254>
 801a1e4:	a908      	add	r1, sp, #32
 801a1e6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a1ea:	3801      	subs	r0, #1
 801a1ec:	430a      	orrs	r2, r1
 801a1ee:	e7ab      	b.n	801a148 <__kernel_rem_pio2f+0x1d0>
 801a1f0:	3201      	adds	r2, #1
 801a1f2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a1f6:	2e00      	cmp	r6, #0
 801a1f8:	d0fa      	beq.n	801a1f0 <__kernel_rem_pio2f+0x278>
 801a1fa:	9905      	ldr	r1, [sp, #20]
 801a1fc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801a200:	eb0d 0001 	add.w	r0, sp, r1
 801a204:	18e6      	adds	r6, r4, r3
 801a206:	a91c      	add	r1, sp, #112	@ 0x70
 801a208:	f104 0c01 	add.w	ip, r4, #1
 801a20c:	384c      	subs	r0, #76	@ 0x4c
 801a20e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801a212:	4422      	add	r2, r4
 801a214:	4562      	cmp	r2, ip
 801a216:	da04      	bge.n	801a222 <__kernel_rem_pio2f+0x2aa>
 801a218:	4614      	mov	r4, r2
 801a21a:	e710      	b.n	801a03e <__kernel_rem_pio2f+0xc6>
 801a21c:	9804      	ldr	r0, [sp, #16]
 801a21e:	2201      	movs	r2, #1
 801a220:	e7e7      	b.n	801a1f2 <__kernel_rem_pio2f+0x27a>
 801a222:	9903      	ldr	r1, [sp, #12]
 801a224:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a228:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a22c:	9105      	str	r1, [sp, #20]
 801a22e:	ee07 1a90 	vmov	s15, r1
 801a232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a236:	2400      	movs	r4, #0
 801a238:	ece6 7a01 	vstmia	r6!, {s15}
 801a23c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801a270 <__kernel_rem_pio2f+0x2f8>
 801a240:	46b1      	mov	r9, r6
 801a242:	455c      	cmp	r4, fp
 801a244:	dd04      	ble.n	801a250 <__kernel_rem_pio2f+0x2d8>
 801a246:	ece0 7a01 	vstmia	r0!, {s15}
 801a24a:	f10c 0c01 	add.w	ip, ip, #1
 801a24e:	e7e1      	b.n	801a214 <__kernel_rem_pio2f+0x29c>
 801a250:	ecfe 6a01 	vldmia	lr!, {s13}
 801a254:	ed39 7a01 	vldmdb	r9!, {s14}
 801a258:	3401      	adds	r4, #1
 801a25a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a25e:	e7f0      	b.n	801a242 <__kernel_rem_pio2f+0x2ca>
 801a260:	0801d0c8 	.word	0x0801d0c8
 801a264:	0801d09c 	.word	0x0801d09c
 801a268:	43800000 	.word	0x43800000
 801a26c:	3b800000 	.word	0x3b800000
 801a270:	00000000 	.word	0x00000000
 801a274:	9b02      	ldr	r3, [sp, #8]
 801a276:	eeb0 0a48 	vmov.f32	s0, s16
 801a27a:	eba3 0008 	sub.w	r0, r3, r8
 801a27e:	f7ff fdef 	bl	8019e60 <scalbnf>
 801a282:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801a268 <__kernel_rem_pio2f+0x2f0>
 801a286:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a28e:	db19      	blt.n	801a2c4 <__kernel_rem_pio2f+0x34c>
 801a290:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801a26c <__kernel_rem_pio2f+0x2f4>
 801a294:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a298:	aa08      	add	r2, sp, #32
 801a29a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a29e:	3508      	adds	r5, #8
 801a2a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2a4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a2a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a2ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a2b0:	ee10 3a10 	vmov	r3, s0
 801a2b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a2b8:	ee17 3a90 	vmov	r3, s15
 801a2bc:	3401      	adds	r4, #1
 801a2be:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a2c2:	e74c      	b.n	801a15e <__kernel_rem_pio2f+0x1e6>
 801a2c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a2c8:	aa08      	add	r2, sp, #32
 801a2ca:	ee10 3a10 	vmov	r3, s0
 801a2ce:	e7f6      	b.n	801a2be <__kernel_rem_pio2f+0x346>
 801a2d0:	a808      	add	r0, sp, #32
 801a2d2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a2d6:	9001      	str	r0, [sp, #4]
 801a2d8:	ee07 0a90 	vmov	s15, r0
 801a2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2e0:	3b01      	subs	r3, #1
 801a2e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a2e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a2ea:	ed62 7a01 	vstmdb	r2!, {s15}
 801a2ee:	e743      	b.n	801a178 <__kernel_rem_pio2f+0x200>
 801a2f0:	ecfc 6a01 	vldmia	ip!, {s13}
 801a2f4:	ecb5 7a01 	vldmia	r5!, {s14}
 801a2f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a2fc:	3001      	adds	r0, #1
 801a2fe:	4550      	cmp	r0, sl
 801a300:	dc01      	bgt.n	801a306 <__kernel_rem_pio2f+0x38e>
 801a302:	4290      	cmp	r0, r2
 801a304:	ddf4      	ble.n	801a2f0 <__kernel_rem_pio2f+0x378>
 801a306:	a858      	add	r0, sp, #352	@ 0x160
 801a308:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801a30c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801a310:	3b01      	subs	r3, #1
 801a312:	e735      	b.n	801a180 <__kernel_rem_pio2f+0x208>
 801a314:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a316:	2b02      	cmp	r3, #2
 801a318:	dc09      	bgt.n	801a32e <__kernel_rem_pio2f+0x3b6>
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	dc27      	bgt.n	801a36e <__kernel_rem_pio2f+0x3f6>
 801a31e:	d040      	beq.n	801a3a2 <__kernel_rem_pio2f+0x42a>
 801a320:	f009 0007 	and.w	r0, r9, #7
 801a324:	b059      	add	sp, #356	@ 0x164
 801a326:	ecbd 8b04 	vpop	{d8-d9}
 801a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a32e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a330:	2b03      	cmp	r3, #3
 801a332:	d1f5      	bne.n	801a320 <__kernel_rem_pio2f+0x3a8>
 801a334:	aa30      	add	r2, sp, #192	@ 0xc0
 801a336:	1f0b      	subs	r3, r1, #4
 801a338:	4413      	add	r3, r2
 801a33a:	461a      	mov	r2, r3
 801a33c:	4620      	mov	r0, r4
 801a33e:	2800      	cmp	r0, #0
 801a340:	dc50      	bgt.n	801a3e4 <__kernel_rem_pio2f+0x46c>
 801a342:	4622      	mov	r2, r4
 801a344:	2a01      	cmp	r2, #1
 801a346:	dc5d      	bgt.n	801a404 <__kernel_rem_pio2f+0x48c>
 801a348:	ab30      	add	r3, sp, #192	@ 0xc0
 801a34a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801a270 <__kernel_rem_pio2f+0x2f8>
 801a34e:	440b      	add	r3, r1
 801a350:	2c01      	cmp	r4, #1
 801a352:	dc67      	bgt.n	801a424 <__kernel_rem_pio2f+0x4ac>
 801a354:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801a358:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801a35c:	2e00      	cmp	r6, #0
 801a35e:	d167      	bne.n	801a430 <__kernel_rem_pio2f+0x4b8>
 801a360:	edc7 6a00 	vstr	s13, [r7]
 801a364:	ed87 7a01 	vstr	s14, [r7, #4]
 801a368:	edc7 7a02 	vstr	s15, [r7, #8]
 801a36c:	e7d8      	b.n	801a320 <__kernel_rem_pio2f+0x3a8>
 801a36e:	ab30      	add	r3, sp, #192	@ 0xc0
 801a370:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801a270 <__kernel_rem_pio2f+0x2f8>
 801a374:	440b      	add	r3, r1
 801a376:	4622      	mov	r2, r4
 801a378:	2a00      	cmp	r2, #0
 801a37a:	da24      	bge.n	801a3c6 <__kernel_rem_pio2f+0x44e>
 801a37c:	b34e      	cbz	r6, 801a3d2 <__kernel_rem_pio2f+0x45a>
 801a37e:	eef1 7a47 	vneg.f32	s15, s14
 801a382:	edc7 7a00 	vstr	s15, [r7]
 801a386:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801a38a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a38e:	aa31      	add	r2, sp, #196	@ 0xc4
 801a390:	2301      	movs	r3, #1
 801a392:	429c      	cmp	r4, r3
 801a394:	da20      	bge.n	801a3d8 <__kernel_rem_pio2f+0x460>
 801a396:	b10e      	cbz	r6, 801a39c <__kernel_rem_pio2f+0x424>
 801a398:	eef1 7a67 	vneg.f32	s15, s15
 801a39c:	edc7 7a01 	vstr	s15, [r7, #4]
 801a3a0:	e7be      	b.n	801a320 <__kernel_rem_pio2f+0x3a8>
 801a3a2:	ab30      	add	r3, sp, #192	@ 0xc0
 801a3a4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801a270 <__kernel_rem_pio2f+0x2f8>
 801a3a8:	440b      	add	r3, r1
 801a3aa:	2c00      	cmp	r4, #0
 801a3ac:	da05      	bge.n	801a3ba <__kernel_rem_pio2f+0x442>
 801a3ae:	b10e      	cbz	r6, 801a3b4 <__kernel_rem_pio2f+0x43c>
 801a3b0:	eef1 7a67 	vneg.f32	s15, s15
 801a3b4:	edc7 7a00 	vstr	s15, [r7]
 801a3b8:	e7b2      	b.n	801a320 <__kernel_rem_pio2f+0x3a8>
 801a3ba:	ed33 7a01 	vldmdb	r3!, {s14}
 801a3be:	3c01      	subs	r4, #1
 801a3c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a3c4:	e7f1      	b.n	801a3aa <__kernel_rem_pio2f+0x432>
 801a3c6:	ed73 7a01 	vldmdb	r3!, {s15}
 801a3ca:	3a01      	subs	r2, #1
 801a3cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a3d0:	e7d2      	b.n	801a378 <__kernel_rem_pio2f+0x400>
 801a3d2:	eef0 7a47 	vmov.f32	s15, s14
 801a3d6:	e7d4      	b.n	801a382 <__kernel_rem_pio2f+0x40a>
 801a3d8:	ecb2 7a01 	vldmia	r2!, {s14}
 801a3dc:	3301      	adds	r3, #1
 801a3de:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a3e2:	e7d6      	b.n	801a392 <__kernel_rem_pio2f+0x41a>
 801a3e4:	ed72 7a01 	vldmdb	r2!, {s15}
 801a3e8:	edd2 6a01 	vldr	s13, [r2, #4]
 801a3ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a3f0:	3801      	subs	r0, #1
 801a3f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3f6:	ed82 7a00 	vstr	s14, [r2]
 801a3fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a3fe:	edc2 7a01 	vstr	s15, [r2, #4]
 801a402:	e79c      	b.n	801a33e <__kernel_rem_pio2f+0x3c6>
 801a404:	ed73 7a01 	vldmdb	r3!, {s15}
 801a408:	edd3 6a01 	vldr	s13, [r3, #4]
 801a40c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a410:	3a01      	subs	r2, #1
 801a412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a416:	ed83 7a00 	vstr	s14, [r3]
 801a41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a41e:	edc3 7a01 	vstr	s15, [r3, #4]
 801a422:	e78f      	b.n	801a344 <__kernel_rem_pio2f+0x3cc>
 801a424:	ed33 7a01 	vldmdb	r3!, {s14}
 801a428:	3c01      	subs	r4, #1
 801a42a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a42e:	e78f      	b.n	801a350 <__kernel_rem_pio2f+0x3d8>
 801a430:	eef1 6a66 	vneg.f32	s13, s13
 801a434:	eeb1 7a47 	vneg.f32	s14, s14
 801a438:	edc7 6a00 	vstr	s13, [r7]
 801a43c:	ed87 7a01 	vstr	s14, [r7, #4]
 801a440:	eef1 7a67 	vneg.f32	s15, s15
 801a444:	e790      	b.n	801a368 <__kernel_rem_pio2f+0x3f0>
 801a446:	bf00      	nop

0801a448 <floorf>:
 801a448:	ee10 3a10 	vmov	r3, s0
 801a44c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a450:	3a7f      	subs	r2, #127	@ 0x7f
 801a452:	2a16      	cmp	r2, #22
 801a454:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a458:	dc2b      	bgt.n	801a4b2 <floorf+0x6a>
 801a45a:	2a00      	cmp	r2, #0
 801a45c:	da12      	bge.n	801a484 <floorf+0x3c>
 801a45e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a4c4 <floorf+0x7c>
 801a462:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a466:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a46e:	dd06      	ble.n	801a47e <floorf+0x36>
 801a470:	2b00      	cmp	r3, #0
 801a472:	da24      	bge.n	801a4be <floorf+0x76>
 801a474:	2900      	cmp	r1, #0
 801a476:	4b14      	ldr	r3, [pc, #80]	@ (801a4c8 <floorf+0x80>)
 801a478:	bf08      	it	eq
 801a47a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801a47e:	ee00 3a10 	vmov	s0, r3
 801a482:	4770      	bx	lr
 801a484:	4911      	ldr	r1, [pc, #68]	@ (801a4cc <floorf+0x84>)
 801a486:	4111      	asrs	r1, r2
 801a488:	420b      	tst	r3, r1
 801a48a:	d0fa      	beq.n	801a482 <floorf+0x3a>
 801a48c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801a4c4 <floorf+0x7c>
 801a490:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a494:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a49c:	ddef      	ble.n	801a47e <floorf+0x36>
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	bfbe      	ittt	lt
 801a4a2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801a4a6:	fa40 f202 	asrlt.w	r2, r0, r2
 801a4aa:	189b      	addlt	r3, r3, r2
 801a4ac:	ea23 0301 	bic.w	r3, r3, r1
 801a4b0:	e7e5      	b.n	801a47e <floorf+0x36>
 801a4b2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a4b6:	d3e4      	bcc.n	801a482 <floorf+0x3a>
 801a4b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a4bc:	4770      	bx	lr
 801a4be:	2300      	movs	r3, #0
 801a4c0:	e7dd      	b.n	801a47e <floorf+0x36>
 801a4c2:	bf00      	nop
 801a4c4:	7149f2ca 	.word	0x7149f2ca
 801a4c8:	bf800000 	.word	0xbf800000
 801a4cc:	007fffff 	.word	0x007fffff

0801a4d0 <_init>:
 801a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4d2:	bf00      	nop
 801a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4d6:	bc08      	pop	{r3}
 801a4d8:	469e      	mov	lr, r3
 801a4da:	4770      	bx	lr

0801a4dc <_fini>:
 801a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4de:	bf00      	nop
 801a4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4e2:	bc08      	pop	{r3}
 801a4e4:	469e      	mov	lr, r3
 801a4e6:	4770      	bx	lr
