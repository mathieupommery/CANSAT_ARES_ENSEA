
code_propre_cansat_Freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190e0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002774  080192c0  080192c0  0001a2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba34  0801ba34  0001d218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ba34  0801ba34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba3c  0801ba3c  0001d218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba3c  0801ba3c  0001ca3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ba40  0801ba40  0001ca40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0801ba44  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e44  20000218  0801bc5c  0001d218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000405c  0801bc5c  0001e05c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000362cc  00000000  00000000  0001d248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077a8  00000000  00000000  00053514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002868  00000000  00000000  0005acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f16  00000000  00000000  0005d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bd5  00000000  00000000  0005f43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038330  00000000  00000000  00089013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef1fe  00000000  00000000  000c1343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b0541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bfc0  00000000  00000000  001b0584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001bc544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000218 	.word	0x20000218
 80001fc:	00000000 	.word	0x00000000
 8000200:	080192a8 	.word	0x080192a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000021c 	.word	0x2000021c
 800021c:	080192a8 	.word	0x080192a8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800107a:	2354      	movs	r3, #84	@ 0x54
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2210      	movs	r2, #16
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4838      	ldr	r0, [pc, #224]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f006 ff42 	bl	8007f1c <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001098:	234c      	movs	r3, #76	@ 0x4c
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2211      	movs	r2, #17
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4830      	ldr	r0, [pc, #192]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f006 ff33 	bl	8007f1c <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2212      	movs	r2, #18
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	4829      	ldr	r0, [pc, #164]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f006 ff24 	bl	8007f1c <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2215      	movs	r2, #21
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f006 ff15 	bl	8007f1c <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	481a      	ldr	r0, [pc, #104]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f006 ff06 	bl	8007f1c <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2217      	movs	r2, #23
 8001126:	21d6      	movs	r1, #214	@ 0xd6
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800112a:	f006 fef7 	bl	8007f1c <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	221e      	movs	r2, #30
 8001144:	21d6      	movs	r1, #214	@ 0xd6
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001148:	f006 fffc 	bl	8008144 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <Init_HighPerf_Mode_6_axis+0x108>)
 8001158:	f013 fe6a 	bl	8014e30 <puts>
        }
        if (status & 0x02) {
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <Init_HighPerf_Mode_6_axis+0x10c>)
 8001168:	f013 fe62 	bl	8014e30 <puts>
        }

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200003a8 	.word	0x200003a8
 8001178:	080192fc 	.word	0x080192fc
 800117c:	08019330 	.word	0x08019330

08001180 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	@ 0x38
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030b 	add.w	r3, r7, #11
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	221e      	movs	r2, #30
 800119c:	21d6      	movs	r1, #214	@ 0xd6
 800119e:	4874      	ldr	r0, [pc, #464]	@ (8001370 <Read_sensor_data+0x1f0>)
 80011a0:	f006 ffd0 	bl	8008144 <HAL_I2C_Mem_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 80011a8:	7ffb      	ldrb	r3, [r7, #31]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <Read_sensor_data+0x32>
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	e0da      	b.n	8001368 <Read_sensor_data+0x1e8>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <Read_sensor_data+0x46>
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0ce      	b.n	8001368 <Read_sensor_data+0x1e8>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ce:	e044      	b.n	800125a <Read_sensor_data+0xda>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	3311      	adds	r3, #17
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011e0:	7f3b      	ldrb	r3, [r7, #28]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 030a 	add.w	r3, r7, #10
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	21d6      	movs	r1, #214	@ 0xd6
 80011f8:	485d      	ldr	r0, [pc, #372]	@ (8001370 <Read_sensor_data+0x1f0>)
 80011fa:	f006 ffa3 	bl	8008144 <HAL_I2C_Mem_Read>
 80011fe:	4603      	mov	r3, r0
 8001200:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <Read_sensor_data+0x8c>
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	e0ad      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800120c:	7efb      	ldrb	r3, [r7, #27]
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0309 	add.w	r3, r7, #9
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	21d6      	movs	r1, #214	@ 0xd6
 8001224:	4852      	ldr	r0, [pc, #328]	@ (8001370 <Read_sensor_data+0x1f0>)
 8001226:	f006 ff8d 	bl	8008144 <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <Read_sensor_data+0xb8>
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	e097      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001238:	7a7b      	ldrb	r3, [r7, #9]
 800123a:	b21b      	sxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7abb      	ldrb	r3, [r7, #10]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	3328      	adds	r3, #40	@ 0x28
 800124e:	443b      	add	r3, r7
 8001250:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	3301      	adds	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	2b02      	cmp	r3, #2
 800125e:	ddb7      	ble.n	80011d0 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	e044      	b.n	80012f0 <Read_sensor_data+0x170>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	3314      	adds	r3, #20
 800126a:	b2db      	uxtb	r3, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001270:	7fbb      	ldrb	r3, [r7, #30]
 8001272:	3301      	adds	r3, #1
 8001274:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001276:	7fbb      	ldrb	r3, [r7, #30]
 8001278:	b29a      	uxth	r2, r3
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f107 030a 	add.w	r3, r7, #10
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	21d6      	movs	r1, #214	@ 0xd6
 800128e:	4838      	ldr	r0, [pc, #224]	@ (8001370 <Read_sensor_data+0x1f0>)
 8001290:	f006 ff58 	bl	8008144 <HAL_I2C_Mem_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Read_sensor_data+0x122>
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	e062      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80012a2:	7f7b      	ldrb	r3, [r7, #29]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	f107 0309 	add.w	r3, r7, #9
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	21d6      	movs	r1, #214	@ 0xd6
 80012ba:	482d      	ldr	r0, [pc, #180]	@ (8001370 <Read_sensor_data+0x1f0>)
 80012bc:	f006 ff42 	bl	8008144 <HAL_I2C_Mem_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <Read_sensor_data+0x14e>
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	e04c      	b.n	8001368 <Read_sensor_data+0x1e8>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80012ce:	7a7b      	ldrb	r3, [r7, #9]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3328      	adds	r3, #40	@ 0x28
 80012e4:	443b      	add	r3, r7
 80012e6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	ddb7      	ble.n	8001266 <Read_sensor_data+0xe6>
	}
	data->AccelX =(float) accel_data[0]*1.0;
 80012f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a00 	vstr	s15, [r3]
	data->AccelY =(float) accel_data[1]*1.0;
 8001308:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a01 	vstr	s15, [r3, #4]
	data->AccelZ =(float) accel_data[2]*1.0;
 800131a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edc3 7a02 	vstr	s15, [r3, #8]
	data->GyroX = gyro_data[0];
 800132c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 8001336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 8001340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001344:	461a      	mov	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 800134a:	f000 f815 	bl	8001378 <Read_temp>
 800134e:	ec51 0b10 	vmov	r0, r1, d0
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <Read_sensor_data+0x1f4>)
 8001358:	f7fe ffbe 	bl	80002d8 <__aeabi_dsub>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200003a8 	.word	0x200003a8
 8001374:	40210000 	.word	0x40210000

08001378 <Read_temp>:

double Read_temp() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2301      	movs	r3, #1
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	2220      	movs	r2, #32
 8001390:	21d6      	movs	r1, #214	@ 0xd6
 8001392:	481f      	ldr	r0, [pc, #124]	@ (8001410 <Read_temp+0x98>)
 8001394:	f006 fed6 	bl	8008144 <HAL_I2C_Mem_Read>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2221      	movs	r2, #33	@ 0x21
 80013ae:	21d6      	movs	r1, #214	@ 0xd6
 80013b0:	4817      	ldr	r0, [pc, #92]	@ (8001410 <Read_temp+0x98>)
 80013b2:	f006 fec7 	bl	8008144 <HAL_I2C_Mem_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 80013ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8d0 	bl	8000574 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <Read_temp+0x9c>)
 80013da:	f7ff fa5f 	bl	800089c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <Read_temp+0xa0>)
 80013ec:	f7fe ff76 	bl	80002dc <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 80013f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001400:	eeb0 0a47 	vmov.f32	s0, s14
 8001404:	eef0 0a67 	vmov.f32	s1, s15
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200003a8 	.word	0x200003a8
 8001414:	40700000 	.word	0x40700000
 8001418:	40390000 	.word	0x40390000
 800141c:	00000000 	.word	0x00000000

08001420 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	if (GNSS->uartWorkingBuffer[0] == 0xB5 && GNSS->uartWorkingBuffer[1] == 0x62) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7a1b      	ldrb	r3, [r3, #8]
 800142c:	2bb5      	cmp	r3, #181	@ 0xb5
 800142e:	f040 81d7 	bne.w	80017e0 <GNSS_ParsePVTData+0x3c0>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a5b      	ldrb	r3, [r3, #9]
 8001436:	2b62      	cmp	r3, #98	@ 0x62
 8001438:	f040 81d2 	bne.w	80017e0 <GNSS_ParsePVTData+0x3c0>
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7c9a      	ldrb	r2, [r3, #18]
 8001440:	4b9f      	ldr	r3, [pc, #636]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001442:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7c9a      	ldrb	r2, [r3, #18]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7cda      	ldrb	r2, [r3, #19]
 8001452:	4b9b      	ldr	r3, [pc, #620]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001454:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7cda      	ldrb	r2, [r3, #19]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 8001460:	4b97      	ldr	r3, [pc, #604]	@ (80016c0 <GNSS_ParsePVTData+0x2a0>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7d1a      	ldrb	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7d5a      	ldrb	r2, [r3, #21]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7d9a      	ldrb	r2, [r3, #22]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7dda      	ldrb	r2, [r3, #23]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e1a      	ldrb	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

	for (int var = 0; var < 4; ++var) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014b8:	e017      	b.n	80014ea <GNSS_ParsePVTData+0xca>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 80014ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014bc:	331e      	adds	r3, #30
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	7a19      	ldrb	r1, [r3, #8]
 80014c4:	4a7f      	ldr	r2, [pc, #508]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 80014ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d0:	331e      	adds	r3, #30
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	7a19      	ldrb	r1, [r3, #8]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014dc:	4413      	add	r3, r2
 80014de:	3380      	adds	r3, #128	@ 0x80
 80014e0:	460a      	mov	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e6:	3301      	adds	r3, #1
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	dde4      	ble.n	80014ba <GNSS_ParsePVTData+0x9a>
	}
	GNSS->lon = iLong.iLong;
 80014f0:	4b74      	ldr	r3, [pc, #464]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	67da      	str	r2, [r3, #124]	@ 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80014f8:	4b72      	ldr	r3, [pc, #456]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80016c8 <GNSS_ParsePVTData+0x2a8>
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001516:	e017      	b.n	8001548 <GNSS_ParsePVTData+0x128>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 8001518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151a:	3322      	adds	r3, #34	@ 0x22
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	7a19      	ldrb	r1, [r3, #8]
 8001522:	4a68      	ldr	r2, [pc, #416]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001526:	4413      	add	r3, r2
 8001528:	460a      	mov	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 800152c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152e:	3322      	adds	r3, #34	@ 0x22
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	7a19      	ldrb	r1, [r3, #8]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153a:	4413      	add	r3, r2
 800153c:	3388      	adds	r3, #136	@ 0x88
 800153e:	460a      	mov	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	3301      	adds	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154a:	2b03      	cmp	r3, #3
 800154c:	dde4      	ble.n	8001518 <GNSS_ParsePVTData+0xf8>
	}
	GNSS->lat = iLong.iLong;
 800154e:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001558:	4b5a      	ldr	r3, [pc, #360]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001564:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80016c8 <GNSS_ParsePVTData+0x2a8>
 8001568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
 8001576:	e00c      	b.n	8001592 <GNSS_ParsePVTData+0x172>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	3326      	adds	r3, #38	@ 0x26
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	7a19      	ldrb	r1, [r3, #8]
 8001582:	4a50      	ldr	r2, [pc, #320]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	4413      	add	r3, r2
 8001588:	460a      	mov	r2, r1
 800158a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	3301      	adds	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	2b03      	cmp	r3, #3
 8001596:	ddef      	ble.n	8001578 <GNSS_ParsePVTData+0x158>
	}
	GNSS->height = iLong.iLong;
 8001598:	4b4a      	ldr	r3, [pc, #296]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->fheight=(float)GNSS->height/1000.0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 80015b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98


	for (int var = 0; var < 4; ++var) {
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	e017      	b.n	80015f4 <GNSS_ParsePVTData+0x1d4>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	332a      	adds	r3, #42	@ 0x2a
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	7a19      	ldrb	r1, [r3, #8]
 80015ce:	4a3d      	ldr	r2, [pc, #244]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	4413      	add	r3, r2
 80015d4:	460a      	mov	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	332a      	adds	r3, #42	@ 0x2a
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	7a19      	ldrb	r1, [r3, #8]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	4413      	add	r3, r2
 80015e8:	33a0      	adds	r3, #160	@ 0xa0
 80015ea:	460a      	mov	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	3301      	adds	r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	dde4      	ble.n	80015c4 <GNSS_ParsePVTData+0x1a4>
	}
	GNSS->hMSL = iLong.iLong;
 80015fa:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <GNSS_ParsePVTData+0x2a4>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001612:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 8001616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	e00c      	b.n	8001640 <GNSS_ParsePVTData+0x220>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	332e      	adds	r3, #46	@ 0x2e
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	7a19      	ldrb	r1, [r3, #8]
 8001630:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	460a      	mov	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b03      	cmp	r3, #3
 8001644:	ddef      	ble.n	8001626 <GNSS_ParsePVTData+0x206>
	}
	GNSS->hAcc = uLong.uLong;
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GNSS->fhACC=(float)GNSS->hAcc/1000.0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165e:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 8001662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac

	for (int var = 0; var < 4; ++var) {
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	e00c      	b.n	800168c <GNSS_ParsePVTData+0x26c>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	3332      	adds	r3, #50	@ 0x32
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	7a19      	ldrb	r1, [r3, #8]
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	3301      	adds	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b03      	cmp	r3, #3
 8001690:	ddef      	ble.n	8001672 <GNSS_ParsePVTData+0x252>
	}
	GNSS->vAcc = uLong.uLong;
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <GNSS_ParsePVTData+0x2b0>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016aa:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80016cc <GNSS_ParsePVTData+0x2ac>
 80016ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	for (int var = 0; var < 4; ++var) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e022      	b.n	8001704 <GNSS_ParsePVTData+0x2e4>
 80016be:	bf00      	nop
 80016c0:	20000234 	.word	0x20000234
 80016c4:	2000023c 	.word	0x2000023c
 80016c8:	4b189680 	.word	0x4b189680
 80016cc:	447a0000 	.word	0x447a0000
 80016d0:	20000238 	.word	0x20000238
			iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	333e      	adds	r3, #62	@ 0x3e
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	7a19      	ldrb	r1, [r3, #8]
 80016de:	4a44      	ldr	r2, [pc, #272]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4413      	add	r3, r2
 80016e4:	460a      	mov	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
			GNSS->vspeedBytes[var] = GNSS->uartWorkingBuffer[var + 62];
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	333e      	adds	r3, #62	@ 0x3e
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	7a19      	ldrb	r1, [r3, #8]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4413      	add	r3, r2
 80016f8:	33c8      	adds	r3, #200	@ 0xc8
 80016fa:	460a      	mov	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b03      	cmp	r3, #3
 8001708:	dde4      	ble.n	80016d4 <GNSS_ParsePVTData+0x2b4>
		}
	GNSS->vspeed = iLong.iLong;
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	GNSS->fvspeed=(float)GNSS->vspeed/1000.0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001722:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80017f4 <GNSS_ParsePVTData+0x3d4>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

	for (int var = 0; var < 4; ++var) {
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	e017      	b.n	8001766 <GNSS_ParsePVTData+0x346>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	3342      	adds	r3, #66	@ 0x42
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	7a19      	ldrb	r1, [r3, #8]
 8001740:	4a2b      	ldr	r2, [pc, #172]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4413      	add	r3, r2
 8001746:	460a      	mov	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3342      	adds	r3, #66	@ 0x42
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	7a19      	ldrb	r1, [r3, #8]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	33bc      	adds	r3, #188	@ 0xbc
 800175c:	460a      	mov	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	3301      	adds	r3, #1
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b03      	cmp	r3, #3
 800176a:	dde4      	ble.n	8001736 <GNSS_ParsePVTData+0x316>
	}
	GNSS->gSpeed = iLong.iLong;
 800176c:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80017f4 <GNSS_ParsePVTData+0x3d4>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	for (int var = 0; var < 4; ++var) {
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00c      	b.n	80017b2 <GNSS_ParsePVTData+0x392>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3346      	adds	r3, #70	@ 0x46
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	7a19      	ldrb	r1, [r3, #8]
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	460a      	mov	r2, r1
 80017aa:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	ddef      	ble.n	8001798 <GNSS_ParsePVTData+0x378>
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <GNSS_ParsePVTData+0x3d0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fed9 	bl	8000574 <__aeabi_i2d>
 80017c2:	a309      	add	r3, pc, #36	@ (adr r3, 80017e8 <GNSS_ParsePVTData+0x3c8>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ff3e 	bl	8000648 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9e8 	bl	8000ba8 <__aeabi_d2iz>
 80017d8:	4602      	mov	r2, r0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
}
 80017e0:	bf00      	nop
 80017e2:	3730      	adds	r7, #48	@ 0x30
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	88e368f1 	.word	0x88e368f1
 80017ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80017f0:	2000023c 	.word	0x2000023c
 80017f4:	447a0000 	.word	0x447a0000

080017f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2220      	movs	r2, #32
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f013 fc45 	bl	80150a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001816:	4b40      	ldr	r3, [pc, #256]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001818:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800181c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800181e:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001820:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001824:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001826:	4b3c      	ldr	r3, [pc, #240]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800182c:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <MX_ADC1_Init+0x120>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001832:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001838:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <MX_ADC1_Init+0x120>)
 800183a:	2201      	movs	r2, #1
 800183c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800183e:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001840:	2208      	movs	r2, #8
 8001842:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001844:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001846:	2200      	movs	r2, #0
 8001848:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800184a:	4b33      	ldr	r3, [pc, #204]	@ (8001918 <MX_ADC1_Init+0x120>)
 800184c:	2201      	movs	r2, #1
 800184e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001852:	2203      	movs	r2, #3
 8001854:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800185e:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001860:	2200      	movs	r2, #0
 8001862:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001866:	2200      	movs	r2, #0
 8001868:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800186a:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <MX_ADC1_Init+0x120>)
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001872:	4b29      	ldr	r3, [pc, #164]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001878:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <MX_ADC1_Init+0x120>)
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001880:	4825      	ldr	r0, [pc, #148]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001882:	f004 fa37 	bl	8005cf4 <HAL_ADC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800188c:	f001 fa8c 	bl	8002da8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	481f      	ldr	r0, [pc, #124]	@ (8001918 <MX_ADC1_Init+0x120>)
 800189c:	f005 fbfc 	bl	8007098 <HAL_ADCEx_MultiModeConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018a6:	f001 fa7f 	bl	8002da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_ADC1_Init+0x124>)
 80018ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ae:	2306      	movs	r3, #6
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80018b2:	2307      	movs	r3, #7
 80018b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018b6:	237f      	movs	r3, #127	@ 0x7f
 80018b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018ba:	2304      	movs	r3, #4
 80018bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4814      	ldr	r0, [pc, #80]	@ (8001918 <MX_ADC1_Init+0x120>)
 80018c8:	f004 fe84 	bl	80065d4 <HAL_ADC_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018d2:	f001 fa69 	bl	8002da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80018d6:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <MX_ADC1_Init+0x128>)
 80018d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018da:	230c      	movs	r3, #12
 80018dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	@ (8001918 <MX_ADC1_Init+0x120>)
 80018e4:	f004 fe76 	bl	80065d4 <HAL_ADC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80018ee:	f001 fa5b 	bl	8002da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <MX_ADC1_Init+0x12c>)
 80018f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018f6:	2312      	movs	r3, #18
 80018f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	@ (8001918 <MX_ADC1_Init+0x120>)
 8001900:	f004 fe68 	bl	80065d4 <HAL_ADC_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800190a:	f001 fa4d 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	@ 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000240 	.word	0x20000240
 800191c:	cb840000 	.word	0xcb840000
 8001920:	c3210000 	.word	0xc3210000
 8001924:	0c900008 	.word	0x0c900008

08001928 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b09a      	sub	sp, #104	@ 0x68
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2244      	movs	r2, #68	@ 0x44
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f013 fba9 	bl	80150a0 <memset>
  if(adcHandle->Instance==ADC1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001956:	d167      	bne.n	8001a28 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800195c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800195e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4618      	mov	r0, r3
 800196a:	f007 fe6f 	bl	800964c <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001974:	f001 fa18 	bl	8002da8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001978:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 800197e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001994:	4a26      	ldr	r2, [pc, #152]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199c:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <HAL_ADC_MspInit+0x108>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a8:	2304      	movs	r3, #4
 80019aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ac:	2303      	movs	r3, #3
 80019ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019be:	f006 f82d 	bl	8007a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a38 <HAL_ADC_MspInit+0x110>)
 80019c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019ca:	2205      	movs	r2, #5
 80019cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019dc:	2280      	movs	r2, #128	@ 0x80
 80019de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019f0:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019f2:	2220      	movs	r2, #32
 80019f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019fc:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 80019fe:	f005 fccf 	bl	80073a0 <HAL_DMA_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001a08:	f001 f9ce 	bl	8002da8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a09      	ldr	r2, [pc, #36]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 8001a10:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_ADC_MspInit+0x10c>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	2012      	movs	r0, #18
 8001a1e:	f005 fc97 	bl	8007350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a22:	2012      	movs	r0, #18
 8001a24:	f005 fcae 	bl	8007384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3768      	adds	r7, #104	@ 0x68
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	200002ac 	.word	0x200002ac
 8001a38:	4002001c 	.word	0x4002001c
 8001a3c:	00000000 	.word	0x00000000

08001a40 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a52:	f040 8097 	bne.w	8001b84 <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001a56:	4b52      	ldr	r3, [pc, #328]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd8a 	bl	8000574 <__aeabi_i2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	a14a      	add	r1, pc, #296	@ (adr r1, 8001b90 <HAL_ADC_ConvCpltCallback+0x150>)
 8001a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a6a:	f7fe ff17 	bl	800089c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f8df 	bl	8000c38 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ba4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001a7e:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001a80:	4b49      	ldr	r3, [pc, #292]	@ (8001ba8 <HAL_ADC_ConvCpltCallback+0x168>)
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	4b49      	ldr	r3, [pc, #292]	@ (8001bac <HAL_ADC_ConvCpltCallback+0x16c>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd80 	bl	8000598 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	4943      	ldr	r1, [pc, #268]	@ (8001bb0 <HAL_ADC_ConvCpltCallback+0x170>)
 8001aa2:	f7fe fefb 	bl	800089c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4690      	mov	r8, r2
 8001aac:	4699      	mov	r9, r3
 8001aae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001ab0:	885b      	ldrh	r3, [r3, #2]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd5e 	bl	8000574 <__aeabi_i2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001acc:	f7fe fee6 	bl	800089c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fdb6 	bl	8000648 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4614      	mov	r4, r2
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	4b31      	ldr	r3, [pc, #196]	@ (8001bac <HAL_ADC_ConvCpltCallback+0x16c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd55 	bl	8000598 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fbef 	bl	80002d8 <__aeabi_dsub>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4640      	mov	r0, r8
 8001b00:	4649      	mov	r1, r9
 8001b02:	f7fe fda1 	bl	8000648 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f893 	bl	8000c38 <__aeabi_d2f>
 8001b12:	ee07 0a10 	vmov	s14, r0
 8001b16:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_ADC_ConvCpltCallback+0x178>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001b26:	889b      	ldrh	r3, [r3, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd23 	bl	8000574 <__aeabi_i2d>
 8001b2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b98 <HAL_ADC_ConvCpltCallback+0x158>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe feb2 	bl	800089c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001b46:	f7fe fd7f 	bl	8000648 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	461d      	mov	r5, r3
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd1e 	bl	8000598 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4620      	mov	r0, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff f862 	bl	8000c38 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a11      	ldr	r2, [pc, #68]	@ (8001bbc <HAL_ADC_ConvCpltCallback+0x17c>)
 8001b78:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	4908      	ldr	r1, [pc, #32]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001b7e:	4810      	ldr	r0, [pc, #64]	@ (8001bc0 <HAL_ADC_ConvCpltCallback+0x180>)
 8001b80:	f004 fa3c 	bl	8005ffc <HAL_ADC_Start_DMA>

	}

}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b8e:	bf00      	nop
 8001b90:	d70a3d70 	.word	0xd70a3d70
 8001b94:	40b36323 	.word	0x40b36323
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40affe00 	.word	0x40affe00
 8001ba0:	20000b14 	.word	0x20000b14
 8001ba4:	20000b20 	.word	0x20000b20
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	40590000 	.word	0x40590000
 8001bb4:	40080000 	.word	0x40080000
 8001bb8:	20000b1c 	.word	0x20000b1c
 8001bbc:	20000b24 	.word	0x20000b24
 8001bc0:	20000240 	.word	0x20000240

08001bc4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b0a0      	sub	sp, #128	@ 0x80
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001bce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f00f fde9 	bl	80117aa <osMutexCreate>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a37      	ldr	r2, [pc, #220]	@ (8001cb8 <MX_FREERTOS_Init+0xf4>)
 8001bdc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityNormal, 0, 256);
 8001bde:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <MX_FREERTOS_Init+0xf8>)
 8001be0:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8001be4:	461d      	mov	r5, r3
 8001be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001bee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00f fd9d 	bl	8011734 <osThreadCreate>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a30      	ldr	r2, [pc, #192]	@ (8001cc0 <MX_FREERTOS_Init+0xfc>)
 8001bfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSSParse */
  osThreadDef(GNSSParse, StartGNSSParse, osPriorityAboveNormal, 0, 256);
 8001c00:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <MX_FREERTOS_Init+0x100>)
 8001c02:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001c06:	461d      	mov	r5, r3
 8001c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	6023      	str	r3, [r4, #0]
  GNSSParseHandle = osThreadCreate(osThread(GNSSParse), NULL);
 8001c10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00f fd8c 	bl	8011734 <osThreadCreate>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc8 <MX_FREERTOS_Init+0x104>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 300);
 8001c22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <MX_FREERTOS_Init+0x108>)
 8001c24:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001c28:	461d      	mov	r5, r3
 8001c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 8001c32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00f fd7b 	bl	8011734 <osThreadCreate>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a23      	ldr	r2, [pc, #140]	@ (8001cd0 <MX_FREERTOS_Init+0x10c>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo */
  osThreadDef(servo, Startservo, osPriorityHigh, 0, 256);
 8001c44:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <MX_FREERTOS_Init+0x110>)
 8001c46:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	6023      	str	r3, [r4, #0]
  servoHandle = osThreadCreate(osThread(servo), NULL);
 8001c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00f fd6a 	bl	8011734 <osThreadCreate>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd8 <MX_FREERTOS_Init+0x114>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* definition and creation of distancecalc */
  osThreadDef(distancecalc, Startdistancecalc, osPriorityNormal, 0, 256);
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_FREERTOS_Init+0x118>)
 8001c68:	f107 0418 	add.w	r4, r7, #24
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c72:	682b      	ldr	r3, [r5, #0]
 8001c74:	6023      	str	r3, [r4, #0]
  distancecalcHandle = osThreadCreate(osThread(distancecalc), NULL);
 8001c76:	f107 0318 	add.w	r3, r7, #24
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f00f fd59 	bl	8011734 <osThreadCreate>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a16      	ldr	r2, [pc, #88]	@ (8001ce0 <MX_FREERTOS_Init+0x11c>)
 8001c86:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityHigh, 0, 256);
 8001c88:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <MX_FREERTOS_Init+0x120>)
 8001c8a:	1d3c      	adds	r4, r7, #4
 8001c8c:	461d      	mov	r5, r3
 8001c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00f fd4a 	bl	8011734 <osThreadCreate>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <MX_FREERTOS_Init+0x124>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifdef PARTIE_HAUT

  osThreadSuspend(distancecalcHandle);
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_FREERTOS_Init+0x11c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f00f fec3 	bl	8011a36 <osThreadSuspend>

#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cb0:	bf00      	nop
 8001cb2:	3780      	adds	r7, #128	@ 0x80
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb8:	20000334 	.word	0x20000334
 8001cbc:	0801936c 	.word	0x0801936c
 8001cc0:	2000031c 	.word	0x2000031c
 8001cc4:	0801938c 	.word	0x0801938c
 8001cc8:	20000320 	.word	0x20000320
 8001ccc:	080193ac 	.word	0x080193ac
 8001cd0:	20000324 	.word	0x20000324
 8001cd4:	080193c8 	.word	0x080193c8
 8001cd8:	20000328 	.word	0x20000328
 8001cdc:	080193ec 	.word	0x080193ec
 8001ce0:	2000032c 	.word	0x2000032c
 8001ce4:	08019410 	.word	0x08019410
 8001ce8:	20000330 	.word	0x20000330

08001cec <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
  /* Infinite loop */
  for(;;)
  {
	  if(pbmseeker_flag==0){
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <Startstatemachine+0x88>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d12d      	bne.n	8001d58 <Startstatemachine+0x6c>
		  if(pbmseeker==0){
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <Startstatemachine+0x8c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10e      	bne.n	8001d22 <Startstatemachine+0x36>
			  ssd1306_SetCursor(32, 40);
 8001d04:	2128      	movs	r1, #40	@ 0x28
 8001d06:	2020      	movs	r0, #32
 8001d08:	f001 fbd0 	bl	80034ac <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f001 fa8b 	bl	8003228 <ssd1306_Fill>
			  ssd1306_WriteString("OK!", Font_16x24, White);
 8001d12:	4a1a      	ldr	r2, [pc, #104]	@ (8001d7c <Startstatemachine+0x90>)
 8001d14:	2301      	movs	r3, #1
 8001d16:	ca06      	ldmia	r2, {r1, r2}
 8001d18:	4819      	ldr	r0, [pc, #100]	@ (8001d80 <Startstatemachine+0x94>)
 8001d1a:	f001 fba1 	bl	8003460 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001d1e:	f001 fa9b 	bl	8003258 <ssd1306_UpdateScreen>


		  }
		  if(pbmseeker==1){
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <Startstatemachine+0x8c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d10e      	bne.n	8001d48 <Startstatemachine+0x5c>
			  ssd1306_SetCursor(32, 40);
 8001d2a:	2128      	movs	r1, #40	@ 0x28
 8001d2c:	2020      	movs	r0, #32
 8001d2e:	f001 fbbd 	bl	80034ac <ssd1306_SetCursor>
			  ssd1306_Fill(Black);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f001 fa78 	bl	8003228 <ssd1306_Fill>
			  ssd1306_WriteString("PB!", Font_16x24, White);
 8001d38:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <Startstatemachine+0x90>)
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	ca06      	ldmia	r2, {r1, r2}
 8001d3e:	4811      	ldr	r0, [pc, #68]	@ (8001d84 <Startstatemachine+0x98>)
 8001d40:	f001 fb8e 	bl	8003460 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8001d44:	f001 fa88 	bl	8003258 <ssd1306_UpdateScreen>


		  }
		  vTaskDelay(pdMS_TO_TICKS(500));
 8001d48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d4c:	f010 fdf0 	bl	8012930 <vTaskDelay>
		  pbmseeker_flag=1;
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <Startstatemachine+0x88>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e001      	b.n	8001d5c <Startstatemachine+0x70>
	  }
	  else{
	  statemachine();
 8001d58:	f001 fbf2 	bl	8003540 <statemachine>
	  }
	  timeindex++;
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <Startstatemachine+0x9c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	4a09      	ldr	r2, [pc, #36]	@ (8001d88 <Startstatemachine+0x9c>)
 8001d64:	6013      	str	r3, [r2, #0]
	  ssd1306_UpdateScreen();
 8001d66:	f001 fa77 	bl	8003258 <ssd1306_UpdateScreen>
    osDelay(100);
 8001d6a:	2064      	movs	r0, #100	@ 0x64
 8001d6c:	f00f fd09 	bl	8011782 <osDelay>
	  if(pbmseeker_flag==0){
 8001d70:	e7c0      	b.n	8001cf4 <Startstatemachine+0x8>
 8001d72:	bf00      	nop
 8001d74:	20000314 	.word	0x20000314
 8001d78:	20000de0 	.word	0x20000de0
 8001d7c:	20000020 	.word	0x20000020
 8001d80:	08019424 	.word	0x08019424
 8001d84:	08019428 	.word	0x08019428
 8001d88:	20000dec 	.word	0x20000dec

08001d8c <StartGNSSParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGNSSParse */
void StartGNSSParse(void const * argument)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGNSSParse */
  /* Infinite loop */
  for(;;)
  {
	  GNSS_ParsePVTData(&GNSSData);
 8001d94:	482a      	ldr	r0, [pc, #168]	@ (8001e40 <StartGNSSParse+0xb4>)
 8001d96:	f7ff fb43 	bl	8001420 <GNSS_ParsePVTData>
	  bmp581_read_precise_normal(&myDatabmp581);
 8001d9a:	482a      	ldr	r0, [pc, #168]	@ (8001e44 <StartGNSSParse+0xb8>)
 8001d9c:	f000 f9a8 	bl	80020f0 <bmp581_read_precise_normal>
	  Read_sensor_data(&myData6AXIS);
 8001da0:	4829      	ldr	r0, [pc, #164]	@ (8001e48 <StartGNSSParse+0xbc>)
 8001da2:	f7ff f9ed 	bl	8001180 <Read_sensor_data>

	  if(counterrecalib>=20){
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <StartGNSSParse+0xc0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b13      	cmp	r3, #19
 8001dac:	dd2f      	ble.n	8001e0e <StartGNSSParse+0x82>
		  if(GNSSData.fixType>=3){
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <StartGNSSParse+0xb4>)
 8001db0:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d927      	bls.n	8001e08 <StartGNSSParse+0x7c>
			  P0 =(double) myDatabmp581.press / powf((1 - (GNSSData.fhMSL / 44330.0f)), 5.255f);
 8001db8:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <StartGNSSParse+0xb8>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbeb 	bl	8000598 <__aeabi_f2d>
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	460d      	mov	r5, r1
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <StartGNSSParse+0xb4>)
 8001dc8:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 8001dcc:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001e50 <StartGNSSParse+0xc4>
 8001dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ddc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001e54 <StartGNSSParse+0xc8>
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	f016 fce2 	bl	80187ac <powf>
 8001de8:	ee10 3a10 	vmov	r3, s0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fbd3 	bl	8000598 <__aeabi_f2d>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4620      	mov	r0, r4
 8001df8:	4629      	mov	r1, r5
 8001dfa:	f7fe fd4f 	bl	800089c <__aeabi_ddiv>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4915      	ldr	r1, [pc, #84]	@ (8001e58 <StartGNSSParse+0xcc>)
 8001e04:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  counterrecalib=0;
 8001e08:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <StartGNSSParse+0xc0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
	  }

	  if(flag_calib && (GNSSData.fixType>=3)){
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <StartGNSSParse+0xd0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00f      	beq.n	8001e36 <StartGNSSParse+0xaa>
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <StartGNSSParse+0xb4>)
 8001e18:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d90a      	bls.n	8001e36 <StartGNSSParse+0xaa>

		  hauteur_servo=(float)(GNSSData.fhMSL-hauteur_Initiale);
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <StartGNSSParse+0xb4>)
 8001e22:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <StartGNSSParse+0xd4>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <StartGNSSParse+0xd8>)
 8001e32:	edc3 7a00 	vstr	s15, [r3]

	  }


    osDelay(100);
 8001e36:	2064      	movs	r0, #100	@ 0x64
 8001e38:	f00f fca3 	bl	8011782 <osDelay>
	  GNSS_ParsePVTData(&GNSSData);
 8001e3c:	e7aa      	b.n	8001d94 <StartGNSSParse+0x8>
 8001e3e:	bf00      	nop
 8001e40:	20000ba4 	.word	0x20000ba4
 8001e44:	20000690 	.word	0x20000690
 8001e48:	20000670 	.word	0x20000670
 8001e4c:	2000030c 	.word	0x2000030c
 8001e50:	472d2a00 	.word	0x472d2a00
 8001e54:	40a828f6 	.word	0x40a828f6
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	20000dc4 	.word	0x20000dc4
 8001e60:	20000dd8 	.word	0x20000dd8
 8001e64:	20000ddc 	.word	0x20000ddc

08001e68 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	6078      	str	r0, [r7, #4]
  for(;;)
  {

//	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET) && (flag_fin==0)){
//		  sd_detect_flag=1;
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 8001e70:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <StartSdcard+0x90>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00f fca3 	bl	80117c4 <osMutexWait>

		  blinker_sd_flag=1-blinker_sd_flag;
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <StartSdcard+0x94>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1c3 0301 	rsb	r3, r3, #1
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <StartSdcard+0x94>)
 8001e88:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <StartSdcard+0x94>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10a      	bne.n	8001ea8 <StartSdcard+0x40>
			  LED_Setcolour(0,0,0,255,255,255);
 8001e92:	23ff      	movs	r3, #255	@ 0xff
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	23ff      	movs	r3, #255	@ 0xff
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	23ff      	movs	r3, #255	@ 0xff
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f000 fc25 	bl	80026f0 <LED_Setcolour>
 8001ea6:	e009      	b.n	8001ebc <StartSdcard+0x54>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 fc1a 	bl	80026f0 <LED_Setcolour>
		  }



		  if(flag_drop==0){
 8001ebc:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <StartSdcard+0x98>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10e      	bne.n	8001ee2 <StartSdcard+0x7a>

			  if(sd_counter==10){
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <StartSdcard+0x9c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b0a      	cmp	r3, #10
 8001eca:	d104      	bne.n	8001ed6 <StartSdcard+0x6e>
				  store_in_sd();
 8001ecc:	f000 ff72 	bl	8002db4 <store_in_sd>

			  sd_counter=0;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <StartSdcard+0x9c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <StartSdcard+0x9c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <StartSdcard+0x9c>)
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e001      	b.n	8001ee6 <StartSdcard+0x7e>

		  }
		  else{
			  store_in_sd();
 8001ee2:	f000 ff67 	bl	8002db4 <store_in_sd>

		  }

		  osMutexRelease(SDCard_mutexeHandle);
 8001ee6:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <StartSdcard+0x90>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f00f fcb8 	bl	8011860 <osMutexRelease>
//	  }




    osDelay(100);
 8001ef0:	2064      	movs	r0, #100	@ 0x64
 8001ef2:	f00f fc46 	bl	8011782 <osDelay>
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 8001ef6:	e7bb      	b.n	8001e70 <StartSdcard+0x8>
 8001ef8:	20000334 	.word	0x20000334
 8001efc:	20000318 	.word	0x20000318
 8001f00:	20000dbc 	.word	0x20000dbc
 8001f04:	20000310 	.word	0x20000310

08001f08 <Startservo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startservo */
void Startservo(void const * argument)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startservo */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_servo_started==1){
 8001f10:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <Startservo+0x94>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d104      	bne.n	8001f22 <Startservo+0x1a>
		  stop_servo();
 8001f18:	f001 f858 	bl	8002fcc <stop_servo>
		  flag_servo_started=0;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <Startservo+0x94>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
	  }


	  if((flag_drop==1) && (flag_calib==1)){
 8001f22:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <Startservo+0x98>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d118      	bne.n	8001f5c <Startservo+0x54>
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <Startservo+0x9c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d114      	bne.n	8001f5c <Startservo+0x54>
		  if((hauteur_servo<=60.0)){
 8001f32:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <Startservo+0xa0>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001fac <Startservo+0xa4>
 8001f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d80a      	bhi.n	8001f5c <Startservo+0x54>
			  release_mecanism();
 8001f46:	f001 f821 	bl	8002f8c <release_mecanism>
			  flag_separation=1;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <Startservo+0xa8>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <Startservo+0x94>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
			  osThreadSuspend(NULL);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f00f fd6d 	bl	8011a36 <osThreadSuspend>



		  }
	  }
	  if(flag_drop==0){
 8001f5c:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <Startservo+0x98>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d117      	bne.n	8001f94 <Startservo+0x8c>
		  if(flag_bouton_servo==1){
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <Startservo+0xac>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <Startservo+0x74>
			  release_mecanism();
 8001f6c:	f001 f80e 	bl	8002f8c <release_mecanism>
			  flag_bouton_servo=2;
 8001f70:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <Startservo+0xac>)
 8001f72:	2202      	movs	r2, #2
 8001f74:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <Startservo+0x94>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
		  }
		  if(flag_bouton_servo==0){
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <Startservo+0xac>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <Startservo+0x8c>
			  lock_mecanism();
 8001f84:	f001 f812 	bl	8002fac <lock_mecanism>
			  flag_bouton_servo=2;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <Startservo+0xac>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8001f8e:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <Startservo+0x94>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
		  }

	  }

    osDelay(200);
 8001f94:	20c8      	movs	r0, #200	@ 0xc8
 8001f96:	f00f fbf4 	bl	8011782 <osDelay>
	  if(flag_servo_started==1){
 8001f9a:	e7b9      	b.n	8001f10 <Startservo+0x8>
 8001f9c:	20000dcc 	.word	0x20000dcc
 8001fa0:	20000dbc 	.word	0x20000dbc
 8001fa4:	20000dc4 	.word	0x20000dc4
 8001fa8:	20000ddc 	.word	0x20000ddc
 8001fac:	42700000 	.word	0x42700000
 8001fb0:	20000dc0 	.word	0x20000dc0
 8001fb4:	20000dc8 	.word	0x20000dc8

08001fb8 <Startdistancecalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startdistancecalc */
void Startdistancecalc(void const * argument)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startdistancecalc */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_calib==1){
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <Startdistancecalc+0x18>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
			  distance_entre_module=distancecalc(GNSSData.fLat,TOPData.latitude, GNSSData.fLon,TOPData.longitude,hauteur_servo,TOPData.hMSL);

#endif
	  }
}
    osDelay(100);
 8001fc6:	2064      	movs	r0, #100	@ 0x64
 8001fc8:	f00f fbdb 	bl	8011782 <osDelay>
	  if(flag_calib==1){
 8001fcc:	e7f8      	b.n	8001fc0 <Startdistancecalc+0x8>
 8001fce:	bf00      	nop
 8001fd0:	20000dc4 	.word	0x20000dc4

08001fd4 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(trameready==1){
 8001fdc:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <startTarvosDecode+0x28>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <startTarvosDecode+0x20>
		  case TOP_ADDR:
			  decode_payload(&TOPData,(uint8_t *) tarvos_DATA);
			  break;
#endif
		  default:
			  decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 8001fe4:	4906      	ldr	r1, [pc, #24]	@ (8002000 <startTarvosDecode+0x2c>)
 8001fe6:	4807      	ldr	r0, [pc, #28]	@ (8002004 <startTarvosDecode+0x30>)
 8001fe8:	f002 f9e2 	bl	80043b0 <decode_payload>

			  break;
 8001fec:	bf00      	nop
		  }
		  trameready=0;
 8001fee:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <startTarvosDecode+0x28>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
	  }

    osDelay(100);
 8001ff4:	2064      	movs	r0, #100	@ 0x64
 8001ff6:	f00f fbc4 	bl	8011782 <osDelay>
	  if(trameready==1){
 8001ffa:	e7ef      	b.n	8001fdc <startTarvosDecode+0x8>
 8001ffc:	20000de8 	.word	0x20000de8
 8002000:	2000047c 	.word	0x2000047c
 8002004:	20000b28 	.word	0x20000b28

08002008 <bmp581_init_precise_normal>:
uint8_t odrcheck=0;
double P0=101325.0;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af04      	add	r7, sp, #16
 800200e:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8002010:	237b      	movs	r3, #123	@ 0x7b
 8002012:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 8002014:	2369      	movs	r3, #105	@ 0x69
 8002016:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 8002018:	232b      	movs	r3, #43	@ 0x2b
 800201a:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 800201c:	2312      	movs	r3, #18
 800201e:	723b      	strb	r3, [r7, #8]
	int check=0;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8002024:	2364      	movs	r3, #100	@ 0x64
 8002026:	9302      	str	r3, [sp, #8]
 8002028:	2301      	movs	r3, #1
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	f107 030b 	add.w	r3, r7, #11
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2301      	movs	r3, #1
 8002034:	2236      	movs	r2, #54	@ 0x36
 8002036:	218e      	movs	r1, #142	@ 0x8e
 8002038:	482a      	ldr	r0, [pc, #168]	@ (80020e4 <bmp581_init_precise_normal+0xdc>)
 800203a:	f005 ff6f 	bl	8007f1c <HAL_I2C_Mem_Write>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <bmp581_init_precise_normal+0x40>
			check=1;
 8002044:	2301      	movs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 8002048:	2364      	movs	r3, #100	@ 0x64
 800204a:	9302      	str	r3, [sp, #8]
 800204c:	2301      	movs	r3, #1
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	f107 030a 	add.w	r3, r7, #10
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2301      	movs	r3, #1
 8002058:	2237      	movs	r2, #55	@ 0x37
 800205a:	218e      	movs	r1, #142	@ 0x8e
 800205c:	4821      	ldr	r0, [pc, #132]	@ (80020e4 <bmp581_init_precise_normal+0xdc>)
 800205e:	f005 ff5d 	bl	8007f1c <HAL_I2C_Mem_Write>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <bmp581_init_precise_normal+0x64>
					check=1;
 8002068:	2301      	movs	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 800206c:	2364      	movs	r3, #100	@ 0x64
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	2301      	movs	r3, #1
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	f107 0309 	add.w	r3, r7, #9
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2301      	movs	r3, #1
 800207c:	2230      	movs	r2, #48	@ 0x30
 800207e:	218e      	movs	r1, #142	@ 0x8e
 8002080:	4818      	ldr	r0, [pc, #96]	@ (80020e4 <bmp581_init_precise_normal+0xdc>)
 8002082:	f005 ff4b 	bl	8007f1c <HAL_I2C_Mem_Write>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <bmp581_init_precise_normal+0x88>
				check=1;
 800208c:	2301      	movs	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 8002090:	2364      	movs	r3, #100	@ 0x64
 8002092:	9302      	str	r3, [sp, #8]
 8002094:	2301      	movs	r3, #1
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2301      	movs	r3, #1
 80020a0:	2230      	movs	r2, #48	@ 0x30
 80020a2:	218e      	movs	r1, #142	@ 0x8e
 80020a4:	480f      	ldr	r0, [pc, #60]	@ (80020e4 <bmp581_init_precise_normal+0xdc>)
 80020a6:	f005 ff39 	bl	8007f1c <HAL_I2C_Mem_Write>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <bmp581_init_precise_normal+0xac>
					check=1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 80020b4:	2364      	movs	r3, #100	@ 0x64
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	2301      	movs	r3, #1
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <bmp581_init_precise_normal+0xe0>)
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2301      	movs	r3, #1
 80020c2:	2238      	movs	r2, #56	@ 0x38
 80020c4:	218f      	movs	r1, #143	@ 0x8f
 80020c6:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <bmp581_init_precise_normal+0xdc>)
 80020c8:	f006 f83c 	bl	8008144 <HAL_I2C_Mem_Read>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <bmp581_init_precise_normal+0xce>
					check=1;
 80020d2:	2301      	movs	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
				}


	return check;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	b2db      	uxtb	r3, r3

}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000354 	.word	0x20000354
 80020e8:	20000350 	.word	0x20000350
 80020ec:	00000000 	.word	0x00000000

080020f0 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	@ 0x30
 80020f4:	af04      	add	r7, sp, #16
 80020f6:	6078      	str	r0, [r7, #4]
		int check=0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
		int32_t intbufferpres=0;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
//			check=1;
//		}
//		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
//			check=1;
//		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 8002104:	2364      	movs	r3, #100	@ 0x64
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	2306      	movs	r3, #6
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	221d      	movs	r2, #29
 8002116:	218f      	movs	r1, #143	@ 0x8f
 8002118:	483d      	ldr	r0, [pc, #244]	@ (8002210 <bmp581_read_precise_normal+0x120>)
 800211a:	f006 f813 	bl	8008144 <HAL_I2C_Mem_Read>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <bmp581_read_precise_normal+0x38>
					check=1;
 8002124:	2301      	movs	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
				}


		if(check==0){
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d165      	bne.n	80021fa <bmp581_read_precise_normal+0x10a>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	041a      	lsls	r2, r3, #16
 8002132:	7b7b      	ldrb	r3, [r7, #13]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	4313      	orrs	r3, r2
 8002138:	7b3a      	ldrb	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 800213e:	7c7b      	ldrb	r3, [r7, #17]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	7c3b      	ldrb	r3, [r7, #16]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	4313      	orrs	r3, r2
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	4313      	orrs	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
		bmptemp=(double)intbuffertemp/65536.0;
 800214e:	69b8      	ldr	r0, [r7, #24]
 8002150:	f7fe fa10 	bl	8000574 <__aeabi_i2d>
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <bmp581_read_precise_normal+0x124>)
 800215a:	f7fe fb9f 	bl	800089c <__aeabi_ddiv>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	492d      	ldr	r1, [pc, #180]	@ (8002218 <bmp581_read_precise_normal+0x128>)
 8002164:	e9c1 2300 	strd	r2, r3, [r1]
		bmppress=(double) intbufferpres/64.0;
 8002168:	6978      	ldr	r0, [r7, #20]
 800216a:	f7fe fa03 	bl	8000574 <__aeabi_i2d>
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <bmp581_read_precise_normal+0x12c>)
 8002174:	f7fe fb92 	bl	800089c <__aeabi_ddiv>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4928      	ldr	r1, [pc, #160]	@ (8002220 <bmp581_read_precise_normal+0x130>)
 800217e:	e9c1 2300 	strd	r2, r3, [r1]
		bmpalt=(double) ((8.314*298.15)/(9.80665*0.028964))*log(P0/(bmppress));
 8002182:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <bmp581_read_precise_normal+0x134>)
 8002184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002188:	4b25      	ldr	r3, [pc, #148]	@ (8002220 <bmp581_read_precise_normal+0x130>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f7fe fb85 	bl	800089c <__aeabi_ddiv>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	ec43 2b17 	vmov	d7, r2, r3
 800219a:	eeb0 0a47 	vmov.f32	s0, s14
 800219e:	eef0 0a67 	vmov.f32	s1, s15
 80021a2:	f016 fac5 	bl	8018730 <log>
 80021a6:	ec51 0b10 	vmov	r0, r1, d0
 80021aa:	a317      	add	r3, pc, #92	@ (adr r3, 8002208 <bmp581_read_precise_normal+0x118>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fa4a 	bl	8000648 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	491b      	ldr	r1, [pc, #108]	@ (8002228 <bmp581_read_precise_normal+0x138>)
 80021ba:	e9c1 2300 	strd	r2, r3, [r1]
		bmp581->press=(float) bmppress;
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <bmp581_read_precise_normal+0x130>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7fe fd36 	bl	8000c38 <__aeabi_d2f>
 80021cc:	4602      	mov	r2, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60da      	str	r2, [r3, #12]
		bmp581->altitude=(float)bmpalt;
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <bmp581_read_precise_normal+0x138>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fd2c 	bl	8000c38 <__aeabi_d2f>
 80021e0:	4602      	mov	r2, r0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	615a      	str	r2, [r3, #20]
		bmp581->temps=(float)bmptemp;
 80021e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <bmp581_read_precise_normal+0x128>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fd22 	bl	8000c38 <__aeabi_d2f>
 80021f4:	4602      	mov	r2, r0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

		}

		return check;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	b2db      	uxtb	r3, r3
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	a7b85a1b 	.word	0xa7b85a1b
 800220c:	40c10b81 	.word	0x40c10b81
 8002210:	20000354 	.word	0x20000354
 8002214:	40f00000 	.word	0x40f00000
 8002218:	20000338 	.word	0x20000338
 800221c:	40500000 	.word	0x40500000
 8002220:	20000340 	.word	0x20000340
 8002224:	20000008 	.word	0x20000008
 8002228:	20000348 	.word	0x20000348

0800222c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002232:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <MX_DMA_Init+0x80>)
 8002234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002236:	4a1d      	ldr	r2, [pc, #116]	@ (80022ac <MX_DMA_Init+0x80>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6493      	str	r3, [r2, #72]	@ 0x48
 800223e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <MX_DMA_Init+0x80>)
 8002240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <MX_DMA_Init+0x80>)
 800224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224e:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <MX_DMA_Init+0x80>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6493      	str	r3, [r2, #72]	@ 0x48
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <MX_DMA_Init+0x80>)
 8002258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2105      	movs	r1, #5
 8002266:	200b      	movs	r0, #11
 8002268:	f005 f872 	bl	8007350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800226c:	200b      	movs	r0, #11
 800226e:	f005 f889 	bl	8007384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2105      	movs	r1, #5
 8002276:	200c      	movs	r0, #12
 8002278:	f005 f86a 	bl	8007350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800227c:	200c      	movs	r0, #12
 800227e:	f005 f881 	bl	8007384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2105      	movs	r1, #5
 8002286:	200d      	movs	r0, #13
 8002288:	f005 f862 	bl	8007350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800228c:	200d      	movs	r0, #13
 800228e:	f005 f879 	bl	8007384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2105      	movs	r1, #5
 8002296:	200f      	movs	r0, #15
 8002298:	f005 f85a 	bl	8007350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800229c:	200f      	movs	r0, #15
 800229e:	f005 f871 	bl	8007384 <HAL_NVIC_EnableIRQ>

}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022c6:	4b49      	ldr	r3, [pc, #292]	@ (80023ec <MX_GPIO_Init+0x13c>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	4a48      	ldr	r2, [pc, #288]	@ (80023ec <MX_GPIO_Init+0x13c>)
 80022cc:	f043 0320 	orr.w	r3, r3, #32
 80022d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d2:	4b46      	ldr	r3, [pc, #280]	@ (80023ec <MX_GPIO_Init+0x13c>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b43      	ldr	r3, [pc, #268]	@ (80023ec <MX_GPIO_Init+0x13c>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	4a42      	ldr	r2, [pc, #264]	@ (80023ec <MX_GPIO_Init+0x13c>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ea:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <MX_GPIO_Init+0x13c>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ec <MX_GPIO_Init+0x13c>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	4a3c      	ldr	r2, [pc, #240]	@ (80023ec <MX_GPIO_Init+0x13c>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002302:	4b3a      	ldr	r3, [pc, #232]	@ (80023ec <MX_GPIO_Init+0x13c>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <MX_GPIO_Init+0x13c>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	4a36      	ldr	r2, [pc, #216]	@ (80023ec <MX_GPIO_Init+0x13c>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231a:	4b34      	ldr	r3, [pc, #208]	@ (80023ec <MX_GPIO_Init+0x13c>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002326:	2200      	movs	r2, #0
 8002328:	2110      	movs	r1, #16
 800232a:	4831      	ldr	r0, [pc, #196]	@ (80023f0 <MX_GPIO_Init+0x140>)
 800232c:	f005 fd10 	bl	8007d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002336:	482f      	ldr	r0, [pc, #188]	@ (80023f4 <MX_GPIO_Init+0x144>)
 8002338:	f005 fd0a 	bl	8007d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800233c:	2310      	movs	r3, #16
 800233e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002340:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002354:	f005 fb62 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002358:	2310      	movs	r3, #16
 800235a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235c:	2301      	movs	r3, #1
 800235e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	4820      	ldr	r0, [pc, #128]	@ (80023f0 <MX_GPIO_Init+0x140>)
 8002370:	f005 fb54 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002374:	2302      	movs	r3, #2
 8002376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002378:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800237c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	481a      	ldr	r0, [pc, #104]	@ (80023f4 <MX_GPIO_Init+0x144>)
 800238a:	f005 fb47 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800238e:	2304      	movs	r3, #4
 8002390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4814      	ldr	r0, [pc, #80]	@ (80023f4 <MX_GPIO_Init+0x144>)
 80023a2:	f005 fb3b 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 80023a6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80023aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ac:	2301      	movs	r3, #1
 80023ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	480d      	ldr	r0, [pc, #52]	@ (80023f4 <MX_GPIO_Init+0x144>)
 80023c0:	f005 fb2c 	bl	8007a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2105      	movs	r1, #5
 80023c8:	2007      	movs	r0, #7
 80023ca:	f004 ffc1 	bl	8007350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023ce:	2007      	movs	r0, #7
 80023d0:	f004 ffd8 	bl	8007384 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2105      	movs	r1, #5
 80023d8:	200a      	movs	r0, #10
 80023da:	f004 ffb9 	bl	8007350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80023de:	200a      	movs	r0, #10
 80023e0:	f004 ffd0 	bl	8007384 <HAL_NVIC_EnableIRQ>

}
 80023e4:	bf00      	nop
 80023e6:	3728      	adds	r7, #40	@ 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	48000800 	.word	0x48000800
 80023f4:	48000400 	.word	0x48000400

080023f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <MX_I2C1_Init+0x74>)
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <MX_I2C1_Init+0x78>)
 8002400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 8002402:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <MX_I2C1_Init+0x74>)
 8002404:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <MX_I2C1_Init+0x7c>)
 8002406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002408:	4b18      	ldr	r3, [pc, #96]	@ (800246c <MX_I2C1_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <MX_I2C1_Init+0x74>)
 8002410:	2201      	movs	r2, #1
 8002412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b15      	ldr	r3, [pc, #84]	@ (800246c <MX_I2C1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800241a:	4b14      	ldr	r3, [pc, #80]	@ (800246c <MX_I2C1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <MX_I2C1_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <MX_I2C1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242c:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <MX_I2C1_Init+0x74>)
 800242e:	2200      	movs	r2, #0
 8002430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002432:	480e      	ldr	r0, [pc, #56]	@ (800246c <MX_I2C1_Init+0x74>)
 8002434:	f005 fcd6 	bl	8007de4 <HAL_I2C_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800243e:	f000 fcb3 	bl	8002da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002442:	2100      	movs	r1, #0
 8002444:	4809      	ldr	r0, [pc, #36]	@ (800246c <MX_I2C1_Init+0x74>)
 8002446:	f006 fa59 	bl	80088fc <HAL_I2CEx_ConfigAnalogFilter>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002450:	f000 fcaa 	bl	8002da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002454:	2100      	movs	r1, #0
 8002456:	4805      	ldr	r0, [pc, #20]	@ (800246c <MX_I2C1_Init+0x74>)
 8002458:	f006 fa9b 	bl	8008992 <HAL_I2CEx_ConfigDigitalFilter>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002462:	f000 fca1 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000354 	.word	0x20000354
 8002470:	40005400 	.word	0x40005400
 8002474:	20b182be 	.word	0x20b182be

08002478 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800247c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <MX_I2C3_Init+0x74>)
 800247e:	4a1c      	ldr	r2, [pc, #112]	@ (80024f0 <MX_I2C3_Init+0x78>)
 8002480:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B182BE;
 8002482:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <MX_I2C3_Init+0x74>)
 8002484:	4a1b      	ldr	r2, [pc, #108]	@ (80024f4 <MX_I2C3_Init+0x7c>)
 8002486:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002488:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <MX_I2C3_Init+0x74>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800248e:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <MX_I2C3_Init+0x74>)
 8002490:	2201      	movs	r2, #1
 8002492:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <MX_I2C3_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800249a:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <MX_I2C3_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024a0:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <MX_I2C3_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a6:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <MX_I2C3_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <MX_I2C3_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024b2:	480e      	ldr	r0, [pc, #56]	@ (80024ec <MX_I2C3_Init+0x74>)
 80024b4:	f005 fc96 	bl	8007de4 <HAL_I2C_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80024be:	f000 fc73 	bl	8002da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4809      	ldr	r0, [pc, #36]	@ (80024ec <MX_I2C3_Init+0x74>)
 80024c6:	f006 fa19 	bl	80088fc <HAL_I2CEx_ConfigAnalogFilter>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80024d0:	f000 fc6a 	bl	8002da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024d4:	2100      	movs	r1, #0
 80024d6:	4805      	ldr	r0, [pc, #20]	@ (80024ec <MX_I2C3_Init+0x74>)
 80024d8:	f006 fa5b 	bl	8008992 <HAL_I2CEx_ConfigDigitalFilter>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80024e2:	f000 fc61 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200003a8 	.word	0x200003a8
 80024f0:	40007800 	.word	0x40007800
 80024f4:	20b182be 	.word	0x20b182be

080024f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	@ 0x78
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002510:	f107 0320 	add.w	r3, r7, #32
 8002514:	2244      	movs	r2, #68	@ 0x44
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f012 fdc1 	bl	80150a0 <memset>
  if(i2cHandle->Instance==I2C1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a5c      	ldr	r2, [pc, #368]	@ (8002694 <HAL_I2C_MspInit+0x19c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d155      	bne.n	80025d4 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002528:	2340      	movs	r3, #64	@ 0x40
 800252a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800252c:	2300      	movs	r3, #0
 800252e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	4618      	mov	r0, r3
 8002536:	f007 f889 	bl	800964c <HAL_RCCEx_PeriphCLKConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002540:	f000 fc32 	bl	8002da8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b54      	ldr	r3, [pc, #336]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	4a53      	ldr	r2, [pc, #332]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002550:	4b51      	ldr	r3, [pc, #324]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255c:	4b4e      	ldr	r3, [pc, #312]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 800255e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002560:	4a4d      	ldr	r2, [pc, #308]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002568:	4b4b      	ldr	r3, [pc, #300]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 800256a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002574:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002578:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257a:	2312      	movs	r3, #18
 800257c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002586:	2304      	movs	r3, #4
 8002588:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002594:	f005 fa42 	bl	8007a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800259c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259e:	2312      	movs	r3, #18
 80025a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025aa:	2304      	movs	r3, #4
 80025ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025b2:	4619      	mov	r1, r3
 80025b4:	4839      	ldr	r0, [pc, #228]	@ (800269c <HAL_I2C_MspInit+0x1a4>)
 80025b6:	f005 fa31 	bl	8007a1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ba:	4b37      	ldr	r3, [pc, #220]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	4a36      	ldr	r2, [pc, #216]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 80025c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c6:	4b34      	ldr	r3, [pc, #208]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80025d2:	e05a      	b.n	800268a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a31      	ldr	r2, [pc, #196]	@ (80026a0 <HAL_I2C_MspInit+0x1a8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d155      	bne.n	800268a <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80025de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e8:	f107 0320 	add.w	r3, r7, #32
 80025ec:	4618      	mov	r0, r3
 80025ee:	f007 f82d 	bl	800964c <HAL_RCCEx_PeriphCLKConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_MspInit+0x104>
      Error_Handler();
 80025f8:	f000 fbd6 	bl	8002da8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b26      	ldr	r3, [pc, #152]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002600:	4a25      	ldr	r2, [pc, #148]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002608:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002614:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002618:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800262c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002630:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002632:	2312      	movs	r3, #18
 8002634:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800263e:	2302      	movs	r3, #2
 8002640:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800264c:	f005 f9e6 	bl	8007a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002650:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002654:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002656:	2312      	movs	r3, #18
 8002658:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002662:	2308      	movs	r3, #8
 8002664:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002666:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800266a:	4619      	mov	r1, r3
 800266c:	480d      	ldr	r0, [pc, #52]	@ (80026a4 <HAL_I2C_MspInit+0x1ac>)
 800266e:	f005 f9d5 	bl	8007a1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	4a08      	ldr	r2, [pc, #32]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800267c:	6593      	str	r3, [r2, #88]	@ 0x58
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_I2C_MspInit+0x1a0>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
}
 800268a:	bf00      	nop
 800268c:	3778      	adds	r7, #120	@ 0x78
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40005400 	.word	0x40005400
 8002698:	40021000 	.word	0x40021000
 800269c:	48000400 	.word	0x48000400
 80026a0:	40007800 	.word	0x40007800
 80026a4:	48000800 	.word	0x48000800

080026a8 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 80026ae:	480d      	ldr	r0, [pc, #52]	@ (80026e4 <LED_Init+0x3c>)
 80026b0:	f007 feac 	bl	800a40c <HAL_TIM_PWM_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 80026b8:	2300      	movs	r3, #0
 80026ba:	80fb      	strh	r3, [r7, #6]
 80026bc:	e006      	b.n	80026cc <LED_Init+0x24>
		LEDDMABUF[i]=0;
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <LED_Init+0x40>)
 80026c2:	2100      	movs	r1, #0
 80026c4:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	3301      	adds	r3, #1
 80026ca:	80fb      	strh	r3, [r7, #6]
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80026d2:	d9f4      	bls.n	80026be <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <LED_Init+0x44>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]


	return halStatus;
 80026da:	797b      	ldrb	r3, [r7, #5]




}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200012ec 	.word	0x200012ec
 80026e8:	20000c78 	.word	0x20000c78
 80026ec:	20000db1 	.word	0x20000db1

080026f0 <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b08b      	sub	sp, #44	@ 0x2c
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4623      	mov	r3, r4
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	4603      	mov	r3, r0
 8002704:	71bb      	strb	r3, [r7, #6]
 8002706:	460b      	mov	r3, r1
 8002708:	717b      	strb	r3, [r7, #5]
 800270a:	4613      	mov	r3, r2
 800270c:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 800270e:	2300      	movs	r3, #0
 8002710:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8002712:	79bb      	ldrb	r3, [r7, #6]
 8002714:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 800271a:	797b      	ldrb	r3, [r7, #5]
 800271c:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 800271e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002722:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8002724:	793b      	ldrb	r3, [r7, #4]
 8002726:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8002728:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800272c:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
 8002732:	e007      	b.n	8002744 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8002734:	4a35      	ldr	r2, [pc, #212]	@ (800280c <LED_Setcolour+0x11c>)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	4413      	add	r3, r2
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	3301      	adds	r3, #1
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800274a:	ddf3      	ble.n	8002734 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 800274c:	2300      	movs	r3, #0
 800274e:	77fb      	strb	r3, [r7, #31]
 8002750:	e032      	b.n	80027b8 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8002752:	2300      	movs	r3, #0
 8002754:	77bb      	strb	r3, [r7, #30]
 8002756:	e029      	b.n	80027ac <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	e020      	b.n	80027a0 <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 800275e:	7ffa      	ldrb	r2, [r7, #31]
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	441a      	add	r2, r3
 8002766:	7fbb      	ldrb	r3, [r7, #30]
 8002768:	4413      	add	r3, r2
 800276a:	3328      	adds	r3, #40	@ 0x28
 800276c:	443b      	add	r3, r7
 800276e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002772:	461a      	mov	r2, r3
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa42 f303 	asr.w	r3, r2, r3
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8002782:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002784:	4a21      	ldr	r2, [pc, #132]	@ (800280c <LED_Setcolour+0x11c>)
 8002786:	215a      	movs	r1, #90	@ 0x5a
 8002788:	54d1      	strb	r1, [r2, r3]
 800278a:	e003      	b.n	8002794 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 800278c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <LED_Setcolour+0x11c>)
 8002790:	211e      	movs	r1, #30
 8002792:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8002794:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002796:	3301      	adds	r3, #1
 8002798:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3301      	adds	r3, #1
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b07      	cmp	r3, #7
 80027a4:	dddb      	ble.n	800275e <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 80027a6:	7fbb      	ldrb	r3, [r7, #30]
 80027a8:	3301      	adds	r3, #1
 80027aa:	77bb      	strb	r3, [r7, #30]
 80027ac:	7fbb      	ldrb	r3, [r7, #30]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d9d2      	bls.n	8002758 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
 80027b4:	3301      	adds	r3, #1
 80027b6:	77fb      	strb	r3, [r7, #31]
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d9c9      	bls.n	8002752 <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e009      	b.n	80027d8 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 80027c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80027c6:	4a11      	ldr	r2, [pc, #68]	@ (800280c <LED_Setcolour+0x11c>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 80027cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80027ce:	3301      	adds	r3, #1
 80027d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3301      	adds	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027de:	dbf1      	blt.n	80027c4 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e009      	b.n	80027fa <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 80027e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80027e8:	4a08      	ldr	r2, [pc, #32]	@ (800280c <LED_Setcolour+0x11c>)
 80027ea:	2100      	movs	r1, #0
 80027ec:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 80027ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80027f0:	3301      	adds	r3, #1
 80027f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	3301      	adds	r3, #1
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	ddf2      	ble.n	80027e6 <LED_Setcolour+0xf6>
		}

	LED_Update();
 8002800:	f000 f806 	bl	8002810 <LED_Update>

}
 8002804:	bf00      	nop
 8002806:	372c      	adds	r7, #44	@ 0x2c
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	20000c78 	.word	0x20000c78

08002810 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8002816:	f240 1339 	movw	r3, #313	@ 0x139
 800281a:	4a07      	ldr	r2, [pc, #28]	@ (8002838 <LED_Update+0x28>)
 800281c:	2104      	movs	r1, #4
 800281e:	4807      	ldr	r0, [pc, #28]	@ (800283c <LED_Update+0x2c>)
 8002820:	f007 ffec 	bl	800a7fc <HAL_TIM_PWM_Start_DMA>
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8002828:	2300      	movs	r3, #0
 800282a:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 800282c:	79fb      	ldrb	r3, [r7, #7]

}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000c78 	.word	0x20000c78
 800283c:	200012ec 	.word	0x200012ec

08002840 <LED_Callback>:



void LED_Callback(){
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8002844:	2104      	movs	r1, #4
 8002846:	4804      	ldr	r0, [pc, #16]	@ (8002858 <LED_Callback+0x18>)
 8002848:	f008 f9f0 	bl	800ac2c <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <LED_Callback+0x1c>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]


}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200012ec 	.word	0x200012ec
 800285c:	20000db1 	.word	0x20000db1

08002860 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af02      	add	r7, sp, #8
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b10      	cmp	r3, #16
 800286e:	d17c      	bne.n	800296a <HAL_GPIO_EXTI_Callback+0x10a>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 8002870:	2110      	movs	r1, #16
 8002872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002876:	f005 fa53 	bl	8007d20 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d109      	bne.n	8002894 <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 8002880:	4b44      	ldr	r3, [pc, #272]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 8002886:	f002 ffc7 	bl	8005818 <HAL_GetTick>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	4b42      	ldr	r3, [pc, #264]	@ (8002998 <HAL_GPIO_EXTI_Callback+0x138>)
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e06a      	b.n	800296a <HAL_GPIO_EXTI_Callback+0x10a>


					}
					else{

						gros_btn_time=(HAL_GetTick()-tbtn1);
 8002894:	f002 ffc0 	bl	8005818 <HAL_GetTick>
 8002898:	4603      	mov	r3, r0
 800289a:	4a3f      	ldr	r2, [pc, #252]	@ (8002998 <HAL_GPIO_EXTI_Callback+0x138>)
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 80028a4:	601a      	str	r2, [r3, #0]


		if(gros_btn_time<=380){
 80028a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 80028ae:	dc02      	bgt.n	80028b6 <HAL_GPIO_EXTI_Callback+0x56>
#ifdef PARTIE_HAUT
			flag_bouton_servo=0;
 80028b0:	4b3a      	ldr	r3, [pc, #232]	@ (800299c <HAL_GPIO_EXTI_Callback+0x13c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
#endif

							}
					if(gros_btn_time>=400 && gros_btn_time<=1500){
 80028b6:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80028be:	db08      	blt.n	80028d2 <HAL_GPIO_EXTI_Callback+0x72>
 80028c0:	4b34      	ldr	r3, [pc, #208]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80028c8:	4293      	cmp	r3, r2
 80028ca:	dc02      	bgt.n	80028d2 <HAL_GPIO_EXTI_Callback+0x72>
#ifdef PARTIE_HAUT
						flag_bouton_servo=1;
 80028cc:	4b33      	ldr	r3, [pc, #204]	@ (800299c <HAL_GPIO_EXTI_Callback+0x13c>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
#endif
					}
					if(gros_btn_time>=1500 && gros_btn_time<=3500){
 80028d2:	4b30      	ldr	r3, [pc, #192]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80028da:	4293      	cmp	r3, r2
 80028dc:	dd35      	ble.n	800294a <HAL_GPIO_EXTI_Callback+0xea>
 80028de:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80028e6:	4293      	cmp	r3, r2
 80028e8:	dc2f      	bgt.n	800294a <HAL_GPIO_EXTI_Callback+0xea>
#ifdef PARTIE_HAUT
						//hauteur_Initiale=myDatabmp581.altitude;
						if(GNSSData.fixType>=3){
 80028ea:	4b2d      	ldr	r3, [pc, #180]	@ (80029a0 <HAL_GPIO_EXTI_Callback+0x140>)
 80028ec:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d904      	bls.n	80028fe <HAL_GPIO_EXTI_Callback+0x9e>
							hauteur_Initiale=GNSSData.fhMSL;
 80028f4:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <HAL_GPIO_EXTI_Callback+0x140>)
 80028f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028fa:	4a2a      	ldr	r2, [pc, #168]	@ (80029a4 <HAL_GPIO_EXTI_Callback+0x144>)
 80028fc:	6013      	str	r3, [r2, #0]
						}
						flag_calib=1;
 80028fe:	4b2a      	ldr	r3, [pc, #168]	@ (80029a8 <HAL_GPIO_EXTI_Callback+0x148>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]
						create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x20,0,0.0,0.0,GNSSData.fhMSL,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8002904:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <HAL_GPIO_EXTI_Callback+0x140>)
 8002906:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 800290a:	2300      	movs	r3, #0
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	ed9f 5a26 	vldr	s10, [pc, #152]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 8002916:	eddf 4a25 	vldr	s9, [pc, #148]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 800291a:	ed9f 4a24 	vldr	s8, [pc, #144]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 800291e:	eddf 3a23 	vldr	s7, [pc, #140]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 8002922:	ed9f 3a22 	vldr	s6, [pc, #136]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 8002926:	eddf 2a21 	vldr	s5, [pc, #132]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 800292a:	ed9f 2a20 	vldr	s4, [pc, #128]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 800292e:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 8002932:	eeb0 1a67 	vmov.f32	s2, s15
 8002936:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 800293a:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80029ac <HAL_GPIO_EXTI_Callback+0x14c>
 800293e:	2320      	movs	r3, #32
 8002940:	2216      	movs	r2, #22
 8002942:	2182      	movs	r1, #130	@ 0x82
 8002944:	481a      	ldr	r0, [pc, #104]	@ (80029b0 <HAL_GPIO_EXTI_Callback+0x150>)
 8002946:	f001 fcb9 	bl	80042bc <create_and_send_payload>

#endif

										}
					if(gros_btn_time>=4000){
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002952:	db07      	blt.n	8002964 <HAL_GPIO_EXTI_Callback+0x104>
											HAL_GPIO_TogglePin(PWEN_GPIO_Port,PWEN_Pin);
 8002954:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002958:	4816      	ldr	r0, [pc, #88]	@ (80029b4 <HAL_GPIO_EXTI_Callback+0x154>)
 800295a:	f005 fa11 	bl	8007d80 <HAL_GPIO_TogglePin>
											gros_btn_time=0;
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

															}

					gros_btn_time=0;
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_GPIO_EXTI_Callback+0x134>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]


	}

#ifdef PARTIE_HAUT
	if(GPIO_Pin==GPIO_PIN_1){
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d10d      	bne.n	800298c <HAL_GPIO_EXTI_Callback+0x12c>

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)== GPIO_PIN_SET){
 8002970:	2102      	movs	r1, #2
 8002972:	4810      	ldr	r0, [pc, #64]	@ (80029b4 <HAL_GPIO_EXTI_Callback+0x154>)
 8002974:	f005 f9d4 	bl	8007d20 <HAL_GPIO_ReadPin>
 8002978:	4603      	mov	r3, r0
 800297a:	2b01      	cmp	r3, #1
 800297c:	d103      	bne.n	8002986 <HAL_GPIO_EXTI_Callback+0x126>
			flag_drop=0;
 800297e:	4b0e      	ldr	r3, [pc, #56]	@ (80029b8 <HAL_GPIO_EXTI_Callback+0x158>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]


		}
#endif

	}
 8002984:	e002      	b.n	800298c <HAL_GPIO_EXTI_Callback+0x12c>
			flag_drop=1;
 8002986:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <HAL_GPIO_EXTI_Callback+0x158>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
	}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000db4 	.word	0x20000db4
 8002998:	20000b10 	.word	0x20000b10
 800299c:	20000dc8 	.word	0x20000dc8
 80029a0:	20000ba4 	.word	0x20000ba4
 80029a4:	20000dd8 	.word	0x20000dd8
 80029a8:	20000dc4 	.word	0x20000dc4
 80029ac:	00000000 	.word	0x00000000
 80029b0:	200003fc 	.word	0x200003fc
 80029b4:	48000400 	.word	0x48000400
 80029b8:	20000dbc 	.word	0x20000dbc

080029bc <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

	LED_Callback();
 80029c4:	f7ff ff3c 	bl	8002840 <LED_Callback>
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	@ 0x28
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d6:	f002 fef4 	bl	80057c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029da:	f000 f989 	bl	8002cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029de:	f7ff fc67 	bl	80022b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80029e2:	f7ff fc23 	bl	800222c <MX_DMA_Init>
  MX_ADC1_Init();
 80029e6:	f7fe ff07 	bl	80017f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80029ea:	f7ff fd05 	bl	80023f8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80029ee:	f7ff fd43 	bl	8002478 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80029f2:	f001 ff8d 	bl	8004910 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80029f6:	f001 ffd5 	bl	80049a4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80029fa:	f001 fde7 	bl	80045cc <MX_TIM3_Init>
  MX_TIM2_Init();
 80029fe:	f001 fd6f 	bl	80044e0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002a02:	f000 faed 	bl	8002fe0 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002a06:	f00b ffe1 	bl	800e9cc <MX_FATFS_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <main+0x44>
    Error_Handler();
 8002a10:	f000 f9ca 	bl	8002da8 <Error_Handler>
  }
  MX_TIM4_Init();
 8002a14:	f001 fe52 	bl	80046bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8002a18:	f000 fb9c 	bl	8003154 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f000 fc03 	bl	8003228 <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 8002a22:	2128      	movs	r1, #40	@ 0x28
 8002a24:	2020      	movs	r0, #32
 8002a26:	f000 fd41 	bl	80034ac <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 8002a2a:	4a96      	ldr	r2, [pc, #600]	@ (8002c84 <main+0x2b4>)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	ca06      	ldmia	r2, {r1, r2}
 8002a30:	4895      	ldr	r0, [pc, #596]	@ (8002c88 <main+0x2b8>)
 8002a32:	f000 fd15 	bl	8003460 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002a36:	f000 fc0f 	bl	8003258 <ssd1306_UpdateScreen>

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a40:	4892      	ldr	r0, [pc, #584]	@ (8002c8c <main+0x2bc>)
 8002a42:	f005 f985 	bl	8007d50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8002a46:	2201      	movs	r2, #1
 8002a48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a4c:	488f      	ldr	r0, [pc, #572]	@ (8002c8c <main+0x2bc>)
 8002a4e:	f005 f97f 	bl	8007d50 <HAL_GPIO_WritePin>


#ifdef PARTIE_HAUT
  if( release_mecanism()!=HAL_OK){
 8002a52:	f000 fa9b 	bl	8002f8c <release_mecanism>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <main+0xb8>
	  ssd1306_SetCursor(32, 40);
 8002a5c:	2128      	movs	r1, #40	@ 0x28
 8002a5e:	2020      	movs	r0, #32
 8002a60:	f000 fd24 	bl	80034ac <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f000 fbdf 	bl	8003228 <ssd1306_Fill>
 	  ssd1306_WriteString("servopbm", Font_7x10, White);
 8002a6a:	4a86      	ldr	r2, [pc, #536]	@ (8002c84 <main+0x2b4>)
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	ca06      	ldmia	r2, {r1, r2}
 8002a70:	4887      	ldr	r0, [pc, #540]	@ (8002c90 <main+0x2c0>)
 8002a72:	f000 fcf5 	bl	8003460 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002a76:	f000 fbef 	bl	8003258 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002a7a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a7e:	f002 fed7 	bl	8005830 <HAL_Delay>
 	 pbmseeker=1;
 8002a82:	4b84      	ldr	r3, [pc, #528]	@ (8002c94 <main+0x2c4>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]


   }
  flag_servo_started=1;
 8002a88:	4b83      	ldr	r3, [pc, #524]	@ (8002c98 <main+0x2c8>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

#endif



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8002a8e:	2203      	movs	r2, #3
 8002a90:	4982      	ldr	r1, [pc, #520]	@ (8002c9c <main+0x2cc>)
 8002a92:	4883      	ldr	r0, [pc, #524]	@ (8002ca0 <main+0x2d0>)
 8002a94:	f003 fab2 	bl	8005ffc <HAL_ADC_Start_DMA>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d015      	beq.n	8002aca <main+0xfa>
	  ssd1306_SetCursor(32, 40);
 8002a9e:	2128      	movs	r1, #40	@ 0x28
 8002aa0:	2020      	movs	r0, #32
 8002aa2:	f000 fd03 	bl	80034ac <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f000 fbbe 	bl	8003228 <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 8002aac:	4a75      	ldr	r2, [pc, #468]	@ (8002c84 <main+0x2b4>)
 8002aae:	2301      	movs	r3, #1
 8002ab0:	ca06      	ldmia	r2, {r1, r2}
 8002ab2:	487c      	ldr	r0, [pc, #496]	@ (8002ca4 <main+0x2d4>)
 8002ab4:	f000 fcd4 	bl	8003460 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002ab8:	f000 fbce 	bl	8003258 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002abc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ac0:	f002 feb6 	bl	8005830 <HAL_Delay>
 	 pbmseeker=1;
 8002ac4:	4b73      	ldr	r3, [pc, #460]	@ (8002c94 <main+0x2c4>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 8002aca:	2064      	movs	r0, #100	@ 0x64
 8002acc:	f002 feb0 	bl	8005830 <HAL_Delay>
   HAL_UART_Abort(&huart1);
 8002ad0:	4875      	ldr	r0, [pc, #468]	@ (8002ca8 <main+0x2d8>)
 8002ad2:	f009 fc97 	bl	800c404 <HAL_UART_Abort>
   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)workingbuffer, 100)!=HAL_OK){
 8002ad6:	2264      	movs	r2, #100	@ 0x64
 8002ad8:	4974      	ldr	r1, [pc, #464]	@ (8002cac <main+0x2dc>)
 8002ada:	4873      	ldr	r0, [pc, #460]	@ (8002ca8 <main+0x2d8>)
 8002adc:	f009 fc46 	bl	800c36c <HAL_UART_Receive_DMA>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d015      	beq.n	8002b12 <main+0x142>
	   ssd1306_SetCursor(32, 40);
 8002ae6:	2128      	movs	r1, #40	@ 0x28
 8002ae8:	2020      	movs	r0, #32
 8002aea:	f000 fcdf 	bl	80034ac <ssd1306_SetCursor>
  	  ssd1306_Fill(Black);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f000 fb9a 	bl	8003228 <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 8002af4:	4a63      	ldr	r2, [pc, #396]	@ (8002c84 <main+0x2b4>)
 8002af6:	2301      	movs	r3, #1
 8002af8:	ca06      	ldmia	r2, {r1, r2}
 8002afa:	486d      	ldr	r0, [pc, #436]	@ (8002cb0 <main+0x2e0>)
 8002afc:	f000 fcb0 	bl	8003460 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002b00:	f000 fbaa 	bl	8003258 <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 8002b04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b08:	f002 fe92 	bl	8005830 <HAL_Delay>
  	pbmseeker=1;
 8002b0c:	4b61      	ldr	r3, [pc, #388]	@ (8002c94 <main+0x2c4>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 8002b12:	f7ff fdc9 	bl	80026a8 <LED_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <main+0x178>
	  ssd1306_SetCursor(32, 40);
 8002b1c:	2128      	movs	r1, #40	@ 0x28
 8002b1e:	2020      	movs	r0, #32
 8002b20:	f000 fcc4 	bl	80034ac <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f000 fb7f 	bl	8003228 <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 8002b2a:	4a56      	ldr	r2, [pc, #344]	@ (8002c84 <main+0x2b4>)
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	ca06      	ldmia	r2, {r1, r2}
 8002b30:	4860      	ldr	r0, [pc, #384]	@ (8002cb4 <main+0x2e4>)
 8002b32:	f000 fc95 	bl	8003460 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002b36:	f000 fb8f 	bl	8003258 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002b3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b3e:	f002 fe77 	bl	8005830 <HAL_Delay>
 	 pbmseeker=1;
 8002b42:	4b54      	ldr	r3, [pc, #336]	@ (8002c94 <main+0x2c4>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 8002b48:	f7fe fa92 	bl	8001070 <Init_HighPerf_Mode_6_axis>



  if(bmp581_init_precise_normal(&myDatabmp581)!=HAL_OK){
 8002b4c:	485a      	ldr	r0, [pc, #360]	@ (8002cb8 <main+0x2e8>)
 8002b4e:	f7ff fa5b 	bl	8002008 <bmp581_init_precise_normal>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <main+0x1b4>
	  ssd1306_SetCursor(32, 40);
 8002b58:	2128      	movs	r1, #40	@ 0x28
 8002b5a:	2020      	movs	r0, #32
 8002b5c:	f000 fca6 	bl	80034ac <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f000 fb61 	bl	8003228 <ssd1306_Fill>
 	  ssd1306_WriteString("bmp pbm", Font_7x10, White);
 8002b66:	4a47      	ldr	r2, [pc, #284]	@ (8002c84 <main+0x2b4>)
 8002b68:	2301      	movs	r3, #1
 8002b6a:	ca06      	ldmia	r2, {r1, r2}
 8002b6c:	4853      	ldr	r0, [pc, #332]	@ (8002cbc <main+0x2ec>)
 8002b6e:	f000 fc77 	bl	8003460 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002b72:	f000 fb71 	bl	8003258 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002b76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b7a:	f002 fe59 	bl	8005830 <HAL_Delay>
 	 pbmseeker=1;
 8002b7e:	4b45      	ldr	r3, [pc, #276]	@ (8002c94 <main+0x2c4>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

   }
#endif

#ifdef PARTIE_HAUT
  if( INIT_PERM_TARVOS(TOP_ADDR, BOTTOM_ADDR)!=HAL_OK){
 8002b84:	2116      	movs	r1, #22
 8002b86:	2015      	movs	r0, #21
 8002b88:	f001 f9fc 	bl	8003f84 <INIT_PERM_TARVOS>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d015      	beq.n	8002bbe <main+0x1ee>
	  ssd1306_SetCursor(32, 40);
 8002b92:	2128      	movs	r1, #40	@ 0x28
 8002b94:	2020      	movs	r0, #32
 8002b96:	f000 fc89 	bl	80034ac <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f000 fb44 	bl	8003228 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 8002ba0:	4a38      	ldr	r2, [pc, #224]	@ (8002c84 <main+0x2b4>)
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	ca06      	ldmia	r2, {r1, r2}
 8002ba6:	4846      	ldr	r0, [pc, #280]	@ (8002cc0 <main+0x2f0>)
 8002ba8:	f000 fc5a 	bl	8003460 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002bac:	f000 fb54 	bl	8003258 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002bb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bb4:	f002 fe3c 	bl	8005830 <HAL_Delay>
 	 pbmseeker=1;
 8002bb8:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <main+0x2c4>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]


   }
#endif

  HAL_Delay(100);
 8002bbe:	2064      	movs	r0, #100	@ 0x64
 8002bc0:	f002 fe36 	bl	8005830 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8002bc4:	483f      	ldr	r0, [pc, #252]	@ (8002cc4 <main+0x2f4>)
 8002bc6:	f009 fc1d 	bl	800c404 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5)!=HAL_OK){
 8002bca:	2205      	movs	r2, #5
 8002bcc:	493e      	ldr	r1, [pc, #248]	@ (8002cc8 <main+0x2f8>)
 8002bce:	483d      	ldr	r0, [pc, #244]	@ (8002cc4 <main+0x2f4>)
 8002bd0:	f009 fbcc 	bl	800c36c <HAL_UART_Receive_DMA>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <main+0x236>
	   ssd1306_SetCursor(32, 40);
 8002bda:	2128      	movs	r1, #40	@ 0x28
 8002bdc:	2020      	movs	r0, #32
 8002bde:	f000 fc65 	bl	80034ac <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f000 fb20 	bl	8003228 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 8002be8:	4a26      	ldr	r2, [pc, #152]	@ (8002c84 <main+0x2b4>)
 8002bea:	2301      	movs	r3, #1
 8002bec:	ca06      	ldmia	r2, {r1, r2}
 8002bee:	4837      	ldr	r0, [pc, #220]	@ (8002ccc <main+0x2fc>)
 8002bf0:	f000 fc36 	bl	8003460 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002bf4:	f000 fb30 	bl	8003258 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002bf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bfc:	f002 fe18 	bl	8005830 <HAL_Delay>
 	pbmseeker=1;
 8002c00:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <main+0x2c4>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 8002c06:	4832      	ldr	r0, [pc, #200]	@ (8002cd0 <main+0x300>)
 8002c08:	f007 fb96 	bl	800a338 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8002c0c:	200a      	movs	r0, #10
 8002c0e:	f002 fe0f 	bl	8005830 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 8002c12:	2201      	movs	r2, #1
 8002c14:	492f      	ldr	r1, [pc, #188]	@ (8002cd4 <main+0x304>)
 8002c16:	4830      	ldr	r0, [pc, #192]	@ (8002cd8 <main+0x308>)
 8002c18:	f00d fcd4 	bl	80105c4 <f_mount>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b2e      	ldr	r3, [pc, #184]	@ (8002cdc <main+0x30c>)
 8002c22:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 8002c24:	4b2d      	ldr	r3, [pc, #180]	@ (8002cdc <main+0x30c>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d125      	bne.n	8002c78 <main+0x2a8>
  			  fres = f_mkdir("DEMO");
 8002c2c:	482c      	ldr	r0, [pc, #176]	@ (8002ce0 <main+0x310>)
 8002c2e:	f00e fb9d 	bl	801136c <f_mkdir>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <main+0x30c>)
 8002c38:	701a      	strb	r2, [r3, #0]
  			  BYTE readBuf[30];
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002c3a:	221a      	movs	r2, #26
 8002c3c:	4929      	ldr	r1, [pc, #164]	@ (8002ce4 <main+0x314>)
 8002c3e:	482a      	ldr	r0, [pc, #168]	@ (8002ce8 <main+0x318>)
 8002c40:	f00d fd24 	bl	801068c <f_open>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <main+0x30c>)
 8002c4a:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 8002c4c:	4b23      	ldr	r3, [pc, #140]	@ (8002cdc <main+0x30c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <main+0x29e>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	220b      	movs	r2, #11
 8002c58:	4924      	ldr	r1, [pc, #144]	@ (8002cec <main+0x31c>)
 8002c5a:	4823      	ldr	r0, [pc, #140]	@ (8002ce8 <main+0x318>)
 8002c5c:	f00d fed7 	bl	8010a0e <f_write>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <main+0x30c>)
 8002c66:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 8002c68:	481f      	ldr	r0, [pc, #124]	@ (8002ce8 <main+0x318>)
 8002c6a:	f00e f8fd 	bl	8010e68 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4918      	ldr	r1, [pc, #96]	@ (8002cd4 <main+0x304>)
 8002c72:	2000      	movs	r0, #0
 8002c74:	f00d fca6 	bl	80105c4 <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002c78:	f7fe ffa4 	bl	8001bc4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002c7c:	f00e fd53 	bl	8011726 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <main+0x2b0>
 8002c84:	20000018 	.word	0x20000018
 8002c88:	0801942c 	.word	0x0801942c
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	08019434 	.word	0x08019434
 8002c94:	20000de0 	.word	0x20000de0
 8002c98:	20000dcc 	.word	0x20000dcc
 8002c9c:	20000b14 	.word	0x20000b14
 8002ca0:	20000240 	.word	0x20000240
 8002ca4:	08019440 	.word	0x08019440
 8002ca8:	200014cc 	.word	0x200014cc
 8002cac:	200004fc 	.word	0x200004fc
 8002cb0:	08019448 	.word	0x08019448
 8002cb4:	08019450 	.word	0x08019450
 8002cb8:	20000690 	.word	0x20000690
 8002cbc:	08019458 	.word	0x08019458
 8002cc0:	08019460 	.word	0x08019460
 8002cc4:	20001438 	.word	0x20001438
 8002cc8:	200004bc 	.word	0x200004bc
 8002ccc:	0801946c 	.word	0x0801946c
 8002cd0:	20001384 	.word	0x20001384
 8002cd4:	08019478 	.word	0x08019478
 8002cd8:	200006a8 	.word	0x200006a8
 8002cdc:	200008dc 	.word	0x200008dc
 8002ce0:	0801947c 	.word	0x0801947c
 8002ce4:	08019484 	.word	0x08019484
 8002ce8:	200008e0 	.word	0x200008e0
 8002cec:	08019494 	.word	0x08019494

08002cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b094      	sub	sp, #80	@ 0x50
 8002cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf6:	f107 0318 	add.w	r3, r7, #24
 8002cfa:	2238      	movs	r2, #56	@ 0x38
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f012 f9ce 	bl	80150a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002d16:	f005 fe89 	bl	8008a2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d24:	2302      	movs	r3, #2
 8002d26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002d30:	2319      	movs	r3, #25
 8002d32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d34:	2302      	movs	r3, #2
 8002d36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d40:	f107 0318 	add.w	r3, r7, #24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f005 ff25 	bl	8008b94 <HAL_RCC_OscConfig>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002d50:	f000 f82a 	bl	8002da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d54:	230f      	movs	r3, #15
 8002d56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	2103      	movs	r1, #3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f006 fa23 	bl	80091b8 <HAL_RCC_ClockConfig>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002d78:	f000 f816 	bl	8002da8 <Error_Handler>
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3750      	adds	r7, #80	@ 0x50
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002d96:	f002 fd2d 	bl	80057f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40012c00 	.word	0x40012c00

08002da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dac:	b672      	cpsid	i
}
 8002dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <Error_Handler+0x8>

08002db4 <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(void){
 8002db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db8:	b0a9      	sub	sp, #164	@ 0xa4
 8002dba:	af18      	add	r7, sp, #96	@ 0x60

	uint16_t sizeligne=0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	FRESULT fres=FR_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

#ifdef PARTIE_HAUT

	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002dc6:	4b63      	ldr	r3, [pc, #396]	@ (8002f54 <store_in_sd+0x1a0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dcc:	4b62      	ldr	r3, [pc, #392]	@ (8002f58 <store_in_sd+0x1a4>)
 8002dce:	681e      	ldr	r6, [r3, #0]
 8002dd0:	4b62      	ldr	r3, [pc, #392]	@ (8002f5c <store_in_sd+0x1a8>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	633a      	str	r2, [r7, #48]	@ 0x30
			"%d,%d,%d,%0.7f,%0.7f,%0.2f,%0.2f,%0.1f,%0.1f,%0.1f,%0.0f,%0.0f,%0.0f,%lu\n\r",
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002dd6:	4b62      	ldr	r3, [pc, #392]	@ (8002f60 <store_in_sd+0x1ac>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fbdb 	bl	8000598 <__aeabi_f2d>
 8002de2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002de6:	4b5e      	ldr	r3, [pc, #376]	@ (8002f60 <store_in_sd+0x1ac>)
 8002de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fbd3 	bl	8000598 <__aeabi_f2d>
 8002df2:	e9c7 0108 	strd	r0, r1, [r7, #32]
			flag_calib,flag_drop,flag_separation,GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,
 8002df6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f60 <store_in_sd+0x1ac>)
 8002df8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd fbcb 	bl	8000598 <__aeabi_f2d>
 8002e02:	e9c7 0106 	strd	r0, r1, [r7, #24]
			myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002e06:	4b57      	ldr	r3, [pc, #348]	@ (8002f64 <store_in_sd+0x1b0>)
 8002e08:	695b      	ldr	r3, [r3, #20]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fbc4 	bl	8000598 <__aeabi_f2d>
 8002e10:	e9c7 0104 	strd	r0, r1, [r7, #16]
			myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002e14:	4b52      	ldr	r3, [pc, #328]	@ (8002f60 <store_in_sd+0x1ac>)
 8002e16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fbbc 	bl	8000598 <__aeabi_f2d>
 8002e20:	e9c7 0102 	strd	r0, r1, [r7, #8]
			myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002e24:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <store_in_sd+0x1ac>)
 8002e26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fbb4 	bl	8000598 <__aeabi_f2d>
 8002e30:	e9c7 0100 	strd	r0, r1, [r7]
			myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
 8002e34:	4b4b      	ldr	r3, [pc, #300]	@ (8002f64 <store_in_sd+0x1b0>)
 8002e36:	68db      	ldr	r3, [r3, #12]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fbad 	bl	8000598 <__aeabi_f2d>
 8002e3e:	4682      	mov	sl, r0
 8002e40:	468b      	mov	fp, r1
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
 8002e42:	4b49      	ldr	r3, [pc, #292]	@ (8002f68 <store_in_sd+0x1b4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fba6 	bl	8000598 <__aeabi_f2d>
 8002e4c:	4680      	mov	r8, r0
 8002e4e:	4689      	mov	r9, r1
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <store_in_sd+0x1b4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb9f 	bl	8000598 <__aeabi_f2d>
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	460d      	mov	r5, r1
			myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);
 8002e5e:	4b42      	ldr	r3, [pc, #264]	@ (8002f68 <store_in_sd+0x1b4>)
 8002e60:	689b      	ldr	r3, [r3, #8]
	sizeligne=snprintf((char *)sdcardbuffer,256,
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb98 	bl	8000598 <__aeabi_f2d>
 8002e68:	4b40      	ldr	r3, [pc, #256]	@ (8002f6c <store_in_sd+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	9316      	str	r3, [sp, #88]	@ 0x58
 8002e6e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8002e72:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8002e76:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8002e7a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 8002e7e:	ed97 7b00 	vldr	d7, [r7]
 8002e82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002e86:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002e8e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e92:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002e96:	ed97 7b06 	vldr	d7, [r7, #24]
 8002e9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e9e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002ea2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002ea6:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002eaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb0:	9201      	str	r2, [sp, #4]
 8002eb2:	9600      	str	r6, [sp, #0]
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f70 <store_in_sd+0x1bc>)
 8002eb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ebc:	482d      	ldr	r0, [pc, #180]	@ (8002f74 <store_in_sd+0x1c0>)
 8002ebe:	f011 ffbf 	bl	8014e40 <sniprintf>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
				myDatabmp581.altitude,GNSSData.fgSpeed,GNSSData.fvspeed,myDatabmp581.press,
				myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,distance_entre_module,timeindex);
#endif


	 fres = f_mount(&FatFs, "", 1);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	492b      	ldr	r1, [pc, #172]	@ (8002f78 <store_in_sd+0x1c4>)
 8002eca:	482c      	ldr	r0, [pc, #176]	@ (8002f7c <store_in_sd+0x1c8>)
 8002ecc:	f00d fb7a 	bl	80105c4 <f_mount>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			  if (fres == FR_OK) {
 8002ed6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d133      	bne.n	8002f46 <store_in_sd+0x192>
				  if(flag_drop==0){
 8002ede:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <store_in_sd+0x1a4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d108      	bne.n	8002ef8 <store_in_sd+0x144>
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002ee6:	2212      	movs	r2, #18
 8002ee8:	4925      	ldr	r1, [pc, #148]	@ (8002f80 <store_in_sd+0x1cc>)
 8002eea:	4826      	ldr	r0, [pc, #152]	@ (8002f84 <store_in_sd+0x1d0>)
 8002eec:	f00d fbce 	bl	801068c <f_open>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002ef6:	e007      	b.n	8002f08 <store_in_sd+0x154>
					  fres = f_open(&fil, (uint8_t *) "BOT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif
				  }
				  else{
		#ifdef PARTIE_HAUT
					  fres = f_open(&fil, (uint8_t *) "TOP_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002ef8:	2212      	movs	r2, #18
 8002efa:	4923      	ldr	r1, [pc, #140]	@ (8002f88 <store_in_sd+0x1d4>)
 8002efc:	4821      	ldr	r0, [pc, #132]	@ (8002f84 <store_in_sd+0x1d0>)
 8002efe:	f00d fbc5 	bl	801068c <f_open>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		#ifdef PARTIE_BAS
					  fres = f_open(&fil, (uint8_t *) "BOT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
		#endif

				  }
				  if (fres == FR_OK) {
 8002f08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d115      	bne.n	8002f3c <store_in_sd+0x188>
					  fres=f_lseek(&fil, f_size(&fil));
 8002f10:	4b1c      	ldr	r3, [pc, #112]	@ (8002f84 <store_in_sd+0x1d0>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4619      	mov	r1, r3
 8002f16:	481b      	ldr	r0, [pc, #108]	@ (8002f84 <store_in_sd+0x1d0>)
 8002f18:	f00d ffd5 	bl	8010ec6 <f_lseek>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 8002f22:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002f24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f28:	4912      	ldr	r1, [pc, #72]	@ (8002f74 <store_in_sd+0x1c0>)
 8002f2a:	4816      	ldr	r0, [pc, #88]	@ (8002f84 <store_in_sd+0x1d0>)
 8002f2c:	f00d fd6f 	bl	8010a0e <f_write>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					  f_close(&fil);
 8002f36:	4813      	ldr	r0, [pc, #76]	@ (8002f84 <store_in_sd+0x1d0>)
 8002f38:	f00d ff96 	bl	8010e68 <f_close>
				  }
				  f_mount(NULL, "", 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	490e      	ldr	r1, [pc, #56]	@ (8002f78 <store_in_sd+0x1c4>)
 8002f40:	2000      	movs	r0, #0
 8002f42:	f00d fb3f 	bl	80105c4 <f_mount>
			  }


	return fres;
 8002f46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3744      	adds	r7, #68	@ 0x44
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f54:	20000dc4 	.word	0x20000dc4
 8002f58:	20000dbc 	.word	0x20000dbc
 8002f5c:	20000dc0 	.word	0x20000dc0
 8002f60:	20000ba4 	.word	0x20000ba4
 8002f64:	20000690 	.word	0x20000690
 8002f68:	20000670 	.word	0x20000670
 8002f6c:	20000dec 	.word	0x20000dec
 8002f70:	080194a0 	.word	0x080194a0
 8002f74:	2000056c 	.word	0x2000056c
 8002f78:	080194ec 	.word	0x080194ec
 8002f7c:	200006a8 	.word	0x200006a8
 8002f80:	080194f0 	.word	0x080194f0
 8002f84:	200008e0 	.word	0x200008e0
 8002f88:	080194fc 	.word	0x080194fc

08002f8c <release_mecanism>:




}
HAL_StatusTypeDef release_mecanism(void){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <release_mecanism+0x1c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002f98:	635a      	str	r2, [r3, #52]	@ 0x34
	 return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4802      	ldr	r0, [pc, #8]	@ (8002fa8 <release_mecanism+0x1c>)
 8002f9e:	f007 fa97 	bl	800a4d0 <HAL_TIM_PWM_Start>
 8002fa2:	4603      	mov	r3, r0


}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20001338 	.word	0x20001338

08002fac <lock_mecanism>:
HAL_StatusTypeDef lock_mecanism(void){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,CLOSED_HIGH_TIME);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <lock_mecanism+0x1c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8002fb8:	635a      	str	r2, [r3, #52]	@ 0x34
	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4802      	ldr	r0, [pc, #8]	@ (8002fc8 <lock_mecanism+0x1c>)
 8002fbe:	f007 fa87 	bl	800a4d0 <HAL_TIM_PWM_Start>
 8002fc2:	4603      	mov	r3, r0


}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20001338 	.word	0x20001338

08002fcc <stop_servo>:
void stop_servo(void){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4802      	ldr	r0, [pc, #8]	@ (8002fdc <stop_servo+0x10>)
 8002fd4:	f007 fb7c 	bl	800a6d0 <HAL_TIM_PWM_Stop>

}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20001338 	.word	0x20001338

08002fe0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <MX_SPI1_Init+0x74>)
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <MX_SPI1_Init+0x78>)
 8002fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <MX_SPI1_Init+0x74>)
 8002fec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <MX_SPI1_Init+0x74>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff8:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <MX_SPI1_Init+0x74>)
 8002ffa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ffe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003000:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <MX_SPI1_Init+0x74>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003006:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <MX_SPI1_Init+0x74>)
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <MX_SPI1_Init+0x74>)
 800300e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003012:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003014:	4b0f      	ldr	r3, [pc, #60]	@ (8003054 <MX_SPI1_Init+0x74>)
 8003016:	2218      	movs	r2, #24
 8003018:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <MX_SPI1_Init+0x74>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003020:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <MX_SPI1_Init+0x74>)
 8003022:	2200      	movs	r2, #0
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <MX_SPI1_Init+0x74>)
 8003028:	2200      	movs	r2, #0
 800302a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <MX_SPI1_Init+0x74>)
 800302e:	2207      	movs	r2, #7
 8003030:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <MX_SPI1_Init+0x74>)
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <MX_SPI1_Init+0x74>)
 800303a:	2208      	movs	r2, #8
 800303c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800303e:	4805      	ldr	r0, [pc, #20]	@ (8003054 <MX_SPI1_Init+0x74>)
 8003040:	f006 fcf4 	bl	8009a2c <HAL_SPI_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800304a:	f7ff fead 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000df0 	.word	0x20000df0
 8003058:	40013000 	.word	0x40013000

0800305c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <HAL_SPI_MspInit+0x7c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d128      	bne.n	80030d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800307e:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 8003080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003082:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 8003084:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003088:	6613      	str	r3, [r2, #96]	@ 0x60
 800308a:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	4a10      	ldr	r2, [pc, #64]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a2:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030ae:	23e0      	movs	r3, #224	@ 0xe0
 80030b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030be:	2305      	movs	r3, #5
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	4619      	mov	r1, r3
 80030c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030cc:	f004 fca6 	bl	8007a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80030d0:	bf00      	nop
 80030d2:	3728      	adds	r7, #40	@ 0x28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40013000 	.word	0x40013000
 80030dc:	40021000 	.word	0x40021000

080030e0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	9302      	str	r3, [sp, #8]
 8003100:	2301      	movs	r3, #1
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2301      	movs	r3, #1
 800310a:	2200      	movs	r2, #0
 800310c:	2178      	movs	r1, #120	@ 0x78
 800310e:	4803      	ldr	r0, [pc, #12]	@ (800311c <ssd1306_WriteCommand+0x2c>)
 8003110:	f004 ff04 	bl	8007f1c <HAL_I2C_Mem_Write>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200003a8 	.word	0x200003a8

08003120 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af04      	add	r7, sp, #16
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f04f 32ff 	mov.w	r2, #4294967295
 8003132:	9202      	str	r2, [sp, #8]
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2301      	movs	r3, #1
 800313c:	2240      	movs	r2, #64	@ 0x40
 800313e:	2178      	movs	r1, #120	@ 0x78
 8003140:	4803      	ldr	r0, [pc, #12]	@ (8003150 <ssd1306_WriteData+0x30>)
 8003142:	f004 feeb 	bl	8007f1c <HAL_I2C_Mem_Write>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200003a8 	.word	0x200003a8

08003154 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003158:	f7ff ffc2 	bl	80030e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800315c:	2064      	movs	r0, #100	@ 0x64
 800315e:	f002 fb67 	bl	8005830 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003162:	2000      	movs	r0, #0
 8003164:	f000 f9ce 	bl	8003504 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003168:	2020      	movs	r0, #32
 800316a:	f7ff ffc1 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800316e:	2000      	movs	r0, #0
 8003170:	f7ff ffbe 	bl	80030f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003174:	20b0      	movs	r0, #176	@ 0xb0
 8003176:	f7ff ffbb 	bl	80030f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800317a:	20c8      	movs	r0, #200	@ 0xc8
 800317c:	f7ff ffb8 	bl	80030f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff ffb5 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003186:	2010      	movs	r0, #16
 8003188:	f7ff ffb2 	bl	80030f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800318c:	2040      	movs	r0, #64	@ 0x40
 800318e:	f7ff ffaf 	bl	80030f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003192:	20ff      	movs	r0, #255	@ 0xff
 8003194:	f000 f9a2 	bl	80034dc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003198:	20a1      	movs	r0, #161	@ 0xa1
 800319a:	f7ff ffa9 	bl	80030f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800319e:	20a6      	movs	r0, #166	@ 0xa6
 80031a0:	f7ff ffa6 	bl	80030f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80031a4:	20a8      	movs	r0, #168	@ 0xa8
 80031a6:	f7ff ffa3 	bl	80030f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80031aa:	203f      	movs	r0, #63	@ 0x3f
 80031ac:	f7ff ffa0 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80031b0:	20a4      	movs	r0, #164	@ 0xa4
 80031b2:	f7ff ff9d 	bl	80030f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80031b6:	20d3      	movs	r0, #211	@ 0xd3
 80031b8:	f7ff ff9a 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80031bc:	2000      	movs	r0, #0
 80031be:	f7ff ff97 	bl	80030f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80031c2:	20d5      	movs	r0, #213	@ 0xd5
 80031c4:	f7ff ff94 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80031c8:	20f0      	movs	r0, #240	@ 0xf0
 80031ca:	f7ff ff91 	bl	80030f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80031ce:	20d9      	movs	r0, #217	@ 0xd9
 80031d0:	f7ff ff8e 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80031d4:	2022      	movs	r0, #34	@ 0x22
 80031d6:	f7ff ff8b 	bl	80030f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80031da:	20da      	movs	r0, #218	@ 0xda
 80031dc:	f7ff ff88 	bl	80030f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80031e0:	2012      	movs	r0, #18
 80031e2:	f7ff ff85 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80031e6:	20db      	movs	r0, #219	@ 0xdb
 80031e8:	f7ff ff82 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80031ec:	2020      	movs	r0, #32
 80031ee:	f7ff ff7f 	bl	80030f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80031f2:	208d      	movs	r0, #141	@ 0x8d
 80031f4:	f7ff ff7c 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80031f8:	2014      	movs	r0, #20
 80031fa:	f7ff ff79 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80031fe:	2001      	movs	r0, #1
 8003200:	f000 f980 	bl	8003504 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003204:	2000      	movs	r0, #0
 8003206:	f000 f80f 	bl	8003228 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800320a:	f000 f825 	bl	8003258 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800320e:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <ssd1306_Init+0xd0>)
 8003210:	2200      	movs	r2, #0
 8003212:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003214:	4b03      	ldr	r3, [pc, #12]	@ (8003224 <ssd1306_Init+0xd0>)
 8003216:	2200      	movs	r2, #0
 8003218:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800321a:	4b02      	ldr	r3, [pc, #8]	@ (8003224 <ssd1306_Init+0xd0>)
 800321c:	2201      	movs	r2, #1
 800321e:	711a      	strb	r2, [r3, #4]
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20001254 	.word	0x20001254

08003228 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <ssd1306_Fill+0x14>
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <ssd1306_Fill+0x16>
 800323c:	23ff      	movs	r3, #255	@ 0xff
 800323e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003242:	4619      	mov	r1, r3
 8003244:	4803      	ldr	r0, [pc, #12]	@ (8003254 <ssd1306_Fill+0x2c>)
 8003246:	f011 ff2b 	bl	80150a0 <memset>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000e54 	.word	0x20000e54

08003258 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800325e:	2300      	movs	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
 8003262:	e016      	b.n	8003292 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	3b50      	subs	r3, #80	@ 0x50
 8003268:	b2db      	uxtb	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff40 	bl	80030f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003270:	2000      	movs	r0, #0
 8003272:	f7ff ff3d 	bl	80030f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003276:	2010      	movs	r0, #16
 8003278:	f7ff ff3a 	bl	80030f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	01db      	lsls	r3, r3, #7
 8003280:	4a08      	ldr	r2, [pc, #32]	@ (80032a4 <ssd1306_UpdateScreen+0x4c>)
 8003282:	4413      	add	r3, r2
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff4a 	bl	8003120 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	3301      	adds	r3, #1
 8003290:	71fb      	strb	r3, [r7, #7]
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2b07      	cmp	r3, #7
 8003296:	d9e5      	bls.n	8003264 <ssd1306_UpdateScreen+0xc>
    }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000e54 	.word	0x20000e54

080032a8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
 80032b2:	460b      	mov	r3, r1
 80032b4:	71bb      	strb	r3, [r7, #6]
 80032b6:	4613      	mov	r3, r2
 80032b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db3d      	blt.n	800333e <ssd1306_DrawPixel+0x96>
 80032c2:	79bb      	ldrb	r3, [r7, #6]
 80032c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80032c6:	d83a      	bhi.n	800333e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80032c8:	797b      	ldrb	r3, [r7, #5]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d11a      	bne.n	8003304 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80032ce:	79fa      	ldrb	r2, [r7, #7]
 80032d0:	79bb      	ldrb	r3, [r7, #6]
 80032d2:	08db      	lsrs	r3, r3, #3
 80032d4:	b2d8      	uxtb	r0, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	01db      	lsls	r3, r3, #7
 80032da:	4413      	add	r3, r2
 80032dc:	4a1b      	ldr	r2, [pc, #108]	@ (800334c <ssd1306_DrawPixel+0xa4>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
 80032e0:	b25a      	sxtb	r2, r3
 80032e2:	79bb      	ldrb	r3, [r7, #6]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	4313      	orrs	r3, r2
 80032f2:	b259      	sxtb	r1, r3
 80032f4:	79fa      	ldrb	r2, [r7, #7]
 80032f6:	4603      	mov	r3, r0
 80032f8:	01db      	lsls	r3, r3, #7
 80032fa:	4413      	add	r3, r2
 80032fc:	b2c9      	uxtb	r1, r1
 80032fe:	4a13      	ldr	r2, [pc, #76]	@ (800334c <ssd1306_DrawPixel+0xa4>)
 8003300:	54d1      	strb	r1, [r2, r3]
 8003302:	e01d      	b.n	8003340 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003304:	79fa      	ldrb	r2, [r7, #7]
 8003306:	79bb      	ldrb	r3, [r7, #6]
 8003308:	08db      	lsrs	r3, r3, #3
 800330a:	b2d8      	uxtb	r0, r3
 800330c:	4603      	mov	r3, r0
 800330e:	01db      	lsls	r3, r3, #7
 8003310:	4413      	add	r3, r2
 8003312:	4a0e      	ldr	r2, [pc, #56]	@ (800334c <ssd1306_DrawPixel+0xa4>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	b25a      	sxtb	r2, r3
 8003318:	79bb      	ldrb	r3, [r7, #6]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	b25b      	sxtb	r3, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	b25b      	sxtb	r3, r3
 800332a:	4013      	ands	r3, r2
 800332c:	b259      	sxtb	r1, r3
 800332e:	79fa      	ldrb	r2, [r7, #7]
 8003330:	4603      	mov	r3, r0
 8003332:	01db      	lsls	r3, r3, #7
 8003334:	4413      	add	r3, r2
 8003336:	b2c9      	uxtb	r1, r1
 8003338:	4a04      	ldr	r2, [pc, #16]	@ (800334c <ssd1306_DrawPixel+0xa4>)
 800333a:	54d1      	strb	r1, [r2, r3]
 800333c:	e000      	b.n	8003340 <ssd1306_DrawPixel+0x98>
        return;
 800333e:	bf00      	nop
    }
}
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000e54 	.word	0x20000e54

08003350 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b089      	sub	sp, #36	@ 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	4604      	mov	r4, r0
 8003358:	1d38      	adds	r0, r7, #4
 800335a:	e880 0006 	stmia.w	r0, {r1, r2}
 800335e:	461a      	mov	r2, r3
 8003360:	4623      	mov	r3, r4
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	4613      	mov	r3, r2
 8003366:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b1f      	cmp	r3, #31
 800336c:	d902      	bls.n	8003374 <ssd1306_WriteChar+0x24>
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b7e      	cmp	r3, #126	@ 0x7e
 8003372:	d901      	bls.n	8003378 <ssd1306_WriteChar+0x28>
        return 0;
 8003374:	2300      	movs	r3, #0
 8003376:	e06c      	b.n	8003452 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003378:	4b38      	ldr	r3, [pc, #224]	@ (800345c <ssd1306_WriteChar+0x10c>)
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	793b      	ldrb	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	2b80      	cmp	r3, #128	@ 0x80
 8003384:	dc06      	bgt.n	8003394 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003386:	4b35      	ldr	r3, [pc, #212]	@ (800345c <ssd1306_WriteChar+0x10c>)
 8003388:	885b      	ldrh	r3, [r3, #2]
 800338a:	461a      	mov	r2, r3
 800338c:	797b      	ldrb	r3, [r7, #5]
 800338e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003390:	2b40      	cmp	r3, #64	@ 0x40
 8003392:	dd01      	ble.n	8003398 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003394:	2300      	movs	r3, #0
 8003396:	e05c      	b.n	8003452 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	e04c      	b.n	8003438 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	3b20      	subs	r3, #32
 80033a4:	7979      	ldrb	r1, [r7, #5]
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4619      	mov	r1, r3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	440b      	add	r3, r1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	e034      	b.n	8003428 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80033ce:	4b23      	ldr	r3, [pc, #140]	@ (800345c <ssd1306_WriteChar+0x10c>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4413      	add	r3, r2
 80033da:	b2d8      	uxtb	r0, r3
 80033dc:	4b1f      	ldr	r3, [pc, #124]	@ (800345c <ssd1306_WriteChar+0x10c>)
 80033de:	885b      	ldrh	r3, [r3, #2]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	7bba      	ldrb	r2, [r7, #14]
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7ff ff5b 	bl	80032a8 <ssd1306_DrawPixel>
 80033f2:	e016      	b.n	8003422 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80033f4:	4b19      	ldr	r3, [pc, #100]	@ (800345c <ssd1306_WriteChar+0x10c>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4413      	add	r3, r2
 8003400:	b2d8      	uxtb	r0, r3
 8003402:	4b16      	ldr	r3, [pc, #88]	@ (800345c <ssd1306_WriteChar+0x10c>)
 8003404:	885b      	ldrh	r3, [r3, #2]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4413      	add	r3, r2
 800340e:	b2d9      	uxtb	r1, r3
 8003410:	7bbb      	ldrb	r3, [r7, #14]
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	f7ff ff43 	bl	80032a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	3301      	adds	r3, #1
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	793b      	ldrb	r3, [r7, #4]
 800342a:	461a      	mov	r2, r3
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	4293      	cmp	r3, r2
 8003430:	d3c5      	bcc.n	80033be <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3301      	adds	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	797b      	ldrb	r3, [r7, #5]
 800343a:	461a      	mov	r2, r3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4293      	cmp	r3, r2
 8003440:	d3ad      	bcc.n	800339e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <ssd1306_WriteChar+0x10c>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	793a      	ldrb	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	b29a      	uxth	r2, r3
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <ssd1306_WriteChar+0x10c>)
 800344e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	@ 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	bf00      	nop
 800345c:	20001254 	.word	0x20001254

08003460 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	1d38      	adds	r0, r7, #4
 800346a:	e880 0006 	stmia.w	r0, {r1, r2}
 800346e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003470:	e012      	b.n	8003498 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	7818      	ldrb	r0, [r3, #0]
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	1d3a      	adds	r2, r7, #4
 800347a:	ca06      	ldmia	r2, {r1, r2}
 800347c:	f7ff ff68 	bl	8003350 <ssd1306_WriteChar>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d002      	beq.n	8003492 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	e008      	b.n	80034a4 <ssd1306_WriteString+0x44>
        }
        str++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e8      	bne.n	8003472 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	781b      	ldrb	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	460a      	mov	r2, r1
 80034b6:	71fb      	strb	r3, [r7, #7]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <ssd1306_SetCursor+0x2c>)
 80034c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80034c4:	79bb      	ldrb	r3, [r7, #6]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <ssd1306_SetCursor+0x2c>)
 80034ca:	805a      	strh	r2, [r3, #2]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	20001254 	.word	0x20001254

080034dc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80034e6:	2381      	movs	r3, #129	@ 0x81
 80034e8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fdff 	bl	80030f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fdfb 	bl	80030f0 <ssd1306_WriteCommand>
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003514:	23af      	movs	r3, #175	@ 0xaf
 8003516:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003518:	4b08      	ldr	r3, [pc, #32]	@ (800353c <ssd1306_SetDisplayOn+0x38>)
 800351a:	2201      	movs	r2, #1
 800351c:	715a      	strb	r2, [r3, #5]
 800351e:	e004      	b.n	800352a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003520:	23ae      	movs	r3, #174	@ 0xae
 8003522:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <ssd1306_SetDisplayOn+0x38>)
 8003526:	2200      	movs	r2, #0
 8003528:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fddf 	bl	80030f0 <ssd1306_WriteCommand>
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20001254 	.word	0x20001254

08003540 <statemachine>:
extern uint32_t timeindex;




void statemachine(void){
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af02      	add	r7, sp, #8

	switch(state){
 8003546:	4b7f      	ldr	r3, [pc, #508]	@ (8003744 <statemachine+0x204>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b03      	cmp	r3, #3
 800354c:	f200 82d2 	bhi.w	8003af4 <statemachine+0x5b4>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <statemachine+0x18>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	08003859 	.word	0x08003859
 8003560:	08003979 	.word	0x08003979
 8003564:	08003acf 	.word	0x08003acf

	case IDLE:
		ssd1306_Fill(Black);
 8003568:	2000      	movs	r0, #0
 800356a:	f7ff fe5d 	bl	8003228 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 800356e:	2120      	movs	r1, #32
 8003570:	2020      	movs	r0, #32
 8003572:	f7ff ff9b 	bl	80034ac <ssd1306_SetCursor>
switch(screenindex){
 8003576:	4b74      	ldr	r3, [pc, #464]	@ (8003748 <statemachine+0x208>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d86f      	bhi.n	800365e <statemachine+0x11e>
 800357e:	a201      	add	r2, pc, #4	@ (adr r2, 8003584 <statemachine+0x44>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	08003595 	.word	0x08003595
 8003588:	080035cd 	.word	0x080035cd
 800358c:	080035f7 	.word	0x080035f7
 8003590:	08003623 	.word	0x08003623
case 0:
	if (vbat <= 7){
 8003594:	4b6d      	ldr	r3, [pc, #436]	@ (800374c <statemachine+0x20c>)
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800359e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a6:	d900      	bls.n	80035aa <statemachine+0x6a>
					ssd1306_WriteString("bat_low", Font_7x10, White);
					LED_Setcolour(255,0,0,0,0,0);
				}
	break;
 80035a8:	e059      	b.n	800365e <statemachine+0x11e>
					ssd1306_WriteString("bat_low", Font_7x10, White);
 80035aa:	4a69      	ldr	r2, [pc, #420]	@ (8003750 <statemachine+0x210>)
 80035ac:	2301      	movs	r3, #1
 80035ae:	ca06      	ldmia	r2, {r1, r2}
 80035b0:	4868      	ldr	r0, [pc, #416]	@ (8003754 <statemachine+0x214>)
 80035b2:	f7ff ff55 	bl	8003460 <ssd1306_WriteString>
					LED_Setcolour(255,0,0,0,0,0);
 80035b6:	2300      	movs	r3, #0
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	20ff      	movs	r0, #255	@ 0xff
 80035c6:	f7ff f893 	bl	80026f0 <LED_Setcolour>
	break;
 80035ca:	e048      	b.n	800365e <statemachine+0x11e>
case 1:
	if(flag_calib==0){
 80035cc:	4b62      	ldr	r3, [pc, #392]	@ (8003758 <statemachine+0x218>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d13f      	bne.n	8003654 <statemachine+0x114>
		ssd1306_WriteString("alt_cal", Font_7x10, White);
 80035d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003750 <statemachine+0x210>)
 80035d6:	2301      	movs	r3, #1
 80035d8:	ca06      	ldmia	r2, {r1, r2}
 80035da:	4860      	ldr	r0, [pc, #384]	@ (800375c <statemachine+0x21c>)
 80035dc:	f7ff ff40 	bl	8003460 <ssd1306_WriteString>
		LED_Setcolour(0,255,0,0,0,0);
 80035e0:	2300      	movs	r3, #0
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	2300      	movs	r3, #0
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2300      	movs	r3, #0
 80035ea:	2200      	movs	r2, #0
 80035ec:	21ff      	movs	r1, #255	@ 0xff
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7ff f87e 	bl	80026f0 <LED_Setcolour>
				}
	break;
 80035f4:	e02e      	b.n	8003654 <statemachine+0x114>
case 2:
	if (GNSSData.fixType <= 2){
 80035f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003760 <statemachine+0x220>)
 80035f8:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d82b      	bhi.n	8003658 <statemachine+0x118>
		ssd1306_WriteString("gps_fix", Font_7x10, White);
 8003600:	4a53      	ldr	r2, [pc, #332]	@ (8003750 <statemachine+0x210>)
 8003602:	2301      	movs	r3, #1
 8003604:	ca06      	ldmia	r2, {r1, r2}
 8003606:	4857      	ldr	r0, [pc, #348]	@ (8003764 <statemachine+0x224>)
 8003608:	f7ff ff2a 	bl	8003460 <ssd1306_WriteString>
		LED_Setcolour(255,255,0,0,0,0);
 800360c:	2300      	movs	r3, #0
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	2300      	movs	r3, #0
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2300      	movs	r3, #0
 8003616:	2200      	movs	r2, #0
 8003618:	21ff      	movs	r1, #255	@ 0xff
 800361a:	20ff      	movs	r0, #255	@ 0xff
 800361c:	f7ff f868 	bl	80026f0 <LED_Setcolour>
				}

	break;
 8003620:	e01a      	b.n	8003658 <statemachine+0x118>
case 3:
	if(HAL_GPIO_ReadPin(PWEN_GPIO_Port,PWEN_Pin)==0){
 8003622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003626:	4850      	ldr	r0, [pc, #320]	@ (8003768 <statemachine+0x228>)
 8003628:	f004 fb7a 	bl	8007d20 <HAL_GPIO_ReadPin>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d114      	bne.n	800365c <statemachine+0x11c>
		ssd1306_WriteString("TELEPWR", Font_7x10, White);
 8003632:	4a47      	ldr	r2, [pc, #284]	@ (8003750 <statemachine+0x210>)
 8003634:	2301      	movs	r3, #1
 8003636:	ca06      	ldmia	r2, {r1, r2}
 8003638:	484c      	ldr	r0, [pc, #304]	@ (800376c <statemachine+0x22c>)
 800363a:	f7ff ff11 	bl	8003460 <ssd1306_WriteString>
		LED_Setcolour(0,255,255,0,0,0);
 800363e:	2300      	movs	r3, #0
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2300      	movs	r3, #0
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2300      	movs	r3, #0
 8003648:	22ff      	movs	r2, #255	@ 0xff
 800364a:	21ff      	movs	r1, #255	@ 0xff
 800364c:	2000      	movs	r0, #0
 800364e:	f7ff f84f 	bl	80026f0 <LED_Setcolour>
	}
	break;
 8003652:	e003      	b.n	800365c <statemachine+0x11c>
	break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <statemachine+0x11e>
	break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <statemachine+0x11e>
	break;
 800365c:	bf00      	nop
}


ssd1306_SetCursor(32, 42);
 800365e:	212a      	movs	r1, #42	@ 0x2a
 8003660:	2020      	movs	r0, #32
 8003662:	f7ff ff23 	bl	80034ac <ssd1306_SetCursor>

if(datascreenindex<=10){
 8003666:	4b42      	ldr	r3, [pc, #264]	@ (8003770 <statemachine+0x230>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b0a      	cmp	r3, #10
 800366c:	dc1e      	bgt.n	80036ac <statemachine+0x16c>
	ssd1306_WriteString("bmpalt:", Font_7x10, White);
 800366e:	4a38      	ldr	r2, [pc, #224]	@ (8003750 <statemachine+0x210>)
 8003670:	2301      	movs	r3, #1
 8003672:	ca06      	ldmia	r2, {r1, r2}
 8003674:	483f      	ldr	r0, [pc, #252]	@ (8003774 <statemachine+0x234>)
 8003676:	f7ff fef3 	bl	8003460 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 52);
 800367a:	2134      	movs	r1, #52	@ 0x34
 800367c:	2020      	movs	r0, #32
 800367e:	f7ff ff15 	bl	80034ac <ssd1306_SetCursor>
    	snprintf((char *)screenbuffer,50,"%0.3f",myDatabmp581.altitude);
 8003682:	4b3d      	ldr	r3, [pc, #244]	@ (8003778 <statemachine+0x238>)
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff86 	bl	8000598 <__aeabi_f2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	e9cd 2300 	strd	r2, r3, [sp]
 8003694:	4a39      	ldr	r2, [pc, #228]	@ (800377c <statemachine+0x23c>)
 8003696:	2132      	movs	r1, #50	@ 0x32
 8003698:	4839      	ldr	r0, [pc, #228]	@ (8003780 <statemachine+0x240>)
 800369a:	f011 fbd1 	bl	8014e40 <sniprintf>
    	ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 800369e:	4a2c      	ldr	r2, [pc, #176]	@ (8003750 <statemachine+0x210>)
 80036a0:	2301      	movs	r3, #1
 80036a2:	ca06      	ldmia	r2, {r1, r2}
 80036a4:	4836      	ldr	r0, [pc, #216]	@ (8003780 <statemachine+0x240>)
 80036a6:	f7ff fedb 	bl	8003460 <ssd1306_WriteString>
 80036aa:	e080      	b.n	80037ae <statemachine+0x26e>
}
else if(datascreenindex>10 && datascreenindex<=20){
 80036ac:	4b30      	ldr	r3, [pc, #192]	@ (8003770 <statemachine+0x230>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b0a      	cmp	r3, #10
 80036b2:	dd26      	ble.n	8003702 <statemachine+0x1c2>
 80036b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003770 <statemachine+0x230>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b14      	cmp	r3, #20
 80036ba:	dc22      	bgt.n	8003702 <statemachine+0x1c2>
		if(flag_calib){
 80036bc:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <statemachine+0x218>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d074      	beq.n	80037ae <statemachine+0x26e>
			ssd1306_WriteString("h_init:", Font_7x10, White);
 80036c4:	4a22      	ldr	r2, [pc, #136]	@ (8003750 <statemachine+0x210>)
 80036c6:	2301      	movs	r3, #1
 80036c8:	ca06      	ldmia	r2, {r1, r2}
 80036ca:	482e      	ldr	r0, [pc, #184]	@ (8003784 <statemachine+0x244>)
 80036cc:	f7ff fec8 	bl	8003460 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 80036d0:	2134      	movs	r1, #52	@ 0x34
 80036d2:	2020      	movs	r0, #32
 80036d4:	f7ff feea 	bl	80034ac <ssd1306_SetCursor>
			snprintf((char *)screenbuffer,50,"%0.1f",hauteur_Initiale);
 80036d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <statemachine+0x248>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fc ff5b 	bl	8000598 <__aeabi_f2d>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	e9cd 2300 	strd	r2, r3, [sp]
 80036ea:	4a28      	ldr	r2, [pc, #160]	@ (800378c <statemachine+0x24c>)
 80036ec:	2132      	movs	r1, #50	@ 0x32
 80036ee:	4824      	ldr	r0, [pc, #144]	@ (8003780 <statemachine+0x240>)
 80036f0:	f011 fba6 	bl	8014e40 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 80036f4:	4a16      	ldr	r2, [pc, #88]	@ (8003750 <statemachine+0x210>)
 80036f6:	2301      	movs	r3, #1
 80036f8:	ca06      	ldmia	r2, {r1, r2}
 80036fa:	4821      	ldr	r0, [pc, #132]	@ (8003780 <statemachine+0x240>)
 80036fc:	f7ff feb0 	bl	8003460 <ssd1306_WriteString>
		if(flag_calib){
 8003700:	e055      	b.n	80037ae <statemachine+0x26e>
		}
}
else if (datascreenindex>20 && datascreenindex<=30) {
 8003702:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <statemachine+0x230>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b14      	cmp	r3, #20
 8003708:	dd46      	ble.n	8003798 <statemachine+0x258>
 800370a:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <statemachine+0x230>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b1e      	cmp	r3, #30
 8003710:	dc42      	bgt.n	8003798 <statemachine+0x258>
    		ssd1306_WriteString("sat:", Font_7x10, White);
 8003712:	4a0f      	ldr	r2, [pc, #60]	@ (8003750 <statemachine+0x210>)
 8003714:	2301      	movs	r3, #1
 8003716:	ca06      	ldmia	r2, {r1, r2}
 8003718:	481d      	ldr	r0, [pc, #116]	@ (8003790 <statemachine+0x250>)
 800371a:	f7ff fea1 	bl	8003460 <ssd1306_WriteString>
    			ssd1306_SetCursor(32, 52);
 800371e:	2134      	movs	r1, #52	@ 0x34
 8003720:	2020      	movs	r0, #32
 8003722:	f7ff fec3 	bl	80034ac <ssd1306_SetCursor>
    		snprintf((char *)screenbuffer,50,"%d",GNSSData.numSV);
 8003726:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <statemachine+0x220>)
 8003728:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800372c:	4a19      	ldr	r2, [pc, #100]	@ (8003794 <statemachine+0x254>)
 800372e:	2132      	movs	r1, #50	@ 0x32
 8003730:	4813      	ldr	r0, [pc, #76]	@ (8003780 <statemachine+0x240>)
 8003732:	f011 fb85 	bl	8014e40 <sniprintf>
    		ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 8003736:	4a06      	ldr	r2, [pc, #24]	@ (8003750 <statemachine+0x210>)
 8003738:	2301      	movs	r3, #1
 800373a:	ca06      	ldmia	r2, {r1, r2}
 800373c:	4810      	ldr	r0, [pc, #64]	@ (8003780 <statemachine+0x240>)
 800373e:	f7ff fe8f 	bl	8003460 <ssd1306_WriteString>
 8003742:	e034      	b.n	80037ae <statemachine+0x26e>
 8003744:	20000db8 	.word	0x20000db8
 8003748:	20001290 	.word	0x20001290
 800374c:	20000b24 	.word	0x20000b24
 8003750:	20000018 	.word	0x20000018
 8003754:	08019508 	.word	0x08019508
 8003758:	20000dc4 	.word	0x20000dc4
 800375c:	08019510 	.word	0x08019510
 8003760:	20000ba4 	.word	0x20000ba4
 8003764:	08019518 	.word	0x08019518
 8003768:	48000400 	.word	0x48000400
 800376c:	08019520 	.word	0x08019520
 8003770:	20001294 	.word	0x20001294
 8003774:	08019528 	.word	0x08019528
 8003778:	20000690 	.word	0x20000690
 800377c:	08019530 	.word	0x08019530
 8003780:	2000125c 	.word	0x2000125c
 8003784:	08019538 	.word	0x08019538
 8003788:	20000dd8 	.word	0x20000dd8
 800378c:	08019540 	.word	0x08019540
 8003790:	08019548 	.word	0x08019548
 8003794:	08019550 	.word	0x08019550

    	}
else if (datascreenindex>30 && datascreenindex<=40){
 8003798:	4b63      	ldr	r3, [pc, #396]	@ (8003928 <statemachine+0x3e8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b1e      	cmp	r3, #30
 800379e:	dd06      	ble.n	80037ae <statemachine+0x26e>
 80037a0:	4b61      	ldr	r3, [pc, #388]	@ (8003928 <statemachine+0x3e8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b28      	cmp	r3, #40	@ 0x28
 80037a6:	dc02      	bgt.n	80037ae <statemachine+0x26e>
#ifdef PARTIE_HAUT
	datascreenindex=0;
 80037a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003928 <statemachine+0x3e8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]


}


delaycounterforscreenindex++;
 80037ae:	4b5f      	ldr	r3, [pc, #380]	@ (800392c <statemachine+0x3ec>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a5d      	ldr	r2, [pc, #372]	@ (800392c <statemachine+0x3ec>)
 80037b6:	6013      	str	r3, [r2, #0]
if(delaycounterforscreenindex>=5){
 80037b8:	4b5c      	ldr	r3, [pc, #368]	@ (800392c <statemachine+0x3ec>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	dd07      	ble.n	80037d0 <statemachine+0x290>
	delaycounterforscreenindex=0;
 80037c0:	4b5a      	ldr	r3, [pc, #360]	@ (800392c <statemachine+0x3ec>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
	screenindex++;
 80037c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003930 <statemachine+0x3f0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	4a58      	ldr	r2, [pc, #352]	@ (8003930 <statemachine+0x3f0>)
 80037ce:	6013      	str	r3, [r2, #0]
}

if(screenindex>3){
 80037d0:	4b57      	ldr	r3, [pc, #348]	@ (8003930 <statemachine+0x3f0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	dd02      	ble.n	80037de <statemachine+0x29e>
	screenindex=0;
 80037d8:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <statemachine+0x3f0>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
}
datascreenindex++;
 80037de:	4b52      	ldr	r3, [pc, #328]	@ (8003928 <statemachine+0x3e8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a50      	ldr	r2, [pc, #320]	@ (8003928 <statemachine+0x3e8>)
 80037e6:	6013      	str	r3, [r2, #0]
#ifdef PARTIE_HAUT
if(datascreenindex>=30){
 80037e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003928 <statemachine+0x3e8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b1d      	cmp	r3, #29
 80037ee:	dd02      	ble.n	80037f6 <statemachine+0x2b6>
	datascreenindex=0;
 80037f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003928 <statemachine+0x3e8>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
	datascreenindex=0;
}
#endif


if((flag_drop==1) && (flag_calib==1)){
 80037f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003934 <statemachine+0x3f4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 8175 	bne.w	8003aea <statemachine+0x5aa>
 8003800:	4b4d      	ldr	r3, [pc, #308]	@ (8003938 <statemachine+0x3f8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 8170 	bne.w	8003aea <statemachine+0x5aa>

				state++;
 800380a:	4b4c      	ldr	r3, [pc, #304]	@ (800393c <statemachine+0x3fc>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <statemachine+0x3fc>)
 8003814:	701a      	strb	r2, [r3, #0]
#ifdef PARTIE_HAUT
				create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2300      	movs	r3, #0
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	ed9f 5a48 	vldr	s10, [pc, #288]	@ 8003940 <statemachine+0x400>
 8003822:	eddf 4a47 	vldr	s9, [pc, #284]	@ 8003940 <statemachine+0x400>
 8003826:	ed9f 4a46 	vldr	s8, [pc, #280]	@ 8003940 <statemachine+0x400>
 800382a:	eddf 3a45 	vldr	s7, [pc, #276]	@ 8003940 <statemachine+0x400>
 800382e:	ed9f 3a44 	vldr	s6, [pc, #272]	@ 8003940 <statemachine+0x400>
 8003832:	eddf 2a43 	vldr	s5, [pc, #268]	@ 8003940 <statemachine+0x400>
 8003836:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 8003940 <statemachine+0x400>
 800383a:	eddf 1a41 	vldr	s3, [pc, #260]	@ 8003940 <statemachine+0x400>
 800383e:	ed9f 1a40 	vldr	s2, [pc, #256]	@ 8003940 <statemachine+0x400>
 8003842:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8003940 <statemachine+0x400>
 8003846:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8003940 <statemachine+0x400>
 800384a:	2310      	movs	r3, #16
 800384c:	2216      	movs	r2, #22
 800384e:	2182      	movs	r1, #130	@ 0x82
 8003850:	483c      	ldr	r0, [pc, #240]	@ (8003944 <statemachine+0x404>)
 8003852:	f000 fd33 	bl	80042bc <create_and_send_payload>
#endif
			}

		break;
 8003856:	e148      	b.n	8003aea <statemachine+0x5aa>

	case PRESEPARATION:
		ssd1306_Fill(Black);
 8003858:	2000      	movs	r0, #0
 800385a:	f7ff fce5 	bl	8003228 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 800385e:	2120      	movs	r1, #32
 8003860:	2020      	movs	r0, #32
 8003862:	f7ff fe23 	bl	80034ac <ssd1306_SetCursor>
		ssd1306_WriteString("PRE", Font_16x24, White);
 8003866:	4a38      	ldr	r2, [pc, #224]	@ (8003948 <statemachine+0x408>)
 8003868:	2301      	movs	r3, #1
 800386a:	ca06      	ldmia	r2, {r1, r2}
 800386c:	4837      	ldr	r0, [pc, #220]	@ (800394c <statemachine+0x40c>)
 800386e:	f7ff fdf7 	bl	8003460 <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003872:	2138      	movs	r1, #56	@ 0x38
 8003874:	2020      	movs	r0, #32
 8003876:	f7ff fe19 	bl	80034ac <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"h=%f",hauteur_servo);
 800387a:	4b35      	ldr	r3, [pc, #212]	@ (8003950 <statemachine+0x410>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fe8a 	bl	8000598 <__aeabi_f2d>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	e9cd 2300 	strd	r2, r3, [sp]
 800388c:	4a31      	ldr	r2, [pc, #196]	@ (8003954 <statemachine+0x414>)
 800388e:	2132      	movs	r1, #50	@ 0x32
 8003890:	4831      	ldr	r0, [pc, #196]	@ (8003958 <statemachine+0x418>)
 8003892:	f011 fad5 	bl	8014e40 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 8003896:	4a31      	ldr	r2, [pc, #196]	@ (800395c <statemachine+0x41c>)
 8003898:	2301      	movs	r3, #1
 800389a:	ca06      	ldmia	r2, {r1, r2}
 800389c:	482e      	ldr	r0, [pc, #184]	@ (8003958 <statemachine+0x418>)
 800389e:	f7ff fddf 	bl	8003460 <ssd1306_WriteString>
#ifdef PARTIE_HAUT
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,0,
 80038a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003960 <statemachine+0x420>)
 80038a4:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80038a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003960 <statemachine+0x420>)
 80038aa:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 80038ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003960 <statemachine+0x420>)
 80038b0:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 80038b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003964 <statemachine+0x424>)
 80038b6:	ed93 6a05 	vldr	s12, [r3, #20]
 80038ba:	4b29      	ldr	r3, [pc, #164]	@ (8003960 <statemachine+0x420>)
 80038bc:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 80038c0:	4b27      	ldr	r3, [pc, #156]	@ (8003960 <statemachine+0x420>)
 80038c2:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 80038c6:	4b28      	ldr	r3, [pc, #160]	@ (8003968 <statemachine+0x428>)
 80038c8:	ed93 3a00 	vldr	s6, [r3]
 80038cc:	4b25      	ldr	r3, [pc, #148]	@ (8003964 <statemachine+0x424>)
 80038ce:	edd3 3a03 	vldr	s7, [r3, #12]
 80038d2:	4b26      	ldr	r3, [pc, #152]	@ (800396c <statemachine+0x42c>)
 80038d4:	ed93 4a00 	vldr	s8, [r3]
 80038d8:	4b24      	ldr	r3, [pc, #144]	@ (800396c <statemachine+0x42c>)
 80038da:	edd3 4a01 	vldr	s9, [r3, #4]
 80038de:	4b23      	ldr	r3, [pc, #140]	@ (800396c <statemachine+0x42c>)
 80038e0:	ed93 5a02 	vldr	s10, [r3, #8]
 80038e4:	4b22      	ldr	r3, [pc, #136]	@ (8003970 <statemachine+0x430>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	eeb0 2a65 	vmov.f32	s4, s11
 80038f2:	eef0 1a46 	vmov.f32	s3, s12
 80038f6:	eeb0 1a66 	vmov.f32	s2, s13
 80038fa:	eef0 0a47 	vmov.f32	s1, s14
 80038fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003902:	2310      	movs	r3, #16
 8003904:	2201      	movs	r2, #1
 8003906:	2182      	movs	r1, #130	@ 0x82
 8003908:	480e      	ldr	r0, [pc, #56]	@ (8003944 <statemachine+0x404>)
 800390a:	f000 fcd7 	bl	80042bc <create_and_send_payload>
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

#endif

		if(flag_separation==1){
 800390e:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <statemachine+0x434>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	f040 80eb 	bne.w	8003aee <statemachine+0x5ae>
			state++;
 8003918:	4b08      	ldr	r3, [pc, #32]	@ (800393c <statemachine+0x3fc>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <statemachine+0x3fc>)
 8003922:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003924:	e0e3      	b.n	8003aee <statemachine+0x5ae>
 8003926:	bf00      	nop
 8003928:	20001294 	.word	0x20001294
 800392c:	20001298 	.word	0x20001298
 8003930:	20001290 	.word	0x20001290
 8003934:	20000dbc 	.word	0x20000dbc
 8003938:	20000dc4 	.word	0x20000dc4
 800393c:	20000db8 	.word	0x20000db8
 8003940:	00000000 	.word	0x00000000
 8003944:	200003fc 	.word	0x200003fc
 8003948:	20000020 	.word	0x20000020
 800394c:	08019554 	.word	0x08019554
 8003950:	20000ddc 	.word	0x20000ddc
 8003954:	08019558 	.word	0x08019558
 8003958:	2000125c 	.word	0x2000125c
 800395c:	20000010 	.word	0x20000010
 8003960:	20000ba4 	.word	0x20000ba4
 8003964:	20000690 	.word	0x20000690
 8003968:	20000b1c 	.word	0x20000b1c
 800396c:	20000670 	.word	0x20000670
 8003970:	20000dec 	.word	0x20000dec
 8003974:	20000dc0 	.word	0x20000dc0

	case POSTSEPARATION:
		ssd1306_Fill(Black);
 8003978:	2000      	movs	r0, #0
 800397a:	f7ff fc55 	bl	8003228 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 800397e:	2120      	movs	r1, #32
 8003980:	2020      	movs	r0, #32
 8003982:	f7ff fd93 	bl	80034ac <ssd1306_SetCursor>
		ssd1306_WriteString("POST", Font_16x24, White);
 8003986:	4a64      	ldr	r2, [pc, #400]	@ (8003b18 <statemachine+0x5d8>)
 8003988:	2301      	movs	r3, #1
 800398a:	ca06      	ldmia	r2, {r1, r2}
 800398c:	4863      	ldr	r0, [pc, #396]	@ (8003b1c <statemachine+0x5dc>)
 800398e:	f7ff fd67 	bl	8003460 <ssd1306_WriteString>
		ssd1306_SetCursor(32, 56);
 8003992:	2138      	movs	r1, #56	@ 0x38
 8003994:	2020      	movs	r0, #32
 8003996:	f7ff fd89 	bl	80034ac <ssd1306_SetCursor>
		snprintf((char *)screenbuffer,50,"tps=%d",cpt_tps_chute);
 800399a:	4b61      	ldr	r3, [pc, #388]	@ (8003b20 <statemachine+0x5e0>)
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	4a61      	ldr	r2, [pc, #388]	@ (8003b24 <statemachine+0x5e4>)
 80039a0:	2132      	movs	r1, #50	@ 0x32
 80039a2:	4861      	ldr	r0, [pc, #388]	@ (8003b28 <statemachine+0x5e8>)
 80039a4:	f011 fa4c 	bl	8014e40 <sniprintf>
		ssd1306_WriteString((char *) screenbuffer, Font_6x8, White);
 80039a8:	4a60      	ldr	r2, [pc, #384]	@ (8003b2c <statemachine+0x5ec>)
 80039aa:	2301      	movs	r3, #1
 80039ac:	ca06      	ldmia	r2, {r1, r2}
 80039ae:	485e      	ldr	r0, [pc, #376]	@ (8003b28 <statemachine+0x5e8>)
 80039b0:	f7ff fd56 	bl	8003460 <ssd1306_WriteString>

#ifdef PARTIE_HAUT
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,0,
 80039b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b30 <statemachine+0x5f0>)
 80039b6:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80039ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003b30 <statemachine+0x5f0>)
 80039bc:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 80039c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b30 <statemachine+0x5f0>)
 80039c2:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 80039c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b34 <statemachine+0x5f4>)
 80039c8:	ed93 6a05 	vldr	s12, [r3, #20]
 80039cc:	4b58      	ldr	r3, [pc, #352]	@ (8003b30 <statemachine+0x5f0>)
 80039ce:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 80039d2:	4b57      	ldr	r3, [pc, #348]	@ (8003b30 <statemachine+0x5f0>)
 80039d4:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 80039d8:	4b57      	ldr	r3, [pc, #348]	@ (8003b38 <statemachine+0x5f8>)
 80039da:	ed93 3a00 	vldr	s6, [r3]
 80039de:	4b55      	ldr	r3, [pc, #340]	@ (8003b34 <statemachine+0x5f4>)
 80039e0:	edd3 3a03 	vldr	s7, [r3, #12]
 80039e4:	4b55      	ldr	r3, [pc, #340]	@ (8003b3c <statemachine+0x5fc>)
 80039e6:	ed93 4a00 	vldr	s8, [r3]
 80039ea:	4b54      	ldr	r3, [pc, #336]	@ (8003b3c <statemachine+0x5fc>)
 80039ec:	edd3 4a01 	vldr	s9, [r3, #4]
 80039f0:	4b52      	ldr	r3, [pc, #328]	@ (8003b3c <statemachine+0x5fc>)
 80039f2:	ed93 5a02 	vldr	s10, [r3, #8]
 80039f6:	4b52      	ldr	r3, [pc, #328]	@ (8003b40 <statemachine+0x600>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	eeb0 2a65 	vmov.f32	s4, s11
 8003a04:	eef0 1a46 	vmov.f32	s3, s12
 8003a08:	eeb0 1a66 	vmov.f32	s2, s13
 8003a0c:	eef0 0a47 	vmov.f32	s1, s14
 8003a10:	eeb0 0a67 	vmov.f32	s0, s15
 8003a14:	2310      	movs	r3, #16
 8003a16:	2201      	movs	r2, #1
 8003a18:	2182      	movs	r1, #130	@ 0x82
 8003a1a:	484a      	ldr	r0, [pc, #296]	@ (8003b44 <statemachine+0x604>)
 8003a1c:	f000 fc4e 	bl	80042bc <create_and_send_payload>
				  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
				  GNSSData.fgSpeed,temp,myDatabmp581.press,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

		vTaskDelay(pdMS_TO_TICKS(5));
 8003a20:	2005      	movs	r0, #5
 8003a22:	f00e ff85 	bl	8012930 <vTaskDelay>

		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,BOTTOM_ADDR,0x10,0,
 8003a26:	4b42      	ldr	r3, [pc, #264]	@ (8003b30 <statemachine+0x5f0>)
 8003a28:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003a2c:	4b40      	ldr	r3, [pc, #256]	@ (8003b30 <statemachine+0x5f0>)
 8003a2e:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8003a32:	4b45      	ldr	r3, [pc, #276]	@ (8003b48 <statemachine+0x608>)
 8003a34:	edd3 6a00 	vldr	s13, [r3]
 8003a38:	4b3e      	ldr	r3, [pc, #248]	@ (8003b34 <statemachine+0x5f4>)
 8003a3a:	ed93 6a05 	vldr	s12, [r3, #20]
 8003a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b30 <statemachine+0x5f0>)
 8003a40:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8003a44:	4b3a      	ldr	r3, [pc, #232]	@ (8003b30 <statemachine+0x5f0>)
 8003a46:	edd3 2a30 	vldr	s5, [r3, #192]	@ 0xc0
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b38 <statemachine+0x5f8>)
 8003a4c:	ed93 3a00 	vldr	s6, [r3]
 8003a50:	4b38      	ldr	r3, [pc, #224]	@ (8003b34 <statemachine+0x5f4>)
 8003a52:	edd3 3a03 	vldr	s7, [r3, #12]
 8003a56:	4b39      	ldr	r3, [pc, #228]	@ (8003b3c <statemachine+0x5fc>)
 8003a58:	ed93 4a00 	vldr	s8, [r3]
 8003a5c:	4b37      	ldr	r3, [pc, #220]	@ (8003b3c <statemachine+0x5fc>)
 8003a5e:	edd3 4a01 	vldr	s9, [r3, #4]
 8003a62:	4b36      	ldr	r3, [pc, #216]	@ (8003b3c <statemachine+0x5fc>)
 8003a64:	ed93 5a02 	vldr	s10, [r3, #8]
 8003a68:	4b35      	ldr	r3, [pc, #212]	@ (8003b40 <statemachine+0x600>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	eeb0 2a65 	vmov.f32	s4, s11
 8003a76:	eef0 1a46 	vmov.f32	s3, s12
 8003a7a:	eeb0 1a66 	vmov.f32	s2, s13
 8003a7e:	eef0 0a47 	vmov.f32	s1, s14
 8003a82:	eeb0 0a67 	vmov.f32	s0, s15
 8003a86:	2310      	movs	r3, #16
 8003a88:	2216      	movs	r2, #22
 8003a8a:	2182      	movs	r1, #130	@ 0x82
 8003a8c:	482d      	ldr	r0, [pc, #180]	@ (8003b44 <statemachine+0x604>)
 8003a8e:	f000 fc15 	bl	80042bc <create_and_send_payload>
						  GNSSData.fLat,GNSSData.fLon,GNSSData.fhMSL,myDatabmp581.altitude,GNSSData.fvspeed,
						  GNSSData.fgSpeed,temp,distance_entre_module,myData6AXIS.AccelX,myData6AXIS.AccelY,myData6AXIS.AccelZ,timeindex);

#endif

		if(cpt_tps_chute>=600){
 8003a92:	4b23      	ldr	r3, [pc, #140]	@ (8003b20 <statemachine+0x5e0>)
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8003a9a:	d32a      	bcc.n	8003af2 <statemachine+0x5b2>
			state++;
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <statemachine+0x60c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b29      	ldr	r3, [pc, #164]	@ (8003b4c <statemachine+0x60c>)
 8003aa6:	701a      	strb	r2, [r3, #0]
			flag_fin=1;
 8003aa8:	4b29      	ldr	r3, [pc, #164]	@ (8003b50 <statemachine+0x610>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
#ifdef PARTIE_HAUT
			osThreadSuspend(GNSSParseHandle);
 8003aae:	4b29      	ldr	r3, [pc, #164]	@ (8003b54 <statemachine+0x614>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f00d ffbf 	bl	8011a36 <osThreadSuspend>
			osThreadSuspend(tarvosDecodeHandle);
 8003ab8:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <statemachine+0x618>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f00d ffba 	bl	8011a36 <osThreadSuspend>
			osThreadSuspend(SdcardwriteHandle);
 8003ac2:	4b26      	ldr	r3, [pc, #152]	@ (8003b5c <statemachine+0x61c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f00d ffb5 	bl	8011a36 <osThreadSuspend>
#endif
		}



		break;
 8003acc:	e011      	b.n	8003af2 <statemachine+0x5b2>
	case FIN:

		ssd1306_Fill(Black);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7ff fbaa 	bl	8003228 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003ad4:	2120      	movs	r1, #32
 8003ad6:	2020      	movs	r0, #32
 8003ad8:	f7ff fce8 	bl	80034ac <ssd1306_SetCursor>
		ssd1306_WriteString("FIN", Font_16x24, White);
 8003adc:	4a0e      	ldr	r2, [pc, #56]	@ (8003b18 <statemachine+0x5d8>)
 8003ade:	2301      	movs	r3, #1
 8003ae0:	ca06      	ldmia	r2, {r1, r2}
 8003ae2:	481f      	ldr	r0, [pc, #124]	@ (8003b60 <statemachine+0x620>)
 8003ae4:	f7ff fcbc 	bl	8003460 <ssd1306_WriteString>

		break;
 8003ae8:	e004      	b.n	8003af4 <statemachine+0x5b4>
		break;
 8003aea:	bf00      	nop
 8003aec:	e002      	b.n	8003af4 <statemachine+0x5b4>
		break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <statemachine+0x5b4>
		break;
 8003af2:	bf00      	nop
	}
	if((state>= PRESEPARATION) && (state <= POSTSEPARATION)){
 8003af4:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <statemachine+0x60c>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <statemachine+0x5d0>
 8003afc:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <statemachine+0x60c>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d805      	bhi.n	8003b10 <statemachine+0x5d0>
		cpt_tps_chute++;
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <statemachine+0x5e0>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <statemachine+0x5e0>)
 8003b0e:	801a      	strh	r2, [r3, #0]

	}
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000020 	.word	0x20000020
 8003b1c:	08019560 	.word	0x08019560
 8003b20:	20000dd0 	.word	0x20000dd0
 8003b24:	08019568 	.word	0x08019568
 8003b28:	2000125c 	.word	0x2000125c
 8003b2c:	20000010 	.word	0x20000010
 8003b30:	20000ba4 	.word	0x20000ba4
 8003b34:	20000690 	.word	0x20000690
 8003b38:	20000b1c 	.word	0x20000b1c
 8003b3c:	20000670 	.word	0x20000670
 8003b40:	20000dec 	.word	0x20000dec
 8003b44:	200003fc 	.word	0x200003fc
 8003b48:	20000ddc 	.word	0x20000ddc
 8003b4c:	20000db8 	.word	0x20000db8
 8003b50:	20000dd4 	.word	0x20000dd4
 8003b54:	20000320 	.word	0x20000320
 8003b58:	20000330 	.word	0x20000330
 8003b5c:	20000324 	.word	0x20000324
 8003b60:	08019570 	.word	0x08019570

08003b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6a:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <HAL_MspInit+0x50>)
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6e:	4a11      	ldr	r2, [pc, #68]	@ (8003bb4 <HAL_MspInit+0x50>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b76:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb4 <HAL_MspInit+0x50>)
 8003b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <HAL_MspInit+0x50>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb4 <HAL_MspInit+0x50>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8e:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_MspInit+0x50>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	210f      	movs	r1, #15
 8003b9e:	f06f 0001 	mvn.w	r0, #1
 8003ba2:	f003 fbd5 	bl	8007350 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003ba6:	f004 ffe5 	bl	8008b74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	@ 0x30
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_InitTick+0xc4>)
 8003bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c7c <HAL_InitTick+0xc4>)
 8003bce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bd4:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <HAL_InitTick+0xc4>)
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003be0:	f107 020c 	add.w	r2, r7, #12
 8003be4:	f107 0310 	add.w	r3, r7, #16
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f005 fcb8 	bl	8009560 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f005 fca0 	bl	8009534 <HAL_RCC_GetPCLK2Freq>
 8003bf4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	4a21      	ldr	r2, [pc, #132]	@ (8003c80 <HAL_InitTick+0xc8>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	0c9b      	lsrs	r3, r3, #18
 8003c00:	3b01      	subs	r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003c04:	4b1f      	ldr	r3, [pc, #124]	@ (8003c84 <HAL_InitTick+0xcc>)
 8003c06:	4a20      	ldr	r2, [pc, #128]	@ (8003c88 <HAL_InitTick+0xd0>)
 8003c08:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c84 <HAL_InitTick+0xcc>)
 8003c0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003c10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003c12:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <HAL_InitTick+0xcc>)
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003c18:	4b1a      	ldr	r3, [pc, #104]	@ (8003c84 <HAL_InitTick+0xcc>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1e:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <HAL_InitTick+0xcc>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003c24:	4817      	ldr	r0, [pc, #92]	@ (8003c84 <HAL_InitTick+0xcc>)
 8003c26:	f006 fb2f 	bl	800a288 <HAL_TIM_Base_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003c30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d11b      	bne.n	8003c70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003c38:	4812      	ldr	r0, [pc, #72]	@ (8003c84 <HAL_InitTick+0xcc>)
 8003c3a:	f006 fb7d 	bl	800a338 <HAL_TIM_Base_Start_IT>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003c44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d111      	bne.n	8003c70 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003c4c:	2019      	movs	r0, #25
 8003c4e:	f003 fb99 	bl	8007384 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b0f      	cmp	r3, #15
 8003c56:	d808      	bhi.n	8003c6a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	2019      	movs	r0, #25
 8003c5e:	f003 fb77 	bl	8007350 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c62:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <HAL_InitTick+0xd4>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e002      	b.n	8003c70 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3730      	adds	r7, #48	@ 0x30
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	431bde83 	.word	0x431bde83
 8003c84:	2000129c 	.word	0x2000129c
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	20000030 	.word	0x20000030

08003c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <NMI_Handler+0x4>

08003c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 32);
 8003c9c:	2120      	movs	r1, #32
 8003c9e:	2020      	movs	r0, #32
 8003ca0:	f7ff fc04 	bl	80034ac <ssd1306_SetCursor>
	 	  ssd1306_Fill(Black);
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f7ff fabf 	bl	8003228 <ssd1306_Fill>
	 	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8003caa:	4a05      	ldr	r2, [pc, #20]	@ (8003cc0 <HardFault_Handler+0x28>)
 8003cac:	2301      	movs	r3, #1
 8003cae:	ca06      	ldmia	r2, {r1, r2}
 8003cb0:	4804      	ldr	r0, [pc, #16]	@ (8003cc4 <HardFault_Handler+0x2c>)
 8003cb2:	f7ff fbd5 	bl	8003460 <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 8003cb6:	f7ff facf 	bl	8003258 <ssd1306_UpdateScreen>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cba:	bf00      	nop
 8003cbc:	e7fd      	b.n	8003cba <HardFault_Handler+0x22>
 8003cbe:	bf00      	nop
 8003cc0:	20000018 	.word	0x20000018
 8003cc4:	08019574 	.word	0x08019574

08003cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <MemManage_Handler+0x4>

08003cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <BusFault_Handler+0x4>

08003cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <UsageFault_Handler+0x4>

08003ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	f004 f85e 	bl	8007db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003d00:	2010      	movs	r0, #16
 8003d02:	f004 f857 	bl	8007db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8003d10:	4802      	ldr	r0, [pc, #8]	@ (8003d1c <DMA1_Channel1_IRQHandler+0x10>)
 8003d12:	f003 fd28 	bl	8007766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200013d0 	.word	0x200013d0

08003d20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d24:	4802      	ldr	r0, [pc, #8]	@ (8003d30 <DMA1_Channel2_IRQHandler+0x10>)
 8003d26:	f003 fd1e 	bl	8007766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200002ac 	.word	0x200002ac

08003d34 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003d38:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <DMA1_Channel3_IRQHandler+0x10>)
 8003d3a:	f003 fd14 	bl	8007766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20001560 	.word	0x20001560

08003d48 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d4c:	4802      	ldr	r0, [pc, #8]	@ (8003d58 <DMA1_Channel5_IRQHandler+0x10>)
 8003d4e:	f003 fd0a 	bl	8007766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200015c0 	.word	0x200015c0

08003d5c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d60:	4802      	ldr	r0, [pc, #8]	@ (8003d6c <ADC1_2_IRQHandler+0x10>)
 8003d62:	f002 f9ff 	bl	8006164 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000240 	.word	0x20000240

08003d70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d74:	4802      	ldr	r0, [pc, #8]	@ (8003d80 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003d76:	f007 f851 	bl	800ae1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	2000129c 	.word	0x2000129c

08003d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d88:	4802      	ldr	r0, [pc, #8]	@ (8003d94 <TIM2_IRQHandler+0x10>)
 8003d8a:	f007 f847 	bl	800ae1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200012ec 	.word	0x200012ec

08003d98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d9c:	4802      	ldr	r0, [pc, #8]	@ (8003da8 <TIM4_IRQHandler+0x10>)
 8003d9e:	f007 f83d 	bl	800ae1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20001384 	.word	0x20001384

08003dac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003db0:	4802      	ldr	r0, [pc, #8]	@ (8003dbc <USART1_IRQHandler+0x10>)
 8003db2:	f008 fc35 	bl	800c620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200014cc 	.word	0x200014cc

08003dc0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003dc4:	4802      	ldr	r0, [pc, #8]	@ (8003dd0 <LPUART1_IRQHandler+0x10>)
 8003dc6:	f008 fc2b 	bl	800c620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20001438 	.word	0x20001438

08003dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return 1;
 8003dd8:	2301      	movs	r3, #1
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <_kill>:

int _kill(int pid, int sig)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dee:	f011 f9a9 	bl	8015144 <__errno>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2216      	movs	r2, #22
 8003df6:	601a      	str	r2, [r3, #0]
  return -1;
 8003df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_exit>:

void _exit (int status)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ffe7 	bl	8003de4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e16:	bf00      	nop
 8003e18:	e7fd      	b.n	8003e16 <_exit+0x12>

08003e1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e00a      	b.n	8003e42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e2c:	f3af 8000 	nop.w
 8003e30:	4601      	mov	r1, r0
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	60ba      	str	r2, [r7, #8]
 8003e38:	b2ca      	uxtb	r2, r1
 8003e3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	dbf0      	blt.n	8003e2c <_read+0x12>
  }

  return len;
 8003e4a:	687b      	ldr	r3, [r7, #4]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e009      	b.n	8003e7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	60ba      	str	r2, [r7, #8]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3301      	adds	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	dbf1      	blt.n	8003e66 <_write+0x12>
  }
  return len;
 8003e82:	687b      	ldr	r3, [r7, #4]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_close>:

int _close(int file)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003eb4:	605a      	str	r2, [r3, #4]
  return 0;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <_isatty>:

int _isatty(int file)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ecc:	2301      	movs	r3, #1
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003efc:	4a14      	ldr	r2, [pc, #80]	@ (8003f50 <_sbrk+0x5c>)
 8003efe:	4b15      	ldr	r3, [pc, #84]	@ (8003f54 <_sbrk+0x60>)
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f08:	4b13      	ldr	r3, [pc, #76]	@ (8003f58 <_sbrk+0x64>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f10:	4b11      	ldr	r3, [pc, #68]	@ (8003f58 <_sbrk+0x64>)
 8003f12:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <_sbrk+0x68>)
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <_sbrk+0x64>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d207      	bcs.n	8003f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f24:	f011 f90e 	bl	8015144 <__errno>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	220c      	movs	r2, #12
 8003f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f32:	e009      	b.n	8003f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f34:	4b08      	ldr	r3, [pc, #32]	@ (8003f58 <_sbrk+0x64>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f3a:	4b07      	ldr	r3, [pc, #28]	@ (8003f58 <_sbrk+0x64>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	4a05      	ldr	r2, [pc, #20]	@ (8003f58 <_sbrk+0x64>)
 8003f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20008000 	.word	0x20008000
 8003f54:	00000400 	.word	0x00000400
 8003f58:	200012e8 	.word	0x200012e8
 8003f5c:	20004060 	.word	0x20004060

08003f60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f64:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <SystemInit+0x20>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	4a05      	ldr	r2, [pc, #20]	@ (8003f80 <SystemInit+0x20>)
 8003f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	@ 0x38
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	71fb      	strb	r3, [r7, #7]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 8003f94:	2306      	movs	r3, #6
 8003f96:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 8003fa6:	4a6f      	ldr	r2, [pc, #444]	@ (8004164 <INIT_PERM_TARVOS+0x1e0>)
 8003fa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fb0:	6018      	str	r0, [r3, #0]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 8003fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8004168 <INIT_PERM_TARVOS+0x1e4>)
 8003fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fc0:	6018      	str	r0, [r3, #0]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8003fc6:	4a69      	ldr	r2, [pc, #420]	@ (800416c <INIT_PERM_TARVOS+0x1e8>)
 8003fc8:	f107 031c 	add.w	r3, r7, #28
 8003fcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd0:	6018      	str	r0, [r3, #0]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	753b      	strb	r3, [r7, #20]
 8003fda:	2309      	movs	r3, #9
 8003fdc:	757b      	strb	r3, [r7, #21]
 8003fde:	2302      	movs	r3, #2
 8003fe0:	75bb      	strb	r3, [r7, #22]
 8003fe2:	230b      	movs	r3, #11
 8003fe4:	75fb      	strb	r3, [r7, #23]
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	763b      	strb	r3, [r7, #24]
 8003fea:	2300      	movs	r3, #0
 8003fec:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8003fee:	2302      	movs	r3, #2
 8003ff0:	733b      	strb	r3, [r7, #12]
 8003ff2:	2309      	movs	r3, #9
 8003ff4:	737b      	strb	r3, [r7, #13]
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	73bb      	strb	r3, [r7, #14]
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	73fb      	strb	r3, [r7, #15]
 8003ffe:	79bb      	ldrb	r3, [r7, #6]
 8004000:	743b      	strb	r3, [r7, #16]
 8004002:	2300      	movs	r3, #0
 8004004:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8004006:	4b5a      	ldr	r3, [pc, #360]	@ (8004170 <INIT_PERM_TARVOS+0x1ec>)
 8004008:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 800400a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f8ac 	bl	8004178 <Get_CRC8>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 8004026:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800402a:	b29a      	uxth	r2, r3
 800402c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004030:	2364      	movs	r3, #100	@ 0x64
 8004032:	4850      	ldr	r0, [pc, #320]	@ (8004174 <INIT_PERM_TARVOS+0x1f0>)
 8004034:	f008 f8c0 	bl	800c1b8 <HAL_UART_Transmit>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8004044:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f88f 	bl	8004178 <Get_CRC8>
 800405a:	4603      	mov	r3, r0
 800405c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 8004060:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004064:	b29a      	uxth	r2, r3
 8004066:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800406a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800406e:	4841      	ldr	r0, [pc, #260]	@ (8004174 <INIT_PERM_TARVOS+0x1f0>)
 8004070:	f008 f8a2 	bl	800c1b8 <HAL_UART_Transmit>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 8004080:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	f107 031c 	add.w	r3, r7, #28
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f871 	bl	8004178 <Get_CRC8>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 800409c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	f107 011c 	add.w	r1, r7, #28
 80040a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040aa:	4832      	ldr	r0, [pc, #200]	@ (8004174 <INIT_PERM_TARVOS+0x1f0>)
 80040ac:	f008 f884 	bl	800c1b8 <HAL_UART_Transmit>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 80040bc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 f853 	bl	8004178 <Get_CRC8>
 80040d2:	4603      	mov	r3, r0
 80040d4:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 80040d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80040da:	b29a      	uxth	r2, r3
 80040dc:	f107 0114 	add.w	r1, r7, #20
 80040e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040e4:	4823      	ldr	r0, [pc, #140]	@ (8004174 <INIT_PERM_TARVOS+0x1f0>)
 80040e6:	f008 f867 	bl	800c1b8 <HAL_UART_Transmit>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 80040f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f836 	bl	8004178 <Get_CRC8>
 800410c:	4603      	mov	r3, r0
 800410e:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8004110:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004114:	b29a      	uxth	r2, r3
 8004116:	f107 010c 	add.w	r1, r7, #12
 800411a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800411e:	4815      	ldr	r0, [pc, #84]	@ (8004174 <INIT_PERM_TARVOS+0x1f0>)
 8004120:	f008 f84a 	bl	800c1b8 <HAL_UART_Transmit>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8004130:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004134:	b29a      	uxth	r2, r3
 8004136:	f107 0108 	add.w	r1, r7, #8
 800413a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800413e:	480d      	ldr	r0, [pc, #52]	@ (8004174 <INIT_PERM_TARVOS+0x1f0>)
 8004140:	f008 f83a 	bl	800c1b8 <HAL_UART_Transmit>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8004150:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004154:	f001 fb6c 	bl	8005830 <HAL_Delay>
    return status;
 8004158:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800415c:	4618      	mov	r0, r3
 800415e:	3738      	adds	r7, #56	@ 0x38
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	080195a4 	.word	0x080195a4
 8004168:	080195ac 	.word	0x080195ac
 800416c:	080195b4 	.word	0x080195b4
 8004170:	07000502 	.word	0x07000502
 8004174:	20001438 	.word	0x20001438

08004178 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8004188:	2300      	movs	r3, #0
 800418a:	81bb      	strh	r3, [r7, #12]
 800418c:	e009      	b.n	80041a2 <Get_CRC8+0x2a>
		crc ^= bufP[i];
 800418e:	89bb      	ldrh	r3, [r7, #12]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	4053      	eors	r3, r2
 800419a:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 800419c:	89bb      	ldrh	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	81bb      	strh	r3, [r7, #12]
 80041a2:	89ba      	ldrh	r2, [r7, #12]
 80041a4:	887b      	ldrh	r3, [r7, #2]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d3f1      	bcc.n	800418e <Get_CRC8+0x16>
	}
	return crc;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <SEND_DATA_NETW1>:

    return status;

}

void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 80041b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	b08a      	sub	sp, #40	@ 0x28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	72fb      	strb	r3, [r7, #11]
 80041c8:	4613      	mov	r3, r2
 80041ca:	72bb      	strb	r3, [r7, #10]
 80041cc:	466b      	mov	r3, sp
 80041ce:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1d9e      	adds	r6, r3, #6
 80041d4:	1e73      	subs	r3, r6, #1
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	4632      	mov	r2, r6
 80041da:	2300      	movs	r3, #0
 80041dc:	4690      	mov	r8, r2
 80041de:	4699      	mov	r9, r3
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041f4:	4632      	mov	r2, r6
 80041f6:	2300      	movs	r3, #0
 80041f8:	4614      	mov	r4, r2
 80041fa:	461d      	mov	r5, r3
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	00eb      	lsls	r3, r5, #3
 8004206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800420a:	00e2      	lsls	r2, r4, #3
 800420c:	4633      	mov	r3, r6
 800420e:	3307      	adds	r3, #7
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	ebad 0d03 	sub.w	sp, sp, r3
 8004218:	466b      	mov	r3, sp
 800421a:	3300      	adds	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2202      	movs	r2, #2
 8004222:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2201      	movs	r2, #1
 8004228:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	3302      	adds	r3, #2
 8004230:	b2da      	uxtb	r2, r3
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	7afa      	ldrb	r2, [r7, #11]
 800423a:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	7aba      	ldrb	r2, [r7, #10]
 8004240:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 8004242:	2300      	movs	r3, #0
 8004244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004248:	e00e      	b.n	8004268 <SEND_DATA_NETW1+0xb0>
        trame[5 + i] = data[i];
 800424a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	441a      	add	r2, r3
 8004252:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004256:	3305      	adds	r3, #5
 8004258:	7811      	ldrb	r1, [r2, #0]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 800425e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004262:	3301      	adds	r3, #1
 8004264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	429a      	cmp	r2, r3
 8004270:	dceb      	bgt.n	800424a <SEND_DATA_NETW1+0x92>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	b29b      	uxth	r3, r3
 8004276:	3305      	adds	r3, #5
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	1d5c      	adds	r4, r3, #5
 800427e:	4611      	mov	r1, r2
 8004280:	69f8      	ldr	r0, [r7, #28]
 8004282:	f7ff ff79 	bl	8004178 <Get_CRC8>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 800428e:	b2b2      	uxth	r2, r6
 8004290:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004294:	69f9      	ldr	r1, [r7, #28]
 8004296:	4808      	ldr	r0, [pc, #32]	@ (80042b8 <SEND_DATA_NETW1+0x100>)
 8004298:	f007 ff8e 	bl	800c1b8 <HAL_UART_Transmit>
    uint8_t bufferreceivetest[10];
    HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);
 800429c:	f107 0310 	add.w	r3, r7, #16
 80042a0:	2205      	movs	r2, #5
 80042a2:	4619      	mov	r1, r3
 80042a4:	4804      	ldr	r0, [pc, #16]	@ (80042b8 <SEND_DATA_NETW1+0x100>)
 80042a6:	f008 f815 	bl	800c2d4 <HAL_UART_Receive_IT>
 80042aa:	46d5      	mov	sp, sl

}
 80042ac:	bf00      	nop
 80042ae:	3728      	adds	r7, #40	@ 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b6:	bf00      	nop
 80042b8:	20001438 	.word	0x20001438

080042bc <create_and_send_payload>:
	return status;

}

//payload size==54
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,uint8_t flag_sup,float latitude,float longitude,float hMSL,float altitude_baro,float vspeed,float hspeed,float temperature,float pression, float Accx, float Accy, float Accz, uint32_t timeindex){
 80042bc:	b580      	push	{r7, lr}
 80042be:	b09c      	sub	sp, #112	@ 0x70
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	461a      	mov	r2, r3
 80042ca:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 80042ce:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 80042d2:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 80042d6:	edc7 1a08 	vstr	s3, [r7, #32]
 80042da:	ed87 2a07 	vstr	s4, [r7, #28]
 80042de:	edc7 2a06 	vstr	s5, [r7, #24]
 80042e2:	ed87 3a05 	vstr	s6, [r7, #20]
 80042e6:	edc7 3a04 	vstr	s7, [r7, #16]
 80042ea:	ed87 4a03 	vstr	s8, [r7, #12]
 80042ee:	edc7 4a02 	vstr	s9, [r7, #8]
 80042f2:	ed87 5a01 	vstr	s10, [r7, #4]
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80042fc:	460b      	mov	r3, r1
 80042fe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8004302:	4613      	mov	r3, r2
 8004304:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint8_t buffdonnee[54];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 8004306:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	b29b      	uxth	r3, r3
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    buffdonnee[1] = header_code & 0xFF;
 8004312:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    buffdonnee[2] = flag_calib;
 800431a:	4b22      	ldr	r3, [pc, #136]	@ (80043a4 <create_and_send_payload+0xe8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    buffdonnee[3] = flag_drop;
 8004324:	4b20      	ldr	r3, [pc, #128]	@ (80043a8 <create_and_send_payload+0xec>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    buffdonnee[4] = flag_separation;
 800432e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <create_and_send_payload+0xf0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    buffdonnee[5] = flag_sup;
 8004338:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800433c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    memcpy(&buffdonnee[6],  &latitude,      sizeof(float));
 8004340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004342:	f8c7 303e 	str.w	r3, [r7, #62]	@ 0x3e
    memcpy(&buffdonnee[10],  &longitude,     sizeof(float));
 8004346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004348:	f8c7 3042 	str.w	r3, [r7, #66]	@ 0x42
    memcpy(&buffdonnee[14], &hMSL,      sizeof(float));
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	f8c7 3046 	str.w	r3, [r7, #70]	@ 0x46
    memcpy(&buffdonnee[18], &altitude_baro, sizeof(float));
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f8c7 304a 	str.w	r3, [r7, #74]	@ 0x4a
    memcpy(&buffdonnee[22], &vspeed,        sizeof(float));
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f8c7 304e 	str.w	r3, [r7, #78]	@ 0x4e
    memcpy(&buffdonnee[26], &hspeed,        sizeof(float));
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f8c7 3052 	str.w	r3, [r7, #82]	@ 0x52
    memcpy(&buffdonnee[30], &temperature,    sizeof(float));
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f8c7 3056 	str.w	r3, [r7, #86]	@ 0x56
    memcpy(&buffdonnee[34], &pression,    sizeof(float));
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f8c7 305a 	str.w	r3, [r7, #90]	@ 0x5a
    memcpy(&buffdonnee[38], &Accx,    sizeof(float));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8c7 305e 	str.w	r3, [r7, #94]	@ 0x5e
    memcpy(&buffdonnee[42], &Accy,    sizeof(float));
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f8c7 3062 	str.w	r3, [r7, #98]	@ 0x62
    memcpy(&buffdonnee[46], &Accz,    sizeof(float));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8c7 3066 	str.w	r3, [r7, #102]	@ 0x66
    memcpy(&buffdonnee[50], &timeindex,    sizeof(uint32_t));
 8004382:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004384:	f8c7 306a 	str.w	r3, [r7, #106]	@ 0x6a

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);
 8004388:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800438c:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8004390:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8004394:	2336      	movs	r3, #54	@ 0x36
 8004396:	f7ff ff0f 	bl	80041b8 <SEND_DATA_NETW1>

}
 800439a:	bf00      	nop
 800439c:	3770      	adds	r7, #112	@ 0x70
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000dc4 	.word	0x20000dc4
 80043a8:	20000dbc 	.word	0x20000dbc
 80043ac:	20000dc0 	.word	0x20000dc0

080043b0 <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	f040 8088 	bne.w	80044d4 <decode_payload+0x124>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b81      	cmp	r3, #129	@ 0x81
 80043cc:	f040 8082 	bne.w	80044d4 <decode_payload+0x124>
		return;
	}
	if(receivingbuffer[2]!=56){
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	3302      	adds	r3, #2
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b38      	cmp	r3, #56	@ 0x38
 80043d8:	d17e      	bne.n	80044d8 <decode_payload+0x128>
		return;
	}

	out->senderadress=receivingbuffer[3];
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	78da      	ldrb	r2, [r3, #3]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	3304      	adds	r3, #4
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b21b      	sxth	r3, r3
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	b21a      	sxth	r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	3305      	adds	r3, #5
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	b21b      	sxth	r3, r3
 80043f8:	4313      	orrs	r3, r2
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	799a      	ldrb	r2, [r3, #6]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	79da      	ldrb	r2, [r3, #7]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	7a1a      	ldrb	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_sup = receivingbuffer[9];
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	7a5a      	ldrb	r2, [r3, #9]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }

#endif

#ifdef PARTIE_HAUT
    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3348      	adds	r3, #72	@ 0x48
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	320a      	adds	r2, #10
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	334c      	adds	r3, #76	@ 0x4c
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	320e      	adds	r2, #14
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3350      	adds	r3, #80	@ 0x50
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	3212      	adds	r2, #18
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3354      	adds	r3, #84	@ 0x54
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	3216      	adds	r2, #22
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3358      	adds	r3, #88	@ 0x58
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	321a      	adds	r2, #26
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	335c      	adds	r3, #92	@ 0x5c
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	321e      	adds	r2, #30
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3360      	adds	r3, #96	@ 0x60
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	3222      	adds	r2, #34	@ 0x22
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3370      	adds	r3, #112	@ 0x70
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	3226      	adds	r2, #38	@ 0x26
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3364      	adds	r3, #100	@ 0x64
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	322a      	adds	r2, #42	@ 0x2a
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3368      	adds	r3, #104	@ 0x68
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	322e      	adds	r2, #46	@ 0x2e
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	336c      	adds	r3, #108	@ 0x6c
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	3232      	adds	r2, #50	@ 0x32
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3374      	adds	r3, #116	@ 0x74
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	3236      	adds	r2, #54	@ 0x36
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3378      	adds	r3, #120	@ 0x78
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	323a      	adds	r2, #58	@ 0x3a
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	701a      	strb	r2, [r3, #0]
#endif




    memset((uint8_t *)receivingbuffer,0,64);
 80044c8:	2240      	movs	r2, #64	@ 0x40
 80044ca:	2100      	movs	r1, #0
 80044cc:	6838      	ldr	r0, [r7, #0]
 80044ce:	f010 fde7 	bl	80150a0 <memset>
 80044d2:	e002      	b.n	80044da <decode_payload+0x12a>
		return;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <decode_payload+0x12a>
		return;
 80044d8:	bf00      	nop
}
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	@ 0x38
 80044e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	605a      	str	r2, [r3, #4]
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f4:	f107 031c 	add.w	r3, r7, #28
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004500:	463b      	mov	r3, r7
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	60da      	str	r2, [r3, #12]
 800450c:	611a      	str	r2, [r3, #16]
 800450e:	615a      	str	r2, [r3, #20]
 8004510:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004512:	4b2d      	ldr	r3, [pc, #180]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 8004514:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004518:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800451a:	4b2b      	ldr	r3, [pc, #172]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 800451c:	2200      	movs	r2, #0
 800451e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004520:	4b29      	ldr	r3, [pc, #164]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 8004526:	4b28      	ldr	r3, [pc, #160]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 8004528:	2277      	movs	r2, #119	@ 0x77
 800452a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800452c:	4b26      	ldr	r3, [pc, #152]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 800452e:	2200      	movs	r2, #0
 8004530:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004532:	4b25      	ldr	r3, [pc, #148]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 8004534:	2200      	movs	r2, #0
 8004536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004538:	4823      	ldr	r0, [pc, #140]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 800453a:	f005 fea5 	bl	800a288 <HAL_TIM_Base_Init>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004544:	f7fe fc30 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800454e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004552:	4619      	mov	r1, r3
 8004554:	481c      	ldr	r0, [pc, #112]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 8004556:	f006 fec5 	bl	800b2e4 <HAL_TIM_ConfigClockSource>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004560:	f7fe fc22 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004564:	4818      	ldr	r0, [pc, #96]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 8004566:	f005 ff51 	bl	800a40c <HAL_TIM_PWM_Init>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004570:	f7fe fc1a 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004578:	2300      	movs	r3, #0
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800457c:	f107 031c 	add.w	r3, r7, #28
 8004580:	4619      	mov	r1, r3
 8004582:	4811      	ldr	r0, [pc, #68]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 8004584:	f007 fd00 	bl	800bf88 <HAL_TIMEx_MasterConfigSynchronization>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800458e:	f7fe fc0b 	bl	8002da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004592:	2360      	movs	r3, #96	@ 0x60
 8004594:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800459e:	2304      	movs	r3, #4
 80045a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80045a2:	463b      	mov	r3, r7
 80045a4:	2204      	movs	r2, #4
 80045a6:	4619      	mov	r1, r3
 80045a8:	4807      	ldr	r0, [pc, #28]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 80045aa:	f006 fd87 	bl	800b0bc <HAL_TIM_PWM_ConfigChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80045b4:	f7fe fbf8 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80045b8:	4803      	ldr	r0, [pc, #12]	@ (80045c8 <MX_TIM2_Init+0xe8>)
 80045ba:	f000 f94f 	bl	800485c <HAL_TIM_MspPostInit>

}
 80045be:	bf00      	nop
 80045c0:	3738      	adds	r7, #56	@ 0x38
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200012ec 	.word	0x200012ec

080045cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08e      	sub	sp, #56	@ 0x38
 80045d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	605a      	str	r2, [r3, #4]
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e0:	f107 031c 	add.w	r3, r7, #28
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045ec:	463b      	mov	r3, r7
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	609a      	str	r2, [r3, #8]
 80045f6:	60da      	str	r2, [r3, #12]
 80045f8:	611a      	str	r2, [r3, #16]
 80045fa:	615a      	str	r2, [r3, #20]
 80045fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045fe:	4b2d      	ldr	r3, [pc, #180]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004600:	4a2d      	ldr	r2, [pc, #180]	@ (80046b8 <MX_TIM3_Init+0xec>)
 8004602:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8004604:	4b2b      	ldr	r3, [pc, #172]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004606:	2263      	movs	r2, #99	@ 0x63
 8004608:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800460a:	4b2a      	ldr	r3, [pc, #168]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004610:	4b28      	ldr	r3, [pc, #160]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004612:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004616:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004618:	4b26      	ldr	r3, [pc, #152]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 800461a:	2200      	movs	r2, #0
 800461c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800461e:	4b25      	ldr	r3, [pc, #148]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004620:	2280      	movs	r2, #128	@ 0x80
 8004622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004624:	4823      	ldr	r0, [pc, #140]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004626:	f005 fe2f 	bl	800a288 <HAL_TIM_Base_Init>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004630:	f7fe fbba 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800463a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800463e:	4619      	mov	r1, r3
 8004640:	481c      	ldr	r0, [pc, #112]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004642:	f006 fe4f 	bl	800b2e4 <HAL_TIM_ConfigClockSource>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800464c:	f7fe fbac 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004650:	4818      	ldr	r0, [pc, #96]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004652:	f005 fedb 	bl	800a40c <HAL_TIM_PWM_Init>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800465c:	f7fe fba4 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004664:	2300      	movs	r3, #0
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004668:	f107 031c 	add.w	r3, r7, #28
 800466c:	4619      	mov	r1, r3
 800466e:	4811      	ldr	r0, [pc, #68]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004670:	f007 fc8a 	bl	800bf88 <HAL_TIMEx_MasterConfigSynchronization>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800467a:	f7fe fb95 	bl	8002da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800467e:	2360      	movs	r3, #96	@ 0x60
 8004680:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800468e:	463b      	mov	r3, r7
 8004690:	2200      	movs	r2, #0
 8004692:	4619      	mov	r1, r3
 8004694:	4807      	ldr	r0, [pc, #28]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 8004696:	f006 fd11 	bl	800b0bc <HAL_TIM_PWM_ConfigChannel>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80046a0:	f7fe fb82 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046a4:	4803      	ldr	r0, [pc, #12]	@ (80046b4 <MX_TIM3_Init+0xe8>)
 80046a6:	f000 f8d9 	bl	800485c <HAL_TIM_MspPostInit>

}
 80046aa:	bf00      	nop
 80046ac:	3738      	adds	r7, #56	@ 0x38
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20001338 	.word	0x20001338
 80046b8:	40000400 	.word	0x40000400

080046bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046c2:	f107 0310 	add.w	r3, r7, #16
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	609a      	str	r2, [r3, #8]
 80046ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d0:	1d3b      	adds	r3, r7, #4
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046da:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <MX_TIM4_Init+0x94>)
 80046dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004754 <MX_TIM4_Init+0x98>)
 80046de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80046e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004750 <MX_TIM4_Init+0x94>)
 80046e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80046e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046e8:	4b19      	ldr	r3, [pc, #100]	@ (8004750 <MX_TIM4_Init+0x94>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80046ee:	4b18      	ldr	r3, [pc, #96]	@ (8004750 <MX_TIM4_Init+0x94>)
 80046f0:	2209      	movs	r2, #9
 80046f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046f4:	4b16      	ldr	r3, [pc, #88]	@ (8004750 <MX_TIM4_Init+0x94>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046fa:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <MX_TIM4_Init+0x94>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004700:	4813      	ldr	r0, [pc, #76]	@ (8004750 <MX_TIM4_Init+0x94>)
 8004702:	f005 fdc1 	bl	800a288 <HAL_TIM_Base_Init>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800470c:	f7fe fb4c 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004714:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004716:	f107 0310 	add.w	r3, r7, #16
 800471a:	4619      	mov	r1, r3
 800471c:	480c      	ldr	r0, [pc, #48]	@ (8004750 <MX_TIM4_Init+0x94>)
 800471e:	f006 fde1 	bl	800b2e4 <HAL_TIM_ConfigClockSource>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004728:	f7fe fb3e 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800472c:	2300      	movs	r3, #0
 800472e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4805      	ldr	r0, [pc, #20]	@ (8004750 <MX_TIM4_Init+0x94>)
 800473a:	f007 fc25 	bl	800bf88 <HAL_TIMEx_MasterConfigSynchronization>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004744:	f7fe fb30 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004748:	bf00      	nop
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20001384 	.word	0x20001384
 8004754:	40000800 	.word	0x40000800

08004758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004768:	d13e      	bne.n	80047e8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800476a:	4b37      	ldr	r3, [pc, #220]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 800476c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476e:	4a36      	ldr	r2, [pc, #216]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6593      	str	r3, [r2, #88]	@ 0x58
 8004776:	4b34      	ldr	r3, [pc, #208]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8004782:	4b32      	ldr	r3, [pc, #200]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 8004784:	4a32      	ldr	r2, [pc, #200]	@ (8004850 <HAL_TIM_Base_MspInit+0xf8>)
 8004786:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8004788:	4b30      	ldr	r3, [pc, #192]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 800478a:	2239      	movs	r2, #57	@ 0x39
 800478c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800478e:	4b2f      	ldr	r3, [pc, #188]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 8004790:	2210      	movs	r2, #16
 8004792:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004794:	4b2d      	ldr	r3, [pc, #180]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 8004796:	2200      	movs	r2, #0
 8004798:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800479a:	4b2c      	ldr	r3, [pc, #176]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 800479c:	2280      	movs	r2, #128	@ 0x80
 800479e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047a0:	4b2a      	ldr	r3, [pc, #168]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 80047a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047a8:	4b28      	ldr	r3, [pc, #160]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 80047ae:	4b27      	ldr	r3, [pc, #156]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80047b4:	4b25      	ldr	r3, [pc, #148]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 80047ba:	4824      	ldr	r0, [pc, #144]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 80047bc:	f002 fdf0 	bl	80073a0 <HAL_DMA_Init>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80047c6:	f7fe faef 	bl	8002da8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1f      	ldr	r2, [pc, #124]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 80047ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80047d0:	4a1e      	ldr	r2, [pc, #120]	@ (800484c <HAL_TIM_Base_MspInit+0xf4>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2105      	movs	r1, #5
 80047da:	201c      	movs	r0, #28
 80047dc:	f002 fdb8 	bl	8007350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047e0:	201c      	movs	r0, #28
 80047e2:	f002 fdcf 	bl	8007384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80047e6:	e02a      	b.n	800483e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a19      	ldr	r2, [pc, #100]	@ (8004854 <HAL_TIM_Base_MspInit+0xfc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10c      	bne.n	800480c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047f2:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	4a14      	ldr	r2, [pc, #80]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 80047f8:	f043 0302 	orr.w	r3, r3, #2
 80047fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80047fe:	4b12      	ldr	r3, [pc, #72]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693b      	ldr	r3, [r7, #16]
}
 800480a:	e018      	b.n	800483e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a11      	ldr	r2, [pc, #68]	@ (8004858 <HAL_TIM_Base_MspInit+0x100>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d113      	bne.n	800483e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	4a0b      	ldr	r2, [pc, #44]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	6593      	str	r3, [r2, #88]	@ 0x58
 8004822:	4b09      	ldr	r3, [pc, #36]	@ (8004848 <HAL_TIM_Base_MspInit+0xf0>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 800482e:	2200      	movs	r2, #0
 8004830:	2106      	movs	r1, #6
 8004832:	201e      	movs	r0, #30
 8004834:	f002 fd8c 	bl	8007350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004838:	201e      	movs	r0, #30
 800483a:	f002 fda3 	bl	8007384 <HAL_NVIC_EnableIRQ>
}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	200013d0 	.word	0x200013d0
 8004850:	40020008 	.word	0x40020008
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800

0800485c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	@ 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487c:	d11d      	bne.n	80048ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487e:	4b21      	ldr	r3, [pc, #132]	@ (8004904 <HAL_TIM_MspPostInit+0xa8>)
 8004880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004882:	4a20      	ldr	r2, [pc, #128]	@ (8004904 <HAL_TIM_MspPostInit+0xa8>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800488a:	4b1e      	ldr	r3, [pc, #120]	@ (8004904 <HAL_TIM_MspPostInit+0xa8>)
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004896:	2302      	movs	r3, #2
 8004898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	2302      	movs	r3, #2
 800489c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80048a2:	2301      	movs	r3, #1
 80048a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048a6:	2301      	movs	r3, #1
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048aa:	f107 0314 	add.w	r3, r7, #20
 80048ae:	4619      	mov	r1, r3
 80048b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048b4:	f003 f8b2 	bl	8007a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80048b8:	e020      	b.n	80048fc <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a12      	ldr	r2, [pc, #72]	@ (8004908 <HAL_TIM_MspPostInit+0xac>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d11b      	bne.n	80048fc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004904 <HAL_TIM_MspPostInit+0xa8>)
 80048c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <HAL_TIM_MspPostInit+0xa8>)
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <HAL_TIM_MspPostInit+0xa8>)
 80048d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80048dc:	2340      	movs	r3, #64	@ 0x40
 80048de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e8:	2300      	movs	r3, #0
 80048ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048ec:	2302      	movs	r3, #2
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	4619      	mov	r1, r3
 80048f6:	4805      	ldr	r0, [pc, #20]	@ (800490c <HAL_TIM_MspPostInit+0xb0>)
 80048f8:	f003 f890 	bl	8007a1c <HAL_GPIO_Init>
}
 80048fc:	bf00      	nop
 80048fe:	3728      	adds	r7, #40	@ 0x28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40021000 	.word	0x40021000
 8004908:	40000400 	.word	0x40000400
 800490c:	48000800 	.word	0x48000800

08004910 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004914:	4b21      	ldr	r3, [pc, #132]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004916:	4a22      	ldr	r2, [pc, #136]	@ (80049a0 <MX_LPUART1_UART_Init+0x90>)
 8004918:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800491a:	4b20      	ldr	r3, [pc, #128]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 800491c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004920:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004922:	4b1e      	ldr	r3, [pc, #120]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004928:	4b1c      	ldr	r3, [pc, #112]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800492e:	4b1b      	ldr	r3, [pc, #108]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004930:	2200      	movs	r2, #0
 8004932:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004934:	4b19      	ldr	r3, [pc, #100]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004936:	220c      	movs	r2, #12
 8004938:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800493a:	4b18      	ldr	r3, [pc, #96]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004940:	4b16      	ldr	r3, [pc, #88]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004942:	2200      	movs	r2, #0
 8004944:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004946:	4b15      	ldr	r3, [pc, #84]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004948:	2200      	movs	r2, #0
 800494a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800494c:	4b13      	ldr	r3, [pc, #76]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 800494e:	2200      	movs	r2, #0
 8004950:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004952:	4812      	ldr	r0, [pc, #72]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004954:	f007 fbe0 	bl	800c118 <HAL_UART_Init>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800495e:	f7fe fa23 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004962:	2100      	movs	r1, #0
 8004964:	480d      	ldr	r0, [pc, #52]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004966:	f009 ff66 	bl	800e836 <HAL_UARTEx_SetTxFifoThreshold>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8004970:	f7fe fa1a 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004974:	2100      	movs	r1, #0
 8004976:	4809      	ldr	r0, [pc, #36]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004978:	f009 ff9b 	bl	800e8b2 <HAL_UARTEx_SetRxFifoThreshold>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8004982:	f7fe fa11 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004986:	4805      	ldr	r0, [pc, #20]	@ (800499c <MX_LPUART1_UART_Init+0x8c>)
 8004988:	f009 ff1c 	bl	800e7c4 <HAL_UARTEx_DisableFifoMode>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8004992:	f7fe fa09 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20001438 	.word	0x20001438
 80049a0:	40008000 	.word	0x40008000

080049a4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049a8:	4b22      	ldr	r3, [pc, #136]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049aa:	4a23      	ldr	r2, [pc, #140]	@ (8004a38 <MX_USART1_UART_Init+0x94>)
 80049ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80049ae:	4b21      	ldr	r3, [pc, #132]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80049b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049be:	2200      	movs	r2, #0
 80049c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049ca:	220c      	movs	r2, #12
 80049cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ce:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d4:	4b17      	ldr	r3, [pc, #92]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049da:	4b16      	ldr	r3, [pc, #88]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049dc:	2200      	movs	r2, #0
 80049de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049e0:	4b14      	ldr	r3, [pc, #80]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049e6:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049ec:	4811      	ldr	r0, [pc, #68]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 80049ee:	f007 fb93 	bl	800c118 <HAL_UART_Init>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80049f8:	f7fe f9d6 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049fc:	2100      	movs	r1, #0
 80049fe:	480d      	ldr	r0, [pc, #52]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 8004a00:	f009 ff19 	bl	800e836 <HAL_UARTEx_SetTxFifoThreshold>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004a0a:	f7fe f9cd 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4808      	ldr	r0, [pc, #32]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 8004a12:	f009 ff4e 	bl	800e8b2 <HAL_UARTEx_SetRxFifoThreshold>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004a1c:	f7fe f9c4 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004a20:	4804      	ldr	r0, [pc, #16]	@ (8004a34 <MX_USART1_UART_Init+0x90>)
 8004a22:	f009 fecf 	bl	800e7c4 <HAL_UARTEx_DisableFifoMode>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004a2c:	f7fe f9bc 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a30:	bf00      	nop
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	200014cc 	.word	0x200014cc
 8004a38:	40013800 	.word	0x40013800

08004a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b09e      	sub	sp, #120	@ 0x78
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a54:	f107 0320 	add.w	r3, r7, #32
 8004a58:	2244      	movs	r2, #68	@ 0x44
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f010 fb1f 	bl	80150a0 <memset>
  if(uartHandle->Instance==LPUART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a7e      	ldr	r2, [pc, #504]	@ (8004c60 <HAL_UART_MspInit+0x224>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	f040 8087 	bne.w	8004b7c <HAL_UART_MspInit+0x140>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004a6e:	2320      	movs	r3, #32
 8004a70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a76:	f107 0320 	add.w	r3, r7, #32
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 fde6 	bl	800964c <HAL_RCCEx_PeriphCLKConfig>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a86:	f7fe f98f 	bl	8002da8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004a8a:	4b76      	ldr	r3, [pc, #472]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8e:	4a75      	ldr	r2, [pc, #468]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004a96:	4b73      	ldr	r3, [pc, #460]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa2:	4b70      	ldr	r3, [pc, #448]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa6:	4a6f      	ldr	r2, [pc, #444]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aae:	4b6d      	ldr	r3, [pc, #436]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aba:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004abe:	4a69      	ldr	r2, [pc, #420]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004ac0:	f043 0302 	orr.w	r3, r3, #2
 8004ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ac6:	4b67      	ldr	r3, [pc, #412]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004aea:	4619      	mov	r1, r3
 8004aec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004af0:	f002 ff94 	bl	8007a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004af4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004af8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afa:	2302      	movs	r3, #2
 8004afc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b02:	2300      	movs	r3, #0
 8004b04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004b06:	2308      	movs	r3, #8
 8004b08:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4855      	ldr	r0, [pc, #340]	@ (8004c68 <HAL_UART_MspInit+0x22c>)
 8004b12:	f002 ff83 	bl	8007a1c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8004b16:	4b55      	ldr	r3, [pc, #340]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b18:	4a55      	ldr	r2, [pc, #340]	@ (8004c70 <HAL_UART_MspInit+0x234>)
 8004b1a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004b1c:	4b53      	ldr	r3, [pc, #332]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b1e:	2222      	movs	r2, #34	@ 0x22
 8004b20:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b22:	4b52      	ldr	r3, [pc, #328]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b28:	4b50      	ldr	r3, [pc, #320]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b30:	2280      	movs	r2, #128	@ 0x80
 8004b32:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b34:	4b4d      	ldr	r3, [pc, #308]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004b40:	4b4a      	ldr	r3, [pc, #296]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b42:	2220      	movs	r2, #32
 8004b44:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b46:	4b49      	ldr	r3, [pc, #292]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004b4c:	4847      	ldr	r0, [pc, #284]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b4e:	f002 fc27 	bl	80073a0 <HAL_DMA_Init>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8004b58:	f7fe f926 	bl	8002da8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a43      	ldr	r2, [pc, #268]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004b64:	4a41      	ldr	r2, [pc, #260]	@ (8004c6c <HAL_UART_MspInit+0x230>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2105      	movs	r1, #5
 8004b6e:	205b      	movs	r0, #91	@ 0x5b
 8004b70:	f002 fbee 	bl	8007350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004b74:	205b      	movs	r0, #91	@ 0x5b
 8004b76:	f002 fc05 	bl	8007384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004b7a:	e06c      	b.n	8004c56 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==USART1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a3c      	ldr	r2, [pc, #240]	@ (8004c74 <HAL_UART_MspInit+0x238>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d167      	bne.n	8004c56 <HAL_UART_MspInit+0x21a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b86:	2301      	movs	r3, #1
 8004b88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b8e:	f107 0320 	add.w	r3, r7, #32
 8004b92:	4618      	mov	r0, r3
 8004b94:	f004 fd5a 	bl	800964c <HAL_RCCEx_PeriphCLKConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8004b9e:	f7fe f903 	bl	8002da8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ba2:	4b30      	ldr	r3, [pc, #192]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8004bae:	4b2d      	ldr	r3, [pc, #180]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bba:	4b2a      	ldr	r3, [pc, #168]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbe:	4a29      	ldr	r2, [pc, #164]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bc6:	4b27      	ldr	r3, [pc, #156]	@ (8004c64 <HAL_UART_MspInit+0x228>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bd2:	23c0      	movs	r3, #192	@ 0xc0
 8004bd4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bde:	2300      	movs	r3, #0
 8004be0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004be2:	2307      	movs	r3, #7
 8004be4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004be6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004bea:	4619      	mov	r1, r3
 8004bec:	481e      	ldr	r0, [pc, #120]	@ (8004c68 <HAL_UART_MspInit+0x22c>)
 8004bee:	f002 ff15 	bl	8007a1c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004bf2:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004bf4:	4a21      	ldr	r2, [pc, #132]	@ (8004c7c <HAL_UART_MspInit+0x240>)
 8004bf6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004bfa:	2218      	movs	r2, #24
 8004bfc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c04:	4b1c      	ldr	r3, [pc, #112]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c0c:	2280      	movs	r2, #128	@ 0x80
 8004c0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c10:	4b19      	ldr	r3, [pc, #100]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c16:	4b18      	ldr	r3, [pc, #96]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004c1c:	4b16      	ldr	r3, [pc, #88]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c1e:	2220      	movs	r2, #32
 8004c20:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004c28:	4813      	ldr	r0, [pc, #76]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c2a:	f002 fbb9 	bl	80073a0 <HAL_DMA_Init>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004c34:	f7fe f8b8 	bl	8002da8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004c40:	4a0d      	ldr	r2, [pc, #52]	@ (8004c78 <HAL_UART_MspInit+0x23c>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004c46:	2200      	movs	r2, #0
 8004c48:	2105      	movs	r1, #5
 8004c4a:	2025      	movs	r0, #37	@ 0x25
 8004c4c:	f002 fb80 	bl	8007350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c50:	2025      	movs	r0, #37	@ 0x25
 8004c52:	f002 fb97 	bl	8007384 <HAL_NVIC_EnableIRQ>
}
 8004c56:	bf00      	nop
 8004c58:	3778      	adds	r7, #120	@ 0x78
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40008000 	.word	0x40008000
 8004c64:	40021000 	.word	0x40021000
 8004c68:	48000400 	.word	0x48000400
 8004c6c:	20001560 	.word	0x20001560
 8004c70:	40020030 	.word	0x40020030
 8004c74:	40013800 	.word	0x40013800
 8004c78:	200015c0 	.word	0x200015c0
 8004c7c:	40020058 	.word	0x40020058

08004c80 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d7c <HAL_UART_RxCpltCallback+0xfc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d114      	bne.n	8004cbc <HAL_UART_RxCpltCallback+0x3c>

		received_flag=1;
 8004c92:	4b3b      	ldr	r3, [pc, #236]	@ (8004d80 <HAL_UART_RxCpltCallback+0x100>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 8004c98:	2264      	movs	r2, #100	@ 0x64
 8004c9a:	493a      	ldr	r1, [pc, #232]	@ (8004d84 <HAL_UART_RxCpltCallback+0x104>)
 8004c9c:	483a      	ldr	r0, [pc, #232]	@ (8004d88 <HAL_UART_RxCpltCallback+0x108>)
 8004c9e:	f010 fa7e 	bl	801519e <memcpy>
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 8004ca2:	2264      	movs	r2, #100	@ 0x64
 8004ca4:	4937      	ldr	r1, [pc, #220]	@ (8004d84 <HAL_UART_RxCpltCallback+0x104>)
 8004ca6:	4839      	ldr	r0, [pc, #228]	@ (8004d8c <HAL_UART_RxCpltCallback+0x10c>)
 8004ca8:	f007 fb60 	bl	800c36c <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8004cac:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <HAL_UART_RxCpltCallback+0x110>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b37      	ldr	r3, [pc, #220]	@ (8004d90 <HAL_UART_RxCpltCallback+0x110>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0204 	bic.w	r2, r2, #4
 8004cba:	601a      	str	r2, [r3, #0]

	}
	if(huart->Instance==LPUART1){
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a34      	ldr	r2, [pc, #208]	@ (8004d94 <HAL_UART_RxCpltCallback+0x114>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d156      	bne.n	8004d74 <HAL_UART_RxCpltCallback+0xf4>



		if(receivingflag==0){
 8004cc6:	4b34      	ldr	r3, [pc, #208]	@ (8004d98 <HAL_UART_RxCpltCallback+0x118>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d122      	bne.n	8004d14 <HAL_UART_RxCpltCallback+0x94>
		if(tarvos_RX_Buffer[1]==0x81 && tarvos_RX_Buffer[0]==0x02){
 8004cce:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <HAL_UART_RxCpltCallback+0x11c>)
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	2b81      	cmp	r3, #129	@ 0x81
 8004cd4:	d110      	bne.n	8004cf8 <HAL_UART_RxCpltCallback+0x78>
 8004cd6:	4b31      	ldr	r3, [pc, #196]	@ (8004d9c <HAL_UART_RxCpltCallback+0x11c>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_UART_RxCpltCallback+0x78>

			memcpy((uint8_t *) tarvos_DATA,(uint8_t *)tarvos_RX_Buffer,5);
 8004cde:	2205      	movs	r2, #5
 8004ce0:	492e      	ldr	r1, [pc, #184]	@ (8004d9c <HAL_UART_RxCpltCallback+0x11c>)
 8004ce2:	482f      	ldr	r0, [pc, #188]	@ (8004da0 <HAL_UART_RxCpltCallback+0x120>)
 8004ce4:	f010 fa5b 	bl	801519e <memcpy>




			receivingflag=1;
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d98 <HAL_UART_RxCpltCallback+0x118>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
			receivingindex++;
 8004cee:	4b2d      	ldr	r3, [pc, #180]	@ (8004da4 <HAL_UART_RxCpltCallback+0x124>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8004da4 <HAL_UART_RxCpltCallback+0x124>)
 8004cf6:	6013      	str	r3, [r2, #0]
		}

		if(tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[0]==0x02){
 8004cf8:	4b28      	ldr	r3, [pc, #160]	@ (8004d9c <HAL_UART_RxCpltCallback+0x11c>)
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b40      	cmp	r3, #64	@ 0x40
 8004cfe:	d11f      	bne.n	8004d40 <HAL_UART_RxCpltCallback+0xc0>
 8004d00:	4b26      	ldr	r3, [pc, #152]	@ (8004d9c <HAL_UART_RxCpltCallback+0x11c>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d11b      	bne.n	8004d40 <HAL_UART_RxCpltCallback+0xc0>
					memset((uint8_t *)tarvos_RX_Buffer,0,5);
 8004d08:	2205      	movs	r2, #5
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4823      	ldr	r0, [pc, #140]	@ (8004d9c <HAL_UART_RxCpltCallback+0x11c>)
 8004d0e:	f010 f9c7 	bl	80150a0 <memset>
 8004d12:	e015      	b.n	8004d40 <HAL_UART_RxCpltCallback+0xc0>
				}


		}
		else{
			if(receivingindex!=0){
 8004d14:	4b23      	ldr	r3, [pc, #140]	@ (8004da4 <HAL_UART_RxCpltCallback+0x124>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d011      	beq.n	8004d40 <HAL_UART_RxCpltCallback+0xc0>
				memcpy((uint8_t *) tarvos_DATA+(5*receivingindex),(uint8_t *)tarvos_RX_Buffer,5);
 8004d1c:	4b21      	ldr	r3, [pc, #132]	@ (8004da4 <HAL_UART_RxCpltCallback+0x124>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <HAL_UART_RxCpltCallback+0x120>)
 8004d2a:	4413      	add	r3, r2
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	491b      	ldr	r1, [pc, #108]	@ (8004d9c <HAL_UART_RxCpltCallback+0x11c>)
 8004d30:	4618      	mov	r0, r3
 8004d32:	f010 fa34 	bl	801519e <memcpy>
				receivingindex++;
 8004d36:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <HAL_UART_RxCpltCallback+0x124>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	4a19      	ldr	r2, [pc, #100]	@ (8004da4 <HAL_UART_RxCpltCallback+0x124>)
 8004d3e:	6013      	str	r3, [r2, #0]
			}
		}

		if(receivingindex==12){
 8004d40:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <HAL_UART_RxCpltCallback+0x124>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	d108      	bne.n	8004d5a <HAL_UART_RxCpltCallback+0xda>
			receivingindex=0;
 8004d48:	4b16      	ldr	r3, [pc, #88]	@ (8004da4 <HAL_UART_RxCpltCallback+0x124>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
			receivingflag=0;
 8004d4e:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <HAL_UART_RxCpltCallback+0x118>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
			trameready=1;
 8004d54:	4b14      	ldr	r3, [pc, #80]	@ (8004da8 <HAL_UART_RxCpltCallback+0x128>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
		}
						HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5);//on recoit par dma à nouveau 64 caractères
 8004d5a:	2205      	movs	r2, #5
 8004d5c:	490f      	ldr	r1, [pc, #60]	@ (8004d9c <HAL_UART_RxCpltCallback+0x11c>)
 8004d5e:	480b      	ldr	r0, [pc, #44]	@ (8004d8c <HAL_UART_RxCpltCallback+0x10c>)
 8004d60:	f007 fb04 	bl	800c36c <HAL_UART_Receive_DMA>
						__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8004d64:	4b11      	ldr	r3, [pc, #68]	@ (8004dac <HAL_UART_RxCpltCallback+0x12c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <HAL_UART_RxCpltCallback+0x12c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0204 	bic.w	r2, r2, #4
 8004d72:	601a      	str	r2, [r3, #0]

		}


}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40013800 	.word	0x40013800
 8004d80:	20000de4 	.word	0x20000de4
 8004d84:	200004fc 	.word	0x200004fc
 8004d88:	20000bac 	.word	0x20000bac
 8004d8c:	20001438 	.word	0x20001438
 8004d90:	200015c0 	.word	0x200015c0
 8004d94:	40008000 	.word	0x40008000
 8004d98:	20001430 	.word	0x20001430
 8004d9c:	200004bc 	.word	0x200004bc
 8004da0:	2000047c 	.word	0x2000047c
 8004da4:	20001434 	.word	0x20001434
 8004da8:	20000de8 	.word	0x20000de8
 8004dac:	20001560 	.word	0x20001560

08004db0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004db8:	f000 fd2e 	bl	8005818 <HAL_GetTick>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4a04      	ldr	r2, [pc, #16]	@ (8004dd0 <SPI_Timer_On+0x20>)
 8004dc0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004dc2:	4a04      	ldr	r2, [pc, #16]	@ (8004dd4 <SPI_Timer_On+0x24>)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6013      	str	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20001624 	.word	0x20001624
 8004dd4:	20001628 	.word	0x20001628

08004dd8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004ddc:	f000 fd1c 	bl	8005818 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <SPI_Timer_Status+0x24>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <SPI_Timer_Status+0x28>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	bf34      	ite	cc
 8004df0:	2301      	movcc	r3, #1
 8004df2:	2300      	movcs	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20001624 	.word	0x20001624
 8004e00:	20001628 	.word	0x20001628

08004e04 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004e0e:	f107 020f 	add.w	r2, r7, #15
 8004e12:	1df9      	adds	r1, r7, #7
 8004e14:	2332      	movs	r3, #50	@ 0x32
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4804      	ldr	r0, [pc, #16]	@ (8004e2c <xchg_spi+0x28>)
 8004e1c:	f004 feb1 	bl	8009b82 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000df0 	.word	0x20000df0

08004e30 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e00a      	b.n	8004e56 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	18d4      	adds	r4, r2, r3
 8004e46:	20ff      	movs	r0, #255	@ 0xff
 8004e48:	f7ff ffdc 	bl	8004e04 <xchg_spi>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d3f0      	bcc.n	8004e40 <rcvr_spi_multi+0x10>
	}
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd90      	pop	{r4, r7, pc}

08004e68 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e009      	b.n	8004e8c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ffbf 	bl	8004e04 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d3f1      	bcc.n	8004e78 <xmit_spi_multi+0x10>
	}
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b086      	sub	sp, #24
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004ea6:	f000 fcb7 	bl	8005818 <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004eb0:	20ff      	movs	r0, #255	@ 0xff
 8004eb2:	f7ff ffa7 	bl	8004e04 <xchg_spi>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2bff      	cmp	r3, #255	@ 0xff
 8004ebe:	d007      	beq.n	8004ed0 <wait_ready+0x32>
 8004ec0:	f000 fcaa 	bl	8005818 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d8ef      	bhi.n	8004eb0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2bff      	cmp	r3, #255	@ 0xff
 8004ed4:	bf0c      	ite	eq
 8004ed6:	2301      	moveq	r3, #1
 8004ed8:	2300      	movne	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004ee8:	2201      	movs	r2, #1
 8004eea:	2110      	movs	r1, #16
 8004eec:	4803      	ldr	r0, [pc, #12]	@ (8004efc <despiselect+0x18>)
 8004eee:	f002 ff2f 	bl	8007d50 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004ef2:	20ff      	movs	r0, #255	@ 0xff
 8004ef4:	f7ff ff86 	bl	8004e04 <xchg_spi>

}
 8004ef8:	bf00      	nop
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	48000800 	.word	0x48000800

08004f00 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004f04:	2200      	movs	r2, #0
 8004f06:	2110      	movs	r1, #16
 8004f08:	4809      	ldr	r0, [pc, #36]	@ (8004f30 <spiselect+0x30>)
 8004f0a:	f002 ff21 	bl	8007d50 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004f0e:	20ff      	movs	r0, #255	@ 0xff
 8004f10:	f7ff ff78 	bl	8004e04 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004f14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004f18:	f7ff ffc1 	bl	8004e9e <wait_ready>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <spiselect+0x26>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e002      	b.n	8004f2c <spiselect+0x2c>

	despiselect();
 8004f26:	f7ff ffdd 	bl	8004ee4 <despiselect>
	return 0;	/* Timeout */
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	48000800 	.word	0x48000800

08004f34 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004f3e:	20c8      	movs	r0, #200	@ 0xc8
 8004f40:	f7ff ff36 	bl	8004db0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004f44:	20ff      	movs	r0, #255	@ 0xff
 8004f46:	f7ff ff5d 	bl	8004e04 <xchg_spi>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2bff      	cmp	r3, #255	@ 0xff
 8004f52:	d104      	bne.n	8004f5e <rcvr_datablock+0x2a>
 8004f54:	f7ff ff40 	bl	8004dd8 <SPI_Timer_Status>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f2      	bne.n	8004f44 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2bfe      	cmp	r3, #254	@ 0xfe
 8004f62:	d001      	beq.n	8004f68 <rcvr_datablock+0x34>
 8004f64:	2300      	movs	r3, #0
 8004f66:	e00a      	b.n	8004f7e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ff60 	bl	8004e30 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004f70:	20ff      	movs	r0, #255	@ 0xff
 8004f72:	f7ff ff47 	bl	8004e04 <xchg_spi>
 8004f76:	20ff      	movs	r0, #255	@ 0xff
 8004f78:	f7ff ff44 	bl	8004e04 <xchg_spi>

	return 1;						/* Function succeeded */
 8004f7c:	2301      	movs	r3, #1
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004f92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004f96:	f7ff ff82 	bl	8004e9e <wait_ready>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <xmit_datablock+0x1e>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e01e      	b.n	8004fe2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff ff2c 	bl	8004e04 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	2bfd      	cmp	r3, #253	@ 0xfd
 8004fb0:	d016      	beq.n	8004fe0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004fb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ff56 	bl	8004e68 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004fbc:	20ff      	movs	r0, #255	@ 0xff
 8004fbe:	f7ff ff21 	bl	8004e04 <xchg_spi>
 8004fc2:	20ff      	movs	r0, #255	@ 0xff
 8004fc4:	f7ff ff1e 	bl	8004e04 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004fc8:	20ff      	movs	r0, #255	@ 0xff
 8004fca:	f7ff ff1b 	bl	8004e04 <xchg_spi>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d001      	beq.n	8004fe0 <xmit_datablock+0x5a>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <xmit_datablock+0x5c>
	}
	return 1;
 8004fe0:	2301      	movs	r3, #1
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	6039      	str	r1, [r7, #0]
 8004ff4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da0e      	bge.n	800501c <send_cmd+0x32>
		cmd &= 0x7F;
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005004:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005006:	2100      	movs	r1, #0
 8005008:	2037      	movs	r0, #55	@ 0x37
 800500a:	f7ff ffee 	bl	8004fea <send_cmd>
 800500e:	4603      	mov	r3, r0
 8005010:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005012:	7bbb      	ldrb	r3, [r7, #14]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d901      	bls.n	800501c <send_cmd+0x32>
 8005018:	7bbb      	ldrb	r3, [r7, #14]
 800501a:	e051      	b.n	80050c0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d008      	beq.n	8005034 <send_cmd+0x4a>
		despiselect();
 8005022:	f7ff ff5f 	bl	8004ee4 <despiselect>
		if (!spiselect()) return 0xFF;
 8005026:	f7ff ff6b 	bl	8004f00 <spiselect>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <send_cmd+0x4a>
 8005030:	23ff      	movs	r3, #255	@ 0xff
 8005032:	e045      	b.n	80050c0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503a:	b2db      	uxtb	r3, r3
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fee1 	bl	8004e04 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	0e1b      	lsrs	r3, r3, #24
 8005046:	b2db      	uxtb	r3, r3
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fedb 	bl	8004e04 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	b2db      	uxtb	r3, r3
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff fed5 	bl	8004e04 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	b2db      	uxtb	r3, r3
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fecf 	bl	8004e04 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff feca 	bl	8004e04 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <send_cmd+0x94>
 800507a:	2395      	movs	r3, #149	@ 0x95
 800507c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d101      	bne.n	8005088 <send_cmd+0x9e>
 8005084:	2387      	movs	r3, #135	@ 0x87
 8005086:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff feba 	bl	8004e04 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d102      	bne.n	800509c <send_cmd+0xb2>
 8005096:	20ff      	movs	r0, #255	@ 0xff
 8005098:	f7ff feb4 	bl	8004e04 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800509c:	230a      	movs	r3, #10
 800509e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80050a0:	20ff      	movs	r0, #255	@ 0xff
 80050a2:	f7ff feaf 	bl	8004e04 <xchg_spi>
 80050a6:	4603      	mov	r3, r0
 80050a8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80050aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	da05      	bge.n	80050be <send_cmd+0xd4>
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80050be:	7bbb      	ldrb	r3, [r7, #14]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80050c8:	b590      	push	{r4, r7, lr}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <USER_SPI_initialize+0x14>
 80050d8:	2301      	movs	r3, #1
 80050da:	e0d6      	b.n	800528a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80050dc:	4b6d      	ldr	r3, [pc, #436]	@ (8005294 <USER_SPI_initialize+0x1cc>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <USER_SPI_initialize+0x2a>
 80050ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005294 <USER_SPI_initialize+0x1cc>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	e0cb      	b.n	800528a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80050f2:	4b69      	ldr	r3, [pc, #420]	@ (8005298 <USER_SPI_initialize+0x1d0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80050fc:	4b66      	ldr	r3, [pc, #408]	@ (8005298 <USER_SPI_initialize+0x1d0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005104:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005106:	230a      	movs	r3, #10
 8005108:	73fb      	strb	r3, [r7, #15]
 800510a:	e005      	b.n	8005118 <USER_SPI_initialize+0x50>
 800510c:	20ff      	movs	r0, #255	@ 0xff
 800510e:	f7ff fe79 	bl	8004e04 <xchg_spi>
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	3b01      	subs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f6      	bne.n	800510c <USER_SPI_initialize+0x44>

	ty = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005122:	2100      	movs	r1, #0
 8005124:	2000      	movs	r0, #0
 8005126:	f7ff ff60 	bl	8004fea <send_cmd>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 808b 	bne.w	8005248 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005132:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005136:	f7ff fe3b 	bl	8004db0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800513a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800513e:	2008      	movs	r0, #8
 8005140:	f7ff ff53 	bl	8004fea <send_cmd>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d151      	bne.n	80051ee <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
 800514e:	e00d      	b.n	800516c <USER_SPI_initialize+0xa4>
 8005150:	7bfc      	ldrb	r4, [r7, #15]
 8005152:	20ff      	movs	r0, #255	@ 0xff
 8005154:	f7ff fe56 	bl	8004e04 <xchg_spi>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	f104 0310 	add.w	r3, r4, #16
 8005160:	443b      	add	r3, r7
 8005162:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	3301      	adds	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d9ee      	bls.n	8005150 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005172:	7abb      	ldrb	r3, [r7, #10]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d167      	bne.n	8005248 <USER_SPI_initialize+0x180>
 8005178:	7afb      	ldrb	r3, [r7, #11]
 800517a:	2baa      	cmp	r3, #170	@ 0xaa
 800517c:	d164      	bne.n	8005248 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800517e:	bf00      	nop
 8005180:	f7ff fe2a 	bl	8004dd8 <SPI_Timer_Status>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <USER_SPI_initialize+0xd2>
 800518a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800518e:	20a9      	movs	r0, #169	@ 0xa9
 8005190:	f7ff ff2b 	bl	8004fea <send_cmd>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f2      	bne.n	8005180 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800519a:	f7ff fe1d 	bl	8004dd8 <SPI_Timer_Status>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d051      	beq.n	8005248 <USER_SPI_initialize+0x180>
 80051a4:	2100      	movs	r1, #0
 80051a6:	203a      	movs	r0, #58	@ 0x3a
 80051a8:	f7ff ff1f 	bl	8004fea <send_cmd>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d14a      	bne.n	8005248 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
 80051b6:	e00d      	b.n	80051d4 <USER_SPI_initialize+0x10c>
 80051b8:	7bfc      	ldrb	r4, [r7, #15]
 80051ba:	20ff      	movs	r0, #255	@ 0xff
 80051bc:	f7ff fe22 	bl	8004e04 <xchg_spi>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
 80051c4:	f104 0310 	add.w	r3, r4, #16
 80051c8:	443b      	add	r3, r7
 80051ca:	f803 2c08 	strb.w	r2, [r3, #-8]
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	3301      	adds	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d9ee      	bls.n	80051b8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80051da:	7a3b      	ldrb	r3, [r7, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <USER_SPI_initialize+0x120>
 80051e4:	230c      	movs	r3, #12
 80051e6:	e000      	b.n	80051ea <USER_SPI_initialize+0x122>
 80051e8:	2304      	movs	r3, #4
 80051ea:	737b      	strb	r3, [r7, #13]
 80051ec:	e02c      	b.n	8005248 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80051ee:	2100      	movs	r1, #0
 80051f0:	20a9      	movs	r0, #169	@ 0xa9
 80051f2:	f7ff fefa 	bl	8004fea <send_cmd>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d804      	bhi.n	8005206 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80051fc:	2302      	movs	r3, #2
 80051fe:	737b      	strb	r3, [r7, #13]
 8005200:	23a9      	movs	r3, #169	@ 0xa9
 8005202:	73bb      	strb	r3, [r7, #14]
 8005204:	e003      	b.n	800520e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005206:	2301      	movs	r3, #1
 8005208:	737b      	strb	r3, [r7, #13]
 800520a:	2301      	movs	r3, #1
 800520c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800520e:	bf00      	nop
 8005210:	f7ff fde2 	bl	8004dd8 <SPI_Timer_Status>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <USER_SPI_initialize+0x162>
 800521a:	7bbb      	ldrb	r3, [r7, #14]
 800521c:	2100      	movs	r1, #0
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fee3 	bl	8004fea <send_cmd>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f2      	bne.n	8005210 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800522a:	f7ff fdd5 	bl	8004dd8 <SPI_Timer_Status>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <USER_SPI_initialize+0x17c>
 8005234:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005238:	2010      	movs	r0, #16
 800523a:	f7ff fed6 	bl	8004fea <send_cmd>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <USER_SPI_initialize+0x180>
				ty = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005248:	4a14      	ldr	r2, [pc, #80]	@ (800529c <USER_SPI_initialize+0x1d4>)
 800524a:	7b7b      	ldrb	r3, [r7, #13]
 800524c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800524e:	f7ff fe49 	bl	8004ee4 <despiselect>

	if (ty) {			/* OK */
 8005252:	7b7b      	ldrb	r3, [r7, #13]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d012      	beq.n	800527e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005258:	4b0f      	ldr	r3, [pc, #60]	@ (8005298 <USER_SPI_initialize+0x1d0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <USER_SPI_initialize+0x1d0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0210 	orr.w	r2, r2, #16
 800526a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800526c:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <USER_SPI_initialize+0x1cc>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <USER_SPI_initialize+0x1cc>)
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e002      	b.n	8005284 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800527e:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <USER_SPI_initialize+0x1cc>)
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005284:	4b03      	ldr	r3, [pc, #12]	@ (8005294 <USER_SPI_initialize+0x1cc>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b2db      	uxtb	r3, r3
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bd90      	pop	{r4, r7, pc}
 8005292:	bf00      	nop
 8005294:	2000002c 	.word	0x2000002c
 8005298:	20000df0 	.word	0x20000df0
 800529c:	20001620 	.word	0x20001620

080052a0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <USER_SPI_status+0x14>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e002      	b.n	80052ba <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80052b4:	4b04      	ldr	r3, [pc, #16]	@ (80052c8 <USER_SPI_status+0x28>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	b2db      	uxtb	r3, r3
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	2000002c 	.word	0x2000002c

080052cc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d102      	bne.n	80052e8 <USER_SPI_read+0x1c>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <USER_SPI_read+0x20>
 80052e8:	2304      	movs	r3, #4
 80052ea:	e04d      	b.n	8005388 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80052ec:	4b28      	ldr	r3, [pc, #160]	@ (8005390 <USER_SPI_read+0xc4>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <USER_SPI_read+0x32>
 80052fa:	2303      	movs	r3, #3
 80052fc:	e044      	b.n	8005388 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80052fe:	4b25      	ldr	r3, [pc, #148]	@ (8005394 <USER_SPI_read+0xc8>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <USER_SPI_read+0x44>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	025b      	lsls	r3, r3, #9
 800530e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d111      	bne.n	800533a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	2011      	movs	r0, #17
 800531a:	f7ff fe66 	bl	8004fea <send_cmd>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d129      	bne.n	8005378 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f7ff fe03 	bl	8004f34 <rcvr_datablock>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d021      	beq.n	8005378 <USER_SPI_read+0xac>
			count = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	e01e      	b.n	8005378 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	2012      	movs	r0, #18
 800533e:	f7ff fe54 	bl	8004fea <send_cmd>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d117      	bne.n	8005378 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005348:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800534c:	68b8      	ldr	r0, [r7, #8]
 800534e:	f7ff fdf1 	bl	8004f34 <rcvr_datablock>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <USER_SPI_read+0xa2>
				buff += 512;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800535e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1ed      	bne.n	8005348 <USER_SPI_read+0x7c>
 800536c:	e000      	b.n	8005370 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800536e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005370:	2100      	movs	r1, #0
 8005372:	200c      	movs	r0, #12
 8005374:	f7ff fe39 	bl	8004fea <send_cmd>
		}
	}
	despiselect();
 8005378:	f7ff fdb4 	bl	8004ee4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	2000002c 	.word	0x2000002c
 8005394:	20001620 	.word	0x20001620

08005398 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4603      	mov	r3, r0
 80053a6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <USER_SPI_write+0x1c>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <USER_SPI_write+0x20>
 80053b4:	2304      	movs	r3, #4
 80053b6:	e063      	b.n	8005480 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80053b8:	4b33      	ldr	r3, [pc, #204]	@ (8005488 <USER_SPI_write+0xf0>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <USER_SPI_write+0x32>
 80053c6:	2303      	movs	r3, #3
 80053c8:	e05a      	b.n	8005480 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80053ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005488 <USER_SPI_write+0xf0>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <USER_SPI_write+0x44>
 80053d8:	2302      	movs	r3, #2
 80053da:	e051      	b.n	8005480 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80053dc:	4b2b      	ldr	r3, [pc, #172]	@ (800548c <USER_SPI_write+0xf4>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d102      	bne.n	80053ee <USER_SPI_write+0x56>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	025b      	lsls	r3, r3, #9
 80053ec:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d110      	bne.n	8005416 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	2018      	movs	r0, #24
 80053f8:	f7ff fdf7 	bl	8004fea <send_cmd>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d136      	bne.n	8005470 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005402:	21fe      	movs	r1, #254	@ 0xfe
 8005404:	68b8      	ldr	r0, [r7, #8]
 8005406:	f7ff fdbe 	bl	8004f86 <xmit_datablock>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02f      	beq.n	8005470 <USER_SPI_write+0xd8>
			count = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	e02c      	b.n	8005470 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005416:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <USER_SPI_write+0xf4>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f003 0306 	and.w	r3, r3, #6
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <USER_SPI_write+0x92>
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	2097      	movs	r0, #151	@ 0x97
 8005426:	f7ff fde0 	bl	8004fea <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	2019      	movs	r0, #25
 800542e:	f7ff fddc 	bl	8004fea <send_cmd>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11b      	bne.n	8005470 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005438:	21fc      	movs	r1, #252	@ 0xfc
 800543a:	68b8      	ldr	r0, [r7, #8]
 800543c:	f7ff fda3 	bl	8004f86 <xmit_datablock>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <USER_SPI_write+0xc4>
				buff += 512;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800544c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	3b01      	subs	r3, #1
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1ee      	bne.n	8005438 <USER_SPI_write+0xa0>
 800545a:	e000      	b.n	800545e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800545c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800545e:	21fd      	movs	r1, #253	@ 0xfd
 8005460:	2000      	movs	r0, #0
 8005462:	f7ff fd90 	bl	8004f86 <xmit_datablock>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <USER_SPI_write+0xd8>
 800546c:	2301      	movs	r3, #1
 800546e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005470:	f7ff fd38 	bl	8004ee4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf14      	ite	ne
 800547a:	2301      	movne	r3, #1
 800547c:	2300      	moveq	r3, #0
 800547e:	b2db      	uxtb	r3, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	2000002c 	.word	0x2000002c
 800548c:	20001620 	.word	0x20001620

08005490 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	@ 0x30
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	603a      	str	r2, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
 800549c:	460b      	mov	r3, r1
 800549e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <USER_SPI_ioctl+0x1a>
 80054a6:	2304      	movs	r3, #4
 80054a8:	e15a      	b.n	8005760 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80054aa:	4baf      	ldr	r3, [pc, #700]	@ (8005768 <USER_SPI_ioctl+0x2d8>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <USER_SPI_ioctl+0x2c>
 80054b8:	2303      	movs	r3, #3
 80054ba:	e151      	b.n	8005760 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80054c2:	79bb      	ldrb	r3, [r7, #6]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	f200 8136 	bhi.w	8005736 <USER_SPI_ioctl+0x2a6>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <USER_SPI_ioctl+0x40>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054e5 	.word	0x080054e5
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	08005737 	.word	0x08005737
 80054dc:	080055a5 	.word	0x080055a5
 80054e0:	0800569b 	.word	0x0800569b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80054e4:	f7ff fd0c 	bl	8004f00 <spiselect>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 8127 	beq.w	800573e <USER_SPI_ioctl+0x2ae>
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80054f6:	e122      	b.n	800573e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80054f8:	2100      	movs	r1, #0
 80054fa:	2009      	movs	r0, #9
 80054fc:	f7ff fd75 	bl	8004fea <send_cmd>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 811d 	bne.w	8005742 <USER_SPI_ioctl+0x2b2>
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	2110      	movs	r1, #16
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff fd10 	bl	8004f34 <rcvr_datablock>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8113 	beq.w	8005742 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800551c:	7b3b      	ldrb	r3, [r7, #12]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d111      	bne.n	800554a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005526:	7d7b      	ldrb	r3, [r7, #21]
 8005528:	461a      	mov	r2, r3
 800552a:	7d3b      	ldrb	r3, [r7, #20]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	4413      	add	r3, r2
 8005530:	461a      	mov	r2, r3
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800553a:	4413      	add	r3, r2
 800553c:	3301      	adds	r3, #1
 800553e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	029a      	lsls	r2, r3, #10
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e028      	b.n	800559c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800554a:	7c7b      	ldrb	r3, [r7, #17]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	b2da      	uxtb	r2, r3
 8005552:	7dbb      	ldrb	r3, [r7, #22]
 8005554:	09db      	lsrs	r3, r3, #7
 8005556:	b2db      	uxtb	r3, r3
 8005558:	4413      	add	r3, r2
 800555a:	b2da      	uxtb	r2, r3
 800555c:	7d7b      	ldrb	r3, [r7, #21]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0306 	and.w	r3, r3, #6
 8005566:	b2db      	uxtb	r3, r3
 8005568:	4413      	add	r3, r2
 800556a:	b2db      	uxtb	r3, r3
 800556c:	3302      	adds	r3, #2
 800556e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005572:	7d3b      	ldrb	r3, [r7, #20]
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	b2db      	uxtb	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	7cbb      	ldrb	r3, [r7, #18]
 8005582:	029b      	lsls	r3, r3, #10
 8005584:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005588:	4413      	add	r3, r2
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800558e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005592:	3b09      	subs	r3, #9
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	409a      	lsls	r2, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80055a2:	e0ce      	b.n	8005742 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80055a4:	4b71      	ldr	r3, [pc, #452]	@ (800576c <USER_SPI_ioctl+0x2dc>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d031      	beq.n	8005614 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80055b0:	2100      	movs	r1, #0
 80055b2:	208d      	movs	r0, #141	@ 0x8d
 80055b4:	f7ff fd19 	bl	8004fea <send_cmd>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f040 80c3 	bne.w	8005746 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80055c0:	20ff      	movs	r0, #255	@ 0xff
 80055c2:	f7ff fc1f 	bl	8004e04 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80055c6:	f107 030c 	add.w	r3, r7, #12
 80055ca:	2110      	movs	r1, #16
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fcb1 	bl	8004f34 <rcvr_datablock>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80b6 	beq.w	8005746 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80055da:	2330      	movs	r3, #48	@ 0x30
 80055dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80055e0:	e007      	b.n	80055f2 <USER_SPI_ioctl+0x162>
 80055e2:	20ff      	movs	r0, #255	@ 0xff
 80055e4:	f7ff fc0e 	bl	8004e04 <xchg_spi>
 80055e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ec:	3b01      	subs	r3, #1
 80055ee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80055f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f3      	bne.n	80055e2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80055fa:	7dbb      	ldrb	r3, [r7, #22]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	2310      	movs	r3, #16
 8005604:	fa03 f202 	lsl.w	r2, r3, r2
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005612:	e098      	b.n	8005746 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005614:	2100      	movs	r1, #0
 8005616:	2009      	movs	r0, #9
 8005618:	f7ff fce7 	bl	8004fea <send_cmd>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	f040 8091 	bne.w	8005746 <USER_SPI_ioctl+0x2b6>
 8005624:	f107 030c 	add.w	r3, r7, #12
 8005628:	2110      	movs	r1, #16
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fc82 	bl	8004f34 <rcvr_datablock>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8087 	beq.w	8005746 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005638:	4b4c      	ldr	r3, [pc, #304]	@ (800576c <USER_SPI_ioctl+0x2dc>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d012      	beq.n	800566a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005644:	7dbb      	ldrb	r3, [r7, #22]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800564c:	7dfa      	ldrb	r2, [r7, #23]
 800564e:	09d2      	lsrs	r2, r2, #7
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	4413      	add	r3, r2
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	7e7b      	ldrb	r3, [r7, #25]
 8005658:	099b      	lsrs	r3, r3, #6
 800565a:	b2db      	uxtb	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	461a      	mov	r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e013      	b.n	8005692 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800566a:	7dbb      	ldrb	r3, [r7, #22]
 800566c:	109b      	asrs	r3, r3, #2
 800566e:	b29b      	uxth	r3, r3
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	3301      	adds	r3, #1
 8005676:	7dfa      	ldrb	r2, [r7, #23]
 8005678:	00d2      	lsls	r2, r2, #3
 800567a:	f002 0218 	and.w	r2, r2, #24
 800567e:	7df9      	ldrb	r1, [r7, #23]
 8005680:	0949      	lsrs	r1, r1, #5
 8005682:	b2c9      	uxtb	r1, r1
 8005684:	440a      	add	r2, r1
 8005686:	3201      	adds	r2, #1
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	461a      	mov	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005698:	e055      	b.n	8005746 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800569a:	4b34      	ldr	r3, [pc, #208]	@ (800576c <USER_SPI_ioctl+0x2dc>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f003 0306 	and.w	r3, r3, #6
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d051      	beq.n	800574a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80056a6:	f107 020c 	add.w	r2, r7, #12
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	210b      	movs	r1, #11
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff feee 	bl	8005490 <USER_SPI_ioctl>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d149      	bne.n	800574e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80056ba:	7b3b      	ldrb	r3, [r7, #12]
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <USER_SPI_ioctl+0x23e>
 80056c4:	7dbb      	ldrb	r3, [r7, #22]
 80056c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d041      	beq.n	8005752 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80056de:	4b23      	ldr	r3, [pc, #140]	@ (800576c <USER_SPI_ioctl+0x2dc>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d105      	bne.n	80056f6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80056ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ec:	025b      	lsls	r3, r3, #9
 80056ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	025b      	lsls	r3, r3, #9
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80056f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056f8:	2020      	movs	r0, #32
 80056fa:	f7ff fc76 	bl	8004fea <send_cmd>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d128      	bne.n	8005756 <USER_SPI_ioctl+0x2c6>
 8005704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005706:	2021      	movs	r0, #33	@ 0x21
 8005708:	f7ff fc6f 	bl	8004fea <send_cmd>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d121      	bne.n	8005756 <USER_SPI_ioctl+0x2c6>
 8005712:	2100      	movs	r1, #0
 8005714:	2026      	movs	r0, #38	@ 0x26
 8005716:	f7ff fc68 	bl	8004fea <send_cmd>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11a      	bne.n	8005756 <USER_SPI_ioctl+0x2c6>
 8005720:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005724:	f7ff fbbb 	bl	8004e9e <wait_ready>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d013      	beq.n	8005756 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800572e:	2300      	movs	r3, #0
 8005730:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005734:	e00f      	b.n	8005756 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005736:	2304      	movs	r3, #4
 8005738:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800573c:	e00c      	b.n	8005758 <USER_SPI_ioctl+0x2c8>
		break;
 800573e:	bf00      	nop
 8005740:	e00a      	b.n	8005758 <USER_SPI_ioctl+0x2c8>
		break;
 8005742:	bf00      	nop
 8005744:	e008      	b.n	8005758 <USER_SPI_ioctl+0x2c8>
		break;
 8005746:	bf00      	nop
 8005748:	e006      	b.n	8005758 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800574a:	bf00      	nop
 800574c:	e004      	b.n	8005758 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800574e:	bf00      	nop
 8005750:	e002      	b.n	8005758 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <USER_SPI_ioctl+0x2c8>
		break;
 8005756:	bf00      	nop
	}

	despiselect();
 8005758:	f7ff fbc4 	bl	8004ee4 <despiselect>

	return res;
 800575c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005760:	4618      	mov	r0, r3
 8005762:	3730      	adds	r7, #48	@ 0x30
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	2000002c 	.word	0x2000002c
 800576c:	20001620 	.word	0x20001620

08005770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005770:	480d      	ldr	r0, [pc, #52]	@ (80057a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005772:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005774:	f7fe fbf4 	bl	8003f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005778:	480c      	ldr	r0, [pc, #48]	@ (80057ac <LoopForever+0x6>)
  ldr r1, =_edata
 800577a:	490d      	ldr	r1, [pc, #52]	@ (80057b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800577c:	4a0d      	ldr	r2, [pc, #52]	@ (80057b4 <LoopForever+0xe>)
  movs r3, #0
 800577e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005780:	e002      	b.n	8005788 <LoopCopyDataInit>

08005782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005786:	3304      	adds	r3, #4

08005788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800578a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800578c:	d3f9      	bcc.n	8005782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800578e:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005790:	4c0a      	ldr	r4, [pc, #40]	@ (80057bc <LoopForever+0x16>)
  movs r3, #0
 8005792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005794:	e001      	b.n	800579a <LoopFillZerobss>

08005796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005798:	3204      	adds	r2, #4

0800579a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800579a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800579c:	d3fb      	bcc.n	8005796 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800579e:	f00f fcd7 	bl	8015150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057a2:	f7fd f915 	bl	80029d0 <main>

080057a6 <LoopForever>:

LoopForever:
    b LoopForever
 80057a6:	e7fe      	b.n	80057a6 <LoopForever>
  ldr   r0, =_estack
 80057a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80057ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057b0:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80057b4:	0801ba44 	.word	0x0801ba44
  ldr r2, =_sbss
 80057b8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80057bc:	2000405c 	.word	0x2000405c

080057c0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057c0:	e7fe      	b.n	80057c0 <COMP1_2_3_IRQHandler>

080057c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057cc:	2003      	movs	r0, #3
 80057ce:	f001 fdb4 	bl	800733a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057d2:	200f      	movs	r0, #15
 80057d4:	f7fe f9f0 	bl	8003bb8 <HAL_InitTick>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	71fb      	strb	r3, [r7, #7]
 80057e2:	e001      	b.n	80057e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057e4:	f7fe f9be 	bl	8003b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057e8:	79fb      	ldrb	r3, [r7, #7]

}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057f8:	4b05      	ldr	r3, [pc, #20]	@ (8005810 <HAL_IncTick+0x1c>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_IncTick+0x20>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4413      	add	r3, r2
 8005802:	4a03      	ldr	r2, [pc, #12]	@ (8005810 <HAL_IncTick+0x1c>)
 8005804:	6013      	str	r3, [r2, #0]
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	2000162c 	.word	0x2000162c
 8005814:	20000034 	.word	0x20000034

08005818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return uwTick;
 800581c:	4b03      	ldr	r3, [pc, #12]	@ (800582c <HAL_GetTick+0x14>)
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	2000162c 	.word	0x2000162c

08005830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005838:	f7ff ffee 	bl	8005818 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d004      	beq.n	8005854 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800584a:	4b09      	ldr	r3, [pc, #36]	@ (8005870 <HAL_Delay+0x40>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005854:	bf00      	nop
 8005856:	f7ff ffdf 	bl	8005818 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	429a      	cmp	r2, r3
 8005864:	d8f7      	bhi.n	8005856 <HAL_Delay+0x26>
  {
  }
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000034 	.word	0x20000034

08005874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	609a      	str	r2, [r3, #8]
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	609a      	str	r2, [r3, #8]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3360      	adds	r3, #96	@ 0x60
 80058ee:	461a      	mov	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <LL_ADC_SetOffset+0x44>)
 80058fe:	4013      	ands	r3, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	03fff000 	.word	0x03fff000

08005924 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3360      	adds	r3, #96	@ 0x60
 8005932:	461a      	mov	r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3360      	adds	r3, #96	@ 0x60
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	431a      	orrs	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3360      	adds	r3, #96	@ 0x60
 8005996:	461a      	mov	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3360      	adds	r3, #96	@ 0x60
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	615a      	str	r2, [r3, #20]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b087      	sub	sp, #28
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3330      	adds	r3, #48	@ 0x30
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	0a1b      	lsrs	r3, r3, #8
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	f003 030c 	and.w	r3, r3, #12
 8005a5a:	4413      	add	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	211f      	movs	r1, #31
 8005a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	401a      	ands	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	0e9b      	lsrs	r3, r3, #26
 8005a76:	f003 011f 	and.w	r1, r3, #31
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f003 031f 	and.w	r3, r3, #31
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	431a      	orrs	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3314      	adds	r3, #20
 8005acc:	461a      	mov	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	0e5b      	lsrs	r3, r3, #25
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	4413      	add	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	0d1b      	lsrs	r3, r3, #20
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2107      	movs	r1, #7
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	401a      	ands	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	0d1b      	lsrs	r3, r3, #20
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	431a      	orrs	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	401a      	ands	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f003 0318 	and.w	r3, r3, #24
 8005b36:	4908      	ldr	r1, [pc, #32]	@ (8005b58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005b38:	40d9      	lsrs	r1, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	400b      	ands	r3, r1
 8005b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b42:	431a      	orrs	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	0007ffff 	.word	0x0007ffff

08005b5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 031f 	and.w	r3, r3, #31
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005ba4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6093      	str	r3, [r2, #8]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bcc:	d101      	bne.n	8005bd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bf4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c1c:	d101      	bne.n	8005c22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c44:	f043 0201 	orr.w	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <LL_ADC_IsEnabled+0x18>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <LL_ADC_IsEnabled+0x1a>
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c92:	f043 0204 	orr.w	r2, r3, #4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d101      	bne.n	8005cbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d101      	bne.n	8005ce4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b089      	sub	sp, #36	@ 0x24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e167      	b.n	8005fde <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fb fe03 	bl	8001928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff ff3f 	bl	8005bb8 <LL_ADC_IsDeepPowerDownEnabled>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ff25 	bl	8005b94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff ff5a 	bl	8005c08 <LL_ADC_IsInternalRegulatorEnabled>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d115      	bne.n	8005d86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ff3e 	bl	8005be0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d64:	4ba0      	ldr	r3, [pc, #640]	@ (8005fe8 <HAL_ADC_Init+0x2f4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	099b      	lsrs	r3, r3, #6
 8005d6a:	4aa0      	ldr	r2, [pc, #640]	@ (8005fec <HAL_ADC_Init+0x2f8>)
 8005d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d70:	099b      	lsrs	r3, r3, #6
 8005d72:	3301      	adds	r3, #1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d78:	e002      	b.n	8005d80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f9      	bne.n	8005d7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff ff3c 	bl	8005c08 <LL_ADC_IsInternalRegulatorEnabled>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9a:	f043 0210 	orr.w	r2, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da6:	f043 0201 	orr.w	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff ff75 	bl	8005ca6 <LL_ADC_REG_IsConversionOngoing>
 8005dbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 8100 	bne.w	8005fcc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 80fc 	bne.w	8005fcc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005ddc:	f043 0202 	orr.w	r2, r3, #2
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff ff35 	bl	8005c58 <LL_ADC_IsEnabled>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d111      	bne.n	8005e18 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005df4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005df8:	f7ff ff2e 	bl	8005c58 <LL_ADC_IsEnabled>
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	487c      	ldr	r0, [pc, #496]	@ (8005ff0 <HAL_ADC_Init+0x2fc>)
 8005e00:	f7ff ff2a 	bl	8005c58 <LL_ADC_IsEnabled>
 8005e04:	4603      	mov	r3, r0
 8005e06:	4323      	orrs	r3, r4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4619      	mov	r1, r3
 8005e12:	4878      	ldr	r0, [pc, #480]	@ (8005ff4 <HAL_ADC_Init+0x300>)
 8005e14:	f7ff fd2e 	bl	8005874 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	7f5b      	ldrb	r3, [r3, #29]
 8005e1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005e28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005e2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d106      	bne.n	8005e54 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	045b      	lsls	r3, r3, #17
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d009      	beq.n	8005e70 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	4b60      	ldr	r3, [pc, #384]	@ (8005ff8 <HAL_ADC_Init+0x304>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	69b9      	ldr	r1, [r7, #24]
 8005e80:	430b      	orrs	r3, r1
 8005e82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff ff14 	bl	8005ccc <LL_ADC_INJ_IsConversionOngoing>
 8005ea4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d16d      	bne.n	8005f88 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d16a      	bne.n	8005f88 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005eb6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ebe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ece:	f023 0302 	bic.w	r3, r3, #2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	69b9      	ldr	r1, [r7, #24]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d017      	beq.n	8005f14 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005ef2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005efc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6911      	ldr	r1, [r2, #16]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005f12:	e013      	b.n	8005f3c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005f22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d118      	bne.n	8005f78 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005f50:	f023 0304 	bic.w	r3, r3, #4
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f5c:	4311      	orrs	r1, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005f62:	4311      	orrs	r1, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	611a      	str	r2, [r3, #16]
 8005f76:	e007      	b.n	8005f88 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10c      	bne.n	8005faa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f96:	f023 010f 	bic.w	r1, r3, #15
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	1e5a      	subs	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fa8:	e007      	b.n	8005fba <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 020f 	bic.w	r2, r2, #15
 8005fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbe:	f023 0303 	bic.w	r3, r3, #3
 8005fc2:	f043 0201 	orr.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fca:	e007      	b.n	8005fdc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd0:	f043 0210 	orr.w	r2, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3724      	adds	r7, #36	@ 0x24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000028 	.word	0x20000028
 8005fec:	053e2d63 	.word	0x053e2d63
 8005ff0:	50000100 	.word	0x50000100
 8005ff4:	50000300 	.word	0x50000300
 8005ff8:	fff04007 	.word	0xfff04007

08005ffc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006008:	4851      	ldr	r0, [pc, #324]	@ (8006150 <HAL_ADC_Start_DMA+0x154>)
 800600a:	f7ff fda7 	bl	8005b5c <LL_ADC_GetMultimode>
 800600e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fe46 	bl	8005ca6 <LL_ADC_REG_IsConversionOngoing>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 808f 	bne.w	8006140 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_ADC_Start_DMA+0x34>
 800602c:	2302      	movs	r3, #2
 800602e:	e08a      	b.n	8006146 <HAL_ADC_Start_DMA+0x14a>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b05      	cmp	r3, #5
 8006042:	d002      	beq.n	800604a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b09      	cmp	r3, #9
 8006048:	d173      	bne.n	8006132 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 feb2 	bl	8006db4 <ADC_Enable>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d166      	bne.n	8006128 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a38      	ldr	r2, [pc, #224]	@ (8006154 <HAL_ADC_Start_DMA+0x158>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d002      	beq.n	800607e <HAL_ADC_Start_DMA+0x82>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	e001      	b.n	8006082 <HAL_ADC_Start_DMA+0x86>
 800607e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	4293      	cmp	r3, r2
 8006088:	d002      	beq.n	8006090 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d006      	beq.n	80060b6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ac:	f023 0206 	bic.w	r2, r3, #6
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80060b4:	e002      	b.n	80060bc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c0:	4a25      	ldr	r2, [pc, #148]	@ (8006158 <HAL_ADC_Start_DMA+0x15c>)
 80060c2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c8:	4a24      	ldr	r2, [pc, #144]	@ (800615c <HAL_ADC_Start_DMA+0x160>)
 80060ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d0:	4a23      	ldr	r2, [pc, #140]	@ (8006160 <HAL_ADC_Start_DMA+0x164>)
 80060d2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	221c      	movs	r2, #28
 80060da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0210 	orr.w	r2, r2, #16
 80060f2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3340      	adds	r3, #64	@ 0x40
 800610e:	4619      	mov	r1, r3
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f001 f9ec 	bl	80074f0 <HAL_DMA_Start_IT>
 8006118:	4603      	mov	r3, r0
 800611a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fdac 	bl	8005c7e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006126:	e00d      	b.n	8006144 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006130:	e008      	b.n	8006144 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800613e:	e001      	b.n	8006144 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006140:	2302      	movs	r3, #2
 8006142:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	50000300 	.word	0x50000300
 8006154:	50000100 	.word	0x50000100
 8006158:	08006ec1 	.word	0x08006ec1
 800615c:	08006f99 	.word	0x08006f99
 8006160:	08006fb5 	.word	0x08006fb5

08006164 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	@ 0x28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800616c:	2300      	movs	r3, #0
 800616e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006180:	4883      	ldr	r0, [pc, #524]	@ (8006390 <HAL_ADC_IRQHandler+0x22c>)
 8006182:	f7ff fceb 	bl	8005b5c <LL_ADC_GetMultimode>
 8006186:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d017      	beq.n	80061c2 <HAL_ADC_IRQHandler+0x5e>
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ac:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 ff65 	bl	8007084 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2202      	movs	r2, #2
 80061c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <HAL_ADC_IRQHandler+0x72>
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10a      	bne.n	80061ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8085 	beq.w	80062ec <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d07f      	beq.n	80062ec <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d105      	bne.n	8006204 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fc05 	bl	8005a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d064      	beq.n	80062de <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a5e      	ldr	r2, [pc, #376]	@ (8006394 <HAL_ADC_IRQHandler+0x230>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d002      	beq.n	8006224 <HAL_ADC_IRQHandler+0xc0>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	e001      	b.n	8006228 <HAL_ADC_IRQHandler+0xc4>
 8006224:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	4293      	cmp	r3, r2
 800622e:	d008      	beq.n	8006242 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b05      	cmp	r3, #5
 800623a:	d002      	beq.n	8006242 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b09      	cmp	r3, #9
 8006240:	d104      	bne.n	800624c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	623b      	str	r3, [r7, #32]
 800624a:	e00d      	b.n	8006268 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a50      	ldr	r2, [pc, #320]	@ (8006394 <HAL_ADC_IRQHandler+0x230>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d002      	beq.n	800625c <HAL_ADC_IRQHandler+0xf8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	e001      	b.n	8006260 <HAL_ADC_IRQHandler+0xfc>
 800625c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006260:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d135      	bne.n	80062de <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b08      	cmp	r3, #8
 800627e:	d12e      	bne.n	80062de <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fd0e 	bl	8005ca6 <LL_ADC_REG_IsConversionOngoing>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d11a      	bne.n	80062c6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 020c 	bic.w	r2, r2, #12
 800629e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d112      	bne.n	80062de <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062bc:	f043 0201 	orr.w	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80062c4:	e00b      	b.n	80062de <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ca:	f043 0210 	orr.w	r2, r3, #16
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d6:	f043 0201 	orr.w	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fb fbae 	bl	8001a40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	220c      	movs	r2, #12
 80062ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <HAL_ADC_IRQHandler+0x19c>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 809e 	beq.w	8006448 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8098 	beq.w	8006448 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	d105      	bne.n	8006330 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006328:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fbae 	bl	8005a96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800633a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fb69 	bl	8005a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006346:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a11      	ldr	r2, [pc, #68]	@ (8006394 <HAL_ADC_IRQHandler+0x230>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d002      	beq.n	8006358 <HAL_ADC_IRQHandler+0x1f4>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	e001      	b.n	800635c <HAL_ADC_IRQHandler+0x1f8>
 8006358:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	4293      	cmp	r3, r2
 8006362:	d008      	beq.n	8006376 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b06      	cmp	r3, #6
 800636e:	d002      	beq.n	8006376 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b07      	cmp	r3, #7
 8006374:	d104      	bne.n	8006380 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	623b      	str	r3, [r7, #32]
 800637e:	e011      	b.n	80063a4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a03      	ldr	r2, [pc, #12]	@ (8006394 <HAL_ADC_IRQHandler+0x230>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d006      	beq.n	8006398 <HAL_ADC_IRQHandler+0x234>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	e005      	b.n	800639c <HAL_ADC_IRQHandler+0x238>
 8006390:	50000300 	.word	0x50000300
 8006394:	50000100 	.word	0x50000100
 8006398:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800639c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d047      	beq.n	800643a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d007      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x260>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d03f      	beq.n	800643a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d13a      	bne.n	800643a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ce:	2b40      	cmp	r3, #64	@ 0x40
 80063d0:	d133      	bne.n	800643a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d12e      	bne.n	800643a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fc73 	bl	8005ccc <LL_ADC_INJ_IsConversionOngoing>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11a      	bne.n	8006422 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063fa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006400:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d112      	bne.n	800643a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006418:	f043 0201 	orr.w	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006420:	e00b      	b.n	800643a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006426:	f043 0210 	orr.w	r2, r3, #16
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006432:	f043 0201 	orr.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fdfa 	bl	8007034 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2260      	movs	r2, #96	@ 0x60
 8006446:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644e:	2b00      	cmp	r3, #0
 8006450:	d011      	beq.n	8006476 <HAL_ADC_IRQHandler+0x312>
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00c      	beq.n	8006476 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006460:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f89f 	bl	80065ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2280      	movs	r2, #128	@ 0x80
 8006474:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d012      	beq.n	80064a6 <HAL_ADC_IRQHandler+0x342>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00d      	beq.n	80064a6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800648e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fde0 	bl	800705c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d012      	beq.n	80064d6 <HAL_ADC_IRQHandler+0x372>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00d      	beq.n	80064d6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fdd2 	bl	8007070 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d036      	beq.n	800654e <HAL_ADC_IRQHandler+0x3ea>
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d031      	beq.n	800654e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80064f2:	2301      	movs	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f6:	e014      	b.n	8006522 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80064fe:	4825      	ldr	r0, [pc, #148]	@ (8006594 <HAL_ADC_IRQHandler+0x430>)
 8006500:	f7ff fb3a 	bl	8005b78 <LL_ADC_GetMultiDMATransfer>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800650a:	2301      	movs	r3, #1
 800650c:	627b      	str	r3, [r7, #36]	@ 0x24
 800650e:	e008      	b.n	8006522 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800651e:	2301      	movs	r3, #1
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	2b01      	cmp	r3, #1
 8006526:	d10e      	bne.n	8006546 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006538:	f043 0202 	orr.w	r2, r3, #2
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f83d 	bl	80065c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2210      	movs	r2, #16
 800654c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006554:	2b00      	cmp	r3, #0
 8006556:	d018      	beq.n	800658a <HAL_ADC_IRQHandler+0x426>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800655e:	2b00      	cmp	r3, #0
 8006560:	d013      	beq.n	800658a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006566:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006572:	f043 0208 	orr.w	r2, r3, #8
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006582:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fd5f 	bl	8007048 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800658a:	bf00      	nop
 800658c:	3728      	adds	r7, #40	@ 0x28
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	50000300 	.word	0x50000300

08006598 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b0b6      	sub	sp, #216	@ 0xd8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_ADC_ConfigChannel+0x22>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e3c8      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x7b4>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fb4f 	bl	8005ca6 <LL_ADC_REG_IsConversionOngoing>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	f040 83ad 	bne.w	8006d6a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6859      	ldr	r1, [r3, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	f7ff fa0e 	bl	8005a3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fb3d 	bl	8005ca6 <LL_ADC_REG_IsConversionOngoing>
 800662c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fb49 	bl	8005ccc <LL_ADC_INJ_IsConversionOngoing>
 800663a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800663e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 81d9 	bne.w	80069fa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800664c:	2b00      	cmp	r3, #0
 800664e:	f040 81d4 	bne.w	80069fa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800665a:	d10f      	bne.n	800667c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2200      	movs	r2, #0
 8006666:	4619      	mov	r1, r3
 8006668:	f7ff fa28 	bl	8005abc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff f9bc 	bl	80059f2 <LL_ADC_SetSamplingTimeCommonConfig>
 800667a:	e00e      	b.n	800669a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	461a      	mov	r2, r3
 800668a:	f7ff fa17 	bl	8005abc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff f9ac 	bl	80059f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695a      	ldr	r2, [r3, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	08db      	lsrs	r3, r3, #3
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d022      	beq.n	8006702 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	6919      	ldr	r1, [r3, #16]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066cc:	f7ff f906 	bl	80058dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	6919      	ldr	r1, [r3, #16]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	461a      	mov	r2, r3
 80066de:	f7ff f952 	bl	8005986 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d102      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x124>
 80066f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066f6:	e000      	b.n	80066fa <HAL_ADC_ConfigChannel+0x126>
 80066f8:	2300      	movs	r3, #0
 80066fa:	461a      	mov	r2, r3
 80066fc:	f7ff f95e 	bl	80059bc <LL_ADC_SetOffsetSaturation>
 8006700:	e17b      	b.n	80069fa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff f90b 	bl	8005924 <LL_ADC_GetOffsetChannel>
 800670e:	4603      	mov	r3, r0
 8006710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <HAL_ADC_ConfigChannel+0x15a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff f900 	bl	8005924 <LL_ADC_GetOffsetChannel>
 8006724:	4603      	mov	r3, r0
 8006726:	0e9b      	lsrs	r3, r3, #26
 8006728:	f003 021f 	and.w	r2, r3, #31
 800672c:	e01e      	b.n	800676c <HAL_ADC_ConfigChannel+0x198>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2100      	movs	r1, #0
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff f8f5 	bl	8005924 <LL_ADC_GetOffsetChannel>
 800673a:	4603      	mov	r3, r0
 800673c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006740:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006744:	fa93 f3a3 	rbit	r3, r3
 8006748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800674c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800675c:	2320      	movs	r3, #32
 800675e:	e004      	b.n	800676a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006760:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006764:	fab3 f383 	clz	r3, r3
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006774:	2b00      	cmp	r3, #0
 8006776:	d105      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x1b0>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	0e9b      	lsrs	r3, r3, #26
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	e018      	b.n	80067b6 <HAL_ADC_ConfigChannel+0x1e2>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006790:	fa93 f3a3 	rbit	r3, r3
 8006794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800679c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80067a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80067a8:	2320      	movs	r3, #32
 80067aa:	e004      	b.n	80067b6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80067ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067b0:	fab3 f383 	clz	r3, r3
 80067b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d106      	bne.n	80067c8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff f8c4 	bl	8005950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff f8a8 	bl	8005924 <LL_ADC_GetOffsetChannel>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x220>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2101      	movs	r1, #1
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff f89d 	bl	8005924 <LL_ADC_GetOffsetChannel>
 80067ea:	4603      	mov	r3, r0
 80067ec:	0e9b      	lsrs	r3, r3, #26
 80067ee:	f003 021f 	and.w	r2, r3, #31
 80067f2:	e01e      	b.n	8006832 <HAL_ADC_ConfigChannel+0x25e>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2101      	movs	r1, #1
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff f892 	bl	8005924 <LL_ADC_GetOffsetChannel>
 8006800:	4603      	mov	r3, r0
 8006802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800680a:	fa93 f3a3 	rbit	r3, r3
 800680e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800681a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006822:	2320      	movs	r3, #32
 8006824:	e004      	b.n	8006830 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800682a:	fab3 f383 	clz	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <HAL_ADC_ConfigChannel+0x276>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	0e9b      	lsrs	r3, r3, #26
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	e018      	b.n	800687c <HAL_ADC_ConfigChannel+0x2a8>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006852:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006856:	fa93 f3a3 	rbit	r3, r3
 800685a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800685e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006866:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800686e:	2320      	movs	r3, #32
 8006870:	e004      	b.n	800687c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006872:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006876:	fab3 f383 	clz	r3, r3
 800687a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800687c:	429a      	cmp	r2, r3
 800687e:	d106      	bne.n	800688e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2200      	movs	r2, #0
 8006886:	2101      	movs	r1, #1
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff f861 	bl	8005950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2102      	movs	r1, #2
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff f845 	bl	8005924 <LL_ADC_GetOffsetChannel>
 800689a:	4603      	mov	r3, r0
 800689c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <HAL_ADC_ConfigChannel+0x2e6>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2102      	movs	r1, #2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff f83a 	bl	8005924 <LL_ADC_GetOffsetChannel>
 80068b0:	4603      	mov	r3, r0
 80068b2:	0e9b      	lsrs	r3, r3, #26
 80068b4:	f003 021f 	and.w	r2, r3, #31
 80068b8:	e01e      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x324>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2102      	movs	r1, #2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff f82f 	bl	8005924 <LL_ADC_GetOffsetChannel>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068d0:	fa93 f3a3 	rbit	r3, r3
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80068d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80068e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80068e8:	2320      	movs	r3, #32
 80068ea:	e004      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80068ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068f0:	fab3 f383 	clz	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_ADC_ConfigChannel+0x33c>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	0e9b      	lsrs	r3, r3, #26
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	e016      	b.n	800693e <HAL_ADC_ConfigChannel+0x36a>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800691c:	fa93 f3a3 	rbit	r3, r3
 8006920:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006922:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006930:	2320      	movs	r3, #32
 8006932:	e004      	b.n	800693e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006938:	fab3 f383 	clz	r3, r3
 800693c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800693e:	429a      	cmp	r2, r3
 8006940:	d106      	bne.n	8006950 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2200      	movs	r2, #0
 8006948:	2102      	movs	r1, #2
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff f800 	bl	8005950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2103      	movs	r1, #3
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe ffe4 	bl	8005924 <LL_ADC_GetOffsetChannel>
 800695c:	4603      	mov	r3, r0
 800695e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <HAL_ADC_ConfigChannel+0x3a8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2103      	movs	r1, #3
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe ffd9 	bl	8005924 <LL_ADC_GetOffsetChannel>
 8006972:	4603      	mov	r3, r0
 8006974:	0e9b      	lsrs	r3, r3, #26
 8006976:	f003 021f 	and.w	r2, r3, #31
 800697a:	e017      	b.n	80069ac <HAL_ADC_ConfigChannel+0x3d8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2103      	movs	r1, #3
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe ffce 	bl	8005924 <LL_ADC_GetOffsetChannel>
 8006988:	4603      	mov	r3, r0
 800698a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800698c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800698e:	fa93 f3a3 	rbit	r3, r3
 8006992:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006994:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006996:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800699e:	2320      	movs	r3, #32
 80069a0:	e003      	b.n	80069aa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80069a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a4:	fab3 f383 	clz	r3, r3
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d105      	bne.n	80069c4 <HAL_ADC_ConfigChannel+0x3f0>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	0e9b      	lsrs	r3, r3, #26
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	e011      	b.n	80069e8 <HAL_ADC_ConfigChannel+0x414>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069cc:	fa93 f3a3 	rbit	r3, r3
 80069d0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80069d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80069d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80069dc:	2320      	movs	r3, #32
 80069de:	e003      	b.n	80069e8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80069e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e2:	fab3 f383 	clz	r3, r3
 80069e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d106      	bne.n	80069fa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2103      	movs	r1, #3
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe ffab 	bl	8005950 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff f92a 	bl	8005c58 <LL_ADC_IsEnabled>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f040 8140 	bne.w	8006c8c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f7ff f87b 	bl	8005b14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4a8f      	ldr	r2, [pc, #572]	@ (8006c60 <HAL_ADC_ConfigChannel+0x68c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	f040 8131 	bne.w	8006c8c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <HAL_ADC_ConfigChannel+0x47e>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	0e9b      	lsrs	r3, r3, #26
 8006a40:	3301      	adds	r3, #1
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2b09      	cmp	r3, #9
 8006a48:	bf94      	ite	ls
 8006a4a:	2301      	movls	r3, #1
 8006a4c:	2300      	movhi	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	e019      	b.n	8006a86 <HAL_ADC_ConfigChannel+0x4b2>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a5a:	fa93 f3a3 	rbit	r3, r3
 8006a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a62:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006a64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006a6a:	2320      	movs	r3, #32
 8006a6c:	e003      	b.n	8006a76 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a70:	fab3 f383 	clz	r3, r3
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	3301      	adds	r3, #1
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	bf94      	ite	ls
 8006a80:	2301      	movls	r3, #1
 8006a82:	2300      	movhi	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d079      	beq.n	8006b7e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x4d2>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	0e9b      	lsrs	r3, r3, #26
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	069b      	lsls	r3, r3, #26
 8006aa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006aa4:	e015      	b.n	8006ad2 <HAL_ADC_ConfigChannel+0x4fe>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aae:	fa93 f3a3 	rbit	r3, r3
 8006ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006abe:	2320      	movs	r3, #32
 8006ac0:	e003      	b.n	8006aca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac4:	fab3 f383 	clz	r3, r3
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	3301      	adds	r3, #1
 8006acc:	069b      	lsls	r3, r3, #26
 8006ace:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d109      	bne.n	8006af2 <HAL_ADC_ConfigChannel+0x51e>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	0e9b      	lsrs	r3, r3, #26
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	2101      	movs	r1, #1
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	e017      	b.n	8006b22 <HAL_ADC_ConfigChannel+0x54e>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006afa:	fa93 f3a3 	rbit	r3, r3
 8006afe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006b0a:	2320      	movs	r3, #32
 8006b0c:	e003      	b.n	8006b16 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b10:	fab3 f383 	clz	r3, r3
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	3301      	adds	r3, #1
 8006b18:	f003 031f 	and.w	r3, r3, #31
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b22:	ea42 0103 	orr.w	r1, r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <HAL_ADC_ConfigChannel+0x574>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	0e9b      	lsrs	r3, r3, #26
 8006b38:	3301      	adds	r3, #1
 8006b3a:	f003 021f 	and.w	r2, r3, #31
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	051b      	lsls	r3, r3, #20
 8006b46:	e018      	b.n	8006b7a <HAL_ADC_ConfigChannel+0x5a6>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b50:	fa93 f3a3 	rbit	r3, r3
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006b60:	2320      	movs	r3, #32
 8006b62:	e003      	b.n	8006b6c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b66:	fab3 f383 	clz	r3, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f003 021f 	and.w	r2, r3, #31
 8006b72:	4613      	mov	r3, r2
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	4413      	add	r3, r2
 8006b78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	e081      	b.n	8006c82 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d107      	bne.n	8006b9a <HAL_ADC_ConfigChannel+0x5c6>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	0e9b      	lsrs	r3, r3, #26
 8006b90:	3301      	adds	r3, #1
 8006b92:	069b      	lsls	r3, r3, #26
 8006b94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b98:	e015      	b.n	8006bc6 <HAL_ADC_ConfigChannel+0x5f2>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba2:	fa93 f3a3 	rbit	r3, r3
 8006ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006baa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006bb2:	2320      	movs	r3, #32
 8006bb4:	e003      	b.n	8006bbe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	fab3 f383 	clz	r3, r3
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	069b      	lsls	r3, r3, #26
 8006bc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <HAL_ADC_ConfigChannel+0x612>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	0e9b      	lsrs	r3, r3, #26
 8006bd8:	3301      	adds	r3, #1
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	2101      	movs	r1, #1
 8006be0:	fa01 f303 	lsl.w	r3, r1, r3
 8006be4:	e017      	b.n	8006c16 <HAL_ADC_ConfigChannel+0x642>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	fa93 f3a3 	rbit	r3, r3
 8006bf2:	61fb      	str	r3, [r7, #28]
  return result;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006bfe:	2320      	movs	r3, #32
 8006c00:	e003      	b.n	8006c0a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	fab3 f383 	clz	r3, r3
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	f003 031f 	and.w	r3, r3, #31
 8006c10:	2101      	movs	r1, #1
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	ea42 0103 	orr.w	r1, r2, r3
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10d      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x66e>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	0e9b      	lsrs	r3, r3, #26
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f003 021f 	and.w	r2, r3, #31
 8006c32:	4613      	mov	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4413      	add	r3, r2
 8006c38:	3b1e      	subs	r3, #30
 8006c3a:	051b      	lsls	r3, r3, #20
 8006c3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006c40:	e01e      	b.n	8006c80 <HAL_ADC_ConfigChannel+0x6ac>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	fa93 f3a3 	rbit	r3, r3
 8006c4e:	613b      	str	r3, [r7, #16]
  return result;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006c5a:	2320      	movs	r3, #32
 8006c5c:	e006      	b.n	8006c6c <HAL_ADC_ConfigChannel+0x698>
 8006c5e:	bf00      	nop
 8006c60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	fab3 f383 	clz	r3, r3
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	f003 021f 	and.w	r2, r3, #31
 8006c72:	4613      	mov	r3, r2
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	4413      	add	r3, r2
 8006c78:	3b1e      	subs	r3, #30
 8006c7a:	051b      	lsls	r3, r3, #20
 8006c7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c86:	4619      	mov	r1, r3
 8006c88:	f7fe ff18 	bl	8005abc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4b3f      	ldr	r3, [pc, #252]	@ (8006d90 <HAL_ADC_ConfigChannel+0x7bc>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d071      	beq.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c98:	483e      	ldr	r0, [pc, #248]	@ (8006d94 <HAL_ADC_ConfigChannel+0x7c0>)
 8006c9a:	f7fe fe11 	bl	80058c0 <LL_ADC_GetCommonPathInternalCh>
 8006c9e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8006d98 <HAL_ADC_ConfigChannel+0x7c4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <HAL_ADC_ConfigChannel+0x6e2>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8006d9c <HAL_ADC_ConfigChannel+0x7c8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d127      	bne.n	8006d06 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d121      	bne.n	8006d06 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cca:	d157      	bne.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	482f      	ldr	r0, [pc, #188]	@ (8006d94 <HAL_ADC_ConfigChannel+0x7c0>)
 8006cd8:	f7fe fddf 	bl	800589a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006cdc:	4b30      	ldr	r3, [pc, #192]	@ (8006da0 <HAL_ADC_ConfigChannel+0x7cc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	099b      	lsrs	r3, r3, #6
 8006ce2:	4a30      	ldr	r2, [pc, #192]	@ (8006da4 <HAL_ADC_ConfigChannel+0x7d0>)
 8006ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce8:	099b      	lsrs	r3, r3, #6
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	4613      	mov	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006cf6:	e002      	b.n	8006cfe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f9      	bne.n	8006cf8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d04:	e03a      	b.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a27      	ldr	r2, [pc, #156]	@ (8006da8 <HAL_ADC_ConfigChannel+0x7d4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d113      	bne.n	8006d38 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a22      	ldr	r2, [pc, #136]	@ (8006dac <HAL_ADC_ConfigChannel+0x7d8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d02a      	beq.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4818      	ldr	r0, [pc, #96]	@ (8006d94 <HAL_ADC_ConfigChannel+0x7c0>)
 8006d32:	f7fe fdb2 	bl	800589a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d36:	e021      	b.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006db0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d11c      	bne.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d116      	bne.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a16      	ldr	r2, [pc, #88]	@ (8006dac <HAL_ADC_ConfigChannel+0x7d8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d011      	beq.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d60:	4619      	mov	r1, r3
 8006d62:	480c      	ldr	r0, [pc, #48]	@ (8006d94 <HAL_ADC_ConfigChannel+0x7c0>)
 8006d64:	f7fe fd99 	bl	800589a <LL_ADC_SetCommonPathInternalCh>
 8006d68:	e008      	b.n	8006d7c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d6e:	f043 0220 	orr.w	r2, r3, #32
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006d84:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	37d8      	adds	r7, #216	@ 0xd8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	80080000 	.word	0x80080000
 8006d94:	50000300 	.word	0x50000300
 8006d98:	c3210000 	.word	0xc3210000
 8006d9c:	90c00010 	.word	0x90c00010
 8006da0:	20000028 	.word	0x20000028
 8006da4:	053e2d63 	.word	0x053e2d63
 8006da8:	c7520000 	.word	0xc7520000
 8006dac:	50000100 	.word	0x50000100
 8006db0:	cb840000 	.word	0xcb840000

08006db4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe ff47 	bl	8005c58 <LL_ADC_IsEnabled>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d169      	bne.n	8006ea4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	4b36      	ldr	r3, [pc, #216]	@ (8006eb0 <ADC_Enable+0xfc>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00d      	beq.n	8006dfa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006de2:	f043 0210 	orr.w	r2, r3, #16
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dee:	f043 0201 	orr.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e055      	b.n	8006ea6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe ff16 	bl	8005c30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006e04:	482b      	ldr	r0, [pc, #172]	@ (8006eb4 <ADC_Enable+0x100>)
 8006e06:	f7fe fd5b 	bl	80058c0 <LL_ADC_GetCommonPathInternalCh>
 8006e0a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d013      	beq.n	8006e3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e14:	4b28      	ldr	r3, [pc, #160]	@ (8006eb8 <ADC_Enable+0x104>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	099b      	lsrs	r3, r3, #6
 8006e1a:	4a28      	ldr	r2, [pc, #160]	@ (8006ebc <ADC_Enable+0x108>)
 8006e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e20:	099b      	lsrs	r3, r3, #6
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	4613      	mov	r3, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006e2e:	e002      	b.n	8006e36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f9      	bne.n	8006e30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006e3c:	f7fe fcec 	bl	8005818 <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e42:	e028      	b.n	8006e96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe ff05 	bl	8005c58 <LL_ADC_IsEnabled>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fee9 	bl	8005c30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e5e:	f7fe fcdb 	bl	8005818 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d914      	bls.n	8006e96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d00d      	beq.n	8006e96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e7e:	f043 0210 	orr.w	r2, r3, #16
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e8a:	f043 0201 	orr.w	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e007      	b.n	8006ea6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d1cf      	bne.n	8006e44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	8000003f 	.word	0x8000003f
 8006eb4:	50000300 	.word	0x50000300
 8006eb8:	20000028 	.word	0x20000028
 8006ebc:	053e2d63 	.word	0x053e2d63

08006ec0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d14b      	bne.n	8006f72 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ede:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d021      	beq.n	8006f38 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe fd8d 	bl	8005a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d032      	beq.n	8006f6a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d12b      	bne.n	8006f6a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d11f      	bne.n	8006f6a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2e:	f043 0201 	orr.w	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f36:	e018      	b.n	8006f6a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d111      	bne.n	8006f6a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d105      	bne.n	8006f6a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f62:	f043 0201 	orr.w	r2, r3, #1
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7fa fd68 	bl	8001a40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f70:	e00e      	b.n	8006f90 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff fb1e 	bl	80065c0 <HAL_ADC_ErrorCallback>
}
 8006f84:	e004      	b.n	8006f90 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
}
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff faf6 	bl	8006598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fd2:	f043 0204 	orr.w	r2, r3, #4
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff faf0 	bl	80065c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <LL_ADC_IsEnabled>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <LL_ADC_IsEnabled+0x18>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <LL_ADC_IsEnabled+0x1a>
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <LL_ADC_REG_IsConversionOngoing>:
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b04      	cmp	r3, #4
 8007020:	d101      	bne.n	8007026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007098:	b590      	push	{r4, r7, lr}
 800709a:	b0a1      	sub	sp, #132	@ 0x84
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e08b      	b.n	80071ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80070be:	2300      	movs	r3, #0
 80070c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80070c2:	2300      	movs	r3, #0
 80070c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070ce:	d102      	bne.n	80070d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80070d0:	4b41      	ldr	r3, [pc, #260]	@ (80071d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	e001      	b.n	80070da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10b      	bne.n	80070f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e4:	f043 0220 	orr.w	r2, r3, #32
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e06a      	b.n	80071ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff ff87 	bl	800700e <LL_ADC_REG_IsConversionOngoing>
 8007100:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff ff81 	bl	800700e <LL_ADC_REG_IsConversionOngoing>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d14c      	bne.n	80071ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007112:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007114:	2b00      	cmp	r3, #0
 8007116:	d149      	bne.n	80071ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007118:	4b30      	ldr	r3, [pc, #192]	@ (80071dc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800711a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d028      	beq.n	8007176 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6859      	ldr	r1, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007136:	035b      	lsls	r3, r3, #13
 8007138:	430b      	orrs	r3, r1
 800713a:	431a      	orrs	r2, r3
 800713c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800713e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007140:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007144:	f7ff ff50 	bl	8006fe8 <LL_ADC_IsEnabled>
 8007148:	4604      	mov	r4, r0
 800714a:	4823      	ldr	r0, [pc, #140]	@ (80071d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800714c:	f7ff ff4c 	bl	8006fe8 <LL_ADC_IsEnabled>
 8007150:	4603      	mov	r3, r0
 8007152:	4323      	orrs	r3, r4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d133      	bne.n	80071c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007160:	f023 030f 	bic.w	r3, r3, #15
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	6811      	ldr	r1, [r2, #0]
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	6892      	ldr	r2, [r2, #8]
 800716c:	430a      	orrs	r2, r1
 800716e:	431a      	orrs	r2, r3
 8007170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007172:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007174:	e024      	b.n	80071c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800717e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007180:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007182:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007186:	f7ff ff2f 	bl	8006fe8 <LL_ADC_IsEnabled>
 800718a:	4604      	mov	r4, r0
 800718c:	4812      	ldr	r0, [pc, #72]	@ (80071d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800718e:	f7ff ff2b 	bl	8006fe8 <LL_ADC_IsEnabled>
 8007192:	4603      	mov	r3, r0
 8007194:	4323      	orrs	r3, r4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d112      	bne.n	80071c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800719a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80071a2:	f023 030f 	bic.w	r3, r3, #15
 80071a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80071a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80071aa:	e009      	b.n	80071c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b0:	f043 0220 	orr.w	r2, r3, #32
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80071be:	e000      	b.n	80071c2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80071c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80071ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3784      	adds	r7, #132	@ 0x84
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd90      	pop	{r4, r7, pc}
 80071d6:	bf00      	nop
 80071d8:	50000100 	.word	0x50000100
 80071dc:	50000300 	.word	0x50000300

080071e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007224 <__NVIC_SetPriorityGrouping+0x44>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80071fc:	4013      	ands	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800720c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007212:	4a04      	ldr	r2, [pc, #16]	@ (8007224 <__NVIC_SetPriorityGrouping+0x44>)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	60d3      	str	r3, [r2, #12]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	e000ed00 	.word	0xe000ed00

08007228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800722c:	4b04      	ldr	r3, [pc, #16]	@ (8007240 <__NVIC_GetPriorityGrouping+0x18>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	f003 0307 	and.w	r3, r3, #7
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	e000ed00 	.word	0xe000ed00

08007244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800724e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007252:	2b00      	cmp	r3, #0
 8007254:	db0b      	blt.n	800726e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	f003 021f 	and.w	r2, r3, #31
 800725c:	4907      	ldr	r1, [pc, #28]	@ (800727c <__NVIC_EnableIRQ+0x38>)
 800725e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	2001      	movs	r0, #1
 8007266:	fa00 f202 	lsl.w	r2, r0, r2
 800726a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	e000e100 	.word	0xe000e100

08007280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	6039      	str	r1, [r7, #0]
 800728a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800728c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007290:	2b00      	cmp	r3, #0
 8007292:	db0a      	blt.n	80072aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	b2da      	uxtb	r2, r3
 8007298:	490c      	ldr	r1, [pc, #48]	@ (80072cc <__NVIC_SetPriority+0x4c>)
 800729a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729e:	0112      	lsls	r2, r2, #4
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	440b      	add	r3, r1
 80072a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072a8:	e00a      	b.n	80072c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	4908      	ldr	r1, [pc, #32]	@ (80072d0 <__NVIC_SetPriority+0x50>)
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	3b04      	subs	r3, #4
 80072b8:	0112      	lsls	r2, r2, #4
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	440b      	add	r3, r1
 80072be:	761a      	strb	r2, [r3, #24]
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	e000e100 	.word	0xe000e100
 80072d0:	e000ed00 	.word	0xe000ed00

080072d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b089      	sub	sp, #36	@ 0x24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	f1c3 0307 	rsb	r3, r3, #7
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	bf28      	it	cs
 80072f2:	2304      	movcs	r3, #4
 80072f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	3304      	adds	r3, #4
 80072fa:	2b06      	cmp	r3, #6
 80072fc:	d902      	bls.n	8007304 <NVIC_EncodePriority+0x30>
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	3b03      	subs	r3, #3
 8007302:	e000      	b.n	8007306 <NVIC_EncodePriority+0x32>
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007308:	f04f 32ff 	mov.w	r2, #4294967295
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	43da      	mvns	r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	401a      	ands	r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800731c:	f04f 31ff 	mov.w	r1, #4294967295
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	fa01 f303 	lsl.w	r3, r1, r3
 8007326:	43d9      	mvns	r1, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800732c:	4313      	orrs	r3, r2
         );
}
 800732e:	4618      	mov	r0, r3
 8007330:	3724      	adds	r7, #36	@ 0x24
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff ff4c 	bl	80071e0 <__NVIC_SetPriorityGrouping>
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800735e:	f7ff ff63 	bl	8007228 <__NVIC_GetPriorityGrouping>
 8007362:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	6978      	ldr	r0, [r7, #20]
 800736a:	f7ff ffb3 	bl	80072d4 <NVIC_EncodePriority>
 800736e:	4602      	mov	r2, r0
 8007370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff ff82 	bl	8007280 <__NVIC_SetPriority>
}
 800737c:	bf00      	nop
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800738e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff ff56 	bl	8007244 <__NVIC_EnableIRQ>
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e08d      	b.n	80074ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	4b47      	ldr	r3, [pc, #284]	@ (80074d8 <HAL_DMA_Init+0x138>)
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d80f      	bhi.n	80073de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	4b45      	ldr	r3, [pc, #276]	@ (80074dc <HAL_DMA_Init+0x13c>)
 80073c6:	4413      	add	r3, r2
 80073c8:	4a45      	ldr	r2, [pc, #276]	@ (80074e0 <HAL_DMA_Init+0x140>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	091b      	lsrs	r3, r3, #4
 80073d0:	009a      	lsls	r2, r3, #2
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a42      	ldr	r2, [pc, #264]	@ (80074e4 <HAL_DMA_Init+0x144>)
 80073da:	641a      	str	r2, [r3, #64]	@ 0x40
 80073dc:	e00e      	b.n	80073fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	4b40      	ldr	r3, [pc, #256]	@ (80074e8 <HAL_DMA_Init+0x148>)
 80073e6:	4413      	add	r3, r2
 80073e8:	4a3d      	ldr	r2, [pc, #244]	@ (80074e0 <HAL_DMA_Init+0x140>)
 80073ea:	fba2 2303 	umull	r2, r3, r2, r3
 80073ee:	091b      	lsrs	r3, r3, #4
 80073f0:	009a      	lsls	r2, r3, #2
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a3c      	ldr	r2, [pc, #240]	@ (80074ec <HAL_DMA_Init+0x14c>)
 80073fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800742c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa82 	bl	8007958 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800745c:	d102      	bne.n	8007464 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007478:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d010      	beq.n	80074a4 <HAL_DMA_Init+0x104>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2b04      	cmp	r3, #4
 8007488:	d80c      	bhi.n	80074a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 faa2 	bl	80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	e008      	b.n	80074b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	40020407 	.word	0x40020407
 80074dc:	bffdfff8 	.word	0xbffdfff8
 80074e0:	cccccccd 	.word	0xcccccccd
 80074e4:	40020000 	.word	0x40020000
 80074e8:	bffdfbf8 	.word	0xbffdfbf8
 80074ec:	40020400 	.word	0x40020400

080074f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_DMA_Start_IT+0x20>
 800750c:	2302      	movs	r3, #2
 800750e:	e066      	b.n	80075de <HAL_DMA_Start_IT+0xee>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d155      	bne.n	80075d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0201 	bic.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f9c7 	bl	80078dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007552:	2b00      	cmp	r3, #0
 8007554:	d008      	beq.n	8007568 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 020e 	orr.w	r2, r2, #14
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e00f      	b.n	8007588 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0204 	bic.w	r2, r2, #4
 8007576:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 020a 	orr.w	r2, r2, #10
 8007586:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0201 	orr.w	r2, r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e005      	b.n	80075dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80075d8:	2302      	movs	r3, #2
 80075da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d005      	beq.n	800760a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2204      	movs	r2, #4
 8007602:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e037      	b.n	800767a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 020e 	bic.w	r2, r2, #14
 8007618:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007628:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0201 	bic.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763e:	f003 021f 	and.w	r2, r3, #31
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007646:	2101      	movs	r1, #1
 8007648:	fa01 f202 	lsl.w	r2, r1, r2
 800764c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007656:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00c      	beq.n	800767a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800766e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007678:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d00d      	beq.n	80076cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2204      	movs	r2, #4
 80076b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	73fb      	strb	r3, [r7, #15]
 80076ca:	e047      	b.n	800775c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 020e 	bic.w	r2, r2, #14
 80076da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007700:	f003 021f 	and.w	r2, r3, #31
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f202 	lsl.w	r2, r1, r2
 800770e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007718:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00c      	beq.n	800773c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007730:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800773a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
    }
  }
  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007782:	f003 031f 	and.w	r3, r3, #31
 8007786:	2204      	movs	r2, #4
 8007788:	409a      	lsls	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d026      	beq.n	80077e0 <HAL_DMA_IRQHandler+0x7a>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d021      	beq.n	80077e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d107      	bne.n	80077ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 0204 	bic.w	r2, r2, #4
 80077b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077be:	f003 021f 	and.w	r2, r3, #31
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c6:	2104      	movs	r1, #4
 80077c8:	fa01 f202 	lsl.w	r2, r1, r2
 80077cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d071      	beq.n	80078ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80077de:	e06c      	b.n	80078ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2202      	movs	r2, #2
 80077ea:	409a      	lsls	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4013      	ands	r3, r2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02e      	beq.n	8007852 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d029      	beq.n	8007852 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10b      	bne.n	8007824 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 020a 	bic.w	r2, r2, #10
 800781a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007828:	f003 021f 	and.w	r2, r3, #31
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007830:	2102      	movs	r1, #2
 8007832:	fa01 f202 	lsl.w	r2, r1, r2
 8007836:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d038      	beq.n	80078ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007850:	e033      	b.n	80078ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007856:	f003 031f 	and.w	r3, r3, #31
 800785a:	2208      	movs	r2, #8
 800785c:	409a      	lsls	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d02a      	beq.n	80078bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b00      	cmp	r3, #0
 800786e:	d025      	beq.n	80078bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 020e 	bic.w	r2, r2, #14
 800787e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007884:	f003 021f 	and.w	r2, r3, #31
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788c:	2101      	movs	r1, #1
 800788e:	fa01 f202 	lsl.w	r2, r1, r2
 8007892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
}
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80078f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007904:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790a:	f003 021f 	and.w	r2, r3, #31
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007912:	2101      	movs	r1, #1
 8007914:	fa01 f202 	lsl.w	r2, r1, r2
 8007918:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	2b10      	cmp	r3, #16
 8007928:	d108      	bne.n	800793c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800793a:	e007      	b.n	800794c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	60da      	str	r2, [r3, #12]
}
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007968:	429a      	cmp	r2, r3
 800796a:	d802      	bhi.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800796c:	4b15      	ldr	r3, [pc, #84]	@ (80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e001      	b.n	8007976 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007972:	4b15      	ldr	r3, [pc, #84]	@ (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007974:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	3b08      	subs	r3, #8
 8007982:	4a12      	ldr	r2, [pc, #72]	@ (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007990:	089b      	lsrs	r3, r3, #2
 8007992:	009a      	lsls	r2, r3, #2
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	4413      	add	r3, r2
 8007998:	461a      	mov	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a0b      	ldr	r2, [pc, #44]	@ (80079d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80079a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	2201      	movs	r2, #1
 80079ac:	409a      	lsls	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40020407 	.word	0x40020407
 80079c4:	40020800 	.word	0x40020800
 80079c8:	40020820 	.word	0x40020820
 80079cc:	cccccccd 	.word	0xcccccccd
 80079d0:	40020880 	.word	0x40020880

080079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	461a      	mov	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a08      	ldr	r2, [pc, #32]	@ (8007a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80079f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	2201      	movs	r2, #1
 8007a02:	409a      	lsls	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	1000823f 	.word	0x1000823f
 8007a18:	40020940 	.word	0x40020940

08007a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a2a:	e15a      	b.n	8007ce2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	2101      	movs	r1, #1
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	fa01 f303 	lsl.w	r3, r1, r3
 8007a38:	4013      	ands	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 814c 	beq.w	8007cdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d005      	beq.n	8007a5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d130      	bne.n	8007abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	2203      	movs	r2, #3
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	43db      	mvns	r3, r3
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4013      	ands	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a92:	2201      	movs	r2, #1
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	43db      	mvns	r3, r3
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	091b      	lsrs	r3, r3, #4
 8007aa8:	f003 0201 	and.w	r2, r3, #1
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d017      	beq.n	8007afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	43db      	mvns	r3, r3
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	fa02 f303 	lsl.w	r3, r2, r3
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d123      	bne.n	8007b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	08da      	lsrs	r2, r3, #3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3208      	adds	r2, #8
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	220f      	movs	r2, #15
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	43db      	mvns	r3, r3
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4013      	ands	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	08da      	lsrs	r2, r3, #3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3208      	adds	r2, #8
 8007b48:	6939      	ldr	r1, [r7, #16]
 8007b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	2203      	movs	r2, #3
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4013      	ands	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f003 0203 	and.w	r2, r3, #3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 80a6 	beq.w	8007cdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b90:	4b5b      	ldr	r3, [pc, #364]	@ (8007d00 <HAL_GPIO_Init+0x2e4>)
 8007b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b94:	4a5a      	ldr	r2, [pc, #360]	@ (8007d00 <HAL_GPIO_Init+0x2e4>)
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8007b9c:	4b58      	ldr	r3, [pc, #352]	@ (8007d00 <HAL_GPIO_Init+0x2e4>)
 8007b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ba8:	4a56      	ldr	r2, [pc, #344]	@ (8007d04 <HAL_GPIO_Init+0x2e8>)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	089b      	lsrs	r3, r3, #2
 8007bae:	3302      	adds	r3, #2
 8007bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	220f      	movs	r2, #15
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	43db      	mvns	r3, r3
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007bd2:	d01f      	beq.n	8007c14 <HAL_GPIO_Init+0x1f8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a4c      	ldr	r2, [pc, #304]	@ (8007d08 <HAL_GPIO_Init+0x2ec>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d019      	beq.n	8007c10 <HAL_GPIO_Init+0x1f4>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a4b      	ldr	r2, [pc, #300]	@ (8007d0c <HAL_GPIO_Init+0x2f0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d013      	beq.n	8007c0c <HAL_GPIO_Init+0x1f0>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a4a      	ldr	r2, [pc, #296]	@ (8007d10 <HAL_GPIO_Init+0x2f4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00d      	beq.n	8007c08 <HAL_GPIO_Init+0x1ec>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a49      	ldr	r2, [pc, #292]	@ (8007d14 <HAL_GPIO_Init+0x2f8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d007      	beq.n	8007c04 <HAL_GPIO_Init+0x1e8>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a48      	ldr	r2, [pc, #288]	@ (8007d18 <HAL_GPIO_Init+0x2fc>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d101      	bne.n	8007c00 <HAL_GPIO_Init+0x1e4>
 8007bfc:	2305      	movs	r3, #5
 8007bfe:	e00a      	b.n	8007c16 <HAL_GPIO_Init+0x1fa>
 8007c00:	2306      	movs	r3, #6
 8007c02:	e008      	b.n	8007c16 <HAL_GPIO_Init+0x1fa>
 8007c04:	2304      	movs	r3, #4
 8007c06:	e006      	b.n	8007c16 <HAL_GPIO_Init+0x1fa>
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e004      	b.n	8007c16 <HAL_GPIO_Init+0x1fa>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e002      	b.n	8007c16 <HAL_GPIO_Init+0x1fa>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <HAL_GPIO_Init+0x1fa>
 8007c14:	2300      	movs	r3, #0
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	f002 0203 	and.w	r2, r2, #3
 8007c1c:	0092      	lsls	r2, r2, #2
 8007c1e:	4093      	lsls	r3, r2
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c26:	4937      	ldr	r1, [pc, #220]	@ (8007d04 <HAL_GPIO_Init+0x2e8>)
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	089b      	lsrs	r3, r3, #2
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c34:	4b39      	ldr	r3, [pc, #228]	@ (8007d1c <HAL_GPIO_Init+0x300>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	4013      	ands	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007c58:	4a30      	ldr	r2, [pc, #192]	@ (8007d1c <HAL_GPIO_Init+0x300>)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007d1c <HAL_GPIO_Init+0x300>)
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	43db      	mvns	r3, r3
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c82:	4a26      	ldr	r2, [pc, #152]	@ (8007d1c <HAL_GPIO_Init+0x300>)
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007c88:	4b24      	ldr	r3, [pc, #144]	@ (8007d1c <HAL_GPIO_Init+0x300>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4013      	ands	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007cac:	4a1b      	ldr	r2, [pc, #108]	@ (8007d1c <HAL_GPIO_Init+0x300>)
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d1c <HAL_GPIO_Init+0x300>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007cd6:	4a11      	ldr	r2, [pc, #68]	@ (8007d1c <HAL_GPIO_Init+0x300>)
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f47f ae9d 	bne.w	8007a2c <HAL_GPIO_Init+0x10>
  }
}
 8007cf2:	bf00      	nop
 8007cf4:	bf00      	nop
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	40021000 	.word	0x40021000
 8007d04:	40010000 	.word	0x40010000
 8007d08:	48000400 	.word	0x48000400
 8007d0c:	48000800 	.word	0x48000800
 8007d10:	48000c00 	.word	0x48000c00
 8007d14:	48001000 	.word	0x48001000
 8007d18:	48001400 	.word	0x48001400
 8007d1c:	40010400 	.word	0x40010400

08007d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691a      	ldr	r2, [r3, #16]
 8007d30:	887b      	ldrh	r3, [r7, #2]
 8007d32:	4013      	ands	r3, r2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
 8007d3c:	e001      	b.n	8007d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d60:	787b      	ldrb	r3, [r7, #1]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d66:	887a      	ldrh	r2, [r7, #2]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007d6c:	e002      	b.n	8007d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007d6e:	887a      	ldrh	r2, [r7, #2]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d92:	887a      	ldrh	r2, [r7, #2]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4013      	ands	r3, r2
 8007d98:	041a      	lsls	r2, r3, #16
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	43d9      	mvns	r1, r3
 8007d9e:	887b      	ldrh	r3, [r7, #2]
 8007da0:	400b      	ands	r3, r1
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	619a      	str	r2, [r3, #24]
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007dbe:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007dca:	4a05      	ldr	r2, [pc, #20]	@ (8007de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007dd0:	88fb      	ldrh	r3, [r7, #6]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fa fd44 	bl	8002860 <HAL_GPIO_EXTI_Callback>
  }
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40010400 	.word	0x40010400

08007de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e08d      	b.n	8007f12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7fa fb74 	bl	80024f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2224      	movs	r2, #36	@ 0x24
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0201 	bic.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d107      	bne.n	8007e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e5a:	609a      	str	r2, [r3, #8]
 8007e5c:	e006      	b.n	8007e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d108      	bne.n	8007e86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e82:	605a      	str	r2, [r3, #4]
 8007e84:	e007      	b.n	8007e96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ea8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68da      	ldr	r2, [r3, #12]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007eb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69d9      	ldr	r1, [r3, #28]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1a      	ldr	r2, [r3, #32]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	4608      	mov	r0, r1
 8007f26:	4611      	mov	r1, r2
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	817b      	strh	r3, [r7, #10]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	813b      	strh	r3, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	f040 80f9 	bne.w	8008136 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <HAL_I2C_Mem_Write+0x34>
 8007f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d105      	bne.n	8007f5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e0ed      	b.n	8008138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_I2C_Mem_Write+0x4e>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e0e6      	b.n	8008138 <HAL_I2C_Mem_Write+0x21c>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f72:	f7fd fc51 	bl	8005818 <HAL_GetTick>
 8007f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	2319      	movs	r3, #25
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fac3 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e0d1      	b.n	8008138 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2221      	movs	r2, #33	@ 0x21
 8007f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2240      	movs	r2, #64	@ 0x40
 8007fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a3a      	ldr	r2, [r7, #32]
 8007fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fbc:	88f8      	ldrh	r0, [r7, #6]
 8007fbe:	893a      	ldrh	r2, [r7, #8]
 8007fc0:	8979      	ldrh	r1, [r7, #10]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	4603      	mov	r3, r0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f9d3 	bl	8008378 <I2C_RequestMemoryWrite>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e0a9      	b.n	8008138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2bff      	cmp	r3, #255	@ 0xff
 8007fec:	d90e      	bls.n	800800c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	22ff      	movs	r2, #255	@ 0xff
 8007ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	8979      	ldrh	r1, [r7, #10]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 fc47 	bl	8008898 <I2C_TransferConfig>
 800800a:	e00f      	b.n	800802c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801a:	b2da      	uxtb	r2, r3
 800801c:	8979      	ldrh	r1, [r7, #10]
 800801e:	2300      	movs	r3, #0
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fc36 	bl	8008898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fac6 	bl	80085c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e07b      	b.n	8008138 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d034      	beq.n	80080e4 <HAL_I2C_Mem_Write+0x1c8>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800807e:	2b00      	cmp	r3, #0
 8008080:	d130      	bne.n	80080e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	2200      	movs	r2, #0
 800808a:	2180      	movs	r1, #128	@ 0x80
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 fa3f 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e04d      	b.n	8008138 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	2bff      	cmp	r3, #255	@ 0xff
 80080a4:	d90e      	bls.n	80080c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	22ff      	movs	r2, #255	@ 0xff
 80080aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	8979      	ldrh	r1, [r7, #10]
 80080b4:	2300      	movs	r3, #0
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fbeb 	bl	8008898 <I2C_TransferConfig>
 80080c2:	e00f      	b.n	80080e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	8979      	ldrh	r1, [r7, #10]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 fbda 	bl	8008898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d19e      	bne.n	800802c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 faac 	bl	8008650 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e01a      	b.n	8008138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2220      	movs	r2, #32
 8008108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6859      	ldr	r1, [r3, #4]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	4b0a      	ldr	r3, [pc, #40]	@ (8008140 <HAL_I2C_Mem_Write+0x224>)
 8008116:	400b      	ands	r3, r1
 8008118:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2220      	movs	r2, #32
 800811e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	e000      	b.n	8008138 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008136:	2302      	movs	r3, #2
  }
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	fe00e800 	.word	0xfe00e800

08008144 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af02      	add	r7, sp, #8
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	461a      	mov	r2, r3
 8008152:	4603      	mov	r3, r0
 8008154:	817b      	strh	r3, [r7, #10]
 8008156:	460b      	mov	r3, r1
 8008158:	813b      	strh	r3, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b20      	cmp	r3, #32
 8008168:	f040 80fd 	bne.w	8008366 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_I2C_Mem_Read+0x34>
 8008172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	d105      	bne.n	8008184 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800817e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e0f1      	b.n	8008368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_I2C_Mem_Read+0x4e>
 800818e:	2302      	movs	r3, #2
 8008190:	e0ea      	b.n	8008368 <HAL_I2C_Mem_Read+0x224>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800819a:	f7fd fb3d 	bl	8005818 <HAL_GetTick>
 800819e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	2319      	movs	r3, #25
 80081a6:	2201      	movs	r2, #1
 80081a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 f9af 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e0d5      	b.n	8008368 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2222      	movs	r2, #34	@ 0x22
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2240      	movs	r2, #64	@ 0x40
 80081c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6a3a      	ldr	r2, [r7, #32]
 80081d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80081dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081e4:	88f8      	ldrh	r0, [r7, #6]
 80081e6:	893a      	ldrh	r2, [r7, #8]
 80081e8:	8979      	ldrh	r1, [r7, #10]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	4603      	mov	r3, r0
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f913 	bl	8008420 <I2C_RequestMemoryRead>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e0ad      	b.n	8008368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	2bff      	cmp	r3, #255	@ 0xff
 8008214:	d90e      	bls.n	8008234 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	22ff      	movs	r2, #255	@ 0xff
 800821a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008220:	b2da      	uxtb	r2, r3
 8008222:	8979      	ldrh	r1, [r7, #10]
 8008224:	4b52      	ldr	r3, [pc, #328]	@ (8008370 <HAL_I2C_Mem_Read+0x22c>)
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fb33 	bl	8008898 <I2C_TransferConfig>
 8008232:	e00f      	b.n	8008254 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008242:	b2da      	uxtb	r2, r3
 8008244:	8979      	ldrh	r1, [r7, #10]
 8008246:	4b4a      	ldr	r3, [pc, #296]	@ (8008370 <HAL_I2C_Mem_Read+0x22c>)
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fb22 	bl	8008898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	2200      	movs	r2, #0
 800825c:	2104      	movs	r1, #4
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 f956 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e07c      	b.n	8008368 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800828a:	3b01      	subs	r3, #1
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d034      	beq.n	8008314 <HAL_I2C_Mem_Read+0x1d0>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d130      	bne.n	8008314 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b8:	2200      	movs	r2, #0
 80082ba:	2180      	movs	r1, #128	@ 0x80
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f927 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e04d      	b.n	8008368 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2bff      	cmp	r3, #255	@ 0xff
 80082d4:	d90e      	bls.n	80082f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	22ff      	movs	r2, #255	@ 0xff
 80082da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	8979      	ldrh	r1, [r7, #10]
 80082e4:	2300      	movs	r3, #0
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fad3 	bl	8008898 <I2C_TransferConfig>
 80082f2:	e00f      	b.n	8008314 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008302:	b2da      	uxtb	r2, r3
 8008304:	8979      	ldrh	r1, [r7, #10]
 8008306:	2300      	movs	r3, #0
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 fac2 	bl	8008898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d19a      	bne.n	8008254 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 f994 	bl	8008650 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e01a      	b.n	8008368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2220      	movs	r2, #32
 8008338:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6859      	ldr	r1, [r3, #4]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	4b0b      	ldr	r3, [pc, #44]	@ (8008374 <HAL_I2C_Mem_Read+0x230>)
 8008346:	400b      	ands	r3, r1
 8008348:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2220      	movs	r2, #32
 800834e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	e000      	b.n	8008368 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008366:	2302      	movs	r3, #2
  }
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	80002400 	.word	0x80002400
 8008374:	fe00e800 	.word	0xfe00e800

08008378 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	4608      	mov	r0, r1
 8008382:	4611      	mov	r1, r2
 8008384:	461a      	mov	r2, r3
 8008386:	4603      	mov	r3, r0
 8008388:	817b      	strh	r3, [r7, #10]
 800838a:	460b      	mov	r3, r1
 800838c:	813b      	strh	r3, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	b2da      	uxtb	r2, r3
 8008396:	8979      	ldrh	r1, [r7, #10]
 8008398:	4b20      	ldr	r3, [pc, #128]	@ (800841c <I2C_RequestMemoryWrite+0xa4>)
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fa79 	bl	8008898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	69b9      	ldr	r1, [r7, #24]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f909 	bl	80085c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e02c      	b.n	8008414 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d105      	bne.n	80083cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083c0:	893b      	ldrh	r3, [r7, #8]
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80083ca:	e015      	b.n	80083f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083cc:	893b      	ldrh	r3, [r7, #8]
 80083ce:	0a1b      	lsrs	r3, r3, #8
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	69b9      	ldr	r1, [r7, #24]
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f8ef 	bl	80085c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e012      	b.n	8008414 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083ee:	893b      	ldrh	r3, [r7, #8]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2200      	movs	r2, #0
 8008400:	2180      	movs	r1, #128	@ 0x80
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f884 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	80002000 	.word	0x80002000

08008420 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af02      	add	r7, sp, #8
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	4608      	mov	r0, r1
 800842a:	4611      	mov	r1, r2
 800842c:	461a      	mov	r2, r3
 800842e:	4603      	mov	r3, r0
 8008430:	817b      	strh	r3, [r7, #10]
 8008432:	460b      	mov	r3, r1
 8008434:	813b      	strh	r3, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	b2da      	uxtb	r2, r3
 800843e:	8979      	ldrh	r1, [r7, #10]
 8008440:	4b20      	ldr	r3, [pc, #128]	@ (80084c4 <I2C_RequestMemoryRead+0xa4>)
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 fa26 	bl	8008898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	69b9      	ldr	r1, [r7, #24]
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 f8b6 	bl	80085c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e02c      	b.n	80084ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d105      	bne.n	8008472 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008466:	893b      	ldrh	r3, [r7, #8]
 8008468:	b2da      	uxtb	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008470:	e015      	b.n	800849e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008472:	893b      	ldrh	r3, [r7, #8]
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	b29b      	uxth	r3, r3
 8008478:	b2da      	uxtb	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008480:	69fa      	ldr	r2, [r7, #28]
 8008482:	69b9      	ldr	r1, [r7, #24]
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f89c 	bl	80085c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e012      	b.n	80084ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008494:	893b      	ldrh	r3, [r7, #8]
 8008496:	b2da      	uxtb	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2200      	movs	r2, #0
 80084a6:	2140      	movs	r1, #64	@ 0x40
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f831 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	80002000 	.word	0x80002000

080084c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d103      	bne.n	80084e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d007      	beq.n	8008504 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	619a      	str	r2, [r3, #24]
  }
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008520:	e03b      	b.n	800859a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 f8d6 	bl	80086d8 <I2C_IsErrorOccurred>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e041      	b.n	80085ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853c:	d02d      	beq.n	800859a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800853e:	f7fd f96b 	bl	8005818 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d302      	bcc.n	8008554 <I2C_WaitOnFlagUntilTimeout+0x44>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d122      	bne.n	800859a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4013      	ands	r3, r2
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	429a      	cmp	r2, r3
 8008562:	bf0c      	ite	eq
 8008564:	2301      	moveq	r3, #1
 8008566:	2300      	movne	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	79fb      	ldrb	r3, [r7, #7]
 800856e:	429a      	cmp	r2, r3
 8008570:	d113      	bne.n	800859a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008576:	f043 0220 	orr.w	r2, r3, #32
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e00f      	b.n	80085ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	699a      	ldr	r2, [r3, #24]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4013      	ands	r3, r2
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	bf0c      	ite	eq
 80085aa:	2301      	moveq	r3, #1
 80085ac:	2300      	movne	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d0b4      	beq.n	8008522 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085ce:	e033      	b.n	8008638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f87f 	bl	80086d8 <I2C_IsErrorOccurred>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e031      	b.n	8008648 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d025      	beq.n	8008638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ec:	f7fd f914 	bl	8005818 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d302      	bcc.n	8008602 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d11a      	bne.n	8008638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b02      	cmp	r3, #2
 800860e:	d013      	beq.n	8008638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008614:	f043 0220 	orr.w	r2, r3, #32
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e007      	b.n	8008648 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b02      	cmp	r3, #2
 8008644:	d1c4      	bne.n	80085d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800865c:	e02f      	b.n	80086be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f838 	bl	80086d8 <I2C_IsErrorOccurred>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e02d      	b.n	80086ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008672:	f7fd f8d1 	bl	8005818 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	429a      	cmp	r2, r3
 8008680:	d302      	bcc.n	8008688 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11a      	bne.n	80086be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b20      	cmp	r3, #32
 8008694:	d013      	beq.n	80086be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800869a:	f043 0220 	orr.w	r2, r3, #32
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e007      	b.n	80086ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d1c8      	bne.n	800865e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	@ 0x28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f003 0310 	and.w	r3, r3, #16
 8008700:	2b00      	cmp	r3, #0
 8008702:	d068      	beq.n	80087d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2210      	movs	r2, #16
 800870a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800870c:	e049      	b.n	80087a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008714:	d045      	beq.n	80087a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008716:	f7fd f87f 	bl	8005818 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	429a      	cmp	r2, r3
 8008724:	d302      	bcc.n	800872c <I2C_IsErrorOccurred+0x54>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d13a      	bne.n	80087a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008736:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800873e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800874a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800874e:	d121      	bne.n	8008794 <I2C_IsErrorOccurred+0xbc>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008756:	d01d      	beq.n	8008794 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008758:	7cfb      	ldrb	r3, [r7, #19]
 800875a:	2b20      	cmp	r3, #32
 800875c:	d01a      	beq.n	8008794 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800876c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800876e:	f7fd f853 	bl	8005818 <HAL_GetTick>
 8008772:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008774:	e00e      	b.n	8008794 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008776:	f7fd f84f 	bl	8005818 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b19      	cmp	r3, #25
 8008782:	d907      	bls.n	8008794 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	f043 0320 	orr.w	r3, r3, #32
 800878a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008792:	e006      	b.n	80087a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d1e9      	bne.n	8008776 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d003      	beq.n	80087b8 <I2C_IsErrorOccurred+0xe0>
 80087b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0aa      	beq.n	800870e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80087b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d103      	bne.n	80087c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2220      	movs	r2, #32
 80087c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	f043 0304 	orr.w	r3, r3, #4
 80087ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	f043 0301 	orr.w	r3, r3, #1
 80087ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	f043 0308 	orr.w	r3, r3, #8
 8008810:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800881a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	f043 0302 	orr.w	r3, r3, #2
 8008832:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800883c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01c      	beq.n	8008886 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7ff fe3b 	bl	80084c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6859      	ldr	r1, [r3, #4]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	4b0d      	ldr	r3, [pc, #52]	@ (8008894 <I2C_IsErrorOccurred+0x1bc>)
 800885e:	400b      	ands	r3, r1
 8008860:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	431a      	orrs	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800888a:	4618      	mov	r0, r3
 800888c:	3728      	adds	r7, #40	@ 0x28
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	fe00e800 	.word	0xfe00e800

08008898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	607b      	str	r3, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	817b      	strh	r3, [r7, #10]
 80088a6:	4613      	mov	r3, r2
 80088a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088aa:	897b      	ldrh	r3, [r7, #10]
 80088ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088b0:	7a7b      	ldrb	r3, [r7, #9]
 80088b2:	041b      	lsls	r3, r3, #16
 80088b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	0d5b      	lsrs	r3, r3, #21
 80088d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80088d6:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <I2C_TransferConfig+0x60>)
 80088d8:	430b      	orrs	r3, r1
 80088da:	43db      	mvns	r3, r3
 80088dc:	ea02 0103 	and.w	r1, r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80088ea:	bf00      	nop
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	03ff63ff 	.word	0x03ff63ff

080088fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b20      	cmp	r3, #32
 8008910:	d138      	bne.n	8008984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800891c:	2302      	movs	r3, #2
 800891e:	e032      	b.n	8008986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2224      	movs	r2, #36	@ 0x24
 800892c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0201 	bic.w	r2, r2, #1
 800893e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800894e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6819      	ldr	r1, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	e000      	b.n	8008986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008984:	2302      	movs	r3, #2
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008992:	b480      	push	{r7}
 8008994:	b085      	sub	sp, #20
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d139      	bne.n	8008a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e033      	b.n	8008a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2224      	movs	r2, #36	@ 0x24
 80089c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 0201 	bic.w	r2, r2, #1
 80089d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80089e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e000      	b.n	8008a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
  }
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
	...

08008a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d141      	bne.n	8008abe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a46:	d131      	bne.n	8008aac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a48:	4b47      	ldr	r3, [pc, #284]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a4e:	4a46      	ldr	r2, [pc, #280]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a58:	4b43      	ldr	r3, [pc, #268]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a60:	4a41      	ldr	r2, [pc, #260]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a68:	4b40      	ldr	r3, [pc, #256]	@ (8008b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2232      	movs	r2, #50	@ 0x32
 8008a6e:	fb02 f303 	mul.w	r3, r2, r3
 8008a72:	4a3f      	ldr	r2, [pc, #252]	@ (8008b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a74:	fba2 2303 	umull	r2, r3, r2, r3
 8008a78:	0c9b      	lsrs	r3, r3, #18
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a7e:	e002      	b.n	8008a86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a86:	4b38      	ldr	r3, [pc, #224]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a92:	d102      	bne.n	8008a9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f2      	bne.n	8008a80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a9a:	4b33      	ldr	r3, [pc, #204]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa6:	d158      	bne.n	8008b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e057      	b.n	8008b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008aac:	4b2e      	ldr	r3, [pc, #184]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ab8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008abc:	e04d      	b.n	8008b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac4:	d141      	bne.n	8008b4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ac6:	4b28      	ldr	r3, [pc, #160]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ad2:	d131      	bne.n	8008b38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ad4:	4b24      	ldr	r3, [pc, #144]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ada:	4a23      	ldr	r2, [pc, #140]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ae4:	4b20      	ldr	r3, [pc, #128]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008aec:	4a1e      	ldr	r2, [pc, #120]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008af4:	4b1d      	ldr	r3, [pc, #116]	@ (8008b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2232      	movs	r2, #50	@ 0x32
 8008afa:	fb02 f303 	mul.w	r3, r2, r3
 8008afe:	4a1c      	ldr	r2, [pc, #112]	@ (8008b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b00:	fba2 2303 	umull	r2, r3, r2, r3
 8008b04:	0c9b      	lsrs	r3, r3, #18
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b0a:	e002      	b.n	8008b12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b12:	4b15      	ldr	r3, [pc, #84]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b1e:	d102      	bne.n	8008b26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1f2      	bne.n	8008b0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b26:	4b10      	ldr	r3, [pc, #64]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b32:	d112      	bne.n	8008b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e011      	b.n	8008b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b38:	4b0b      	ldr	r3, [pc, #44]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b48:	e007      	b.n	8008b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b4a:	4b07      	ldr	r3, [pc, #28]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b52:	4a05      	ldr	r2, [pc, #20]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	40007000 	.word	0x40007000
 8008b6c:	20000028 	.word	0x20000028
 8008b70:	431bde83 	.word	0x431bde83

08008b74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008b78:	4b05      	ldr	r3, [pc, #20]	@ (8008b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	4a04      	ldr	r2, [pc, #16]	@ (8008b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b82:	6093      	str	r3, [r2, #8]
}
 8008b84:	bf00      	nop
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	40007000 	.word	0x40007000

08008b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e2fe      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d075      	beq.n	8008c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bb2:	4b97      	ldr	r3, [pc, #604]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 030c 	and.w	r3, r3, #12
 8008bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bbc:	4b94      	ldr	r3, [pc, #592]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0303 	and.w	r3, r3, #3
 8008bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2b0c      	cmp	r3, #12
 8008bca:	d102      	bne.n	8008bd2 <HAL_RCC_OscConfig+0x3e>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d002      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x44>
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d10b      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bd8:	4b8d      	ldr	r3, [pc, #564]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d05b      	beq.n	8008c9c <HAL_RCC_OscConfig+0x108>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d157      	bne.n	8008c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e2d9      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bf8:	d106      	bne.n	8008c08 <HAL_RCC_OscConfig+0x74>
 8008bfa:	4b85      	ldr	r3, [pc, #532]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a84      	ldr	r2, [pc, #528]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	e01d      	b.n	8008c44 <HAL_RCC_OscConfig+0xb0>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c10:	d10c      	bne.n	8008c2c <HAL_RCC_OscConfig+0x98>
 8008c12:	4b7f      	ldr	r3, [pc, #508]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a7e      	ldr	r2, [pc, #504]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a7b      	ldr	r2, [pc, #492]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	e00b      	b.n	8008c44 <HAL_RCC_OscConfig+0xb0>
 8008c2c:	4b78      	ldr	r3, [pc, #480]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a77      	ldr	r2, [pc, #476]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	4b75      	ldr	r3, [pc, #468]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a74      	ldr	r2, [pc, #464]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d013      	beq.n	8008c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c4c:	f7fc fde4 	bl	8005818 <HAL_GetTick>
 8008c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c52:	e008      	b.n	8008c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c54:	f7fc fde0 	bl	8005818 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b64      	cmp	r3, #100	@ 0x64
 8008c60:	d901      	bls.n	8008c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e29e      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c66:	4b6a      	ldr	r3, [pc, #424]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0f0      	beq.n	8008c54 <HAL_RCC_OscConfig+0xc0>
 8008c72:	e014      	b.n	8008c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c74:	f7fc fdd0 	bl	8005818 <HAL_GetTick>
 8008c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c7c:	f7fc fdcc 	bl	8005818 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b64      	cmp	r3, #100	@ 0x64
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e28a      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c8e:	4b60      	ldr	r3, [pc, #384]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1f0      	bne.n	8008c7c <HAL_RCC_OscConfig+0xe8>
 8008c9a:	e000      	b.n	8008c9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d075      	beq.n	8008d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008caa:	4b59      	ldr	r3, [pc, #356]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 030c 	and.w	r3, r3, #12
 8008cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cb4:	4b56      	ldr	r3, [pc, #344]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	2b0c      	cmp	r3, #12
 8008cc2:	d102      	bne.n	8008cca <HAL_RCC_OscConfig+0x136>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d002      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x13c>
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d11f      	bne.n	8008d10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d005      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x154>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e25d      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ce8:	4b49      	ldr	r3, [pc, #292]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	4946      	ldr	r1, [pc, #280]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008cfc:	4b45      	ldr	r3, [pc, #276]	@ (8008e14 <HAL_RCC_OscConfig+0x280>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fa ff59 	bl	8003bb8 <HAL_InitTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d043      	beq.n	8008d94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e249      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d023      	beq.n	8008d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d18:	4b3d      	ldr	r3, [pc, #244]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d24:	f7fc fd78 	bl	8005818 <HAL_GetTick>
 8008d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d2c:	f7fc fd74 	bl	8005818 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e232      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d3e:	4b34      	ldr	r3, [pc, #208]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0f0      	beq.n	8008d2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d4a:	4b31      	ldr	r3, [pc, #196]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	061b      	lsls	r3, r3, #24
 8008d58:	492d      	ldr	r1, [pc, #180]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	604b      	str	r3, [r1, #4]
 8008d5e:	e01a      	b.n	8008d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d60:	4b2b      	ldr	r3, [pc, #172]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a2a      	ldr	r2, [pc, #168]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6c:	f7fc fd54 	bl	8005818 <HAL_GetTick>
 8008d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d72:	e008      	b.n	8008d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d74:	f7fc fd50 	bl	8005818 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d901      	bls.n	8008d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e20e      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d86:	4b22      	ldr	r3, [pc, #136]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f0      	bne.n	8008d74 <HAL_RCC_OscConfig+0x1e0>
 8008d92:	e000      	b.n	8008d96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0308 	and.w	r3, r3, #8
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d041      	beq.n	8008e26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01c      	beq.n	8008de4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008daa:	4b19      	ldr	r3, [pc, #100]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008db0:	4a17      	ldr	r2, [pc, #92]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dba:	f7fc fd2d 	bl	8005818 <HAL_GetTick>
 8008dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008dc0:	e008      	b.n	8008dd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dc2:	f7fc fd29 	bl	8005818 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e1e7      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0ef      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x22e>
 8008de2:	e020      	b.n	8008e26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008de4:	4b0a      	ldr	r3, [pc, #40]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dea:	4a09      	ldr	r2, [pc, #36]	@ (8008e10 <HAL_RCC_OscConfig+0x27c>)
 8008dec:	f023 0301 	bic.w	r3, r3, #1
 8008df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df4:	f7fc fd10 	bl	8005818 <HAL_GetTick>
 8008df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008dfa:	e00d      	b.n	8008e18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dfc:	f7fc fd0c 	bl	8005818 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d906      	bls.n	8008e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e1ca      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
 8008e0e:	bf00      	nop
 8008e10:	40021000 	.word	0x40021000
 8008e14:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e18:	4b8c      	ldr	r3, [pc, #560]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1ea      	bne.n	8008dfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80a6 	beq.w	8008f80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e34:	2300      	movs	r3, #0
 8008e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e38:	4b84      	ldr	r3, [pc, #528]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <HAL_RCC_OscConfig+0x2b4>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e000      	b.n	8008e4a <HAL_RCC_OscConfig+0x2b6>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00d      	beq.n	8008e6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e52:	4a7e      	ldr	r2, [pc, #504]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e66:	2301      	movs	r3, #1
 8008e68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e6a:	4b79      	ldr	r3, [pc, #484]	@ (8009050 <HAL_RCC_OscConfig+0x4bc>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d118      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e76:	4b76      	ldr	r3, [pc, #472]	@ (8009050 <HAL_RCC_OscConfig+0x4bc>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a75      	ldr	r2, [pc, #468]	@ (8009050 <HAL_RCC_OscConfig+0x4bc>)
 8008e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e82:	f7fc fcc9 	bl	8005818 <HAL_GetTick>
 8008e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e88:	e008      	b.n	8008e9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e8a:	f7fc fcc5 	bl	8005818 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e183      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8009050 <HAL_RCC_OscConfig+0x4bc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0f0      	beq.n	8008e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d108      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x32e>
 8008eb0:	4b66      	ldr	r3, [pc, #408]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb6:	4a65      	ldr	r2, [pc, #404]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008eb8:	f043 0301 	orr.w	r3, r3, #1
 8008ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ec0:	e024      	b.n	8008f0c <HAL_RCC_OscConfig+0x378>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	2b05      	cmp	r3, #5
 8008ec8:	d110      	bne.n	8008eec <HAL_RCC_OscConfig+0x358>
 8008eca:	4b60      	ldr	r3, [pc, #384]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008ed2:	f043 0304 	orr.w	r3, r3, #4
 8008ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008eda:	4b5c      	ldr	r3, [pc, #368]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008ee2:	f043 0301 	orr.w	r3, r3, #1
 8008ee6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008eea:	e00f      	b.n	8008f0c <HAL_RCC_OscConfig+0x378>
 8008eec:	4b57      	ldr	r3, [pc, #348]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef2:	4a56      	ldr	r2, [pc, #344]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008ef4:	f023 0301 	bic.w	r3, r3, #1
 8008ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008efc:	4b53      	ldr	r3, [pc, #332]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f02:	4a52      	ldr	r2, [pc, #328]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008f04:	f023 0304 	bic.w	r3, r3, #4
 8008f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d016      	beq.n	8008f42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f14:	f7fc fc80 	bl	8005818 <HAL_GetTick>
 8008f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f1a:	e00a      	b.n	8008f32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f1c:	f7fc fc7c 	bl	8005818 <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e138      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f32:	4b46      	ldr	r3, [pc, #280]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0ed      	beq.n	8008f1c <HAL_RCC_OscConfig+0x388>
 8008f40:	e015      	b.n	8008f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f42:	f7fc fc69 	bl	8005818 <HAL_GetTick>
 8008f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f48:	e00a      	b.n	8008f60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f4a:	f7fc fc65 	bl	8005818 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e121      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f60:	4b3a      	ldr	r3, [pc, #232]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1ed      	bne.n	8008f4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f6e:	7ffb      	ldrb	r3, [r7, #31]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d105      	bne.n	8008f80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f74:	4b35      	ldr	r3, [pc, #212]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f78:	4a34      	ldr	r2, [pc, #208]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d03c      	beq.n	8009006 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01c      	beq.n	8008fce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f94:	4b2d      	ldr	r3, [pc, #180]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008f9c:	f043 0301 	orr.w	r3, r3, #1
 8008fa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa4:	f7fc fc38 	bl	8005818 <HAL_GetTick>
 8008fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008faa:	e008      	b.n	8008fbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fac:	f7fc fc34 	bl	8005818 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e0f2      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fbe:	4b23      	ldr	r3, [pc, #140]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0ef      	beq.n	8008fac <HAL_RCC_OscConfig+0x418>
 8008fcc:	e01b      	b.n	8009006 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fce:	4b1f      	ldr	r3, [pc, #124]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008fd6:	f023 0301 	bic.w	r3, r3, #1
 8008fda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fde:	f7fc fc1b 	bl	8005818 <HAL_GetTick>
 8008fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008fe4:	e008      	b.n	8008ff8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fe6:	f7fc fc17 	bl	8005818 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d901      	bls.n	8008ff8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e0d5      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ff8:	4b14      	ldr	r3, [pc, #80]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8008ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1ef      	bne.n	8008fe6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80c9 	beq.w	80091a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009010:	4b0e      	ldr	r3, [pc, #56]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f003 030c 	and.w	r3, r3, #12
 8009018:	2b0c      	cmp	r3, #12
 800901a:	f000 8083 	beq.w	8009124 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d15e      	bne.n	80090e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009026:	4b09      	ldr	r3, [pc, #36]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a08      	ldr	r2, [pc, #32]	@ (800904c <HAL_RCC_OscConfig+0x4b8>)
 800902c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009032:	f7fc fbf1 	bl	8005818 <HAL_GetTick>
 8009036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009038:	e00c      	b.n	8009054 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800903a:	f7fc fbed 	bl	8005818 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d905      	bls.n	8009054 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e0ab      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
 800904c:	40021000 	.word	0x40021000
 8009050:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009054:	4b55      	ldr	r3, [pc, #340]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1ec      	bne.n	800903a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009060:	4b52      	ldr	r3, [pc, #328]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	4b52      	ldr	r3, [pc, #328]	@ (80091b0 <HAL_RCC_OscConfig+0x61c>)
 8009066:	4013      	ands	r3, r2
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6a11      	ldr	r1, [r2, #32]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009070:	3a01      	subs	r2, #1
 8009072:	0112      	lsls	r2, r2, #4
 8009074:	4311      	orrs	r1, r2
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800907a:	0212      	lsls	r2, r2, #8
 800907c:	4311      	orrs	r1, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009082:	0852      	lsrs	r2, r2, #1
 8009084:	3a01      	subs	r2, #1
 8009086:	0552      	lsls	r2, r2, #21
 8009088:	4311      	orrs	r1, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800908e:	0852      	lsrs	r2, r2, #1
 8009090:	3a01      	subs	r2, #1
 8009092:	0652      	lsls	r2, r2, #25
 8009094:	4311      	orrs	r1, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800909a:	06d2      	lsls	r2, r2, #27
 800909c:	430a      	orrs	r2, r1
 800909e:	4943      	ldr	r1, [pc, #268]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090a4:	4b41      	ldr	r3, [pc, #260]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a40      	ldr	r2, [pc, #256]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 80090aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090b0:	4b3e      	ldr	r3, [pc, #248]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	4a3d      	ldr	r2, [pc, #244]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 80090b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090bc:	f7fc fbac 	bl	8005818 <HAL_GetTick>
 80090c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090c4:	f7fc fba8 	bl	8005818 <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e066      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090d6:	4b35      	ldr	r3, [pc, #212]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f0      	beq.n	80090c4 <HAL_RCC_OscConfig+0x530>
 80090e2:	e05e      	b.n	80091a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090e4:	4b31      	ldr	r3, [pc, #196]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a30      	ldr	r2, [pc, #192]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 80090ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f0:	f7fc fb92 	bl	8005818 <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090f8:	f7fc fb8e 	bl	8005818 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e04c      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800910a:	4b28      	ldr	r3, [pc, #160]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009116:	4b25      	ldr	r3, [pc, #148]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	4924      	ldr	r1, [pc, #144]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 800911c:	4b25      	ldr	r3, [pc, #148]	@ (80091b4 <HAL_RCC_OscConfig+0x620>)
 800911e:	4013      	ands	r3, r2
 8009120:	60cb      	str	r3, [r1, #12]
 8009122:	e03e      	b.n	80091a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d101      	bne.n	8009130 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e039      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009130:	4b1e      	ldr	r3, [pc, #120]	@ (80091ac <HAL_RCC_OscConfig+0x618>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f003 0203 	and.w	r2, r3, #3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	429a      	cmp	r2, r3
 8009142:	d12c      	bne.n	800919e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914e:	3b01      	subs	r3, #1
 8009150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009152:	429a      	cmp	r2, r3
 8009154:	d123      	bne.n	800919e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009160:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009162:	429a      	cmp	r2, r3
 8009164:	d11b      	bne.n	800919e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009172:	429a      	cmp	r2, r3
 8009174:	d113      	bne.n	800919e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	3b01      	subs	r3, #1
 8009184:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009186:	429a      	cmp	r2, r3
 8009188:	d109      	bne.n	800919e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009194:	085b      	lsrs	r3, r3, #1
 8009196:	3b01      	subs	r3, #1
 8009198:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800919a:	429a      	cmp	r2, r3
 800919c:	d001      	beq.n	80091a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3720      	adds	r7, #32
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	40021000 	.word	0x40021000
 80091b0:	019f800c 	.word	0x019f800c
 80091b4:	feeefffc 	.word	0xfeeefffc

080091b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e11e      	b.n	800940e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091d0:	4b91      	ldr	r3, [pc, #580]	@ (8009418 <HAL_RCC_ClockConfig+0x260>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 030f 	and.w	r3, r3, #15
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d910      	bls.n	8009200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091de:	4b8e      	ldr	r3, [pc, #568]	@ (8009418 <HAL_RCC_ClockConfig+0x260>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f023 020f 	bic.w	r2, r3, #15
 80091e6:	498c      	ldr	r1, [pc, #560]	@ (8009418 <HAL_RCC_ClockConfig+0x260>)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ee:	4b8a      	ldr	r3, [pc, #552]	@ (8009418 <HAL_RCC_ClockConfig+0x260>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d001      	beq.n	8009200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e106      	b.n	800940e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	d073      	beq.n	80092f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d129      	bne.n	8009268 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009214:	4b81      	ldr	r3, [pc, #516]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e0f4      	b.n	800940e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009224:	f000 f9ce 	bl	80095c4 <RCC_GetSysClockFreqFromPLLSource>
 8009228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	4a7c      	ldr	r2, [pc, #496]	@ (8009420 <HAL_RCC_ClockConfig+0x268>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d93f      	bls.n	80092b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009232:	4b7a      	ldr	r3, [pc, #488]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009246:	2b00      	cmp	r3, #0
 8009248:	d033      	beq.n	80092b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800924e:	2b00      	cmp	r3, #0
 8009250:	d12f      	bne.n	80092b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009252:	4b72      	ldr	r3, [pc, #456]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800925a:	4a70      	ldr	r2, [pc, #448]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 800925c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009262:	2380      	movs	r3, #128	@ 0x80
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	e024      	b.n	80092b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d107      	bne.n	8009280 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009270:	4b6a      	ldr	r3, [pc, #424]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d109      	bne.n	8009290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e0c6      	b.n	800940e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009280:	4b66      	ldr	r3, [pc, #408]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e0be      	b.n	800940e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009290:	f000 f8ce 	bl	8009430 <HAL_RCC_GetSysClockFreq>
 8009294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	4a61      	ldr	r2, [pc, #388]	@ (8009420 <HAL_RCC_ClockConfig+0x268>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d909      	bls.n	80092b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800929e:	4b5f      	ldr	r3, [pc, #380]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092a6:	4a5d      	ldr	r2, [pc, #372]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80092a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80092ae:	2380      	movs	r3, #128	@ 0x80
 80092b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092b2:	4b5a      	ldr	r3, [pc, #360]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f023 0203 	bic.w	r2, r3, #3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	4957      	ldr	r1, [pc, #348]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092c4:	f7fc faa8 	bl	8005818 <HAL_GetTick>
 80092c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ca:	e00a      	b.n	80092e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092cc:	f7fc faa4 	bl	8005818 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092da:	4293      	cmp	r3, r2
 80092dc:	d901      	bls.n	80092e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e095      	b.n	800940e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092e2:	4b4e      	ldr	r3, [pc, #312]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f003 020c 	and.w	r2, r3, #12
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d1eb      	bne.n	80092cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d023      	beq.n	8009348 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800930c:	4b43      	ldr	r3, [pc, #268]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	4a42      	ldr	r2, [pc, #264]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009316:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0308 	and.w	r3, r3, #8
 8009320:	2b00      	cmp	r3, #0
 8009322:	d007      	beq.n	8009334 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009324:	4b3d      	ldr	r3, [pc, #244]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800932c:	4a3b      	ldr	r2, [pc, #236]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 800932e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009334:	4b39      	ldr	r3, [pc, #228]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	4936      	ldr	r1, [pc, #216]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009342:	4313      	orrs	r3, r2
 8009344:	608b      	str	r3, [r1, #8]
 8009346:	e008      	b.n	800935a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	2b80      	cmp	r3, #128	@ 0x80
 800934c:	d105      	bne.n	800935a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800934e:	4b33      	ldr	r3, [pc, #204]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	4a32      	ldr	r2, [pc, #200]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 8009354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009358:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800935a:	4b2f      	ldr	r3, [pc, #188]	@ (8009418 <HAL_RCC_ClockConfig+0x260>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d21d      	bcs.n	80093a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009368:	4b2b      	ldr	r3, [pc, #172]	@ (8009418 <HAL_RCC_ClockConfig+0x260>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f023 020f 	bic.w	r2, r3, #15
 8009370:	4929      	ldr	r1, [pc, #164]	@ (8009418 <HAL_RCC_ClockConfig+0x260>)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	4313      	orrs	r3, r2
 8009376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009378:	f7fc fa4e 	bl	8005818 <HAL_GetTick>
 800937c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800937e:	e00a      	b.n	8009396 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009380:	f7fc fa4a 	bl	8005818 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800938e:	4293      	cmp	r3, r2
 8009390:	d901      	bls.n	8009396 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e03b      	b.n	800940e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009396:	4b20      	ldr	r3, [pc, #128]	@ (8009418 <HAL_RCC_ClockConfig+0x260>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d1ed      	bne.n	8009380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d008      	beq.n	80093c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093b0:	4b1a      	ldr	r3, [pc, #104]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	4917      	ldr	r1, [pc, #92]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0308 	and.w	r3, r3, #8
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d009      	beq.n	80093e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80093ce:	4b13      	ldr	r3, [pc, #76]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	490f      	ldr	r1, [pc, #60]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80093e2:	f000 f825 	bl	8009430 <HAL_RCC_GetSysClockFreq>
 80093e6:	4602      	mov	r2, r0
 80093e8:	4b0c      	ldr	r3, [pc, #48]	@ (800941c <HAL_RCC_ClockConfig+0x264>)
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	091b      	lsrs	r3, r3, #4
 80093ee:	f003 030f 	and.w	r3, r3, #15
 80093f2:	490c      	ldr	r1, [pc, #48]	@ (8009424 <HAL_RCC_ClockConfig+0x26c>)
 80093f4:	5ccb      	ldrb	r3, [r1, r3]
 80093f6:	f003 031f 	and.w	r3, r3, #31
 80093fa:	fa22 f303 	lsr.w	r3, r2, r3
 80093fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009428 <HAL_RCC_ClockConfig+0x270>)
 8009400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009402:	4b0a      	ldr	r3, [pc, #40]	@ (800942c <HAL_RCC_ClockConfig+0x274>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f7fa fbd6 	bl	8003bb8 <HAL_InitTick>
 800940c:	4603      	mov	r3, r0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	40022000 	.word	0x40022000
 800941c:	40021000 	.word	0x40021000
 8009420:	04c4b400 	.word	0x04c4b400
 8009424:	0801b534 	.word	0x0801b534
 8009428:	20000028 	.word	0x20000028
 800942c:	20000030 	.word	0x20000030

08009430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009436:	4b2c      	ldr	r3, [pc, #176]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f003 030c 	and.w	r3, r3, #12
 800943e:	2b04      	cmp	r3, #4
 8009440:	d102      	bne.n	8009448 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009442:	4b2a      	ldr	r3, [pc, #168]	@ (80094ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	e047      	b.n	80094d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009448:	4b27      	ldr	r3, [pc, #156]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f003 030c 	and.w	r3, r3, #12
 8009450:	2b08      	cmp	r3, #8
 8009452:	d102      	bne.n	800945a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009454:	4b25      	ldr	r3, [pc, #148]	@ (80094ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8009456:	613b      	str	r3, [r7, #16]
 8009458:	e03e      	b.n	80094d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800945a:	4b23      	ldr	r3, [pc, #140]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	f003 030c 	and.w	r3, r3, #12
 8009462:	2b0c      	cmp	r3, #12
 8009464:	d136      	bne.n	80094d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009466:	4b20      	ldr	r3, [pc, #128]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009470:	4b1d      	ldr	r3, [pc, #116]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	091b      	lsrs	r3, r3, #4
 8009476:	f003 030f 	and.w	r3, r3, #15
 800947a:	3301      	adds	r3, #1
 800947c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b03      	cmp	r3, #3
 8009482:	d10c      	bne.n	800949e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009484:	4a19      	ldr	r2, [pc, #100]	@ (80094ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	fbb2 f3f3 	udiv	r3, r2, r3
 800948c:	4a16      	ldr	r2, [pc, #88]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800948e:	68d2      	ldr	r2, [r2, #12]
 8009490:	0a12      	lsrs	r2, r2, #8
 8009492:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009496:	fb02 f303 	mul.w	r3, r2, r3
 800949a:	617b      	str	r3, [r7, #20]
      break;
 800949c:	e00c      	b.n	80094b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800949e:	4a13      	ldr	r2, [pc, #76]	@ (80094ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a6:	4a10      	ldr	r2, [pc, #64]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094a8:	68d2      	ldr	r2, [r2, #12]
 80094aa:	0a12      	lsrs	r2, r2, #8
 80094ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094b0:	fb02 f303 	mul.w	r3, r2, r3
 80094b4:	617b      	str	r3, [r7, #20]
      break;
 80094b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80094b8:	4b0b      	ldr	r3, [pc, #44]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	0e5b      	lsrs	r3, r3, #25
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	3301      	adds	r3, #1
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	e001      	b.n	80094d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80094d8:	693b      	ldr	r3, [r7, #16]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40021000 	.word	0x40021000
 80094ec:	00f42400 	.word	0x00f42400

080094f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094f4:	4b03      	ldr	r3, [pc, #12]	@ (8009504 <HAL_RCC_GetHCLKFreq+0x14>)
 80094f6:	681b      	ldr	r3, [r3, #0]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000028 	.word	0x20000028

08009508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800950c:	f7ff fff0 	bl	80094f0 <HAL_RCC_GetHCLKFreq>
 8009510:	4602      	mov	r2, r0
 8009512:	4b06      	ldr	r3, [pc, #24]	@ (800952c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	f003 0307 	and.w	r3, r3, #7
 800951c:	4904      	ldr	r1, [pc, #16]	@ (8009530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800951e:	5ccb      	ldrb	r3, [r1, r3]
 8009520:	f003 031f 	and.w	r3, r3, #31
 8009524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009528:	4618      	mov	r0, r3
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40021000 	.word	0x40021000
 8009530:	0801b544 	.word	0x0801b544

08009534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009538:	f7ff ffda 	bl	80094f0 <HAL_RCC_GetHCLKFreq>
 800953c:	4602      	mov	r2, r0
 800953e:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	0adb      	lsrs	r3, r3, #11
 8009544:	f003 0307 	and.w	r3, r3, #7
 8009548:	4904      	ldr	r1, [pc, #16]	@ (800955c <HAL_RCC_GetPCLK2Freq+0x28>)
 800954a:	5ccb      	ldrb	r3, [r1, r3]
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009554:	4618      	mov	r0, r3
 8009556:	bd80      	pop	{r7, pc}
 8009558:	40021000 	.word	0x40021000
 800955c:	0801b544 	.word	0x0801b544

08009560 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	220f      	movs	r2, #15
 800956e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009570:	4b12      	ldr	r3, [pc, #72]	@ (80095bc <HAL_RCC_GetClockConfig+0x5c>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f003 0203 	and.w	r2, r3, #3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800957c:	4b0f      	ldr	r3, [pc, #60]	@ (80095bc <HAL_RCC_GetClockConfig+0x5c>)
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009588:	4b0c      	ldr	r3, [pc, #48]	@ (80095bc <HAL_RCC_GetClockConfig+0x5c>)
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009594:	4b09      	ldr	r3, [pc, #36]	@ (80095bc <HAL_RCC_GetClockConfig+0x5c>)
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	08db      	lsrs	r3, r3, #3
 800959a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80095a2:	4b07      	ldr	r3, [pc, #28]	@ (80095c0 <HAL_RCC_GetClockConfig+0x60>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 020f 	and.w	r2, r3, #15
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	601a      	str	r2, [r3, #0]
}
 80095ae:	bf00      	nop
 80095b0:	370c      	adds	r7, #12
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	40021000 	.word	0x40021000
 80095c0:	40022000 	.word	0x40022000

080095c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80095ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	091b      	lsrs	r3, r3, #4
 80095da:	f003 030f 	and.w	r3, r3, #15
 80095de:	3301      	adds	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d10c      	bne.n	8009602 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095e8:	4a17      	ldr	r2, [pc, #92]	@ (8009648 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f0:	4a14      	ldr	r2, [pc, #80]	@ (8009644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095f2:	68d2      	ldr	r2, [r2, #12]
 80095f4:	0a12      	lsrs	r2, r2, #8
 80095f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80095fa:	fb02 f303 	mul.w	r3, r2, r3
 80095fe:	617b      	str	r3, [r7, #20]
    break;
 8009600:	e00c      	b.n	800961c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009602:	4a11      	ldr	r2, [pc, #68]	@ (8009648 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	fbb2 f3f3 	udiv	r3, r2, r3
 800960a:	4a0e      	ldr	r2, [pc, #56]	@ (8009644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800960c:	68d2      	ldr	r2, [r2, #12]
 800960e:	0a12      	lsrs	r2, r2, #8
 8009610:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009614:	fb02 f303 	mul.w	r3, r2, r3
 8009618:	617b      	str	r3, [r7, #20]
    break;
 800961a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800961c:	4b09      	ldr	r3, [pc, #36]	@ (8009644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	0e5b      	lsrs	r3, r3, #25
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	3301      	adds	r3, #1
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	fbb2 f3f3 	udiv	r3, r2, r3
 8009634:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009636:	687b      	ldr	r3, [r7, #4]
}
 8009638:	4618      	mov	r0, r3
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	40021000 	.word	0x40021000
 8009648:	00f42400 	.word	0x00f42400

0800964c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009654:	2300      	movs	r3, #0
 8009656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009658:	2300      	movs	r3, #0
 800965a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 8098 	beq.w	800979a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800966a:	2300      	movs	r3, #0
 800966c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800966e:	4b43      	ldr	r3, [pc, #268]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10d      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800967a:	4b40      	ldr	r3, [pc, #256]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800967c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800967e:	4a3f      	ldr	r2, [pc, #252]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009684:	6593      	str	r3, [r2, #88]	@ 0x58
 8009686:	4b3d      	ldr	r3, [pc, #244]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800968a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800968e:	60bb      	str	r3, [r7, #8]
 8009690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009692:	2301      	movs	r3, #1
 8009694:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009696:	4b3a      	ldr	r3, [pc, #232]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a39      	ldr	r2, [pc, #228]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800969c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096a2:	f7fc f8b9 	bl	8005818 <HAL_GetTick>
 80096a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096a8:	e009      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096aa:	f7fc f8b5 	bl	8005818 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d902      	bls.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	74fb      	strb	r3, [r7, #19]
        break;
 80096bc:	e005      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096be:	4b30      	ldr	r3, [pc, #192]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0ef      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80096ca:	7cfb      	ldrb	r3, [r7, #19]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d159      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80096d0:	4b2a      	ldr	r3, [pc, #168]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d01e      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d019      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80096ec:	4b23      	ldr	r3, [pc, #140]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096f8:	4b20      	ldr	r3, [pc, #128]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096fe:	4a1f      	ldr	r2, [pc, #124]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009708:	4b1c      	ldr	r3, [pc, #112]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800970a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800970e:	4a1b      	ldr	r2, [pc, #108]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009718:	4a18      	ldr	r2, [pc, #96]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d016      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972a:	f7fc f875 	bl	8005818 <HAL_GetTick>
 800972e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009730:	e00b      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009732:	f7fc f871 	bl	8005818 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009740:	4293      	cmp	r3, r2
 8009742:	d902      	bls.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	74fb      	strb	r3, [r7, #19]
            break;
 8009748:	e006      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800974a:	4b0c      	ldr	r3, [pc, #48]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800974c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0ec      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009758:	7cfb      	ldrb	r3, [r7, #19]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10b      	bne.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800975e:	4b07      	ldr	r3, [pc, #28]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976c:	4903      	ldr	r1, [pc, #12]	@ (800977c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800976e:	4313      	orrs	r3, r2
 8009770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009774:	e008      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009776:	7cfb      	ldrb	r3, [r7, #19]
 8009778:	74bb      	strb	r3, [r7, #18]
 800977a:	e005      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800977c:	40021000 	.word	0x40021000
 8009780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009784:	7cfb      	ldrb	r3, [r7, #19]
 8009786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009788:	7c7b      	ldrb	r3, [r7, #17]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d105      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800978e:	4ba6      	ldr	r3, [pc, #664]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009792:	4aa5      	ldr	r2, [pc, #660]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009798:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80097a6:	4ba0      	ldr	r3, [pc, #640]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ac:	f023 0203 	bic.w	r2, r3, #3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	499c      	ldr	r1, [pc, #624]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80097c8:	4b97      	ldr	r3, [pc, #604]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ce:	f023 020c 	bic.w	r2, r3, #12
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	4994      	ldr	r1, [pc, #592]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0304 	and.w	r3, r3, #4
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80097ea:	4b8f      	ldr	r3, [pc, #572]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	498b      	ldr	r1, [pc, #556]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0308 	and.w	r3, r3, #8
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800980c:	4b86      	ldr	r3, [pc, #536]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800980e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009812:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	4983      	ldr	r1, [pc, #524]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800981c:	4313      	orrs	r3, r2
 800981e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800982e:	4b7e      	ldr	r3, [pc, #504]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009834:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	497a      	ldr	r1, [pc, #488]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800983e:	4313      	orrs	r3, r2
 8009840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009850:	4b75      	ldr	r3, [pc, #468]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009856:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	4972      	ldr	r1, [pc, #456]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009860:	4313      	orrs	r3, r2
 8009862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009872:	4b6d      	ldr	r3, [pc, #436]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009878:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	4969      	ldr	r1, [pc, #420]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009882:	4313      	orrs	r3, r2
 8009884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009894:	4b64      	ldr	r3, [pc, #400]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	4961      	ldr	r1, [pc, #388]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098b6:	4b5c      	ldr	r3, [pc, #368]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c4:	4958      	ldr	r1, [pc, #352]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d015      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098d8:	4b53      	ldr	r3, [pc, #332]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e6:	4950      	ldr	r1, [pc, #320]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098f6:	d105      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098f8:	4b4b      	ldr	r3, [pc, #300]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	4a4a      	ldr	r2, [pc, #296]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009902:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800990c:	2b00      	cmp	r3, #0
 800990e:	d015      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009910:	4b45      	ldr	r3, [pc, #276]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009916:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991e:	4942      	ldr	r1, [pc, #264]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009920:	4313      	orrs	r3, r2
 8009922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800992e:	d105      	bne.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009930:	4b3d      	ldr	r3, [pc, #244]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	4a3c      	ldr	r2, [pc, #240]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800993a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d015      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009948:	4b37      	ldr	r3, [pc, #220]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800994a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800994e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009956:	4934      	ldr	r1, [pc, #208]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009958:	4313      	orrs	r3, r2
 800995a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009962:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009966:	d105      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009968:	4b2f      	ldr	r3, [pc, #188]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	4a2e      	ldr	r2, [pc, #184]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800996e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009972:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d015      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009980:	4b29      	ldr	r3, [pc, #164]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009986:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800998e:	4926      	ldr	r1, [pc, #152]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009990:	4313      	orrs	r3, r2
 8009992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800999a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800999e:	d105      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099a0:	4b21      	ldr	r3, [pc, #132]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	4a20      	ldr	r2, [pc, #128]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d015      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c6:	4918      	ldr	r1, [pc, #96]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099d6:	d105      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099d8:	4b13      	ldr	r3, [pc, #76]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	4a12      	ldr	r2, [pc, #72]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d015      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80099f0:	4b0d      	ldr	r3, [pc, #52]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099fe:	490a      	ldr	r1, [pc, #40]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a0e:	d105      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a10:	4b05      	ldr	r3, [pc, #20]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	4a04      	ldr	r2, [pc, #16]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009a1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	40021000 	.word	0x40021000

08009a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e09d      	b.n	8009b7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d108      	bne.n	8009a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a4e:	d009      	beq.n	8009a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	61da      	str	r2, [r3, #28]
 8009a56:	e005      	b.n	8009a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d106      	bne.n	8009a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7f9 faec 	bl	800305c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009aa4:	d902      	bls.n	8009aac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
 8009aaa:	e002      	b.n	8009ab2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ab0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009aba:	d007      	beq.n	8009acc <HAL_SPI_Init+0xa0>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ac4:	d002      	beq.n	8009acc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009adc:	431a      	orrs	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f003 0302 	and.w	r3, r3, #2
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	431a      	orrs	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b04:	431a      	orrs	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b0e:	ea42 0103 	orr.w	r1, r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	0c1b      	lsrs	r3, r3, #16
 8009b28:	f003 0204 	and.w	r2, r3, #4
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	f003 0310 	and.w	r3, r3, #16
 8009b34:	431a      	orrs	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b3a:	f003 0308 	and.w	r3, r3, #8
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b48:	ea42 0103 	orr.w	r1, r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b08a      	sub	sp, #40	@ 0x28
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
 8009b8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009b90:	2301      	movs	r3, #1
 8009b92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b94:	f7fb fe40 	bl	8005818 <HAL_GetTick>
 8009b98:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ba0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009ba8:	887b      	ldrh	r3, [r7, #2]
 8009baa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009bac:	887b      	ldrh	r3, [r7, #2]
 8009bae:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009bb0:	7ffb      	ldrb	r3, [r7, #31]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d00c      	beq.n	8009bd0 <HAL_SPI_TransmitReceive+0x4e>
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bbc:	d106      	bne.n	8009bcc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d102      	bne.n	8009bcc <HAL_SPI_TransmitReceive+0x4a>
 8009bc6:	7ffb      	ldrb	r3, [r7, #31]
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d001      	beq.n	8009bd0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009bcc:	2302      	movs	r3, #2
 8009bce:	e1f3      	b.n	8009fb8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <HAL_SPI_TransmitReceive+0x60>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_SPI_TransmitReceive+0x60>
 8009bdc:	887b      	ldrh	r3, [r7, #2]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e1e8      	b.n	8009fb8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d101      	bne.n	8009bf4 <HAL_SPI_TransmitReceive+0x72>
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	e1e1      	b.n	8009fb8 <HAL_SPI_TransmitReceive+0x436>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d003      	beq.n	8009c10 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2205      	movs	r2, #5
 8009c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	887a      	ldrh	r2, [r7, #2]
 8009c20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	887a      	ldrh	r2, [r7, #2]
 8009c28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	887a      	ldrh	r2, [r7, #2]
 8009c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	887a      	ldrh	r2, [r7, #2]
 8009c3c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c52:	d802      	bhi.n	8009c5a <HAL_SPI_TransmitReceive+0xd8>
 8009c54:	8abb      	ldrh	r3, [r7, #20]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d908      	bls.n	8009c6c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c68:	605a      	str	r2, [r3, #4]
 8009c6a:	e007      	b.n	8009c7c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c7a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c86:	2b40      	cmp	r3, #64	@ 0x40
 8009c88:	d007      	beq.n	8009c9a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ca2:	f240 8083 	bls.w	8009dac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <HAL_SPI_TransmitReceive+0x132>
 8009cae:	8afb      	ldrh	r3, [r7, #22]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d16f      	bne.n	8009d94 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb8:	881a      	ldrh	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc4:	1c9a      	adds	r2, r3, #2
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cd8:	e05c      	b.n	8009d94 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d11b      	bne.n	8009d20 <HAL_SPI_TransmitReceive+0x19e>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d016      	beq.n	8009d20 <HAL_SPI_TransmitReceive+0x19e>
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d113      	bne.n	8009d20 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfc:	881a      	ldrh	r2, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d08:	1c9a      	adds	r2, r3, #2
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d11c      	bne.n	8009d68 <HAL_SPI_TransmitReceive+0x1e6>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d016      	beq.n	8009d68 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d44:	b292      	uxth	r2, r2
 8009d46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	1c9a      	adds	r2, r3, #2
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d64:	2301      	movs	r3, #1
 8009d66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d68:	f7fb fd56 	bl	8005818 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d80d      	bhi.n	8009d94 <HAL_SPI_TransmitReceive+0x212>
 8009d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7e:	d009      	beq.n	8009d94 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e111      	b.n	8009fb8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d19d      	bne.n	8009cda <HAL_SPI_TransmitReceive+0x158>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d197      	bne.n	8009cda <HAL_SPI_TransmitReceive+0x158>
 8009daa:	e0e5      	b.n	8009f78 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <HAL_SPI_TransmitReceive+0x23a>
 8009db4:	8afb      	ldrh	r3, [r7, #22]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	f040 80d1 	bne.w	8009f5e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d912      	bls.n	8009dec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dca:	881a      	ldrh	r2, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd6:	1c9a      	adds	r2, r3, #2
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	3b02      	subs	r3, #2
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009dea:	e0b8      	b.n	8009f5e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	330c      	adds	r3, #12
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e12:	e0a4      	b.n	8009f5e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d134      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0x30a>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d02f      	beq.n	8009e8c <HAL_SPI_TransmitReceive+0x30a>
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d12c      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d912      	bls.n	8009e62 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e40:	881a      	ldrh	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4c:	1c9a      	adds	r2, r3, #2
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	3b02      	subs	r3, #2
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e60:	e012      	b.n	8009e88 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	330c      	adds	r3, #12
 8009e6c:	7812      	ldrb	r2, [r2, #0]
 8009e6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	3b01      	subs	r3, #1
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d148      	bne.n	8009f2c <HAL_SPI_TransmitReceive+0x3aa>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d042      	beq.n	8009f2c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d923      	bls.n	8009efa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68da      	ldr	r2, [r3, #12]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ebc:	b292      	uxth	r2, r2
 8009ebe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec4:	1c9a      	adds	r2, r3, #2
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	3b02      	subs	r3, #2
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d81f      	bhi.n	8009f28 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009ef6:	605a      	str	r2, [r3, #4]
 8009ef8:	e016      	b.n	8009f28 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f103 020c 	add.w	r2, r3, #12
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f06:	7812      	ldrb	r2, [r2, #0]
 8009f08:	b2d2      	uxtb	r2, r2
 8009f0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f10:	1c5a      	adds	r2, r3, #1
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f2c:	f7fb fc74 	bl	8005818 <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d803      	bhi.n	8009f44 <HAL_SPI_TransmitReceive+0x3c2>
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f42:	d102      	bne.n	8009f4a <HAL_SPI_TransmitReceive+0x3c8>
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d109      	bne.n	8009f5e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e02c      	b.n	8009fb8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f47f af55 	bne.w	8009e14 <HAL_SPI_TransmitReceive+0x292>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f47f af4e 	bne.w	8009e14 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f78:	6a3a      	ldr	r2, [r7, #32]
 8009f7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 f93d 	bl	800a1fc <SPI_EndRxTxTransaction>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d008      	beq.n	8009f9a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e00e      	b.n	8009fb8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
  }
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3728      	adds	r7, #40	@ 0x28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fd0:	f7fb fc22 	bl	8005818 <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd8:	1a9b      	subs	r3, r3, r2
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	4413      	add	r3, r2
 8009fde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fe0:	f7fb fc1a 	bl	8005818 <HAL_GetTick>
 8009fe4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fe6:	4b39      	ldr	r3, [pc, #228]	@ (800a0cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	015b      	lsls	r3, r3, #5
 8009fec:	0d1b      	lsrs	r3, r3, #20
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	fb02 f303 	mul.w	r3, r2, r3
 8009ff4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ff6:	e054      	b.n	800a0a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d050      	beq.n	800a0a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a000:	f7fb fc0a 	bl	8005818 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d902      	bls.n	800a016 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d13d      	bne.n	800a092 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a024:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a02e:	d111      	bne.n	800a054 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a038:	d004      	beq.n	800a044 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a042:	d107      	bne.n	800a054 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a052:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a05c:	d10f      	bne.n	800a07e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a07c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e017      	b.n	800a0c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689a      	ldr	r2, [r3, #8]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	bf0c      	ite	eq
 800a0b2:	2301      	moveq	r3, #1
 800a0b4:	2300      	movne	r3, #0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d19b      	bne.n	8009ff8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3720      	adds	r7, #32
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000028 	.word	0x20000028

0800a0d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b08a      	sub	sp, #40	@ 0x28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a0e2:	f7fb fb99 	bl	8005818 <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ea:	1a9b      	subs	r3, r3, r2
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a0f2:	f7fb fb91 	bl	8005818 <HAL_GetTick>
 800a0f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	330c      	adds	r3, #12
 800a0fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a100:	4b3d      	ldr	r3, [pc, #244]	@ (800a1f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	00da      	lsls	r2, r3, #3
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	0d1b      	lsrs	r3, r3, #20
 800a110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a112:	fb02 f303 	mul.w	r3, r2, r3
 800a116:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a118:	e060      	b.n	800a1dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a120:	d107      	bne.n	800a132 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d104      	bne.n	800a132 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a130:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a138:	d050      	beq.n	800a1dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a13a:	f7fb fb6d 	bl	8005818 <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a146:	429a      	cmp	r2, r3
 800a148:	d902      	bls.n	800a150 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d13d      	bne.n	800a1cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a15e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a168:	d111      	bne.n	800a18e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a172:	d004      	beq.n	800a17e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a17c:	d107      	bne.n	800a18e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a18c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a196:	d10f      	bne.n	800a1b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1a6:	601a      	str	r2, [r3, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a1b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e010      	b.n	800a1ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d196      	bne.n	800a11a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3728      	adds	r7, #40	@ 0x28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000028 	.word	0x20000028

0800a1fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af02      	add	r7, sp, #8
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2200      	movs	r2, #0
 800a210:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7ff ff5b 	bl	800a0d0 <SPI_WaitFifoStateUntilTimeout>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d007      	beq.n	800a230 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a224:	f043 0220 	orr.w	r2, r3, #32
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e027      	b.n	800a280 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2200      	movs	r2, #0
 800a238:	2180      	movs	r1, #128	@ 0x80
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7ff fec0 	bl	8009fc0 <SPI_WaitFlagStateUntilTimeout>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a24a:	f043 0220 	orr.w	r2, r3, #32
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e014      	b.n	800a280 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff ff34 	bl	800a0d0 <SPI_WaitFifoStateUntilTimeout>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d007      	beq.n	800a27e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a272:	f043 0220 	orr.w	r2, r3, #32
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e000      	b.n	800a280 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e049      	b.n	800a32e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7fa fa52 	bl	8004758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f001 fa0a 	bl	800b6e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d001      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e04a      	b.n	800a3e6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0201 	orr.w	r2, r2, #1
 800a366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a21      	ldr	r2, [pc, #132]	@ (800a3f4 <HAL_TIM_Base_Start_IT+0xbc>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d018      	beq.n	800a3a4 <HAL_TIM_Base_Start_IT+0x6c>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a37a:	d013      	beq.n	800a3a4 <HAL_TIM_Base_Start_IT+0x6c>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f8 <HAL_TIM_Base_Start_IT+0xc0>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d00e      	beq.n	800a3a4 <HAL_TIM_Base_Start_IT+0x6c>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a1c      	ldr	r2, [pc, #112]	@ (800a3fc <HAL_TIM_Base_Start_IT+0xc4>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d009      	beq.n	800a3a4 <HAL_TIM_Base_Start_IT+0x6c>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a1a      	ldr	r2, [pc, #104]	@ (800a400 <HAL_TIM_Base_Start_IT+0xc8>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d004      	beq.n	800a3a4 <HAL_TIM_Base_Start_IT+0x6c>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a19      	ldr	r2, [pc, #100]	@ (800a404 <HAL_TIM_Base_Start_IT+0xcc>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d115      	bne.n	800a3d0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689a      	ldr	r2, [r3, #8]
 800a3aa:	4b17      	ldr	r3, [pc, #92]	@ (800a408 <HAL_TIM_Base_Start_IT+0xd0>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b06      	cmp	r3, #6
 800a3b4:	d015      	beq.n	800a3e2 <HAL_TIM_Base_Start_IT+0xaa>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3bc:	d011      	beq.n	800a3e2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0201 	orr.w	r2, r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ce:	e008      	b.n	800a3e2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0201 	orr.w	r2, r2, #1
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	e000      	b.n	800a3e4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	40012c00 	.word	0x40012c00
 800a3f8:	40000400 	.word	0x40000400
 800a3fc:	40000800 	.word	0x40000800
 800a400:	40013400 	.word	0x40013400
 800a404:	40014000 	.word	0x40014000
 800a408:	00010007 	.word	0x00010007

0800a40c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e049      	b.n	800a4b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f841 	bl	800a4ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3304      	adds	r3, #4
 800a448:	4619      	mov	r1, r3
 800a44a:	4610      	mov	r0, r2
 800a44c:	f001 f948 	bl	800b6e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
	...

0800a4d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d109      	bne.n	800a4f4 <HAL_TIM_PWM_Start+0x24>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	bf14      	ite	ne
 800a4ec:	2301      	movne	r3, #1
 800a4ee:	2300      	moveq	r3, #0
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	e03c      	b.n	800a56e <HAL_TIM_PWM_Start+0x9e>
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d109      	bne.n	800a50e <HAL_TIM_PWM_Start+0x3e>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b01      	cmp	r3, #1
 800a504:	bf14      	ite	ne
 800a506:	2301      	movne	r3, #1
 800a508:	2300      	moveq	r3, #0
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	e02f      	b.n	800a56e <HAL_TIM_PWM_Start+0x9e>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b08      	cmp	r3, #8
 800a512:	d109      	bne.n	800a528 <HAL_TIM_PWM_Start+0x58>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	bf14      	ite	ne
 800a520:	2301      	movne	r3, #1
 800a522:	2300      	moveq	r3, #0
 800a524:	b2db      	uxtb	r3, r3
 800a526:	e022      	b.n	800a56e <HAL_TIM_PWM_Start+0x9e>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b0c      	cmp	r3, #12
 800a52c:	d109      	bne.n	800a542 <HAL_TIM_PWM_Start+0x72>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b01      	cmp	r3, #1
 800a538:	bf14      	ite	ne
 800a53a:	2301      	movne	r3, #1
 800a53c:	2300      	moveq	r3, #0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	e015      	b.n	800a56e <HAL_TIM_PWM_Start+0x9e>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b10      	cmp	r3, #16
 800a546:	d109      	bne.n	800a55c <HAL_TIM_PWM_Start+0x8c>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b01      	cmp	r3, #1
 800a552:	bf14      	ite	ne
 800a554:	2301      	movne	r3, #1
 800a556:	2300      	moveq	r3, #0
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	e008      	b.n	800a56e <HAL_TIM_PWM_Start+0x9e>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b01      	cmp	r3, #1
 800a566:	bf14      	ite	ne
 800a568:	2301      	movne	r3, #1
 800a56a:	2300      	moveq	r3, #0
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e097      	b.n	800a6a6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d104      	bne.n	800a586 <HAL_TIM_PWM_Start+0xb6>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a584:	e023      	b.n	800a5ce <HAL_TIM_PWM_Start+0xfe>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b04      	cmp	r3, #4
 800a58a:	d104      	bne.n	800a596 <HAL_TIM_PWM_Start+0xc6>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a594:	e01b      	b.n	800a5ce <HAL_TIM_PWM_Start+0xfe>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b08      	cmp	r3, #8
 800a59a:	d104      	bne.n	800a5a6 <HAL_TIM_PWM_Start+0xd6>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5a4:	e013      	b.n	800a5ce <HAL_TIM_PWM_Start+0xfe>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b0c      	cmp	r3, #12
 800a5aa:	d104      	bne.n	800a5b6 <HAL_TIM_PWM_Start+0xe6>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5b4:	e00b      	b.n	800a5ce <HAL_TIM_PWM_Start+0xfe>
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	2b10      	cmp	r3, #16
 800a5ba:	d104      	bne.n	800a5c6 <HAL_TIM_PWM_Start+0xf6>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5c4:	e003      	b.n	800a5ce <HAL_TIM_PWM_Start+0xfe>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f001 fcb0 	bl	800bf3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a33      	ldr	r2, [pc, #204]	@ (800a6b0 <HAL_TIM_PWM_Start+0x1e0>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d013      	beq.n	800a60e <HAL_TIM_PWM_Start+0x13e>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a32      	ldr	r2, [pc, #200]	@ (800a6b4 <HAL_TIM_PWM_Start+0x1e4>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d00e      	beq.n	800a60e <HAL_TIM_PWM_Start+0x13e>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a30      	ldr	r2, [pc, #192]	@ (800a6b8 <HAL_TIM_PWM_Start+0x1e8>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d009      	beq.n	800a60e <HAL_TIM_PWM_Start+0x13e>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a2f      	ldr	r2, [pc, #188]	@ (800a6bc <HAL_TIM_PWM_Start+0x1ec>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d004      	beq.n	800a60e <HAL_TIM_PWM_Start+0x13e>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a2d      	ldr	r2, [pc, #180]	@ (800a6c0 <HAL_TIM_PWM_Start+0x1f0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d101      	bne.n	800a612 <HAL_TIM_PWM_Start+0x142>
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <HAL_TIM_PWM_Start+0x144>
 800a612:	2300      	movs	r3, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d007      	beq.n	800a628 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a626:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a20      	ldr	r2, [pc, #128]	@ (800a6b0 <HAL_TIM_PWM_Start+0x1e0>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d018      	beq.n	800a664 <HAL_TIM_PWM_Start+0x194>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a63a:	d013      	beq.n	800a664 <HAL_TIM_PWM_Start+0x194>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a20      	ldr	r2, [pc, #128]	@ (800a6c4 <HAL_TIM_PWM_Start+0x1f4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d00e      	beq.n	800a664 <HAL_TIM_PWM_Start+0x194>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a1f      	ldr	r2, [pc, #124]	@ (800a6c8 <HAL_TIM_PWM_Start+0x1f8>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d009      	beq.n	800a664 <HAL_TIM_PWM_Start+0x194>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a17      	ldr	r2, [pc, #92]	@ (800a6b4 <HAL_TIM_PWM_Start+0x1e4>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d004      	beq.n	800a664 <HAL_TIM_PWM_Start+0x194>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a16      	ldr	r2, [pc, #88]	@ (800a6b8 <HAL_TIM_PWM_Start+0x1e8>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d115      	bne.n	800a690 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	4b18      	ldr	r3, [pc, #96]	@ (800a6cc <HAL_TIM_PWM_Start+0x1fc>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b06      	cmp	r3, #6
 800a674:	d015      	beq.n	800a6a2 <HAL_TIM_PWM_Start+0x1d2>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a67c:	d011      	beq.n	800a6a2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 0201 	orr.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a68e:	e008      	b.n	800a6a2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0201 	orr.w	r2, r2, #1
 800a69e:	601a      	str	r2, [r3, #0]
 800a6a0:	e000      	b.n	800a6a4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	40012c00 	.word	0x40012c00
 800a6b4:	40013400 	.word	0x40013400
 800a6b8:	40014000 	.word	0x40014000
 800a6bc:	40014400 	.word	0x40014400
 800a6c0:	40014800 	.word	0x40014800
 800a6c4:	40000400 	.word	0x40000400
 800a6c8:	40000800 	.word	0x40000800
 800a6cc:	00010007 	.word	0x00010007

0800a6d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fc2a 	bl	800bf3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a3e      	ldr	r2, [pc, #248]	@ (800a7e8 <HAL_TIM_PWM_Stop+0x118>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d013      	beq.n	800a71a <HAL_TIM_PWM_Stop+0x4a>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a3d      	ldr	r2, [pc, #244]	@ (800a7ec <HAL_TIM_PWM_Stop+0x11c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d00e      	beq.n	800a71a <HAL_TIM_PWM_Stop+0x4a>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a3b      	ldr	r2, [pc, #236]	@ (800a7f0 <HAL_TIM_PWM_Stop+0x120>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d009      	beq.n	800a71a <HAL_TIM_PWM_Stop+0x4a>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a3a      	ldr	r2, [pc, #232]	@ (800a7f4 <HAL_TIM_PWM_Stop+0x124>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d004      	beq.n	800a71a <HAL_TIM_PWM_Stop+0x4a>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a38      	ldr	r2, [pc, #224]	@ (800a7f8 <HAL_TIM_PWM_Stop+0x128>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d101      	bne.n	800a71e <HAL_TIM_PWM_Stop+0x4e>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e000      	b.n	800a720 <HAL_TIM_PWM_Stop+0x50>
 800a71e:	2300      	movs	r3, #0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d017      	beq.n	800a754 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6a1a      	ldr	r2, [r3, #32]
 800a72a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a72e:	4013      	ands	r3, r2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10f      	bne.n	800a754 <HAL_TIM_PWM_Stop+0x84>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6a1a      	ldr	r2, [r3, #32]
 800a73a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a73e:	4013      	ands	r3, r2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d107      	bne.n	800a754 <HAL_TIM_PWM_Stop+0x84>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a752:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6a1a      	ldr	r2, [r3, #32]
 800a75a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a75e:	4013      	ands	r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10f      	bne.n	800a784 <HAL_TIM_PWM_Stop+0xb4>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6a1a      	ldr	r2, [r3, #32]
 800a76a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a76e:	4013      	ands	r3, r2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d107      	bne.n	800a784 <HAL_TIM_PWM_Stop+0xb4>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 0201 	bic.w	r2, r2, #1
 800a782:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d104      	bne.n	800a794 <HAL_TIM_PWM_Stop+0xc4>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a792:	e023      	b.n	800a7dc <HAL_TIM_PWM_Stop+0x10c>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2b04      	cmp	r3, #4
 800a798:	d104      	bne.n	800a7a4 <HAL_TIM_PWM_Stop+0xd4>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7a2:	e01b      	b.n	800a7dc <HAL_TIM_PWM_Stop+0x10c>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b08      	cmp	r3, #8
 800a7a8:	d104      	bne.n	800a7b4 <HAL_TIM_PWM_Stop+0xe4>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7b2:	e013      	b.n	800a7dc <HAL_TIM_PWM_Stop+0x10c>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b0c      	cmp	r3, #12
 800a7b8:	d104      	bne.n	800a7c4 <HAL_TIM_PWM_Stop+0xf4>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7c2:	e00b      	b.n	800a7dc <HAL_TIM_PWM_Stop+0x10c>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	2b10      	cmp	r3, #16
 800a7c8:	d104      	bne.n	800a7d4 <HAL_TIM_PWM_Stop+0x104>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7d2:	e003      	b.n	800a7dc <HAL_TIM_PWM_Stop+0x10c>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	40012c00 	.word	0x40012c00
 800a7ec:	40013400 	.word	0x40013400
 800a7f0:	40014000 	.word	0x40014000
 800a7f4:	40014400 	.word	0x40014400
 800a7f8:	40014800 	.word	0x40014800

0800a7fc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
 800a808:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d109      	bne.n	800a828 <HAL_TIM_PWM_Start_DMA+0x2c>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	bf0c      	ite	eq
 800a820:	2301      	moveq	r3, #1
 800a822:	2300      	movne	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	e03c      	b.n	800a8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d109      	bne.n	800a842 <HAL_TIM_PWM_Start_DMA+0x46>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b02      	cmp	r3, #2
 800a838:	bf0c      	ite	eq
 800a83a:	2301      	moveq	r3, #1
 800a83c:	2300      	movne	r3, #0
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	e02f      	b.n	800a8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b08      	cmp	r3, #8
 800a846:	d109      	bne.n	800a85c <HAL_TIM_PWM_Start_DMA+0x60>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b02      	cmp	r3, #2
 800a852:	bf0c      	ite	eq
 800a854:	2301      	moveq	r3, #1
 800a856:	2300      	movne	r3, #0
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	e022      	b.n	800a8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2b0c      	cmp	r3, #12
 800a860:	d109      	bne.n	800a876 <HAL_TIM_PWM_Start_DMA+0x7a>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	bf0c      	ite	eq
 800a86e:	2301      	moveq	r3, #1
 800a870:	2300      	movne	r3, #0
 800a872:	b2db      	uxtb	r3, r3
 800a874:	e015      	b.n	800a8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b10      	cmp	r3, #16
 800a87a:	d109      	bne.n	800a890 <HAL_TIM_PWM_Start_DMA+0x94>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	bf0c      	ite	eq
 800a888:	2301      	moveq	r3, #1
 800a88a:	2300      	movne	r3, #0
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	e008      	b.n	800a8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b02      	cmp	r3, #2
 800a89a:	bf0c      	ite	eq
 800a89c:	2301      	moveq	r3, #1
 800a89e:	2300      	movne	r3, #0
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	e1a6      	b.n	800abf8 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d109      	bne.n	800a8c4 <HAL_TIM_PWM_Start_DMA+0xc8>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	bf0c      	ite	eq
 800a8bc:	2301      	moveq	r3, #1
 800a8be:	2300      	movne	r3, #0
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	e03c      	b.n	800a93e <HAL_TIM_PWM_Start_DMA+0x142>
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d109      	bne.n	800a8de <HAL_TIM_PWM_Start_DMA+0xe2>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	bf0c      	ite	eq
 800a8d6:	2301      	moveq	r3, #1
 800a8d8:	2300      	movne	r3, #0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	e02f      	b.n	800a93e <HAL_TIM_PWM_Start_DMA+0x142>
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2b08      	cmp	r3, #8
 800a8e2:	d109      	bne.n	800a8f8 <HAL_TIM_PWM_Start_DMA+0xfc>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	bf0c      	ite	eq
 800a8f0:	2301      	moveq	r3, #1
 800a8f2:	2300      	movne	r3, #0
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	e022      	b.n	800a93e <HAL_TIM_PWM_Start_DMA+0x142>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b0c      	cmp	r3, #12
 800a8fc:	d109      	bne.n	800a912 <HAL_TIM_PWM_Start_DMA+0x116>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b01      	cmp	r3, #1
 800a908:	bf0c      	ite	eq
 800a90a:	2301      	moveq	r3, #1
 800a90c:	2300      	movne	r3, #0
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	e015      	b.n	800a93e <HAL_TIM_PWM_Start_DMA+0x142>
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2b10      	cmp	r3, #16
 800a916:	d109      	bne.n	800a92c <HAL_TIM_PWM_Start_DMA+0x130>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b01      	cmp	r3, #1
 800a922:	bf0c      	ite	eq
 800a924:	2301      	moveq	r3, #1
 800a926:	2300      	movne	r3, #0
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	e008      	b.n	800a93e <HAL_TIM_PWM_Start_DMA+0x142>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	bf0c      	ite	eq
 800a938:	2301      	moveq	r3, #1
 800a93a:	2300      	movne	r3, #0
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d034      	beq.n	800a9ac <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <HAL_TIM_PWM_Start_DMA+0x152>
 800a948:	887b      	ldrh	r3, [r7, #2]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e152      	b.n	800abf8 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d104      	bne.n	800a962 <HAL_TIM_PWM_Start_DMA+0x166>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a960:	e026      	b.n	800a9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	2b04      	cmp	r3, #4
 800a966:	d104      	bne.n	800a972 <HAL_TIM_PWM_Start_DMA+0x176>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a970:	e01e      	b.n	800a9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	2b08      	cmp	r3, #8
 800a976:	d104      	bne.n	800a982 <HAL_TIM_PWM_Start_DMA+0x186>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a980:	e016      	b.n	800a9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b0c      	cmp	r3, #12
 800a986:	d104      	bne.n	800a992 <HAL_TIM_PWM_Start_DMA+0x196>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a990:	e00e      	b.n	800a9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2b10      	cmp	r3, #16
 800a996:	d104      	bne.n	800a9a2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2202      	movs	r2, #2
 800a99c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9a0:	e006      	b.n	800a9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9aa:	e001      	b.n	800a9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e123      	b.n	800abf8 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b0c      	cmp	r3, #12
 800a9b4:	f200 80ae 	bhi.w	800ab14 <HAL_TIM_PWM_Start_DMA+0x318>
 800a9b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800a9f5 	.word	0x0800a9f5
 800a9c4:	0800ab15 	.word	0x0800ab15
 800a9c8:	0800ab15 	.word	0x0800ab15
 800a9cc:	0800ab15 	.word	0x0800ab15
 800a9d0:	0800aa3d 	.word	0x0800aa3d
 800a9d4:	0800ab15 	.word	0x0800ab15
 800a9d8:	0800ab15 	.word	0x0800ab15
 800a9dc:	0800ab15 	.word	0x0800ab15
 800a9e0:	0800aa85 	.word	0x0800aa85
 800a9e4:	0800ab15 	.word	0x0800ab15
 800a9e8:	0800ab15 	.word	0x0800ab15
 800a9ec:	0800ab15 	.word	0x0800ab15
 800a9f0:	0800aacd 	.word	0x0800aacd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f8:	4a81      	ldr	r2, [pc, #516]	@ (800ac00 <HAL_TIM_PWM_Start_DMA+0x404>)
 800a9fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa00:	4a80      	ldr	r2, [pc, #512]	@ (800ac04 <HAL_TIM_PWM_Start_DMA+0x408>)
 800aa02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa08:	4a7f      	ldr	r2, [pc, #508]	@ (800ac08 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800aa0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aa10:	6879      	ldr	r1, [r7, #4]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3334      	adds	r3, #52	@ 0x34
 800aa18:	461a      	mov	r2, r3
 800aa1a:	887b      	ldrh	r3, [r7, #2]
 800aa1c:	f7fc fd68 	bl	80074f0 <HAL_DMA_Start_IT>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e0e6      	b.n	800abf8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68da      	ldr	r2, [r3, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa38:	60da      	str	r2, [r3, #12]
      break;
 800aa3a:	e06e      	b.n	800ab1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa40:	4a6f      	ldr	r2, [pc, #444]	@ (800ac00 <HAL_TIM_PWM_Start_DMA+0x404>)
 800aa42:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa48:	4a6e      	ldr	r2, [pc, #440]	@ (800ac04 <HAL_TIM_PWM_Start_DMA+0x408>)
 800aa4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa50:	4a6d      	ldr	r2, [pc, #436]	@ (800ac08 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800aa52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3338      	adds	r3, #56	@ 0x38
 800aa60:	461a      	mov	r2, r3
 800aa62:	887b      	ldrh	r3, [r7, #2]
 800aa64:	f7fc fd44 	bl	80074f0 <HAL_DMA_Start_IT>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e0c2      	b.n	800abf8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68da      	ldr	r2, [r3, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa80:	60da      	str	r2, [r3, #12]
      break;
 800aa82:	e04a      	b.n	800ab1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa88:	4a5d      	ldr	r2, [pc, #372]	@ (800ac00 <HAL_TIM_PWM_Start_DMA+0x404>)
 800aa8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa90:	4a5c      	ldr	r2, [pc, #368]	@ (800ac04 <HAL_TIM_PWM_Start_DMA+0x408>)
 800aa92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa98:	4a5b      	ldr	r2, [pc, #364]	@ (800ac08 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800aa9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	333c      	adds	r3, #60	@ 0x3c
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	887b      	ldrh	r3, [r7, #2]
 800aaac:	f7fc fd20 	bl	80074f0 <HAL_DMA_Start_IT>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e09e      	b.n	800abf8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68da      	ldr	r2, [r3, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aac8:	60da      	str	r2, [r3, #12]
      break;
 800aaca:	e026      	b.n	800ab1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aad0:	4a4b      	ldr	r2, [pc, #300]	@ (800ac00 <HAL_TIM_PWM_Start_DMA+0x404>)
 800aad2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aad8:	4a4a      	ldr	r2, [pc, #296]	@ (800ac04 <HAL_TIM_PWM_Start_DMA+0x408>)
 800aada:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae0:	4a49      	ldr	r2, [pc, #292]	@ (800ac08 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800aae2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3340      	adds	r3, #64	@ 0x40
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	887b      	ldrh	r3, [r7, #2]
 800aaf4:	f7fc fcfc 	bl	80074f0 <HAL_DMA_Start_IT>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e07a      	b.n	800abf8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68da      	ldr	r2, [r3, #12]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ab10:	60da      	str	r2, [r3, #12]
      break;
 800ab12:	e002      	b.n	800ab1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	75fb      	strb	r3, [r7, #23]
      break;
 800ab18:	bf00      	nop
  }

  if (status == HAL_OK)
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d16a      	bne.n	800abf6 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2201      	movs	r2, #1
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f001 fa07 	bl	800bf3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a36      	ldr	r2, [pc, #216]	@ (800ac0c <HAL_TIM_PWM_Start_DMA+0x410>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d013      	beq.n	800ab60 <HAL_TIM_PWM_Start_DMA+0x364>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a34      	ldr	r2, [pc, #208]	@ (800ac10 <HAL_TIM_PWM_Start_DMA+0x414>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00e      	beq.n	800ab60 <HAL_TIM_PWM_Start_DMA+0x364>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a33      	ldr	r2, [pc, #204]	@ (800ac14 <HAL_TIM_PWM_Start_DMA+0x418>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d009      	beq.n	800ab60 <HAL_TIM_PWM_Start_DMA+0x364>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a31      	ldr	r2, [pc, #196]	@ (800ac18 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d004      	beq.n	800ab60 <HAL_TIM_PWM_Start_DMA+0x364>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a30      	ldr	r2, [pc, #192]	@ (800ac1c <HAL_TIM_PWM_Start_DMA+0x420>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d101      	bne.n	800ab64 <HAL_TIM_PWM_Start_DMA+0x368>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e000      	b.n	800ab66 <HAL_TIM_PWM_Start_DMA+0x36a>
 800ab64:	2300      	movs	r3, #0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d007      	beq.n	800ab7a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a23      	ldr	r2, [pc, #140]	@ (800ac0c <HAL_TIM_PWM_Start_DMA+0x410>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d018      	beq.n	800abb6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab8c:	d013      	beq.n	800abb6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a23      	ldr	r2, [pc, #140]	@ (800ac20 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d00e      	beq.n	800abb6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a21      	ldr	r2, [pc, #132]	@ (800ac24 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d009      	beq.n	800abb6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a1a      	ldr	r2, [pc, #104]	@ (800ac10 <HAL_TIM_PWM_Start_DMA+0x414>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d004      	beq.n	800abb6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a18      	ldr	r2, [pc, #96]	@ (800ac14 <HAL_TIM_PWM_Start_DMA+0x418>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d115      	bne.n	800abe2 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800abbe:	4013      	ands	r3, r2
 800abc0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b06      	cmp	r3, #6
 800abc6:	d015      	beq.n	800abf4 <HAL_TIM_PWM_Start_DMA+0x3f8>
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abce:	d011      	beq.n	800abf4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f042 0201 	orr.w	r2, r2, #1
 800abde:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe0:	e008      	b.n	800abf4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f042 0201 	orr.w	r2, r2, #1
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	e000      	b.n	800abf6 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abf4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	0800b5cf 	.word	0x0800b5cf
 800ac04:	0800b677 	.word	0x0800b677
 800ac08:	0800b53d 	.word	0x0800b53d
 800ac0c:	40012c00 	.word	0x40012c00
 800ac10:	40013400 	.word	0x40013400
 800ac14:	40014000 	.word	0x40014000
 800ac18:	40014400 	.word	0x40014400
 800ac1c:	40014800 	.word	0x40014800
 800ac20:	40000400 	.word	0x40000400
 800ac24:	40000800 	.word	0x40000800
 800ac28:	00010007 	.word	0x00010007

0800ac2c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b0c      	cmp	r3, #12
 800ac3e:	d855      	bhi.n	800acec <HAL_TIM_PWM_Stop_DMA+0xc0>
 800ac40:	a201      	add	r2, pc, #4	@ (adr r2, 800ac48 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800ac42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac46:	bf00      	nop
 800ac48:	0800ac7d 	.word	0x0800ac7d
 800ac4c:	0800aced 	.word	0x0800aced
 800ac50:	0800aced 	.word	0x0800aced
 800ac54:	0800aced 	.word	0x0800aced
 800ac58:	0800ac99 	.word	0x0800ac99
 800ac5c:	0800aced 	.word	0x0800aced
 800ac60:	0800aced 	.word	0x0800aced
 800ac64:	0800aced 	.word	0x0800aced
 800ac68:	0800acb5 	.word	0x0800acb5
 800ac6c:	0800aced 	.word	0x0800aced
 800ac70:	0800aced 	.word	0x0800aced
 800ac74:	0800aced 	.word	0x0800aced
 800ac78:	0800acd1 	.word	0x0800acd1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68da      	ldr	r2, [r3, #12]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ac8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fc fd01 	bl	8007698 <HAL_DMA_Abort_IT>
      break;
 800ac96:	e02c      	b.n	800acf2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68da      	ldr	r2, [r3, #12]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aca6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acac:	4618      	mov	r0, r3
 800acae:	f7fc fcf3 	bl	8007698 <HAL_DMA_Abort_IT>
      break;
 800acb2:	e01e      	b.n	800acf2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800acc2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fc fce5 	bl	8007698 <HAL_DMA_Abort_IT>
      break;
 800acce:	e010      	b.n	800acf2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800acde:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fc fcd7 	bl	8007698 <HAL_DMA_Abort_IT>
      break;
 800acea:	e002      	b.n	800acf2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	73fb      	strb	r3, [r7, #15]
      break;
 800acf0:	bf00      	nop
  }

  if (status == HAL_OK)
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f040 8081 	bne.w	800adfc <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2200      	movs	r2, #0
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f001 f91a 	bl	800bf3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a3e      	ldr	r2, [pc, #248]	@ (800ae08 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d013      	beq.n	800ad3a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a3d      	ldr	r2, [pc, #244]	@ (800ae0c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d00e      	beq.n	800ad3a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a3b      	ldr	r2, [pc, #236]	@ (800ae10 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d009      	beq.n	800ad3a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a3a      	ldr	r2, [pc, #232]	@ (800ae14 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d004      	beq.n	800ad3a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a38      	ldr	r2, [pc, #224]	@ (800ae18 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d101      	bne.n	800ad3e <HAL_TIM_PWM_Stop_DMA+0x112>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e000      	b.n	800ad40 <HAL_TIM_PWM_Stop_DMA+0x114>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d017      	beq.n	800ad74 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6a1a      	ldr	r2, [r3, #32]
 800ad4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ad4e:	4013      	ands	r3, r2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10f      	bne.n	800ad74 <HAL_TIM_PWM_Stop_DMA+0x148>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6a1a      	ldr	r2, [r3, #32]
 800ad5a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ad5e:	4013      	ands	r3, r2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d107      	bne.n	800ad74 <HAL_TIM_PWM_Stop_DMA+0x148>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ad72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6a1a      	ldr	r2, [r3, #32]
 800ad7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ad7e:	4013      	ands	r3, r2
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10f      	bne.n	800ada4 <HAL_TIM_PWM_Stop_DMA+0x178>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6a1a      	ldr	r2, [r3, #32]
 800ad8a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ad8e:	4013      	ands	r3, r2
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d107      	bne.n	800ada4 <HAL_TIM_PWM_Stop_DMA+0x178>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f022 0201 	bic.w	r2, r2, #1
 800ada2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d104      	bne.n	800adb4 <HAL_TIM_PWM_Stop_DMA+0x188>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adb2:	e023      	b.n	800adfc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d104      	bne.n	800adc4 <HAL_TIM_PWM_Stop_DMA+0x198>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adc2:	e01b      	b.n	800adfc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2b08      	cmp	r3, #8
 800adc8:	d104      	bne.n	800add4 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800add2:	e013      	b.n	800adfc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b0c      	cmp	r3, #12
 800add8:	d104      	bne.n	800ade4 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ade2:	e00b      	b.n	800adfc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2b10      	cmp	r3, #16
 800ade8:	d104      	bne.n	800adf4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800adf2:	e003      	b.n	800adfc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	40012c00 	.word	0x40012c00
 800ae0c:	40013400 	.word	0x40013400
 800ae10:	40014000 	.word	0x40014000
 800ae14:	40014400 	.word	0x40014400
 800ae18:	40014800 	.word	0x40014800

0800ae1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d020      	beq.n	800ae80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f003 0302 	and.w	r3, r3, #2
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d01b      	beq.n	800ae80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f06f 0202 	mvn.w	r2, #2
 800ae50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	699b      	ldr	r3, [r3, #24]
 800ae5e:	f003 0303 	and.w	r3, r3, #3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fb40 	bl	800b4ec <HAL_TIM_IC_CaptureCallback>
 800ae6c:	e005      	b.n	800ae7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fb32 	bl	800b4d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7f7 fda1 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f003 0304 	and.w	r3, r3, #4
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d020      	beq.n	800aecc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01b      	beq.n	800aecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f06f 0204 	mvn.w	r2, #4
 800ae9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2202      	movs	r2, #2
 800aea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fb1a 	bl	800b4ec <HAL_TIM_IC_CaptureCallback>
 800aeb8:	e005      	b.n	800aec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fb0c 	bl	800b4d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7f7 fd7b 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d020      	beq.n	800af18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f003 0308 	and.w	r3, r3, #8
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d01b      	beq.n	800af18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f06f 0208 	mvn.w	r2, #8
 800aee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2204      	movs	r2, #4
 800aeee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	f003 0303 	and.w	r3, r3, #3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d003      	beq.n	800af06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 faf4 	bl	800b4ec <HAL_TIM_IC_CaptureCallback>
 800af04:	e005      	b.n	800af12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fae6 	bl	800b4d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7f7 fd55 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	f003 0310 	and.w	r3, r3, #16
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d020      	beq.n	800af64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f003 0310 	and.w	r3, r3, #16
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d01b      	beq.n	800af64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f06f 0210 	mvn.w	r2, #16
 800af34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2208      	movs	r2, #8
 800af3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af46:	2b00      	cmp	r3, #0
 800af48:	d003      	beq.n	800af52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 face 	bl	800b4ec <HAL_TIM_IC_CaptureCallback>
 800af50:	e005      	b.n	800af5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fac0 	bl	800b4d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7f7 fd2f 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00c      	beq.n	800af88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b00      	cmp	r3, #0
 800af76:	d007      	beq.n	800af88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f06f 0201 	mvn.w	r2, #1
 800af80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7f7 fefe 	bl	8002d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d104      	bne.n	800af9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00c      	beq.n	800afb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d007      	beq.n	800afb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800afae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f001 f875 	bl	800c0a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00c      	beq.n	800afda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d007      	beq.n	800afda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800afd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 f86d 	bl	800c0b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00c      	beq.n	800affe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	d007      	beq.n	800affe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa8b 	bl	800b514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f003 0320 	and.w	r3, r3, #32
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00c      	beq.n	800b022 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f003 0320 	and.w	r3, r3, #32
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d007      	beq.n	800b022 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f06f 0220 	mvn.w	r2, #32
 800b01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 f835 	bl	800c08c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00c      	beq.n	800b046 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 f841 	bl	800c0c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00c      	beq.n	800b06a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d007      	beq.n	800b06a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 f839 	bl	800c0dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00c      	beq.n	800b08e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d007      	beq.n	800b08e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 f831 	bl	800c0f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00c      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 f829 	bl	800c104 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d101      	bne.n	800b0da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	e0ff      	b.n	800b2da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b14      	cmp	r3, #20
 800b0e6:	f200 80f0 	bhi.w	800b2ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f0:	0800b145 	.word	0x0800b145
 800b0f4:	0800b2cb 	.word	0x0800b2cb
 800b0f8:	0800b2cb 	.word	0x0800b2cb
 800b0fc:	0800b2cb 	.word	0x0800b2cb
 800b100:	0800b185 	.word	0x0800b185
 800b104:	0800b2cb 	.word	0x0800b2cb
 800b108:	0800b2cb 	.word	0x0800b2cb
 800b10c:	0800b2cb 	.word	0x0800b2cb
 800b110:	0800b1c7 	.word	0x0800b1c7
 800b114:	0800b2cb 	.word	0x0800b2cb
 800b118:	0800b2cb 	.word	0x0800b2cb
 800b11c:	0800b2cb 	.word	0x0800b2cb
 800b120:	0800b207 	.word	0x0800b207
 800b124:	0800b2cb 	.word	0x0800b2cb
 800b128:	0800b2cb 	.word	0x0800b2cb
 800b12c:	0800b2cb 	.word	0x0800b2cb
 800b130:	0800b249 	.word	0x0800b249
 800b134:	0800b2cb 	.word	0x0800b2cb
 800b138:	0800b2cb 	.word	0x0800b2cb
 800b13c:	0800b2cb 	.word	0x0800b2cb
 800b140:	0800b289 	.word	0x0800b289
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 fb64 	bl	800b818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	699a      	ldr	r2, [r3, #24]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f042 0208 	orr.w	r2, r2, #8
 800b15e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	699a      	ldr	r2, [r3, #24]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f022 0204 	bic.w	r2, r2, #4
 800b16e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6999      	ldr	r1, [r3, #24]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	691a      	ldr	r2, [r3, #16]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	619a      	str	r2, [r3, #24]
      break;
 800b182:	e0a5      	b.n	800b2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fbd4 	bl	800b938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	699a      	ldr	r2, [r3, #24]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b19e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	699a      	ldr	r2, [r3, #24]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	6999      	ldr	r1, [r3, #24]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	021a      	lsls	r2, r3, #8
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	430a      	orrs	r2, r1
 800b1c2:	619a      	str	r2, [r3, #24]
      break;
 800b1c4:	e084      	b.n	800b2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fc3d 	bl	800ba4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	69da      	ldr	r2, [r3, #28]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f042 0208 	orr.w	r2, r2, #8
 800b1e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	69da      	ldr	r2, [r3, #28]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 0204 	bic.w	r2, r2, #4
 800b1f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69d9      	ldr	r1, [r3, #28]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	430a      	orrs	r2, r1
 800b202:	61da      	str	r2, [r3, #28]
      break;
 800b204:	e064      	b.n	800b2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fca5 	bl	800bb5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69da      	ldr	r2, [r3, #28]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69da      	ldr	r2, [r3, #28]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	69d9      	ldr	r1, [r3, #28]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	021a      	lsls	r2, r3, #8
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	61da      	str	r2, [r3, #28]
      break;
 800b246:	e043      	b.n	800b2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68b9      	ldr	r1, [r7, #8]
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 fd0e 	bl	800bc70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0208 	orr.w	r2, r2, #8
 800b262:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0204 	bic.w	r2, r2, #4
 800b272:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	691a      	ldr	r2, [r3, #16]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b286:	e023      	b.n	800b2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68b9      	ldr	r1, [r7, #8]
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 fd52 	bl	800bd38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	021a      	lsls	r2, r3, #8
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	430a      	orrs	r2, r1
 800b2c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b2c8:	e002      	b.n	800b2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop

0800b2e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d101      	bne.n	800b300 <HAL_TIM_ConfigClockSource+0x1c>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e0de      	b.n	800b4be <HAL_TIM_ConfigClockSource+0x1da>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b31e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b32a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a63      	ldr	r2, [pc, #396]	@ (800b4c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	f000 80a9 	beq.w	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b340:	4a61      	ldr	r2, [pc, #388]	@ (800b4c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b342:	4293      	cmp	r3, r2
 800b344:	f200 80ae 	bhi.w	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b348:	4a60      	ldr	r2, [pc, #384]	@ (800b4cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	f000 80a1 	beq.w	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b350:	4a5e      	ldr	r2, [pc, #376]	@ (800b4cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800b352:	4293      	cmp	r3, r2
 800b354:	f200 80a6 	bhi.w	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b358:	4a5d      	ldr	r2, [pc, #372]	@ (800b4d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	f000 8099 	beq.w	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b360:	4a5b      	ldr	r2, [pc, #364]	@ (800b4d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b362:	4293      	cmp	r3, r2
 800b364:	f200 809e 	bhi.w	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b368:	4a5a      	ldr	r2, [pc, #360]	@ (800b4d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	f000 8091 	beq.w	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b370:	4a58      	ldr	r2, [pc, #352]	@ (800b4d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b372:	4293      	cmp	r3, r2
 800b374:	f200 8096 	bhi.w	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b378:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b37c:	f000 8089 	beq.w	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b380:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b384:	f200 808e 	bhi.w	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b38c:	d03e      	beq.n	800b40c <HAL_TIM_ConfigClockSource+0x128>
 800b38e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b392:	f200 8087 	bhi.w	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b39a:	f000 8086 	beq.w	800b4aa <HAL_TIM_ConfigClockSource+0x1c6>
 800b39e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3a2:	d87f      	bhi.n	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3a4:	2b70      	cmp	r3, #112	@ 0x70
 800b3a6:	d01a      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0xfa>
 800b3a8:	2b70      	cmp	r3, #112	@ 0x70
 800b3aa:	d87b      	bhi.n	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3ac:	2b60      	cmp	r3, #96	@ 0x60
 800b3ae:	d050      	beq.n	800b452 <HAL_TIM_ConfigClockSource+0x16e>
 800b3b0:	2b60      	cmp	r3, #96	@ 0x60
 800b3b2:	d877      	bhi.n	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3b4:	2b50      	cmp	r3, #80	@ 0x50
 800b3b6:	d03c      	beq.n	800b432 <HAL_TIM_ConfigClockSource+0x14e>
 800b3b8:	2b50      	cmp	r3, #80	@ 0x50
 800b3ba:	d873      	bhi.n	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3bc:	2b40      	cmp	r3, #64	@ 0x40
 800b3be:	d058      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0x18e>
 800b3c0:	2b40      	cmp	r3, #64	@ 0x40
 800b3c2:	d86f      	bhi.n	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3c4:	2b30      	cmp	r3, #48	@ 0x30
 800b3c6:	d064      	beq.n	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b3c8:	2b30      	cmp	r3, #48	@ 0x30
 800b3ca:	d86b      	bhi.n	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	d060      	beq.n	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b3d0:	2b20      	cmp	r3, #32
 800b3d2:	d867      	bhi.n	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d05c      	beq.n	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b3d8:	2b10      	cmp	r3, #16
 800b3da:	d05a      	beq.n	800b492 <HAL_TIM_ConfigClockSource+0x1ae>
 800b3dc:	e062      	b.n	800b4a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3ee:	f000 fd85 	bl	800befc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b400:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	609a      	str	r2, [r3, #8]
      break;
 800b40a:	e04f      	b.n	800b4ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b41c:	f000 fd6e 	bl	800befc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689a      	ldr	r2, [r3, #8]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b42e:	609a      	str	r2, [r3, #8]
      break;
 800b430:	e03c      	b.n	800b4ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b43e:	461a      	mov	r2, r3
 800b440:	f000 fce0 	bl	800be04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2150      	movs	r1, #80	@ 0x50
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 fd39 	bl	800bec2 <TIM_ITRx_SetConfig>
      break;
 800b450:	e02c      	b.n	800b4ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b45e:	461a      	mov	r2, r3
 800b460:	f000 fcff 	bl	800be62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2160      	movs	r1, #96	@ 0x60
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 fd29 	bl	800bec2 <TIM_ITRx_SetConfig>
      break;
 800b470:	e01c      	b.n	800b4ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b47e:	461a      	mov	r2, r3
 800b480:	f000 fcc0 	bl	800be04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2140      	movs	r1, #64	@ 0x40
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 fd19 	bl	800bec2 <TIM_ITRx_SetConfig>
      break;
 800b490:	e00c      	b.n	800b4ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4619      	mov	r1, r3
 800b49c:	4610      	mov	r0, r2
 800b49e:	f000 fd10 	bl	800bec2 <TIM_ITRx_SetConfig>
      break;
 800b4a2:	e003      	b.n	800b4ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a8:	e000      	b.n	800b4ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800b4aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	00100070 	.word	0x00100070
 800b4cc:	00100040 	.word	0x00100040
 800b4d0:	00100030 	.word	0x00100030
 800b4d4:	00100020 	.word	0x00100020

0800b4d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b548:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	429a      	cmp	r2, r3
 800b552:	d107      	bne.n	800b564 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2201      	movs	r2, #1
 800b558:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b562:	e02a      	b.n	800b5ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d107      	bne.n	800b57e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2202      	movs	r2, #2
 800b572:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b57c:	e01d      	b.n	800b5ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	429a      	cmp	r2, r3
 800b586:	d107      	bne.n	800b598 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2204      	movs	r2, #4
 800b58c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b596:	e010      	b.n	800b5ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d107      	bne.n	800b5b2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2208      	movs	r2, #8
 800b5a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b5b0:	e003      	b.n	800b5ba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7ff ffb4 	bl	800b528 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	771a      	strb	r2, [r3, #28]
}
 800b5c6:	bf00      	nop
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d10b      	bne.n	800b5fe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	69db      	ldr	r3, [r3, #28]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d136      	bne.n	800b662 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5fc:	e031      	b.n	800b662 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d10b      	bne.n	800b620 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2202      	movs	r2, #2
 800b60c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d125      	bne.n	800b662 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b61e:	e020      	b.n	800b662 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	429a      	cmp	r2, r3
 800b628:	d10b      	bne.n	800b642 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2204      	movs	r2, #4
 800b62e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	69db      	ldr	r3, [r3, #28]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d114      	bne.n	800b662 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b640:	e00f      	b.n	800b662 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d10a      	bne.n	800b662 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2208      	movs	r2, #8
 800b650:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	69db      	ldr	r3, [r3, #28]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d103      	bne.n	800b662 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7f7 f9aa 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	771a      	strb	r2, [r3, #28]
}
 800b66e:	bf00      	nop
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b682:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d103      	bne.n	800b696 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2201      	movs	r2, #1
 800b692:	771a      	strb	r2, [r3, #28]
 800b694:	e019      	b.n	800b6ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d103      	bne.n	800b6a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	771a      	strb	r2, [r3, #28]
 800b6a6:	e010      	b.n	800b6ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d103      	bne.n	800b6ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2204      	movs	r2, #4
 800b6b6:	771a      	strb	r2, [r3, #28]
 800b6b8:	e007      	b.n	800b6ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d102      	bne.n	800b6ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2208      	movs	r2, #8
 800b6c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7ff ff18 	bl	800b500 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	771a      	strb	r2, [r3, #28]
}
 800b6d6:	bf00      	nop
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a42      	ldr	r2, [pc, #264]	@ (800b7fc <TIM_Base_SetConfig+0x11c>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d00f      	beq.n	800b718 <TIM_Base_SetConfig+0x38>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6fe:	d00b      	beq.n	800b718 <TIM_Base_SetConfig+0x38>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a3f      	ldr	r2, [pc, #252]	@ (800b800 <TIM_Base_SetConfig+0x120>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d007      	beq.n	800b718 <TIM_Base_SetConfig+0x38>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a3e      	ldr	r2, [pc, #248]	@ (800b804 <TIM_Base_SetConfig+0x124>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d003      	beq.n	800b718 <TIM_Base_SetConfig+0x38>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a3d      	ldr	r2, [pc, #244]	@ (800b808 <TIM_Base_SetConfig+0x128>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d108      	bne.n	800b72a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b71e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a33      	ldr	r2, [pc, #204]	@ (800b7fc <TIM_Base_SetConfig+0x11c>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d01b      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b738:	d017      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a30      	ldr	r2, [pc, #192]	@ (800b800 <TIM_Base_SetConfig+0x120>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d013      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a2f      	ldr	r2, [pc, #188]	@ (800b804 <TIM_Base_SetConfig+0x124>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00f      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a2e      	ldr	r2, [pc, #184]	@ (800b808 <TIM_Base_SetConfig+0x128>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d00b      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a2d      	ldr	r2, [pc, #180]	@ (800b80c <TIM_Base_SetConfig+0x12c>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d007      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a2c      	ldr	r2, [pc, #176]	@ (800b810 <TIM_Base_SetConfig+0x130>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d003      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a2b      	ldr	r2, [pc, #172]	@ (800b814 <TIM_Base_SetConfig+0x134>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d108      	bne.n	800b77c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a16      	ldr	r2, [pc, #88]	@ (800b7fc <TIM_Base_SetConfig+0x11c>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d00f      	beq.n	800b7c8 <TIM_Base_SetConfig+0xe8>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a17      	ldr	r2, [pc, #92]	@ (800b808 <TIM_Base_SetConfig+0x128>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d00b      	beq.n	800b7c8 <TIM_Base_SetConfig+0xe8>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a16      	ldr	r2, [pc, #88]	@ (800b80c <TIM_Base_SetConfig+0x12c>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d007      	beq.n	800b7c8 <TIM_Base_SetConfig+0xe8>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a15      	ldr	r2, [pc, #84]	@ (800b810 <TIM_Base_SetConfig+0x130>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d003      	beq.n	800b7c8 <TIM_Base_SetConfig+0xe8>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a14      	ldr	r2, [pc, #80]	@ (800b814 <TIM_Base_SetConfig+0x134>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d103      	bne.n	800b7d0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	691a      	ldr	r2, [r3, #16]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d105      	bne.n	800b7ee <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	f023 0201 	bic.w	r2, r3, #1
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	611a      	str	r2, [r3, #16]
  }
}
 800b7ee:	bf00      	nop
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	40012c00 	.word	0x40012c00
 800b800:	40000400 	.word	0x40000400
 800b804:	40000800 	.word	0x40000800
 800b808:	40013400 	.word	0x40013400
 800b80c:	40014000 	.word	0x40014000
 800b810:	40014400 	.word	0x40014400
 800b814:	40014800 	.word	0x40014800

0800b818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a1b      	ldr	r3, [r3, #32]
 800b82c:	f023 0201 	bic.w	r2, r3, #1
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f023 0303 	bic.w	r3, r3, #3
 800b852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	f023 0302 	bic.w	r3, r3, #2
 800b864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a2c      	ldr	r2, [pc, #176]	@ (800b924 <TIM_OC1_SetConfig+0x10c>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d00f      	beq.n	800b898 <TIM_OC1_SetConfig+0x80>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a2b      	ldr	r2, [pc, #172]	@ (800b928 <TIM_OC1_SetConfig+0x110>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d00b      	beq.n	800b898 <TIM_OC1_SetConfig+0x80>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a2a      	ldr	r2, [pc, #168]	@ (800b92c <TIM_OC1_SetConfig+0x114>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d007      	beq.n	800b898 <TIM_OC1_SetConfig+0x80>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a29      	ldr	r2, [pc, #164]	@ (800b930 <TIM_OC1_SetConfig+0x118>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d003      	beq.n	800b898 <TIM_OC1_SetConfig+0x80>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a28      	ldr	r2, [pc, #160]	@ (800b934 <TIM_OC1_SetConfig+0x11c>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d10c      	bne.n	800b8b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f023 0308 	bic.w	r3, r3, #8
 800b89e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	697a      	ldr	r2, [r7, #20]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f023 0304 	bic.w	r3, r3, #4
 800b8b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a1b      	ldr	r2, [pc, #108]	@ (800b924 <TIM_OC1_SetConfig+0x10c>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d00f      	beq.n	800b8da <TIM_OC1_SetConfig+0xc2>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a1a      	ldr	r2, [pc, #104]	@ (800b928 <TIM_OC1_SetConfig+0x110>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d00b      	beq.n	800b8da <TIM_OC1_SetConfig+0xc2>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a19      	ldr	r2, [pc, #100]	@ (800b92c <TIM_OC1_SetConfig+0x114>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d007      	beq.n	800b8da <TIM_OC1_SetConfig+0xc2>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a18      	ldr	r2, [pc, #96]	@ (800b930 <TIM_OC1_SetConfig+0x118>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d003      	beq.n	800b8da <TIM_OC1_SetConfig+0xc2>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a17      	ldr	r2, [pc, #92]	@ (800b934 <TIM_OC1_SetConfig+0x11c>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d111      	bne.n	800b8fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	621a      	str	r2, [r3, #32]
}
 800b918:	bf00      	nop
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	40012c00 	.word	0x40012c00
 800b928:	40013400 	.word	0x40013400
 800b92c:	40014000 	.word	0x40014000
 800b930:	40014400 	.word	0x40014400
 800b934:	40014800 	.word	0x40014800

0800b938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a1b      	ldr	r3, [r3, #32]
 800b94c:	f023 0210 	bic.w	r2, r3, #16
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	021b      	lsls	r3, r3, #8
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f023 0320 	bic.w	r3, r3, #32
 800b986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	011b      	lsls	r3, r3, #4
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	4313      	orrs	r3, r2
 800b992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a28      	ldr	r2, [pc, #160]	@ (800ba38 <TIM_OC2_SetConfig+0x100>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d003      	beq.n	800b9a4 <TIM_OC2_SetConfig+0x6c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a27      	ldr	r2, [pc, #156]	@ (800ba3c <TIM_OC2_SetConfig+0x104>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d10d      	bne.n	800b9c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	011b      	lsls	r3, r3, #4
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a1d      	ldr	r2, [pc, #116]	@ (800ba38 <TIM_OC2_SetConfig+0x100>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d00f      	beq.n	800b9e8 <TIM_OC2_SetConfig+0xb0>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a1c      	ldr	r2, [pc, #112]	@ (800ba3c <TIM_OC2_SetConfig+0x104>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d00b      	beq.n	800b9e8 <TIM_OC2_SetConfig+0xb0>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a1b      	ldr	r2, [pc, #108]	@ (800ba40 <TIM_OC2_SetConfig+0x108>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d007      	beq.n	800b9e8 <TIM_OC2_SetConfig+0xb0>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a1a      	ldr	r2, [pc, #104]	@ (800ba44 <TIM_OC2_SetConfig+0x10c>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d003      	beq.n	800b9e8 <TIM_OC2_SetConfig+0xb0>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a19      	ldr	r2, [pc, #100]	@ (800ba48 <TIM_OC2_SetConfig+0x110>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d113      	bne.n	800ba10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	693a      	ldr	r2, [r7, #16]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	621a      	str	r2, [r3, #32]
}
 800ba2a:	bf00      	nop
 800ba2c:	371c      	adds	r7, #28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	40012c00 	.word	0x40012c00
 800ba3c:	40013400 	.word	0x40013400
 800ba40:	40014000 	.word	0x40014000
 800ba44:	40014400 	.word	0x40014400
 800ba48:	40014800 	.word	0x40014800

0800ba4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f023 0303 	bic.w	r3, r3, #3
 800ba86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	021b      	lsls	r3, r3, #8
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a27      	ldr	r2, [pc, #156]	@ (800bb48 <TIM_OC3_SetConfig+0xfc>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d003      	beq.n	800bab6 <TIM_OC3_SetConfig+0x6a>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a26      	ldr	r2, [pc, #152]	@ (800bb4c <TIM_OC3_SetConfig+0x100>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d10d      	bne.n	800bad2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800babc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	021b      	lsls	r3, r3, #8
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a1c      	ldr	r2, [pc, #112]	@ (800bb48 <TIM_OC3_SetConfig+0xfc>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d00f      	beq.n	800bafa <TIM_OC3_SetConfig+0xae>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a1b      	ldr	r2, [pc, #108]	@ (800bb4c <TIM_OC3_SetConfig+0x100>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d00b      	beq.n	800bafa <TIM_OC3_SetConfig+0xae>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a1a      	ldr	r2, [pc, #104]	@ (800bb50 <TIM_OC3_SetConfig+0x104>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d007      	beq.n	800bafa <TIM_OC3_SetConfig+0xae>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a19      	ldr	r2, [pc, #100]	@ (800bb54 <TIM_OC3_SetConfig+0x108>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d003      	beq.n	800bafa <TIM_OC3_SetConfig+0xae>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a18      	ldr	r2, [pc, #96]	@ (800bb58 <TIM_OC3_SetConfig+0x10c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d113      	bne.n	800bb22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	011b      	lsls	r3, r3, #4
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	699b      	ldr	r3, [r3, #24]
 800bb1a:	011b      	lsls	r3, r3, #4
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	621a      	str	r2, [r3, #32]
}
 800bb3c:	bf00      	nop
 800bb3e:	371c      	adds	r7, #28
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	40012c00 	.word	0x40012c00
 800bb4c:	40013400 	.word	0x40013400
 800bb50:	40014000 	.word	0x40014000
 800bb54:	40014400 	.word	0x40014400
 800bb58:	40014800 	.word	0x40014800

0800bb5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a1b      	ldr	r3, [r3, #32]
 800bb70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	021b      	lsls	r3, r3, #8
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bbaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	031b      	lsls	r3, r3, #12
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a28      	ldr	r2, [pc, #160]	@ (800bc5c <TIM_OC4_SetConfig+0x100>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d003      	beq.n	800bbc8 <TIM_OC4_SetConfig+0x6c>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a27      	ldr	r2, [pc, #156]	@ (800bc60 <TIM_OC4_SetConfig+0x104>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d10d      	bne.n	800bbe4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bbce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	031b      	lsls	r3, r3, #12
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbe2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a1d      	ldr	r2, [pc, #116]	@ (800bc5c <TIM_OC4_SetConfig+0x100>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00f      	beq.n	800bc0c <TIM_OC4_SetConfig+0xb0>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a1c      	ldr	r2, [pc, #112]	@ (800bc60 <TIM_OC4_SetConfig+0x104>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d00b      	beq.n	800bc0c <TIM_OC4_SetConfig+0xb0>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a1b      	ldr	r2, [pc, #108]	@ (800bc64 <TIM_OC4_SetConfig+0x108>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d007      	beq.n	800bc0c <TIM_OC4_SetConfig+0xb0>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a1a      	ldr	r2, [pc, #104]	@ (800bc68 <TIM_OC4_SetConfig+0x10c>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d003      	beq.n	800bc0c <TIM_OC4_SetConfig+0xb0>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a19      	ldr	r2, [pc, #100]	@ (800bc6c <TIM_OC4_SetConfig+0x110>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d113      	bne.n	800bc34 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	019b      	lsls	r3, r3, #6
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	019b      	lsls	r3, r3, #6
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	621a      	str	r2, [r3, #32]
}
 800bc4e:	bf00      	nop
 800bc50:	371c      	adds	r7, #28
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	40012c00 	.word	0x40012c00
 800bc60:	40013400 	.word	0x40013400
 800bc64:	40014000 	.word	0x40014000
 800bc68:	40014400 	.word	0x40014400
 800bc6c:	40014800 	.word	0x40014800

0800bc70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a1b      	ldr	r3, [r3, #32]
 800bc84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bcb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	041b      	lsls	r3, r3, #16
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a17      	ldr	r2, [pc, #92]	@ (800bd24 <TIM_OC5_SetConfig+0xb4>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d00f      	beq.n	800bcea <TIM_OC5_SetConfig+0x7a>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a16      	ldr	r2, [pc, #88]	@ (800bd28 <TIM_OC5_SetConfig+0xb8>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d00b      	beq.n	800bcea <TIM_OC5_SetConfig+0x7a>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a15      	ldr	r2, [pc, #84]	@ (800bd2c <TIM_OC5_SetConfig+0xbc>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d007      	beq.n	800bcea <TIM_OC5_SetConfig+0x7a>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a14      	ldr	r2, [pc, #80]	@ (800bd30 <TIM_OC5_SetConfig+0xc0>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d003      	beq.n	800bcea <TIM_OC5_SetConfig+0x7a>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a13      	ldr	r2, [pc, #76]	@ (800bd34 <TIM_OC5_SetConfig+0xc4>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d109      	bne.n	800bcfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	021b      	lsls	r3, r3, #8
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	621a      	str	r2, [r3, #32]
}
 800bd18:	bf00      	nop
 800bd1a:	371c      	adds	r7, #28
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	40012c00 	.word	0x40012c00
 800bd28:	40013400 	.word	0x40013400
 800bd2c:	40014000 	.word	0x40014000
 800bd30:	40014400 	.word	0x40014400
 800bd34:	40014800 	.word	0x40014800

0800bd38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a1b      	ldr	r3, [r3, #32]
 800bd4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	021b      	lsls	r3, r3, #8
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	051b      	lsls	r3, r3, #20
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a18      	ldr	r2, [pc, #96]	@ (800bdf0 <TIM_OC6_SetConfig+0xb8>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d00f      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x7c>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a17      	ldr	r2, [pc, #92]	@ (800bdf4 <TIM_OC6_SetConfig+0xbc>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d00b      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x7c>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a16      	ldr	r2, [pc, #88]	@ (800bdf8 <TIM_OC6_SetConfig+0xc0>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d007      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x7c>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a15      	ldr	r2, [pc, #84]	@ (800bdfc <TIM_OC6_SetConfig+0xc4>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d003      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x7c>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a14      	ldr	r2, [pc, #80]	@ (800be00 <TIM_OC6_SetConfig+0xc8>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d109      	bne.n	800bdc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	029b      	lsls	r3, r3, #10
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	621a      	str	r2, [r3, #32]
}
 800bde2:	bf00      	nop
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	40012c00 	.word	0x40012c00
 800bdf4:	40013400 	.word	0x40013400
 800bdf8:	40014000 	.word	0x40014000
 800bdfc:	40014400 	.word	0x40014400
 800be00:	40014800 	.word	0x40014800

0800be04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be04:	b480      	push	{r7}
 800be06:	b087      	sub	sp, #28
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6a1b      	ldr	r3, [r3, #32]
 800be14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	f023 0201 	bic.w	r2, r3, #1
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	011b      	lsls	r3, r3, #4
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	4313      	orrs	r3, r2
 800be38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f023 030a 	bic.w	r3, r3, #10
 800be40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	4313      	orrs	r3, r2
 800be48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	621a      	str	r2, [r3, #32]
}
 800be56:	bf00      	nop
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be62:	b480      	push	{r7}
 800be64:	b087      	sub	sp, #28
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6a1b      	ldr	r3, [r3, #32]
 800be78:	f023 0210 	bic.w	r2, r3, #16
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	031b      	lsls	r3, r3, #12
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	4313      	orrs	r3, r2
 800be96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800be9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	011b      	lsls	r3, r3, #4
 800bea4:	697a      	ldr	r2, [r7, #20]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	697a      	ldr	r2, [r7, #20]
 800beb4:	621a      	str	r2, [r3, #32]
}
 800beb6:	bf00      	nop
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b085      	sub	sp, #20
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bedc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	f043 0307 	orr.w	r3, r3, #7
 800bee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	609a      	str	r2, [r3, #8]
}
 800bef0:	bf00      	nop
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800befc:	b480      	push	{r7}
 800befe:	b087      	sub	sp, #28
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	021a      	lsls	r2, r3, #8
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	431a      	orrs	r2, r3
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	609a      	str	r2, [r3, #8]
}
 800bf30:	bf00      	nop
 800bf32:	371c      	adds	r7, #28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f003 031f 	and.w	r3, r3, #31
 800bf4e:	2201      	movs	r2, #1
 800bf50:	fa02 f303 	lsl.w	r3, r2, r3
 800bf54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6a1a      	ldr	r2, [r3, #32]
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	43db      	mvns	r3, r3
 800bf5e:	401a      	ands	r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6a1a      	ldr	r2, [r3, #32]
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f003 031f 	and.w	r3, r3, #31
 800bf6e:	6879      	ldr	r1, [r7, #4]
 800bf70:	fa01 f303 	lsl.w	r3, r1, r3
 800bf74:	431a      	orrs	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	621a      	str	r2, [r3, #32]
}
 800bf7a:	bf00      	nop
 800bf7c:	371c      	adds	r7, #28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
	...

0800bf88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d101      	bne.n	800bfa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf9c:	2302      	movs	r3, #2
 800bf9e:	e065      	b.n	800c06c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2202      	movs	r2, #2
 800bfac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a2c      	ldr	r2, [pc, #176]	@ (800c078 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d004      	beq.n	800bfd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a2b      	ldr	r2, [pc, #172]	@ (800c07c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d108      	bne.n	800bfe6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bfda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bfec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a1b      	ldr	r2, [pc, #108]	@ (800c078 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d018      	beq.n	800c040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c016:	d013      	beq.n	800c040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a18      	ldr	r2, [pc, #96]	@ (800c080 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d00e      	beq.n	800c040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a17      	ldr	r2, [pc, #92]	@ (800c084 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d009      	beq.n	800c040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a12      	ldr	r2, [pc, #72]	@ (800c07c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d004      	beq.n	800c040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a13      	ldr	r2, [pc, #76]	@ (800c088 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d10c      	bne.n	800c05a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	4313      	orrs	r3, r2
 800c050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	40012c00 	.word	0x40012c00
 800c07c:	40013400 	.word	0x40013400
 800c080:	40000400 	.word	0x40000400
 800c084:	40000800 	.word	0x40000800
 800c088:	40014000 	.word	0x40014000

0800c08c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e042      	b.n	800c1b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7f8 fc7d 	bl	8004a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2224      	movs	r2, #36	@ 0x24
 800c146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 0201 	bic.w	r2, r2, #1
 800c158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d002      	beq.n	800c168 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f001 f894 	bl	800d290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 fdc5 	bl	800ccf8 <UART_SetConfig>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b01      	cmp	r3, #1
 800c172:	d101      	bne.n	800c178 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e01b      	b.n	800c1b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689a      	ldr	r2, [r3, #8]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f042 0201 	orr.w	r2, r2, #1
 800c1a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 f913 	bl	800d3d4 <UART_CheckIdleState>
 800c1ae:	4603      	mov	r3, r0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	@ 0x28
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	603b      	str	r3, [r7, #0]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1ce:	2b20      	cmp	r3, #32
 800c1d0:	d17b      	bne.n	800c2ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <HAL_UART_Transmit+0x26>
 800c1d8:	88fb      	ldrh	r3, [r7, #6]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e074      	b.n	800c2cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2221      	movs	r2, #33	@ 0x21
 800c1ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1f2:	f7f9 fb11 	bl	8005818 <HAL_GetTick>
 800c1f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	88fa      	ldrh	r2, [r7, #6]
 800c1fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	88fa      	ldrh	r2, [r7, #6]
 800c204:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c210:	d108      	bne.n	800c224 <HAL_UART_Transmit+0x6c>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d104      	bne.n	800c224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	61bb      	str	r3, [r7, #24]
 800c222:	e003      	b.n	800c22c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c22c:	e030      	b.n	800c290 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	2200      	movs	r2, #0
 800c236:	2180      	movs	r1, #128	@ 0x80
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f001 f975 	bl	800d528 <UART_WaitOnFlagUntilTimeout>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2220      	movs	r2, #32
 800c248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c24c:	2303      	movs	r3, #3
 800c24e:	e03d      	b.n	800c2cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10b      	bne.n	800c26e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	881b      	ldrh	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c264:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	3302      	adds	r3, #2
 800c26a:	61bb      	str	r3, [r7, #24]
 800c26c:	e007      	b.n	800c27e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	781a      	ldrb	r2, [r3, #0]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	3301      	adds	r3, #1
 800c27c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c284:	b29b      	uxth	r3, r3
 800c286:	3b01      	subs	r3, #1
 800c288:	b29a      	uxth	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c296:	b29b      	uxth	r3, r3
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1c8      	bne.n	800c22e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2140      	movs	r1, #64	@ 0x40
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f001 f93e 	bl	800d528 <UART_WaitOnFlagUntilTimeout>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d005      	beq.n	800c2be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2220      	movs	r2, #32
 800c2b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e006      	b.n	800c2cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e000      	b.n	800c2cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c2ca:	2302      	movs	r3, #2
  }
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3720      	adds	r7, #32
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08a      	sub	sp, #40	@ 0x28
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2e8:	2b20      	cmp	r3, #32
 800c2ea:	d137      	bne.n	800c35c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <HAL_UART_Receive_IT+0x24>
 800c2f2:	88fb      	ldrh	r3, [r7, #6]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e030      	b.n	800c35e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a18      	ldr	r2, [pc, #96]	@ (800c368 <HAL_UART_Receive_IT+0x94>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d01f      	beq.n	800c34c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c316:	2b00      	cmp	r3, #0
 800c318:	d018      	beq.n	800c34c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	e853 3f00 	ldrex	r3, [r3]
 800c326:	613b      	str	r3, [r7, #16]
   return(result);
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c32e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c338:	623b      	str	r3, [r7, #32]
 800c33a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33c:	69f9      	ldr	r1, [r7, #28]
 800c33e:	6a3a      	ldr	r2, [r7, #32]
 800c340:	e841 2300 	strex	r3, r2, [r1]
 800c344:	61bb      	str	r3, [r7, #24]
   return(result);
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e6      	bne.n	800c31a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c34c:	88fb      	ldrh	r3, [r7, #6]
 800c34e:	461a      	mov	r2, r3
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f001 f956 	bl	800d604 <UART_Start_Receive_IT>
 800c358:	4603      	mov	r3, r0
 800c35a:	e000      	b.n	800c35e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c35c:	2302      	movs	r3, #2
  }
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3728      	adds	r7, #40	@ 0x28
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	40008000 	.word	0x40008000

0800c36c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08a      	sub	sp, #40	@ 0x28
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	4613      	mov	r3, r2
 800c378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c380:	2b20      	cmp	r3, #32
 800c382:	d137      	bne.n	800c3f4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d002      	beq.n	800c390 <HAL_UART_Receive_DMA+0x24>
 800c38a:	88fb      	ldrh	r3, [r7, #6]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d101      	bne.n	800c394 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	e030      	b.n	800c3f6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a18      	ldr	r2, [pc, #96]	@ (800c400 <HAL_UART_Receive_DMA+0x94>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d01f      	beq.n	800c3e4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d018      	beq.n	800c3e4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	e853 3f00 	ldrex	r3, [r3]
 800c3be:	613b      	str	r3, [r7, #16]
   return(result);
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c3c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d0:	623b      	str	r3, [r7, #32]
 800c3d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d4:	69f9      	ldr	r1, [r7, #28]
 800c3d6:	6a3a      	ldr	r2, [r7, #32]
 800c3d8:	e841 2300 	strex	r3, r2, [r1]
 800c3dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1e6      	bne.n	800c3b2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c3e4:	88fb      	ldrh	r3, [r7, #6]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	68b9      	ldr	r1, [r7, #8]
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f001 fa2c 	bl	800d848 <UART_Start_Receive_DMA>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	e000      	b.n	800c3f6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c3f4:	2302      	movs	r3, #2
  }
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3728      	adds	r7, #40	@ 0x28
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	40008000 	.word	0x40008000

0800c404 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b0a0      	sub	sp, #128	@ 0x80
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c414:	e853 3f00 	ldrex	r3, [r3]
 800c418:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c41a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c41c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800c420:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	461a      	mov	r2, r3
 800c428:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c42a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c42c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c430:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c432:	e841 2300 	strex	r3, r2, [r1]
 800c436:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c438:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e6      	bne.n	800c40c <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c448:	e853 3f00 	ldrex	r3, [r3]
 800c44c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c44e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c450:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800c454:	f023 0301 	bic.w	r3, r3, #1
 800c458:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3308      	adds	r3, #8
 800c460:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c462:	657a      	str	r2, [r7, #84]	@ 0x54
 800c464:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c466:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c468:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c46a:	e841 2300 	strex	r3, r2, [r1]
 800c46e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1e3      	bne.n	800c43e <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d118      	bne.n	800c4b0 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c486:	e853 3f00 	ldrex	r3, [r3]
 800c48a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48e:	f023 0310 	bic.w	r3, r3, #16
 800c492:	677b      	str	r3, [r7, #116]	@ 0x74
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c49c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c49e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4a4:	e841 2300 	strex	r3, r2, [r1]
 800c4a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1e6      	bne.n	800c47e <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4ba:	2b80      	cmp	r3, #128	@ 0x80
 800c4bc:	d137      	bne.n	800c52e <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	e853 3f00 	ldrex	r3, [r3]
 800c4cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c4de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4e6:	e841 2300 	strex	r3, r2, [r1]
 800c4ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1e5      	bne.n	800c4be <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d019      	beq.n	800c52e <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4fe:	2200      	movs	r2, #0
 800c500:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c506:	4618      	mov	r0, r3
 800c508:	f7fb f86d 	bl	80075e6 <HAL_DMA_Abort>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00d      	beq.n	800c52e <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c516:	4618      	mov	r0, r3
 800c518:	f7fb f9d4 	bl	80078c4 <HAL_DMA_GetError>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b20      	cmp	r3, #32
 800c520:	d105      	bne.n	800c52e <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2210      	movs	r2, #16
 800c526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e073      	b.n	800c616 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c538:	2b40      	cmp	r3, #64	@ 0x40
 800c53a:	d13b      	bne.n	800c5b4 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3308      	adds	r3, #8
 800c542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	e853 3f00 	ldrex	r3, [r3]
 800c54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	3308      	adds	r3, #8
 800c55a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c55c:	61ba      	str	r2, [r7, #24]
 800c55e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c560:	6979      	ldr	r1, [r7, #20]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	e841 2300 	strex	r3, r2, [r1]
 800c568:	613b      	str	r3, [r7, #16]
   return(result);
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1e5      	bne.n	800c53c <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c576:	2b00      	cmp	r3, #0
 800c578:	d01c      	beq.n	800c5b4 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c580:	2200      	movs	r2, #0
 800c582:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fb f82b 	bl	80075e6 <HAL_DMA_Abort>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00e      	beq.n	800c5b4 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fb f991 	bl	80078c4 <HAL_DMA_GetError>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b20      	cmp	r3, #32
 800c5a6:	d105      	bne.n	800c5b4 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2210      	movs	r2, #16
 800c5ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	e030      	b.n	800c616 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	220f      	movs	r2, #15
 800c5ca:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5d4:	d107      	bne.n	800c5e6 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	699a      	ldr	r2, [r3, #24]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f042 0210 	orr.w	r2, r2, #16
 800c5e4:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	699a      	ldr	r2, [r3, #24]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f042 0208 	orr.w	r2, r2, #8
 800c5f4:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2220      	movs	r2, #32
 800c5fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2220      	movs	r2, #32
 800c602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3780      	adds	r7, #128	@ 0x80
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
	...

0800c620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b0ba      	sub	sp, #232	@ 0xe8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	69db      	ldr	r3, [r3, #28]
 800c62e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c64a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c64e:	4013      	ands	r3, r2
 800c650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d11b      	bne.n	800c694 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c660:	f003 0320 	and.w	r3, r3, #32
 800c664:	2b00      	cmp	r3, #0
 800c666:	d015      	beq.n	800c694 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c66c:	f003 0320 	and.w	r3, r3, #32
 800c670:	2b00      	cmp	r3, #0
 800c672:	d105      	bne.n	800c680 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d009      	beq.n	800c694 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 8300 	beq.w	800cc8a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	4798      	blx	r3
      }
      return;
 800c692:	e2fa      	b.n	800cc8a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 8123 	beq.w	800c8e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c69e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c6a2:	4b8d      	ldr	r3, [pc, #564]	@ (800c8d8 <HAL_UART_IRQHandler+0x2b8>)
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c6aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c6ae:	4b8b      	ldr	r3, [pc, #556]	@ (800c8dc <HAL_UART_IRQHandler+0x2bc>)
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 8116 	beq.w	800c8e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d011      	beq.n	800c6e8 <HAL_UART_IRQHandler+0xc8>
 800c6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00b      	beq.n	800c6e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6de:	f043 0201 	orr.w	r2, r3, #1
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d011      	beq.n	800c718 <HAL_UART_IRQHandler+0xf8>
 800c6f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00b      	beq.n	800c718 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2202      	movs	r2, #2
 800c706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c70e:	f043 0204 	orr.w	r2, r3, #4
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c71c:	f003 0304 	and.w	r3, r3, #4
 800c720:	2b00      	cmp	r3, #0
 800c722:	d011      	beq.n	800c748 <HAL_UART_IRQHandler+0x128>
 800c724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00b      	beq.n	800c748 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2204      	movs	r2, #4
 800c736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c73e:	f043 0202 	orr.w	r2, r3, #2
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c74c:	f003 0308 	and.w	r3, r3, #8
 800c750:	2b00      	cmp	r3, #0
 800c752:	d017      	beq.n	800c784 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c758:	f003 0320 	and.w	r3, r3, #32
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d105      	bne.n	800c76c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c760:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c764:	4b5c      	ldr	r3, [pc, #368]	@ (800c8d8 <HAL_UART_IRQHandler+0x2b8>)
 800c766:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00b      	beq.n	800c784 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2208      	movs	r2, #8
 800c772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c77a:	f043 0208 	orr.w	r2, r3, #8
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d012      	beq.n	800c7b6 <HAL_UART_IRQHandler+0x196>
 800c790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c794:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00c      	beq.n	800c7b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c7a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7ac:	f043 0220 	orr.w	r2, r3, #32
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f000 8266 	beq.w	800cc8e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c6:	f003 0320 	and.w	r3, r3, #32
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d013      	beq.n	800c7f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7d2:	f003 0320 	and.w	r3, r3, #32
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d105      	bne.n	800c7e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d007      	beq.n	800c7f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c80a:	2b40      	cmp	r3, #64	@ 0x40
 800c80c:	d005      	beq.n	800c81a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c80e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c812:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c816:	2b00      	cmp	r3, #0
 800c818:	d054      	beq.n	800c8c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f001 f8fb 	bl	800da16 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c82a:	2b40      	cmp	r3, #64	@ 0x40
 800c82c:	d146      	bne.n	800c8bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	3308      	adds	r3, #8
 800c834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c838:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c83c:	e853 3f00 	ldrex	r3, [r3]
 800c840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c84c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3308      	adds	r3, #8
 800c856:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c85a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c85e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c86a:	e841 2300 	strex	r3, r2, [r1]
 800c86e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1d9      	bne.n	800c82e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c880:	2b00      	cmp	r3, #0
 800c882:	d017      	beq.n	800c8b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c88a:	4a15      	ldr	r2, [pc, #84]	@ (800c8e0 <HAL_UART_IRQHandler+0x2c0>)
 800c88c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c894:	4618      	mov	r0, r3
 800c896:	f7fa feff 	bl	8007698 <HAL_DMA_Abort_IT>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d019      	beq.n	800c8d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8b2:	e00f      	b.n	800c8d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fa09 	bl	800cccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ba:	e00b      	b.n	800c8d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fa05 	bl	800cccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8c2:	e007      	b.n	800c8d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fa01 	bl	800cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c8d2:	e1dc      	b.n	800cc8e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d4:	bf00      	nop
    return;
 800c8d6:	e1da      	b.n	800cc8e <HAL_UART_IRQHandler+0x66e>
 800c8d8:	10000001 	.word	0x10000001
 800c8dc:	04000120 	.word	0x04000120
 800c8e0:	0800dccd 	.word	0x0800dccd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	f040 8170 	bne.w	800cbce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8f2:	f003 0310 	and.w	r3, r3, #16
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 8169 	beq.w	800cbce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c900:	f003 0310 	and.w	r3, r3, #16
 800c904:	2b00      	cmp	r3, #0
 800c906:	f000 8162 	beq.w	800cbce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2210      	movs	r2, #16
 800c910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c91c:	2b40      	cmp	r3, #64	@ 0x40
 800c91e:	f040 80d8 	bne.w	800cad2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 80af 	beq.w	800ca98 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c940:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c944:	429a      	cmp	r2, r3
 800c946:	f080 80a7 	bcs.w	800ca98 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c950:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f003 0320 	and.w	r3, r3, #32
 800c962:	2b00      	cmp	r3, #0
 800c964:	f040 8087 	bne.w	800ca76 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c970:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c974:	e853 3f00 	ldrex	r3, [r3]
 800c978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c97c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c984:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c992:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c996:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c99e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c9a2:	e841 2300 	strex	r3, r2, [r1]
 800c9a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c9aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1da      	bne.n	800c968 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3308      	adds	r3, #8
 800c9b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9bc:	e853 3f00 	ldrex	r3, [r3]
 800c9c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c9c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c9c4:	f023 0301 	bic.w	r3, r3, #1
 800c9c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c9d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c9da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c9de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c9e2:	e841 2300 	strex	r3, r2, [r1]
 800c9e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c9e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1e1      	bne.n	800c9b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3308      	adds	r3, #8
 800c9f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9f8:	e853 3f00 	ldrex	r3, [r3]
 800c9fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c9fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ca12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca1a:	e841 2300 	strex	r3, r2, [r1]
 800ca1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ca20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1e3      	bne.n	800c9ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ca42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca44:	f023 0310 	bic.w	r3, r3, #16
 800ca48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	461a      	mov	r2, r3
 800ca52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca56:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ca5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca5e:	e841 2300 	strex	r3, r2, [r1]
 800ca62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ca64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1e4      	bne.n	800ca34 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fa fdb8 	bl	80075e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2202      	movs	r2, #2
 800ca7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	4619      	mov	r1, r3
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f925 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ca96:	e0fc      	b.n	800cc92 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800caa2:	429a      	cmp	r2, r3
 800caa4:	f040 80f5 	bne.w	800cc92 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f003 0320 	and.w	r3, r3, #32
 800cab6:	2b20      	cmp	r3, #32
 800cab8:	f040 80eb 	bne.w	800cc92 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2202      	movs	r2, #2
 800cac0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cac8:	4619      	mov	r1, r3
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 f908 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
      return;
 800cad0:	e0df      	b.n	800cc92 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cade:	b29b      	uxth	r3, r3
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800caec:	b29b      	uxth	r3, r3
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 80d1 	beq.w	800cc96 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800caf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f000 80cc 	beq.w	800cc96 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb06:	e853 3f00 	ldrex	r3, [r3]
 800cb0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb20:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e4      	bne.n	800cafe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3308      	adds	r3, #8
 800cb3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3e:	e853 3f00 	ldrex	r3, [r3]
 800cb42:	623b      	str	r3, [r7, #32]
   return(result);
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb4a:	f023 0301 	bic.w	r3, r3, #1
 800cb4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	3308      	adds	r3, #8
 800cb58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cb5c:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb64:	e841 2300 	strex	r3, r2, [r1]
 800cb68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1e1      	bne.n	800cb34 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2220      	movs	r2, #32
 800cb74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	e853 3f00 	ldrex	r3, [r3]
 800cb90:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f023 0310 	bic.w	r3, r3, #16
 800cb98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	461a      	mov	r2, r3
 800cba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cba6:	61fb      	str	r3, [r7, #28]
 800cba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbaa:	69b9      	ldr	r1, [r7, #24]
 800cbac:	69fa      	ldr	r2, [r7, #28]
 800cbae:	e841 2300 	strex	r3, r2, [r1]
 800cbb2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1e4      	bne.n	800cb84 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2202      	movs	r2, #2
 800cbbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cbc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f88a 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cbcc:	e063      	b.n	800cc96 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cbce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00e      	beq.n	800cbf8 <HAL_UART_IRQHandler+0x5d8>
 800cbda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d008      	beq.n	800cbf8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cbee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f001 fdc9 	bl	800e788 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbf6:	e051      	b.n	800cc9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d014      	beq.n	800cc2e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d105      	bne.n	800cc1c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cc10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d008      	beq.n	800cc2e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d03a      	beq.n	800cc9a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	4798      	blx	r3
    }
    return;
 800cc2c:	e035      	b.n	800cc9a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cc2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d009      	beq.n	800cc4e <HAL_UART_IRQHandler+0x62e>
 800cc3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d003      	beq.n	800cc4e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f001 f852 	bl	800dcf0 <UART_EndTransmit_IT>
    return;
 800cc4c:	e026      	b.n	800cc9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d009      	beq.n	800cc6e <HAL_UART_IRQHandler+0x64e>
 800cc5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f001 fda2 	bl	800e7b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc6c:	e016      	b.n	800cc9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d010      	beq.n	800cc9c <HAL_UART_IRQHandler+0x67c>
 800cc7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	da0c      	bge.n	800cc9c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 fd8a 	bl	800e79c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc88:	e008      	b.n	800cc9c <HAL_UART_IRQHandler+0x67c>
      return;
 800cc8a:	bf00      	nop
 800cc8c:	e006      	b.n	800cc9c <HAL_UART_IRQHandler+0x67c>
    return;
 800cc8e:	bf00      	nop
 800cc90:	e004      	b.n	800cc9c <HAL_UART_IRQHandler+0x67c>
      return;
 800cc92:	bf00      	nop
 800cc94:	e002      	b.n	800cc9c <HAL_UART_IRQHandler+0x67c>
      return;
 800cc96:	bf00      	nop
 800cc98:	e000      	b.n	800cc9c <HAL_UART_IRQHandler+0x67c>
    return;
 800cc9a:	bf00      	nop
  }
}
 800cc9c:	37e8      	adds	r7, #232	@ 0xe8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop

0800cca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ccd4:	bf00      	nop
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	460b      	mov	r3, r1
 800ccea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ccf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccfc:	b08c      	sub	sp, #48	@ 0x30
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd02:	2300      	movs	r3, #0
 800cd04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	689a      	ldr	r2, [r3, #8]
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	431a      	orrs	r2, r3
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	695b      	ldr	r3, [r3, #20]
 800cd16:	431a      	orrs	r2, r3
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	69db      	ldr	r3, [r3, #28]
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	4bab      	ldr	r3, [pc, #684]	@ (800cfd4 <UART_SetConfig+0x2dc>)
 800cd28:	4013      	ands	r3, r2
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	6812      	ldr	r2, [r2, #0]
 800cd2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd30:	430b      	orrs	r3, r1
 800cd32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	68da      	ldr	r2, [r3, #12]
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	430a      	orrs	r2, r1
 800cd48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	699b      	ldr	r3, [r3, #24]
 800cd4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4aa0      	ldr	r2, [pc, #640]	@ (800cfd8 <UART_SetConfig+0x2e0>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d004      	beq.n	800cd64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	6a1b      	ldr	r3, [r3, #32]
 800cd5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd60:	4313      	orrs	r3, r2
 800cd62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cd6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	6812      	ldr	r2, [r2, #0]
 800cd76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd78:	430b      	orrs	r3, r1
 800cd7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd82:	f023 010f 	bic.w	r1, r3, #15
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	430a      	orrs	r2, r1
 800cd90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a91      	ldr	r2, [pc, #580]	@ (800cfdc <UART_SetConfig+0x2e4>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d125      	bne.n	800cde8 <UART_SetConfig+0xf0>
 800cd9c:	4b90      	ldr	r3, [pc, #576]	@ (800cfe0 <UART_SetConfig+0x2e8>)
 800cd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cda2:	f003 0303 	and.w	r3, r3, #3
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d81a      	bhi.n	800cde0 <UART_SetConfig+0xe8>
 800cdaa:	a201      	add	r2, pc, #4	@ (adr r2, 800cdb0 <UART_SetConfig+0xb8>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800cdc1 	.word	0x0800cdc1
 800cdb4:	0800cdd1 	.word	0x0800cdd1
 800cdb8:	0800cdc9 	.word	0x0800cdc9
 800cdbc:	0800cdd9 	.word	0x0800cdd9
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdc6:	e0d6      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cdc8:	2302      	movs	r3, #2
 800cdca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdce:	e0d2      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cdd0:	2304      	movs	r3, #4
 800cdd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdd6:	e0ce      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cdd8:	2308      	movs	r3, #8
 800cdda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdde:	e0ca      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cde0:	2310      	movs	r3, #16
 800cde2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cde6:	e0c6      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a7d      	ldr	r2, [pc, #500]	@ (800cfe4 <UART_SetConfig+0x2ec>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d138      	bne.n	800ce64 <UART_SetConfig+0x16c>
 800cdf2:	4b7b      	ldr	r3, [pc, #492]	@ (800cfe0 <UART_SetConfig+0x2e8>)
 800cdf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdf8:	f003 030c 	and.w	r3, r3, #12
 800cdfc:	2b0c      	cmp	r3, #12
 800cdfe:	d82d      	bhi.n	800ce5c <UART_SetConfig+0x164>
 800ce00:	a201      	add	r2, pc, #4	@ (adr r2, 800ce08 <UART_SetConfig+0x110>)
 800ce02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce06:	bf00      	nop
 800ce08:	0800ce3d 	.word	0x0800ce3d
 800ce0c:	0800ce5d 	.word	0x0800ce5d
 800ce10:	0800ce5d 	.word	0x0800ce5d
 800ce14:	0800ce5d 	.word	0x0800ce5d
 800ce18:	0800ce4d 	.word	0x0800ce4d
 800ce1c:	0800ce5d 	.word	0x0800ce5d
 800ce20:	0800ce5d 	.word	0x0800ce5d
 800ce24:	0800ce5d 	.word	0x0800ce5d
 800ce28:	0800ce45 	.word	0x0800ce45
 800ce2c:	0800ce5d 	.word	0x0800ce5d
 800ce30:	0800ce5d 	.word	0x0800ce5d
 800ce34:	0800ce5d 	.word	0x0800ce5d
 800ce38:	0800ce55 	.word	0x0800ce55
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce42:	e098      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ce44:	2302      	movs	r3, #2
 800ce46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce4a:	e094      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ce4c:	2304      	movs	r3, #4
 800ce4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce52:	e090      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ce54:	2308      	movs	r3, #8
 800ce56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce5a:	e08c      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ce5c:	2310      	movs	r3, #16
 800ce5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce62:	e088      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a5f      	ldr	r2, [pc, #380]	@ (800cfe8 <UART_SetConfig+0x2f0>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d125      	bne.n	800ceba <UART_SetConfig+0x1c2>
 800ce6e:	4b5c      	ldr	r3, [pc, #368]	@ (800cfe0 <UART_SetConfig+0x2e8>)
 800ce70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ce78:	2b30      	cmp	r3, #48	@ 0x30
 800ce7a:	d016      	beq.n	800ceaa <UART_SetConfig+0x1b2>
 800ce7c:	2b30      	cmp	r3, #48	@ 0x30
 800ce7e:	d818      	bhi.n	800ceb2 <UART_SetConfig+0x1ba>
 800ce80:	2b20      	cmp	r3, #32
 800ce82:	d00a      	beq.n	800ce9a <UART_SetConfig+0x1a2>
 800ce84:	2b20      	cmp	r3, #32
 800ce86:	d814      	bhi.n	800ceb2 <UART_SetConfig+0x1ba>
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <UART_SetConfig+0x19a>
 800ce8c:	2b10      	cmp	r3, #16
 800ce8e:	d008      	beq.n	800cea2 <UART_SetConfig+0x1aa>
 800ce90:	e00f      	b.n	800ceb2 <UART_SetConfig+0x1ba>
 800ce92:	2300      	movs	r3, #0
 800ce94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce98:	e06d      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cea0:	e069      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cea2:	2304      	movs	r3, #4
 800cea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cea8:	e065      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ceaa:	2308      	movs	r3, #8
 800ceac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceb0:	e061      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ceb2:	2310      	movs	r3, #16
 800ceb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceb8:	e05d      	b.n	800cf76 <UART_SetConfig+0x27e>
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a4b      	ldr	r2, [pc, #300]	@ (800cfec <UART_SetConfig+0x2f4>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d125      	bne.n	800cf10 <UART_SetConfig+0x218>
 800cec4:	4b46      	ldr	r3, [pc, #280]	@ (800cfe0 <UART_SetConfig+0x2e8>)
 800cec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ceca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cece:	2bc0      	cmp	r3, #192	@ 0xc0
 800ced0:	d016      	beq.n	800cf00 <UART_SetConfig+0x208>
 800ced2:	2bc0      	cmp	r3, #192	@ 0xc0
 800ced4:	d818      	bhi.n	800cf08 <UART_SetConfig+0x210>
 800ced6:	2b80      	cmp	r3, #128	@ 0x80
 800ced8:	d00a      	beq.n	800cef0 <UART_SetConfig+0x1f8>
 800ceda:	2b80      	cmp	r3, #128	@ 0x80
 800cedc:	d814      	bhi.n	800cf08 <UART_SetConfig+0x210>
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d002      	beq.n	800cee8 <UART_SetConfig+0x1f0>
 800cee2:	2b40      	cmp	r3, #64	@ 0x40
 800cee4:	d008      	beq.n	800cef8 <UART_SetConfig+0x200>
 800cee6:	e00f      	b.n	800cf08 <UART_SetConfig+0x210>
 800cee8:	2300      	movs	r3, #0
 800ceea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceee:	e042      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cef0:	2302      	movs	r3, #2
 800cef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cef6:	e03e      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cef8:	2304      	movs	r3, #4
 800cefa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cefe:	e03a      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cf00:	2308      	movs	r3, #8
 800cf02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf06:	e036      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cf08:	2310      	movs	r3, #16
 800cf0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf0e:	e032      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a30      	ldr	r2, [pc, #192]	@ (800cfd8 <UART_SetConfig+0x2e0>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d12a      	bne.n	800cf70 <UART_SetConfig+0x278>
 800cf1a:	4b31      	ldr	r3, [pc, #196]	@ (800cfe0 <UART_SetConfig+0x2e8>)
 800cf1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cf24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf28:	d01a      	beq.n	800cf60 <UART_SetConfig+0x268>
 800cf2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf2e:	d81b      	bhi.n	800cf68 <UART_SetConfig+0x270>
 800cf30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf34:	d00c      	beq.n	800cf50 <UART_SetConfig+0x258>
 800cf36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf3a:	d815      	bhi.n	800cf68 <UART_SetConfig+0x270>
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <UART_SetConfig+0x250>
 800cf40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf44:	d008      	beq.n	800cf58 <UART_SetConfig+0x260>
 800cf46:	e00f      	b.n	800cf68 <UART_SetConfig+0x270>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf4e:	e012      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cf50:	2302      	movs	r3, #2
 800cf52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf56:	e00e      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cf58:	2304      	movs	r3, #4
 800cf5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf5e:	e00a      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cf60:	2308      	movs	r3, #8
 800cf62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf66:	e006      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cf68:	2310      	movs	r3, #16
 800cf6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf6e:	e002      	b.n	800cf76 <UART_SetConfig+0x27e>
 800cf70:	2310      	movs	r3, #16
 800cf72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a17      	ldr	r2, [pc, #92]	@ (800cfd8 <UART_SetConfig+0x2e0>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	f040 80a8 	bne.w	800d0d2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf86:	2b08      	cmp	r3, #8
 800cf88:	d834      	bhi.n	800cff4 <UART_SetConfig+0x2fc>
 800cf8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf90 <UART_SetConfig+0x298>)
 800cf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf90:	0800cfb5 	.word	0x0800cfb5
 800cf94:	0800cff5 	.word	0x0800cff5
 800cf98:	0800cfbd 	.word	0x0800cfbd
 800cf9c:	0800cff5 	.word	0x0800cff5
 800cfa0:	0800cfc3 	.word	0x0800cfc3
 800cfa4:	0800cff5 	.word	0x0800cff5
 800cfa8:	0800cff5 	.word	0x0800cff5
 800cfac:	0800cff5 	.word	0x0800cff5
 800cfb0:	0800cfcb 	.word	0x0800cfcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfb4:	f7fc faa8 	bl	8009508 <HAL_RCC_GetPCLK1Freq>
 800cfb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cfba:	e021      	b.n	800d000 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfbc:	4b0c      	ldr	r3, [pc, #48]	@ (800cff0 <UART_SetConfig+0x2f8>)
 800cfbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cfc0:	e01e      	b.n	800d000 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfc2:	f7fc fa35 	bl	8009430 <HAL_RCC_GetSysClockFreq>
 800cfc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cfc8:	e01a      	b.n	800d000 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cfd0:	e016      	b.n	800d000 <UART_SetConfig+0x308>
 800cfd2:	bf00      	nop
 800cfd4:	cfff69f3 	.word	0xcfff69f3
 800cfd8:	40008000 	.word	0x40008000
 800cfdc:	40013800 	.word	0x40013800
 800cfe0:	40021000 	.word	0x40021000
 800cfe4:	40004400 	.word	0x40004400
 800cfe8:	40004800 	.word	0x40004800
 800cfec:	40004c00 	.word	0x40004c00
 800cff0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800cff4:	2300      	movs	r3, #0
 800cff6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cffe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 812a 	beq.w	800d25c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d00c:	4a9e      	ldr	r2, [pc, #632]	@ (800d288 <UART_SetConfig+0x590>)
 800d00e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d012:	461a      	mov	r2, r3
 800d014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d016:	fbb3 f3f2 	udiv	r3, r3, r2
 800d01a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	4613      	mov	r3, r2
 800d022:	005b      	lsls	r3, r3, #1
 800d024:	4413      	add	r3, r2
 800d026:	69ba      	ldr	r2, [r7, #24]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d305      	bcc.n	800d038 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d032:	69ba      	ldr	r2, [r7, #24]
 800d034:	429a      	cmp	r2, r3
 800d036:	d903      	bls.n	800d040 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d03e:	e10d      	b.n	800d25c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d042:	2200      	movs	r2, #0
 800d044:	60bb      	str	r3, [r7, #8]
 800d046:	60fa      	str	r2, [r7, #12]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d04c:	4a8e      	ldr	r2, [pc, #568]	@ (800d288 <UART_SetConfig+0x590>)
 800d04e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d052:	b29b      	uxth	r3, r3
 800d054:	2200      	movs	r2, #0
 800d056:	603b      	str	r3, [r7, #0]
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d05e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d062:	f7f3 fe39 	bl	8000cd8 <__aeabi_uldivmod>
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	4610      	mov	r0, r2
 800d06c:	4619      	mov	r1, r3
 800d06e:	f04f 0200 	mov.w	r2, #0
 800d072:	f04f 0300 	mov.w	r3, #0
 800d076:	020b      	lsls	r3, r1, #8
 800d078:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d07c:	0202      	lsls	r2, r0, #8
 800d07e:	6979      	ldr	r1, [r7, #20]
 800d080:	6849      	ldr	r1, [r1, #4]
 800d082:	0849      	lsrs	r1, r1, #1
 800d084:	2000      	movs	r0, #0
 800d086:	460c      	mov	r4, r1
 800d088:	4605      	mov	r5, r0
 800d08a:	eb12 0804 	adds.w	r8, r2, r4
 800d08e:	eb43 0905 	adc.w	r9, r3, r5
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	469a      	mov	sl, r3
 800d09a:	4693      	mov	fp, r2
 800d09c:	4652      	mov	r2, sl
 800d09e:	465b      	mov	r3, fp
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	f7f3 fe18 	bl	8000cd8 <__aeabi_uldivmod>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0b6:	d308      	bcc.n	800d0ca <UART_SetConfig+0x3d2>
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0be:	d204      	bcs.n	800d0ca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	6a3a      	ldr	r2, [r7, #32]
 800d0c6:	60da      	str	r2, [r3, #12]
 800d0c8:	e0c8      	b.n	800d25c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d0d0:	e0c4      	b.n	800d25c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d0da:	d167      	bne.n	800d1ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d0dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d828      	bhi.n	800d136 <UART_SetConfig+0x43e>
 800d0e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ec <UART_SetConfig+0x3f4>)
 800d0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ea:	bf00      	nop
 800d0ec:	0800d111 	.word	0x0800d111
 800d0f0:	0800d119 	.word	0x0800d119
 800d0f4:	0800d121 	.word	0x0800d121
 800d0f8:	0800d137 	.word	0x0800d137
 800d0fc:	0800d127 	.word	0x0800d127
 800d100:	0800d137 	.word	0x0800d137
 800d104:	0800d137 	.word	0x0800d137
 800d108:	0800d137 	.word	0x0800d137
 800d10c:	0800d12f 	.word	0x0800d12f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d110:	f7fc f9fa 	bl	8009508 <HAL_RCC_GetPCLK1Freq>
 800d114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d116:	e014      	b.n	800d142 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d118:	f7fc fa0c 	bl	8009534 <HAL_RCC_GetPCLK2Freq>
 800d11c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d11e:	e010      	b.n	800d142 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d120:	4b5a      	ldr	r3, [pc, #360]	@ (800d28c <UART_SetConfig+0x594>)
 800d122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d124:	e00d      	b.n	800d142 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d126:	f7fc f983 	bl	8009430 <HAL_RCC_GetSysClockFreq>
 800d12a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d12c:	e009      	b.n	800d142 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d12e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d134:	e005      	b.n	800d142 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d136:	2300      	movs	r3, #0
 800d138:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d144:	2b00      	cmp	r3, #0
 800d146:	f000 8089 	beq.w	800d25c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d14e:	4a4e      	ldr	r2, [pc, #312]	@ (800d288 <UART_SetConfig+0x590>)
 800d150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d154:	461a      	mov	r2, r3
 800d156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d158:	fbb3 f3f2 	udiv	r3, r3, r2
 800d15c:	005a      	lsls	r2, r3, #1
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	085b      	lsrs	r3, r3, #1
 800d164:	441a      	add	r2, r3
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d16e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	2b0f      	cmp	r3, #15
 800d174:	d916      	bls.n	800d1a4 <UART_SetConfig+0x4ac>
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d17c:	d212      	bcs.n	800d1a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	b29b      	uxth	r3, r3
 800d182:	f023 030f 	bic.w	r3, r3, #15
 800d186:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	085b      	lsrs	r3, r3, #1
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	f003 0307 	and.w	r3, r3, #7
 800d192:	b29a      	uxth	r2, r3
 800d194:	8bfb      	ldrh	r3, [r7, #30]
 800d196:	4313      	orrs	r3, r2
 800d198:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	8bfa      	ldrh	r2, [r7, #30]
 800d1a0:	60da      	str	r2, [r3, #12]
 800d1a2:	e05b      	b.n	800d25c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d1aa:	e057      	b.n	800d25c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d1ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d1b0:	2b08      	cmp	r3, #8
 800d1b2:	d828      	bhi.n	800d206 <UART_SetConfig+0x50e>
 800d1b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d1bc <UART_SetConfig+0x4c4>)
 800d1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ba:	bf00      	nop
 800d1bc:	0800d1e1 	.word	0x0800d1e1
 800d1c0:	0800d1e9 	.word	0x0800d1e9
 800d1c4:	0800d1f1 	.word	0x0800d1f1
 800d1c8:	0800d207 	.word	0x0800d207
 800d1cc:	0800d1f7 	.word	0x0800d1f7
 800d1d0:	0800d207 	.word	0x0800d207
 800d1d4:	0800d207 	.word	0x0800d207
 800d1d8:	0800d207 	.word	0x0800d207
 800d1dc:	0800d1ff 	.word	0x0800d1ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1e0:	f7fc f992 	bl	8009508 <HAL_RCC_GetPCLK1Freq>
 800d1e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1e6:	e014      	b.n	800d212 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1e8:	f7fc f9a4 	bl	8009534 <HAL_RCC_GetPCLK2Freq>
 800d1ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1ee:	e010      	b.n	800d212 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d1f0:	4b26      	ldr	r3, [pc, #152]	@ (800d28c <UART_SetConfig+0x594>)
 800d1f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d1f4:	e00d      	b.n	800d212 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1f6:	f7fc f91b 	bl	8009430 <HAL_RCC_GetSysClockFreq>
 800d1fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1fc:	e009      	b.n	800d212 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d204:	e005      	b.n	800d212 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d210:	bf00      	nop
    }

    if (pclk != 0U)
 800d212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d214:	2b00      	cmp	r3, #0
 800d216:	d021      	beq.n	800d25c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d21c:	4a1a      	ldr	r2, [pc, #104]	@ (800d288 <UART_SetConfig+0x590>)
 800d21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d222:	461a      	mov	r2, r3
 800d224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d226:	fbb3 f2f2 	udiv	r2, r3, r2
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	085b      	lsrs	r3, r3, #1
 800d230:	441a      	add	r2, r3
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	fbb2 f3f3 	udiv	r3, r2, r3
 800d23a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	2b0f      	cmp	r3, #15
 800d240:	d909      	bls.n	800d256 <UART_SetConfig+0x55e>
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d248:	d205      	bcs.n	800d256 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60da      	str	r2, [r3, #12]
 800d254:	e002      	b.n	800d25c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	2201      	movs	r2, #1
 800d260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2201      	movs	r2, #1
 800d268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	2200      	movs	r2, #0
 800d270:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	2200      	movs	r2, #0
 800d276:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d278:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3730      	adds	r7, #48	@ 0x30
 800d280:	46bd      	mov	sp, r7
 800d282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d286:	bf00      	nop
 800d288:	0801b54c 	.word	0x0801b54c
 800d28c:	00f42400 	.word	0x00f42400

0800d290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d29c:	f003 0308 	and.w	r3, r3, #8
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d00a      	beq.n	800d2ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2be:	f003 0301 	and.w	r3, r3, #1
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00a      	beq.n	800d2dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e0:	f003 0302 	and.w	r3, r3, #2
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00a      	beq.n	800d2fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	430a      	orrs	r2, r1
 800d2fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d302:	f003 0304 	and.w	r3, r3, #4
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00a      	beq.n	800d320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	430a      	orrs	r2, r1
 800d31e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d324:	f003 0310 	and.w	r3, r3, #16
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00a      	beq.n	800d342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	430a      	orrs	r2, r1
 800d340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d346:	f003 0320 	and.w	r3, r3, #32
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00a      	beq.n	800d364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	430a      	orrs	r2, r1
 800d362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d01a      	beq.n	800d3a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	430a      	orrs	r2, r1
 800d384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d38a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d38e:	d10a      	bne.n	800d3a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	430a      	orrs	r2, r1
 800d3a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00a      	beq.n	800d3c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	430a      	orrs	r2, r1
 800d3c6:	605a      	str	r2, [r3, #4]
  }
}
 800d3c8:	bf00      	nop
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b098      	sub	sp, #96	@ 0x60
 800d3d8:	af02      	add	r7, sp, #8
 800d3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3e4:	f7f8 fa18 	bl	8005818 <HAL_GetTick>
 800d3e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 0308 	and.w	r3, r3, #8
 800d3f4:	2b08      	cmp	r3, #8
 800d3f6:	d12f      	bne.n	800d458 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d400:	2200      	movs	r2, #0
 800d402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f88e 	bl	800d528 <UART_WaitOnFlagUntilTimeout>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d022      	beq.n	800d458 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d41a:	e853 3f00 	ldrex	r3, [r3]
 800d41e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d426:	653b      	str	r3, [r7, #80]	@ 0x50
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	461a      	mov	r2, r3
 800d42e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d430:	647b      	str	r3, [r7, #68]	@ 0x44
 800d432:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d438:	e841 2300 	strex	r3, r2, [r1]
 800d43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d43e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1e6      	bne.n	800d412 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2220      	movs	r2, #32
 800d448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d454:	2303      	movs	r3, #3
 800d456:	e063      	b.n	800d520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f003 0304 	and.w	r3, r3, #4
 800d462:	2b04      	cmp	r3, #4
 800d464:	d149      	bne.n	800d4fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d466:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d46e:	2200      	movs	r2, #0
 800d470:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 f857 	bl	800d528 <UART_WaitOnFlagUntilTimeout>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d03c      	beq.n	800d4fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d488:	e853 3f00 	ldrex	r3, [r3]
 800d48c:	623b      	str	r3, [r7, #32]
   return(result);
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	461a      	mov	r2, r3
 800d49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d49e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4a6:	e841 2300 	strex	r3, r2, [r1]
 800d4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1e6      	bne.n	800d480 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	e853 3f00 	ldrex	r3, [r3]
 800d4c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f023 0301 	bic.w	r3, r3, #1
 800d4c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4d2:	61fa      	str	r2, [r7, #28]
 800d4d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d6:	69b9      	ldr	r1, [r7, #24]
 800d4d8:	69fa      	ldr	r2, [r7, #28]
 800d4da:	e841 2300 	strex	r3, r2, [r1]
 800d4de:	617b      	str	r3, [r7, #20]
   return(result);
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1e5      	bne.n	800d4b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2220      	movs	r2, #32
 800d4ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	e012      	b.n	800d520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2220      	movs	r2, #32
 800d4fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2220      	movs	r2, #32
 800d506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3758      	adds	r7, #88	@ 0x58
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	603b      	str	r3, [r7, #0]
 800d534:	4613      	mov	r3, r2
 800d536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d538:	e04f      	b.n	800d5da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d540:	d04b      	beq.n	800d5da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d542:	f7f8 f969 	bl	8005818 <HAL_GetTick>
 800d546:	4602      	mov	r2, r0
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	69ba      	ldr	r2, [r7, #24]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d302      	bcc.n	800d558 <UART_WaitOnFlagUntilTimeout+0x30>
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	e04e      	b.n	800d5fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f003 0304 	and.w	r3, r3, #4
 800d566:	2b00      	cmp	r3, #0
 800d568:	d037      	beq.n	800d5da <UART_WaitOnFlagUntilTimeout+0xb2>
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	2b80      	cmp	r3, #128	@ 0x80
 800d56e:	d034      	beq.n	800d5da <UART_WaitOnFlagUntilTimeout+0xb2>
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2b40      	cmp	r3, #64	@ 0x40
 800d574:	d031      	beq.n	800d5da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	69db      	ldr	r3, [r3, #28]
 800d57c:	f003 0308 	and.w	r3, r3, #8
 800d580:	2b08      	cmp	r3, #8
 800d582:	d110      	bne.n	800d5a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2208      	movs	r2, #8
 800d58a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 fa42 	bl	800da16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2208      	movs	r2, #8
 800d596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e029      	b.n	800d5fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	69db      	ldr	r3, [r3, #28]
 800d5ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5b4:	d111      	bne.n	800d5da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d5be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f000 fa28 	bl	800da16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2220      	movs	r2, #32
 800d5ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	e00f      	b.n	800d5fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	69da      	ldr	r2, [r3, #28]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	bf0c      	ite	eq
 800d5ea:	2301      	moveq	r3, #1
 800d5ec:	2300      	movne	r3, #0
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	79fb      	ldrb	r3, [r7, #7]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d0a0      	beq.n	800d53a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d604:	b480      	push	{r7}
 800d606:	b0a3      	sub	sp, #140	@ 0x8c
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	4613      	mov	r3, r2
 800d610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	88fa      	ldrh	r2, [r7, #6]
 800d61c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	88fa      	ldrh	r2, [r7, #6]
 800d624:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d636:	d10e      	bne.n	800d656 <UART_Start_Receive_IT+0x52>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d105      	bne.n	800d64c <UART_Start_Receive_IT+0x48>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d646:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d64a:	e02d      	b.n	800d6a8 <UART_Start_Receive_IT+0xa4>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	22ff      	movs	r2, #255	@ 0xff
 800d650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d654:	e028      	b.n	800d6a8 <UART_Start_Receive_IT+0xa4>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10d      	bne.n	800d67a <UART_Start_Receive_IT+0x76>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d104      	bne.n	800d670 <UART_Start_Receive_IT+0x6c>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	22ff      	movs	r2, #255	@ 0xff
 800d66a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d66e:	e01b      	b.n	800d6a8 <UART_Start_Receive_IT+0xa4>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	227f      	movs	r2, #127	@ 0x7f
 800d674:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d678:	e016      	b.n	800d6a8 <UART_Start_Receive_IT+0xa4>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d682:	d10d      	bne.n	800d6a0 <UART_Start_Receive_IT+0x9c>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d104      	bne.n	800d696 <UART_Start_Receive_IT+0x92>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	227f      	movs	r2, #127	@ 0x7f
 800d690:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d694:	e008      	b.n	800d6a8 <UART_Start_Receive_IT+0xa4>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	223f      	movs	r2, #63	@ 0x3f
 800d69a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d69e:	e003      	b.n	800d6a8 <UART_Start_Receive_IT+0xa4>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2222      	movs	r2, #34	@ 0x22
 800d6b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3308      	adds	r3, #8
 800d6be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6c2:	e853 3f00 	ldrex	r3, [r3]
 800d6c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d6c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6ca:	f043 0301 	orr.w	r3, r3, #1
 800d6ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d6dc:	673a      	str	r2, [r7, #112]	@ 0x70
 800d6de:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d6e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d6e4:	e841 2300 	strex	r3, r2, [r1]
 800d6e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d6ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1e3      	bne.n	800d6b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6f8:	d14f      	bne.n	800d79a <UART_Start_Receive_IT+0x196>
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d700:	88fa      	ldrh	r2, [r7, #6]
 800d702:	429a      	cmp	r2, r3
 800d704:	d349      	bcc.n	800d79a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d70e:	d107      	bne.n	800d720 <UART_Start_Receive_IT+0x11c>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d103      	bne.n	800d720 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	4a47      	ldr	r2, [pc, #284]	@ (800d838 <UART_Start_Receive_IT+0x234>)
 800d71c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d71e:	e002      	b.n	800d726 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	4a46      	ldr	r2, [pc, #280]	@ (800d83c <UART_Start_Receive_IT+0x238>)
 800d724:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d01a      	beq.n	800d764 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d736:	e853 3f00 	ldrex	r3, [r3]
 800d73a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d73e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	461a      	mov	r2, r3
 800d74c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d752:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d754:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d756:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d758:	e841 2300 	strex	r3, r2, [r1]
 800d75c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d75e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1e4      	bne.n	800d72e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	3308      	adds	r3, #8
 800d76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d76e:	e853 3f00 	ldrex	r3, [r3]
 800d772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d77a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3308      	adds	r3, #8
 800d782:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d784:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d786:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d78a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e5      	bne.n	800d764 <UART_Start_Receive_IT+0x160>
 800d798:	e046      	b.n	800d828 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7a2:	d107      	bne.n	800d7b4 <UART_Start_Receive_IT+0x1b0>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d103      	bne.n	800d7b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	4a24      	ldr	r2, [pc, #144]	@ (800d840 <UART_Start_Receive_IT+0x23c>)
 800d7b0:	675a      	str	r2, [r3, #116]	@ 0x74
 800d7b2:	e002      	b.n	800d7ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4a23      	ldr	r2, [pc, #140]	@ (800d844 <UART_Start_Receive_IT+0x240>)
 800d7b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d019      	beq.n	800d7f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ca:	e853 3f00 	ldrex	r3, [r3]
 800d7ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d7d6:	677b      	str	r3, [r7, #116]	@ 0x74
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	461a      	mov	r2, r3
 800d7de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d7e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d7e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7e8:	e841 2300 	strex	r3, r2, [r1]
 800d7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1e6      	bne.n	800d7c2 <UART_Start_Receive_IT+0x1be>
 800d7f4:	e018      	b.n	800d828 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	e853 3f00 	ldrex	r3, [r3]
 800d802:	613b      	str	r3, [r7, #16]
   return(result);
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	f043 0320 	orr.w	r3, r3, #32
 800d80a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	461a      	mov	r2, r3
 800d812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d814:	623b      	str	r3, [r7, #32]
 800d816:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d818:	69f9      	ldr	r1, [r7, #28]
 800d81a:	6a3a      	ldr	r2, [r7, #32]
 800d81c:	e841 2300 	strex	r3, r2, [r1]
 800d820:	61bb      	str	r3, [r7, #24]
   return(result);
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1e6      	bne.n	800d7f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	378c      	adds	r7, #140	@ 0x8c
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	0800e41d 	.word	0x0800e41d
 800d83c:	0800e0b9 	.word	0x0800e0b9
 800d840:	0800df01 	.word	0x0800df01
 800d844:	0800dd49 	.word	0x0800dd49

0800d848 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b096      	sub	sp, #88	@ 0x58
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	68ba      	ldr	r2, [r7, #8]
 800d85a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	88fa      	ldrh	r2, [r7, #6]
 800d860:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2200      	movs	r2, #0
 800d868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2222      	movs	r2, #34	@ 0x22
 800d870:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d02d      	beq.n	800d8da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d884:	4a40      	ldr	r2, [pc, #256]	@ (800d988 <UART_Start_Receive_DMA+0x140>)
 800d886:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d88e:	4a3f      	ldr	r2, [pc, #252]	@ (800d98c <UART_Start_Receive_DMA+0x144>)
 800d890:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d898:	4a3d      	ldr	r2, [pc, #244]	@ (800d990 <UART_Start_Receive_DMA+0x148>)
 800d89a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3324      	adds	r3, #36	@ 0x24
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	88fb      	ldrh	r3, [r7, #6]
 800d8bc:	f7f9 fe18 	bl	80074f0 <HAL_DMA_Start_IT>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d009      	beq.n	800d8da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2210      	movs	r2, #16
 800d8ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2220      	movs	r2, #32
 800d8d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e051      	b.n	800d97e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	691b      	ldr	r3, [r3, #16]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d018      	beq.n	800d914 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ea:	e853 3f00 	ldrex	r3, [r3]
 800d8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d900:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d902:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d904:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d908:	e841 2300 	strex	r3, r2, [r1]
 800d90c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d90e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1e6      	bne.n	800d8e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3308      	adds	r3, #8
 800d91a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91e:	e853 3f00 	ldrex	r3, [r3]
 800d922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d926:	f043 0301 	orr.w	r3, r3, #1
 800d92a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3308      	adds	r3, #8
 800d932:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d934:	637a      	str	r2, [r7, #52]	@ 0x34
 800d936:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d938:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d93a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d93c:	e841 2300 	strex	r3, r2, [r1]
 800d940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e5      	bne.n	800d914 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	3308      	adds	r3, #8
 800d94e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	e853 3f00 	ldrex	r3, [r3]
 800d956:	613b      	str	r3, [r7, #16]
   return(result);
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d95e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3308      	adds	r3, #8
 800d966:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d968:	623a      	str	r2, [r7, #32]
 800d96a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96c:	69f9      	ldr	r1, [r7, #28]
 800d96e:	6a3a      	ldr	r2, [r7, #32]
 800d970:	e841 2300 	strex	r3, r2, [r1]
 800d974:	61bb      	str	r3, [r7, #24]
   return(result);
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1e5      	bne.n	800d948 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3758      	adds	r7, #88	@ 0x58
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	0800dae3 	.word	0x0800dae3
 800d98c:	0800dc0f 	.word	0x0800dc0f
 800d990:	0800dc4d 	.word	0x0800dc4d

0800d994 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d994:	b480      	push	{r7}
 800d996:	b08f      	sub	sp, #60	@ 0x3c
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	e853 3f00 	ldrex	r3, [r3]
 800d9a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d9b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9c2:	e841 2300 	strex	r3, r2, [r1]
 800d9c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1e6      	bne.n	800d99c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	e853 3f00 	ldrex	r3, [r3]
 800d9dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d9e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3308      	adds	r3, #8
 800d9ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9ee:	61ba      	str	r2, [r7, #24]
 800d9f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f2:	6979      	ldr	r1, [r7, #20]
 800d9f4:	69ba      	ldr	r2, [r7, #24]
 800d9f6:	e841 2300 	strex	r3, r2, [r1]
 800d9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1e5      	bne.n	800d9ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2220      	movs	r2, #32
 800da06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800da0a:	bf00      	nop
 800da0c:	373c      	adds	r7, #60	@ 0x3c
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr

0800da16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da16:	b480      	push	{r7}
 800da18:	b095      	sub	sp, #84	@ 0x54
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da26:	e853 3f00 	ldrex	r3, [r3]
 800da2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800da2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	461a      	mov	r2, r3
 800da3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800da3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da44:	e841 2300 	strex	r3, r2, [r1]
 800da48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e6      	bne.n	800da1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	3308      	adds	r3, #8
 800da56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	e853 3f00 	ldrex	r3, [r3]
 800da5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da66:	f023 0301 	bic.w	r3, r3, #1
 800da6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	3308      	adds	r3, #8
 800da72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da7c:	e841 2300 	strex	r3, r2, [r1]
 800da80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1e3      	bne.n	800da50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d118      	bne.n	800dac2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	e853 3f00 	ldrex	r3, [r3]
 800da9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	f023 0310 	bic.w	r3, r3, #16
 800daa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daae:	61bb      	str	r3, [r7, #24]
 800dab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab2:	6979      	ldr	r1, [r7, #20]
 800dab4:	69ba      	ldr	r2, [r7, #24]
 800dab6:	e841 2300 	strex	r3, r2, [r1]
 800daba:	613b      	str	r3, [r7, #16]
   return(result);
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1e6      	bne.n	800da90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2220      	movs	r2, #32
 800dac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dad6:	bf00      	nop
 800dad8:	3754      	adds	r7, #84	@ 0x54
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b09c      	sub	sp, #112	@ 0x70
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f003 0320 	and.w	r3, r3, #32
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d171      	bne.n	800dbe2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800dafe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db00:	2200      	movs	r2, #0
 800db02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db0e:	e853 3f00 	ldrex	r3, [r3]
 800db12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800db14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	461a      	mov	r2, r3
 800db22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db24:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db26:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db2c:	e841 2300 	strex	r3, r2, [r1]
 800db30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800db32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1e6      	bne.n	800db06 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3308      	adds	r3, #8
 800db3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db42:	e853 3f00 	ldrex	r3, [r3]
 800db46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db4a:	f023 0301 	bic.w	r3, r3, #1
 800db4e:	667b      	str	r3, [r7, #100]	@ 0x64
 800db50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3308      	adds	r3, #8
 800db56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800db58:	647a      	str	r2, [r7, #68]	@ 0x44
 800db5a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db60:	e841 2300 	strex	r3, r2, [r1]
 800db64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1e5      	bne.n	800db38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	3308      	adds	r3, #8
 800db72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db76:	e853 3f00 	ldrex	r3, [r3]
 800db7a:	623b      	str	r3, [r7, #32]
   return(result);
 800db7c:	6a3b      	ldr	r3, [r7, #32]
 800db7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db82:	663b      	str	r3, [r7, #96]	@ 0x60
 800db84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3308      	adds	r3, #8
 800db8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db8c:	633a      	str	r2, [r7, #48]	@ 0x30
 800db8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db94:	e841 2300 	strex	r3, r2, [r1]
 800db98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1e5      	bne.n	800db6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dba2:	2220      	movs	r2, #32
 800dba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d118      	bne.n	800dbe2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	e853 3f00 	ldrex	r3, [r3]
 800dbbc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f023 0310 	bic.w	r3, r3, #16
 800dbc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dbc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbce:	61fb      	str	r3, [r7, #28]
 800dbd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd2:	69b9      	ldr	r1, [r7, #24]
 800dbd4:	69fa      	ldr	r2, [r7, #28]
 800dbd6:	e841 2300 	strex	r3, r2, [r1]
 800dbda:	617b      	str	r3, [r7, #20]
   return(result);
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1e6      	bne.n	800dbb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d107      	bne.n	800dc00 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dbfa:	f7ff f871 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbfe:	e002      	b.n	800dc06 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800dc00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dc02:	f7f7 f83d 	bl	8004c80 <HAL_UART_RxCpltCallback>
}
 800dc06:	bf00      	nop
 800dc08:	3770      	adds	r7, #112	@ 0x70
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b084      	sub	sp, #16
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc1a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d109      	bne.n	800dc3e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc30:	085b      	lsrs	r3, r3, #1
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	4619      	mov	r1, r3
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f7ff f852 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc3c:	e002      	b.n	800dc44 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7ff f83a 	bl	800ccb8 <HAL_UART_RxHalfCpltCallback>
}
 800dc44:	bf00      	nop
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc74:	2b80      	cmp	r3, #128	@ 0x80
 800dc76:	d109      	bne.n	800dc8c <UART_DMAError+0x40>
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	2b21      	cmp	r3, #33	@ 0x21
 800dc7c:	d106      	bne.n	800dc8c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dc86:	6978      	ldr	r0, [r7, #20]
 800dc88:	f7ff fe84 	bl	800d994 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc96:	2b40      	cmp	r3, #64	@ 0x40
 800dc98:	d109      	bne.n	800dcae <UART_DMAError+0x62>
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b22      	cmp	r3, #34	@ 0x22
 800dc9e:	d106      	bne.n	800dcae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dca8:	6978      	ldr	r0, [r7, #20]
 800dcaa:	f7ff feb4 	bl	800da16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcb4:	f043 0210 	orr.w	r2, r3, #16
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcbe:	6978      	ldr	r0, [r7, #20]
 800dcc0:	f7ff f804 	bl	800cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcc4:	bf00      	nop
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f7fe fff2 	bl	800cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dce8:	bf00      	nop
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b088      	sub	sp, #32
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	e853 3f00 	ldrex	r3, [r3]
 800dd04:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd0c:	61fb      	str	r3, [r7, #28]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	461a      	mov	r2, r3
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	61bb      	str	r3, [r7, #24]
 800dd18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1a:	6979      	ldr	r1, [r7, #20]
 800dd1c:	69ba      	ldr	r2, [r7, #24]
 800dd1e:	e841 2300 	strex	r3, r2, [r1]
 800dd22:	613b      	str	r3, [r7, #16]
   return(result);
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1e6      	bne.n	800dcf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2220      	movs	r2, #32
 800dd2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f7fe ffb3 	bl	800cca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd3e:	bf00      	nop
 800dd40:	3720      	adds	r7, #32
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
	...

0800dd48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b09c      	sub	sp, #112	@ 0x70
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd60:	2b22      	cmp	r3, #34	@ 0x22
 800dd62:	f040 80be 	bne.w	800dee2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dd70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800dd74:	b2d9      	uxtb	r1, r3
 800dd76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd80:	400a      	ands	r2, r1
 800dd82:	b2d2      	uxtb	r2, r2
 800dd84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd8a:	1c5a      	adds	r2, r3, #1
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f040 80a1 	bne.w	800def2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddb8:	e853 3f00 	ldrex	r3, [r3]
 800ddbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ddbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ddc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ddce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ddd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ddd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ddd6:	e841 2300 	strex	r3, r2, [r1]
 800ddda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1e6      	bne.n	800ddb0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3308      	adds	r3, #8
 800dde8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddec:	e853 3f00 	ldrex	r3, [r3]
 800ddf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ddf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddf4:	f023 0301 	bic.w	r3, r3, #1
 800ddf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3308      	adds	r3, #8
 800de00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800de02:	647a      	str	r2, [r7, #68]	@ 0x44
 800de04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de0a:	e841 2300 	strex	r3, r2, [r1]
 800de0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1e5      	bne.n	800dde2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2220      	movs	r2, #32
 800de1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a33      	ldr	r2, [pc, #204]	@ (800defc <UART_RxISR_8BIT+0x1b4>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d01f      	beq.n	800de74 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d018      	beq.n	800de74 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4a:	e853 3f00 	ldrex	r3, [r3]
 800de4e:	623b      	str	r3, [r7, #32]
   return(result);
 800de50:	6a3b      	ldr	r3, [r7, #32]
 800de52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de56:	663b      	str	r3, [r7, #96]	@ 0x60
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	461a      	mov	r2, r3
 800de5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de60:	633b      	str	r3, [r7, #48]	@ 0x30
 800de62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de68:	e841 2300 	strex	r3, r2, [r1]
 800de6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1e6      	bne.n	800de42 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d12e      	bne.n	800deda <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	e853 3f00 	ldrex	r3, [r3]
 800de8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f023 0310 	bic.w	r3, r3, #16
 800de96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	461a      	mov	r2, r3
 800de9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dea0:	61fb      	str	r3, [r7, #28]
 800dea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea4:	69b9      	ldr	r1, [r7, #24]
 800dea6:	69fa      	ldr	r2, [r7, #28]
 800dea8:	e841 2300 	strex	r3, r2, [r1]
 800deac:	617b      	str	r3, [r7, #20]
   return(result);
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1e6      	bne.n	800de82 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	69db      	ldr	r3, [r3, #28]
 800deba:	f003 0310 	and.w	r3, r3, #16
 800debe:	2b10      	cmp	r3, #16
 800dec0:	d103      	bne.n	800deca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2210      	movs	r2, #16
 800dec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7fe ff04 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ded8:	e00b      	b.n	800def2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7f6 fed0 	bl	8004c80 <HAL_UART_RxCpltCallback>
}
 800dee0:	e007      	b.n	800def2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	699a      	ldr	r2, [r3, #24]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f042 0208 	orr.w	r2, r2, #8
 800def0:	619a      	str	r2, [r3, #24]
}
 800def2:	bf00      	nop
 800def4:	3770      	adds	r7, #112	@ 0x70
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	40008000 	.word	0x40008000

0800df00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b09c      	sub	sp, #112	@ 0x70
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df18:	2b22      	cmp	r3, #34	@ 0x22
 800df1a:	f040 80be 	bne.w	800e09a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800df2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800df32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800df36:	4013      	ands	r3, r2
 800df38:	b29a      	uxth	r2, r3
 800df3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df42:	1c9a      	adds	r2, r3, #2
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df4e:	b29b      	uxth	r3, r3
 800df50:	3b01      	subs	r3, #1
 800df52:	b29a      	uxth	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df60:	b29b      	uxth	r3, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	f040 80a1 	bne.w	800e0aa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df70:	e853 3f00 	ldrex	r3, [r3]
 800df74:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800df76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df7c:	667b      	str	r3, [r7, #100]	@ 0x64
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	461a      	mov	r2, r3
 800df84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df86:	657b      	str	r3, [r7, #84]	@ 0x54
 800df88:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800df8e:	e841 2300 	strex	r3, r2, [r1]
 800df92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800df94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1e6      	bne.n	800df68 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	3308      	adds	r3, #8
 800dfa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfa4:	e853 3f00 	ldrex	r3, [r3]
 800dfa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfac:	f023 0301 	bic.w	r3, r3, #1
 800dfb0:	663b      	str	r3, [r7, #96]	@ 0x60
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	3308      	adds	r3, #8
 800dfb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dfba:	643a      	str	r2, [r7, #64]	@ 0x40
 800dfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dfc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfc2:	e841 2300 	strex	r3, r2, [r1]
 800dfc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1e5      	bne.n	800df9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2220      	movs	r2, #32
 800dfd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a33      	ldr	r2, [pc, #204]	@ (800e0b4 <UART_RxISR_16BIT+0x1b4>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d01f      	beq.n	800e02c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d018      	beq.n	800e02c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e000:	6a3b      	ldr	r3, [r7, #32]
 800e002:	e853 3f00 	ldrex	r3, [r3]
 800e006:	61fb      	str	r3, [r7, #28]
   return(result);
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e00e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	461a      	mov	r2, r3
 800e016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e01a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e01e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e020:	e841 2300 	strex	r3, r2, [r1]
 800e024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d1e6      	bne.n	800dffa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e030:	2b01      	cmp	r3, #1
 800e032:	d12e      	bne.n	800e092 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	e853 3f00 	ldrex	r3, [r3]
 800e046:	60bb      	str	r3, [r7, #8]
   return(result);
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	f023 0310 	bic.w	r3, r3, #16
 800e04e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	461a      	mov	r2, r3
 800e056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e058:	61bb      	str	r3, [r7, #24]
 800e05a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05c:	6979      	ldr	r1, [r7, #20]
 800e05e:	69ba      	ldr	r2, [r7, #24]
 800e060:	e841 2300 	strex	r3, r2, [r1]
 800e064:	613b      	str	r3, [r7, #16]
   return(result);
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1e6      	bne.n	800e03a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	69db      	ldr	r3, [r3, #28]
 800e072:	f003 0310 	and.w	r3, r3, #16
 800e076:	2b10      	cmp	r3, #16
 800e078:	d103      	bne.n	800e082 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2210      	movs	r2, #16
 800e080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7fe fe28 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e090:	e00b      	b.n	800e0aa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7f6 fdf4 	bl	8004c80 <HAL_UART_RxCpltCallback>
}
 800e098:	e007      	b.n	800e0aa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	699a      	ldr	r2, [r3, #24]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f042 0208 	orr.w	r2, r2, #8
 800e0a8:	619a      	str	r2, [r3, #24]
}
 800e0aa:	bf00      	nop
 800e0ac:	3770      	adds	r7, #112	@ 0x70
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	40008000 	.word	0x40008000

0800e0b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b0ac      	sub	sp, #176	@ 0xb0
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e0c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	69db      	ldr	r3, [r3, #28]
 800e0d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0ee:	2b22      	cmp	r3, #34	@ 0x22
 800e0f0:	f040 8183 	bne.w	800e3fa <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e0fa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e0fe:	e126      	b.n	800e34e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e106:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e10a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e10e:	b2d9      	uxtb	r1, r3
 800e110:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e114:	b2da      	uxtb	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e11a:	400a      	ands	r2, r1
 800e11c:	b2d2      	uxtb	r2, r2
 800e11e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e124:	1c5a      	adds	r2, r3, #1
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e130:	b29b      	uxth	r3, r3
 800e132:	3b01      	subs	r3, #1
 800e134:	b29a      	uxth	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	69db      	ldr	r3, [r3, #28]
 800e142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e14a:	f003 0307 	and.w	r3, r3, #7
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d053      	beq.n	800e1fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e156:	f003 0301 	and.w	r3, r3, #1
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d011      	beq.n	800e182 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e15e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00b      	beq.n	800e182 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2201      	movs	r2, #1
 800e170:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e178:	f043 0201 	orr.w	r2, r3, #1
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e186:	f003 0302 	and.w	r3, r3, #2
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d011      	beq.n	800e1b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e18e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e192:	f003 0301 	and.w	r3, r3, #1
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00b      	beq.n	800e1b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1a8:	f043 0204 	orr.w	r2, r3, #4
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1b6:	f003 0304 	and.w	r3, r3, #4
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d011      	beq.n	800e1e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e1be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00b      	beq.n	800e1e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2204      	movs	r2, #4
 800e1d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1d8:	f043 0202 	orr.w	r2, r3, #2
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d006      	beq.n	800e1fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7fe fd6d 	bl	800cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e200:	b29b      	uxth	r3, r3
 800e202:	2b00      	cmp	r3, #0
 800e204:	f040 80a3 	bne.w	800e34e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e210:	e853 3f00 	ldrex	r3, [r3]
 800e214:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e21c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	461a      	mov	r2, r3
 800e226:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e22a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e22c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e230:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e232:	e841 2300 	strex	r3, r2, [r1]
 800e236:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e238:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1e4      	bne.n	800e208 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	3308      	adds	r3, #8
 800e244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e248:	e853 3f00 	ldrex	r3, [r3]
 800e24c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e24e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e254:	f023 0301 	bic.w	r3, r3, #1
 800e258:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	3308      	adds	r3, #8
 800e262:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e266:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e268:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e26c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e26e:	e841 2300 	strex	r3, r2, [r1]
 800e272:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1e1      	bne.n	800e23e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2220      	movs	r2, #32
 800e27e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2200      	movs	r2, #0
 800e286:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a60      	ldr	r2, [pc, #384]	@ (800e414 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d021      	beq.n	800e2dc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d01a      	beq.n	800e2dc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2ae:	e853 3f00 	ldrex	r3, [r3]
 800e2b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e2b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e2ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e2c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800e2ca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e2d0:	e841 2300 	strex	r3, r2, [r1]
 800e2d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e2d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1e4      	bne.n	800e2a6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d130      	bne.n	800e346 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2f2:	e853 3f00 	ldrex	r3, [r3]
 800e2f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fa:	f023 0310 	bic.w	r3, r3, #16
 800e2fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e30c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e30e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e310:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e312:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e314:	e841 2300 	strex	r3, r2, [r1]
 800e318:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d1e4      	bne.n	800e2ea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	69db      	ldr	r3, [r3, #28]
 800e326:	f003 0310 	and.w	r3, r3, #16
 800e32a:	2b10      	cmp	r3, #16
 800e32c:	d103      	bne.n	800e336 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2210      	movs	r2, #16
 800e334:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7fe fcce 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e344:	e00e      	b.n	800e364 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7f6 fc9a 	bl	8004c80 <HAL_UART_RxCpltCallback>
        break;
 800e34c:	e00a      	b.n	800e364 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e34e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e352:	2b00      	cmp	r3, #0
 800e354:	d006      	beq.n	800e364 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800e356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e35a:	f003 0320 	and.w	r3, r3, #32
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f47f aece 	bne.w	800e100 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e36a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e36e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e372:	2b00      	cmp	r3, #0
 800e374:	d049      	beq.n	800e40a <UART_RxISR_8BIT_FIFOEN+0x352>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e37c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e380:	429a      	cmp	r2, r3
 800e382:	d242      	bcs.n	800e40a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	3308      	adds	r3, #8
 800e38a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	e853 3f00 	ldrex	r3, [r3]
 800e392:	61fb      	str	r3, [r7, #28]
   return(result);
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e39a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3308      	adds	r3, #8
 800e3a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e3a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e3aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3b0:	e841 2300 	strex	r3, r2, [r1]
 800e3b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d1e3      	bne.n	800e384 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4a16      	ldr	r2, [pc, #88]	@ (800e418 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800e3c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	e853 3f00 	ldrex	r3, [r3]
 800e3ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	f043 0320 	orr.w	r3, r3, #32
 800e3d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e3e4:	61bb      	str	r3, [r7, #24]
 800e3e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e8:	6979      	ldr	r1, [r7, #20]
 800e3ea:	69ba      	ldr	r2, [r7, #24]
 800e3ec:	e841 2300 	strex	r3, r2, [r1]
 800e3f0:	613b      	str	r3, [r7, #16]
   return(result);
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1e4      	bne.n	800e3c2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3f8:	e007      	b.n	800e40a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	699a      	ldr	r2, [r3, #24]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f042 0208 	orr.w	r2, r2, #8
 800e408:	619a      	str	r2, [r3, #24]
}
 800e40a:	bf00      	nop
 800e40c:	37b0      	adds	r7, #176	@ 0xb0
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	40008000 	.word	0x40008000
 800e418:	0800dd49 	.word	0x0800dd49

0800e41c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b0ae      	sub	sp, #184	@ 0xb8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e42a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	69db      	ldr	r3, [r3, #28]
 800e434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e452:	2b22      	cmp	r3, #34	@ 0x22
 800e454:	f040 8187 	bne.w	800e766 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e45e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e462:	e12a      	b.n	800e6ba <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e46a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e476:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e47a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e47e:	4013      	ands	r3, r2
 800e480:	b29a      	uxth	r2, r3
 800e482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e486:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e48c:	1c9a      	adds	r2, r3, #2
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e498:	b29b      	uxth	r3, r3
 800e49a:	3b01      	subs	r3, #1
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	69db      	ldr	r3, [r3, #28]
 800e4aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e4ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e4b2:	f003 0307 	and.w	r3, r3, #7
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d053      	beq.n	800e562 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e4be:	f003 0301 	and.w	r3, r3, #1
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d011      	beq.n	800e4ea <UART_RxISR_16BIT_FIFOEN+0xce>
 800e4c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00b      	beq.n	800e4ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4e0:	f043 0201 	orr.w	r2, r3, #1
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e4ee:	f003 0302 	and.w	r3, r3, #2
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d011      	beq.n	800e51a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e4f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4fa:	f003 0301 	and.w	r3, r3, #1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00b      	beq.n	800e51a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2202      	movs	r2, #2
 800e508:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e510:	f043 0204 	orr.w	r2, r3, #4
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e51a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e51e:	f003 0304 	and.w	r3, r3, #4
 800e522:	2b00      	cmp	r3, #0
 800e524:	d011      	beq.n	800e54a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00b      	beq.n	800e54a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2204      	movs	r2, #4
 800e538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e540:	f043 0202 	orr.w	r2, r3, #2
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e550:	2b00      	cmp	r3, #0
 800e552:	d006      	beq.n	800e562 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7fe fbb9 	bl	800cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e568:	b29b      	uxth	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f040 80a5 	bne.w	800e6ba <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e578:	e853 3f00 	ldrex	r3, [r3]
 800e57c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e57e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	461a      	mov	r2, r3
 800e58e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e592:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e596:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e598:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e59a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e59e:	e841 2300 	strex	r3, r2, [r1]
 800e5a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e5a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e2      	bne.n	800e570 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5b4:	e853 3f00 	ldrex	r3, [r3]
 800e5b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e5ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e5c0:	f023 0301 	bic.w	r3, r3, #1
 800e5c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e5d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e5d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e5d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e5da:	e841 2300 	strex	r3, r2, [r1]
 800e5de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e5e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1e1      	bne.n	800e5aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2220      	movs	r2, #32
 800e5ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a60      	ldr	r2, [pc, #384]	@ (800e780 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d021      	beq.n	800e648 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d01a      	beq.n	800e648 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e61a:	e853 3f00 	ldrex	r3, [r3]
 800e61e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e622:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	461a      	mov	r2, r3
 800e630:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e634:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e636:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e638:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e63a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e63c:	e841 2300 	strex	r3, r2, [r1]
 800e640:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1e4      	bne.n	800e612 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d130      	bne.n	800e6b2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65e:	e853 3f00 	ldrex	r3, [r3]
 800e662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e666:	f023 0310 	bic.w	r3, r3, #16
 800e66a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	461a      	mov	r2, r3
 800e674:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e678:	647b      	str	r3, [r7, #68]	@ 0x44
 800e67a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e67e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e680:	e841 2300 	strex	r3, r2, [r1]
 800e684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1e4      	bne.n	800e656 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	69db      	ldr	r3, [r3, #28]
 800e692:	f003 0310 	and.w	r3, r3, #16
 800e696:	2b10      	cmp	r3, #16
 800e698:	d103      	bne.n	800e6a2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2210      	movs	r2, #16
 800e6a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f7fe fb18 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e6b0:	e00e      	b.n	800e6d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7f6 fae4 	bl	8004c80 <HAL_UART_RxCpltCallback>
        break;
 800e6b8:	e00a      	b.n	800e6d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6ba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d006      	beq.n	800e6d0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800e6c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e6c6:	f003 0320 	and.w	r3, r3, #32
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f47f aeca 	bne.w	800e464 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e6d6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e6da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d049      	beq.n	800e776 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e6e8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d242      	bcs.n	800e776 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	3308      	adds	r3, #8
 800e6f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fa:	e853 3f00 	ldrex	r3, [r3]
 800e6fe:	623b      	str	r3, [r7, #32]
   return(result);
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e706:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	3308      	adds	r3, #8
 800e710:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e714:	633a      	str	r2, [r7, #48]	@ 0x30
 800e716:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e71a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e71c:	e841 2300 	strex	r3, r2, [r1]
 800e720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1e3      	bne.n	800e6f0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a16      	ldr	r2, [pc, #88]	@ (800e784 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800e72c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	e853 3f00 	ldrex	r3, [r3]
 800e73a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f043 0320 	orr.w	r3, r3, #32
 800e742:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	461a      	mov	r2, r3
 800e74c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e750:	61fb      	str	r3, [r7, #28]
 800e752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e754:	69b9      	ldr	r1, [r7, #24]
 800e756:	69fa      	ldr	r2, [r7, #28]
 800e758:	e841 2300 	strex	r3, r2, [r1]
 800e75c:	617b      	str	r3, [r7, #20]
   return(result);
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1e4      	bne.n	800e72e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e764:	e007      	b.n	800e776 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	699a      	ldr	r2, [r3, #24]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f042 0208 	orr.w	r2, r2, #8
 800e774:	619a      	str	r2, [r3, #24]
}
 800e776:	bf00      	nop
 800e778:	37b8      	adds	r7, #184	@ 0xb8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	40008000 	.word	0x40008000
 800e784:	0800df01 	.word	0x0800df01

0800e788 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e7b8:	bf00      	nop
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d101      	bne.n	800e7da <HAL_UARTEx_DisableFifoMode+0x16>
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	e027      	b.n	800e82a <HAL_UARTEx_DisableFifoMode+0x66>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2224      	movs	r2, #36	@ 0x24
 800e7e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f022 0201 	bic.w	r2, r2, #1
 800e800:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e808:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2220      	movs	r2, #32
 800e81c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b084      	sub	sp, #16
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e846:	2b01      	cmp	r3, #1
 800e848:	d101      	bne.n	800e84e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e84a:	2302      	movs	r3, #2
 800e84c:	e02d      	b.n	800e8aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2201      	movs	r2, #1
 800e852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2224      	movs	r2, #36	@ 0x24
 800e85a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f022 0201 	bic.w	r2, r2, #1
 800e874:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	683a      	ldr	r2, [r7, #0]
 800e886:	430a      	orrs	r2, r1
 800e888:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 f850 	bl	800e930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2220      	movs	r2, #32
 800e89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b084      	sub	sp, #16
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d101      	bne.n	800e8ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	e02d      	b.n	800e926 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2224      	movs	r2, #36	@ 0x24
 800e8d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f022 0201 	bic.w	r2, r2, #1
 800e8f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	430a      	orrs	r2, r1
 800e904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 f812 	bl	800e930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2220      	movs	r2, #32
 800e918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	3710      	adds	r7, #16
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
	...

0800e930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d108      	bne.n	800e952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e950:	e031      	b.n	800e9b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e952:	2308      	movs	r3, #8
 800e954:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e956:	2308      	movs	r3, #8
 800e958:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	0e5b      	lsrs	r3, r3, #25
 800e962:	b2db      	uxtb	r3, r3
 800e964:	f003 0307 	and.w	r3, r3, #7
 800e968:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	0f5b      	lsrs	r3, r3, #29
 800e972:	b2db      	uxtb	r3, r3
 800e974:	f003 0307 	and.w	r3, r3, #7
 800e978:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e97a:	7bbb      	ldrb	r3, [r7, #14]
 800e97c:	7b3a      	ldrb	r2, [r7, #12]
 800e97e:	4911      	ldr	r1, [pc, #68]	@ (800e9c4 <UARTEx_SetNbDataToProcess+0x94>)
 800e980:	5c8a      	ldrb	r2, [r1, r2]
 800e982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e986:	7b3a      	ldrb	r2, [r7, #12]
 800e988:	490f      	ldr	r1, [pc, #60]	@ (800e9c8 <UARTEx_SetNbDataToProcess+0x98>)
 800e98a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e98c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e990:	b29a      	uxth	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e998:	7bfb      	ldrb	r3, [r7, #15]
 800e99a:	7b7a      	ldrb	r2, [r7, #13]
 800e99c:	4909      	ldr	r1, [pc, #36]	@ (800e9c4 <UARTEx_SetNbDataToProcess+0x94>)
 800e99e:	5c8a      	ldrb	r2, [r1, r2]
 800e9a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9a4:	7b7a      	ldrb	r2, [r7, #13]
 800e9a6:	4908      	ldr	r1, [pc, #32]	@ (800e9c8 <UARTEx_SetNbDataToProcess+0x98>)
 800e9a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e9b6:	bf00      	nop
 800e9b8:	3714      	adds	r7, #20
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	0801b564 	.word	0x0801b564
 800e9c8:	0801b56c 	.word	0x0801b56c

0800e9cc <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800e9d0:	4907      	ldr	r1, [pc, #28]	@ (800e9f0 <MX_FATFS_Init+0x24>)
 800e9d2:	4808      	ldr	r0, [pc, #32]	@ (800e9f4 <MX_FATFS_Init+0x28>)
 800e9d4:	f002 fe24 	bl	8011620 <FATFS_LinkDriver>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d002      	beq.n	800e9e4 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e2:	e003      	b.n	800e9ec <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800e9e4:	4b04      	ldr	r3, [pc, #16]	@ (800e9f8 <MX_FATFS_Init+0x2c>)
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800e9ea:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20001630 	.word	0x20001630
 800e9f4:	20000038 	.word	0x20000038
 800e9f8:	20001634 	.word	0x20001634

0800e9fc <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ea00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	4603      	mov	r3, r0
 800ea14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ea16:	79fb      	ldrb	r3, [r7, #7]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7f6 fb55 	bl	80050c8 <USER_SPI_initialize>
 800ea1e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	4603      	mov	r3, r0
 800ea30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800ea32:	79fb      	ldrb	r3, [r7, #7]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7f6 fc33 	bl	80052a0 <USER_SPI_status>
 800ea3a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3708      	adds	r7, #8
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60b9      	str	r1, [r7, #8]
 800ea4c:	607a      	str	r2, [r7, #4]
 800ea4e:	603b      	str	r3, [r7, #0]
 800ea50:	4603      	mov	r3, r0
 800ea52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800ea54:	7bf8      	ldrb	r0, [r7, #15]
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	68b9      	ldr	r1, [r7, #8]
 800ea5c:	f7f6 fc36 	bl	80052cc <USER_SPI_read>
 800ea60:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b084      	sub	sp, #16
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	603b      	str	r3, [r7, #0]
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800ea7a:	7bf8      	ldrb	r0, [r7, #15]
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	68b9      	ldr	r1, [r7, #8]
 800ea82:	f7f6 fc89 	bl	8005398 <USER_SPI_write>
 800ea86:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	4603      	mov	r3, r0
 800ea98:	603a      	str	r2, [r7, #0]
 800ea9a:	71fb      	strb	r3, [r7, #7]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800eaa0:	79b9      	ldrb	r1, [r7, #6]
 800eaa2:	79fb      	ldrb	r3, [r7, #7]
 800eaa4:	683a      	ldr	r2, [r7, #0]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7f6 fcf2 	bl	8005490 <USER_SPI_ioctl>
 800eaac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
	...

0800eab8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	4603      	mov	r3, r0
 800eac0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800eac2:	79fb      	ldrb	r3, [r7, #7]
 800eac4:	4a08      	ldr	r2, [pc, #32]	@ (800eae8 <disk_status+0x30>)
 800eac6:	009b      	lsls	r3, r3, #2
 800eac8:	4413      	add	r3, r2
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	79fa      	ldrb	r2, [r7, #7]
 800ead0:	4905      	ldr	r1, [pc, #20]	@ (800eae8 <disk_status+0x30>)
 800ead2:	440a      	add	r2, r1
 800ead4:	7a12      	ldrb	r2, [r2, #8]
 800ead6:	4610      	mov	r0, r2
 800ead8:	4798      	blx	r3
 800eada:	4603      	mov	r3, r0
 800eadc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800eade:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3710      	adds	r7, #16
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	20001660 	.word	0x20001660

0800eaec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800eafa:	79fb      	ldrb	r3, [r7, #7]
 800eafc:	4a0d      	ldr	r2, [pc, #52]	@ (800eb34 <disk_initialize+0x48>)
 800eafe:	5cd3      	ldrb	r3, [r2, r3]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d111      	bne.n	800eb28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800eb04:	79fb      	ldrb	r3, [r7, #7]
 800eb06:	4a0b      	ldr	r2, [pc, #44]	@ (800eb34 <disk_initialize+0x48>)
 800eb08:	2101      	movs	r1, #1
 800eb0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	4a09      	ldr	r2, [pc, #36]	@ (800eb34 <disk_initialize+0x48>)
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	79fa      	ldrb	r2, [r7, #7]
 800eb1a:	4906      	ldr	r1, [pc, #24]	@ (800eb34 <disk_initialize+0x48>)
 800eb1c:	440a      	add	r2, r1
 800eb1e:	7a12      	ldrb	r2, [r2, #8]
 800eb20:	4610      	mov	r0, r2
 800eb22:	4798      	blx	r3
 800eb24:	4603      	mov	r3, r0
 800eb26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	20001660 	.word	0x20001660

0800eb38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eb38:	b590      	push	{r4, r7, lr}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60b9      	str	r1, [r7, #8]
 800eb40:	607a      	str	r2, [r7, #4]
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	4603      	mov	r3, r0
 800eb46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
 800eb4a:	4a0a      	ldr	r2, [pc, #40]	@ (800eb74 <disk_read+0x3c>)
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	4413      	add	r3, r2
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	689c      	ldr	r4, [r3, #8]
 800eb54:	7bfb      	ldrb	r3, [r7, #15]
 800eb56:	4a07      	ldr	r2, [pc, #28]	@ (800eb74 <disk_read+0x3c>)
 800eb58:	4413      	add	r3, r2
 800eb5a:	7a18      	ldrb	r0, [r3, #8]
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	68b9      	ldr	r1, [r7, #8]
 800eb62:	47a0      	blx	r4
 800eb64:	4603      	mov	r3, r0
 800eb66:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	371c      	adds	r7, #28
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd90      	pop	{r4, r7, pc}
 800eb72:	bf00      	nop
 800eb74:	20001660 	.word	0x20001660

0800eb78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eb78:	b590      	push	{r4, r7, lr}
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60b9      	str	r1, [r7, #8]
 800eb80:	607a      	str	r2, [r7, #4]
 800eb82:	603b      	str	r3, [r7, #0]
 800eb84:	4603      	mov	r3, r0
 800eb86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eb88:	7bfb      	ldrb	r3, [r7, #15]
 800eb8a:	4a0a      	ldr	r2, [pc, #40]	@ (800ebb4 <disk_write+0x3c>)
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	4413      	add	r3, r2
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	68dc      	ldr	r4, [r3, #12]
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	4a07      	ldr	r2, [pc, #28]	@ (800ebb4 <disk_write+0x3c>)
 800eb98:	4413      	add	r3, r2
 800eb9a:	7a18      	ldrb	r0, [r3, #8]
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	68b9      	ldr	r1, [r7, #8]
 800eba2:	47a0      	blx	r4
 800eba4:	4603      	mov	r3, r0
 800eba6:	75fb      	strb	r3, [r7, #23]
  return res;
 800eba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	371c      	adds	r7, #28
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd90      	pop	{r4, r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20001660 	.word	0x20001660

0800ebb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	603a      	str	r2, [r7, #0]
 800ebc2:	71fb      	strb	r3, [r7, #7]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ebc8:	79fb      	ldrb	r3, [r7, #7]
 800ebca:	4a09      	ldr	r2, [pc, #36]	@ (800ebf0 <disk_ioctl+0x38>)
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4413      	add	r3, r2
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	691b      	ldr	r3, [r3, #16]
 800ebd4:	79fa      	ldrb	r2, [r7, #7]
 800ebd6:	4906      	ldr	r1, [pc, #24]	@ (800ebf0 <disk_ioctl+0x38>)
 800ebd8:	440a      	add	r2, r1
 800ebda:	7a10      	ldrb	r0, [r2, #8]
 800ebdc:	79b9      	ldrb	r1, [r7, #6]
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	4798      	blx	r3
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	73fb      	strb	r3, [r7, #15]
  return res;
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	20001660 	.word	0x20001660

0800ebf4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ec04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ec08:	021b      	lsls	r3, r3, #8
 800ec0a:	b21a      	sxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	b21b      	sxth	r3, r3
 800ec12:	4313      	orrs	r3, r2
 800ec14:	b21b      	sxth	r3, r3
 800ec16:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ec18:	89fb      	ldrh	r3, [r7, #14]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ec26:	b480      	push	{r7}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	3303      	adds	r3, #3
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	021b      	lsls	r3, r3, #8
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	3202      	adds	r2, #2
 800ec3e:	7812      	ldrb	r2, [r2, #0]
 800ec40:	4313      	orrs	r3, r2
 800ec42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	021b      	lsls	r3, r3, #8
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	3201      	adds	r2, #1
 800ec4c:	7812      	ldrb	r2, [r2, #0]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	021b      	lsls	r3, r3, #8
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	7812      	ldrb	r2, [r2, #0]
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	60fb      	str	r3, [r7, #12]
	return rv;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	1c5a      	adds	r2, r3, #1
 800ec7c:	607a      	str	r2, [r7, #4]
 800ec7e:	887a      	ldrh	r2, [r7, #2]
 800ec80:	b2d2      	uxtb	r2, r2
 800ec82:	701a      	strb	r2, [r3, #0]
 800ec84:	887b      	ldrh	r3, [r7, #2]
 800ec86:	0a1b      	lsrs	r3, r3, #8
 800ec88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	1c5a      	adds	r2, r3, #1
 800ec8e:	607a      	str	r2, [r7, #4]
 800ec90:	887a      	ldrh	r2, [r7, #2]
 800ec92:	b2d2      	uxtb	r2, r2
 800ec94:	701a      	strb	r2, [r3, #0]
}
 800ec96:	bf00      	nop
 800ec98:	370c      	adds	r7, #12
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr

0800eca2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800eca2:	b480      	push	{r7}
 800eca4:	b083      	sub	sp, #12
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	607a      	str	r2, [r7, #4]
 800ecb2:	683a      	ldr	r2, [r7, #0]
 800ecb4:	b2d2      	uxtb	r2, r2
 800ecb6:	701a      	strb	r2, [r3, #0]
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	0a1b      	lsrs	r3, r3, #8
 800ecbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	1c5a      	adds	r2, r3, #1
 800ecc2:	607a      	str	r2, [r7, #4]
 800ecc4:	683a      	ldr	r2, [r7, #0]
 800ecc6:	b2d2      	uxtb	r2, r2
 800ecc8:	701a      	strb	r2, [r3, #0]
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	0a1b      	lsrs	r3, r3, #8
 800ecce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	607a      	str	r2, [r7, #4]
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	b2d2      	uxtb	r2, r2
 800ecda:	701a      	strb	r2, [r3, #0]
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	0a1b      	lsrs	r3, r3, #8
 800ece0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	1c5a      	adds	r2, r3, #1
 800ece6:	607a      	str	r2, [r7, #4]
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	b2d2      	uxtb	r2, r2
 800ecec:	701a      	strb	r2, [r3, #0]
}
 800ecee:	bf00      	nop
 800ecf0:	370c      	adds	r7, #12
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr

0800ecfa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ecfa:	b480      	push	{r7}
 800ecfc:	b087      	sub	sp, #28
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	60f8      	str	r0, [r7, #12]
 800ed02:	60b9      	str	r1, [r7, #8]
 800ed04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00d      	beq.n	800ed30 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ed14:	693a      	ldr	r2, [r7, #16]
 800ed16:	1c53      	adds	r3, r2, #1
 800ed18:	613b      	str	r3, [r7, #16]
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	1c59      	adds	r1, r3, #1
 800ed1e:	6179      	str	r1, [r7, #20]
 800ed20:	7812      	ldrb	r2, [r2, #0]
 800ed22:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	3b01      	subs	r3, #1
 800ed28:	607b      	str	r3, [r7, #4]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1f1      	bne.n	800ed14 <mem_cpy+0x1a>
	}
}
 800ed30:	bf00      	nop
 800ed32:	371c      	adds	r7, #28
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ed3c:	b480      	push	{r7}
 800ed3e:	b087      	sub	sp, #28
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	1c5a      	adds	r2, r3, #1
 800ed50:	617a      	str	r2, [r7, #20]
 800ed52:	68ba      	ldr	r2, [r7, #8]
 800ed54:	b2d2      	uxtb	r2, r2
 800ed56:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	607b      	str	r3, [r7, #4]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1f3      	bne.n	800ed4c <mem_set+0x10>
}
 800ed64:	bf00      	nop
 800ed66:	bf00      	nop
 800ed68:	371c      	adds	r7, #28
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr

0800ed72 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ed72:	b480      	push	{r7}
 800ed74:	b089      	sub	sp, #36	@ 0x24
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	60f8      	str	r0, [r7, #12]
 800ed7a:	60b9      	str	r1, [r7, #8]
 800ed7c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	61fb      	str	r3, [r7, #28]
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	1c5a      	adds	r2, r3, #1
 800ed8e:	61fa      	str	r2, [r7, #28]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	4619      	mov	r1, r3
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	61ba      	str	r2, [r7, #24]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	1acb      	subs	r3, r1, r3
 800ed9e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3b01      	subs	r3, #1
 800eda4:	607b      	str	r3, [r7, #4]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d002      	beq.n	800edb2 <mem_cmp+0x40>
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d0eb      	beq.n	800ed8a <mem_cmp+0x18>

	return r;
 800edb2:	697b      	ldr	r3, [r7, #20]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3724      	adds	r7, #36	@ 0x24
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800edc0:	b480      	push	{r7}
 800edc2:	b083      	sub	sp, #12
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800edca:	e002      	b.n	800edd2 <chk_chr+0x12>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3301      	adds	r3, #1
 800edd0:	607b      	str	r3, [r7, #4]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d005      	beq.n	800ede6 <chk_chr+0x26>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	461a      	mov	r2, r3
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d1f2      	bne.n	800edcc <chk_chr+0xc>
	return *str;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	781b      	ldrb	r3, [r3, #0]
}
 800edea:	4618      	mov	r0, r3
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b082      	sub	sp, #8
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d009      	beq.n	800ee18 <lock_fs+0x22>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f002 fc42 	bl	8011692 <ff_req_grant>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d001      	beq.n	800ee18 <lock_fs+0x22>
 800ee14:	2301      	movs	r3, #1
 800ee16:	e000      	b.n	800ee1a <lock_fs+0x24>
 800ee18:	2300      	movs	r3, #0
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b082      	sub	sp, #8
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	460b      	mov	r3, r1
 800ee2c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00d      	beq.n	800ee50 <unlock_fs+0x2e>
 800ee34:	78fb      	ldrb	r3, [r7, #3]
 800ee36:	2b0c      	cmp	r3, #12
 800ee38:	d00a      	beq.n	800ee50 <unlock_fs+0x2e>
 800ee3a:	78fb      	ldrb	r3, [r7, #3]
 800ee3c:	2b0b      	cmp	r3, #11
 800ee3e:	d007      	beq.n	800ee50 <unlock_fs+0x2e>
 800ee40:	78fb      	ldrb	r3, [r7, #3]
 800ee42:	2b0f      	cmp	r3, #15
 800ee44:	d004      	beq.n	800ee50 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f002 fc36 	bl	80116bc <ff_rel_grant>
	}
}
 800ee50:	bf00      	nop
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ee62:	2300      	movs	r3, #0
 800ee64:	60bb      	str	r3, [r7, #8]
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	60fb      	str	r3, [r7, #12]
 800ee6a:	e029      	b.n	800eec0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ee6c:	4a27      	ldr	r2, [pc, #156]	@ (800ef0c <chk_lock+0xb4>)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	011b      	lsls	r3, r3, #4
 800ee72:	4413      	add	r3, r2
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d01d      	beq.n	800eeb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ee7a:	4a24      	ldr	r2, [pc, #144]	@ (800ef0c <chk_lock+0xb4>)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	011b      	lsls	r3, r3, #4
 800ee80:	4413      	add	r3, r2
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d116      	bne.n	800eeba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ee8c:	4a1f      	ldr	r2, [pc, #124]	@ (800ef0c <chk_lock+0xb4>)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	011b      	lsls	r3, r3, #4
 800ee92:	4413      	add	r3, r2
 800ee94:	3304      	adds	r3, #4
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d10c      	bne.n	800eeba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eea0:	4a1a      	ldr	r2, [pc, #104]	@ (800ef0c <chk_lock+0xb4>)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	011b      	lsls	r3, r3, #4
 800eea6:	4413      	add	r3, r2
 800eea8:	3308      	adds	r3, #8
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d102      	bne.n	800eeba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eeb4:	e007      	b.n	800eec6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	3301      	adds	r3, #1
 800eebe:	60fb      	str	r3, [r7, #12]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d9d2      	bls.n	800ee6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d109      	bne.n	800eee0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d102      	bne.n	800eed8 <chk_lock+0x80>
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b02      	cmp	r3, #2
 800eed6:	d101      	bne.n	800eedc <chk_lock+0x84>
 800eed8:	2300      	movs	r3, #0
 800eeda:	e010      	b.n	800eefe <chk_lock+0xa6>
 800eedc:	2312      	movs	r3, #18
 800eede:	e00e      	b.n	800eefe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d108      	bne.n	800eef8 <chk_lock+0xa0>
 800eee6:	4a09      	ldr	r2, [pc, #36]	@ (800ef0c <chk_lock+0xb4>)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	011b      	lsls	r3, r3, #4
 800eeec:	4413      	add	r3, r2
 800eeee:	330c      	adds	r3, #12
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eef6:	d101      	bne.n	800eefc <chk_lock+0xa4>
 800eef8:	2310      	movs	r3, #16
 800eefa:	e000      	b.n	800eefe <chk_lock+0xa6>
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3714      	adds	r7, #20
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	20001640 	.word	0x20001640

0800ef10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef16:	2300      	movs	r3, #0
 800ef18:	607b      	str	r3, [r7, #4]
 800ef1a:	e002      	b.n	800ef22 <enq_lock+0x12>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	607b      	str	r3, [r7, #4]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d806      	bhi.n	800ef36 <enq_lock+0x26>
 800ef28:	4a09      	ldr	r2, [pc, #36]	@ (800ef50 <enq_lock+0x40>)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	011b      	lsls	r3, r3, #4
 800ef2e:	4413      	add	r3, r2
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1f2      	bne.n	800ef1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	bf14      	ite	ne
 800ef3c:	2301      	movne	r3, #1
 800ef3e:	2300      	moveq	r3, #0
 800ef40:	b2db      	uxtb	r3, r3
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	20001640 	.word	0x20001640

0800ef54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b085      	sub	sp, #20
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60fb      	str	r3, [r7, #12]
 800ef62:	e01f      	b.n	800efa4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ef64:	4a41      	ldr	r2, [pc, #260]	@ (800f06c <inc_lock+0x118>)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	011b      	lsls	r3, r3, #4
 800ef6a:	4413      	add	r3, r2
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d113      	bne.n	800ef9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ef76:	4a3d      	ldr	r2, [pc, #244]	@ (800f06c <inc_lock+0x118>)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	011b      	lsls	r3, r3, #4
 800ef7c:	4413      	add	r3, r2
 800ef7e:	3304      	adds	r3, #4
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d109      	bne.n	800ef9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ef8a:	4a38      	ldr	r2, [pc, #224]	@ (800f06c <inc_lock+0x118>)
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	011b      	lsls	r3, r3, #4
 800ef90:	4413      	add	r3, r2
 800ef92:	3308      	adds	r3, #8
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d006      	beq.n	800efac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	3301      	adds	r3, #1
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d9dc      	bls.n	800ef64 <inc_lock+0x10>
 800efaa:	e000      	b.n	800efae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800efac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d132      	bne.n	800f01a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800efb4:	2300      	movs	r3, #0
 800efb6:	60fb      	str	r3, [r7, #12]
 800efb8:	e002      	b.n	800efc0 <inc_lock+0x6c>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	3301      	adds	r3, #1
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d806      	bhi.n	800efd4 <inc_lock+0x80>
 800efc6:	4a29      	ldr	r2, [pc, #164]	@ (800f06c <inc_lock+0x118>)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	011b      	lsls	r3, r3, #4
 800efcc:	4413      	add	r3, r2
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d1f2      	bne.n	800efba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	d101      	bne.n	800efde <inc_lock+0x8a>
 800efda:	2300      	movs	r3, #0
 800efdc:	e040      	b.n	800f060 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	4922      	ldr	r1, [pc, #136]	@ (800f06c <inc_lock+0x118>)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	011b      	lsls	r3, r3, #4
 800efe8:	440b      	add	r3, r1
 800efea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	689a      	ldr	r2, [r3, #8]
 800eff0:	491e      	ldr	r1, [pc, #120]	@ (800f06c <inc_lock+0x118>)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	011b      	lsls	r3, r3, #4
 800eff6:	440b      	add	r3, r1
 800eff8:	3304      	adds	r3, #4
 800effa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	695a      	ldr	r2, [r3, #20]
 800f000:	491a      	ldr	r1, [pc, #104]	@ (800f06c <inc_lock+0x118>)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	011b      	lsls	r3, r3, #4
 800f006:	440b      	add	r3, r1
 800f008:	3308      	adds	r3, #8
 800f00a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f00c:	4a17      	ldr	r2, [pc, #92]	@ (800f06c <inc_lock+0x118>)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	011b      	lsls	r3, r3, #4
 800f012:	4413      	add	r3, r2
 800f014:	330c      	adds	r3, #12
 800f016:	2200      	movs	r2, #0
 800f018:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d009      	beq.n	800f034 <inc_lock+0xe0>
 800f020:	4a12      	ldr	r2, [pc, #72]	@ (800f06c <inc_lock+0x118>)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	011b      	lsls	r3, r3, #4
 800f026:	4413      	add	r3, r2
 800f028:	330c      	adds	r3, #12
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <inc_lock+0xe0>
 800f030:	2300      	movs	r3, #0
 800f032:	e015      	b.n	800f060 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d108      	bne.n	800f04c <inc_lock+0xf8>
 800f03a:	4a0c      	ldr	r2, [pc, #48]	@ (800f06c <inc_lock+0x118>)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	011b      	lsls	r3, r3, #4
 800f040:	4413      	add	r3, r2
 800f042:	330c      	adds	r3, #12
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	3301      	adds	r3, #1
 800f048:	b29a      	uxth	r2, r3
 800f04a:	e001      	b.n	800f050 <inc_lock+0xfc>
 800f04c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f050:	4906      	ldr	r1, [pc, #24]	@ (800f06c <inc_lock+0x118>)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	011b      	lsls	r3, r3, #4
 800f056:	440b      	add	r3, r1
 800f058:	330c      	adds	r3, #12
 800f05a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	3301      	adds	r3, #1
}
 800f060:	4618      	mov	r0, r3
 800f062:	3714      	adds	r7, #20
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr
 800f06c:	20001640 	.word	0x20001640

0800f070 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	3b01      	subs	r3, #1
 800f07c:	607b      	str	r3, [r7, #4]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d825      	bhi.n	800f0d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800f084:	4a17      	ldr	r2, [pc, #92]	@ (800f0e4 <dec_lock+0x74>)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	011b      	lsls	r3, r3, #4
 800f08a:	4413      	add	r3, r2
 800f08c:	330c      	adds	r3, #12
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f092:	89fb      	ldrh	r3, [r7, #14]
 800f094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f098:	d101      	bne.n	800f09e <dec_lock+0x2e>
 800f09a:	2300      	movs	r3, #0
 800f09c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f09e:	89fb      	ldrh	r3, [r7, #14]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d002      	beq.n	800f0aa <dec_lock+0x3a>
 800f0a4:	89fb      	ldrh	r3, [r7, #14]
 800f0a6:	3b01      	subs	r3, #1
 800f0a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f0aa:	4a0e      	ldr	r2, [pc, #56]	@ (800f0e4 <dec_lock+0x74>)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	011b      	lsls	r3, r3, #4
 800f0b0:	4413      	add	r3, r2
 800f0b2:	330c      	adds	r3, #12
 800f0b4:	89fa      	ldrh	r2, [r7, #14]
 800f0b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f0b8:	89fb      	ldrh	r3, [r7, #14]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d105      	bne.n	800f0ca <dec_lock+0x5a>
 800f0be:	4a09      	ldr	r2, [pc, #36]	@ (800f0e4 <dec_lock+0x74>)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	011b      	lsls	r3, r3, #4
 800f0c4:	4413      	add	r3, r2
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	737b      	strb	r3, [r7, #13]
 800f0ce:	e001      	b.n	800f0d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f0d0:	2302      	movs	r3, #2
 800f0d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f0d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3714      	adds	r7, #20
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	20001640 	.word	0x20001640

0800f0e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b085      	sub	sp, #20
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	e010      	b.n	800f118 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800f12c <clear_lock+0x44>)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	011b      	lsls	r3, r3, #4
 800f0fc:	4413      	add	r3, r2
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	429a      	cmp	r2, r3
 800f104:	d105      	bne.n	800f112 <clear_lock+0x2a>
 800f106:	4a09      	ldr	r2, [pc, #36]	@ (800f12c <clear_lock+0x44>)
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	011b      	lsls	r3, r3, #4
 800f10c:	4413      	add	r3, r2
 800f10e:	2200      	movs	r2, #0
 800f110:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	3301      	adds	r3, #1
 800f116:	60fb      	str	r3, [r7, #12]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d9eb      	bls.n	800f0f6 <clear_lock+0xe>
	}
}
 800f11e:	bf00      	nop
 800f120:	bf00      	nop
 800f122:	3714      	adds	r7, #20
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	20001640 	.word	0x20001640

0800f130 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f138:	2300      	movs	r3, #0
 800f13a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	78db      	ldrb	r3, [r3, #3]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d034      	beq.n	800f1ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f148:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	7858      	ldrb	r0, [r3, #1]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f154:	2301      	movs	r3, #1
 800f156:	697a      	ldr	r2, [r7, #20]
 800f158:	f7ff fd0e 	bl	800eb78 <disk_write>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d002      	beq.n	800f168 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f162:	2301      	movs	r3, #1
 800f164:	73fb      	strb	r3, [r7, #15]
 800f166:	e022      	b.n	800f1ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f172:	697a      	ldr	r2, [r7, #20]
 800f174:	1ad2      	subs	r2, r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	69db      	ldr	r3, [r3, #28]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d217      	bcs.n	800f1ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	789b      	ldrb	r3, [r3, #2]
 800f182:	613b      	str	r3, [r7, #16]
 800f184:	e010      	b.n	800f1a8 <sync_window+0x78>
					wsect += fs->fsize;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	69db      	ldr	r3, [r3, #28]
 800f18a:	697a      	ldr	r2, [r7, #20]
 800f18c:	4413      	add	r3, r2
 800f18e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	7858      	ldrb	r0, [r3, #1]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f19a:	2301      	movs	r3, #1
 800f19c:	697a      	ldr	r2, [r7, #20]
 800f19e:	f7ff fceb 	bl	800eb78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	613b      	str	r3, [r7, #16]
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d8eb      	bhi.n	800f186 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3718      	adds	r7, #24
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d01b      	beq.n	800f208 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7ff ffad 	bl	800f130 <sync_window>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f1da:	7bfb      	ldrb	r3, [r7, #15]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d113      	bne.n	800f208 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	7858      	ldrb	r0, [r3, #1]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	683a      	ldr	r2, [r7, #0]
 800f1ee:	f7ff fca3 	bl	800eb38 <disk_read>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d004      	beq.n	800f202 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800f208:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
	...

0800f214 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7ff ff87 	bl	800f130 <sync_window>
 800f222:	4603      	mov	r3, r0
 800f224:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f226:	7bfb      	ldrb	r3, [r7, #15]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d158      	bne.n	800f2de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b03      	cmp	r3, #3
 800f232:	d148      	bne.n	800f2c6 <sync_fs+0xb2>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	791b      	ldrb	r3, [r3, #4]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d144      	bne.n	800f2c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	3334      	adds	r3, #52	@ 0x34
 800f240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f244:	2100      	movs	r1, #0
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fd78 	bl	800ed3c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	3334      	adds	r3, #52	@ 0x34
 800f250:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f254:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f258:	4618      	mov	r0, r3
 800f25a:	f7ff fd07 	bl	800ec6c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	3334      	adds	r3, #52	@ 0x34
 800f262:	4921      	ldr	r1, [pc, #132]	@ (800f2e8 <sync_fs+0xd4>)
 800f264:	4618      	mov	r0, r3
 800f266:	f7ff fd1c 	bl	800eca2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	3334      	adds	r3, #52	@ 0x34
 800f26e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f272:	491e      	ldr	r1, [pc, #120]	@ (800f2ec <sync_fs+0xd8>)
 800f274:	4618      	mov	r0, r3
 800f276:	f7ff fd14 	bl	800eca2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	3334      	adds	r3, #52	@ 0x34
 800f27e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	695b      	ldr	r3, [r3, #20]
 800f286:	4619      	mov	r1, r3
 800f288:	4610      	mov	r0, r2
 800f28a:	f7ff fd0a 	bl	800eca2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	3334      	adds	r3, #52	@ 0x34
 800f292:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	691b      	ldr	r3, [r3, #16]
 800f29a:	4619      	mov	r1, r3
 800f29c:	4610      	mov	r0, r2
 800f29e:	f7ff fd00 	bl	800eca2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6a1b      	ldr	r3, [r3, #32]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	7858      	ldrb	r0, [r3, #1]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	f7ff fc5c 	bl	800eb78 <disk_write>
			fs->fsi_flag = 0;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	785b      	ldrb	r3, [r3, #1]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7ff fc72 	bl	800ebb8 <disk_ioctl>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <sync_fs+0xca>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3710      	adds	r7, #16
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	41615252 	.word	0x41615252
 800f2ec:	61417272 	.word	0x61417272

0800f2f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	3b02      	subs	r3, #2
 800f2fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	699b      	ldr	r3, [r3, #24]
 800f304:	3b02      	subs	r3, #2
 800f306:	683a      	ldr	r2, [r7, #0]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d301      	bcc.n	800f310 <clust2sect+0x20>
 800f30c:	2300      	movs	r3, #0
 800f30e:	e008      	b.n	800f322 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	895b      	ldrh	r3, [r3, #10]
 800f314:	461a      	mov	r2, r3
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	fb03 f202 	mul.w	r2, r3, r2
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f320:	4413      	add	r3, r2
}
 800f322:	4618      	mov	r0, r3
 800f324:	370c      	adds	r7, #12
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b086      	sub	sp, #24
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
 800f336:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	2b01      	cmp	r3, #1
 800f342:	d904      	bls.n	800f34e <get_fat+0x20>
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	699b      	ldr	r3, [r3, #24]
 800f348:	683a      	ldr	r2, [r7, #0]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d302      	bcc.n	800f354 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f34e:	2301      	movs	r3, #1
 800f350:	617b      	str	r3, [r7, #20]
 800f352:	e08e      	b.n	800f472 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f354:	f04f 33ff 	mov.w	r3, #4294967295
 800f358:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d061      	beq.n	800f426 <get_fat+0xf8>
 800f362:	2b03      	cmp	r3, #3
 800f364:	dc7b      	bgt.n	800f45e <get_fat+0x130>
 800f366:	2b01      	cmp	r3, #1
 800f368:	d002      	beq.n	800f370 <get_fat+0x42>
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	d041      	beq.n	800f3f2 <get_fat+0xc4>
 800f36e:	e076      	b.n	800f45e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	60fb      	str	r3, [r7, #12]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	085b      	lsrs	r3, r3, #1
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	4413      	add	r3, r2
 800f37c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	0a5b      	lsrs	r3, r3, #9
 800f386:	4413      	add	r3, r2
 800f388:	4619      	mov	r1, r3
 800f38a:	6938      	ldr	r0, [r7, #16]
 800f38c:	f7ff ff14 	bl	800f1b8 <move_window>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d166      	bne.n	800f464 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	60fa      	str	r2, [r7, #12]
 800f39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3a0:	693a      	ldr	r2, [r7, #16]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f3a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	0a5b      	lsrs	r3, r3, #9
 800f3b2:	4413      	add	r3, r2
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	6938      	ldr	r0, [r7, #16]
 800f3b8:	f7ff fefe 	bl	800f1b8 <move_window>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d152      	bne.n	800f468 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f3d0:	021b      	lsls	r3, r3, #8
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	f003 0301 	and.w	r3, r3, #1
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d002      	beq.n	800f3e8 <get_fat+0xba>
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	091b      	lsrs	r3, r3, #4
 800f3e6:	e002      	b.n	800f3ee <get_fat+0xc0>
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3ee:	617b      	str	r3, [r7, #20]
			break;
 800f3f0:	e03f      	b.n	800f472 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	0a1b      	lsrs	r3, r3, #8
 800f3fa:	4413      	add	r3, r2
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6938      	ldr	r0, [r7, #16]
 800f400:	f7ff feda 	bl	800f1b8 <move_window>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d130      	bne.n	800f46c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	005b      	lsls	r3, r3, #1
 800f414:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f418:	4413      	add	r3, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7ff fbea 	bl	800ebf4 <ld_word>
 800f420:	4603      	mov	r3, r0
 800f422:	617b      	str	r3, [r7, #20]
			break;
 800f424:	e025      	b.n	800f472 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	09db      	lsrs	r3, r3, #7
 800f42e:	4413      	add	r3, r2
 800f430:	4619      	mov	r1, r3
 800f432:	6938      	ldr	r0, [r7, #16]
 800f434:	f7ff fec0 	bl	800f1b8 <move_window>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d118      	bne.n	800f470 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f44c:	4413      	add	r3, r2
 800f44e:	4618      	mov	r0, r3
 800f450:	f7ff fbe9 	bl	800ec26 <ld_dword>
 800f454:	4603      	mov	r3, r0
 800f456:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f45a:	617b      	str	r3, [r7, #20]
			break;
 800f45c:	e009      	b.n	800f472 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f45e:	2301      	movs	r3, #1
 800f460:	617b      	str	r3, [r7, #20]
 800f462:	e006      	b.n	800f472 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f464:	bf00      	nop
 800f466:	e004      	b.n	800f472 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f468:	bf00      	nop
 800f46a:	e002      	b.n	800f472 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f46c:	bf00      	nop
 800f46e:	e000      	b.n	800f472 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f470:	bf00      	nop
		}
	}

	return val;
 800f472:	697b      	ldr	r3, [r7, #20]
}
 800f474:	4618      	mov	r0, r3
 800f476:	3718      	adds	r7, #24
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f47c:	b590      	push	{r4, r7, lr}
 800f47e:	b089      	sub	sp, #36	@ 0x24
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f488:	2302      	movs	r3, #2
 800f48a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	f240 80d9 	bls.w	800f646 <put_fat+0x1ca>
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	699b      	ldr	r3, [r3, #24]
 800f498:	68ba      	ldr	r2, [r7, #8]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	f080 80d3 	bcs.w	800f646 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	f000 8096 	beq.w	800f5d6 <put_fat+0x15a>
 800f4aa:	2b03      	cmp	r3, #3
 800f4ac:	f300 80cb 	bgt.w	800f646 <put_fat+0x1ca>
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d002      	beq.n	800f4ba <put_fat+0x3e>
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d06e      	beq.n	800f596 <put_fat+0x11a>
 800f4b8:	e0c5      	b.n	800f646 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	61bb      	str	r3, [r7, #24]
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	085b      	lsrs	r3, r3, #1
 800f4c2:	69ba      	ldr	r2, [r7, #24]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	0a5b      	lsrs	r3, r3, #9
 800f4d0:	4413      	add	r3, r2
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f7ff fe6f 	bl	800f1b8 <move_window>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f4de:	7ffb      	ldrb	r3, [r7, #31]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f040 80a9 	bne.w	800f638 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	1c59      	adds	r1, r3, #1
 800f4f0:	61b9      	str	r1, [r7, #24]
 800f4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4f6:	4413      	add	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	f003 0301 	and.w	r3, r3, #1
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00d      	beq.n	800f520 <put_fat+0xa4>
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	b25b      	sxtb	r3, r3
 800f50a:	f003 030f 	and.w	r3, r3, #15
 800f50e:	b25a      	sxtb	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	b25b      	sxtb	r3, r3
 800f514:	011b      	lsls	r3, r3, #4
 800f516:	b25b      	sxtb	r3, r3
 800f518:	4313      	orrs	r3, r2
 800f51a:	b25b      	sxtb	r3, r3
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	e001      	b.n	800f524 <put_fat+0xa8>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	b2db      	uxtb	r3, r3
 800f524:	697a      	ldr	r2, [r7, #20]
 800f526:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2201      	movs	r2, #1
 800f52c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	0a5b      	lsrs	r3, r3, #9
 800f536:	4413      	add	r3, r2
 800f538:	4619      	mov	r1, r3
 800f53a:	68f8      	ldr	r0, [r7, #12]
 800f53c:	f7ff fe3c 	bl	800f1b8 <move_window>
 800f540:	4603      	mov	r3, r0
 800f542:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f544:	7ffb      	ldrb	r3, [r7, #31]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d178      	bne.n	800f63c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f556:	4413      	add	r3, r2
 800f558:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	2b00      	cmp	r3, #0
 800f562:	d003      	beq.n	800f56c <put_fat+0xf0>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	091b      	lsrs	r3, r3, #4
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	e00e      	b.n	800f58a <put_fat+0x10e>
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	b25b      	sxtb	r3, r3
 800f572:	f023 030f 	bic.w	r3, r3, #15
 800f576:	b25a      	sxtb	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	0a1b      	lsrs	r3, r3, #8
 800f57c:	b25b      	sxtb	r3, r3
 800f57e:	f003 030f 	and.w	r3, r3, #15
 800f582:	b25b      	sxtb	r3, r3
 800f584:	4313      	orrs	r3, r2
 800f586:	b25b      	sxtb	r3, r3
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	697a      	ldr	r2, [r7, #20]
 800f58c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2201      	movs	r2, #1
 800f592:	70da      	strb	r2, [r3, #3]
			break;
 800f594:	e057      	b.n	800f646 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	0a1b      	lsrs	r3, r3, #8
 800f59e:	4413      	add	r3, r2
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f7ff fe08 	bl	800f1b8 <move_window>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5ac:	7ffb      	ldrb	r3, [r7, #31]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d146      	bne.n	800f640 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	005b      	lsls	r3, r3, #1
 800f5bc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f5c0:	4413      	add	r3, r2
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	b292      	uxth	r2, r2
 800f5c6:	4611      	mov	r1, r2
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7ff fb4f 	bl	800ec6c <st_word>
			fs->wflag = 1;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	70da      	strb	r2, [r3, #3]
			break;
 800f5d4:	e037      	b.n	800f646 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	09db      	lsrs	r3, r3, #7
 800f5de:	4413      	add	r3, r2
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	68f8      	ldr	r0, [r7, #12]
 800f5e4:	f7ff fde8 	bl	800f1b8 <move_window>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5ec:	7ffb      	ldrb	r3, [r7, #31]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d128      	bne.n	800f644 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f606:	4413      	add	r3, r2
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fb0c 	bl	800ec26 <ld_dword>
 800f60e:	4603      	mov	r3, r0
 800f610:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f614:	4323      	orrs	r3, r4
 800f616:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f626:	4413      	add	r3, r2
 800f628:	6879      	ldr	r1, [r7, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7ff fb39 	bl	800eca2 <st_dword>
			fs->wflag = 1;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2201      	movs	r2, #1
 800f634:	70da      	strb	r2, [r3, #3]
			break;
 800f636:	e006      	b.n	800f646 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f638:	bf00      	nop
 800f63a:	e004      	b.n	800f646 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f63c:	bf00      	nop
 800f63e:	e002      	b.n	800f646 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f640:	bf00      	nop
 800f642:	e000      	b.n	800f646 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f644:	bf00      	nop
		}
	}
	return res;
 800f646:	7ffb      	ldrb	r3, [r7, #31]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3724      	adds	r7, #36	@ 0x24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd90      	pop	{r4, r7, pc}

0800f650 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b088      	sub	sp, #32
 800f654:	af00      	add	r7, sp, #0
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f65c:	2300      	movs	r3, #0
 800f65e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d904      	bls.n	800f676 <remove_chain+0x26>
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	699b      	ldr	r3, [r3, #24]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	429a      	cmp	r2, r3
 800f674:	d301      	bcc.n	800f67a <remove_chain+0x2a>
 800f676:	2302      	movs	r3, #2
 800f678:	e04b      	b.n	800f712 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00c      	beq.n	800f69a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f680:	f04f 32ff 	mov.w	r2, #4294967295
 800f684:	6879      	ldr	r1, [r7, #4]
 800f686:	69b8      	ldr	r0, [r7, #24]
 800f688:	f7ff fef8 	bl	800f47c <put_fat>
 800f68c:	4603      	mov	r3, r0
 800f68e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f690:	7ffb      	ldrb	r3, [r7, #31]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <remove_chain+0x4a>
 800f696:	7ffb      	ldrb	r3, [r7, #31]
 800f698:	e03b      	b.n	800f712 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f7ff fe46 	bl	800f32e <get_fat>
 800f6a2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d031      	beq.n	800f70e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d101      	bne.n	800f6b4 <remove_chain+0x64>
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	e02e      	b.n	800f712 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ba:	d101      	bne.n	800f6c0 <remove_chain+0x70>
 800f6bc:	2301      	movs	r3, #1
 800f6be:	e028      	b.n	800f712 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	68b9      	ldr	r1, [r7, #8]
 800f6c4:	69b8      	ldr	r0, [r7, #24]
 800f6c6:	f7ff fed9 	bl	800f47c <put_fat>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f6ce:	7ffb      	ldrb	r3, [r7, #31]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <remove_chain+0x88>
 800f6d4:	7ffb      	ldrb	r3, [r7, #31]
 800f6d6:	e01c      	b.n	800f712 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	695a      	ldr	r2, [r3, #20]
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	699b      	ldr	r3, [r3, #24]
 800f6e0:	3b02      	subs	r3, #2
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d20b      	bcs.n	800f6fe <remove_chain+0xae>
			fs->free_clst++;
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	695b      	ldr	r3, [r3, #20]
 800f6ea:	1c5a      	adds	r2, r3, #1
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	791b      	ldrb	r3, [r3, #4]
 800f6f4:	f043 0301 	orr.w	r3, r3, #1
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	699b      	ldr	r3, [r3, #24]
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d3c6      	bcc.n	800f69a <remove_chain+0x4a>
 800f70c:	e000      	b.n	800f710 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f70e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	3720      	adds	r7, #32
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}

0800f71a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f71a:	b580      	push	{r7, lr}
 800f71c:	b088      	sub	sp, #32
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
 800f722:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10d      	bne.n	800f74c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	691b      	ldr	r3, [r3, #16]
 800f734:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d004      	beq.n	800f746 <create_chain+0x2c>
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	699b      	ldr	r3, [r3, #24]
 800f740:	69ba      	ldr	r2, [r7, #24]
 800f742:	429a      	cmp	r2, r3
 800f744:	d31b      	bcc.n	800f77e <create_chain+0x64>
 800f746:	2301      	movs	r3, #1
 800f748:	61bb      	str	r3, [r7, #24]
 800f74a:	e018      	b.n	800f77e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7ff fded 	bl	800f32e <get_fat>
 800f754:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d801      	bhi.n	800f760 <create_chain+0x46>
 800f75c:	2301      	movs	r3, #1
 800f75e:	e070      	b.n	800f842 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f766:	d101      	bne.n	800f76c <create_chain+0x52>
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	e06a      	b.n	800f842 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	699b      	ldr	r3, [r3, #24]
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	429a      	cmp	r2, r3
 800f774:	d201      	bcs.n	800f77a <create_chain+0x60>
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	e063      	b.n	800f842 <create_chain+0x128>
		scl = clst;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	3301      	adds	r3, #1
 800f786:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	69fa      	ldr	r2, [r7, #28]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d307      	bcc.n	800f7a2 <create_chain+0x88>
				ncl = 2;
 800f792:	2302      	movs	r3, #2
 800f794:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f796:	69fa      	ldr	r2, [r7, #28]
 800f798:	69bb      	ldr	r3, [r7, #24]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d901      	bls.n	800f7a2 <create_chain+0x88>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	e04f      	b.n	800f842 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f7a2:	69f9      	ldr	r1, [r7, #28]
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff fdc2 	bl	800f32e <get_fat>
 800f7aa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00e      	beq.n	800f7d0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d003      	beq.n	800f7c0 <create_chain+0xa6>
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7be:	d101      	bne.n	800f7c4 <create_chain+0xaa>
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	e03e      	b.n	800f842 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f7c4:	69fa      	ldr	r2, [r7, #28]
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d1da      	bne.n	800f782 <create_chain+0x68>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e038      	b.n	800f842 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f7d0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d6:	69f9      	ldr	r1, [r7, #28]
 800f7d8:	6938      	ldr	r0, [r7, #16]
 800f7da:	f7ff fe4f 	bl	800f47c <put_fat>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d109      	bne.n	800f7fc <create_chain+0xe2>
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d006      	beq.n	800f7fc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f7ee:	69fa      	ldr	r2, [r7, #28]
 800f7f0:	6839      	ldr	r1, [r7, #0]
 800f7f2:	6938      	ldr	r0, [r7, #16]
 800f7f4:	f7ff fe42 	bl	800f47c <put_fat>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f7fc:	7dfb      	ldrb	r3, [r7, #23]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d116      	bne.n	800f830 <create_chain+0x116>
		fs->last_clst = ncl;
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	69fa      	ldr	r2, [r7, #28]
 800f806:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	695a      	ldr	r2, [r3, #20]
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	699b      	ldr	r3, [r3, #24]
 800f810:	3b02      	subs	r3, #2
 800f812:	429a      	cmp	r2, r3
 800f814:	d804      	bhi.n	800f820 <create_chain+0x106>
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	1e5a      	subs	r2, r3, #1
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	791b      	ldrb	r3, [r3, #4]
 800f824:	f043 0301 	orr.w	r3, r3, #1
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	711a      	strb	r2, [r3, #4]
 800f82e:	e007      	b.n	800f840 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f830:	7dfb      	ldrb	r3, [r7, #23]
 800f832:	2b01      	cmp	r3, #1
 800f834:	d102      	bne.n	800f83c <create_chain+0x122>
 800f836:	f04f 33ff 	mov.w	r3, #4294967295
 800f83a:	e000      	b.n	800f83e <create_chain+0x124>
 800f83c:	2301      	movs	r3, #1
 800f83e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f840:	69fb      	ldr	r3, [r7, #28]
}
 800f842:	4618      	mov	r0, r3
 800f844:	3720      	adds	r7, #32
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f84a:	b480      	push	{r7}
 800f84c:	b087      	sub	sp, #28
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
 800f852:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f85e:	3304      	adds	r3, #4
 800f860:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	0a5b      	lsrs	r3, r3, #9
 800f866:	68fa      	ldr	r2, [r7, #12]
 800f868:	8952      	ldrh	r2, [r2, #10]
 800f86a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f86e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	1d1a      	adds	r2, r3, #4
 800f874:	613a      	str	r2, [r7, #16]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d101      	bne.n	800f884 <clmt_clust+0x3a>
 800f880:	2300      	movs	r3, #0
 800f882:	e010      	b.n	800f8a6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f884:	697a      	ldr	r2, [r7, #20]
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d307      	bcc.n	800f89c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	1ad3      	subs	r3, r2, r3
 800f892:	617b      	str	r3, [r7, #20]
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	3304      	adds	r3, #4
 800f898:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f89a:	e7e9      	b.n	800f870 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f89c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	4413      	add	r3, r2
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	371c      	adds	r7, #28
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr

0800f8b2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f8b2:	b580      	push	{r7, lr}
 800f8b4:	b086      	sub	sp, #24
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
 800f8ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f8c8:	d204      	bcs.n	800f8d4 <dir_sdi+0x22>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	f003 031f 	and.w	r3, r3, #31
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d001      	beq.n	800f8d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f8d4:	2302      	movs	r3, #2
 800f8d6:	e063      	b.n	800f9a0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	683a      	ldr	r2, [r7, #0]
 800f8dc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d106      	bne.n	800f8f8 <dir_sdi+0x46>
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d902      	bls.n	800f8f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8f6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d10c      	bne.n	800f918 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	095b      	lsrs	r3, r3, #5
 800f902:	693a      	ldr	r2, [r7, #16]
 800f904:	8912      	ldrh	r2, [r2, #8]
 800f906:	4293      	cmp	r3, r2
 800f908:	d301      	bcc.n	800f90e <dir_sdi+0x5c>
 800f90a:	2302      	movs	r3, #2
 800f90c:	e048      	b.n	800f9a0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	61da      	str	r2, [r3, #28]
 800f916:	e029      	b.n	800f96c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	895b      	ldrh	r3, [r3, #10]
 800f91c:	025b      	lsls	r3, r3, #9
 800f91e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f920:	e019      	b.n	800f956 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6979      	ldr	r1, [r7, #20]
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff fd01 	bl	800f32e <get_fat>
 800f92c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f934:	d101      	bne.n	800f93a <dir_sdi+0x88>
 800f936:	2301      	movs	r3, #1
 800f938:	e032      	b.n	800f9a0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d904      	bls.n	800f94a <dir_sdi+0x98>
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	699b      	ldr	r3, [r3, #24]
 800f944:	697a      	ldr	r2, [r7, #20]
 800f946:	429a      	cmp	r2, r3
 800f948:	d301      	bcc.n	800f94e <dir_sdi+0x9c>
 800f94a:	2302      	movs	r3, #2
 800f94c:	e028      	b.n	800f9a0 <dir_sdi+0xee>
			ofs -= csz;
 800f94e:	683a      	ldr	r2, [r7, #0]
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d2e1      	bcs.n	800f922 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f95e:	6979      	ldr	r1, [r7, #20]
 800f960:	6938      	ldr	r0, [r7, #16]
 800f962:	f7ff fcc5 	bl	800f2f0 <clust2sect>
 800f966:	4602      	mov	r2, r0
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	697a      	ldr	r2, [r7, #20]
 800f970:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	69db      	ldr	r3, [r3, #28]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d101      	bne.n	800f97e <dir_sdi+0xcc>
 800f97a:	2302      	movs	r3, #2
 800f97c:	e010      	b.n	800f9a0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	69da      	ldr	r2, [r3, #28]
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	0a5b      	lsrs	r3, r3, #9
 800f986:	441a      	add	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f998:	441a      	add	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3718      	adds	r7, #24
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	3320      	adds	r3, #32
 800f9be:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	69db      	ldr	r3, [r3, #28]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d003      	beq.n	800f9d0 <dir_next+0x28>
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f9ce:	d301      	bcc.n	800f9d4 <dir_next+0x2c>
 800f9d0:	2304      	movs	r3, #4
 800f9d2:	e0aa      	b.n	800fb2a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f040 8098 	bne.w	800fb10 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	69db      	ldr	r3, [r3, #28]
 800f9e4:	1c5a      	adds	r2, r3, #1
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	699b      	ldr	r3, [r3, #24]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d10b      	bne.n	800fa0a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	095b      	lsrs	r3, r3, #5
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	8912      	ldrh	r2, [r2, #8]
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	f0c0 8088 	bcc.w	800fb10 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	61da      	str	r2, [r3, #28]
 800fa06:	2304      	movs	r3, #4
 800fa08:	e08f      	b.n	800fb2a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	0a5b      	lsrs	r3, r3, #9
 800fa0e:	68fa      	ldr	r2, [r7, #12]
 800fa10:	8952      	ldrh	r2, [r2, #10]
 800fa12:	3a01      	subs	r2, #1
 800fa14:	4013      	ands	r3, r2
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d17a      	bne.n	800fb10 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	699b      	ldr	r3, [r3, #24]
 800fa20:	4619      	mov	r1, r3
 800fa22:	4610      	mov	r0, r2
 800fa24:	f7ff fc83 	bl	800f32e <get_fat>
 800fa28:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d801      	bhi.n	800fa34 <dir_next+0x8c>
 800fa30:	2302      	movs	r3, #2
 800fa32:	e07a      	b.n	800fb2a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa3a:	d101      	bne.n	800fa40 <dir_next+0x98>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e074      	b.n	800fb2a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	699b      	ldr	r3, [r3, #24]
 800fa44:	697a      	ldr	r2, [r7, #20]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d358      	bcc.n	800fafc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d104      	bne.n	800fa5a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2200      	movs	r2, #0
 800fa54:	61da      	str	r2, [r3, #28]
 800fa56:	2304      	movs	r3, #4
 800fa58:	e067      	b.n	800fb2a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	4619      	mov	r1, r3
 800fa62:	4610      	mov	r0, r2
 800fa64:	f7ff fe59 	bl	800f71a <create_chain>
 800fa68:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d101      	bne.n	800fa74 <dir_next+0xcc>
 800fa70:	2307      	movs	r3, #7
 800fa72:	e05a      	b.n	800fb2a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d101      	bne.n	800fa7e <dir_next+0xd6>
 800fa7a:	2302      	movs	r3, #2
 800fa7c:	e055      	b.n	800fb2a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa84:	d101      	bne.n	800fa8a <dir_next+0xe2>
 800fa86:	2301      	movs	r3, #1
 800fa88:	e04f      	b.n	800fb2a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f7ff fb50 	bl	800f130 <sync_window>
 800fa90:	4603      	mov	r3, r0
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d001      	beq.n	800fa9a <dir_next+0xf2>
 800fa96:	2301      	movs	r3, #1
 800fa98:	e047      	b.n	800fb2a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	3334      	adds	r3, #52	@ 0x34
 800fa9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faa2:	2100      	movs	r1, #0
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7ff f949 	bl	800ed3c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800faaa:	2300      	movs	r3, #0
 800faac:	613b      	str	r3, [r7, #16]
 800faae:	6979      	ldr	r1, [r7, #20]
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7ff fc1d 	bl	800f2f0 <clust2sect>
 800fab6:	4602      	mov	r2, r0
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	631a      	str	r2, [r3, #48]	@ 0x30
 800fabc:	e012      	b.n	800fae4 <dir_next+0x13c>
						fs->wflag = 1;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2201      	movs	r2, #1
 800fac2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f7ff fb33 	bl	800f130 <sync_window>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d001      	beq.n	800fad4 <dir_next+0x12c>
 800fad0:	2301      	movs	r3, #1
 800fad2:	e02a      	b.n	800fb2a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	3301      	adds	r3, #1
 800fad8:	613b      	str	r3, [r7, #16]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fade:	1c5a      	adds	r2, r3, #1
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	631a      	str	r2, [r3, #48]	@ 0x30
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	895b      	ldrh	r3, [r3, #10]
 800fae8:	461a      	mov	r2, r3
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	4293      	cmp	r3, r2
 800faee:	d3e6      	bcc.n	800fabe <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	1ad2      	subs	r2, r2, r3
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	697a      	ldr	r2, [r7, #20]
 800fb00:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fb02:	6979      	ldr	r1, [r7, #20]
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f7ff fbf3 	bl	800f2f0 <clust2sect>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68ba      	ldr	r2, [r7, #8]
 800fb14:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb22:	441a      	add	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fb28:	2300      	movs	r3, #0
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3718      	adds	r7, #24
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b086      	sub	sp, #24
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fb42:	2100      	movs	r1, #0
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f7ff feb4 	bl	800f8b2 <dir_sdi>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d12b      	bne.n	800fbac <dir_alloc+0x7a>
		n = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	69db      	ldr	r3, [r3, #28]
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f7ff fb2a 	bl	800f1b8 <move_window>
 800fb64:	4603      	mov	r3, r0
 800fb66:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb68:	7dfb      	ldrb	r3, [r7, #23]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d11d      	bne.n	800fbaa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6a1b      	ldr	r3, [r3, #32]
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	2be5      	cmp	r3, #229	@ 0xe5
 800fb76:	d004      	beq.n	800fb82 <dir_alloc+0x50>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a1b      	ldr	r3, [r3, #32]
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d107      	bne.n	800fb92 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	3301      	adds	r3, #1
 800fb86:	613b      	str	r3, [r7, #16]
 800fb88:	693a      	ldr	r2, [r7, #16]
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d102      	bne.n	800fb96 <dir_alloc+0x64>
 800fb90:	e00c      	b.n	800fbac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fb92:	2300      	movs	r3, #0
 800fb94:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fb96:	2101      	movs	r1, #1
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7ff ff05 	bl	800f9a8 <dir_next>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fba2:	7dfb      	ldrb	r3, [r7, #23]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d0d7      	beq.n	800fb58 <dir_alloc+0x26>
 800fba8:	e000      	b.n	800fbac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fbaa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fbac:	7dfb      	ldrb	r3, [r7, #23]
 800fbae:	2b04      	cmp	r3, #4
 800fbb0:	d101      	bne.n	800fbb6 <dir_alloc+0x84>
 800fbb2:	2307      	movs	r3, #7
 800fbb4:	75fb      	strb	r3, [r7, #23]
	return res;
 800fbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3718      	adds	r7, #24
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	331a      	adds	r3, #26
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7ff f810 	bl	800ebf4 <ld_word>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	2b03      	cmp	r3, #3
 800fbde:	d109      	bne.n	800fbf4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	3314      	adds	r3, #20
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7ff f805 	bl	800ebf4 <ld_word>
 800fbea:	4603      	mov	r3, r0
 800fbec:	041b      	lsls	r3, r3, #16
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b084      	sub	sp, #16
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	60f8      	str	r0, [r7, #12]
 800fc06:	60b9      	str	r1, [r7, #8]
 800fc08:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	331a      	adds	r3, #26
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	b292      	uxth	r2, r2
 800fc12:	4611      	mov	r1, r2
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff f829 	bl	800ec6c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	2b03      	cmp	r3, #3
 800fc20:	d109      	bne.n	800fc36 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	f103 0214 	add.w	r2, r3, #20
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	0c1b      	lsrs	r3, r3, #16
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	4619      	mov	r1, r3
 800fc30:	4610      	mov	r0, r2
 800fc32:	f7ff f81b 	bl	800ec6c <st_word>
	}
}
 800fc36:	bf00      	nop
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b086      	sub	sp, #24
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f7ff fe2f 	bl	800f8b2 <dir_sdi>
 800fc54:	4603      	mov	r3, r0
 800fc56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fc58:	7dfb      	ldrb	r3, [r7, #23]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d001      	beq.n	800fc62 <dir_find+0x24>
 800fc5e:	7dfb      	ldrb	r3, [r7, #23]
 800fc60:	e03e      	b.n	800fce0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	69db      	ldr	r3, [r3, #28]
 800fc66:	4619      	mov	r1, r3
 800fc68:	6938      	ldr	r0, [r7, #16]
 800fc6a:	f7ff faa5 	bl	800f1b8 <move_window>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d12f      	bne.n	800fcd8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6a1b      	ldr	r3, [r3, #32]
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fc80:	7bfb      	ldrb	r3, [r7, #15]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d102      	bne.n	800fc8c <dir_find+0x4e>
 800fc86:	2304      	movs	r3, #4
 800fc88:	75fb      	strb	r3, [r7, #23]
 800fc8a:	e028      	b.n	800fcde <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a1b      	ldr	r3, [r3, #32]
 800fc90:	330b      	adds	r3, #11
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6a1b      	ldr	r3, [r3, #32]
 800fca2:	330b      	adds	r3, #11
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	f003 0308 	and.w	r3, r3, #8
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d10a      	bne.n	800fcc4 <dir_find+0x86>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6a18      	ldr	r0, [r3, #32]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3324      	adds	r3, #36	@ 0x24
 800fcb6:	220b      	movs	r2, #11
 800fcb8:	4619      	mov	r1, r3
 800fcba:	f7ff f85a 	bl	800ed72 <mem_cmp>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d00b      	beq.n	800fcdc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fcc4:	2100      	movs	r1, #0
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f7ff fe6e 	bl	800f9a8 <dir_next>
 800fccc:	4603      	mov	r3, r0
 800fcce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fcd0:	7dfb      	ldrb	r3, [r7, #23]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d0c5      	beq.n	800fc62 <dir_find+0x24>
 800fcd6:	e002      	b.n	800fcde <dir_find+0xa0>
		if (res != FR_OK) break;
 800fcd8:	bf00      	nop
 800fcda:	e000      	b.n	800fcde <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fcdc:	bf00      	nop

	return res;
 800fcde:	7dfb      	ldrb	r3, [r7, #23]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3718      	adds	r7, #24
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fcf6:	2101      	movs	r1, #1
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff ff1a 	bl	800fb32 <dir_alloc>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fd02:	7bfb      	ldrb	r3, [r7, #15]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d11c      	bne.n	800fd42 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	69db      	ldr	r3, [r3, #28]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	68b8      	ldr	r0, [r7, #8]
 800fd10:	f7ff fa52 	bl	800f1b8 <move_window>
 800fd14:	4603      	mov	r3, r0
 800fd16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fd18:	7bfb      	ldrb	r3, [r7, #15]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d111      	bne.n	800fd42 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6a1b      	ldr	r3, [r3, #32]
 800fd22:	2220      	movs	r2, #32
 800fd24:	2100      	movs	r1, #0
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7ff f808 	bl	800ed3c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a18      	ldr	r0, [r3, #32]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3324      	adds	r3, #36	@ 0x24
 800fd34:	220b      	movs	r2, #11
 800fd36:	4619      	mov	r1, r3
 800fd38:	f7fe ffdf 	bl	800ecfa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b088      	sub	sp, #32
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	60fb      	str	r3, [r7, #12]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	3324      	adds	r3, #36	@ 0x24
 800fd60:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fd62:	220b      	movs	r2, #11
 800fd64:	2120      	movs	r1, #32
 800fd66:	68b8      	ldr	r0, [r7, #8]
 800fd68:	f7fe ffe8 	bl	800ed3c <mem_set>
	si = i = 0; ni = 8;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	613b      	str	r3, [r7, #16]
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	61fb      	str	r3, [r7, #28]
 800fd74:	2308      	movs	r3, #8
 800fd76:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	1c5a      	adds	r2, r3, #1
 800fd7c:	61fa      	str	r2, [r7, #28]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	4413      	add	r3, r2
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fd86:	7efb      	ldrb	r3, [r7, #27]
 800fd88:	2b20      	cmp	r3, #32
 800fd8a:	d94e      	bls.n	800fe2a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fd8c:	7efb      	ldrb	r3, [r7, #27]
 800fd8e:	2b2f      	cmp	r3, #47	@ 0x2f
 800fd90:	d006      	beq.n	800fda0 <create_name+0x54>
 800fd92:	7efb      	ldrb	r3, [r7, #27]
 800fd94:	2b5c      	cmp	r3, #92	@ 0x5c
 800fd96:	d110      	bne.n	800fdba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fd98:	e002      	b.n	800fda0 <create_name+0x54>
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	61fb      	str	r3, [r7, #28]
 800fda0:	68fa      	ldr	r2, [r7, #12]
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	4413      	add	r3, r2
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b2f      	cmp	r3, #47	@ 0x2f
 800fdaa:	d0f6      	beq.n	800fd9a <create_name+0x4e>
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b5c      	cmp	r3, #92	@ 0x5c
 800fdb6:	d0f0      	beq.n	800fd9a <create_name+0x4e>
			break;
 800fdb8:	e038      	b.n	800fe2c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fdba:	7efb      	ldrb	r3, [r7, #27]
 800fdbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdbe:	d003      	beq.n	800fdc8 <create_name+0x7c>
 800fdc0:	693a      	ldr	r2, [r7, #16]
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d30c      	bcc.n	800fde2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	2b0b      	cmp	r3, #11
 800fdcc:	d002      	beq.n	800fdd4 <create_name+0x88>
 800fdce:	7efb      	ldrb	r3, [r7, #27]
 800fdd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdd2:	d001      	beq.n	800fdd8 <create_name+0x8c>
 800fdd4:	2306      	movs	r3, #6
 800fdd6:	e044      	b.n	800fe62 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fdd8:	2308      	movs	r3, #8
 800fdda:	613b      	str	r3, [r7, #16]
 800fddc:	230b      	movs	r3, #11
 800fdde:	617b      	str	r3, [r7, #20]
			continue;
 800fde0:	e022      	b.n	800fe28 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fde2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	da04      	bge.n	800fdf4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fdea:	7efb      	ldrb	r3, [r7, #27]
 800fdec:	3b80      	subs	r3, #128	@ 0x80
 800fdee:	4a1f      	ldr	r2, [pc, #124]	@ (800fe6c <create_name+0x120>)
 800fdf0:	5cd3      	ldrb	r3, [r2, r3]
 800fdf2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fdf4:	7efb      	ldrb	r3, [r7, #27]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	481d      	ldr	r0, [pc, #116]	@ (800fe70 <create_name+0x124>)
 800fdfa:	f7fe ffe1 	bl	800edc0 <chk_chr>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <create_name+0xbc>
 800fe04:	2306      	movs	r3, #6
 800fe06:	e02c      	b.n	800fe62 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fe08:	7efb      	ldrb	r3, [r7, #27]
 800fe0a:	2b60      	cmp	r3, #96	@ 0x60
 800fe0c:	d905      	bls.n	800fe1a <create_name+0xce>
 800fe0e:	7efb      	ldrb	r3, [r7, #27]
 800fe10:	2b7a      	cmp	r3, #122	@ 0x7a
 800fe12:	d802      	bhi.n	800fe1a <create_name+0xce>
 800fe14:	7efb      	ldrb	r3, [r7, #27]
 800fe16:	3b20      	subs	r3, #32
 800fe18:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	1c5a      	adds	r2, r3, #1
 800fe1e:	613a      	str	r2, [r7, #16]
 800fe20:	68ba      	ldr	r2, [r7, #8]
 800fe22:	4413      	add	r3, r2
 800fe24:	7efa      	ldrb	r2, [r7, #27]
 800fe26:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fe28:	e7a6      	b.n	800fd78 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fe2a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	441a      	add	r2, r3
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d101      	bne.n	800fe40 <create_name+0xf4>
 800fe3c:	2306      	movs	r3, #6
 800fe3e:	e010      	b.n	800fe62 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	2be5      	cmp	r3, #229	@ 0xe5
 800fe46:	d102      	bne.n	800fe4e <create_name+0x102>
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	2205      	movs	r2, #5
 800fe4c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fe4e:	7efb      	ldrb	r3, [r7, #27]
 800fe50:	2b20      	cmp	r3, #32
 800fe52:	d801      	bhi.n	800fe58 <create_name+0x10c>
 800fe54:	2204      	movs	r2, #4
 800fe56:	e000      	b.n	800fe5a <create_name+0x10e>
 800fe58:	2200      	movs	r2, #0
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	330b      	adds	r3, #11
 800fe5e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fe60:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3720      	adds	r7, #32
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	0801b574 	.word	0x0801b574
 800fe70:	080195bc 	.word	0x080195bc

0800fe74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fe88:	e002      	b.n	800fe90 <follow_path+0x1c>
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	603b      	str	r3, [r7, #0]
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	2b2f      	cmp	r3, #47	@ 0x2f
 800fe96:	d0f8      	beq.n	800fe8a <follow_path+0x16>
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	2b5c      	cmp	r3, #92	@ 0x5c
 800fe9e:	d0f4      	beq.n	800fe8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	2200      	movs	r2, #0
 800fea4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	2b1f      	cmp	r3, #31
 800feac:	d80a      	bhi.n	800fec4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2280      	movs	r2, #128	@ 0x80
 800feb2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800feb6:	2100      	movs	r1, #0
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f7ff fcfa 	bl	800f8b2 <dir_sdi>
 800febe:	4603      	mov	r3, r0
 800fec0:	75fb      	strb	r3, [r7, #23]
 800fec2:	e043      	b.n	800ff4c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fec4:	463b      	mov	r3, r7
 800fec6:	4619      	mov	r1, r3
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7ff ff3f 	bl	800fd4c <create_name>
 800fece:	4603      	mov	r3, r0
 800fed0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fed2:	7dfb      	ldrb	r3, [r7, #23]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d134      	bne.n	800ff42 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7ff feb0 	bl	800fc3e <dir_find>
 800fede:	4603      	mov	r3, r0
 800fee0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fee8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800feea:	7dfb      	ldrb	r3, [r7, #23]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d00a      	beq.n	800ff06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fef0:	7dfb      	ldrb	r3, [r7, #23]
 800fef2:	2b04      	cmp	r3, #4
 800fef4:	d127      	bne.n	800ff46 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fef6:	7afb      	ldrb	r3, [r7, #11]
 800fef8:	f003 0304 	and.w	r3, r3, #4
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d122      	bne.n	800ff46 <follow_path+0xd2>
 800ff00:	2305      	movs	r3, #5
 800ff02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ff04:	e01f      	b.n	800ff46 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff06:	7afb      	ldrb	r3, [r7, #11]
 800ff08:	f003 0304 	and.w	r3, r3, #4
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d11c      	bne.n	800ff4a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	799b      	ldrb	r3, [r3, #6]
 800ff14:	f003 0310 	and.w	r3, r3, #16
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d102      	bne.n	800ff22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ff1c:	2305      	movs	r3, #5
 800ff1e:	75fb      	strb	r3, [r7, #23]
 800ff20:	e014      	b.n	800ff4c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	695b      	ldr	r3, [r3, #20]
 800ff2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff30:	4413      	add	r3, r2
 800ff32:	4619      	mov	r1, r3
 800ff34:	68f8      	ldr	r0, [r7, #12]
 800ff36:	f7ff fe43 	bl	800fbc0 <ld_clust>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff40:	e7c0      	b.n	800fec4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ff42:	bf00      	nop
 800ff44:	e002      	b.n	800ff4c <follow_path+0xd8>
				break;
 800ff46:	bf00      	nop
 800ff48:	e000      	b.n	800ff4c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff4a:	bf00      	nop
			}
		}
	}

	return res;
 800ff4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3718      	adds	r7, #24
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ff56:	b480      	push	{r7}
 800ff58:	b087      	sub	sp, #28
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ff5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff62:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d031      	beq.n	800ffd0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	617b      	str	r3, [r7, #20]
 800ff72:	e002      	b.n	800ff7a <get_ldnumber+0x24>
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	3301      	adds	r3, #1
 800ff78:	617b      	str	r3, [r7, #20]
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	2b20      	cmp	r3, #32
 800ff80:	d903      	bls.n	800ff8a <get_ldnumber+0x34>
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	2b3a      	cmp	r3, #58	@ 0x3a
 800ff88:	d1f4      	bne.n	800ff74 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ff90:	d11c      	bne.n	800ffcc <get_ldnumber+0x76>
			tp = *path;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	1c5a      	adds	r2, r3, #1
 800ff9c:	60fa      	str	r2, [r7, #12]
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	3b30      	subs	r3, #48	@ 0x30
 800ffa2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	2b09      	cmp	r3, #9
 800ffa8:	d80e      	bhi.n	800ffc8 <get_ldnumber+0x72>
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d10a      	bne.n	800ffc8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d107      	bne.n	800ffc8 <get_ldnumber+0x72>
					vol = (int)i;
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	617b      	str	r3, [r7, #20]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	697a      	ldr	r2, [r7, #20]
 800ffc6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	e002      	b.n	800ffd2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ffcc:	2300      	movs	r3, #0
 800ffce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ffd0:	693b      	ldr	r3, [r7, #16]
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	371c      	adds	r7, #28
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr
	...

0800ffe0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2200      	movs	r2, #0
 800ffee:	70da      	strb	r2, [r3, #3]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f04f 32ff 	mov.w	r2, #4294967295
 800fff6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fff8:	6839      	ldr	r1, [r7, #0]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7ff f8dc 	bl	800f1b8 <move_window>
 8010000:	4603      	mov	r3, r0
 8010002:	2b00      	cmp	r3, #0
 8010004:	d001      	beq.n	801000a <check_fs+0x2a>
 8010006:	2304      	movs	r3, #4
 8010008:	e038      	b.n	801007c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	3334      	adds	r3, #52	@ 0x34
 801000e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010012:	4618      	mov	r0, r3
 8010014:	f7fe fdee 	bl	800ebf4 <ld_word>
 8010018:	4603      	mov	r3, r0
 801001a:	461a      	mov	r2, r3
 801001c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010020:	429a      	cmp	r2, r3
 8010022:	d001      	beq.n	8010028 <check_fs+0x48>
 8010024:	2303      	movs	r3, #3
 8010026:	e029      	b.n	801007c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801002e:	2be9      	cmp	r3, #233	@ 0xe9
 8010030:	d009      	beq.n	8010046 <check_fs+0x66>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010038:	2beb      	cmp	r3, #235	@ 0xeb
 801003a:	d11e      	bne.n	801007a <check_fs+0x9a>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8010042:	2b90      	cmp	r3, #144	@ 0x90
 8010044:	d119      	bne.n	801007a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	3334      	adds	r3, #52	@ 0x34
 801004a:	3336      	adds	r3, #54	@ 0x36
 801004c:	4618      	mov	r0, r3
 801004e:	f7fe fdea 	bl	800ec26 <ld_dword>
 8010052:	4603      	mov	r3, r0
 8010054:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010058:	4a0a      	ldr	r2, [pc, #40]	@ (8010084 <check_fs+0xa4>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d101      	bne.n	8010062 <check_fs+0x82>
 801005e:	2300      	movs	r3, #0
 8010060:	e00c      	b.n	801007c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	3334      	adds	r3, #52	@ 0x34
 8010066:	3352      	adds	r3, #82	@ 0x52
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe fddc 	bl	800ec26 <ld_dword>
 801006e:	4603      	mov	r3, r0
 8010070:	4a05      	ldr	r2, [pc, #20]	@ (8010088 <check_fs+0xa8>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d101      	bne.n	801007a <check_fs+0x9a>
 8010076:	2300      	movs	r3, #0
 8010078:	e000      	b.n	801007c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801007a:	2302      	movs	r3, #2
}
 801007c:	4618      	mov	r0, r3
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	00544146 	.word	0x00544146
 8010088:	33544146 	.word	0x33544146

0801008c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b096      	sub	sp, #88	@ 0x58
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	4613      	mov	r3, r2
 8010098:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	2200      	movs	r2, #0
 801009e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f7ff ff58 	bl	800ff56 <get_ldnumber>
 80100a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80100a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	da01      	bge.n	80100b2 <find_volume+0x26>
 80100ae:	230b      	movs	r3, #11
 80100b0:	e235      	b.n	801051e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80100b2:	4aa5      	ldr	r2, [pc, #660]	@ (8010348 <find_volume+0x2bc>)
 80100b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80100bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d101      	bne.n	80100c6 <find_volume+0x3a>
 80100c2:	230c      	movs	r3, #12
 80100c4:	e22b      	b.n	801051e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80100c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80100c8:	f7fe fe95 	bl	800edf6 <lock_fs>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d101      	bne.n	80100d6 <find_volume+0x4a>
 80100d2:	230f      	movs	r3, #15
 80100d4:	e223      	b.n	801051e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80100da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80100dc:	79fb      	ldrb	r3, [r7, #7]
 80100de:	f023 0301 	bic.w	r3, r3, #1
 80100e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80100e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d01a      	beq.n	8010122 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80100ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ee:	785b      	ldrb	r3, [r3, #1]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fe fce1 	bl	800eab8 <disk_status>
 80100f6:	4603      	mov	r3, r0
 80100f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80100fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010100:	f003 0301 	and.w	r3, r3, #1
 8010104:	2b00      	cmp	r3, #0
 8010106:	d10c      	bne.n	8010122 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010108:	79fb      	ldrb	r3, [r7, #7]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d007      	beq.n	801011e <find_volume+0x92>
 801010e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010112:	f003 0304 	and.w	r3, r3, #4
 8010116:	2b00      	cmp	r3, #0
 8010118:	d001      	beq.n	801011e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801011a:	230a      	movs	r3, #10
 801011c:	e1ff      	b.n	801051e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 801011e:	2300      	movs	r3, #0
 8010120:	e1fd      	b.n	801051e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010124:	2200      	movs	r2, #0
 8010126:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801012a:	b2da      	uxtb	r2, r3
 801012c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010132:	785b      	ldrb	r3, [r3, #1]
 8010134:	4618      	mov	r0, r3
 8010136:	f7fe fcd9 	bl	800eaec <disk_initialize>
 801013a:	4603      	mov	r3, r0
 801013c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010140:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010144:	f003 0301 	and.w	r3, r3, #1
 8010148:	2b00      	cmp	r3, #0
 801014a:	d001      	beq.n	8010150 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801014c:	2303      	movs	r3, #3
 801014e:	e1e6      	b.n	801051e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d007      	beq.n	8010166 <find_volume+0xda>
 8010156:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801015a:	f003 0304 	and.w	r3, r3, #4
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010162:	230a      	movs	r3, #10
 8010164:	e1db      	b.n	801051e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801016a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801016c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801016e:	f7ff ff37 	bl	800ffe0 <check_fs>
 8010172:	4603      	mov	r3, r0
 8010174:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010178:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801017c:	2b02      	cmp	r3, #2
 801017e:	d149      	bne.n	8010214 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010180:	2300      	movs	r3, #0
 8010182:	643b      	str	r3, [r7, #64]	@ 0x40
 8010184:	e01e      	b.n	80101c4 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010188:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801018c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801018e:	011b      	lsls	r3, r3, #4
 8010190:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010194:	4413      	add	r3, r2
 8010196:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801019a:	3304      	adds	r3, #4
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d006      	beq.n	80101b0 <find_volume+0x124>
 80101a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a4:	3308      	adds	r3, #8
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fe fd3d 	bl	800ec26 <ld_dword>
 80101ac:	4602      	mov	r2, r0
 80101ae:	e000      	b.n	80101b2 <find_volume+0x126>
 80101b0:	2200      	movs	r2, #0
 80101b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101b4:	009b      	lsls	r3, r3, #2
 80101b6:	3358      	adds	r3, #88	@ 0x58
 80101b8:	443b      	add	r3, r7
 80101ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80101be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101c0:	3301      	adds	r3, #1
 80101c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80101c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101c6:	2b03      	cmp	r3, #3
 80101c8:	d9dd      	bls.n	8010186 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80101ca:	2300      	movs	r3, #0
 80101cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80101ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d002      	beq.n	80101da <find_volume+0x14e>
 80101d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101d6:	3b01      	subs	r3, #1
 80101d8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80101da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101dc:	009b      	lsls	r3, r3, #2
 80101de:	3358      	adds	r3, #88	@ 0x58
 80101e0:	443b      	add	r3, r7
 80101e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80101e6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80101e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d005      	beq.n	80101fa <find_volume+0x16e>
 80101ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80101f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80101f2:	f7ff fef5 	bl	800ffe0 <check_fs>
 80101f6:	4603      	mov	r3, r0
 80101f8:	e000      	b.n	80101fc <find_volume+0x170>
 80101fa:	2303      	movs	r3, #3
 80101fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010200:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010204:	2b01      	cmp	r3, #1
 8010206:	d905      	bls.n	8010214 <find_volume+0x188>
 8010208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801020a:	3301      	adds	r3, #1
 801020c:	643b      	str	r3, [r7, #64]	@ 0x40
 801020e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010210:	2b03      	cmp	r3, #3
 8010212:	d9e2      	bls.n	80101da <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010214:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010218:	2b04      	cmp	r3, #4
 801021a:	d101      	bne.n	8010220 <find_volume+0x194>
 801021c:	2301      	movs	r3, #1
 801021e:	e17e      	b.n	801051e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010220:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010224:	2b01      	cmp	r3, #1
 8010226:	d901      	bls.n	801022c <find_volume+0x1a0>
 8010228:	230d      	movs	r3, #13
 801022a:	e178      	b.n	801051e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801022c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801022e:	3334      	adds	r3, #52	@ 0x34
 8010230:	330b      	adds	r3, #11
 8010232:	4618      	mov	r0, r3
 8010234:	f7fe fcde 	bl	800ebf4 <ld_word>
 8010238:	4603      	mov	r3, r0
 801023a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801023e:	d001      	beq.n	8010244 <find_volume+0x1b8>
 8010240:	230d      	movs	r3, #13
 8010242:	e16c      	b.n	801051e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010246:	3334      	adds	r3, #52	@ 0x34
 8010248:	3316      	adds	r3, #22
 801024a:	4618      	mov	r0, r3
 801024c:	f7fe fcd2 	bl	800ebf4 <ld_word>
 8010250:	4603      	mov	r3, r0
 8010252:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010256:	2b00      	cmp	r3, #0
 8010258:	d106      	bne.n	8010268 <find_volume+0x1dc>
 801025a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801025c:	3334      	adds	r3, #52	@ 0x34
 801025e:	3324      	adds	r3, #36	@ 0x24
 8010260:	4618      	mov	r0, r3
 8010262:	f7fe fce0 	bl	800ec26 <ld_dword>
 8010266:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801026a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801026c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801026e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010270:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027a:	789b      	ldrb	r3, [r3, #2]
 801027c:	2b01      	cmp	r3, #1
 801027e:	d005      	beq.n	801028c <find_volume+0x200>
 8010280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010282:	789b      	ldrb	r3, [r3, #2]
 8010284:	2b02      	cmp	r3, #2
 8010286:	d001      	beq.n	801028c <find_volume+0x200>
 8010288:	230d      	movs	r3, #13
 801028a:	e148      	b.n	801051e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801028c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801028e:	789b      	ldrb	r3, [r3, #2]
 8010290:	461a      	mov	r2, r3
 8010292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010294:	fb02 f303 	mul.w	r3, r2, r3
 8010298:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801029a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102a0:	461a      	mov	r2, r3
 80102a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80102a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a8:	895b      	ldrh	r3, [r3, #10]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d008      	beq.n	80102c0 <find_volume+0x234>
 80102ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b0:	895b      	ldrh	r3, [r3, #10]
 80102b2:	461a      	mov	r2, r3
 80102b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b6:	895b      	ldrh	r3, [r3, #10]
 80102b8:	3b01      	subs	r3, #1
 80102ba:	4013      	ands	r3, r2
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d001      	beq.n	80102c4 <find_volume+0x238>
 80102c0:	230d      	movs	r3, #13
 80102c2:	e12c      	b.n	801051e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80102c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c6:	3334      	adds	r3, #52	@ 0x34
 80102c8:	3311      	adds	r3, #17
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fe fc92 	bl	800ebf4 <ld_word>
 80102d0:	4603      	mov	r3, r0
 80102d2:	461a      	mov	r2, r3
 80102d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80102d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102da:	891b      	ldrh	r3, [r3, #8]
 80102dc:	f003 030f 	and.w	r3, r3, #15
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d001      	beq.n	80102ea <find_volume+0x25e>
 80102e6:	230d      	movs	r3, #13
 80102e8:	e119      	b.n	801051e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80102ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ec:	3334      	adds	r3, #52	@ 0x34
 80102ee:	3313      	adds	r3, #19
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7fe fc7f 	bl	800ebf4 <ld_word>
 80102f6:	4603      	mov	r3, r0
 80102f8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80102fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d106      	bne.n	801030e <find_volume+0x282>
 8010300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010302:	3334      	adds	r3, #52	@ 0x34
 8010304:	3320      	adds	r3, #32
 8010306:	4618      	mov	r0, r3
 8010308:	f7fe fc8d 	bl	800ec26 <ld_dword>
 801030c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801030e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010310:	3334      	adds	r3, #52	@ 0x34
 8010312:	330e      	adds	r3, #14
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe fc6d 	bl	800ebf4 <ld_word>
 801031a:	4603      	mov	r3, r0
 801031c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801031e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010320:	2b00      	cmp	r3, #0
 8010322:	d101      	bne.n	8010328 <find_volume+0x29c>
 8010324:	230d      	movs	r3, #13
 8010326:	e0fa      	b.n	801051e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010328:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801032a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801032c:	4413      	add	r3, r2
 801032e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010330:	8912      	ldrh	r2, [r2, #8]
 8010332:	0912      	lsrs	r2, r2, #4
 8010334:	b292      	uxth	r2, r2
 8010336:	4413      	add	r3, r2
 8010338:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801033a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801033c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033e:	429a      	cmp	r2, r3
 8010340:	d204      	bcs.n	801034c <find_volume+0x2c0>
 8010342:	230d      	movs	r3, #13
 8010344:	e0eb      	b.n	801051e <find_volume+0x492>
 8010346:	bf00      	nop
 8010348:	20001638 	.word	0x20001638
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801034c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801034e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010350:	1ad3      	subs	r3, r2, r3
 8010352:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010354:	8952      	ldrh	r2, [r2, #10]
 8010356:	fbb3 f3f2 	udiv	r3, r3, r2
 801035a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801035c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035e:	2b00      	cmp	r3, #0
 8010360:	d101      	bne.n	8010366 <find_volume+0x2da>
 8010362:	230d      	movs	r3, #13
 8010364:	e0db      	b.n	801051e <find_volume+0x492>
		fmt = FS_FAT32;
 8010366:	2303      	movs	r3, #3
 8010368:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801036c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801036e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010372:	4293      	cmp	r3, r2
 8010374:	d802      	bhi.n	801037c <find_volume+0x2f0>
 8010376:	2302      	movs	r3, #2
 8010378:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801037c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801037e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010382:	4293      	cmp	r3, r2
 8010384:	d802      	bhi.n	801038c <find_volume+0x300>
 8010386:	2301      	movs	r3, #1
 8010388:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801038c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801038e:	1c9a      	adds	r2, r3, #2
 8010390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010392:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010398:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801039a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801039c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801039e:	441a      	add	r2, r3
 80103a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80103a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80103a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a8:	441a      	add	r2, r3
 80103aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ac:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80103ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80103b2:	2b03      	cmp	r3, #3
 80103b4:	d11e      	bne.n	80103f4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80103b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b8:	3334      	adds	r3, #52	@ 0x34
 80103ba:	332a      	adds	r3, #42	@ 0x2a
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fe fc19 	bl	800ebf4 <ld_word>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d001      	beq.n	80103cc <find_volume+0x340>
 80103c8:	230d      	movs	r3, #13
 80103ca:	e0a8      	b.n	801051e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80103cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ce:	891b      	ldrh	r3, [r3, #8]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d001      	beq.n	80103d8 <find_volume+0x34c>
 80103d4:	230d      	movs	r3, #13
 80103d6:	e0a2      	b.n	801051e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80103d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103da:	3334      	adds	r3, #52	@ 0x34
 80103dc:	332c      	adds	r3, #44	@ 0x2c
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fe fc21 	bl	800ec26 <ld_dword>
 80103e4:	4602      	mov	r2, r0
 80103e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80103ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ec:	699b      	ldr	r3, [r3, #24]
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80103f2:	e01f      	b.n	8010434 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80103f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f6:	891b      	ldrh	r3, [r3, #8]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d101      	bne.n	8010400 <find_volume+0x374>
 80103fc:	230d      	movs	r3, #13
 80103fe:	e08e      	b.n	801051e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010406:	441a      	add	r2, r3
 8010408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801040a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801040c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010410:	2b02      	cmp	r3, #2
 8010412:	d103      	bne.n	801041c <find_volume+0x390>
 8010414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010416:	699b      	ldr	r3, [r3, #24]
 8010418:	005b      	lsls	r3, r3, #1
 801041a:	e00a      	b.n	8010432 <find_volume+0x3a6>
 801041c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801041e:	699a      	ldr	r2, [r3, #24]
 8010420:	4613      	mov	r3, r2
 8010422:	005b      	lsls	r3, r3, #1
 8010424:	4413      	add	r3, r2
 8010426:	085a      	lsrs	r2, r3, #1
 8010428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	f003 0301 	and.w	r3, r3, #1
 8010430:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010432:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010436:	69da      	ldr	r2, [r3, #28]
 8010438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801043a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801043e:	0a5b      	lsrs	r3, r3, #9
 8010440:	429a      	cmp	r2, r3
 8010442:	d201      	bcs.n	8010448 <find_volume+0x3bc>
 8010444:	230d      	movs	r3, #13
 8010446:	e06a      	b.n	801051e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801044a:	f04f 32ff 	mov.w	r2, #4294967295
 801044e:	615a      	str	r2, [r3, #20]
 8010450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010452:	695a      	ldr	r2, [r3, #20]
 8010454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010456:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045a:	2280      	movs	r2, #128	@ 0x80
 801045c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801045e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010462:	2b03      	cmp	r3, #3
 8010464:	d149      	bne.n	80104fa <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010468:	3334      	adds	r3, #52	@ 0x34
 801046a:	3330      	adds	r3, #48	@ 0x30
 801046c:	4618      	mov	r0, r3
 801046e:	f7fe fbc1 	bl	800ebf4 <ld_word>
 8010472:	4603      	mov	r3, r0
 8010474:	2b01      	cmp	r3, #1
 8010476:	d140      	bne.n	80104fa <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801047a:	3301      	adds	r3, #1
 801047c:	4619      	mov	r1, r3
 801047e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010480:	f7fe fe9a 	bl	800f1b8 <move_window>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d137      	bne.n	80104fa <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801048a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801048c:	2200      	movs	r2, #0
 801048e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010492:	3334      	adds	r3, #52	@ 0x34
 8010494:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010498:	4618      	mov	r0, r3
 801049a:	f7fe fbab 	bl	800ebf4 <ld_word>
 801049e:	4603      	mov	r3, r0
 80104a0:	461a      	mov	r2, r3
 80104a2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d127      	bne.n	80104fa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80104aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ac:	3334      	adds	r3, #52	@ 0x34
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fe fbb9 	bl	800ec26 <ld_dword>
 80104b4:	4603      	mov	r3, r0
 80104b6:	4a1c      	ldr	r2, [pc, #112]	@ (8010528 <find_volume+0x49c>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d11e      	bne.n	80104fa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80104bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104be:	3334      	adds	r3, #52	@ 0x34
 80104c0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fe fbae 	bl	800ec26 <ld_dword>
 80104ca:	4603      	mov	r3, r0
 80104cc:	4a17      	ldr	r2, [pc, #92]	@ (801052c <find_volume+0x4a0>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d113      	bne.n	80104fa <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80104d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d4:	3334      	adds	r3, #52	@ 0x34
 80104d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fe fba3 	bl	800ec26 <ld_dword>
 80104e0:	4602      	mov	r2, r0
 80104e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80104e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e8:	3334      	adds	r3, #52	@ 0x34
 80104ea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fe fb99 	bl	800ec26 <ld_dword>
 80104f4:	4602      	mov	r2, r0
 80104f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80104fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104fc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010500:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010502:	4b0b      	ldr	r3, [pc, #44]	@ (8010530 <find_volume+0x4a4>)
 8010504:	881b      	ldrh	r3, [r3, #0]
 8010506:	3301      	adds	r3, #1
 8010508:	b29a      	uxth	r2, r3
 801050a:	4b09      	ldr	r3, [pc, #36]	@ (8010530 <find_volume+0x4a4>)
 801050c:	801a      	strh	r2, [r3, #0]
 801050e:	4b08      	ldr	r3, [pc, #32]	@ (8010530 <find_volume+0x4a4>)
 8010510:	881a      	ldrh	r2, [r3, #0]
 8010512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010514:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010516:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010518:	f7fe fde6 	bl	800f0e8 <clear_lock>
#endif
	return FR_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3758      	adds	r7, #88	@ 0x58
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	41615252 	.word	0x41615252
 801052c:	61417272 	.word	0x61417272
 8010530:	2000163c 	.word	0x2000163c

08010534 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801053e:	2309      	movs	r3, #9
 8010540:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d02e      	beq.n	80105a6 <validate+0x72>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d02a      	beq.n	80105a6 <validate+0x72>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d025      	beq.n	80105a6 <validate+0x72>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	889a      	ldrh	r2, [r3, #4]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	88db      	ldrh	r3, [r3, #6]
 8010564:	429a      	cmp	r2, r3
 8010566:	d11e      	bne.n	80105a6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	4618      	mov	r0, r3
 801056e:	f7fe fc42 	bl	800edf6 <lock_fs>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d014      	beq.n	80105a2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	785b      	ldrb	r3, [r3, #1]
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fa9a 	bl	800eab8 <disk_status>
 8010584:	4603      	mov	r3, r0
 8010586:	f003 0301 	and.w	r3, r3, #1
 801058a:	2b00      	cmp	r3, #0
 801058c:	d102      	bne.n	8010594 <validate+0x60>
				res = FR_OK;
 801058e:	2300      	movs	r3, #0
 8010590:	73fb      	strb	r3, [r7, #15]
 8010592:	e008      	b.n	80105a6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2100      	movs	r1, #0
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe fc41 	bl	800ee22 <unlock_fs>
 80105a0:	e001      	b.n	80105a6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80105a2:	230f      	movs	r3, #15
 80105a4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80105a6:	7bfb      	ldrb	r3, [r7, #15]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d102      	bne.n	80105b2 <validate+0x7e>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	e000      	b.n	80105b4 <validate+0x80>
 80105b2:	2300      	movs	r3, #0
 80105b4:	683a      	ldr	r2, [r7, #0]
 80105b6:	6013      	str	r3, [r2, #0]
	return res;
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3710      	adds	r7, #16
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
	...

080105c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b088      	sub	sp, #32
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	4613      	mov	r3, r2
 80105d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80105d6:	f107 0310 	add.w	r3, r7, #16
 80105da:	4618      	mov	r0, r3
 80105dc:	f7ff fcbb 	bl	800ff56 <get_ldnumber>
 80105e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	da01      	bge.n	80105ec <f_mount+0x28>
 80105e8:	230b      	movs	r3, #11
 80105ea:	e048      	b.n	801067e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80105ec:	4a26      	ldr	r2, [pc, #152]	@ (8010688 <f_mount+0xc4>)
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d00f      	beq.n	801061c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80105fc:	69b8      	ldr	r0, [r7, #24]
 80105fe:	f7fe fd73 	bl	800f0e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010602:	69bb      	ldr	r3, [r7, #24]
 8010604:	68db      	ldr	r3, [r3, #12]
 8010606:	4618      	mov	r0, r3
 8010608:	f001 f837 	bl	801167a <ff_del_syncobj>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d101      	bne.n	8010616 <f_mount+0x52>
 8010612:	2302      	movs	r3, #2
 8010614:	e033      	b.n	801067e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	2200      	movs	r2, #0
 801061a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00f      	beq.n	8010642 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2200      	movs	r2, #0
 8010626:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	b2da      	uxtb	r2, r3
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	330c      	adds	r3, #12
 8010630:	4619      	mov	r1, r3
 8010632:	4610      	mov	r0, r2
 8010634:	f001 f803 	bl	801163e <ff_cre_syncobj>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <f_mount+0x7e>
 801063e:	2302      	movs	r3, #2
 8010640:	e01d      	b.n	801067e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	4910      	ldr	r1, [pc, #64]	@ (8010688 <f_mount+0xc4>)
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d002      	beq.n	8010658 <f_mount+0x94>
 8010652:	79fb      	ldrb	r3, [r7, #7]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d001      	beq.n	801065c <f_mount+0x98>
 8010658:	2300      	movs	r3, #0
 801065a:	e010      	b.n	801067e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801065c:	f107 010c 	add.w	r1, r7, #12
 8010660:	f107 0308 	add.w	r3, r7, #8
 8010664:	2200      	movs	r2, #0
 8010666:	4618      	mov	r0, r3
 8010668:	f7ff fd10 	bl	801008c <find_volume>
 801066c:	4603      	mov	r3, r0
 801066e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	7dfa      	ldrb	r2, [r7, #23]
 8010674:	4611      	mov	r1, r2
 8010676:	4618      	mov	r0, r3
 8010678:	f7fe fbd3 	bl	800ee22 <unlock_fs>
 801067c:	7dfb      	ldrb	r3, [r7, #23]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3720      	adds	r7, #32
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	20001638 	.word	0x20001638

0801068c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b098      	sub	sp, #96	@ 0x60
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	4613      	mov	r3, r2
 8010698:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d101      	bne.n	80106a4 <f_open+0x18>
 80106a0:	2309      	movs	r3, #9
 80106a2:	e1b0      	b.n	8010a06 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80106a4:	79fb      	ldrb	r3, [r7, #7]
 80106a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80106aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80106ac:	79fa      	ldrb	r2, [r7, #7]
 80106ae:	f107 0110 	add.w	r1, r7, #16
 80106b2:	f107 0308 	add.w	r3, r7, #8
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7ff fce8 	bl	801008c <find_volume>
 80106bc:	4603      	mov	r3, r0
 80106be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80106c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f040 818d 	bne.w	80109e6 <f_open+0x35a>
		dj.obj.fs = fs;
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80106d0:	68ba      	ldr	r2, [r7, #8]
 80106d2:	f107 0314 	add.w	r3, r7, #20
 80106d6:	4611      	mov	r1, r2
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff fbcb 	bl	800fe74 <follow_path>
 80106de:	4603      	mov	r3, r0
 80106e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80106e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d118      	bne.n	801071e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80106ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80106f0:	b25b      	sxtb	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	da03      	bge.n	80106fe <f_open+0x72>
				res = FR_INVALID_NAME;
 80106f6:	2306      	movs	r3, #6
 80106f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80106fc:	e00f      	b.n	801071e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80106fe:	79fb      	ldrb	r3, [r7, #7]
 8010700:	2b01      	cmp	r3, #1
 8010702:	bf8c      	ite	hi
 8010704:	2301      	movhi	r3, #1
 8010706:	2300      	movls	r3, #0
 8010708:	b2db      	uxtb	r3, r3
 801070a:	461a      	mov	r2, r3
 801070c:	f107 0314 	add.w	r3, r7, #20
 8010710:	4611      	mov	r1, r2
 8010712:	4618      	mov	r0, r3
 8010714:	f7fe fba0 	bl	800ee58 <chk_lock>
 8010718:	4603      	mov	r3, r0
 801071a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801071e:	79fb      	ldrb	r3, [r7, #7]
 8010720:	f003 031c 	and.w	r3, r3, #28
 8010724:	2b00      	cmp	r3, #0
 8010726:	d07f      	beq.n	8010828 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010728:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801072c:	2b00      	cmp	r3, #0
 801072e:	d017      	beq.n	8010760 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010730:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010734:	2b04      	cmp	r3, #4
 8010736:	d10e      	bne.n	8010756 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010738:	f7fe fbea 	bl	800ef10 <enq_lock>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d006      	beq.n	8010750 <f_open+0xc4>
 8010742:	f107 0314 	add.w	r3, r7, #20
 8010746:	4618      	mov	r0, r3
 8010748:	f7ff face 	bl	800fce8 <dir_register>
 801074c:	4603      	mov	r3, r0
 801074e:	e000      	b.n	8010752 <f_open+0xc6>
 8010750:	2312      	movs	r3, #18
 8010752:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010756:	79fb      	ldrb	r3, [r7, #7]
 8010758:	f043 0308 	orr.w	r3, r3, #8
 801075c:	71fb      	strb	r3, [r7, #7]
 801075e:	e010      	b.n	8010782 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010760:	7ebb      	ldrb	r3, [r7, #26]
 8010762:	f003 0311 	and.w	r3, r3, #17
 8010766:	2b00      	cmp	r3, #0
 8010768:	d003      	beq.n	8010772 <f_open+0xe6>
					res = FR_DENIED;
 801076a:	2307      	movs	r3, #7
 801076c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010770:	e007      	b.n	8010782 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010772:	79fb      	ldrb	r3, [r7, #7]
 8010774:	f003 0304 	and.w	r3, r3, #4
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <f_open+0xf6>
 801077c:	2308      	movs	r3, #8
 801077e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010782:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010786:	2b00      	cmp	r3, #0
 8010788:	d168      	bne.n	801085c <f_open+0x1d0>
 801078a:	79fb      	ldrb	r3, [r7, #7]
 801078c:	f003 0308 	and.w	r3, r3, #8
 8010790:	2b00      	cmp	r3, #0
 8010792:	d063      	beq.n	801085c <f_open+0x1d0>
				dw = GET_FATTIME();
 8010794:	f7fe f932 	bl	800e9fc <get_fattime>
 8010798:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801079a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801079c:	330e      	adds	r3, #14
 801079e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fe fa7e 	bl	800eca2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80107a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107a8:	3316      	adds	r3, #22
 80107aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fe fa78 	bl	800eca2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80107b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107b4:	330b      	adds	r3, #11
 80107b6:	2220      	movs	r2, #32
 80107b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107be:	4611      	mov	r1, r2
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff f9fd 	bl	800fbc0 <ld_clust>
 80107c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80107cc:	2200      	movs	r2, #0
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7ff fa15 	bl	800fbfe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80107d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107d6:	331c      	adds	r3, #28
 80107d8:	2100      	movs	r1, #0
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fe fa61 	bl	800eca2 <st_dword>
					fs->wflag = 1;
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	2201      	movs	r2, #1
 80107e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80107e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d037      	beq.n	801085c <f_open+0x1d0>
						dw = fs->winsect;
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107f0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80107f2:	f107 0314 	add.w	r3, r7, #20
 80107f6:	2200      	movs	r2, #0
 80107f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fe ff28 	bl	800f650 <remove_chain>
 8010800:	4603      	mov	r3, r0
 8010802:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8010806:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801080a:	2b00      	cmp	r3, #0
 801080c:	d126      	bne.n	801085c <f_open+0x1d0>
							res = move_window(fs, dw);
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010812:	4618      	mov	r0, r3
 8010814:	f7fe fcd0 	bl	800f1b8 <move_window>
 8010818:	4603      	mov	r3, r0
 801081a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010822:	3a01      	subs	r2, #1
 8010824:	611a      	str	r2, [r3, #16]
 8010826:	e019      	b.n	801085c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010828:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801082c:	2b00      	cmp	r3, #0
 801082e:	d115      	bne.n	801085c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010830:	7ebb      	ldrb	r3, [r7, #26]
 8010832:	f003 0310 	and.w	r3, r3, #16
 8010836:	2b00      	cmp	r3, #0
 8010838:	d003      	beq.n	8010842 <f_open+0x1b6>
					res = FR_NO_FILE;
 801083a:	2304      	movs	r3, #4
 801083c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010840:	e00c      	b.n	801085c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	f003 0302 	and.w	r3, r3, #2
 8010848:	2b00      	cmp	r3, #0
 801084a:	d007      	beq.n	801085c <f_open+0x1d0>
 801084c:	7ebb      	ldrb	r3, [r7, #26]
 801084e:	f003 0301 	and.w	r3, r3, #1
 8010852:	2b00      	cmp	r3, #0
 8010854:	d002      	beq.n	801085c <f_open+0x1d0>
						res = FR_DENIED;
 8010856:	2307      	movs	r3, #7
 8010858:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801085c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010860:	2b00      	cmp	r3, #0
 8010862:	d126      	bne.n	80108b2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010864:	79fb      	ldrb	r3, [r7, #7]
 8010866:	f003 0308 	and.w	r3, r3, #8
 801086a:	2b00      	cmp	r3, #0
 801086c:	d003      	beq.n	8010876 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801086e:	79fb      	ldrb	r3, [r7, #7]
 8010870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010874:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801087e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010884:	79fb      	ldrb	r3, [r7, #7]
 8010886:	2b01      	cmp	r3, #1
 8010888:	bf8c      	ite	hi
 801088a:	2301      	movhi	r3, #1
 801088c:	2300      	movls	r3, #0
 801088e:	b2db      	uxtb	r3, r3
 8010890:	461a      	mov	r2, r3
 8010892:	f107 0314 	add.w	r3, r7, #20
 8010896:	4611      	mov	r1, r2
 8010898:	4618      	mov	r0, r3
 801089a:	f7fe fb5b 	bl	800ef54 <inc_lock>
 801089e:	4602      	mov	r2, r0
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d102      	bne.n	80108b2 <f_open+0x226>
 80108ac:	2302      	movs	r3, #2
 80108ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80108b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f040 8095 	bne.w	80109e6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80108c0:	4611      	mov	r1, r2
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7ff f97c 	bl	800fbc0 <ld_clust>
 80108c8:	4602      	mov	r2, r0
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80108ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108d0:	331c      	adds	r3, #28
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fe f9a7 	bl	800ec26 <ld_dword>
 80108d8:	4602      	mov	r2, r0
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2200      	movs	r2, #0
 80108e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80108e4:	693a      	ldr	r2, [r7, #16]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	88da      	ldrh	r2, [r3, #6]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	79fa      	ldrb	r2, [r7, #7]
 80108f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	2200      	movs	r2, #0
 8010902:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2200      	movs	r2, #0
 8010908:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	3330      	adds	r3, #48	@ 0x30
 801090e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010912:	2100      	movs	r1, #0
 8010914:	4618      	mov	r0, r3
 8010916:	f7fe fa11 	bl	800ed3c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801091a:	79fb      	ldrb	r3, [r7, #7]
 801091c:	f003 0320 	and.w	r3, r3, #32
 8010920:	2b00      	cmp	r3, #0
 8010922:	d060      	beq.n	80109e6 <f_open+0x35a>
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d05c      	beq.n	80109e6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	68da      	ldr	r2, [r3, #12]
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	895b      	ldrh	r3, [r3, #10]
 8010938:	025b      	lsls	r3, r3, #9
 801093a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	689b      	ldr	r3, [r3, #8]
 8010940:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	657b      	str	r3, [r7, #84]	@ 0x54
 8010948:	e016      	b.n	8010978 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801094e:	4618      	mov	r0, r3
 8010950:	f7fe fced 	bl	800f32e <get_fat>
 8010954:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010958:	2b01      	cmp	r3, #1
 801095a:	d802      	bhi.n	8010962 <f_open+0x2d6>
 801095c:	2302      	movs	r3, #2
 801095e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010968:	d102      	bne.n	8010970 <f_open+0x2e4>
 801096a:	2301      	movs	r3, #1
 801096c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010970:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010974:	1ad3      	subs	r3, r2, r3
 8010976:	657b      	str	r3, [r7, #84]	@ 0x54
 8010978:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801097c:	2b00      	cmp	r3, #0
 801097e:	d103      	bne.n	8010988 <f_open+0x2fc>
 8010980:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010984:	429a      	cmp	r2, r3
 8010986:	d8e0      	bhi.n	801094a <f_open+0x2be>
				}
				fp->clust = clst;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801098c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801098e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010992:	2b00      	cmp	r3, #0
 8010994:	d127      	bne.n	80109e6 <f_open+0x35a>
 8010996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801099c:	2b00      	cmp	r3, #0
 801099e:	d022      	beq.n	80109e6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fe fca3 	bl	800f2f0 <clust2sect>
 80109aa:	6478      	str	r0, [r7, #68]	@ 0x44
 80109ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d103      	bne.n	80109ba <f_open+0x32e>
						res = FR_INT_ERR;
 80109b2:	2302      	movs	r3, #2
 80109b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80109b8:	e015      	b.n	80109e6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80109ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109bc:	0a5a      	lsrs	r2, r3, #9
 80109be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109c0:	441a      	add	r2, r3
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	7858      	ldrb	r0, [r3, #1]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	6a1a      	ldr	r2, [r3, #32]
 80109d4:	2301      	movs	r3, #1
 80109d6:	f7fe f8af 	bl	800eb38 <disk_read>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <f_open+0x35a>
 80109e0:	2301      	movs	r3, #1
 80109e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80109e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d002      	beq.n	80109f4 <f_open+0x368>
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2200      	movs	r2, #0
 80109f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80109fa:	4611      	mov	r1, r2
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fe fa10 	bl	800ee22 <unlock_fs>
 8010a02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3760      	adds	r7, #96	@ 0x60
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b08c      	sub	sp, #48	@ 0x30
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	60f8      	str	r0, [r7, #12]
 8010a16:	60b9      	str	r1, [r7, #8]
 8010a18:	607a      	str	r2, [r7, #4]
 8010a1a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	2200      	movs	r2, #0
 8010a24:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f107 0210 	add.w	r2, r7, #16
 8010a2c:	4611      	mov	r1, r2
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7ff fd80 	bl	8010534 <validate>
 8010a34:	4603      	mov	r3, r0
 8010a36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d107      	bne.n	8010a52 <f_write+0x44>
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	7d5b      	ldrb	r3, [r3, #21]
 8010a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d009      	beq.n	8010a66 <f_write+0x58>
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010a58:	4611      	mov	r1, r2
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fe f9e1 	bl	800ee22 <unlock_fs>
 8010a60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a64:	e173      	b.n	8010d4e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	7d1b      	ldrb	r3, [r3, #20]
 8010a6a:	f003 0302 	and.w	r3, r3, #2
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <f_write+0x72>
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	2107      	movs	r1, #7
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fe f9d3 	bl	800ee22 <unlock_fs>
 8010a7c:	2307      	movs	r3, #7
 8010a7e:	e166      	b.n	8010d4e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	699a      	ldr	r2, [r3, #24]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	441a      	add	r2, r3
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	699b      	ldr	r3, [r3, #24]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	f080 814b 	bcs.w	8010d28 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	699b      	ldr	r3, [r3, #24]
 8010a96:	43db      	mvns	r3, r3
 8010a98:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010a9a:	e145      	b.n	8010d28 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	699b      	ldr	r3, [r3, #24]
 8010aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f040 8101 	bne.w	8010cac <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	699b      	ldr	r3, [r3, #24]
 8010aae:	0a5b      	lsrs	r3, r3, #9
 8010ab0:	693a      	ldr	r2, [r7, #16]
 8010ab2:	8952      	ldrh	r2, [r2, #10]
 8010ab4:	3a01      	subs	r2, #1
 8010ab6:	4013      	ands	r3, r2
 8010ab8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d14d      	bne.n	8010b5c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	699b      	ldr	r3, [r3, #24]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d10c      	bne.n	8010ae2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d11a      	bne.n	8010b0a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2100      	movs	r1, #0
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fe fe1e 	bl	800f71a <create_chain>
 8010ade:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010ae0:	e013      	b.n	8010b0a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d007      	beq.n	8010afa <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	699b      	ldr	r3, [r3, #24]
 8010aee:	4619      	mov	r1, r3
 8010af0:	68f8      	ldr	r0, [r7, #12]
 8010af2:	f7fe feaa 	bl	800f84a <clmt_clust>
 8010af6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010af8:	e007      	b.n	8010b0a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010afa:	68fa      	ldr	r2, [r7, #12]
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	69db      	ldr	r3, [r3, #28]
 8010b00:	4619      	mov	r1, r3
 8010b02:	4610      	mov	r0, r2
 8010b04:	f7fe fe09 	bl	800f71a <create_chain>
 8010b08:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f000 8110 	beq.w	8010d32 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d109      	bne.n	8010b2c <f_write+0x11e>
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2202      	movs	r2, #2
 8010b1c:	755a      	strb	r2, [r3, #21]
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	2102      	movs	r1, #2
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fe f97d 	bl	800ee22 <unlock_fs>
 8010b28:	2302      	movs	r3, #2
 8010b2a:	e110      	b.n	8010d4e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b32:	d109      	bne.n	8010b48 <f_write+0x13a>
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2201      	movs	r2, #1
 8010b38:	755a      	strb	r2, [r3, #21]
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	2101      	movs	r1, #1
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fe f96f 	bl	800ee22 <unlock_fs>
 8010b44:	2301      	movs	r3, #1
 8010b46:	e102      	b.n	8010d4e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b4c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d102      	bne.n	8010b5c <f_write+0x14e>
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b5a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	7d1b      	ldrb	r3, [r3, #20]
 8010b60:	b25b      	sxtb	r3, r3
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	da1d      	bge.n	8010ba2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	7858      	ldrb	r0, [r3, #1]
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	6a1a      	ldr	r2, [r3, #32]
 8010b74:	2301      	movs	r3, #1
 8010b76:	f7fd ffff 	bl	800eb78 <disk_write>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d009      	beq.n	8010b94 <f_write+0x186>
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2201      	movs	r2, #1
 8010b84:	755a      	strb	r2, [r3, #21]
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	2101      	movs	r1, #1
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fe f949 	bl	800ee22 <unlock_fs>
 8010b90:	2301      	movs	r3, #1
 8010b92:	e0dc      	b.n	8010d4e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	7d1b      	ldrb	r3, [r3, #20]
 8010b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b9c:	b2da      	uxtb	r2, r3
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010ba2:	693a      	ldr	r2, [r7, #16]
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	69db      	ldr	r3, [r3, #28]
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	f7fe fba0 	bl	800f2f0 <clust2sect>
 8010bb0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d109      	bne.n	8010bcc <f_write+0x1be>
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2202      	movs	r2, #2
 8010bbc:	755a      	strb	r2, [r3, #21]
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	2102      	movs	r1, #2
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fe f92d 	bl	800ee22 <unlock_fs>
 8010bc8:	2302      	movs	r3, #2
 8010bca:	e0c0      	b.n	8010d4e <f_write+0x340>
			sect += csect;
 8010bcc:	697a      	ldr	r2, [r7, #20]
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	0a5b      	lsrs	r3, r3, #9
 8010bd8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010bda:	6a3b      	ldr	r3, [r7, #32]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d041      	beq.n	8010c64 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010be0:	69ba      	ldr	r2, [r7, #24]
 8010be2:	6a3b      	ldr	r3, [r7, #32]
 8010be4:	4413      	add	r3, r2
 8010be6:	693a      	ldr	r2, [r7, #16]
 8010be8:	8952      	ldrh	r2, [r2, #10]
 8010bea:	4293      	cmp	r3, r2
 8010bec:	d905      	bls.n	8010bfa <f_write+0x1ec>
					cc = fs->csize - csect;
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	895b      	ldrh	r3, [r3, #10]
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	7858      	ldrb	r0, [r3, #1]
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	697a      	ldr	r2, [r7, #20]
 8010c02:	69f9      	ldr	r1, [r7, #28]
 8010c04:	f7fd ffb8 	bl	800eb78 <disk_write>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d009      	beq.n	8010c22 <f_write+0x214>
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2201      	movs	r2, #1
 8010c12:	755a      	strb	r2, [r3, #21]
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	2101      	movs	r1, #1
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fe f902 	bl	800ee22 <unlock_fs>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e095      	b.n	8010d4e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6a1a      	ldr	r2, [r3, #32]
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	6a3a      	ldr	r2, [r7, #32]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d915      	bls.n	8010c5c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6a1a      	ldr	r2, [r3, #32]
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	025b      	lsls	r3, r3, #9
 8010c40:	69fa      	ldr	r2, [r7, #28]
 8010c42:	4413      	add	r3, r2
 8010c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c48:	4619      	mov	r1, r3
 8010c4a:	f7fe f856 	bl	800ecfa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	7d1b      	ldrb	r3, [r3, #20]
 8010c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010c5c:	6a3b      	ldr	r3, [r7, #32]
 8010c5e:	025b      	lsls	r3, r3, #9
 8010c60:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010c62:	e044      	b.n	8010cee <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6a1b      	ldr	r3, [r3, #32]
 8010c68:	697a      	ldr	r2, [r7, #20]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d01b      	beq.n	8010ca6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	699a      	ldr	r2, [r3, #24]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d215      	bcs.n	8010ca6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	7858      	ldrb	r0, [r3, #1]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c84:	2301      	movs	r3, #1
 8010c86:	697a      	ldr	r2, [r7, #20]
 8010c88:	f7fd ff56 	bl	800eb38 <disk_read>
 8010c8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d009      	beq.n	8010ca6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2201      	movs	r2, #1
 8010c96:	755a      	strb	r2, [r3, #21]
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	2101      	movs	r1, #1
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fe f8c0 	bl	800ee22 <unlock_fs>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	e053      	b.n	8010d4e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	697a      	ldr	r2, [r7, #20]
 8010caa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	699b      	ldr	r3, [r3, #24]
 8010cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cb4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010cb8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d901      	bls.n	8010cc6 <f_write+0x2b8>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	699b      	ldr	r3, [r3, #24]
 8010cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cd4:	4413      	add	r3, r2
 8010cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cd8:	69f9      	ldr	r1, [r7, #28]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fe f80d 	bl	800ecfa <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	7d1b      	ldrb	r3, [r3, #20]
 8010ce4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010cee:	69fa      	ldr	r2, [r7, #28]
 8010cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf2:	4413      	add	r3, r2
 8010cf4:	61fb      	str	r3, [r7, #28]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	699a      	ldr	r2, [r3, #24]
 8010cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfc:	441a      	add	r2, r3
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	619a      	str	r2, [r3, #24]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	68da      	ldr	r2, [r3, #12]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	699b      	ldr	r3, [r3, #24]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	bf38      	it	cc
 8010d0e:	461a      	movcc	r2, r3
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	60da      	str	r2, [r3, #12]
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d1a:	441a      	add	r2, r3
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	601a      	str	r2, [r3, #0]
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d24:	1ad3      	subs	r3, r2, r3
 8010d26:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f47f aeb6 	bne.w	8010a9c <f_write+0x8e>
 8010d30:	e000      	b.n	8010d34 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d32:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	7d1b      	ldrb	r3, [r3, #20]
 8010d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	2100      	movs	r1, #0
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fe f86b 	bl	800ee22 <unlock_fs>
 8010d4c:	2300      	movs	r3, #0
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3730      	adds	r7, #48	@ 0x30
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b086      	sub	sp, #24
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f107 0208 	add.w	r2, r7, #8
 8010d64:	4611      	mov	r1, r2
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7ff fbe4 	bl	8010534 <validate>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d16d      	bne.n	8010e52 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	7d1b      	ldrb	r3, [r3, #20]
 8010d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d067      	beq.n	8010e52 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	7d1b      	ldrb	r3, [r3, #20]
 8010d86:	b25b      	sxtb	r3, r3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	da1a      	bge.n	8010dc2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	7858      	ldrb	r0, [r3, #1]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6a1a      	ldr	r2, [r3, #32]
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	f7fd feec 	bl	800eb78 <disk_write>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d006      	beq.n	8010db4 <f_sync+0x5e>
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	2101      	movs	r1, #1
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fe f839 	bl	800ee22 <unlock_fs>
 8010db0:	2301      	movs	r3, #1
 8010db2:	e055      	b.n	8010e60 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	7d1b      	ldrb	r3, [r3, #20]
 8010db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010dbc:	b2da      	uxtb	r2, r3
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010dc2:	f7fd fe1b 	bl	800e9fc <get_fattime>
 8010dc6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010dc8:	68ba      	ldr	r2, [r7, #8]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dce:	4619      	mov	r1, r3
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	f7fe f9f1 	bl	800f1b8 <move_window>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010dda:	7dfb      	ldrb	r3, [r7, #23]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d138      	bne.n	8010e52 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010de4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	330b      	adds	r3, #11
 8010dea:	781a      	ldrb	r2, [r3, #0]
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	330b      	adds	r3, #11
 8010df0:	f042 0220 	orr.w	r2, r2, #32
 8010df4:	b2d2      	uxtb	r2, r2
 8010df6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6818      	ldr	r0, [r3, #0]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	689b      	ldr	r3, [r3, #8]
 8010e00:	461a      	mov	r2, r3
 8010e02:	68f9      	ldr	r1, [r7, #12]
 8010e04:	f7fe fefb 	bl	800fbfe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f103 021c 	add.w	r2, r3, #28
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	4619      	mov	r1, r3
 8010e14:	4610      	mov	r0, r2
 8010e16:	f7fd ff44 	bl	800eca2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	3316      	adds	r3, #22
 8010e1e:	6939      	ldr	r1, [r7, #16]
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fd ff3e 	bl	800eca2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	3312      	adds	r3, #18
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7fd ff1d 	bl	800ec6c <st_word>
					fs->wflag = 1;
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	2201      	movs	r2, #1
 8010e36:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7fe f9ea 	bl	800f214 <sync_fs>
 8010e40:	4603      	mov	r3, r0
 8010e42:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	7d1b      	ldrb	r3, [r3, #20]
 8010e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e4c:	b2da      	uxtb	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	7dfa      	ldrb	r2, [r7, #23]
 8010e56:	4611      	mov	r1, r2
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7fd ffe2 	bl	800ee22 <unlock_fs>
 8010e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3718      	adds	r7, #24
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7ff ff70 	bl	8010d56 <f_sync>
 8010e76:	4603      	mov	r3, r0
 8010e78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010e7a:	7bfb      	ldrb	r3, [r7, #15]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d11d      	bne.n	8010ebc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f107 0208 	add.w	r2, r7, #8
 8010e86:	4611      	mov	r1, r2
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff fb53 	bl	8010534 <validate>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010e92:	7bfb      	ldrb	r3, [r7, #15]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d111      	bne.n	8010ebc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	691b      	ldr	r3, [r3, #16]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7fe f8e7 	bl	800f070 <dec_lock>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010ea6:	7bfb      	ldrb	r3, [r7, #15]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d102      	bne.n	8010eb2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	2100      	movs	r1, #0
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fd ffb3 	bl	800ee22 <unlock_fs>
#endif
		}
	}
	return res;
 8010ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3710      	adds	r7, #16
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010ec6:	b580      	push	{r7, lr}
 8010ec8:	b090      	sub	sp, #64	@ 0x40
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
 8010ece:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f107 0208 	add.w	r2, r7, #8
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7ff fb2b 	bl	8010534 <validate>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010ee4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d103      	bne.n	8010ef4 <f_lseek+0x2e>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	7d5b      	ldrb	r3, [r3, #21]
 8010ef0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010ef4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d009      	beq.n	8010f10 <f_lseek+0x4a>
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010f02:	4611      	mov	r1, r2
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fd ff8c 	bl	800ee22 <unlock_fs>
 8010f0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010f0e:	e229      	b.n	8011364 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 80ea 	beq.w	80110ee <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f20:	d164      	bne.n	8010fec <f_lseek+0x126>
			tbl = fp->cltbl;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f26:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f2a:	1d1a      	adds	r2, r3, #4
 8010f2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	617b      	str	r3, [r7, #20]
 8010f32:	2302      	movs	r3, #2
 8010f34:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d044      	beq.n	8010fcc <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f44:	613b      	str	r3, [r7, #16]
 8010f46:	2300      	movs	r3, #0
 8010f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f4c:	3302      	adds	r3, #2
 8010f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f56:	3301      	adds	r3, #1
 8010f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fe f9e5 	bl	800f32e <get_fat>
 8010f64:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d809      	bhi.n	8010f80 <f_lseek+0xba>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2202      	movs	r2, #2
 8010f70:	755a      	strb	r2, [r3, #21]
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	2102      	movs	r1, #2
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fd ff53 	bl	800ee22 <unlock_fs>
 8010f7c:	2302      	movs	r3, #2
 8010f7e:	e1f1      	b.n	8011364 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f86:	d109      	bne.n	8010f9c <f_lseek+0xd6>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	755a      	strb	r2, [r3, #21]
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	2101      	movs	r1, #1
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fd ff45 	bl	800ee22 <unlock_fs>
 8010f98:	2301      	movs	r3, #1
 8010f9a:	e1e3      	b.n	8011364 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d0d4      	beq.n	8010f50 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d809      	bhi.n	8010fc2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb0:	1d1a      	adds	r2, r3, #4
 8010fb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8010fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010fb6:	601a      	str	r2, [r3, #0]
 8010fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fba:	1d1a      	adds	r2, r3, #4
 8010fbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8010fbe:	693a      	ldr	r2, [r7, #16]
 8010fc0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	699b      	ldr	r3, [r3, #24]
 8010fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d3ba      	bcc.n	8010f42 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010fd2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d803      	bhi.n	8010fe4 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8010fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fde:	2200      	movs	r2, #0
 8010fe0:	601a      	str	r2, [r3, #0]
 8010fe2:	e1b6      	b.n	8011352 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010fe4:	2311      	movs	r3, #17
 8010fe6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010fea:	e1b2      	b.n	8011352 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	683a      	ldr	r2, [r7, #0]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d902      	bls.n	8010ffc <f_lseek+0x136>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	f000 81a4 	beq.w	8011352 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	3b01      	subs	r3, #1
 801100e:	4619      	mov	r1, r3
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7fe fc1a 	bl	800f84a <clmt_clust>
 8011016:	4602      	mov	r2, r0
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	69db      	ldr	r3, [r3, #28]
 8011022:	4619      	mov	r1, r3
 8011024:	4610      	mov	r0, r2
 8011026:	f7fe f963 	bl	800f2f0 <clust2sect>
 801102a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d109      	bne.n	8011046 <f_lseek+0x180>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2202      	movs	r2, #2
 8011036:	755a      	strb	r2, [r3, #21]
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	2102      	movs	r1, #2
 801103c:	4618      	mov	r0, r3
 801103e:	f7fd fef0 	bl	800ee22 <unlock_fs>
 8011042:	2302      	movs	r3, #2
 8011044:	e18e      	b.n	8011364 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	3b01      	subs	r3, #1
 801104a:	0a5b      	lsrs	r3, r3, #9
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	8952      	ldrh	r2, [r2, #10]
 8011050:	3a01      	subs	r2, #1
 8011052:	4013      	ands	r3, r2
 8011054:	69ba      	ldr	r2, [r7, #24]
 8011056:	4413      	add	r3, r2
 8011058:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	699b      	ldr	r3, [r3, #24]
 801105e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 8175 	beq.w	8011352 <f_lseek+0x48c>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6a1b      	ldr	r3, [r3, #32]
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	429a      	cmp	r2, r3
 8011070:	f000 816f 	beq.w	8011352 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	7d1b      	ldrb	r3, [r3, #20]
 8011078:	b25b      	sxtb	r3, r3
 801107a:	2b00      	cmp	r3, #0
 801107c:	da1d      	bge.n	80110ba <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	7858      	ldrb	r0, [r3, #1]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6a1a      	ldr	r2, [r3, #32]
 801108c:	2301      	movs	r3, #1
 801108e:	f7fd fd73 	bl	800eb78 <disk_write>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d009      	beq.n	80110ac <f_lseek+0x1e6>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	755a      	strb	r2, [r3, #21]
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	2101      	movs	r1, #1
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fd febd 	bl	800ee22 <unlock_fs>
 80110a8:	2301      	movs	r3, #1
 80110aa:	e15b      	b.n	8011364 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	7d1b      	ldrb	r3, [r3, #20]
 80110b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110b4:	b2da      	uxtb	r2, r3
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	7858      	ldrb	r0, [r3, #1]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80110c4:	2301      	movs	r3, #1
 80110c6:	69ba      	ldr	r2, [r7, #24]
 80110c8:	f7fd fd36 	bl	800eb38 <disk_read>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d009      	beq.n	80110e6 <f_lseek+0x220>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2201      	movs	r2, #1
 80110d6:	755a      	strb	r2, [r3, #21]
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	2101      	movs	r1, #1
 80110dc:	4618      	mov	r0, r3
 80110de:	f7fd fea0 	bl	800ee22 <unlock_fs>
 80110e2:	2301      	movs	r3, #1
 80110e4:	e13e      	b.n	8011364 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	69ba      	ldr	r2, [r7, #24]
 80110ea:	621a      	str	r2, [r3, #32]
 80110ec:	e131      	b.n	8011352 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	683a      	ldr	r2, [r7, #0]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d908      	bls.n	801110a <f_lseek+0x244>
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	7d1b      	ldrb	r3, [r3, #20]
 80110fc:	f003 0302 	and.w	r3, r3, #2
 8011100:	2b00      	cmp	r3, #0
 8011102:	d102      	bne.n	801110a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	699b      	ldr	r3, [r3, #24]
 801110e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	637b      	str	r3, [r7, #52]	@ 0x34
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011118:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 80c0 	beq.w	80112a2 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	895b      	ldrh	r3, [r3, #10]
 8011126:	025b      	lsls	r3, r3, #9
 8011128:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801112a:	6a3b      	ldr	r3, [r7, #32]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d01b      	beq.n	8011168 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	1e5a      	subs	r2, r3, #1
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	fbb2 f2f3 	udiv	r2, r2, r3
 801113a:	6a3b      	ldr	r3, [r7, #32]
 801113c:	1e59      	subs	r1, r3, #1
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011144:	429a      	cmp	r2, r3
 8011146:	d30f      	bcc.n	8011168 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011148:	6a3b      	ldr	r3, [r7, #32]
 801114a:	1e5a      	subs	r2, r3, #1
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	425b      	negs	r3, r3
 8011150:	401a      	ands	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	699b      	ldr	r3, [r3, #24]
 801115a:	683a      	ldr	r2, [r7, #0]
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	69db      	ldr	r3, [r3, #28]
 8011164:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011166:	e02c      	b.n	80111c2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	689b      	ldr	r3, [r3, #8]
 801116c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801116e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011170:	2b00      	cmp	r3, #0
 8011172:	d123      	bne.n	80111bc <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2100      	movs	r1, #0
 8011178:	4618      	mov	r0, r3
 801117a:	f7fe face 	bl	800f71a <create_chain>
 801117e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011182:	2b01      	cmp	r3, #1
 8011184:	d109      	bne.n	801119a <f_lseek+0x2d4>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2202      	movs	r2, #2
 801118a:	755a      	strb	r2, [r3, #21]
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	2102      	movs	r1, #2
 8011190:	4618      	mov	r0, r3
 8011192:	f7fd fe46 	bl	800ee22 <unlock_fs>
 8011196:	2302      	movs	r3, #2
 8011198:	e0e4      	b.n	8011364 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801119a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111a0:	d109      	bne.n	80111b6 <f_lseek+0x2f0>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2201      	movs	r2, #1
 80111a6:	755a      	strb	r2, [r3, #21]
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	2101      	movs	r1, #1
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7fd fe38 	bl	800ee22 <unlock_fs>
 80111b2:	2301      	movs	r3, #1
 80111b4:	e0d6      	b.n	8011364 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80111ba:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80111c0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80111c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d06c      	beq.n	80112a2 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80111c8:	e044      	b.n	8011254 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80111ca:	683a      	ldr	r2, [r7, #0]
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	603b      	str	r3, [r7, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	699a      	ldr	r2, [r3, #24]
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	441a      	add	r2, r3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	7d1b      	ldrb	r3, [r3, #20]
 80111e2:	f003 0302 	and.w	r3, r3, #2
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00b      	beq.n	8011202 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fe fa93 	bl	800f71a <create_chain>
 80111f4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80111f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d108      	bne.n	801120e <f_lseek+0x348>
							ofs = 0; break;
 80111fc:	2300      	movs	r3, #0
 80111fe:	603b      	str	r3, [r7, #0]
 8011200:	e02c      	b.n	801125c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011206:	4618      	mov	r0, r3
 8011208:	f7fe f891 	bl	800f32e <get_fat>
 801120c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801120e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011214:	d109      	bne.n	801122a <f_lseek+0x364>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2201      	movs	r2, #1
 801121a:	755a      	strb	r2, [r3, #21]
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	2101      	movs	r1, #1
 8011220:	4618      	mov	r0, r3
 8011222:	f7fd fdfe 	bl	800ee22 <unlock_fs>
 8011226:	2301      	movs	r3, #1
 8011228:	e09c      	b.n	8011364 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801122a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801122c:	2b01      	cmp	r3, #1
 801122e:	d904      	bls.n	801123a <f_lseek+0x374>
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	699b      	ldr	r3, [r3, #24]
 8011234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011236:	429a      	cmp	r2, r3
 8011238:	d309      	bcc.n	801124e <f_lseek+0x388>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2202      	movs	r2, #2
 801123e:	755a      	strb	r2, [r3, #21]
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	2102      	movs	r1, #2
 8011244:	4618      	mov	r0, r3
 8011246:	f7fd fdec 	bl	800ee22 <unlock_fs>
 801124a:	2302      	movs	r3, #2
 801124c:	e08a      	b.n	8011364 <f_lseek+0x49e>
					fp->clust = clst;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011252:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011254:	683a      	ldr	r2, [r7, #0]
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	429a      	cmp	r2, r3
 801125a:	d8b6      	bhi.n	80111ca <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	699a      	ldr	r2, [r3, #24]
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	441a      	add	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801126e:	2b00      	cmp	r3, #0
 8011270:	d017      	beq.n	80112a2 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe f83a 	bl	800f2f0 <clust2sect>
 801127c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801127e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011280:	2b00      	cmp	r3, #0
 8011282:	d109      	bne.n	8011298 <f_lseek+0x3d2>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2202      	movs	r2, #2
 8011288:	755a      	strb	r2, [r3, #21]
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	2102      	movs	r1, #2
 801128e:	4618      	mov	r0, r3
 8011290:	f7fd fdc7 	bl	800ee22 <unlock_fs>
 8011294:	2302      	movs	r3, #2
 8011296:	e065      	b.n	8011364 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	0a5b      	lsrs	r3, r3, #9
 801129c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801129e:	4413      	add	r3, r2
 80112a0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	699a      	ldr	r2, [r3, #24]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d90a      	bls.n	80112c4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	699a      	ldr	r2, [r3, #24]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7d1b      	ldrb	r3, [r3, #20]
 80112ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	699b      	ldr	r3, [r3, #24]
 80112c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d040      	beq.n	8011352 <f_lseek+0x48c>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6a1b      	ldr	r3, [r3, #32]
 80112d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d03b      	beq.n	8011352 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	7d1b      	ldrb	r3, [r3, #20]
 80112de:	b25b      	sxtb	r3, r3
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	da1d      	bge.n	8011320 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	7858      	ldrb	r0, [r3, #1]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6a1a      	ldr	r2, [r3, #32]
 80112f2:	2301      	movs	r3, #1
 80112f4:	f7fd fc40 	bl	800eb78 <disk_write>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d009      	beq.n	8011312 <f_lseek+0x44c>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2201      	movs	r2, #1
 8011302:	755a      	strb	r2, [r3, #21]
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	2101      	movs	r1, #1
 8011308:	4618      	mov	r0, r3
 801130a:	f7fd fd8a 	bl	800ee22 <unlock_fs>
 801130e:	2301      	movs	r3, #1
 8011310:	e028      	b.n	8011364 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	7d1b      	ldrb	r3, [r3, #20]
 8011316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801131a:	b2da      	uxtb	r2, r3
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	7858      	ldrb	r0, [r3, #1]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801132a:	2301      	movs	r3, #1
 801132c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801132e:	f7fd fc03 	bl	800eb38 <disk_read>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	d009      	beq.n	801134c <f_lseek+0x486>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2201      	movs	r2, #1
 801133c:	755a      	strb	r2, [r3, #21]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	2101      	movs	r1, #1
 8011342:	4618      	mov	r0, r3
 8011344:	f7fd fd6d 	bl	800ee22 <unlock_fs>
 8011348:	2301      	movs	r3, #1
 801134a:	e00b      	b.n	8011364 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011350:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011358:	4611      	mov	r1, r2
 801135a:	4618      	mov	r0, r3
 801135c:	f7fd fd61 	bl	800ee22 <unlock_fs>
 8011360:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011364:	4618      	mov	r0, r3
 8011366:	3740      	adds	r7, #64	@ 0x40
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b096      	sub	sp, #88	@ 0x58
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011374:	f107 0108 	add.w	r1, r7, #8
 8011378:	1d3b      	adds	r3, r7, #4
 801137a:	2202      	movs	r2, #2
 801137c:	4618      	mov	r0, r3
 801137e:	f7fe fe85 	bl	801008c <find_volume>
 8011382:	4603      	mov	r3, r0
 8011384:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801138c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011390:	2b00      	cmp	r3, #0
 8011392:	f040 80ec 	bne.w	801156e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	f107 030c 	add.w	r3, r7, #12
 801139c:	4611      	mov	r1, r2
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fe fd68 	bl	800fe74 <follow_path>
 80113a4:	4603      	mov	r3, r0
 80113a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80113aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d102      	bne.n	80113b8 <f_mkdir+0x4c>
 80113b2:	2308      	movs	r3, #8
 80113b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80113b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113bc:	2b04      	cmp	r3, #4
 80113be:	f040 80d6 	bne.w	801156e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80113c2:	f107 030c 	add.w	r3, r7, #12
 80113c6:	2100      	movs	r1, #0
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fe f9a6 	bl	800f71a <create_chain>
 80113ce:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	895b      	ldrh	r3, [r3, #10]
 80113d4:	025b      	lsls	r3, r3, #9
 80113d6:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80113d8:	2300      	movs	r3, #0
 80113da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80113de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d102      	bne.n	80113ea <f_mkdir+0x7e>
 80113e4:	2307      	movs	r3, #7
 80113e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80113ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d102      	bne.n	80113f6 <f_mkdir+0x8a>
 80113f0:	2302      	movs	r3, #2
 80113f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80113f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113fc:	d102      	bne.n	8011404 <f_mkdir+0x98>
 80113fe:	2301      	movs	r3, #1
 8011400:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011404:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011408:	2b00      	cmp	r3, #0
 801140a:	d106      	bne.n	801141a <f_mkdir+0xae>
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	4618      	mov	r0, r3
 8011410:	f7fd fe8e 	bl	800f130 <sync_window>
 8011414:	4603      	mov	r3, r0
 8011416:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 801141a:	f7fd faef 	bl	800e9fc <get_fattime>
 801141e:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011420:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011424:	2b00      	cmp	r3, #0
 8011426:	d16a      	bne.n	80114fe <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801142c:	4618      	mov	r0, r3
 801142e:	f7fd ff5f 	bl	800f2f0 <clust2sect>
 8011432:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	3334      	adds	r3, #52	@ 0x34
 8011438:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 801143a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801143e:	2100      	movs	r1, #0
 8011440:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011442:	f7fd fc7b 	bl	800ed3c <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011446:	220b      	movs	r2, #11
 8011448:	2120      	movs	r1, #32
 801144a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801144c:	f7fd fc76 	bl	800ed3c <mem_set>
					dir[DIR_Name] = '.';
 8011450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011452:	222e      	movs	r2, #46	@ 0x2e
 8011454:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011458:	330b      	adds	r3, #11
 801145a:	2210      	movs	r2, #16
 801145c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801145e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011460:	3316      	adds	r3, #22
 8011462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011464:	4618      	mov	r0, r3
 8011466:	f7fd fc1c 	bl	800eca2 <st_dword>
					st_clust(fs, dir, dcl);
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801146e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011470:	4618      	mov	r0, r3
 8011472:	f7fe fbc4 	bl	800fbfe <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011478:	3320      	adds	r3, #32
 801147a:	2220      	movs	r2, #32
 801147c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801147e:	4618      	mov	r0, r3
 8011480:	f7fd fc3b 	bl	800ecfa <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011486:	3321      	adds	r3, #33	@ 0x21
 8011488:	222e      	movs	r2, #46	@ 0x2e
 801148a:	701a      	strb	r2, [r3, #0]
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	2b03      	cmp	r3, #3
 8011496:	d106      	bne.n	80114a6 <f_mkdir+0x13a>
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801149c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801149e:	429a      	cmp	r2, r3
 80114a0:	d101      	bne.n	80114a6 <f_mkdir+0x13a>
 80114a2:	2300      	movs	r3, #0
 80114a4:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80114a6:	68b8      	ldr	r0, [r7, #8]
 80114a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114aa:	3320      	adds	r3, #32
 80114ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80114ae:	4619      	mov	r1, r3
 80114b0:	f7fe fba5 	bl	800fbfe <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	895b      	ldrh	r3, [r3, #10]
 80114b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80114ba:	e01b      	b.n	80114f4 <f_mkdir+0x188>
					fs->winsect = dsc++;
 80114bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114be:	1c5a      	adds	r2, r3, #1
 80114c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80114c2:	68ba      	ldr	r2, [r7, #8]
 80114c4:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	2201      	movs	r2, #1
 80114ca:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fd fe2e 	bl	800f130 <sync_window>
 80114d4:	4603      	mov	r3, r0
 80114d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 80114da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d10c      	bne.n	80114fc <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 80114e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114e6:	2100      	movs	r1, #0
 80114e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80114ea:	f7fd fc27 	bl	800ed3c <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80114ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114f0:	3b01      	subs	r3, #1
 80114f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80114f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d1e0      	bne.n	80114bc <f_mkdir+0x150>
 80114fa:	e000      	b.n	80114fe <f_mkdir+0x192>
					if (res != FR_OK) break;
 80114fc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80114fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011502:	2b00      	cmp	r3, #0
 8011504:	d107      	bne.n	8011516 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011506:	f107 030c 	add.w	r3, r7, #12
 801150a:	4618      	mov	r0, r3
 801150c:	f7fe fbec 	bl	800fce8 <dir_register>
 8011510:	4603      	mov	r3, r0
 8011512:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8011516:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801151a:	2b00      	cmp	r3, #0
 801151c:	d120      	bne.n	8011560 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801151e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011520:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011524:	3316      	adds	r3, #22
 8011526:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011528:	4618      	mov	r0, r3
 801152a:	f7fd fbba 	bl	800eca2 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011532:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011534:	4618      	mov	r0, r3
 8011536:	f7fe fb62 	bl	800fbfe <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801153a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801153c:	330b      	adds	r3, #11
 801153e:	2210      	movs	r2, #16
 8011540:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2201      	movs	r2, #1
 8011546:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011548:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801154c:	2b00      	cmp	r3, #0
 801154e:	d10e      	bne.n	801156e <f_mkdir+0x202>
					res = sync_fs(fs);
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	4618      	mov	r0, r3
 8011554:	f7fd fe5e 	bl	800f214 <sync_fs>
 8011558:	4603      	mov	r3, r0
 801155a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 801155e:	e006      	b.n	801156e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011560:	f107 030c 	add.w	r3, r7, #12
 8011564:	2200      	movs	r2, #0
 8011566:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011568:	4618      	mov	r0, r3
 801156a:	f7fe f871 	bl	800f650 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011574:	4611      	mov	r1, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7fd fc53 	bl	800ee22 <unlock_fs>
 801157c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8011580:	4618      	mov	r0, r3
 8011582:	3758      	adds	r7, #88	@ 0x58
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}

08011588 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011588:	b480      	push	{r7}
 801158a:	b087      	sub	sp, #28
 801158c:	af00      	add	r7, sp, #0
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	60b9      	str	r1, [r7, #8]
 8011592:	4613      	mov	r3, r2
 8011594:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011596:	2301      	movs	r3, #1
 8011598:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801159a:	2300      	movs	r3, #0
 801159c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801159e:	4b1f      	ldr	r3, [pc, #124]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115a0:	7a5b      	ldrb	r3, [r3, #9]
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d131      	bne.n	801160c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80115a8:	4b1c      	ldr	r3, [pc, #112]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115aa:	7a5b      	ldrb	r3, [r3, #9]
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	461a      	mov	r2, r3
 80115b0:	4b1a      	ldr	r3, [pc, #104]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115b2:	2100      	movs	r1, #0
 80115b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80115b6:	4b19      	ldr	r3, [pc, #100]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115b8:	7a5b      	ldrb	r3, [r3, #9]
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	4a17      	ldr	r2, [pc, #92]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115be:	009b      	lsls	r3, r3, #2
 80115c0:	4413      	add	r3, r2
 80115c2:	68fa      	ldr	r2, [r7, #12]
 80115c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80115c6:	4b15      	ldr	r3, [pc, #84]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115c8:	7a5b      	ldrb	r3, [r3, #9]
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	461a      	mov	r2, r3
 80115ce:	4b13      	ldr	r3, [pc, #76]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115d0:	4413      	add	r3, r2
 80115d2:	79fa      	ldrb	r2, [r7, #7]
 80115d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80115d6:	4b11      	ldr	r3, [pc, #68]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115d8:	7a5b      	ldrb	r3, [r3, #9]
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	1c5a      	adds	r2, r3, #1
 80115de:	b2d1      	uxtb	r1, r2
 80115e0:	4a0e      	ldr	r2, [pc, #56]	@ (801161c <FATFS_LinkDriverEx+0x94>)
 80115e2:	7251      	strb	r1, [r2, #9]
 80115e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80115e6:	7dbb      	ldrb	r3, [r7, #22]
 80115e8:	3330      	adds	r3, #48	@ 0x30
 80115ea:	b2da      	uxtb	r2, r3
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	3301      	adds	r3, #1
 80115f4:	223a      	movs	r2, #58	@ 0x3a
 80115f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	3302      	adds	r3, #2
 80115fc:	222f      	movs	r2, #47	@ 0x2f
 80115fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	3303      	adds	r3, #3
 8011604:	2200      	movs	r2, #0
 8011606:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011608:	2300      	movs	r3, #0
 801160a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801160c:	7dfb      	ldrb	r3, [r7, #23]
}
 801160e:	4618      	mov	r0, r3
 8011610:	371c      	adds	r7, #28
 8011612:	46bd      	mov	sp, r7
 8011614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011618:	4770      	bx	lr
 801161a:	bf00      	nop
 801161c:	20001660 	.word	0x20001660

08011620 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801162a:	2200      	movs	r2, #0
 801162c:	6839      	ldr	r1, [r7, #0]
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7ff ffaa 	bl	8011588 <FATFS_LinkDriverEx>
 8011634:	4603      	mov	r3, r0
}
 8011636:	4618      	mov	r0, r3
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801163e:	b580      	push	{r7, lr}
 8011640:	b084      	sub	sp, #16
 8011642:	af00      	add	r7, sp, #0
 8011644:	4603      	mov	r3, r0
 8011646:	6039      	str	r1, [r7, #0]
 8011648:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 801164a:	2300      	movs	r3, #0
 801164c:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801164e:	f107 0308 	add.w	r3, r7, #8
 8011652:	2101      	movs	r1, #1
 8011654:	4618      	mov	r0, r3
 8011656:	f000 f939 	bl	80118cc <osSemaphoreCreate>
 801165a:	4602      	mov	r2, r0
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2b00      	cmp	r3, #0
 8011666:	bf14      	ite	ne
 8011668:	2301      	movne	r3, #1
 801166a:	2300      	moveq	r3, #0
 801166c:	b2db      	uxtb	r3, r3
 801166e:	60fb      	str	r3, [r7, #12]

    return ret;
 8011670:	68fb      	ldr	r3, [r7, #12]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801167a:	b580      	push	{r7, lr}
 801167c:	b082      	sub	sp, #8
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f000 f9c4 	bl	8011a10 <osSemaphoreDelete>
#endif
    return 1;
 8011688:	2301      	movs	r3, #1
}
 801168a:	4618      	mov	r0, r3
 801168c:	3708      	adds	r7, #8
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}

08011692 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011692:	b580      	push	{r7, lr}
 8011694:	b084      	sub	sp, #16
 8011696:	af00      	add	r7, sp, #0
 8011698:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801169e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 f930 	bl	8011908 <osSemaphoreWait>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d101      	bne.n	80116b2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80116ae:	2301      	movs	r3, #1
 80116b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80116b2:	68fb      	ldr	r3, [r7, #12]
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f000 f96d 	bl	80119a4 <osSemaphoreRelease>
#endif
}
 80116ca:	bf00      	nop
 80116cc:	3708      	adds	r7, #8
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80116d2:	b480      	push	{r7}
 80116d4:	b085      	sub	sp, #20
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	4603      	mov	r3, r0
 80116da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80116dc:	2300      	movs	r3, #0
 80116de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80116e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116e4:	2b84      	cmp	r3, #132	@ 0x84
 80116e6:	d005      	beq.n	80116f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80116e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	4413      	add	r3, r2
 80116f0:	3303      	adds	r3, #3
 80116f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80116f4:	68fb      	ldr	r3, [r7, #12]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3714      	adds	r7, #20
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr

08011702 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011702:	b480      	push	{r7}
 8011704:	b083      	sub	sp, #12
 8011706:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011708:	f3ef 8305 	mrs	r3, IPSR
 801170c:	607b      	str	r3, [r7, #4]
  return(result);
 801170e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011710:	2b00      	cmp	r3, #0
 8011712:	bf14      	ite	ne
 8011714:	2301      	movne	r3, #1
 8011716:	2300      	moveq	r3, #0
 8011718:	b2db      	uxtb	r3, r3
}
 801171a:	4618      	mov	r0, r3
 801171c:	370c      	adds	r7, #12
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr

08011726 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011726:	b580      	push	{r7, lr}
 8011728:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801172a:	f001 f9cb 	bl	8012ac4 <vTaskStartScheduler>
  
  return osOK;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	bd80      	pop	{r7, pc}

08011734 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011736:	b087      	sub	sp, #28
 8011738:	af02      	add	r7, sp, #8
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	685c      	ldr	r4, [r3, #4]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801174a:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011752:	4618      	mov	r0, r3
 8011754:	f7ff ffbd 	bl	80116d2 <makeFreeRtosPriority>
 8011758:	4602      	mov	r2, r0
 801175a:	f107 030c 	add.w	r3, r7, #12
 801175e:	9301      	str	r3, [sp, #4]
 8011760:	9200      	str	r2, [sp, #0]
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	4632      	mov	r2, r6
 8011766:	4629      	mov	r1, r5
 8011768:	4620      	mov	r0, r4
 801176a:	f000 ffad 	bl	80126c8 <xTaskCreate>
 801176e:	4603      	mov	r3, r0
 8011770:	2b01      	cmp	r3, #1
 8011772:	d001      	beq.n	8011778 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8011774:	2300      	movs	r3, #0
 8011776:	e000      	b.n	801177a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011778:	68fb      	ldr	r3, [r7, #12]
}
 801177a:	4618      	mov	r0, r3
 801177c:	3714      	adds	r7, #20
 801177e:	46bd      	mov	sp, r7
 8011780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011782 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b084      	sub	sp, #16
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d001      	beq.n	8011798 <osDelay+0x16>
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	e000      	b.n	801179a <osDelay+0x18>
 8011798:	2301      	movs	r3, #1
 801179a:	4618      	mov	r0, r3
 801179c:	f001 f8c8 	bl	8012930 <vTaskDelay>
  
  return osOK;
 80117a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3710      	adds	r7, #16
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80117aa:	b580      	push	{r7, lr}
 80117ac:	b082      	sub	sp, #8
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80117b2:	2001      	movs	r0, #1
 80117b4:	f000 fada 	bl	8011d6c <xQueueCreateMutex>
 80117b8:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3708      	adds	r7, #8
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
	...

080117c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80117ce:	2300      	movs	r3, #0
 80117d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d101      	bne.n	80117dc <osMutexWait+0x18>
    return osErrorParameter;
 80117d8:	2380      	movs	r3, #128	@ 0x80
 80117da:	e03a      	b.n	8011852 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80117dc:	2300      	movs	r3, #0
 80117de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e6:	d103      	bne.n	80117f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80117e8:	f04f 33ff 	mov.w	r3, #4294967295
 80117ec:	60fb      	str	r3, [r7, #12]
 80117ee:	e009      	b.n	8011804 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d006      	beq.n	8011804 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d101      	bne.n	8011804 <osMutexWait+0x40>
      ticks = 1;
 8011800:	2301      	movs	r3, #1
 8011802:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011804:	f7ff ff7d 	bl	8011702 <inHandlerMode>
 8011808:	4603      	mov	r3, r0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d017      	beq.n	801183e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801180e:	f107 0308 	add.w	r3, r7, #8
 8011812:	461a      	mov	r2, r3
 8011814:	2100      	movs	r1, #0
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 fd62 	bl	80122e0 <xQueueReceiveFromISR>
 801181c:	4603      	mov	r3, r0
 801181e:	2b01      	cmp	r3, #1
 8011820:	d001      	beq.n	8011826 <osMutexWait+0x62>
      return osErrorOS;
 8011822:	23ff      	movs	r3, #255	@ 0xff
 8011824:	e015      	b.n	8011852 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d011      	beq.n	8011850 <osMutexWait+0x8c>
 801182c:	4b0b      	ldr	r3, [pc, #44]	@ (801185c <osMutexWait+0x98>)
 801182e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	f3bf 8f4f 	dsb	sy
 8011838:	f3bf 8f6f 	isb	sy
 801183c:	e008      	b.n	8011850 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801183e:	68f9      	ldr	r1, [r7, #12]
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 fc3d 	bl	80120c0 <xQueueSemaphoreTake>
 8011846:	4603      	mov	r3, r0
 8011848:	2b01      	cmp	r3, #1
 801184a:	d001      	beq.n	8011850 <osMutexWait+0x8c>
    return osErrorOS;
 801184c:	23ff      	movs	r3, #255	@ 0xff
 801184e:	e000      	b.n	8011852 <osMutexWait+0x8e>
  }
  
  return osOK;
 8011850:	2300      	movs	r3, #0
}
 8011852:	4618      	mov	r0, r3
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	e000ed04 	.word	0xe000ed04

08011860 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011868:	2300      	movs	r3, #0
 801186a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801186c:	2300      	movs	r3, #0
 801186e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011870:	f7ff ff47 	bl	8011702 <inHandlerMode>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d016      	beq.n	80118a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801187a:	f107 0308 	add.w	r3, r7, #8
 801187e:	4619      	mov	r1, r3
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f000 fb8d 	bl	8011fa0 <xQueueGiveFromISR>
 8011886:	4603      	mov	r3, r0
 8011888:	2b01      	cmp	r3, #1
 801188a:	d001      	beq.n	8011890 <osMutexRelease+0x30>
      return osErrorOS;
 801188c:	23ff      	movs	r3, #255	@ 0xff
 801188e:	e017      	b.n	80118c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d013      	beq.n	80118be <osMutexRelease+0x5e>
 8011896:	4b0c      	ldr	r3, [pc, #48]	@ (80118c8 <osMutexRelease+0x68>)
 8011898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	f3bf 8f4f 	dsb	sy
 80118a2:	f3bf 8f6f 	isb	sy
 80118a6:	e00a      	b.n	80118be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80118a8:	2300      	movs	r3, #0
 80118aa:	2200      	movs	r2, #0
 80118ac:	2100      	movs	r1, #0
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 fa74 	bl	8011d9c <xQueueGenericSend>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b01      	cmp	r3, #1
 80118b8:	d001      	beq.n	80118be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80118ba:	23ff      	movs	r3, #255	@ 0xff
 80118bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80118be:	68fb      	ldr	r3, [r7, #12]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3710      	adds	r7, #16
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	e000ed04 	.word	0xe000ed04

080118cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d110      	bne.n	80118fe <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80118dc:	2203      	movs	r2, #3
 80118de:	2100      	movs	r1, #0
 80118e0:	2001      	movs	r0, #1
 80118e2:	f000 f9d3 	bl	8011c8c <xQueueGenericCreate>
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d005      	beq.n	80118fa <osSemaphoreCreate+0x2e>
 80118ee:	2300      	movs	r3, #0
 80118f0:	2200      	movs	r2, #0
 80118f2:	2100      	movs	r1, #0
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f000 fa51 	bl	8011d9c <xQueueGenericSend>
    return sema;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	e000      	b.n	8011900 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80118fe:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8011900:	4618      	mov	r0, r3
 8011902:	3710      	adds	r7, #16
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011912:	2300      	movs	r3, #0
 8011914:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d101      	bne.n	8011920 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801191c:	2380      	movs	r3, #128	@ 0x80
 801191e:	e03a      	b.n	8011996 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011920:	2300      	movs	r3, #0
 8011922:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801192a:	d103      	bne.n	8011934 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801192c:	f04f 33ff 	mov.w	r3, #4294967295
 8011930:	60fb      	str	r3, [r7, #12]
 8011932:	e009      	b.n	8011948 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d006      	beq.n	8011948 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d101      	bne.n	8011948 <osSemaphoreWait+0x40>
      ticks = 1;
 8011944:	2301      	movs	r3, #1
 8011946:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011948:	f7ff fedb 	bl	8011702 <inHandlerMode>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d017      	beq.n	8011982 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011952:	f107 0308 	add.w	r3, r7, #8
 8011956:	461a      	mov	r2, r3
 8011958:	2100      	movs	r1, #0
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 fcc0 	bl	80122e0 <xQueueReceiveFromISR>
 8011960:	4603      	mov	r3, r0
 8011962:	2b01      	cmp	r3, #1
 8011964:	d001      	beq.n	801196a <osSemaphoreWait+0x62>
      return osErrorOS;
 8011966:	23ff      	movs	r3, #255	@ 0xff
 8011968:	e015      	b.n	8011996 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d011      	beq.n	8011994 <osSemaphoreWait+0x8c>
 8011970:	4b0b      	ldr	r3, [pc, #44]	@ (80119a0 <osSemaphoreWait+0x98>)
 8011972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011976:	601a      	str	r2, [r3, #0]
 8011978:	f3bf 8f4f 	dsb	sy
 801197c:	f3bf 8f6f 	isb	sy
 8011980:	e008      	b.n	8011994 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011982:	68f9      	ldr	r1, [r7, #12]
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f000 fb9b 	bl	80120c0 <xQueueSemaphoreTake>
 801198a:	4603      	mov	r3, r0
 801198c:	2b01      	cmp	r3, #1
 801198e:	d001      	beq.n	8011994 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011990:	23ff      	movs	r3, #255	@ 0xff
 8011992:	e000      	b.n	8011996 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	e000ed04 	.word	0xe000ed04

080119a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80119ac:	2300      	movs	r3, #0
 80119ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80119b0:	2300      	movs	r3, #0
 80119b2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80119b4:	f7ff fea5 	bl	8011702 <inHandlerMode>
 80119b8:	4603      	mov	r3, r0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d016      	beq.n	80119ec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80119be:	f107 0308 	add.w	r3, r7, #8
 80119c2:	4619      	mov	r1, r3
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f000 faeb 	bl	8011fa0 <xQueueGiveFromISR>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d001      	beq.n	80119d4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80119d0:	23ff      	movs	r3, #255	@ 0xff
 80119d2:	e017      	b.n	8011a04 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d013      	beq.n	8011a02 <osSemaphoreRelease+0x5e>
 80119da:	4b0c      	ldr	r3, [pc, #48]	@ (8011a0c <osSemaphoreRelease+0x68>)
 80119dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119e0:	601a      	str	r2, [r3, #0]
 80119e2:	f3bf 8f4f 	dsb	sy
 80119e6:	f3bf 8f6f 	isb	sy
 80119ea:	e00a      	b.n	8011a02 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80119ec:	2300      	movs	r3, #0
 80119ee:	2200      	movs	r2, #0
 80119f0:	2100      	movs	r1, #0
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f000 f9d2 	bl	8011d9c <xQueueGenericSend>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d001      	beq.n	8011a02 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80119fe:	23ff      	movs	r3, #255	@ 0xff
 8011a00:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011a02:	68fb      	ldr	r3, [r7, #12]
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3710      	adds	r7, #16
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	e000ed04 	.word	0xe000ed04

08011a10 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011a18:	f7ff fe73 	bl	8011702 <inHandlerMode>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011a22:	2382      	movs	r3, #130	@ 0x82
 8011a24:	e003      	b.n	8011a2e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f000 fcdc 	bl	80123e4 <vQueueDelete>

  return osOK; 
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3708      	adds	r7, #8
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8011a36:	b580      	push	{r7, lr}
 8011a38:	b082      	sub	sp, #8
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 ffac 	bl	801299c <vTaskSuspend>
  
  return osOK;
 8011a44:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011a4e:	b480      	push	{r7}
 8011a50:	b083      	sub	sp, #12
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f103 0208 	add.w	r2, r3, #8
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f04f 32ff 	mov.w	r2, #4294967295
 8011a66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f103 0208 	add.w	r2, r3, #8
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f103 0208 	add.w	r2, r3, #8
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011a82:	bf00      	nop
 8011a84:	370c      	adds	r7, #12
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr

08011a8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011a8e:	b480      	push	{r7}
 8011a90:	b083      	sub	sp, #12
 8011a92:	af00      	add	r7, sp, #0
 8011a94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011a9c:	bf00      	nop
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b085      	sub	sp, #20
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	68fa      	ldr	r2, [r7, #12]
 8011abc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	689a      	ldr	r2, [r3, #8]
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	689b      	ldr	r3, [r3, #8]
 8011aca:	683a      	ldr	r2, [r7, #0]
 8011acc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	683a      	ldr	r2, [r7, #0]
 8011ad2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	1c5a      	adds	r2, r3, #1
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	601a      	str	r2, [r3, #0]
}
 8011ae4:	bf00      	nop
 8011ae6:	3714      	adds	r7, #20
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr

08011af0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011af0:	b480      	push	{r7}
 8011af2:	b085      	sub	sp, #20
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b06:	d103      	bne.n	8011b10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	691b      	ldr	r3, [r3, #16]
 8011b0c:	60fb      	str	r3, [r7, #12]
 8011b0e:	e00c      	b.n	8011b2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	3308      	adds	r3, #8
 8011b14:	60fb      	str	r3, [r7, #12]
 8011b16:	e002      	b.n	8011b1e <vListInsert+0x2e>
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	60fb      	str	r3, [r7, #12]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	68ba      	ldr	r2, [r7, #8]
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d2f6      	bcs.n	8011b18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	685a      	ldr	r2, [r3, #4]
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	683a      	ldr	r2, [r7, #0]
 8011b38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	68fa      	ldr	r2, [r7, #12]
 8011b3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	683a      	ldr	r2, [r7, #0]
 8011b44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	1c5a      	adds	r2, r3, #1
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	601a      	str	r2, [r3, #0]
}
 8011b56:	bf00      	nop
 8011b58:	3714      	adds	r7, #20
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr

08011b62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011b62:	b480      	push	{r7}
 8011b64:	b085      	sub	sp, #20
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	691b      	ldr	r3, [r3, #16]
 8011b6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	6892      	ldr	r2, [r2, #8]
 8011b78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	689b      	ldr	r3, [r3, #8]
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	6852      	ldr	r2, [r2, #4]
 8011b82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	685b      	ldr	r3, [r3, #4]
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d103      	bne.n	8011b96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	689a      	ldr	r2, [r3, #8]
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	1e5a      	subs	r2, r3, #1
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr
	...

08011bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d10b      	bne.n	8011be4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bd0:	f383 8811 	msr	BASEPRI, r3
 8011bd4:	f3bf 8f6f 	isb	sy
 8011bd8:	f3bf 8f4f 	dsb	sy
 8011bdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011bde:	bf00      	nop
 8011be0:	bf00      	nop
 8011be2:	e7fd      	b.n	8011be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011be4:	f001 fe98 	bl	8013918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bf0:	68f9      	ldr	r1, [r7, #12]
 8011bf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011bf4:	fb01 f303 	mul.w	r3, r1, r3
 8011bf8:	441a      	add	r2, r3
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2200      	movs	r2, #0
 8011c02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c14:	3b01      	subs	r3, #1
 8011c16:	68f9      	ldr	r1, [r7, #12]
 8011c18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011c1a:	fb01 f303 	mul.w	r3, r1, r3
 8011c1e:	441a      	add	r2, r3
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	22ff      	movs	r2, #255	@ 0xff
 8011c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	22ff      	movs	r2, #255	@ 0xff
 8011c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d114      	bne.n	8011c64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	691b      	ldr	r3, [r3, #16]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d01a      	beq.n	8011c78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	3310      	adds	r3, #16
 8011c46:	4618      	mov	r0, r3
 8011c48:	f001 f96c 	bl	8012f24 <xTaskRemoveFromEventList>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d012      	beq.n	8011c78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011c52:	4b0d      	ldr	r3, [pc, #52]	@ (8011c88 <xQueueGenericReset+0xd0>)
 8011c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c58:	601a      	str	r2, [r3, #0]
 8011c5a:	f3bf 8f4f 	dsb	sy
 8011c5e:	f3bf 8f6f 	isb	sy
 8011c62:	e009      	b.n	8011c78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	3310      	adds	r3, #16
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7ff fef0 	bl	8011a4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	3324      	adds	r3, #36	@ 0x24
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ff feeb 	bl	8011a4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011c78:	f001 fe80 	bl	801397c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011c7c:	2301      	movs	r3, #1
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3710      	adds	r7, #16
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	e000ed04 	.word	0xe000ed04

08011c8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b08a      	sub	sp, #40	@ 0x28
 8011c90:	af02      	add	r7, sp, #8
 8011c92:	60f8      	str	r0, [r7, #12]
 8011c94:	60b9      	str	r1, [r7, #8]
 8011c96:	4613      	mov	r3, r2
 8011c98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d10b      	bne.n	8011cb8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8011ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ca4:	f383 8811 	msr	BASEPRI, r3
 8011ca8:	f3bf 8f6f 	isb	sy
 8011cac:	f3bf 8f4f 	dsb	sy
 8011cb0:	613b      	str	r3, [r7, #16]
}
 8011cb2:	bf00      	nop
 8011cb4:	bf00      	nop
 8011cb6:	e7fd      	b.n	8011cb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	68ba      	ldr	r2, [r7, #8]
 8011cbc:	fb02 f303 	mul.w	r3, r2, r3
 8011cc0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	3348      	adds	r3, #72	@ 0x48
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f001 ff48 	bl	8013b5c <pvPortMalloc>
 8011ccc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011cce:	69bb      	ldr	r3, [r7, #24]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d00d      	beq.n	8011cf0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	3348      	adds	r3, #72	@ 0x48
 8011cdc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011cde:	79fa      	ldrb	r2, [r7, #7]
 8011ce0:	69bb      	ldr	r3, [r7, #24]
 8011ce2:	9300      	str	r3, [sp, #0]
 8011ce4:	4613      	mov	r3, r2
 8011ce6:	697a      	ldr	r2, [r7, #20]
 8011ce8:	68b9      	ldr	r1, [r7, #8]
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f000 f805 	bl	8011cfa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011cf0:	69bb      	ldr	r3, [r7, #24]
	}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3720      	adds	r7, #32
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	b084      	sub	sp, #16
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	60f8      	str	r0, [r7, #12]
 8011d02:	60b9      	str	r1, [r7, #8]
 8011d04:	607a      	str	r2, [r7, #4]
 8011d06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d103      	bne.n	8011d16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011d0e:	69bb      	ldr	r3, [r7, #24]
 8011d10:	69ba      	ldr	r2, [r7, #24]
 8011d12:	601a      	str	r2, [r3, #0]
 8011d14:	e002      	b.n	8011d1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	68ba      	ldr	r2, [r7, #8]
 8011d26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011d28:	2101      	movs	r1, #1
 8011d2a:	69b8      	ldr	r0, [r7, #24]
 8011d2c:	f7ff ff44 	bl	8011bb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011d30:	bf00      	nop
 8011d32:	3710      	adds	r7, #16
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d00e      	beq.n	8011d64 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2200      	movs	r2, #0
 8011d56:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011d58:	2300      	movs	r3, #0
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f000 f81c 	bl	8011d9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011d64:	bf00      	nop
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b086      	sub	sp, #24
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	4603      	mov	r3, r0
 8011d74:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011d76:	2301      	movs	r3, #1
 8011d78:	617b      	str	r3, [r7, #20]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011d7e:	79fb      	ldrb	r3, [r7, #7]
 8011d80:	461a      	mov	r2, r3
 8011d82:	6939      	ldr	r1, [r7, #16]
 8011d84:	6978      	ldr	r0, [r7, #20]
 8011d86:	f7ff ff81 	bl	8011c8c <xQueueGenericCreate>
 8011d8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f7ff ffd3 	bl	8011d38 <prvInitialiseMutex>

		return xNewQueue;
 8011d92:	68fb      	ldr	r3, [r7, #12]
	}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3718      	adds	r7, #24
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b08e      	sub	sp, #56	@ 0x38
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	60b9      	str	r1, [r7, #8]
 8011da6:	607a      	str	r2, [r7, #4]
 8011da8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011daa:	2300      	movs	r3, #0
 8011dac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d10b      	bne.n	8011dd0 <xQueueGenericSend+0x34>
	__asm volatile
 8011db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dbc:	f383 8811 	msr	BASEPRI, r3
 8011dc0:	f3bf 8f6f 	isb	sy
 8011dc4:	f3bf 8f4f 	dsb	sy
 8011dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011dca:	bf00      	nop
 8011dcc:	bf00      	nop
 8011dce:	e7fd      	b.n	8011dcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d103      	bne.n	8011dde <xQueueGenericSend+0x42>
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d101      	bne.n	8011de2 <xQueueGenericSend+0x46>
 8011dde:	2301      	movs	r3, #1
 8011de0:	e000      	b.n	8011de4 <xQueueGenericSend+0x48>
 8011de2:	2300      	movs	r3, #0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d10b      	bne.n	8011e00 <xQueueGenericSend+0x64>
	__asm volatile
 8011de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dec:	f383 8811 	msr	BASEPRI, r3
 8011df0:	f3bf 8f6f 	isb	sy
 8011df4:	f3bf 8f4f 	dsb	sy
 8011df8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011dfa:	bf00      	nop
 8011dfc:	bf00      	nop
 8011dfe:	e7fd      	b.n	8011dfc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	2b02      	cmp	r3, #2
 8011e04:	d103      	bne.n	8011e0e <xQueueGenericSend+0x72>
 8011e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d101      	bne.n	8011e12 <xQueueGenericSend+0x76>
 8011e0e:	2301      	movs	r3, #1
 8011e10:	e000      	b.n	8011e14 <xQueueGenericSend+0x78>
 8011e12:	2300      	movs	r3, #0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d10b      	bne.n	8011e30 <xQueueGenericSend+0x94>
	__asm volatile
 8011e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e1c:	f383 8811 	msr	BASEPRI, r3
 8011e20:	f3bf 8f6f 	isb	sy
 8011e24:	f3bf 8f4f 	dsb	sy
 8011e28:	623b      	str	r3, [r7, #32]
}
 8011e2a:	bf00      	nop
 8011e2c:	bf00      	nop
 8011e2e:	e7fd      	b.n	8011e2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e30:	f001 fa18 	bl	8013264 <xTaskGetSchedulerState>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d102      	bne.n	8011e40 <xQueueGenericSend+0xa4>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d101      	bne.n	8011e44 <xQueueGenericSend+0xa8>
 8011e40:	2301      	movs	r3, #1
 8011e42:	e000      	b.n	8011e46 <xQueueGenericSend+0xaa>
 8011e44:	2300      	movs	r3, #0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10b      	bne.n	8011e62 <xQueueGenericSend+0xc6>
	__asm volatile
 8011e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	61fb      	str	r3, [r7, #28]
}
 8011e5c:	bf00      	nop
 8011e5e:	bf00      	nop
 8011e60:	e7fd      	b.n	8011e5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e62:	f001 fd59 	bl	8013918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d302      	bcc.n	8011e78 <xQueueGenericSend+0xdc>
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d129      	bne.n	8011ecc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011e78:	683a      	ldr	r2, [r7, #0]
 8011e7a:	68b9      	ldr	r1, [r7, #8]
 8011e7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e7e:	f000 fae8 	bl	8012452 <prvCopyDataToQueue>
 8011e82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d010      	beq.n	8011eae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e8e:	3324      	adds	r3, #36	@ 0x24
 8011e90:	4618      	mov	r0, r3
 8011e92:	f001 f847 	bl	8012f24 <xTaskRemoveFromEventList>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d013      	beq.n	8011ec4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8011f9c <xQueueGenericSend+0x200>)
 8011e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ea2:	601a      	str	r2, [r3, #0]
 8011ea4:	f3bf 8f4f 	dsb	sy
 8011ea8:	f3bf 8f6f 	isb	sy
 8011eac:	e00a      	b.n	8011ec4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d007      	beq.n	8011ec4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011eb4:	4b39      	ldr	r3, [pc, #228]	@ (8011f9c <xQueueGenericSend+0x200>)
 8011eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011eba:	601a      	str	r2, [r3, #0]
 8011ebc:	f3bf 8f4f 	dsb	sy
 8011ec0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011ec4:	f001 fd5a 	bl	801397c <vPortExitCritical>
				return pdPASS;
 8011ec8:	2301      	movs	r3, #1
 8011eca:	e063      	b.n	8011f94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d103      	bne.n	8011eda <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011ed2:	f001 fd53 	bl	801397c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	e05c      	b.n	8011f94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d106      	bne.n	8011eee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ee0:	f107 0314 	add.w	r3, r7, #20
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f001 f881 	bl	8012fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011eea:	2301      	movs	r3, #1
 8011eec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011eee:	f001 fd45 	bl	801397c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ef2:	f000 fe2f 	bl	8012b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ef6:	f001 fd0f 	bl	8013918 <vPortEnterCritical>
 8011efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011efc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f00:	b25b      	sxtb	r3, r3
 8011f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f06:	d103      	bne.n	8011f10 <xQueueGenericSend+0x174>
 8011f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011f16:	b25b      	sxtb	r3, r3
 8011f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f1c:	d103      	bne.n	8011f26 <xQueueGenericSend+0x18a>
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f20:	2200      	movs	r2, #0
 8011f22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011f26:	f001 fd29 	bl	801397c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f2a:	1d3a      	adds	r2, r7, #4
 8011f2c:	f107 0314 	add.w	r3, r7, #20
 8011f30:	4611      	mov	r1, r2
 8011f32:	4618      	mov	r0, r3
 8011f34:	f001 f870 	bl	8013018 <xTaskCheckForTimeOut>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d124      	bne.n	8011f88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011f3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f40:	f000 fb7f 	bl	8012642 <prvIsQueueFull>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d018      	beq.n	8011f7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f4c:	3310      	adds	r3, #16
 8011f4e:	687a      	ldr	r2, [r7, #4]
 8011f50:	4611      	mov	r1, r2
 8011f52:	4618      	mov	r0, r3
 8011f54:	f000 ffc0 	bl	8012ed8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f5a:	f000 fb0a 	bl	8012572 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011f5e:	f000 fe07 	bl	8012b70 <xTaskResumeAll>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	f47f af7c 	bne.w	8011e62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f9c <xQueueGenericSend+0x200>)
 8011f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f70:	601a      	str	r2, [r3, #0]
 8011f72:	f3bf 8f4f 	dsb	sy
 8011f76:	f3bf 8f6f 	isb	sy
 8011f7a:	e772      	b.n	8011e62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f7e:	f000 faf8 	bl	8012572 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f82:	f000 fdf5 	bl	8012b70 <xTaskResumeAll>
 8011f86:	e76c      	b.n	8011e62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f8a:	f000 faf2 	bl	8012572 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f8e:	f000 fdef 	bl	8012b70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011f92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3738      	adds	r7, #56	@ 0x38
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	e000ed04 	.word	0xe000ed04

08011fa0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b08e      	sub	sp, #56	@ 0x38
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d10b      	bne.n	8011fcc <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fb8:	f383 8811 	msr	BASEPRI, r3
 8011fbc:	f3bf 8f6f 	isb	sy
 8011fc0:	f3bf 8f4f 	dsb	sy
 8011fc4:	623b      	str	r3, [r7, #32]
}
 8011fc6:	bf00      	nop
 8011fc8:	bf00      	nop
 8011fca:	e7fd      	b.n	8011fc8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00b      	beq.n	8011fec <xQueueGiveFromISR+0x4c>
	__asm volatile
 8011fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fd8:	f383 8811 	msr	BASEPRI, r3
 8011fdc:	f3bf 8f6f 	isb	sy
 8011fe0:	f3bf 8f4f 	dsb	sy
 8011fe4:	61fb      	str	r3, [r7, #28]
}
 8011fe6:	bf00      	nop
 8011fe8:	bf00      	nop
 8011fea:	e7fd      	b.n	8011fe8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d103      	bne.n	8011ffc <xQueueGiveFromISR+0x5c>
 8011ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ff6:	689b      	ldr	r3, [r3, #8]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d101      	bne.n	8012000 <xQueueGiveFromISR+0x60>
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e000      	b.n	8012002 <xQueueGiveFromISR+0x62>
 8012000:	2300      	movs	r3, #0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d10b      	bne.n	801201e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8012006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801200a:	f383 8811 	msr	BASEPRI, r3
 801200e:	f3bf 8f6f 	isb	sy
 8012012:	f3bf 8f4f 	dsb	sy
 8012016:	61bb      	str	r3, [r7, #24]
}
 8012018:	bf00      	nop
 801201a:	bf00      	nop
 801201c:	e7fd      	b.n	801201a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801201e:	f001 fd5b 	bl	8013ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012022:	f3ef 8211 	mrs	r2, BASEPRI
 8012026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801202a:	f383 8811 	msr	BASEPRI, r3
 801202e:	f3bf 8f6f 	isb	sy
 8012032:	f3bf 8f4f 	dsb	sy
 8012036:	617a      	str	r2, [r7, #20]
 8012038:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801203a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801203e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012042:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801204a:	429a      	cmp	r2, r3
 801204c:	d22b      	bcs.n	80120a6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801205e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012060:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012068:	d112      	bne.n	8012090 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801206a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801206e:	2b00      	cmp	r3, #0
 8012070:	d016      	beq.n	80120a0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012074:	3324      	adds	r3, #36	@ 0x24
 8012076:	4618      	mov	r0, r3
 8012078:	f000 ff54 	bl	8012f24 <xTaskRemoveFromEventList>
 801207c:	4603      	mov	r3, r0
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00e      	beq.n	80120a0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d00b      	beq.n	80120a0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	2201      	movs	r2, #1
 801208c:	601a      	str	r2, [r3, #0]
 801208e:	e007      	b.n	80120a0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012094:	3301      	adds	r3, #1
 8012096:	b2db      	uxtb	r3, r3
 8012098:	b25a      	sxtb	r2, r3
 801209a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801209c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80120a0:	2301      	movs	r3, #1
 80120a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80120a4:	e001      	b.n	80120aa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80120a6:	2300      	movs	r3, #0
 80120a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80120aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120ac:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80120b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80120b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80120b8:	4618      	mov	r0, r3
 80120ba:	3738      	adds	r7, #56	@ 0x38
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b08e      	sub	sp, #56	@ 0x38
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80120ca:	2300      	movs	r3, #0
 80120cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80120d2:	2300      	movs	r3, #0
 80120d4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80120d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10b      	bne.n	80120f4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80120dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120e0:	f383 8811 	msr	BASEPRI, r3
 80120e4:	f3bf 8f6f 	isb	sy
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	623b      	str	r3, [r7, #32]
}
 80120ee:	bf00      	nop
 80120f0:	bf00      	nop
 80120f2:	e7fd      	b.n	80120f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80120f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d00b      	beq.n	8012114 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80120fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012100:	f383 8811 	msr	BASEPRI, r3
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	f3bf 8f4f 	dsb	sy
 801210c:	61fb      	str	r3, [r7, #28]
}
 801210e:	bf00      	nop
 8012110:	bf00      	nop
 8012112:	e7fd      	b.n	8012110 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012114:	f001 f8a6 	bl	8013264 <xTaskGetSchedulerState>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d102      	bne.n	8012124 <xQueueSemaphoreTake+0x64>
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d101      	bne.n	8012128 <xQueueSemaphoreTake+0x68>
 8012124:	2301      	movs	r3, #1
 8012126:	e000      	b.n	801212a <xQueueSemaphoreTake+0x6a>
 8012128:	2300      	movs	r3, #0
 801212a:	2b00      	cmp	r3, #0
 801212c:	d10b      	bne.n	8012146 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801212e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012132:	f383 8811 	msr	BASEPRI, r3
 8012136:	f3bf 8f6f 	isb	sy
 801213a:	f3bf 8f4f 	dsb	sy
 801213e:	61bb      	str	r3, [r7, #24]
}
 8012140:	bf00      	nop
 8012142:	bf00      	nop
 8012144:	e7fd      	b.n	8012142 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012146:	f001 fbe7 	bl	8013918 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801214a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801214e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012152:	2b00      	cmp	r3, #0
 8012154:	d024      	beq.n	80121a0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012158:	1e5a      	subs	r2, r3, #1
 801215a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801215c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d104      	bne.n	8012170 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012166:	f001 fa29 	bl	80135bc <pvTaskIncrementMutexHeldCount>
 801216a:	4602      	mov	r2, r0
 801216c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801216e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012172:	691b      	ldr	r3, [r3, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00f      	beq.n	8012198 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801217a:	3310      	adds	r3, #16
 801217c:	4618      	mov	r0, r3
 801217e:	f000 fed1 	bl	8012f24 <xTaskRemoveFromEventList>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d007      	beq.n	8012198 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012188:	4b54      	ldr	r3, [pc, #336]	@ (80122dc <xQueueSemaphoreTake+0x21c>)
 801218a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801218e:	601a      	str	r2, [r3, #0]
 8012190:	f3bf 8f4f 	dsb	sy
 8012194:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012198:	f001 fbf0 	bl	801397c <vPortExitCritical>
				return pdPASS;
 801219c:	2301      	movs	r3, #1
 801219e:	e098      	b.n	80122d2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d112      	bne.n	80121cc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80121a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00b      	beq.n	80121c4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80121ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121b0:	f383 8811 	msr	BASEPRI, r3
 80121b4:	f3bf 8f6f 	isb	sy
 80121b8:	f3bf 8f4f 	dsb	sy
 80121bc:	617b      	str	r3, [r7, #20]
}
 80121be:	bf00      	nop
 80121c0:	bf00      	nop
 80121c2:	e7fd      	b.n	80121c0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80121c4:	f001 fbda 	bl	801397c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80121c8:	2300      	movs	r3, #0
 80121ca:	e082      	b.n	80122d2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80121cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d106      	bne.n	80121e0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80121d2:	f107 030c 	add.w	r3, r7, #12
 80121d6:	4618      	mov	r0, r3
 80121d8:	f000 ff08 	bl	8012fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80121dc:	2301      	movs	r3, #1
 80121de:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80121e0:	f001 fbcc 	bl	801397c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80121e4:	f000 fcb6 	bl	8012b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80121e8:	f001 fb96 	bl	8013918 <vPortEnterCritical>
 80121ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80121f2:	b25b      	sxtb	r3, r3
 80121f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121f8:	d103      	bne.n	8012202 <xQueueSemaphoreTake+0x142>
 80121fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121fc:	2200      	movs	r2, #0
 80121fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012208:	b25b      	sxtb	r3, r3
 801220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801220e:	d103      	bne.n	8012218 <xQueueSemaphoreTake+0x158>
 8012210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012212:	2200      	movs	r2, #0
 8012214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012218:	f001 fbb0 	bl	801397c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801221c:	463a      	mov	r2, r7
 801221e:	f107 030c 	add.w	r3, r7, #12
 8012222:	4611      	mov	r1, r2
 8012224:	4618      	mov	r0, r3
 8012226:	f000 fef7 	bl	8013018 <xTaskCheckForTimeOut>
 801222a:	4603      	mov	r3, r0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d132      	bne.n	8012296 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012230:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012232:	f000 f9f0 	bl	8012616 <prvIsQueueEmpty>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d026      	beq.n	801228a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801223c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d109      	bne.n	8012258 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012244:	f001 fb68 	bl	8013918 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	4618      	mov	r0, r3
 801224e:	f001 f827 	bl	80132a0 <xTaskPriorityInherit>
 8012252:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012254:	f001 fb92 	bl	801397c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801225a:	3324      	adds	r3, #36	@ 0x24
 801225c:	683a      	ldr	r2, [r7, #0]
 801225e:	4611      	mov	r1, r2
 8012260:	4618      	mov	r0, r3
 8012262:	f000 fe39 	bl	8012ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012266:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012268:	f000 f983 	bl	8012572 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801226c:	f000 fc80 	bl	8012b70 <xTaskResumeAll>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	f47f af67 	bne.w	8012146 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012278:	4b18      	ldr	r3, [pc, #96]	@ (80122dc <xQueueSemaphoreTake+0x21c>)
 801227a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801227e:	601a      	str	r2, [r3, #0]
 8012280:	f3bf 8f4f 	dsb	sy
 8012284:	f3bf 8f6f 	isb	sy
 8012288:	e75d      	b.n	8012146 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801228a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801228c:	f000 f971 	bl	8012572 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012290:	f000 fc6e 	bl	8012b70 <xTaskResumeAll>
 8012294:	e757      	b.n	8012146 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012296:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012298:	f000 f96b 	bl	8012572 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801229c:	f000 fc68 	bl	8012b70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122a2:	f000 f9b8 	bl	8012616 <prvIsQueueEmpty>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f43f af4c 	beq.w	8012146 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80122ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00d      	beq.n	80122d0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80122b4:	f001 fb30 	bl	8013918 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80122b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122ba:	f000 f8b2 	bl	8012422 <prvGetDisinheritPriorityAfterTimeout>
 80122be:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80122c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122c2:	689b      	ldr	r3, [r3, #8]
 80122c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80122c6:	4618      	mov	r0, r3
 80122c8:	f001 f8e8 	bl	801349c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80122cc:	f001 fb56 	bl	801397c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3738      	adds	r7, #56	@ 0x38
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	e000ed04 	.word	0xe000ed04

080122e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b08e      	sub	sp, #56	@ 0x38
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80122f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d10b      	bne.n	801230e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80122f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122fa:	f383 8811 	msr	BASEPRI, r3
 80122fe:	f3bf 8f6f 	isb	sy
 8012302:	f3bf 8f4f 	dsb	sy
 8012306:	623b      	str	r3, [r7, #32]
}
 8012308:	bf00      	nop
 801230a:	bf00      	nop
 801230c:	e7fd      	b.n	801230a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d103      	bne.n	801231c <xQueueReceiveFromISR+0x3c>
 8012314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <xQueueReceiveFromISR+0x40>
 801231c:	2301      	movs	r3, #1
 801231e:	e000      	b.n	8012322 <xQueueReceiveFromISR+0x42>
 8012320:	2300      	movs	r3, #0
 8012322:	2b00      	cmp	r3, #0
 8012324:	d10b      	bne.n	801233e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8012326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801232a:	f383 8811 	msr	BASEPRI, r3
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	f3bf 8f4f 	dsb	sy
 8012336:	61fb      	str	r3, [r7, #28]
}
 8012338:	bf00      	nop
 801233a:	bf00      	nop
 801233c:	e7fd      	b.n	801233a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801233e:	f001 fbcb 	bl	8013ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8012342:	f3ef 8211 	mrs	r2, BASEPRI
 8012346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801234a:	f383 8811 	msr	BASEPRI, r3
 801234e:	f3bf 8f6f 	isb	sy
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	61ba      	str	r2, [r7, #24]
 8012358:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801235a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801235c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012362:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012366:	2b00      	cmp	r3, #0
 8012368:	d02f      	beq.n	80123ca <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801236c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012374:	68b9      	ldr	r1, [r7, #8]
 8012376:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012378:	f000 f8d5 	bl	8012526 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801237e:	1e5a      	subs	r2, r3, #1
 8012380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012382:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012384:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801238c:	d112      	bne.n	80123b4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801238e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d016      	beq.n	80123c4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012398:	3310      	adds	r3, #16
 801239a:	4618      	mov	r0, r3
 801239c:	f000 fdc2 	bl	8012f24 <xTaskRemoveFromEventList>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d00e      	beq.n	80123c4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d00b      	beq.n	80123c4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2201      	movs	r2, #1
 80123b0:	601a      	str	r2, [r3, #0]
 80123b2:	e007      	b.n	80123c4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80123b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123b8:	3301      	adds	r3, #1
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	b25a      	sxtb	r2, r3
 80123be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80123c4:	2301      	movs	r3, #1
 80123c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80123c8:	e001      	b.n	80123ce <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80123ca:	2300      	movs	r3, #0
 80123cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80123ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	f383 8811 	msr	BASEPRI, r3
}
 80123d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80123da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3738      	adds	r7, #56	@ 0x38
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d10b      	bne.n	801240e <vQueueDelete+0x2a>
	__asm volatile
 80123f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123fa:	f383 8811 	msr	BASEPRI, r3
 80123fe:	f3bf 8f6f 	isb	sy
 8012402:	f3bf 8f4f 	dsb	sy
 8012406:	60bb      	str	r3, [r7, #8]
}
 8012408:	bf00      	nop
 801240a:	bf00      	nop
 801240c:	e7fd      	b.n	801240a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801240e:	68f8      	ldr	r0, [r7, #12]
 8012410:	f000 f930 	bl	8012674 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f001 fc6f 	bl	8013cf8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801241a:	bf00      	nop
 801241c:	3710      	adds	r7, #16
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}

08012422 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012422:	b480      	push	{r7}
 8012424:	b085      	sub	sp, #20
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801242e:	2b00      	cmp	r3, #0
 8012430:	d006      	beq.n	8012440 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	f1c3 0307 	rsb	r3, r3, #7
 801243c:	60fb      	str	r3, [r7, #12]
 801243e:	e001      	b.n	8012444 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012440:	2300      	movs	r3, #0
 8012442:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012444:	68fb      	ldr	r3, [r7, #12]
	}
 8012446:	4618      	mov	r0, r3
 8012448:	3714      	adds	r7, #20
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr

08012452 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012452:	b580      	push	{r7, lr}
 8012454:	b086      	sub	sp, #24
 8012456:	af00      	add	r7, sp, #0
 8012458:	60f8      	str	r0, [r7, #12]
 801245a:	60b9      	str	r1, [r7, #8]
 801245c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801245e:	2300      	movs	r3, #0
 8012460:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012466:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801246c:	2b00      	cmp	r3, #0
 801246e:	d10d      	bne.n	801248c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d14d      	bne.n	8012514 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	689b      	ldr	r3, [r3, #8]
 801247c:	4618      	mov	r0, r3
 801247e:	f000 ff85 	bl	801338c <xTaskPriorityDisinherit>
 8012482:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2200      	movs	r2, #0
 8012488:	609a      	str	r2, [r3, #8]
 801248a:	e043      	b.n	8012514 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d119      	bne.n	80124c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	6858      	ldr	r0, [r3, #4]
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801249a:	461a      	mov	r2, r3
 801249c:	68b9      	ldr	r1, [r7, #8]
 801249e:	f002 fe7e 	bl	801519e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	685a      	ldr	r2, [r3, #4]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124aa:	441a      	add	r2, r3
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	685a      	ldr	r2, [r3, #4]
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	689b      	ldr	r3, [r3, #8]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d32b      	bcc.n	8012514 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681a      	ldr	r2, [r3, #0]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	605a      	str	r2, [r3, #4]
 80124c4:	e026      	b.n	8012514 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	68d8      	ldr	r0, [r3, #12]
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124ce:	461a      	mov	r2, r3
 80124d0:	68b9      	ldr	r1, [r7, #8]
 80124d2:	f002 fe64 	bl	801519e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	68da      	ldr	r2, [r3, #12]
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124de:	425b      	negs	r3, r3
 80124e0:	441a      	add	r2, r3
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	68da      	ldr	r2, [r3, #12]
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d207      	bcs.n	8012502 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	689a      	ldr	r2, [r3, #8]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124fa:	425b      	negs	r3, r3
 80124fc:	441a      	add	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2b02      	cmp	r3, #2
 8012506:	d105      	bne.n	8012514 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d002      	beq.n	8012514 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	3b01      	subs	r3, #1
 8012512:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	1c5a      	adds	r2, r3, #1
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801251c:	697b      	ldr	r3, [r7, #20]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3718      	adds	r7, #24
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b082      	sub	sp, #8
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
 801252e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012534:	2b00      	cmp	r3, #0
 8012536:	d018      	beq.n	801256a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	68da      	ldr	r2, [r3, #12]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012540:	441a      	add	r2, r3
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	68da      	ldr	r2, [r3, #12]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	689b      	ldr	r3, [r3, #8]
 801254e:	429a      	cmp	r2, r3
 8012550:	d303      	bcc.n	801255a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	68d9      	ldr	r1, [r3, #12]
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012562:	461a      	mov	r2, r3
 8012564:	6838      	ldr	r0, [r7, #0]
 8012566:	f002 fe1a 	bl	801519e <memcpy>
	}
}
 801256a:	bf00      	nop
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b084      	sub	sp, #16
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801257a:	f001 f9cd 	bl	8013918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012584:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012586:	e011      	b.n	80125ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801258c:	2b00      	cmp	r3, #0
 801258e:	d012      	beq.n	80125b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	3324      	adds	r3, #36	@ 0x24
 8012594:	4618      	mov	r0, r3
 8012596:	f000 fcc5 	bl	8012f24 <xTaskRemoveFromEventList>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	d001      	beq.n	80125a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80125a0:	f000 fd9e 	bl	80130e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80125a4:	7bfb      	ldrb	r3, [r7, #15]
 80125a6:	3b01      	subs	r3, #1
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80125ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	dce9      	bgt.n	8012588 <prvUnlockQueue+0x16>
 80125b4:	e000      	b.n	80125b8 <prvUnlockQueue+0x46>
					break;
 80125b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	22ff      	movs	r2, #255	@ 0xff
 80125bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80125c0:	f001 f9dc 	bl	801397c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80125c4:	f001 f9a8 	bl	8013918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80125ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80125d0:	e011      	b.n	80125f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	691b      	ldr	r3, [r3, #16]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d012      	beq.n	8012600 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	3310      	adds	r3, #16
 80125de:	4618      	mov	r0, r3
 80125e0:	f000 fca0 	bl	8012f24 <xTaskRemoveFromEventList>
 80125e4:	4603      	mov	r3, r0
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d001      	beq.n	80125ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80125ea:	f000 fd79 	bl	80130e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80125ee:	7bbb      	ldrb	r3, [r7, #14]
 80125f0:	3b01      	subs	r3, #1
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80125f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	dce9      	bgt.n	80125d2 <prvUnlockQueue+0x60>
 80125fe:	e000      	b.n	8012602 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012600:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	22ff      	movs	r2, #255	@ 0xff
 8012606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801260a:	f001 f9b7 	bl	801397c <vPortExitCritical>
}
 801260e:	bf00      	nop
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012616:	b580      	push	{r7, lr}
 8012618:	b084      	sub	sp, #16
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801261e:	f001 f97b 	bl	8013918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012626:	2b00      	cmp	r3, #0
 8012628:	d102      	bne.n	8012630 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801262a:	2301      	movs	r3, #1
 801262c:	60fb      	str	r3, [r7, #12]
 801262e:	e001      	b.n	8012634 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012630:	2300      	movs	r3, #0
 8012632:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012634:	f001 f9a2 	bl	801397c <vPortExitCritical>

	return xReturn;
 8012638:	68fb      	ldr	r3, [r7, #12]
}
 801263a:	4618      	mov	r0, r3
 801263c:	3710      	adds	r7, #16
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012642:	b580      	push	{r7, lr}
 8012644:	b084      	sub	sp, #16
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801264a:	f001 f965 	bl	8013918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012656:	429a      	cmp	r2, r3
 8012658:	d102      	bne.n	8012660 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801265a:	2301      	movs	r3, #1
 801265c:	60fb      	str	r3, [r7, #12]
 801265e:	e001      	b.n	8012664 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012660:	2300      	movs	r3, #0
 8012662:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012664:	f001 f98a 	bl	801397c <vPortExitCritical>

	return xReturn;
 8012668:	68fb      	ldr	r3, [r7, #12]
}
 801266a:	4618      	mov	r0, r3
 801266c:	3710      	adds	r7, #16
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
	...

08012674 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012674:	b480      	push	{r7}
 8012676:	b085      	sub	sp, #20
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801267c:	2300      	movs	r3, #0
 801267e:	60fb      	str	r3, [r7, #12]
 8012680:	e016      	b.n	80126b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012682:	4a10      	ldr	r2, [pc, #64]	@ (80126c4 <vQueueUnregisterQueue+0x50>)
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	00db      	lsls	r3, r3, #3
 8012688:	4413      	add	r3, r2
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	429a      	cmp	r2, r3
 8012690:	d10b      	bne.n	80126aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012692:	4a0c      	ldr	r2, [pc, #48]	@ (80126c4 <vQueueUnregisterQueue+0x50>)
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2100      	movs	r1, #0
 8012698:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801269c:	4a09      	ldr	r2, [pc, #36]	@ (80126c4 <vQueueUnregisterQueue+0x50>)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	00db      	lsls	r3, r3, #3
 80126a2:	4413      	add	r3, r2
 80126a4:	2200      	movs	r2, #0
 80126a6:	605a      	str	r2, [r3, #4]
				break;
 80126a8:	e006      	b.n	80126b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	3301      	adds	r3, #1
 80126ae:	60fb      	str	r3, [r7, #12]
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2b07      	cmp	r3, #7
 80126b4:	d9e5      	bls.n	8012682 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80126b6:	bf00      	nop
 80126b8:	bf00      	nop
 80126ba:	3714      	adds	r7, #20
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr
 80126c4:	2000166c 	.word	0x2000166c

080126c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b08c      	sub	sp, #48	@ 0x30
 80126cc:	af04      	add	r7, sp, #16
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	603b      	str	r3, [r7, #0]
 80126d4:	4613      	mov	r3, r2
 80126d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80126d8:	88fb      	ldrh	r3, [r7, #6]
 80126da:	009b      	lsls	r3, r3, #2
 80126dc:	4618      	mov	r0, r3
 80126de:	f001 fa3d 	bl	8013b5c <pvPortMalloc>
 80126e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d00e      	beq.n	8012708 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80126ea:	2054      	movs	r0, #84	@ 0x54
 80126ec:	f001 fa36 	bl	8013b5c <pvPortMalloc>
 80126f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d003      	beq.n	8012700 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	697a      	ldr	r2, [r7, #20]
 80126fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80126fe:	e005      	b.n	801270c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012700:	6978      	ldr	r0, [r7, #20]
 8012702:	f001 faf9 	bl	8013cf8 <vPortFree>
 8012706:	e001      	b.n	801270c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012708:	2300      	movs	r3, #0
 801270a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d013      	beq.n	801273a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012712:	88fa      	ldrh	r2, [r7, #6]
 8012714:	2300      	movs	r3, #0
 8012716:	9303      	str	r3, [sp, #12]
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	9302      	str	r3, [sp, #8]
 801271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801271e:	9301      	str	r3, [sp, #4]
 8012720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012722:	9300      	str	r3, [sp, #0]
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	68b9      	ldr	r1, [r7, #8]
 8012728:	68f8      	ldr	r0, [r7, #12]
 801272a:	f000 f80e 	bl	801274a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801272e:	69f8      	ldr	r0, [r7, #28]
 8012730:	f000 f894 	bl	801285c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012734:	2301      	movs	r3, #1
 8012736:	61bb      	str	r3, [r7, #24]
 8012738:	e002      	b.n	8012740 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801273a:	f04f 33ff 	mov.w	r3, #4294967295
 801273e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012740:	69bb      	ldr	r3, [r7, #24]
	}
 8012742:	4618      	mov	r0, r3
 8012744:	3720      	adds	r7, #32
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801274a:	b580      	push	{r7, lr}
 801274c:	b088      	sub	sp, #32
 801274e:	af00      	add	r7, sp, #0
 8012750:	60f8      	str	r0, [r7, #12]
 8012752:	60b9      	str	r1, [r7, #8]
 8012754:	607a      	str	r2, [r7, #4]
 8012756:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801275a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012762:	3b01      	subs	r3, #1
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	4413      	add	r3, r2
 8012768:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801276a:	69bb      	ldr	r3, [r7, #24]
 801276c:	f023 0307 	bic.w	r3, r3, #7
 8012770:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	f003 0307 	and.w	r3, r3, #7
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00b      	beq.n	8012794 <prvInitialiseNewTask+0x4a>
	__asm volatile
 801277c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012780:	f383 8811 	msr	BASEPRI, r3
 8012784:	f3bf 8f6f 	isb	sy
 8012788:	f3bf 8f4f 	dsb	sy
 801278c:	617b      	str	r3, [r7, #20]
}
 801278e:	bf00      	nop
 8012790:	bf00      	nop
 8012792:	e7fd      	b.n	8012790 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d01f      	beq.n	80127da <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801279a:	2300      	movs	r3, #0
 801279c:	61fb      	str	r3, [r7, #28]
 801279e:	e012      	b.n	80127c6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80127a0:	68ba      	ldr	r2, [r7, #8]
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	4413      	add	r3, r2
 80127a6:	7819      	ldrb	r1, [r3, #0]
 80127a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	4413      	add	r3, r2
 80127ae:	3334      	adds	r3, #52	@ 0x34
 80127b0:	460a      	mov	r2, r1
 80127b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80127b4:	68ba      	ldr	r2, [r7, #8]
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	4413      	add	r3, r2
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d006      	beq.n	80127ce <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	3301      	adds	r3, #1
 80127c4:	61fb      	str	r3, [r7, #28]
 80127c6:	69fb      	ldr	r3, [r7, #28]
 80127c8:	2b0f      	cmp	r3, #15
 80127ca:	d9e9      	bls.n	80127a0 <prvInitialiseNewTask+0x56>
 80127cc:	e000      	b.n	80127d0 <prvInitialiseNewTask+0x86>
			{
				break;
 80127ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80127d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127d2:	2200      	movs	r2, #0
 80127d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80127d8:	e003      	b.n	80127e2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80127da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127dc:	2200      	movs	r2, #0
 80127de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80127e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e4:	2b06      	cmp	r3, #6
 80127e6:	d901      	bls.n	80127ec <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80127e8:	2306      	movs	r3, #6
 80127ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80127ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80127f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127f6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80127f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127fa:	2200      	movs	r2, #0
 80127fc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80127fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012800:	3304      	adds	r3, #4
 8012802:	4618      	mov	r0, r3
 8012804:	f7ff f943 	bl	8011a8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801280a:	3318      	adds	r3, #24
 801280c:	4618      	mov	r0, r3
 801280e:	f7ff f93e 	bl	8011a8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012816:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801281a:	f1c3 0207 	rsb	r2, r3, #7
 801281e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012820:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012826:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801282a:	2200      	movs	r2, #0
 801282c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012830:	2200      	movs	r2, #0
 8012832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012836:	683a      	ldr	r2, [r7, #0]
 8012838:	68f9      	ldr	r1, [r7, #12]
 801283a:	69b8      	ldr	r0, [r7, #24]
 801283c:	f000 ff38 	bl	80136b0 <pxPortInitialiseStack>
 8012840:	4602      	mov	r2, r0
 8012842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012844:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012848:	2b00      	cmp	r3, #0
 801284a:	d002      	beq.n	8012852 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801284e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012852:	bf00      	nop
 8012854:	3720      	adds	r7, #32
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
	...

0801285c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012864:	f001 f858 	bl	8013918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012868:	4b2a      	ldr	r3, [pc, #168]	@ (8012914 <prvAddNewTaskToReadyList+0xb8>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	3301      	adds	r3, #1
 801286e:	4a29      	ldr	r2, [pc, #164]	@ (8012914 <prvAddNewTaskToReadyList+0xb8>)
 8012870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012872:	4b29      	ldr	r3, [pc, #164]	@ (8012918 <prvAddNewTaskToReadyList+0xbc>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d109      	bne.n	801288e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801287a:	4a27      	ldr	r2, [pc, #156]	@ (8012918 <prvAddNewTaskToReadyList+0xbc>)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012880:	4b24      	ldr	r3, [pc, #144]	@ (8012914 <prvAddNewTaskToReadyList+0xb8>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b01      	cmp	r3, #1
 8012886:	d110      	bne.n	80128aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012888:	f000 fc4e 	bl	8013128 <prvInitialiseTaskLists>
 801288c:	e00d      	b.n	80128aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801288e:	4b23      	ldr	r3, [pc, #140]	@ (801291c <prvAddNewTaskToReadyList+0xc0>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d109      	bne.n	80128aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012896:	4b20      	ldr	r3, [pc, #128]	@ (8012918 <prvAddNewTaskToReadyList+0xbc>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d802      	bhi.n	80128aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80128a4:	4a1c      	ldr	r2, [pc, #112]	@ (8012918 <prvAddNewTaskToReadyList+0xbc>)
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80128aa:	4b1d      	ldr	r3, [pc, #116]	@ (8012920 <prvAddNewTaskToReadyList+0xc4>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	3301      	adds	r3, #1
 80128b0:	4a1b      	ldr	r2, [pc, #108]	@ (8012920 <prvAddNewTaskToReadyList+0xc4>)
 80128b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128b8:	2201      	movs	r2, #1
 80128ba:	409a      	lsls	r2, r3
 80128bc:	4b19      	ldr	r3, [pc, #100]	@ (8012924 <prvAddNewTaskToReadyList+0xc8>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4313      	orrs	r3, r2
 80128c2:	4a18      	ldr	r2, [pc, #96]	@ (8012924 <prvAddNewTaskToReadyList+0xc8>)
 80128c4:	6013      	str	r3, [r2, #0]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128ca:	4613      	mov	r3, r2
 80128cc:	009b      	lsls	r3, r3, #2
 80128ce:	4413      	add	r3, r2
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	4a15      	ldr	r2, [pc, #84]	@ (8012928 <prvAddNewTaskToReadyList+0xcc>)
 80128d4:	441a      	add	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	3304      	adds	r3, #4
 80128da:	4619      	mov	r1, r3
 80128dc:	4610      	mov	r0, r2
 80128de:	f7ff f8e3 	bl	8011aa8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80128e2:	f001 f84b 	bl	801397c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80128e6:	4b0d      	ldr	r3, [pc, #52]	@ (801291c <prvAddNewTaskToReadyList+0xc0>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00e      	beq.n	801290c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80128ee:	4b0a      	ldr	r3, [pc, #40]	@ (8012918 <prvAddNewTaskToReadyList+0xbc>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d207      	bcs.n	801290c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80128fc:	4b0b      	ldr	r3, [pc, #44]	@ (801292c <prvAddNewTaskToReadyList+0xd0>)
 80128fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012902:	601a      	str	r2, [r3, #0]
 8012904:	f3bf 8f4f 	dsb	sy
 8012908:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801290c:	bf00      	nop
 801290e:	3708      	adds	r7, #8
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	200017ac 	.word	0x200017ac
 8012918:	200016ac 	.word	0x200016ac
 801291c:	200017b8 	.word	0x200017b8
 8012920:	200017c8 	.word	0x200017c8
 8012924:	200017b4 	.word	0x200017b4
 8012928:	200016b0 	.word	0x200016b0
 801292c:	e000ed04 	.word	0xe000ed04

08012930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012938:	2300      	movs	r3, #0
 801293a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d018      	beq.n	8012974 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012942:	4b14      	ldr	r3, [pc, #80]	@ (8012994 <vTaskDelay+0x64>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d00b      	beq.n	8012962 <vTaskDelay+0x32>
	__asm volatile
 801294a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801294e:	f383 8811 	msr	BASEPRI, r3
 8012952:	f3bf 8f6f 	isb	sy
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	60bb      	str	r3, [r7, #8]
}
 801295c:	bf00      	nop
 801295e:	bf00      	nop
 8012960:	e7fd      	b.n	801295e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012962:	f000 f8f7 	bl	8012b54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012966:	2100      	movs	r1, #0
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 fe3b 	bl	80135e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801296e:	f000 f8ff 	bl	8012b70 <xTaskResumeAll>
 8012972:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d107      	bne.n	801298a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801297a:	4b07      	ldr	r3, [pc, #28]	@ (8012998 <vTaskDelay+0x68>)
 801297c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012980:	601a      	str	r2, [r3, #0]
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801298a:	bf00      	nop
 801298c:	3710      	adds	r7, #16
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}
 8012992:	bf00      	nop
 8012994:	200017d4 	.word	0x200017d4
 8012998:	e000ed04 	.word	0xe000ed04

0801299c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801299c:	b580      	push	{r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80129a4:	f000 ffb8 	bl	8013918 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d102      	bne.n	80129b4 <vTaskSuspend+0x18>
 80129ae:	4b3d      	ldr	r3, [pc, #244]	@ (8012aa4 <vTaskSuspend+0x108>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	e000      	b.n	80129b6 <vTaskSuspend+0x1a>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	3304      	adds	r3, #4
 80129bc:	4618      	mov	r0, r3
 80129be:	f7ff f8d0 	bl	8011b62 <uxListRemove>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d115      	bne.n	80129f4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129cc:	4936      	ldr	r1, [pc, #216]	@ (8012aa8 <vTaskSuspend+0x10c>)
 80129ce:	4613      	mov	r3, r2
 80129d0:	009b      	lsls	r3, r3, #2
 80129d2:	4413      	add	r3, r2
 80129d4:	009b      	lsls	r3, r3, #2
 80129d6:	440b      	add	r3, r1
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d10a      	bne.n	80129f4 <vTaskSuspend+0x58>
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129e2:	2201      	movs	r2, #1
 80129e4:	fa02 f303 	lsl.w	r3, r2, r3
 80129e8:	43da      	mvns	r2, r3
 80129ea:	4b30      	ldr	r3, [pc, #192]	@ (8012aac <vTaskSuspend+0x110>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	4013      	ands	r3, r2
 80129f0:	4a2e      	ldr	r2, [pc, #184]	@ (8012aac <vTaskSuspend+0x110>)
 80129f2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d004      	beq.n	8012a06 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	3318      	adds	r3, #24
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7ff f8ae 	bl	8011b62 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	3304      	adds	r3, #4
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	4828      	ldr	r0, [pc, #160]	@ (8012ab0 <vTaskSuspend+0x114>)
 8012a0e:	f7ff f84b 	bl	8011aa8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d103      	bne.n	8012a26 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2200      	movs	r2, #0
 8012a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012a26:	f000 ffa9 	bl	801397c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012a2a:	4b22      	ldr	r3, [pc, #136]	@ (8012ab4 <vTaskSuspend+0x118>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d005      	beq.n	8012a3e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012a32:	f000 ff71 	bl	8013918 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012a36:	f000 fbf5 	bl	8013224 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012a3a:	f000 ff9f 	bl	801397c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012a3e:	4b19      	ldr	r3, [pc, #100]	@ (8012aa4 <vTaskSuspend+0x108>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	68fa      	ldr	r2, [r7, #12]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d128      	bne.n	8012a9a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8012a48:	4b1a      	ldr	r3, [pc, #104]	@ (8012ab4 <vTaskSuspend+0x118>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d018      	beq.n	8012a82 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012a50:	4b19      	ldr	r3, [pc, #100]	@ (8012ab8 <vTaskSuspend+0x11c>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d00b      	beq.n	8012a70 <vTaskSuspend+0xd4>
	__asm volatile
 8012a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a5c:	f383 8811 	msr	BASEPRI, r3
 8012a60:	f3bf 8f6f 	isb	sy
 8012a64:	f3bf 8f4f 	dsb	sy
 8012a68:	60bb      	str	r3, [r7, #8]
}
 8012a6a:	bf00      	nop
 8012a6c:	bf00      	nop
 8012a6e:	e7fd      	b.n	8012a6c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8012a70:	4b12      	ldr	r3, [pc, #72]	@ (8012abc <vTaskSuspend+0x120>)
 8012a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a76:	601a      	str	r2, [r3, #0]
 8012a78:	f3bf 8f4f 	dsb	sy
 8012a7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a80:	e00b      	b.n	8012a9a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012a82:	4b0b      	ldr	r3, [pc, #44]	@ (8012ab0 <vTaskSuspend+0x114>)
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	4b0e      	ldr	r3, [pc, #56]	@ (8012ac0 <vTaskSuspend+0x124>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d103      	bne.n	8012a96 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8012a8e:	4b05      	ldr	r3, [pc, #20]	@ (8012aa4 <vTaskSuspend+0x108>)
 8012a90:	2200      	movs	r2, #0
 8012a92:	601a      	str	r2, [r3, #0]
	}
 8012a94:	e001      	b.n	8012a9a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8012a96:	f000 f9c3 	bl	8012e20 <vTaskSwitchContext>
	}
 8012a9a:	bf00      	nop
 8012a9c:	3710      	adds	r7, #16
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	200016ac 	.word	0x200016ac
 8012aa8:	200016b0 	.word	0x200016b0
 8012aac:	200017b4 	.word	0x200017b4
 8012ab0:	20001798 	.word	0x20001798
 8012ab4:	200017b8 	.word	0x200017b8
 8012ab8:	200017d4 	.word	0x200017d4
 8012abc:	e000ed04 	.word	0xe000ed04
 8012ac0:	200017ac 	.word	0x200017ac

08012ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8012aca:	4b1c      	ldr	r3, [pc, #112]	@ (8012b3c <vTaskStartScheduler+0x78>)
 8012acc:	9301      	str	r3, [sp, #4]
 8012ace:	2300      	movs	r3, #0
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	2280      	movs	r2, #128	@ 0x80
 8012ad6:	491a      	ldr	r1, [pc, #104]	@ (8012b40 <vTaskStartScheduler+0x7c>)
 8012ad8:	481a      	ldr	r0, [pc, #104]	@ (8012b44 <vTaskStartScheduler+0x80>)
 8012ada:	f7ff fdf5 	bl	80126c8 <xTaskCreate>
 8012ade:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d116      	bne.n	8012b14 <vTaskStartScheduler+0x50>
	__asm volatile
 8012ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aea:	f383 8811 	msr	BASEPRI, r3
 8012aee:	f3bf 8f6f 	isb	sy
 8012af2:	f3bf 8f4f 	dsb	sy
 8012af6:	60bb      	str	r3, [r7, #8]
}
 8012af8:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012afa:	4b13      	ldr	r3, [pc, #76]	@ (8012b48 <vTaskStartScheduler+0x84>)
 8012afc:	f04f 32ff 	mov.w	r2, #4294967295
 8012b00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012b02:	4b12      	ldr	r3, [pc, #72]	@ (8012b4c <vTaskStartScheduler+0x88>)
 8012b04:	2201      	movs	r2, #1
 8012b06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012b08:	4b11      	ldr	r3, [pc, #68]	@ (8012b50 <vTaskStartScheduler+0x8c>)
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012b0e:	f000 fe5f 	bl	80137d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012b12:	e00f      	b.n	8012b34 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b1a:	d10b      	bne.n	8012b34 <vTaskStartScheduler+0x70>
	__asm volatile
 8012b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b20:	f383 8811 	msr	BASEPRI, r3
 8012b24:	f3bf 8f6f 	isb	sy
 8012b28:	f3bf 8f4f 	dsb	sy
 8012b2c:	607b      	str	r3, [r7, #4]
}
 8012b2e:	bf00      	nop
 8012b30:	bf00      	nop
 8012b32:	e7fd      	b.n	8012b30 <vTaskStartScheduler+0x6c>
}
 8012b34:	bf00      	nop
 8012b36:	3710      	adds	r7, #16
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	200017d0 	.word	0x200017d0
 8012b40:	08019600 	.word	0x08019600
 8012b44:	080130f9 	.word	0x080130f9
 8012b48:	200017cc 	.word	0x200017cc
 8012b4c:	200017b8 	.word	0x200017b8
 8012b50:	200017b0 	.word	0x200017b0

08012b54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012b54:	b480      	push	{r7}
 8012b56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012b58:	4b04      	ldr	r3, [pc, #16]	@ (8012b6c <vTaskSuspendAll+0x18>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	4a03      	ldr	r2, [pc, #12]	@ (8012b6c <vTaskSuspendAll+0x18>)
 8012b60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012b62:	bf00      	nop
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr
 8012b6c:	200017d4 	.word	0x200017d4

08012b70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012b7e:	4b42      	ldr	r3, [pc, #264]	@ (8012c88 <xTaskResumeAll+0x118>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d10b      	bne.n	8012b9e <xTaskResumeAll+0x2e>
	__asm volatile
 8012b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b8a:	f383 8811 	msr	BASEPRI, r3
 8012b8e:	f3bf 8f6f 	isb	sy
 8012b92:	f3bf 8f4f 	dsb	sy
 8012b96:	603b      	str	r3, [r7, #0]
}
 8012b98:	bf00      	nop
 8012b9a:	bf00      	nop
 8012b9c:	e7fd      	b.n	8012b9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012b9e:	f000 febb 	bl	8013918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012ba2:	4b39      	ldr	r3, [pc, #228]	@ (8012c88 <xTaskResumeAll+0x118>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	4a37      	ldr	r2, [pc, #220]	@ (8012c88 <xTaskResumeAll+0x118>)
 8012baa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bac:	4b36      	ldr	r3, [pc, #216]	@ (8012c88 <xTaskResumeAll+0x118>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d161      	bne.n	8012c78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012bb4:	4b35      	ldr	r3, [pc, #212]	@ (8012c8c <xTaskResumeAll+0x11c>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d05d      	beq.n	8012c78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012bbc:	e02e      	b.n	8012c1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bbe:	4b34      	ldr	r3, [pc, #208]	@ (8012c90 <xTaskResumeAll+0x120>)
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	3318      	adds	r3, #24
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7fe ffc9 	bl	8011b62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	3304      	adds	r3, #4
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fe ffc4 	bl	8011b62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bde:	2201      	movs	r2, #1
 8012be0:	409a      	lsls	r2, r3
 8012be2:	4b2c      	ldr	r3, [pc, #176]	@ (8012c94 <xTaskResumeAll+0x124>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	4313      	orrs	r3, r2
 8012be8:	4a2a      	ldr	r2, [pc, #168]	@ (8012c94 <xTaskResumeAll+0x124>)
 8012bea:	6013      	str	r3, [r2, #0]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	009b      	lsls	r3, r3, #2
 8012bf4:	4413      	add	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	4a27      	ldr	r2, [pc, #156]	@ (8012c98 <xTaskResumeAll+0x128>)
 8012bfa:	441a      	add	r2, r3
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	3304      	adds	r3, #4
 8012c00:	4619      	mov	r1, r3
 8012c02:	4610      	mov	r0, r2
 8012c04:	f7fe ff50 	bl	8011aa8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c0c:	4b23      	ldr	r3, [pc, #140]	@ (8012c9c <xTaskResumeAll+0x12c>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d302      	bcc.n	8012c1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012c16:	4b22      	ldr	r3, [pc, #136]	@ (8012ca0 <xTaskResumeAll+0x130>)
 8012c18:	2201      	movs	r2, #1
 8012c1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8012c90 <xTaskResumeAll+0x120>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d1cc      	bne.n	8012bbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d001      	beq.n	8012c2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012c2a:	f000 fafb 	bl	8013224 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8012ca4 <xTaskResumeAll+0x134>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d010      	beq.n	8012c5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012c3a:	f000 f837 	bl	8012cac <xTaskIncrementTick>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d002      	beq.n	8012c4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012c44:	4b16      	ldr	r3, [pc, #88]	@ (8012ca0 <xTaskResumeAll+0x130>)
 8012c46:	2201      	movs	r2, #1
 8012c48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	3b01      	subs	r3, #1
 8012c4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d1f1      	bne.n	8012c3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012c56:	4b13      	ldr	r3, [pc, #76]	@ (8012ca4 <xTaskResumeAll+0x134>)
 8012c58:	2200      	movs	r2, #0
 8012c5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012c5c:	4b10      	ldr	r3, [pc, #64]	@ (8012ca0 <xTaskResumeAll+0x130>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d009      	beq.n	8012c78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012c64:	2301      	movs	r3, #1
 8012c66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012c68:	4b0f      	ldr	r3, [pc, #60]	@ (8012ca8 <xTaskResumeAll+0x138>)
 8012c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c6e:	601a      	str	r2, [r3, #0]
 8012c70:	f3bf 8f4f 	dsb	sy
 8012c74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012c78:	f000 fe80 	bl	801397c <vPortExitCritical>

	return xAlreadyYielded;
 8012c7c:	68bb      	ldr	r3, [r7, #8]
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3710      	adds	r7, #16
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	200017d4 	.word	0x200017d4
 8012c8c:	200017ac 	.word	0x200017ac
 8012c90:	2000176c 	.word	0x2000176c
 8012c94:	200017b4 	.word	0x200017b4
 8012c98:	200016b0 	.word	0x200016b0
 8012c9c:	200016ac 	.word	0x200016ac
 8012ca0:	200017c0 	.word	0x200017c0
 8012ca4:	200017bc 	.word	0x200017bc
 8012ca8:	e000ed04 	.word	0xe000ed04

08012cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b086      	sub	sp, #24
 8012cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cb6:	4b4f      	ldr	r3, [pc, #316]	@ (8012df4 <xTaskIncrementTick+0x148>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	f040 808f 	bne.w	8012dde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8012df8 <xTaskIncrementTick+0x14c>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8012df8 <xTaskIncrementTick+0x14c>)
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d121      	bne.n	8012d18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012cd4:	4b49      	ldr	r3, [pc, #292]	@ (8012dfc <xTaskIncrementTick+0x150>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d00b      	beq.n	8012cf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8012cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ce2:	f383 8811 	msr	BASEPRI, r3
 8012ce6:	f3bf 8f6f 	isb	sy
 8012cea:	f3bf 8f4f 	dsb	sy
 8012cee:	603b      	str	r3, [r7, #0]
}
 8012cf0:	bf00      	nop
 8012cf2:	bf00      	nop
 8012cf4:	e7fd      	b.n	8012cf2 <xTaskIncrementTick+0x46>
 8012cf6:	4b41      	ldr	r3, [pc, #260]	@ (8012dfc <xTaskIncrementTick+0x150>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	60fb      	str	r3, [r7, #12]
 8012cfc:	4b40      	ldr	r3, [pc, #256]	@ (8012e00 <xTaskIncrementTick+0x154>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	4a3e      	ldr	r2, [pc, #248]	@ (8012dfc <xTaskIncrementTick+0x150>)
 8012d02:	6013      	str	r3, [r2, #0]
 8012d04:	4a3e      	ldr	r2, [pc, #248]	@ (8012e00 <xTaskIncrementTick+0x154>)
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	6013      	str	r3, [r2, #0]
 8012d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8012e04 <xTaskIncrementTick+0x158>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	3301      	adds	r3, #1
 8012d10:	4a3c      	ldr	r2, [pc, #240]	@ (8012e04 <xTaskIncrementTick+0x158>)
 8012d12:	6013      	str	r3, [r2, #0]
 8012d14:	f000 fa86 	bl	8013224 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012d18:	4b3b      	ldr	r3, [pc, #236]	@ (8012e08 <xTaskIncrementTick+0x15c>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	693a      	ldr	r2, [r7, #16]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d348      	bcc.n	8012db4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d22:	4b36      	ldr	r3, [pc, #216]	@ (8012dfc <xTaskIncrementTick+0x150>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d104      	bne.n	8012d36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d2c:	4b36      	ldr	r3, [pc, #216]	@ (8012e08 <xTaskIncrementTick+0x15c>)
 8012d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d32:	601a      	str	r2, [r3, #0]
					break;
 8012d34:	e03e      	b.n	8012db4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d36:	4b31      	ldr	r3, [pc, #196]	@ (8012dfc <xTaskIncrementTick+0x150>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	68db      	ldr	r3, [r3, #12]
 8012d3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012d46:	693a      	ldr	r2, [r7, #16]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d203      	bcs.n	8012d56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8012e08 <xTaskIncrementTick+0x15c>)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012d54:	e02e      	b.n	8012db4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	3304      	adds	r3, #4
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7fe ff01 	bl	8011b62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d004      	beq.n	8012d72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	3318      	adds	r3, #24
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7fe fef8 	bl	8011b62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d76:	2201      	movs	r2, #1
 8012d78:	409a      	lsls	r2, r3
 8012d7a:	4b24      	ldr	r3, [pc, #144]	@ (8012e0c <xTaskIncrementTick+0x160>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	4313      	orrs	r3, r2
 8012d80:	4a22      	ldr	r2, [pc, #136]	@ (8012e0c <xTaskIncrementTick+0x160>)
 8012d82:	6013      	str	r3, [r2, #0]
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d88:	4613      	mov	r3, r2
 8012d8a:	009b      	lsls	r3, r3, #2
 8012d8c:	4413      	add	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4a1f      	ldr	r2, [pc, #124]	@ (8012e10 <xTaskIncrementTick+0x164>)
 8012d92:	441a      	add	r2, r3
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	3304      	adds	r3, #4
 8012d98:	4619      	mov	r1, r3
 8012d9a:	4610      	mov	r0, r2
 8012d9c:	f7fe fe84 	bl	8011aa8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012da4:	4b1b      	ldr	r3, [pc, #108]	@ (8012e14 <xTaskIncrementTick+0x168>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d3b9      	bcc.n	8012d22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012dae:	2301      	movs	r3, #1
 8012db0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012db2:	e7b6      	b.n	8012d22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012db4:	4b17      	ldr	r3, [pc, #92]	@ (8012e14 <xTaskIncrementTick+0x168>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dba:	4915      	ldr	r1, [pc, #84]	@ (8012e10 <xTaskIncrementTick+0x164>)
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	4413      	add	r3, r2
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	440b      	add	r3, r1
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d901      	bls.n	8012dd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012dcc:	2301      	movs	r3, #1
 8012dce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012dd0:	4b11      	ldr	r3, [pc, #68]	@ (8012e18 <xTaskIncrementTick+0x16c>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d007      	beq.n	8012de8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012dd8:	2301      	movs	r3, #1
 8012dda:	617b      	str	r3, [r7, #20]
 8012ddc:	e004      	b.n	8012de8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012dde:	4b0f      	ldr	r3, [pc, #60]	@ (8012e1c <xTaskIncrementTick+0x170>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	3301      	adds	r3, #1
 8012de4:	4a0d      	ldr	r2, [pc, #52]	@ (8012e1c <xTaskIncrementTick+0x170>)
 8012de6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012de8:	697b      	ldr	r3, [r7, #20]
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3718      	adds	r7, #24
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	bf00      	nop
 8012df4:	200017d4 	.word	0x200017d4
 8012df8:	200017b0 	.word	0x200017b0
 8012dfc:	20001764 	.word	0x20001764
 8012e00:	20001768 	.word	0x20001768
 8012e04:	200017c4 	.word	0x200017c4
 8012e08:	200017cc 	.word	0x200017cc
 8012e0c:	200017b4 	.word	0x200017b4
 8012e10:	200016b0 	.word	0x200016b0
 8012e14:	200016ac 	.word	0x200016ac
 8012e18:	200017c0 	.word	0x200017c0
 8012e1c:	200017bc 	.word	0x200017bc

08012e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012e20:	b480      	push	{r7}
 8012e22:	b087      	sub	sp, #28
 8012e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012e26:	4b27      	ldr	r3, [pc, #156]	@ (8012ec4 <vTaskSwitchContext+0xa4>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d003      	beq.n	8012e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012e2e:	4b26      	ldr	r3, [pc, #152]	@ (8012ec8 <vTaskSwitchContext+0xa8>)
 8012e30:	2201      	movs	r2, #1
 8012e32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012e34:	e040      	b.n	8012eb8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012e36:	4b24      	ldr	r3, [pc, #144]	@ (8012ec8 <vTaskSwitchContext+0xa8>)
 8012e38:	2200      	movs	r2, #0
 8012e3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e3c:	4b23      	ldr	r3, [pc, #140]	@ (8012ecc <vTaskSwitchContext+0xac>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	fab3 f383 	clz	r3, r3
 8012e48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012e4a:	7afb      	ldrb	r3, [r7, #11]
 8012e4c:	f1c3 031f 	rsb	r3, r3, #31
 8012e50:	617b      	str	r3, [r7, #20]
 8012e52:	491f      	ldr	r1, [pc, #124]	@ (8012ed0 <vTaskSwitchContext+0xb0>)
 8012e54:	697a      	ldr	r2, [r7, #20]
 8012e56:	4613      	mov	r3, r2
 8012e58:	009b      	lsls	r3, r3, #2
 8012e5a:	4413      	add	r3, r2
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	440b      	add	r3, r1
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d10b      	bne.n	8012e7e <vTaskSwitchContext+0x5e>
	__asm volatile
 8012e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e6a:	f383 8811 	msr	BASEPRI, r3
 8012e6e:	f3bf 8f6f 	isb	sy
 8012e72:	f3bf 8f4f 	dsb	sy
 8012e76:	607b      	str	r3, [r7, #4]
}
 8012e78:	bf00      	nop
 8012e7a:	bf00      	nop
 8012e7c:	e7fd      	b.n	8012e7a <vTaskSwitchContext+0x5a>
 8012e7e:	697a      	ldr	r2, [r7, #20]
 8012e80:	4613      	mov	r3, r2
 8012e82:	009b      	lsls	r3, r3, #2
 8012e84:	4413      	add	r3, r2
 8012e86:	009b      	lsls	r3, r3, #2
 8012e88:	4a11      	ldr	r2, [pc, #68]	@ (8012ed0 <vTaskSwitchContext+0xb0>)
 8012e8a:	4413      	add	r3, r2
 8012e8c:	613b      	str	r3, [r7, #16]
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	685a      	ldr	r2, [r3, #4]
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	605a      	str	r2, [r3, #4]
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	685a      	ldr	r2, [r3, #4]
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	3308      	adds	r3, #8
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d104      	bne.n	8012eae <vTaskSwitchContext+0x8e>
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	685b      	ldr	r3, [r3, #4]
 8012ea8:	685a      	ldr	r2, [r3, #4]
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	605a      	str	r2, [r3, #4]
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	68db      	ldr	r3, [r3, #12]
 8012eb4:	4a07      	ldr	r2, [pc, #28]	@ (8012ed4 <vTaskSwitchContext+0xb4>)
 8012eb6:	6013      	str	r3, [r2, #0]
}
 8012eb8:	bf00      	nop
 8012eba:	371c      	adds	r7, #28
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr
 8012ec4:	200017d4 	.word	0x200017d4
 8012ec8:	200017c0 	.word	0x200017c0
 8012ecc:	200017b4 	.word	0x200017b4
 8012ed0:	200016b0 	.word	0x200016b0
 8012ed4:	200016ac 	.word	0x200016ac

08012ed8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b084      	sub	sp, #16
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d10b      	bne.n	8012f00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eec:	f383 8811 	msr	BASEPRI, r3
 8012ef0:	f3bf 8f6f 	isb	sy
 8012ef4:	f3bf 8f4f 	dsb	sy
 8012ef8:	60fb      	str	r3, [r7, #12]
}
 8012efa:	bf00      	nop
 8012efc:	bf00      	nop
 8012efe:	e7fd      	b.n	8012efc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012f00:	4b07      	ldr	r3, [pc, #28]	@ (8012f20 <vTaskPlaceOnEventList+0x48>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	3318      	adds	r3, #24
 8012f06:	4619      	mov	r1, r3
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7fe fdf1 	bl	8011af0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012f0e:	2101      	movs	r1, #1
 8012f10:	6838      	ldr	r0, [r7, #0]
 8012f12:	f000 fb67 	bl	80135e4 <prvAddCurrentTaskToDelayedList>
}
 8012f16:	bf00      	nop
 8012f18:	3710      	adds	r7, #16
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	200016ac 	.word	0x200016ac

08012f24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b086      	sub	sp, #24
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	68db      	ldr	r3, [r3, #12]
 8012f30:	68db      	ldr	r3, [r3, #12]
 8012f32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d10b      	bne.n	8012f52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f3e:	f383 8811 	msr	BASEPRI, r3
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	f3bf 8f4f 	dsb	sy
 8012f4a:	60fb      	str	r3, [r7, #12]
}
 8012f4c:	bf00      	nop
 8012f4e:	bf00      	nop
 8012f50:	e7fd      	b.n	8012f4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	3318      	adds	r3, #24
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7fe fe03 	bl	8011b62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8012fd4 <xTaskRemoveFromEventList+0xb0>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d11c      	bne.n	8012f9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	3304      	adds	r3, #4
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7fe fdfa 	bl	8011b62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f72:	2201      	movs	r2, #1
 8012f74:	409a      	lsls	r2, r3
 8012f76:	4b18      	ldr	r3, [pc, #96]	@ (8012fd8 <xTaskRemoveFromEventList+0xb4>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	4a16      	ldr	r2, [pc, #88]	@ (8012fd8 <xTaskRemoveFromEventList+0xb4>)
 8012f7e:	6013      	str	r3, [r2, #0]
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f84:	4613      	mov	r3, r2
 8012f86:	009b      	lsls	r3, r3, #2
 8012f88:	4413      	add	r3, r2
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	4a13      	ldr	r2, [pc, #76]	@ (8012fdc <xTaskRemoveFromEventList+0xb8>)
 8012f8e:	441a      	add	r2, r3
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	3304      	adds	r3, #4
 8012f94:	4619      	mov	r1, r3
 8012f96:	4610      	mov	r0, r2
 8012f98:	f7fe fd86 	bl	8011aa8 <vListInsertEnd>
 8012f9c:	e005      	b.n	8012faa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	3318      	adds	r3, #24
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	480e      	ldr	r0, [pc, #56]	@ (8012fe0 <xTaskRemoveFromEventList+0xbc>)
 8012fa6:	f7fe fd7f 	bl	8011aa8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fae:	4b0d      	ldr	r3, [pc, #52]	@ (8012fe4 <xTaskRemoveFromEventList+0xc0>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d905      	bls.n	8012fc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8012fe8 <xTaskRemoveFromEventList+0xc4>)
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	601a      	str	r2, [r3, #0]
 8012fc2:	e001      	b.n	8012fc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012fc8:	697b      	ldr	r3, [r7, #20]
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3718      	adds	r7, #24
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	200017d4 	.word	0x200017d4
 8012fd8:	200017b4 	.word	0x200017b4
 8012fdc:	200016b0 	.word	0x200016b0
 8012fe0:	2000176c 	.word	0x2000176c
 8012fe4:	200016ac 	.word	0x200016ac
 8012fe8:	200017c0 	.word	0x200017c0

08012fec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012ff4:	4b06      	ldr	r3, [pc, #24]	@ (8013010 <vTaskInternalSetTimeOutState+0x24>)
 8012ff6:	681a      	ldr	r2, [r3, #0]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012ffc:	4b05      	ldr	r3, [pc, #20]	@ (8013014 <vTaskInternalSetTimeOutState+0x28>)
 8012ffe:	681a      	ldr	r2, [r3, #0]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	605a      	str	r2, [r3, #4]
}
 8013004:	bf00      	nop
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr
 8013010:	200017c4 	.word	0x200017c4
 8013014:	200017b0 	.word	0x200017b0

08013018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b088      	sub	sp, #32
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d10b      	bne.n	8013040 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8013028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801302c:	f383 8811 	msr	BASEPRI, r3
 8013030:	f3bf 8f6f 	isb	sy
 8013034:	f3bf 8f4f 	dsb	sy
 8013038:	613b      	str	r3, [r7, #16]
}
 801303a:	bf00      	nop
 801303c:	bf00      	nop
 801303e:	e7fd      	b.n	801303c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10b      	bne.n	801305e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8013046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801304a:	f383 8811 	msr	BASEPRI, r3
 801304e:	f3bf 8f6f 	isb	sy
 8013052:	f3bf 8f4f 	dsb	sy
 8013056:	60fb      	str	r3, [r7, #12]
}
 8013058:	bf00      	nop
 801305a:	bf00      	nop
 801305c:	e7fd      	b.n	801305a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801305e:	f000 fc5b 	bl	8013918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013062:	4b1d      	ldr	r3, [pc, #116]	@ (80130d8 <xTaskCheckForTimeOut+0xc0>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	69ba      	ldr	r2, [r7, #24]
 801306e:	1ad3      	subs	r3, r2, r3
 8013070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801307a:	d102      	bne.n	8013082 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801307c:	2300      	movs	r3, #0
 801307e:	61fb      	str	r3, [r7, #28]
 8013080:	e023      	b.n	80130ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681a      	ldr	r2, [r3, #0]
 8013086:	4b15      	ldr	r3, [pc, #84]	@ (80130dc <xTaskCheckForTimeOut+0xc4>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	429a      	cmp	r2, r3
 801308c:	d007      	beq.n	801309e <xTaskCheckForTimeOut+0x86>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	69ba      	ldr	r2, [r7, #24]
 8013094:	429a      	cmp	r2, r3
 8013096:	d302      	bcc.n	801309e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013098:	2301      	movs	r3, #1
 801309a:	61fb      	str	r3, [r7, #28]
 801309c:	e015      	b.n	80130ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	697a      	ldr	r2, [r7, #20]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d20b      	bcs.n	80130c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	1ad2      	subs	r2, r2, r3
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f7ff ff99 	bl	8012fec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80130ba:	2300      	movs	r3, #0
 80130bc:	61fb      	str	r3, [r7, #28]
 80130be:	e004      	b.n	80130ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	2200      	movs	r2, #0
 80130c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80130c6:	2301      	movs	r3, #1
 80130c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80130ca:	f000 fc57 	bl	801397c <vPortExitCritical>

	return xReturn;
 80130ce:	69fb      	ldr	r3, [r7, #28]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3720      	adds	r7, #32
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	200017b0 	.word	0x200017b0
 80130dc:	200017c4 	.word	0x200017c4

080130e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80130e0:	b480      	push	{r7}
 80130e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80130e4:	4b03      	ldr	r3, [pc, #12]	@ (80130f4 <vTaskMissedYield+0x14>)
 80130e6:	2201      	movs	r2, #1
 80130e8:	601a      	str	r2, [r3, #0]
}
 80130ea:	bf00      	nop
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr
 80130f4:	200017c0 	.word	0x200017c0

080130f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013100:	f000 f852 	bl	80131a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013104:	4b06      	ldr	r3, [pc, #24]	@ (8013120 <prvIdleTask+0x28>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2b01      	cmp	r3, #1
 801310a:	d9f9      	bls.n	8013100 <prvIdleTask+0x8>
			{
				taskYIELD();
 801310c:	4b05      	ldr	r3, [pc, #20]	@ (8013124 <prvIdleTask+0x2c>)
 801310e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013112:	601a      	str	r2, [r3, #0]
 8013114:	f3bf 8f4f 	dsb	sy
 8013118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801311c:	e7f0      	b.n	8013100 <prvIdleTask+0x8>
 801311e:	bf00      	nop
 8013120:	200016b0 	.word	0x200016b0
 8013124:	e000ed04 	.word	0xe000ed04

08013128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801312e:	2300      	movs	r3, #0
 8013130:	607b      	str	r3, [r7, #4]
 8013132:	e00c      	b.n	801314e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	4613      	mov	r3, r2
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	4413      	add	r3, r2
 801313c:	009b      	lsls	r3, r3, #2
 801313e:	4a12      	ldr	r2, [pc, #72]	@ (8013188 <prvInitialiseTaskLists+0x60>)
 8013140:	4413      	add	r3, r2
 8013142:	4618      	mov	r0, r3
 8013144:	f7fe fc83 	bl	8011a4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	3301      	adds	r3, #1
 801314c:	607b      	str	r3, [r7, #4]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2b06      	cmp	r3, #6
 8013152:	d9ef      	bls.n	8013134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013154:	480d      	ldr	r0, [pc, #52]	@ (801318c <prvInitialiseTaskLists+0x64>)
 8013156:	f7fe fc7a 	bl	8011a4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801315a:	480d      	ldr	r0, [pc, #52]	@ (8013190 <prvInitialiseTaskLists+0x68>)
 801315c:	f7fe fc77 	bl	8011a4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013160:	480c      	ldr	r0, [pc, #48]	@ (8013194 <prvInitialiseTaskLists+0x6c>)
 8013162:	f7fe fc74 	bl	8011a4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013166:	480c      	ldr	r0, [pc, #48]	@ (8013198 <prvInitialiseTaskLists+0x70>)
 8013168:	f7fe fc71 	bl	8011a4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801316c:	480b      	ldr	r0, [pc, #44]	@ (801319c <prvInitialiseTaskLists+0x74>)
 801316e:	f7fe fc6e 	bl	8011a4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013172:	4b0b      	ldr	r3, [pc, #44]	@ (80131a0 <prvInitialiseTaskLists+0x78>)
 8013174:	4a05      	ldr	r2, [pc, #20]	@ (801318c <prvInitialiseTaskLists+0x64>)
 8013176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013178:	4b0a      	ldr	r3, [pc, #40]	@ (80131a4 <prvInitialiseTaskLists+0x7c>)
 801317a:	4a05      	ldr	r2, [pc, #20]	@ (8013190 <prvInitialiseTaskLists+0x68>)
 801317c:	601a      	str	r2, [r3, #0]
}
 801317e:	bf00      	nop
 8013180:	3708      	adds	r7, #8
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	200016b0 	.word	0x200016b0
 801318c:	2000173c 	.word	0x2000173c
 8013190:	20001750 	.word	0x20001750
 8013194:	2000176c 	.word	0x2000176c
 8013198:	20001780 	.word	0x20001780
 801319c:	20001798 	.word	0x20001798
 80131a0:	20001764 	.word	0x20001764
 80131a4:	20001768 	.word	0x20001768

080131a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80131ae:	e019      	b.n	80131e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80131b0:	f000 fbb2 	bl	8013918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131b4:	4b10      	ldr	r3, [pc, #64]	@ (80131f8 <prvCheckTasksWaitingTermination+0x50>)
 80131b6:	68db      	ldr	r3, [r3, #12]
 80131b8:	68db      	ldr	r3, [r3, #12]
 80131ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	3304      	adds	r3, #4
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fe fcce 	bl	8011b62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80131c6:	4b0d      	ldr	r3, [pc, #52]	@ (80131fc <prvCheckTasksWaitingTermination+0x54>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	3b01      	subs	r3, #1
 80131cc:	4a0b      	ldr	r2, [pc, #44]	@ (80131fc <prvCheckTasksWaitingTermination+0x54>)
 80131ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80131d0:	4b0b      	ldr	r3, [pc, #44]	@ (8013200 <prvCheckTasksWaitingTermination+0x58>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	3b01      	subs	r3, #1
 80131d6:	4a0a      	ldr	r2, [pc, #40]	@ (8013200 <prvCheckTasksWaitingTermination+0x58>)
 80131d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80131da:	f000 fbcf 	bl	801397c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f000 f810 	bl	8013204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80131e4:	4b06      	ldr	r3, [pc, #24]	@ (8013200 <prvCheckTasksWaitingTermination+0x58>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d1e1      	bne.n	80131b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80131ec:	bf00      	nop
 80131ee:	bf00      	nop
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	20001780 	.word	0x20001780
 80131fc:	200017ac 	.word	0x200017ac
 8013200:	20001794 	.word	0x20001794

08013204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013210:	4618      	mov	r0, r3
 8013212:	f000 fd71 	bl	8013cf8 <vPortFree>
			vPortFree( pxTCB );
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f000 fd6e 	bl	8013cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801321c:	bf00      	nop
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}

08013224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013224:	b480      	push	{r7}
 8013226:	b083      	sub	sp, #12
 8013228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801322a:	4b0c      	ldr	r3, [pc, #48]	@ (801325c <prvResetNextTaskUnblockTime+0x38>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d104      	bne.n	801323e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013234:	4b0a      	ldr	r3, [pc, #40]	@ (8013260 <prvResetNextTaskUnblockTime+0x3c>)
 8013236:	f04f 32ff 	mov.w	r2, #4294967295
 801323a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801323c:	e008      	b.n	8013250 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801323e:	4b07      	ldr	r3, [pc, #28]	@ (801325c <prvResetNextTaskUnblockTime+0x38>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	68db      	ldr	r3, [r3, #12]
 8013244:	68db      	ldr	r3, [r3, #12]
 8013246:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	4a04      	ldr	r2, [pc, #16]	@ (8013260 <prvResetNextTaskUnblockTime+0x3c>)
 801324e:	6013      	str	r3, [r2, #0]
}
 8013250:	bf00      	nop
 8013252:	370c      	adds	r7, #12
 8013254:	46bd      	mov	sp, r7
 8013256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325a:	4770      	bx	lr
 801325c:	20001764 	.word	0x20001764
 8013260:	200017cc 	.word	0x200017cc

08013264 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013264:	b480      	push	{r7}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801326a:	4b0b      	ldr	r3, [pc, #44]	@ (8013298 <xTaskGetSchedulerState+0x34>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d102      	bne.n	8013278 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013272:	2301      	movs	r3, #1
 8013274:	607b      	str	r3, [r7, #4]
 8013276:	e008      	b.n	801328a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013278:	4b08      	ldr	r3, [pc, #32]	@ (801329c <xTaskGetSchedulerState+0x38>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d102      	bne.n	8013286 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013280:	2302      	movs	r3, #2
 8013282:	607b      	str	r3, [r7, #4]
 8013284:	e001      	b.n	801328a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013286:	2300      	movs	r3, #0
 8013288:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801328a:	687b      	ldr	r3, [r7, #4]
	}
 801328c:	4618      	mov	r0, r3
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	200017b8 	.word	0x200017b8
 801329c:	200017d4 	.word	0x200017d4

080132a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80132ac:	2300      	movs	r3, #0
 80132ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d05e      	beq.n	8013374 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132ba:	4b31      	ldr	r3, [pc, #196]	@ (8013380 <xTaskPriorityInherit+0xe0>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d24e      	bcs.n	8013362 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	699b      	ldr	r3, [r3, #24]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	db06      	blt.n	80132da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132cc:	4b2c      	ldr	r3, [pc, #176]	@ (8013380 <xTaskPriorityInherit+0xe0>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132d2:	f1c3 0207 	rsb	r2, r3, #7
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	6959      	ldr	r1, [r3, #20]
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132e2:	4613      	mov	r3, r2
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	4413      	add	r3, r2
 80132e8:	009b      	lsls	r3, r3, #2
 80132ea:	4a26      	ldr	r2, [pc, #152]	@ (8013384 <xTaskPriorityInherit+0xe4>)
 80132ec:	4413      	add	r3, r2
 80132ee:	4299      	cmp	r1, r3
 80132f0:	d12f      	bne.n	8013352 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	3304      	adds	r3, #4
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7fe fc33 	bl	8011b62 <uxListRemove>
 80132fc:	4603      	mov	r3, r0
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d10a      	bne.n	8013318 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013306:	2201      	movs	r2, #1
 8013308:	fa02 f303 	lsl.w	r3, r2, r3
 801330c:	43da      	mvns	r2, r3
 801330e:	4b1e      	ldr	r3, [pc, #120]	@ (8013388 <xTaskPriorityInherit+0xe8>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	4013      	ands	r3, r2
 8013314:	4a1c      	ldr	r2, [pc, #112]	@ (8013388 <xTaskPriorityInherit+0xe8>)
 8013316:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013318:	4b19      	ldr	r3, [pc, #100]	@ (8013380 <xTaskPriorityInherit+0xe0>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013326:	2201      	movs	r2, #1
 8013328:	409a      	lsls	r2, r3
 801332a:	4b17      	ldr	r3, [pc, #92]	@ (8013388 <xTaskPriorityInherit+0xe8>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	4313      	orrs	r3, r2
 8013330:	4a15      	ldr	r2, [pc, #84]	@ (8013388 <xTaskPriorityInherit+0xe8>)
 8013332:	6013      	str	r3, [r2, #0]
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013338:	4613      	mov	r3, r2
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	4413      	add	r3, r2
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	4a10      	ldr	r2, [pc, #64]	@ (8013384 <xTaskPriorityInherit+0xe4>)
 8013342:	441a      	add	r2, r3
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	3304      	adds	r3, #4
 8013348:	4619      	mov	r1, r3
 801334a:	4610      	mov	r0, r2
 801334c:	f7fe fbac 	bl	8011aa8 <vListInsertEnd>
 8013350:	e004      	b.n	801335c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013352:	4b0b      	ldr	r3, [pc, #44]	@ (8013380 <xTaskPriorityInherit+0xe0>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801335c:	2301      	movs	r3, #1
 801335e:	60fb      	str	r3, [r7, #12]
 8013360:	e008      	b.n	8013374 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013362:	68bb      	ldr	r3, [r7, #8]
 8013364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013366:	4b06      	ldr	r3, [pc, #24]	@ (8013380 <xTaskPriorityInherit+0xe0>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801336c:	429a      	cmp	r2, r3
 801336e:	d201      	bcs.n	8013374 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013370:	2301      	movs	r3, #1
 8013372:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013374:	68fb      	ldr	r3, [r7, #12]
	}
 8013376:	4618      	mov	r0, r3
 8013378:	3710      	adds	r7, #16
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	200016ac 	.word	0x200016ac
 8013384:	200016b0 	.word	0x200016b0
 8013388:	200017b4 	.word	0x200017b4

0801338c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013398:	2300      	movs	r3, #0
 801339a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d070      	beq.n	8013484 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80133a2:	4b3b      	ldr	r3, [pc, #236]	@ (8013490 <xTaskPriorityDisinherit+0x104>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	693a      	ldr	r2, [r7, #16]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d00b      	beq.n	80133c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80133ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133b0:	f383 8811 	msr	BASEPRI, r3
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	60fb      	str	r3, [r7, #12]
}
 80133be:	bf00      	nop
 80133c0:	bf00      	nop
 80133c2:	e7fd      	b.n	80133c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d10b      	bne.n	80133e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80133cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133d0:	f383 8811 	msr	BASEPRI, r3
 80133d4:	f3bf 8f6f 	isb	sy
 80133d8:	f3bf 8f4f 	dsb	sy
 80133dc:	60bb      	str	r3, [r7, #8]
}
 80133de:	bf00      	nop
 80133e0:	bf00      	nop
 80133e2:	e7fd      	b.n	80133e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80133e8:	1e5a      	subs	r2, r3, #1
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d044      	beq.n	8013484 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d140      	bne.n	8013484 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	3304      	adds	r3, #4
 8013406:	4618      	mov	r0, r3
 8013408:	f7fe fbab 	bl	8011b62 <uxListRemove>
 801340c:	4603      	mov	r3, r0
 801340e:	2b00      	cmp	r3, #0
 8013410:	d115      	bne.n	801343e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013416:	491f      	ldr	r1, [pc, #124]	@ (8013494 <xTaskPriorityDisinherit+0x108>)
 8013418:	4613      	mov	r3, r2
 801341a:	009b      	lsls	r3, r3, #2
 801341c:	4413      	add	r3, r2
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	440b      	add	r3, r1
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d10a      	bne.n	801343e <xTaskPriorityDisinherit+0xb2>
 8013428:	693b      	ldr	r3, [r7, #16]
 801342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801342c:	2201      	movs	r2, #1
 801342e:	fa02 f303 	lsl.w	r3, r2, r3
 8013432:	43da      	mvns	r2, r3
 8013434:	4b18      	ldr	r3, [pc, #96]	@ (8013498 <xTaskPriorityDisinherit+0x10c>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	4013      	ands	r3, r2
 801343a:	4a17      	ldr	r2, [pc, #92]	@ (8013498 <xTaskPriorityDisinherit+0x10c>)
 801343c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801344a:	f1c3 0207 	rsb	r2, r3, #7
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013456:	2201      	movs	r2, #1
 8013458:	409a      	lsls	r2, r3
 801345a:	4b0f      	ldr	r3, [pc, #60]	@ (8013498 <xTaskPriorityDisinherit+0x10c>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4313      	orrs	r3, r2
 8013460:	4a0d      	ldr	r2, [pc, #52]	@ (8013498 <xTaskPriorityDisinherit+0x10c>)
 8013462:	6013      	str	r3, [r2, #0]
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013468:	4613      	mov	r3, r2
 801346a:	009b      	lsls	r3, r3, #2
 801346c:	4413      	add	r3, r2
 801346e:	009b      	lsls	r3, r3, #2
 8013470:	4a08      	ldr	r2, [pc, #32]	@ (8013494 <xTaskPriorityDisinherit+0x108>)
 8013472:	441a      	add	r2, r3
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	3304      	adds	r3, #4
 8013478:	4619      	mov	r1, r3
 801347a:	4610      	mov	r0, r2
 801347c:	f7fe fb14 	bl	8011aa8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013480:	2301      	movs	r3, #1
 8013482:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013484:	697b      	ldr	r3, [r7, #20]
	}
 8013486:	4618      	mov	r0, r3
 8013488:	3718      	adds	r7, #24
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	200016ac 	.word	0x200016ac
 8013494:	200016b0 	.word	0x200016b0
 8013498:	200017b4 	.word	0x200017b4

0801349c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801349c:	b580      	push	{r7, lr}
 801349e:	b088      	sub	sp, #32
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80134aa:	2301      	movs	r3, #1
 80134ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d079      	beq.n	80135a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d10b      	bne.n	80134d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80134bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134c0:	f383 8811 	msr	BASEPRI, r3
 80134c4:	f3bf 8f6f 	isb	sy
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	60fb      	str	r3, [r7, #12]
}
 80134ce:	bf00      	nop
 80134d0:	bf00      	nop
 80134d2:	e7fd      	b.n	80134d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134d8:	683a      	ldr	r2, [r7, #0]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d902      	bls.n	80134e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	61fb      	str	r3, [r7, #28]
 80134e2:	e002      	b.n	80134ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80134e4:	69bb      	ldr	r3, [r7, #24]
 80134e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134ee:	69fa      	ldr	r2, [r7, #28]
 80134f0:	429a      	cmp	r2, r3
 80134f2:	d059      	beq.n	80135a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80134f4:	69bb      	ldr	r3, [r7, #24]
 80134f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80134f8:	697a      	ldr	r2, [r7, #20]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d154      	bne.n	80135a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80134fe:	4b2c      	ldr	r3, [pc, #176]	@ (80135b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	69ba      	ldr	r2, [r7, #24]
 8013504:	429a      	cmp	r2, r3
 8013506:	d10b      	bne.n	8013520 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8013508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801350c:	f383 8811 	msr	BASEPRI, r3
 8013510:	f3bf 8f6f 	isb	sy
 8013514:	f3bf 8f4f 	dsb	sy
 8013518:	60bb      	str	r3, [r7, #8]
}
 801351a:	bf00      	nop
 801351c:	bf00      	nop
 801351e:	e7fd      	b.n	801351c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013524:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	69fa      	ldr	r2, [r7, #28]
 801352a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	699b      	ldr	r3, [r3, #24]
 8013530:	2b00      	cmp	r3, #0
 8013532:	db04      	blt.n	801353e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	f1c3 0207 	rsb	r2, r3, #7
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801353e:	69bb      	ldr	r3, [r7, #24]
 8013540:	6959      	ldr	r1, [r3, #20]
 8013542:	693a      	ldr	r2, [r7, #16]
 8013544:	4613      	mov	r3, r2
 8013546:	009b      	lsls	r3, r3, #2
 8013548:	4413      	add	r3, r2
 801354a:	009b      	lsls	r3, r3, #2
 801354c:	4a19      	ldr	r2, [pc, #100]	@ (80135b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801354e:	4413      	add	r3, r2
 8013550:	4299      	cmp	r1, r3
 8013552:	d129      	bne.n	80135a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013554:	69bb      	ldr	r3, [r7, #24]
 8013556:	3304      	adds	r3, #4
 8013558:	4618      	mov	r0, r3
 801355a:	f7fe fb02 	bl	8011b62 <uxListRemove>
 801355e:	4603      	mov	r3, r0
 8013560:	2b00      	cmp	r3, #0
 8013562:	d10a      	bne.n	801357a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013568:	2201      	movs	r2, #1
 801356a:	fa02 f303 	lsl.w	r3, r2, r3
 801356e:	43da      	mvns	r2, r3
 8013570:	4b11      	ldr	r3, [pc, #68]	@ (80135b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	4013      	ands	r3, r2
 8013576:	4a10      	ldr	r2, [pc, #64]	@ (80135b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013578:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801357e:	2201      	movs	r2, #1
 8013580:	409a      	lsls	r2, r3
 8013582:	4b0d      	ldr	r3, [pc, #52]	@ (80135b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	4313      	orrs	r3, r2
 8013588:	4a0b      	ldr	r2, [pc, #44]	@ (80135b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801358a:	6013      	str	r3, [r2, #0]
 801358c:	69bb      	ldr	r3, [r7, #24]
 801358e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013590:	4613      	mov	r3, r2
 8013592:	009b      	lsls	r3, r3, #2
 8013594:	4413      	add	r3, r2
 8013596:	009b      	lsls	r3, r3, #2
 8013598:	4a06      	ldr	r2, [pc, #24]	@ (80135b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801359a:	441a      	add	r2, r3
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	3304      	adds	r3, #4
 80135a0:	4619      	mov	r1, r3
 80135a2:	4610      	mov	r0, r2
 80135a4:	f7fe fa80 	bl	8011aa8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80135a8:	bf00      	nop
 80135aa:	3720      	adds	r7, #32
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	200016ac 	.word	0x200016ac
 80135b4:	200016b0 	.word	0x200016b0
 80135b8:	200017b4 	.word	0x200017b4

080135bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80135bc:	b480      	push	{r7}
 80135be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80135c0:	4b07      	ldr	r3, [pc, #28]	@ (80135e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d004      	beq.n	80135d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80135c8:	4b05      	ldr	r3, [pc, #20]	@ (80135e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80135ce:	3201      	adds	r2, #1
 80135d0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80135d2:	4b03      	ldr	r3, [pc, #12]	@ (80135e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80135d4:	681b      	ldr	r3, [r3, #0]
	}
 80135d6:	4618      	mov	r0, r3
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr
 80135e0:	200016ac 	.word	0x200016ac

080135e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b084      	sub	sp, #16
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80135ee:	4b29      	ldr	r3, [pc, #164]	@ (8013694 <prvAddCurrentTaskToDelayedList+0xb0>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80135f4:	4b28      	ldr	r3, [pc, #160]	@ (8013698 <prvAddCurrentTaskToDelayedList+0xb4>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	3304      	adds	r3, #4
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7fe fab1 	bl	8011b62 <uxListRemove>
 8013600:	4603      	mov	r3, r0
 8013602:	2b00      	cmp	r3, #0
 8013604:	d10b      	bne.n	801361e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013606:	4b24      	ldr	r3, [pc, #144]	@ (8013698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801360c:	2201      	movs	r2, #1
 801360e:	fa02 f303 	lsl.w	r3, r2, r3
 8013612:	43da      	mvns	r2, r3
 8013614:	4b21      	ldr	r3, [pc, #132]	@ (801369c <prvAddCurrentTaskToDelayedList+0xb8>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	4013      	ands	r3, r2
 801361a:	4a20      	ldr	r2, [pc, #128]	@ (801369c <prvAddCurrentTaskToDelayedList+0xb8>)
 801361c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013624:	d10a      	bne.n	801363c <prvAddCurrentTaskToDelayedList+0x58>
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d007      	beq.n	801363c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801362c:	4b1a      	ldr	r3, [pc, #104]	@ (8013698 <prvAddCurrentTaskToDelayedList+0xb4>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	3304      	adds	r3, #4
 8013632:	4619      	mov	r1, r3
 8013634:	481a      	ldr	r0, [pc, #104]	@ (80136a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013636:	f7fe fa37 	bl	8011aa8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801363a:	e026      	b.n	801368a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801363c:	68fa      	ldr	r2, [r7, #12]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4413      	add	r3, r2
 8013642:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013644:	4b14      	ldr	r3, [pc, #80]	@ (8013698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	68ba      	ldr	r2, [r7, #8]
 801364a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801364c:	68ba      	ldr	r2, [r7, #8]
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	429a      	cmp	r2, r3
 8013652:	d209      	bcs.n	8013668 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013654:	4b13      	ldr	r3, [pc, #76]	@ (80136a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013656:	681a      	ldr	r2, [r3, #0]
 8013658:	4b0f      	ldr	r3, [pc, #60]	@ (8013698 <prvAddCurrentTaskToDelayedList+0xb4>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	3304      	adds	r3, #4
 801365e:	4619      	mov	r1, r3
 8013660:	4610      	mov	r0, r2
 8013662:	f7fe fa45 	bl	8011af0 <vListInsert>
}
 8013666:	e010      	b.n	801368a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013668:	4b0f      	ldr	r3, [pc, #60]	@ (80136a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	4b0a      	ldr	r3, [pc, #40]	@ (8013698 <prvAddCurrentTaskToDelayedList+0xb4>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	3304      	adds	r3, #4
 8013672:	4619      	mov	r1, r3
 8013674:	4610      	mov	r0, r2
 8013676:	f7fe fa3b 	bl	8011af0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801367a:	4b0c      	ldr	r3, [pc, #48]	@ (80136ac <prvAddCurrentTaskToDelayedList+0xc8>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	68ba      	ldr	r2, [r7, #8]
 8013680:	429a      	cmp	r2, r3
 8013682:	d202      	bcs.n	801368a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013684:	4a09      	ldr	r2, [pc, #36]	@ (80136ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	6013      	str	r3, [r2, #0]
}
 801368a:	bf00      	nop
 801368c:	3710      	adds	r7, #16
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	200017b0 	.word	0x200017b0
 8013698:	200016ac 	.word	0x200016ac
 801369c:	200017b4 	.word	0x200017b4
 80136a0:	20001798 	.word	0x20001798
 80136a4:	20001768 	.word	0x20001768
 80136a8:	20001764 	.word	0x20001764
 80136ac:	200017cc 	.word	0x200017cc

080136b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80136b0:	b480      	push	{r7}
 80136b2:	b085      	sub	sp, #20
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	60f8      	str	r0, [r7, #12]
 80136b8:	60b9      	str	r1, [r7, #8]
 80136ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	3b04      	subs	r3, #4
 80136c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80136c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	3b04      	subs	r3, #4
 80136ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	f023 0201 	bic.w	r2, r3, #1
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	3b04      	subs	r3, #4
 80136de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80136e0:	4a0c      	ldr	r2, [pc, #48]	@ (8013714 <pxPortInitialiseStack+0x64>)
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	3b14      	subs	r3, #20
 80136ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80136ec:	687a      	ldr	r2, [r7, #4]
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	3b04      	subs	r3, #4
 80136f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f06f 0202 	mvn.w	r2, #2
 80136fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	3b20      	subs	r3, #32
 8013704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013706:	68fb      	ldr	r3, [r7, #12]
}
 8013708:	4618      	mov	r0, r3
 801370a:	3714      	adds	r7, #20
 801370c:	46bd      	mov	sp, r7
 801370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013712:	4770      	bx	lr
 8013714:	08013719 	.word	0x08013719

08013718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013718:	b480      	push	{r7}
 801371a:	b085      	sub	sp, #20
 801371c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801371e:	2300      	movs	r3, #0
 8013720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013722:	4b13      	ldr	r3, [pc, #76]	@ (8013770 <prvTaskExitError+0x58>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801372a:	d00b      	beq.n	8013744 <prvTaskExitError+0x2c>
	__asm volatile
 801372c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013730:	f383 8811 	msr	BASEPRI, r3
 8013734:	f3bf 8f6f 	isb	sy
 8013738:	f3bf 8f4f 	dsb	sy
 801373c:	60fb      	str	r3, [r7, #12]
}
 801373e:	bf00      	nop
 8013740:	bf00      	nop
 8013742:	e7fd      	b.n	8013740 <prvTaskExitError+0x28>
	__asm volatile
 8013744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013748:	f383 8811 	msr	BASEPRI, r3
 801374c:	f3bf 8f6f 	isb	sy
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	60bb      	str	r3, [r7, #8]
}
 8013756:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013758:	bf00      	nop
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d0fc      	beq.n	801375a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013760:	bf00      	nop
 8013762:	bf00      	nop
 8013764:	3714      	adds	r7, #20
 8013766:	46bd      	mov	sp, r7
 8013768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376c:	4770      	bx	lr
 801376e:	bf00      	nop
 8013770:	2000004c 	.word	0x2000004c
	...

08013780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013780:	4b07      	ldr	r3, [pc, #28]	@ (80137a0 <pxCurrentTCBConst2>)
 8013782:	6819      	ldr	r1, [r3, #0]
 8013784:	6808      	ldr	r0, [r1, #0]
 8013786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801378a:	f380 8809 	msr	PSP, r0
 801378e:	f3bf 8f6f 	isb	sy
 8013792:	f04f 0000 	mov.w	r0, #0
 8013796:	f380 8811 	msr	BASEPRI, r0
 801379a:	4770      	bx	lr
 801379c:	f3af 8000 	nop.w

080137a0 <pxCurrentTCBConst2>:
 80137a0:	200016ac 	.word	0x200016ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80137a4:	bf00      	nop
 80137a6:	bf00      	nop

080137a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80137a8:	4808      	ldr	r0, [pc, #32]	@ (80137cc <prvPortStartFirstTask+0x24>)
 80137aa:	6800      	ldr	r0, [r0, #0]
 80137ac:	6800      	ldr	r0, [r0, #0]
 80137ae:	f380 8808 	msr	MSP, r0
 80137b2:	f04f 0000 	mov.w	r0, #0
 80137b6:	f380 8814 	msr	CONTROL, r0
 80137ba:	b662      	cpsie	i
 80137bc:	b661      	cpsie	f
 80137be:	f3bf 8f4f 	dsb	sy
 80137c2:	f3bf 8f6f 	isb	sy
 80137c6:	df00      	svc	0
 80137c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80137ca:	bf00      	nop
 80137cc:	e000ed08 	.word	0xe000ed08

080137d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b086      	sub	sp, #24
 80137d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80137d6:	4b47      	ldr	r3, [pc, #284]	@ (80138f4 <xPortStartScheduler+0x124>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4a47      	ldr	r2, [pc, #284]	@ (80138f8 <xPortStartScheduler+0x128>)
 80137dc:	4293      	cmp	r3, r2
 80137de:	d10b      	bne.n	80137f8 <xPortStartScheduler+0x28>
	__asm volatile
 80137e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137e4:	f383 8811 	msr	BASEPRI, r3
 80137e8:	f3bf 8f6f 	isb	sy
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	60fb      	str	r3, [r7, #12]
}
 80137f2:	bf00      	nop
 80137f4:	bf00      	nop
 80137f6:	e7fd      	b.n	80137f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80137f8:	4b3e      	ldr	r3, [pc, #248]	@ (80138f4 <xPortStartScheduler+0x124>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	4a3f      	ldr	r2, [pc, #252]	@ (80138fc <xPortStartScheduler+0x12c>)
 80137fe:	4293      	cmp	r3, r2
 8013800:	d10b      	bne.n	801381a <xPortStartScheduler+0x4a>
	__asm volatile
 8013802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013806:	f383 8811 	msr	BASEPRI, r3
 801380a:	f3bf 8f6f 	isb	sy
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	613b      	str	r3, [r7, #16]
}
 8013814:	bf00      	nop
 8013816:	bf00      	nop
 8013818:	e7fd      	b.n	8013816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801381a:	4b39      	ldr	r3, [pc, #228]	@ (8013900 <xPortStartScheduler+0x130>)
 801381c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	781b      	ldrb	r3, [r3, #0]
 8013822:	b2db      	uxtb	r3, r3
 8013824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	22ff      	movs	r2, #255	@ 0xff
 801382a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	b2db      	uxtb	r3, r3
 8013832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013834:	78fb      	ldrb	r3, [r7, #3]
 8013836:	b2db      	uxtb	r3, r3
 8013838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801383c:	b2da      	uxtb	r2, r3
 801383e:	4b31      	ldr	r3, [pc, #196]	@ (8013904 <xPortStartScheduler+0x134>)
 8013840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013842:	4b31      	ldr	r3, [pc, #196]	@ (8013908 <xPortStartScheduler+0x138>)
 8013844:	2207      	movs	r2, #7
 8013846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013848:	e009      	b.n	801385e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801384a:	4b2f      	ldr	r3, [pc, #188]	@ (8013908 <xPortStartScheduler+0x138>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	3b01      	subs	r3, #1
 8013850:	4a2d      	ldr	r2, [pc, #180]	@ (8013908 <xPortStartScheduler+0x138>)
 8013852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013854:	78fb      	ldrb	r3, [r7, #3]
 8013856:	b2db      	uxtb	r3, r3
 8013858:	005b      	lsls	r3, r3, #1
 801385a:	b2db      	uxtb	r3, r3
 801385c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801385e:	78fb      	ldrb	r3, [r7, #3]
 8013860:	b2db      	uxtb	r3, r3
 8013862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013866:	2b80      	cmp	r3, #128	@ 0x80
 8013868:	d0ef      	beq.n	801384a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801386a:	4b27      	ldr	r3, [pc, #156]	@ (8013908 <xPortStartScheduler+0x138>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	f1c3 0307 	rsb	r3, r3, #7
 8013872:	2b04      	cmp	r3, #4
 8013874:	d00b      	beq.n	801388e <xPortStartScheduler+0xbe>
	__asm volatile
 8013876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801387a:	f383 8811 	msr	BASEPRI, r3
 801387e:	f3bf 8f6f 	isb	sy
 8013882:	f3bf 8f4f 	dsb	sy
 8013886:	60bb      	str	r3, [r7, #8]
}
 8013888:	bf00      	nop
 801388a:	bf00      	nop
 801388c:	e7fd      	b.n	801388a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801388e:	4b1e      	ldr	r3, [pc, #120]	@ (8013908 <xPortStartScheduler+0x138>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	021b      	lsls	r3, r3, #8
 8013894:	4a1c      	ldr	r2, [pc, #112]	@ (8013908 <xPortStartScheduler+0x138>)
 8013896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013898:	4b1b      	ldr	r3, [pc, #108]	@ (8013908 <xPortStartScheduler+0x138>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80138a0:	4a19      	ldr	r2, [pc, #100]	@ (8013908 <xPortStartScheduler+0x138>)
 80138a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	b2da      	uxtb	r2, r3
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80138ac:	4b17      	ldr	r3, [pc, #92]	@ (801390c <xPortStartScheduler+0x13c>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a16      	ldr	r2, [pc, #88]	@ (801390c <xPortStartScheduler+0x13c>)
 80138b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80138b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80138b8:	4b14      	ldr	r3, [pc, #80]	@ (801390c <xPortStartScheduler+0x13c>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	4a13      	ldr	r2, [pc, #76]	@ (801390c <xPortStartScheduler+0x13c>)
 80138be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80138c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80138c4:	f000 f8da 	bl	8013a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80138c8:	4b11      	ldr	r3, [pc, #68]	@ (8013910 <xPortStartScheduler+0x140>)
 80138ca:	2200      	movs	r2, #0
 80138cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80138ce:	f000 f8f9 	bl	8013ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80138d2:	4b10      	ldr	r3, [pc, #64]	@ (8013914 <xPortStartScheduler+0x144>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	4a0f      	ldr	r2, [pc, #60]	@ (8013914 <xPortStartScheduler+0x144>)
 80138d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80138dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80138de:	f7ff ff63 	bl	80137a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80138e2:	f7ff fa9d 	bl	8012e20 <vTaskSwitchContext>
	prvTaskExitError();
 80138e6:	f7ff ff17 	bl	8013718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80138ea:	2300      	movs	r3, #0
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3718      	adds	r7, #24
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	e000ed00 	.word	0xe000ed00
 80138f8:	410fc271 	.word	0x410fc271
 80138fc:	410fc270 	.word	0x410fc270
 8013900:	e000e400 	.word	0xe000e400
 8013904:	200017d8 	.word	0x200017d8
 8013908:	200017dc 	.word	0x200017dc
 801390c:	e000ed20 	.word	0xe000ed20
 8013910:	2000004c 	.word	0x2000004c
 8013914:	e000ef34 	.word	0xe000ef34

08013918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013918:	b480      	push	{r7}
 801391a:	b083      	sub	sp, #12
 801391c:	af00      	add	r7, sp, #0
	__asm volatile
 801391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013922:	f383 8811 	msr	BASEPRI, r3
 8013926:	f3bf 8f6f 	isb	sy
 801392a:	f3bf 8f4f 	dsb	sy
 801392e:	607b      	str	r3, [r7, #4]
}
 8013930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013932:	4b10      	ldr	r3, [pc, #64]	@ (8013974 <vPortEnterCritical+0x5c>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	3301      	adds	r3, #1
 8013938:	4a0e      	ldr	r2, [pc, #56]	@ (8013974 <vPortEnterCritical+0x5c>)
 801393a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801393c:	4b0d      	ldr	r3, [pc, #52]	@ (8013974 <vPortEnterCritical+0x5c>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	2b01      	cmp	r3, #1
 8013942:	d110      	bne.n	8013966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013944:	4b0c      	ldr	r3, [pc, #48]	@ (8013978 <vPortEnterCritical+0x60>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	b2db      	uxtb	r3, r3
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00b      	beq.n	8013966 <vPortEnterCritical+0x4e>
	__asm volatile
 801394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013952:	f383 8811 	msr	BASEPRI, r3
 8013956:	f3bf 8f6f 	isb	sy
 801395a:	f3bf 8f4f 	dsb	sy
 801395e:	603b      	str	r3, [r7, #0]
}
 8013960:	bf00      	nop
 8013962:	bf00      	nop
 8013964:	e7fd      	b.n	8013962 <vPortEnterCritical+0x4a>
	}
}
 8013966:	bf00      	nop
 8013968:	370c      	adds	r7, #12
 801396a:	46bd      	mov	sp, r7
 801396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013970:	4770      	bx	lr
 8013972:	bf00      	nop
 8013974:	2000004c 	.word	0x2000004c
 8013978:	e000ed04 	.word	0xe000ed04

0801397c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013982:	4b12      	ldr	r3, [pc, #72]	@ (80139cc <vPortExitCritical+0x50>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d10b      	bne.n	80139a2 <vPortExitCritical+0x26>
	__asm volatile
 801398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801398e:	f383 8811 	msr	BASEPRI, r3
 8013992:	f3bf 8f6f 	isb	sy
 8013996:	f3bf 8f4f 	dsb	sy
 801399a:	607b      	str	r3, [r7, #4]
}
 801399c:	bf00      	nop
 801399e:	bf00      	nop
 80139a0:	e7fd      	b.n	801399e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80139a2:	4b0a      	ldr	r3, [pc, #40]	@ (80139cc <vPortExitCritical+0x50>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	3b01      	subs	r3, #1
 80139a8:	4a08      	ldr	r2, [pc, #32]	@ (80139cc <vPortExitCritical+0x50>)
 80139aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80139ac:	4b07      	ldr	r3, [pc, #28]	@ (80139cc <vPortExitCritical+0x50>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d105      	bne.n	80139c0 <vPortExitCritical+0x44>
 80139b4:	2300      	movs	r3, #0
 80139b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	f383 8811 	msr	BASEPRI, r3
}
 80139be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80139c0:	bf00      	nop
 80139c2:	370c      	adds	r7, #12
 80139c4:	46bd      	mov	sp, r7
 80139c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ca:	4770      	bx	lr
 80139cc:	2000004c 	.word	0x2000004c

080139d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80139d0:	f3ef 8009 	mrs	r0, PSP
 80139d4:	f3bf 8f6f 	isb	sy
 80139d8:	4b15      	ldr	r3, [pc, #84]	@ (8013a30 <pxCurrentTCBConst>)
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	f01e 0f10 	tst.w	lr, #16
 80139e0:	bf08      	it	eq
 80139e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80139e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ea:	6010      	str	r0, [r2, #0]
 80139ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80139f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80139f4:	f380 8811 	msr	BASEPRI, r0
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	f3bf 8f6f 	isb	sy
 8013a00:	f7ff fa0e 	bl	8012e20 <vTaskSwitchContext>
 8013a04:	f04f 0000 	mov.w	r0, #0
 8013a08:	f380 8811 	msr	BASEPRI, r0
 8013a0c:	bc09      	pop	{r0, r3}
 8013a0e:	6819      	ldr	r1, [r3, #0]
 8013a10:	6808      	ldr	r0, [r1, #0]
 8013a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a16:	f01e 0f10 	tst.w	lr, #16
 8013a1a:	bf08      	it	eq
 8013a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013a20:	f380 8809 	msr	PSP, r0
 8013a24:	f3bf 8f6f 	isb	sy
 8013a28:	4770      	bx	lr
 8013a2a:	bf00      	nop
 8013a2c:	f3af 8000 	nop.w

08013a30 <pxCurrentTCBConst>:
 8013a30:	200016ac 	.word	0x200016ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013a34:	bf00      	nop
 8013a36:	bf00      	nop

08013a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8013a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	607b      	str	r3, [r7, #4]
}
 8013a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013a52:	f7ff f92b 	bl	8012cac <xTaskIncrementTick>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d003      	beq.n	8013a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013a5c:	4b06      	ldr	r3, [pc, #24]	@ (8013a78 <SysTick_Handler+0x40>)
 8013a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a62:	601a      	str	r2, [r3, #0]
 8013a64:	2300      	movs	r3, #0
 8013a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	f383 8811 	msr	BASEPRI, r3
}
 8013a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013a70:	bf00      	nop
 8013a72:	3708      	adds	r7, #8
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	e000ed04 	.word	0xe000ed04

08013a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013a80:	4b0b      	ldr	r3, [pc, #44]	@ (8013ab0 <vPortSetupTimerInterrupt+0x34>)
 8013a82:	2200      	movs	r2, #0
 8013a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013a86:	4b0b      	ldr	r3, [pc, #44]	@ (8013ab4 <vPortSetupTimerInterrupt+0x38>)
 8013a88:	2200      	movs	r2, #0
 8013a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8013ab8 <vPortSetupTimerInterrupt+0x3c>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	4a0a      	ldr	r2, [pc, #40]	@ (8013abc <vPortSetupTimerInterrupt+0x40>)
 8013a92:	fba2 2303 	umull	r2, r3, r2, r3
 8013a96:	099b      	lsrs	r3, r3, #6
 8013a98:	4a09      	ldr	r2, [pc, #36]	@ (8013ac0 <vPortSetupTimerInterrupt+0x44>)
 8013a9a:	3b01      	subs	r3, #1
 8013a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013a9e:	4b04      	ldr	r3, [pc, #16]	@ (8013ab0 <vPortSetupTimerInterrupt+0x34>)
 8013aa0:	2207      	movs	r2, #7
 8013aa2:	601a      	str	r2, [r3, #0]
}
 8013aa4:	bf00      	nop
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop
 8013ab0:	e000e010 	.word	0xe000e010
 8013ab4:	e000e018 	.word	0xe000e018
 8013ab8:	20000028 	.word	0x20000028
 8013abc:	10624dd3 	.word	0x10624dd3
 8013ac0:	e000e014 	.word	0xe000e014

08013ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013ad4 <vPortEnableVFP+0x10>
 8013ac8:	6801      	ldr	r1, [r0, #0]
 8013aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013ace:	6001      	str	r1, [r0, #0]
 8013ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013ad2:	bf00      	nop
 8013ad4:	e000ed88 	.word	0xe000ed88

08013ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013ad8:	b480      	push	{r7}
 8013ada:	b085      	sub	sp, #20
 8013adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013ade:	f3ef 8305 	mrs	r3, IPSR
 8013ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2b0f      	cmp	r3, #15
 8013ae8:	d915      	bls.n	8013b16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013aea:	4a18      	ldr	r2, [pc, #96]	@ (8013b4c <vPortValidateInterruptPriority+0x74>)
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	4413      	add	r3, r2
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013af4:	4b16      	ldr	r3, [pc, #88]	@ (8013b50 <vPortValidateInterruptPriority+0x78>)
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	7afa      	ldrb	r2, [r7, #11]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d20b      	bcs.n	8013b16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8013afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b02:	f383 8811 	msr	BASEPRI, r3
 8013b06:	f3bf 8f6f 	isb	sy
 8013b0a:	f3bf 8f4f 	dsb	sy
 8013b0e:	607b      	str	r3, [r7, #4]
}
 8013b10:	bf00      	nop
 8013b12:	bf00      	nop
 8013b14:	e7fd      	b.n	8013b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013b16:	4b0f      	ldr	r3, [pc, #60]	@ (8013b54 <vPortValidateInterruptPriority+0x7c>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8013b58 <vPortValidateInterruptPriority+0x80>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d90b      	bls.n	8013b3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b2a:	f383 8811 	msr	BASEPRI, r3
 8013b2e:	f3bf 8f6f 	isb	sy
 8013b32:	f3bf 8f4f 	dsb	sy
 8013b36:	603b      	str	r3, [r7, #0]
}
 8013b38:	bf00      	nop
 8013b3a:	bf00      	nop
 8013b3c:	e7fd      	b.n	8013b3a <vPortValidateInterruptPriority+0x62>
	}
 8013b3e:	bf00      	nop
 8013b40:	3714      	adds	r7, #20
 8013b42:	46bd      	mov	sp, r7
 8013b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b48:	4770      	bx	lr
 8013b4a:	bf00      	nop
 8013b4c:	e000e3f0 	.word	0xe000e3f0
 8013b50:	200017d8 	.word	0x200017d8
 8013b54:	e000ed0c 	.word	0xe000ed0c
 8013b58:	200017dc 	.word	0x200017dc

08013b5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b08a      	sub	sp, #40	@ 0x28
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013b64:	2300      	movs	r3, #0
 8013b66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013b68:	f7fe fff4 	bl	8012b54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8013ce0 <pvPortMalloc+0x184>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d101      	bne.n	8013b78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013b74:	f000 f924 	bl	8013dc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013b78:	4b5a      	ldr	r3, [pc, #360]	@ (8013ce4 <pvPortMalloc+0x188>)
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	4013      	ands	r3, r2
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	f040 8095 	bne.w	8013cb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d01e      	beq.n	8013bca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013b8c:	2208      	movs	r2, #8
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	4413      	add	r3, r2
 8013b92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f003 0307 	and.w	r3, r3, #7
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d015      	beq.n	8013bca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f023 0307 	bic.w	r3, r3, #7
 8013ba4:	3308      	adds	r3, #8
 8013ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f003 0307 	and.w	r3, r3, #7
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d00b      	beq.n	8013bca <pvPortMalloc+0x6e>
	__asm volatile
 8013bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bb6:	f383 8811 	msr	BASEPRI, r3
 8013bba:	f3bf 8f6f 	isb	sy
 8013bbe:	f3bf 8f4f 	dsb	sy
 8013bc2:	617b      	str	r3, [r7, #20]
}
 8013bc4:	bf00      	nop
 8013bc6:	bf00      	nop
 8013bc8:	e7fd      	b.n	8013bc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d06f      	beq.n	8013cb0 <pvPortMalloc+0x154>
 8013bd0:	4b45      	ldr	r3, [pc, #276]	@ (8013ce8 <pvPortMalloc+0x18c>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	687a      	ldr	r2, [r7, #4]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d86a      	bhi.n	8013cb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013bda:	4b44      	ldr	r3, [pc, #272]	@ (8013cec <pvPortMalloc+0x190>)
 8013bdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013bde:	4b43      	ldr	r3, [pc, #268]	@ (8013cec <pvPortMalloc+0x190>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013be4:	e004      	b.n	8013bf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	687a      	ldr	r2, [r7, #4]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d903      	bls.n	8013c02 <pvPortMalloc+0xa6>
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d1f1      	bne.n	8013be6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013c02:	4b37      	ldr	r3, [pc, #220]	@ (8013ce0 <pvPortMalloc+0x184>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d051      	beq.n	8013cb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013c0c:	6a3b      	ldr	r3, [r7, #32]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	2208      	movs	r2, #8
 8013c12:	4413      	add	r3, r2
 8013c14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c18:	681a      	ldr	r2, [r3, #0]
 8013c1a:	6a3b      	ldr	r3, [r7, #32]
 8013c1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c20:	685a      	ldr	r2, [r3, #4]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	1ad2      	subs	r2, r2, r3
 8013c26:	2308      	movs	r3, #8
 8013c28:	005b      	lsls	r3, r3, #1
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d920      	bls.n	8013c70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	4413      	add	r3, r2
 8013c34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c36:	69bb      	ldr	r3, [r7, #24]
 8013c38:	f003 0307 	and.w	r3, r3, #7
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d00b      	beq.n	8013c58 <pvPortMalloc+0xfc>
	__asm volatile
 8013c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c44:	f383 8811 	msr	BASEPRI, r3
 8013c48:	f3bf 8f6f 	isb	sy
 8013c4c:	f3bf 8f4f 	dsb	sy
 8013c50:	613b      	str	r3, [r7, #16]
}
 8013c52:	bf00      	nop
 8013c54:	bf00      	nop
 8013c56:	e7fd      	b.n	8013c54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c5a:	685a      	ldr	r2, [r3, #4]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	1ad2      	subs	r2, r2, r3
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013c6a:	69b8      	ldr	r0, [r7, #24]
 8013c6c:	f000 f90a 	bl	8013e84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013c70:	4b1d      	ldr	r3, [pc, #116]	@ (8013ce8 <pvPortMalloc+0x18c>)
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	1ad3      	subs	r3, r2, r3
 8013c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8013ce8 <pvPortMalloc+0x18c>)
 8013c7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8013ce8 <pvPortMalloc+0x18c>)
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	4b1b      	ldr	r3, [pc, #108]	@ (8013cf0 <pvPortMalloc+0x194>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d203      	bcs.n	8013c92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013c8a:	4b17      	ldr	r3, [pc, #92]	@ (8013ce8 <pvPortMalloc+0x18c>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	4a18      	ldr	r2, [pc, #96]	@ (8013cf0 <pvPortMalloc+0x194>)
 8013c90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c94:	685a      	ldr	r2, [r3, #4]
 8013c96:	4b13      	ldr	r3, [pc, #76]	@ (8013ce4 <pvPortMalloc+0x188>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	431a      	orrs	r2, r3
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013ca6:	4b13      	ldr	r3, [pc, #76]	@ (8013cf4 <pvPortMalloc+0x198>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	3301      	adds	r3, #1
 8013cac:	4a11      	ldr	r2, [pc, #68]	@ (8013cf4 <pvPortMalloc+0x198>)
 8013cae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013cb0:	f7fe ff5e 	bl	8012b70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013cb4:	69fb      	ldr	r3, [r7, #28]
 8013cb6:	f003 0307 	and.w	r3, r3, #7
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00b      	beq.n	8013cd6 <pvPortMalloc+0x17a>
	__asm volatile
 8013cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cc2:	f383 8811 	msr	BASEPRI, r3
 8013cc6:	f3bf 8f6f 	isb	sy
 8013cca:	f3bf 8f4f 	dsb	sy
 8013cce:	60fb      	str	r3, [r7, #12]
}
 8013cd0:	bf00      	nop
 8013cd2:	bf00      	nop
 8013cd4:	e7fd      	b.n	8013cd2 <pvPortMalloc+0x176>
	return pvReturn;
 8013cd6:	69fb      	ldr	r3, [r7, #28]
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3728      	adds	r7, #40	@ 0x28
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}
 8013ce0:	20003ef8 	.word	0x20003ef8
 8013ce4:	20003f0c 	.word	0x20003f0c
 8013ce8:	20003efc 	.word	0x20003efc
 8013cec:	20003ef0 	.word	0x20003ef0
 8013cf0:	20003f00 	.word	0x20003f00
 8013cf4:	20003f04 	.word	0x20003f04

08013cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b086      	sub	sp, #24
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d04f      	beq.n	8013daa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013d0a:	2308      	movs	r3, #8
 8013d0c:	425b      	negs	r3, r3
 8013d0e:	697a      	ldr	r2, [r7, #20]
 8013d10:	4413      	add	r3, r2
 8013d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	685a      	ldr	r2, [r3, #4]
 8013d1c:	4b25      	ldr	r3, [pc, #148]	@ (8013db4 <vPortFree+0xbc>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	4013      	ands	r3, r2
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d10b      	bne.n	8013d3e <vPortFree+0x46>
	__asm volatile
 8013d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d2a:	f383 8811 	msr	BASEPRI, r3
 8013d2e:	f3bf 8f6f 	isb	sy
 8013d32:	f3bf 8f4f 	dsb	sy
 8013d36:	60fb      	str	r3, [r7, #12]
}
 8013d38:	bf00      	nop
 8013d3a:	bf00      	nop
 8013d3c:	e7fd      	b.n	8013d3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d00b      	beq.n	8013d5e <vPortFree+0x66>
	__asm volatile
 8013d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d4a:	f383 8811 	msr	BASEPRI, r3
 8013d4e:	f3bf 8f6f 	isb	sy
 8013d52:	f3bf 8f4f 	dsb	sy
 8013d56:	60bb      	str	r3, [r7, #8]
}
 8013d58:	bf00      	nop
 8013d5a:	bf00      	nop
 8013d5c:	e7fd      	b.n	8013d5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013d5e:	693b      	ldr	r3, [r7, #16]
 8013d60:	685a      	ldr	r2, [r3, #4]
 8013d62:	4b14      	ldr	r3, [pc, #80]	@ (8013db4 <vPortFree+0xbc>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	4013      	ands	r3, r2
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d01e      	beq.n	8013daa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d11a      	bne.n	8013daa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	685a      	ldr	r2, [r3, #4]
 8013d78:	4b0e      	ldr	r3, [pc, #56]	@ (8013db4 <vPortFree+0xbc>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	43db      	mvns	r3, r3
 8013d7e:	401a      	ands	r2, r3
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013d84:	f7fe fee6 	bl	8012b54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	685a      	ldr	r2, [r3, #4]
 8013d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8013db8 <vPortFree+0xc0>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4413      	add	r3, r2
 8013d92:	4a09      	ldr	r2, [pc, #36]	@ (8013db8 <vPortFree+0xc0>)
 8013d94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013d96:	6938      	ldr	r0, [r7, #16]
 8013d98:	f000 f874 	bl	8013e84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013d9c:	4b07      	ldr	r3, [pc, #28]	@ (8013dbc <vPortFree+0xc4>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	3301      	adds	r3, #1
 8013da2:	4a06      	ldr	r2, [pc, #24]	@ (8013dbc <vPortFree+0xc4>)
 8013da4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013da6:	f7fe fee3 	bl	8012b70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013daa:	bf00      	nop
 8013dac:	3718      	adds	r7, #24
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	20003f0c 	.word	0x20003f0c
 8013db8:	20003efc 	.word	0x20003efc
 8013dbc:	20003f08 	.word	0x20003f08

08013dc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b085      	sub	sp, #20
 8013dc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013dc6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013dca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013dcc:	4b27      	ldr	r3, [pc, #156]	@ (8013e6c <prvHeapInit+0xac>)
 8013dce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f003 0307 	and.w	r3, r3, #7
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d00c      	beq.n	8013df4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	3307      	adds	r3, #7
 8013dde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f023 0307 	bic.w	r3, r3, #7
 8013de6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013de8:	68ba      	ldr	r2, [r7, #8]
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	1ad3      	subs	r3, r2, r3
 8013dee:	4a1f      	ldr	r2, [pc, #124]	@ (8013e6c <prvHeapInit+0xac>)
 8013df0:	4413      	add	r3, r2
 8013df2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013df8:	4a1d      	ldr	r2, [pc, #116]	@ (8013e70 <prvHeapInit+0xb0>)
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8013e70 <prvHeapInit+0xb0>)
 8013e00:	2200      	movs	r2, #0
 8013e02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	68ba      	ldr	r2, [r7, #8]
 8013e08:	4413      	add	r3, r2
 8013e0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013e0c:	2208      	movs	r2, #8
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	1a9b      	subs	r3, r3, r2
 8013e12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	f023 0307 	bic.w	r3, r3, #7
 8013e1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	4a15      	ldr	r2, [pc, #84]	@ (8013e74 <prvHeapInit+0xb4>)
 8013e20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013e22:	4b14      	ldr	r3, [pc, #80]	@ (8013e74 <prvHeapInit+0xb4>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	2200      	movs	r2, #0
 8013e28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013e2a:	4b12      	ldr	r3, [pc, #72]	@ (8013e74 <prvHeapInit+0xb4>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	68fa      	ldr	r2, [r7, #12]
 8013e3a:	1ad2      	subs	r2, r2, r3
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013e40:	4b0c      	ldr	r3, [pc, #48]	@ (8013e74 <prvHeapInit+0xb4>)
 8013e42:	681a      	ldr	r2, [r3, #0]
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8013e78 <prvHeapInit+0xb8>)
 8013e4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	685b      	ldr	r3, [r3, #4]
 8013e54:	4a09      	ldr	r2, [pc, #36]	@ (8013e7c <prvHeapInit+0xbc>)
 8013e56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013e58:	4b09      	ldr	r3, [pc, #36]	@ (8013e80 <prvHeapInit+0xc0>)
 8013e5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013e5e:	601a      	str	r2, [r3, #0]
}
 8013e60:	bf00      	nop
 8013e62:	3714      	adds	r7, #20
 8013e64:	46bd      	mov	sp, r7
 8013e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6a:	4770      	bx	lr
 8013e6c:	200017e0 	.word	0x200017e0
 8013e70:	20003ef0 	.word	0x20003ef0
 8013e74:	20003ef8 	.word	0x20003ef8
 8013e78:	20003f00 	.word	0x20003f00
 8013e7c:	20003efc 	.word	0x20003efc
 8013e80:	20003f0c 	.word	0x20003f0c

08013e84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013e84:	b480      	push	{r7}
 8013e86:	b085      	sub	sp, #20
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013e8c:	4b28      	ldr	r3, [pc, #160]	@ (8013f30 <prvInsertBlockIntoFreeList+0xac>)
 8013e8e:	60fb      	str	r3, [r7, #12]
 8013e90:	e002      	b.n	8013e98 <prvInsertBlockIntoFreeList+0x14>
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	60fb      	str	r3, [r7, #12]
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d8f7      	bhi.n	8013e92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	68ba      	ldr	r2, [r7, #8]
 8013eac:	4413      	add	r3, r2
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d108      	bne.n	8013ec6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	685a      	ldr	r2, [r3, #4]
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	441a      	add	r2, r3
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	68ba      	ldr	r2, [r7, #8]
 8013ed0:	441a      	add	r2, r3
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d118      	bne.n	8013f0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681a      	ldr	r2, [r3, #0]
 8013ede:	4b15      	ldr	r3, [pc, #84]	@ (8013f34 <prvInsertBlockIntoFreeList+0xb0>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d00d      	beq.n	8013f02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	685a      	ldr	r2, [r3, #4]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	685b      	ldr	r3, [r3, #4]
 8013ef0:	441a      	add	r2, r3
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	601a      	str	r2, [r3, #0]
 8013f00:	e008      	b.n	8013f14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013f02:	4b0c      	ldr	r3, [pc, #48]	@ (8013f34 <prvInsertBlockIntoFreeList+0xb0>)
 8013f04:	681a      	ldr	r2, [r3, #0]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	601a      	str	r2, [r3, #0]
 8013f0a:	e003      	b.n	8013f14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013f14:	68fa      	ldr	r2, [r7, #12]
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d002      	beq.n	8013f22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f22:	bf00      	nop
 8013f24:	3714      	adds	r7, #20
 8013f26:	46bd      	mov	sp, r7
 8013f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2c:	4770      	bx	lr
 8013f2e:	bf00      	nop
 8013f30:	20003ef0 	.word	0x20003ef0
 8013f34:	20003ef8 	.word	0x20003ef8

08013f38 <__cvt>:
 8013f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f3c:	ec57 6b10 	vmov	r6, r7, d0
 8013f40:	2f00      	cmp	r7, #0
 8013f42:	460c      	mov	r4, r1
 8013f44:	4619      	mov	r1, r3
 8013f46:	463b      	mov	r3, r7
 8013f48:	bfbb      	ittet	lt
 8013f4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013f4e:	461f      	movlt	r7, r3
 8013f50:	2300      	movge	r3, #0
 8013f52:	232d      	movlt	r3, #45	@ 0x2d
 8013f54:	700b      	strb	r3, [r1, #0]
 8013f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013f5c:	4691      	mov	r9, r2
 8013f5e:	f023 0820 	bic.w	r8, r3, #32
 8013f62:	bfbc      	itt	lt
 8013f64:	4632      	movlt	r2, r6
 8013f66:	4616      	movlt	r6, r2
 8013f68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013f6c:	d005      	beq.n	8013f7a <__cvt+0x42>
 8013f6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013f72:	d100      	bne.n	8013f76 <__cvt+0x3e>
 8013f74:	3401      	adds	r4, #1
 8013f76:	2102      	movs	r1, #2
 8013f78:	e000      	b.n	8013f7c <__cvt+0x44>
 8013f7a:	2103      	movs	r1, #3
 8013f7c:	ab03      	add	r3, sp, #12
 8013f7e:	9301      	str	r3, [sp, #4]
 8013f80:	ab02      	add	r3, sp, #8
 8013f82:	9300      	str	r3, [sp, #0]
 8013f84:	ec47 6b10 	vmov	d0, r6, r7
 8013f88:	4653      	mov	r3, sl
 8013f8a:	4622      	mov	r2, r4
 8013f8c:	f001 f9a4 	bl	80152d8 <_dtoa_r>
 8013f90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013f94:	4605      	mov	r5, r0
 8013f96:	d119      	bne.n	8013fcc <__cvt+0x94>
 8013f98:	f019 0f01 	tst.w	r9, #1
 8013f9c:	d00e      	beq.n	8013fbc <__cvt+0x84>
 8013f9e:	eb00 0904 	add.w	r9, r0, r4
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	4639      	mov	r1, r7
 8013faa:	f7ec fdb5 	bl	8000b18 <__aeabi_dcmpeq>
 8013fae:	b108      	cbz	r0, 8013fb4 <__cvt+0x7c>
 8013fb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8013fb4:	2230      	movs	r2, #48	@ 0x30
 8013fb6:	9b03      	ldr	r3, [sp, #12]
 8013fb8:	454b      	cmp	r3, r9
 8013fba:	d31e      	bcc.n	8013ffa <__cvt+0xc2>
 8013fbc:	9b03      	ldr	r3, [sp, #12]
 8013fbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013fc0:	1b5b      	subs	r3, r3, r5
 8013fc2:	4628      	mov	r0, r5
 8013fc4:	6013      	str	r3, [r2, #0]
 8013fc6:	b004      	add	sp, #16
 8013fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013fd0:	eb00 0904 	add.w	r9, r0, r4
 8013fd4:	d1e5      	bne.n	8013fa2 <__cvt+0x6a>
 8013fd6:	7803      	ldrb	r3, [r0, #0]
 8013fd8:	2b30      	cmp	r3, #48	@ 0x30
 8013fda:	d10a      	bne.n	8013ff2 <__cvt+0xba>
 8013fdc:	2200      	movs	r2, #0
 8013fde:	2300      	movs	r3, #0
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	4639      	mov	r1, r7
 8013fe4:	f7ec fd98 	bl	8000b18 <__aeabi_dcmpeq>
 8013fe8:	b918      	cbnz	r0, 8013ff2 <__cvt+0xba>
 8013fea:	f1c4 0401 	rsb	r4, r4, #1
 8013fee:	f8ca 4000 	str.w	r4, [sl]
 8013ff2:	f8da 3000 	ldr.w	r3, [sl]
 8013ff6:	4499      	add	r9, r3
 8013ff8:	e7d3      	b.n	8013fa2 <__cvt+0x6a>
 8013ffa:	1c59      	adds	r1, r3, #1
 8013ffc:	9103      	str	r1, [sp, #12]
 8013ffe:	701a      	strb	r2, [r3, #0]
 8014000:	e7d9      	b.n	8013fb6 <__cvt+0x7e>

08014002 <__exponent>:
 8014002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014004:	2900      	cmp	r1, #0
 8014006:	bfba      	itte	lt
 8014008:	4249      	neglt	r1, r1
 801400a:	232d      	movlt	r3, #45	@ 0x2d
 801400c:	232b      	movge	r3, #43	@ 0x2b
 801400e:	2909      	cmp	r1, #9
 8014010:	7002      	strb	r2, [r0, #0]
 8014012:	7043      	strb	r3, [r0, #1]
 8014014:	dd29      	ble.n	801406a <__exponent+0x68>
 8014016:	f10d 0307 	add.w	r3, sp, #7
 801401a:	461d      	mov	r5, r3
 801401c:	270a      	movs	r7, #10
 801401e:	461a      	mov	r2, r3
 8014020:	fbb1 f6f7 	udiv	r6, r1, r7
 8014024:	fb07 1416 	mls	r4, r7, r6, r1
 8014028:	3430      	adds	r4, #48	@ 0x30
 801402a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801402e:	460c      	mov	r4, r1
 8014030:	2c63      	cmp	r4, #99	@ 0x63
 8014032:	f103 33ff 	add.w	r3, r3, #4294967295
 8014036:	4631      	mov	r1, r6
 8014038:	dcf1      	bgt.n	801401e <__exponent+0x1c>
 801403a:	3130      	adds	r1, #48	@ 0x30
 801403c:	1e94      	subs	r4, r2, #2
 801403e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014042:	1c41      	adds	r1, r0, #1
 8014044:	4623      	mov	r3, r4
 8014046:	42ab      	cmp	r3, r5
 8014048:	d30a      	bcc.n	8014060 <__exponent+0x5e>
 801404a:	f10d 0309 	add.w	r3, sp, #9
 801404e:	1a9b      	subs	r3, r3, r2
 8014050:	42ac      	cmp	r4, r5
 8014052:	bf88      	it	hi
 8014054:	2300      	movhi	r3, #0
 8014056:	3302      	adds	r3, #2
 8014058:	4403      	add	r3, r0
 801405a:	1a18      	subs	r0, r3, r0
 801405c:	b003      	add	sp, #12
 801405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014060:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014064:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014068:	e7ed      	b.n	8014046 <__exponent+0x44>
 801406a:	2330      	movs	r3, #48	@ 0x30
 801406c:	3130      	adds	r1, #48	@ 0x30
 801406e:	7083      	strb	r3, [r0, #2]
 8014070:	70c1      	strb	r1, [r0, #3]
 8014072:	1d03      	adds	r3, r0, #4
 8014074:	e7f1      	b.n	801405a <__exponent+0x58>
	...

08014078 <_printf_float>:
 8014078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801407c:	b08d      	sub	sp, #52	@ 0x34
 801407e:	460c      	mov	r4, r1
 8014080:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014084:	4616      	mov	r6, r2
 8014086:	461f      	mov	r7, r3
 8014088:	4605      	mov	r5, r0
 801408a:	f001 f811 	bl	80150b0 <_localeconv_r>
 801408e:	6803      	ldr	r3, [r0, #0]
 8014090:	9304      	str	r3, [sp, #16]
 8014092:	4618      	mov	r0, r3
 8014094:	f7ec f914 	bl	80002c0 <strlen>
 8014098:	2300      	movs	r3, #0
 801409a:	930a      	str	r3, [sp, #40]	@ 0x28
 801409c:	f8d8 3000 	ldr.w	r3, [r8]
 80140a0:	9005      	str	r0, [sp, #20]
 80140a2:	3307      	adds	r3, #7
 80140a4:	f023 0307 	bic.w	r3, r3, #7
 80140a8:	f103 0208 	add.w	r2, r3, #8
 80140ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80140b0:	f8d4 b000 	ldr.w	fp, [r4]
 80140b4:	f8c8 2000 	str.w	r2, [r8]
 80140b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80140bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80140c0:	9307      	str	r3, [sp, #28]
 80140c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80140c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80140ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80140ce:	4b9c      	ldr	r3, [pc, #624]	@ (8014340 <_printf_float+0x2c8>)
 80140d0:	f04f 32ff 	mov.w	r2, #4294967295
 80140d4:	f7ec fd52 	bl	8000b7c <__aeabi_dcmpun>
 80140d8:	bb70      	cbnz	r0, 8014138 <_printf_float+0xc0>
 80140da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80140de:	4b98      	ldr	r3, [pc, #608]	@ (8014340 <_printf_float+0x2c8>)
 80140e0:	f04f 32ff 	mov.w	r2, #4294967295
 80140e4:	f7ec fd2c 	bl	8000b40 <__aeabi_dcmple>
 80140e8:	bb30      	cbnz	r0, 8014138 <_printf_float+0xc0>
 80140ea:	2200      	movs	r2, #0
 80140ec:	2300      	movs	r3, #0
 80140ee:	4640      	mov	r0, r8
 80140f0:	4649      	mov	r1, r9
 80140f2:	f7ec fd1b 	bl	8000b2c <__aeabi_dcmplt>
 80140f6:	b110      	cbz	r0, 80140fe <_printf_float+0x86>
 80140f8:	232d      	movs	r3, #45	@ 0x2d
 80140fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140fe:	4a91      	ldr	r2, [pc, #580]	@ (8014344 <_printf_float+0x2cc>)
 8014100:	4b91      	ldr	r3, [pc, #580]	@ (8014348 <_printf_float+0x2d0>)
 8014102:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014106:	bf8c      	ite	hi
 8014108:	4690      	movhi	r8, r2
 801410a:	4698      	movls	r8, r3
 801410c:	2303      	movs	r3, #3
 801410e:	6123      	str	r3, [r4, #16]
 8014110:	f02b 0304 	bic.w	r3, fp, #4
 8014114:	6023      	str	r3, [r4, #0]
 8014116:	f04f 0900 	mov.w	r9, #0
 801411a:	9700      	str	r7, [sp, #0]
 801411c:	4633      	mov	r3, r6
 801411e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014120:	4621      	mov	r1, r4
 8014122:	4628      	mov	r0, r5
 8014124:	f000 f9d2 	bl	80144cc <_printf_common>
 8014128:	3001      	adds	r0, #1
 801412a:	f040 808d 	bne.w	8014248 <_printf_float+0x1d0>
 801412e:	f04f 30ff 	mov.w	r0, #4294967295
 8014132:	b00d      	add	sp, #52	@ 0x34
 8014134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014138:	4642      	mov	r2, r8
 801413a:	464b      	mov	r3, r9
 801413c:	4640      	mov	r0, r8
 801413e:	4649      	mov	r1, r9
 8014140:	f7ec fd1c 	bl	8000b7c <__aeabi_dcmpun>
 8014144:	b140      	cbz	r0, 8014158 <_printf_float+0xe0>
 8014146:	464b      	mov	r3, r9
 8014148:	2b00      	cmp	r3, #0
 801414a:	bfbc      	itt	lt
 801414c:	232d      	movlt	r3, #45	@ 0x2d
 801414e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014152:	4a7e      	ldr	r2, [pc, #504]	@ (801434c <_printf_float+0x2d4>)
 8014154:	4b7e      	ldr	r3, [pc, #504]	@ (8014350 <_printf_float+0x2d8>)
 8014156:	e7d4      	b.n	8014102 <_printf_float+0x8a>
 8014158:	6863      	ldr	r3, [r4, #4]
 801415a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801415e:	9206      	str	r2, [sp, #24]
 8014160:	1c5a      	adds	r2, r3, #1
 8014162:	d13b      	bne.n	80141dc <_printf_float+0x164>
 8014164:	2306      	movs	r3, #6
 8014166:	6063      	str	r3, [r4, #4]
 8014168:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801416c:	2300      	movs	r3, #0
 801416e:	6022      	str	r2, [r4, #0]
 8014170:	9303      	str	r3, [sp, #12]
 8014172:	ab0a      	add	r3, sp, #40	@ 0x28
 8014174:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014178:	ab09      	add	r3, sp, #36	@ 0x24
 801417a:	9300      	str	r3, [sp, #0]
 801417c:	6861      	ldr	r1, [r4, #4]
 801417e:	ec49 8b10 	vmov	d0, r8, r9
 8014182:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014186:	4628      	mov	r0, r5
 8014188:	f7ff fed6 	bl	8013f38 <__cvt>
 801418c:	9b06      	ldr	r3, [sp, #24]
 801418e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014190:	2b47      	cmp	r3, #71	@ 0x47
 8014192:	4680      	mov	r8, r0
 8014194:	d129      	bne.n	80141ea <_printf_float+0x172>
 8014196:	1cc8      	adds	r0, r1, #3
 8014198:	db02      	blt.n	80141a0 <_printf_float+0x128>
 801419a:	6863      	ldr	r3, [r4, #4]
 801419c:	4299      	cmp	r1, r3
 801419e:	dd41      	ble.n	8014224 <_printf_float+0x1ac>
 80141a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80141a4:	fa5f fa8a 	uxtb.w	sl, sl
 80141a8:	3901      	subs	r1, #1
 80141aa:	4652      	mov	r2, sl
 80141ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80141b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80141b2:	f7ff ff26 	bl	8014002 <__exponent>
 80141b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80141b8:	1813      	adds	r3, r2, r0
 80141ba:	2a01      	cmp	r2, #1
 80141bc:	4681      	mov	r9, r0
 80141be:	6123      	str	r3, [r4, #16]
 80141c0:	dc02      	bgt.n	80141c8 <_printf_float+0x150>
 80141c2:	6822      	ldr	r2, [r4, #0]
 80141c4:	07d2      	lsls	r2, r2, #31
 80141c6:	d501      	bpl.n	80141cc <_printf_float+0x154>
 80141c8:	3301      	adds	r3, #1
 80141ca:	6123      	str	r3, [r4, #16]
 80141cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d0a2      	beq.n	801411a <_printf_float+0xa2>
 80141d4:	232d      	movs	r3, #45	@ 0x2d
 80141d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80141da:	e79e      	b.n	801411a <_printf_float+0xa2>
 80141dc:	9a06      	ldr	r2, [sp, #24]
 80141de:	2a47      	cmp	r2, #71	@ 0x47
 80141e0:	d1c2      	bne.n	8014168 <_printf_float+0xf0>
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d1c0      	bne.n	8014168 <_printf_float+0xf0>
 80141e6:	2301      	movs	r3, #1
 80141e8:	e7bd      	b.n	8014166 <_printf_float+0xee>
 80141ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80141ee:	d9db      	bls.n	80141a8 <_printf_float+0x130>
 80141f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80141f4:	d118      	bne.n	8014228 <_printf_float+0x1b0>
 80141f6:	2900      	cmp	r1, #0
 80141f8:	6863      	ldr	r3, [r4, #4]
 80141fa:	dd0b      	ble.n	8014214 <_printf_float+0x19c>
 80141fc:	6121      	str	r1, [r4, #16]
 80141fe:	b913      	cbnz	r3, 8014206 <_printf_float+0x18e>
 8014200:	6822      	ldr	r2, [r4, #0]
 8014202:	07d0      	lsls	r0, r2, #31
 8014204:	d502      	bpl.n	801420c <_printf_float+0x194>
 8014206:	3301      	adds	r3, #1
 8014208:	440b      	add	r3, r1
 801420a:	6123      	str	r3, [r4, #16]
 801420c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801420e:	f04f 0900 	mov.w	r9, #0
 8014212:	e7db      	b.n	80141cc <_printf_float+0x154>
 8014214:	b913      	cbnz	r3, 801421c <_printf_float+0x1a4>
 8014216:	6822      	ldr	r2, [r4, #0]
 8014218:	07d2      	lsls	r2, r2, #31
 801421a:	d501      	bpl.n	8014220 <_printf_float+0x1a8>
 801421c:	3302      	adds	r3, #2
 801421e:	e7f4      	b.n	801420a <_printf_float+0x192>
 8014220:	2301      	movs	r3, #1
 8014222:	e7f2      	b.n	801420a <_printf_float+0x192>
 8014224:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801422a:	4299      	cmp	r1, r3
 801422c:	db05      	blt.n	801423a <_printf_float+0x1c2>
 801422e:	6823      	ldr	r3, [r4, #0]
 8014230:	6121      	str	r1, [r4, #16]
 8014232:	07d8      	lsls	r0, r3, #31
 8014234:	d5ea      	bpl.n	801420c <_printf_float+0x194>
 8014236:	1c4b      	adds	r3, r1, #1
 8014238:	e7e7      	b.n	801420a <_printf_float+0x192>
 801423a:	2900      	cmp	r1, #0
 801423c:	bfd4      	ite	le
 801423e:	f1c1 0202 	rsble	r2, r1, #2
 8014242:	2201      	movgt	r2, #1
 8014244:	4413      	add	r3, r2
 8014246:	e7e0      	b.n	801420a <_printf_float+0x192>
 8014248:	6823      	ldr	r3, [r4, #0]
 801424a:	055a      	lsls	r2, r3, #21
 801424c:	d407      	bmi.n	801425e <_printf_float+0x1e6>
 801424e:	6923      	ldr	r3, [r4, #16]
 8014250:	4642      	mov	r2, r8
 8014252:	4631      	mov	r1, r6
 8014254:	4628      	mov	r0, r5
 8014256:	47b8      	blx	r7
 8014258:	3001      	adds	r0, #1
 801425a:	d12b      	bne.n	80142b4 <_printf_float+0x23c>
 801425c:	e767      	b.n	801412e <_printf_float+0xb6>
 801425e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014262:	f240 80dd 	bls.w	8014420 <_printf_float+0x3a8>
 8014266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801426a:	2200      	movs	r2, #0
 801426c:	2300      	movs	r3, #0
 801426e:	f7ec fc53 	bl	8000b18 <__aeabi_dcmpeq>
 8014272:	2800      	cmp	r0, #0
 8014274:	d033      	beq.n	80142de <_printf_float+0x266>
 8014276:	4a37      	ldr	r2, [pc, #220]	@ (8014354 <_printf_float+0x2dc>)
 8014278:	2301      	movs	r3, #1
 801427a:	4631      	mov	r1, r6
 801427c:	4628      	mov	r0, r5
 801427e:	47b8      	blx	r7
 8014280:	3001      	adds	r0, #1
 8014282:	f43f af54 	beq.w	801412e <_printf_float+0xb6>
 8014286:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801428a:	4543      	cmp	r3, r8
 801428c:	db02      	blt.n	8014294 <_printf_float+0x21c>
 801428e:	6823      	ldr	r3, [r4, #0]
 8014290:	07d8      	lsls	r0, r3, #31
 8014292:	d50f      	bpl.n	80142b4 <_printf_float+0x23c>
 8014294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014298:	4631      	mov	r1, r6
 801429a:	4628      	mov	r0, r5
 801429c:	47b8      	blx	r7
 801429e:	3001      	adds	r0, #1
 80142a0:	f43f af45 	beq.w	801412e <_printf_float+0xb6>
 80142a4:	f04f 0900 	mov.w	r9, #0
 80142a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80142ac:	f104 0a1a 	add.w	sl, r4, #26
 80142b0:	45c8      	cmp	r8, r9
 80142b2:	dc09      	bgt.n	80142c8 <_printf_float+0x250>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	079b      	lsls	r3, r3, #30
 80142b8:	f100 8103 	bmi.w	80144c2 <_printf_float+0x44a>
 80142bc:	68e0      	ldr	r0, [r4, #12]
 80142be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142c0:	4298      	cmp	r0, r3
 80142c2:	bfb8      	it	lt
 80142c4:	4618      	movlt	r0, r3
 80142c6:	e734      	b.n	8014132 <_printf_float+0xba>
 80142c8:	2301      	movs	r3, #1
 80142ca:	4652      	mov	r2, sl
 80142cc:	4631      	mov	r1, r6
 80142ce:	4628      	mov	r0, r5
 80142d0:	47b8      	blx	r7
 80142d2:	3001      	adds	r0, #1
 80142d4:	f43f af2b 	beq.w	801412e <_printf_float+0xb6>
 80142d8:	f109 0901 	add.w	r9, r9, #1
 80142dc:	e7e8      	b.n	80142b0 <_printf_float+0x238>
 80142de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	dc39      	bgt.n	8014358 <_printf_float+0x2e0>
 80142e4:	4a1b      	ldr	r2, [pc, #108]	@ (8014354 <_printf_float+0x2dc>)
 80142e6:	2301      	movs	r3, #1
 80142e8:	4631      	mov	r1, r6
 80142ea:	4628      	mov	r0, r5
 80142ec:	47b8      	blx	r7
 80142ee:	3001      	adds	r0, #1
 80142f0:	f43f af1d 	beq.w	801412e <_printf_float+0xb6>
 80142f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80142f8:	ea59 0303 	orrs.w	r3, r9, r3
 80142fc:	d102      	bne.n	8014304 <_printf_float+0x28c>
 80142fe:	6823      	ldr	r3, [r4, #0]
 8014300:	07d9      	lsls	r1, r3, #31
 8014302:	d5d7      	bpl.n	80142b4 <_printf_float+0x23c>
 8014304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014308:	4631      	mov	r1, r6
 801430a:	4628      	mov	r0, r5
 801430c:	47b8      	blx	r7
 801430e:	3001      	adds	r0, #1
 8014310:	f43f af0d 	beq.w	801412e <_printf_float+0xb6>
 8014314:	f04f 0a00 	mov.w	sl, #0
 8014318:	f104 0b1a 	add.w	fp, r4, #26
 801431c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801431e:	425b      	negs	r3, r3
 8014320:	4553      	cmp	r3, sl
 8014322:	dc01      	bgt.n	8014328 <_printf_float+0x2b0>
 8014324:	464b      	mov	r3, r9
 8014326:	e793      	b.n	8014250 <_printf_float+0x1d8>
 8014328:	2301      	movs	r3, #1
 801432a:	465a      	mov	r2, fp
 801432c:	4631      	mov	r1, r6
 801432e:	4628      	mov	r0, r5
 8014330:	47b8      	blx	r7
 8014332:	3001      	adds	r0, #1
 8014334:	f43f aefb 	beq.w	801412e <_printf_float+0xb6>
 8014338:	f10a 0a01 	add.w	sl, sl, #1
 801433c:	e7ee      	b.n	801431c <_printf_float+0x2a4>
 801433e:	bf00      	nop
 8014340:	7fefffff 	.word	0x7fefffff
 8014344:	0801b5f8 	.word	0x0801b5f8
 8014348:	0801b5f4 	.word	0x0801b5f4
 801434c:	0801b600 	.word	0x0801b600
 8014350:	0801b5fc 	.word	0x0801b5fc
 8014354:	0801b604 	.word	0x0801b604
 8014358:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801435a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801435e:	4553      	cmp	r3, sl
 8014360:	bfa8      	it	ge
 8014362:	4653      	movge	r3, sl
 8014364:	2b00      	cmp	r3, #0
 8014366:	4699      	mov	r9, r3
 8014368:	dc36      	bgt.n	80143d8 <_printf_float+0x360>
 801436a:	f04f 0b00 	mov.w	fp, #0
 801436e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014372:	f104 021a 	add.w	r2, r4, #26
 8014376:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014378:	9306      	str	r3, [sp, #24]
 801437a:	eba3 0309 	sub.w	r3, r3, r9
 801437e:	455b      	cmp	r3, fp
 8014380:	dc31      	bgt.n	80143e6 <_printf_float+0x36e>
 8014382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014384:	459a      	cmp	sl, r3
 8014386:	dc3a      	bgt.n	80143fe <_printf_float+0x386>
 8014388:	6823      	ldr	r3, [r4, #0]
 801438a:	07da      	lsls	r2, r3, #31
 801438c:	d437      	bmi.n	80143fe <_printf_float+0x386>
 801438e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014390:	ebaa 0903 	sub.w	r9, sl, r3
 8014394:	9b06      	ldr	r3, [sp, #24]
 8014396:	ebaa 0303 	sub.w	r3, sl, r3
 801439a:	4599      	cmp	r9, r3
 801439c:	bfa8      	it	ge
 801439e:	4699      	movge	r9, r3
 80143a0:	f1b9 0f00 	cmp.w	r9, #0
 80143a4:	dc33      	bgt.n	801440e <_printf_float+0x396>
 80143a6:	f04f 0800 	mov.w	r8, #0
 80143aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80143ae:	f104 0b1a 	add.w	fp, r4, #26
 80143b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143b4:	ebaa 0303 	sub.w	r3, sl, r3
 80143b8:	eba3 0309 	sub.w	r3, r3, r9
 80143bc:	4543      	cmp	r3, r8
 80143be:	f77f af79 	ble.w	80142b4 <_printf_float+0x23c>
 80143c2:	2301      	movs	r3, #1
 80143c4:	465a      	mov	r2, fp
 80143c6:	4631      	mov	r1, r6
 80143c8:	4628      	mov	r0, r5
 80143ca:	47b8      	blx	r7
 80143cc:	3001      	adds	r0, #1
 80143ce:	f43f aeae 	beq.w	801412e <_printf_float+0xb6>
 80143d2:	f108 0801 	add.w	r8, r8, #1
 80143d6:	e7ec      	b.n	80143b2 <_printf_float+0x33a>
 80143d8:	4642      	mov	r2, r8
 80143da:	4631      	mov	r1, r6
 80143dc:	4628      	mov	r0, r5
 80143de:	47b8      	blx	r7
 80143e0:	3001      	adds	r0, #1
 80143e2:	d1c2      	bne.n	801436a <_printf_float+0x2f2>
 80143e4:	e6a3      	b.n	801412e <_printf_float+0xb6>
 80143e6:	2301      	movs	r3, #1
 80143e8:	4631      	mov	r1, r6
 80143ea:	4628      	mov	r0, r5
 80143ec:	9206      	str	r2, [sp, #24]
 80143ee:	47b8      	blx	r7
 80143f0:	3001      	adds	r0, #1
 80143f2:	f43f ae9c 	beq.w	801412e <_printf_float+0xb6>
 80143f6:	9a06      	ldr	r2, [sp, #24]
 80143f8:	f10b 0b01 	add.w	fp, fp, #1
 80143fc:	e7bb      	b.n	8014376 <_printf_float+0x2fe>
 80143fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014402:	4631      	mov	r1, r6
 8014404:	4628      	mov	r0, r5
 8014406:	47b8      	blx	r7
 8014408:	3001      	adds	r0, #1
 801440a:	d1c0      	bne.n	801438e <_printf_float+0x316>
 801440c:	e68f      	b.n	801412e <_printf_float+0xb6>
 801440e:	9a06      	ldr	r2, [sp, #24]
 8014410:	464b      	mov	r3, r9
 8014412:	4442      	add	r2, r8
 8014414:	4631      	mov	r1, r6
 8014416:	4628      	mov	r0, r5
 8014418:	47b8      	blx	r7
 801441a:	3001      	adds	r0, #1
 801441c:	d1c3      	bne.n	80143a6 <_printf_float+0x32e>
 801441e:	e686      	b.n	801412e <_printf_float+0xb6>
 8014420:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014424:	f1ba 0f01 	cmp.w	sl, #1
 8014428:	dc01      	bgt.n	801442e <_printf_float+0x3b6>
 801442a:	07db      	lsls	r3, r3, #31
 801442c:	d536      	bpl.n	801449c <_printf_float+0x424>
 801442e:	2301      	movs	r3, #1
 8014430:	4642      	mov	r2, r8
 8014432:	4631      	mov	r1, r6
 8014434:	4628      	mov	r0, r5
 8014436:	47b8      	blx	r7
 8014438:	3001      	adds	r0, #1
 801443a:	f43f ae78 	beq.w	801412e <_printf_float+0xb6>
 801443e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014442:	4631      	mov	r1, r6
 8014444:	4628      	mov	r0, r5
 8014446:	47b8      	blx	r7
 8014448:	3001      	adds	r0, #1
 801444a:	f43f ae70 	beq.w	801412e <_printf_float+0xb6>
 801444e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014452:	2200      	movs	r2, #0
 8014454:	2300      	movs	r3, #0
 8014456:	f10a 3aff 	add.w	sl, sl, #4294967295
 801445a:	f7ec fb5d 	bl	8000b18 <__aeabi_dcmpeq>
 801445e:	b9c0      	cbnz	r0, 8014492 <_printf_float+0x41a>
 8014460:	4653      	mov	r3, sl
 8014462:	f108 0201 	add.w	r2, r8, #1
 8014466:	4631      	mov	r1, r6
 8014468:	4628      	mov	r0, r5
 801446a:	47b8      	blx	r7
 801446c:	3001      	adds	r0, #1
 801446e:	d10c      	bne.n	801448a <_printf_float+0x412>
 8014470:	e65d      	b.n	801412e <_printf_float+0xb6>
 8014472:	2301      	movs	r3, #1
 8014474:	465a      	mov	r2, fp
 8014476:	4631      	mov	r1, r6
 8014478:	4628      	mov	r0, r5
 801447a:	47b8      	blx	r7
 801447c:	3001      	adds	r0, #1
 801447e:	f43f ae56 	beq.w	801412e <_printf_float+0xb6>
 8014482:	f108 0801 	add.w	r8, r8, #1
 8014486:	45d0      	cmp	r8, sl
 8014488:	dbf3      	blt.n	8014472 <_printf_float+0x3fa>
 801448a:	464b      	mov	r3, r9
 801448c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014490:	e6df      	b.n	8014252 <_printf_float+0x1da>
 8014492:	f04f 0800 	mov.w	r8, #0
 8014496:	f104 0b1a 	add.w	fp, r4, #26
 801449a:	e7f4      	b.n	8014486 <_printf_float+0x40e>
 801449c:	2301      	movs	r3, #1
 801449e:	4642      	mov	r2, r8
 80144a0:	e7e1      	b.n	8014466 <_printf_float+0x3ee>
 80144a2:	2301      	movs	r3, #1
 80144a4:	464a      	mov	r2, r9
 80144a6:	4631      	mov	r1, r6
 80144a8:	4628      	mov	r0, r5
 80144aa:	47b8      	blx	r7
 80144ac:	3001      	adds	r0, #1
 80144ae:	f43f ae3e 	beq.w	801412e <_printf_float+0xb6>
 80144b2:	f108 0801 	add.w	r8, r8, #1
 80144b6:	68e3      	ldr	r3, [r4, #12]
 80144b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80144ba:	1a5b      	subs	r3, r3, r1
 80144bc:	4543      	cmp	r3, r8
 80144be:	dcf0      	bgt.n	80144a2 <_printf_float+0x42a>
 80144c0:	e6fc      	b.n	80142bc <_printf_float+0x244>
 80144c2:	f04f 0800 	mov.w	r8, #0
 80144c6:	f104 0919 	add.w	r9, r4, #25
 80144ca:	e7f4      	b.n	80144b6 <_printf_float+0x43e>

080144cc <_printf_common>:
 80144cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144d0:	4616      	mov	r6, r2
 80144d2:	4698      	mov	r8, r3
 80144d4:	688a      	ldr	r2, [r1, #8]
 80144d6:	690b      	ldr	r3, [r1, #16]
 80144d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80144dc:	4293      	cmp	r3, r2
 80144de:	bfb8      	it	lt
 80144e0:	4613      	movlt	r3, r2
 80144e2:	6033      	str	r3, [r6, #0]
 80144e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80144e8:	4607      	mov	r7, r0
 80144ea:	460c      	mov	r4, r1
 80144ec:	b10a      	cbz	r2, 80144f2 <_printf_common+0x26>
 80144ee:	3301      	adds	r3, #1
 80144f0:	6033      	str	r3, [r6, #0]
 80144f2:	6823      	ldr	r3, [r4, #0]
 80144f4:	0699      	lsls	r1, r3, #26
 80144f6:	bf42      	ittt	mi
 80144f8:	6833      	ldrmi	r3, [r6, #0]
 80144fa:	3302      	addmi	r3, #2
 80144fc:	6033      	strmi	r3, [r6, #0]
 80144fe:	6825      	ldr	r5, [r4, #0]
 8014500:	f015 0506 	ands.w	r5, r5, #6
 8014504:	d106      	bne.n	8014514 <_printf_common+0x48>
 8014506:	f104 0a19 	add.w	sl, r4, #25
 801450a:	68e3      	ldr	r3, [r4, #12]
 801450c:	6832      	ldr	r2, [r6, #0]
 801450e:	1a9b      	subs	r3, r3, r2
 8014510:	42ab      	cmp	r3, r5
 8014512:	dc26      	bgt.n	8014562 <_printf_common+0x96>
 8014514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014518:	6822      	ldr	r2, [r4, #0]
 801451a:	3b00      	subs	r3, #0
 801451c:	bf18      	it	ne
 801451e:	2301      	movne	r3, #1
 8014520:	0692      	lsls	r2, r2, #26
 8014522:	d42b      	bmi.n	801457c <_printf_common+0xb0>
 8014524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014528:	4641      	mov	r1, r8
 801452a:	4638      	mov	r0, r7
 801452c:	47c8      	blx	r9
 801452e:	3001      	adds	r0, #1
 8014530:	d01e      	beq.n	8014570 <_printf_common+0xa4>
 8014532:	6823      	ldr	r3, [r4, #0]
 8014534:	6922      	ldr	r2, [r4, #16]
 8014536:	f003 0306 	and.w	r3, r3, #6
 801453a:	2b04      	cmp	r3, #4
 801453c:	bf02      	ittt	eq
 801453e:	68e5      	ldreq	r5, [r4, #12]
 8014540:	6833      	ldreq	r3, [r6, #0]
 8014542:	1aed      	subeq	r5, r5, r3
 8014544:	68a3      	ldr	r3, [r4, #8]
 8014546:	bf0c      	ite	eq
 8014548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801454c:	2500      	movne	r5, #0
 801454e:	4293      	cmp	r3, r2
 8014550:	bfc4      	itt	gt
 8014552:	1a9b      	subgt	r3, r3, r2
 8014554:	18ed      	addgt	r5, r5, r3
 8014556:	2600      	movs	r6, #0
 8014558:	341a      	adds	r4, #26
 801455a:	42b5      	cmp	r5, r6
 801455c:	d11a      	bne.n	8014594 <_printf_common+0xc8>
 801455e:	2000      	movs	r0, #0
 8014560:	e008      	b.n	8014574 <_printf_common+0xa8>
 8014562:	2301      	movs	r3, #1
 8014564:	4652      	mov	r2, sl
 8014566:	4641      	mov	r1, r8
 8014568:	4638      	mov	r0, r7
 801456a:	47c8      	blx	r9
 801456c:	3001      	adds	r0, #1
 801456e:	d103      	bne.n	8014578 <_printf_common+0xac>
 8014570:	f04f 30ff 	mov.w	r0, #4294967295
 8014574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014578:	3501      	adds	r5, #1
 801457a:	e7c6      	b.n	801450a <_printf_common+0x3e>
 801457c:	18e1      	adds	r1, r4, r3
 801457e:	1c5a      	adds	r2, r3, #1
 8014580:	2030      	movs	r0, #48	@ 0x30
 8014582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014586:	4422      	add	r2, r4
 8014588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801458c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014590:	3302      	adds	r3, #2
 8014592:	e7c7      	b.n	8014524 <_printf_common+0x58>
 8014594:	2301      	movs	r3, #1
 8014596:	4622      	mov	r2, r4
 8014598:	4641      	mov	r1, r8
 801459a:	4638      	mov	r0, r7
 801459c:	47c8      	blx	r9
 801459e:	3001      	adds	r0, #1
 80145a0:	d0e6      	beq.n	8014570 <_printf_common+0xa4>
 80145a2:	3601      	adds	r6, #1
 80145a4:	e7d9      	b.n	801455a <_printf_common+0x8e>
	...

080145a8 <_printf_i>:
 80145a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145ac:	7e0f      	ldrb	r7, [r1, #24]
 80145ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80145b0:	2f78      	cmp	r7, #120	@ 0x78
 80145b2:	4691      	mov	r9, r2
 80145b4:	4680      	mov	r8, r0
 80145b6:	460c      	mov	r4, r1
 80145b8:	469a      	mov	sl, r3
 80145ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80145be:	d807      	bhi.n	80145d0 <_printf_i+0x28>
 80145c0:	2f62      	cmp	r7, #98	@ 0x62
 80145c2:	d80a      	bhi.n	80145da <_printf_i+0x32>
 80145c4:	2f00      	cmp	r7, #0
 80145c6:	f000 80d1 	beq.w	801476c <_printf_i+0x1c4>
 80145ca:	2f58      	cmp	r7, #88	@ 0x58
 80145cc:	f000 80b8 	beq.w	8014740 <_printf_i+0x198>
 80145d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80145d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80145d8:	e03a      	b.n	8014650 <_printf_i+0xa8>
 80145da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80145de:	2b15      	cmp	r3, #21
 80145e0:	d8f6      	bhi.n	80145d0 <_printf_i+0x28>
 80145e2:	a101      	add	r1, pc, #4	@ (adr r1, 80145e8 <_printf_i+0x40>)
 80145e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80145e8:	08014641 	.word	0x08014641
 80145ec:	08014655 	.word	0x08014655
 80145f0:	080145d1 	.word	0x080145d1
 80145f4:	080145d1 	.word	0x080145d1
 80145f8:	080145d1 	.word	0x080145d1
 80145fc:	080145d1 	.word	0x080145d1
 8014600:	08014655 	.word	0x08014655
 8014604:	080145d1 	.word	0x080145d1
 8014608:	080145d1 	.word	0x080145d1
 801460c:	080145d1 	.word	0x080145d1
 8014610:	080145d1 	.word	0x080145d1
 8014614:	08014753 	.word	0x08014753
 8014618:	0801467f 	.word	0x0801467f
 801461c:	0801470d 	.word	0x0801470d
 8014620:	080145d1 	.word	0x080145d1
 8014624:	080145d1 	.word	0x080145d1
 8014628:	08014775 	.word	0x08014775
 801462c:	080145d1 	.word	0x080145d1
 8014630:	0801467f 	.word	0x0801467f
 8014634:	080145d1 	.word	0x080145d1
 8014638:	080145d1 	.word	0x080145d1
 801463c:	08014715 	.word	0x08014715
 8014640:	6833      	ldr	r3, [r6, #0]
 8014642:	1d1a      	adds	r2, r3, #4
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	6032      	str	r2, [r6, #0]
 8014648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801464c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014650:	2301      	movs	r3, #1
 8014652:	e09c      	b.n	801478e <_printf_i+0x1e6>
 8014654:	6833      	ldr	r3, [r6, #0]
 8014656:	6820      	ldr	r0, [r4, #0]
 8014658:	1d19      	adds	r1, r3, #4
 801465a:	6031      	str	r1, [r6, #0]
 801465c:	0606      	lsls	r6, r0, #24
 801465e:	d501      	bpl.n	8014664 <_printf_i+0xbc>
 8014660:	681d      	ldr	r5, [r3, #0]
 8014662:	e003      	b.n	801466c <_printf_i+0xc4>
 8014664:	0645      	lsls	r5, r0, #25
 8014666:	d5fb      	bpl.n	8014660 <_printf_i+0xb8>
 8014668:	f9b3 5000 	ldrsh.w	r5, [r3]
 801466c:	2d00      	cmp	r5, #0
 801466e:	da03      	bge.n	8014678 <_printf_i+0xd0>
 8014670:	232d      	movs	r3, #45	@ 0x2d
 8014672:	426d      	negs	r5, r5
 8014674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014678:	4858      	ldr	r0, [pc, #352]	@ (80147dc <_printf_i+0x234>)
 801467a:	230a      	movs	r3, #10
 801467c:	e011      	b.n	80146a2 <_printf_i+0xfa>
 801467e:	6821      	ldr	r1, [r4, #0]
 8014680:	6833      	ldr	r3, [r6, #0]
 8014682:	0608      	lsls	r0, r1, #24
 8014684:	f853 5b04 	ldr.w	r5, [r3], #4
 8014688:	d402      	bmi.n	8014690 <_printf_i+0xe8>
 801468a:	0649      	lsls	r1, r1, #25
 801468c:	bf48      	it	mi
 801468e:	b2ad      	uxthmi	r5, r5
 8014690:	2f6f      	cmp	r7, #111	@ 0x6f
 8014692:	4852      	ldr	r0, [pc, #328]	@ (80147dc <_printf_i+0x234>)
 8014694:	6033      	str	r3, [r6, #0]
 8014696:	bf14      	ite	ne
 8014698:	230a      	movne	r3, #10
 801469a:	2308      	moveq	r3, #8
 801469c:	2100      	movs	r1, #0
 801469e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80146a2:	6866      	ldr	r6, [r4, #4]
 80146a4:	60a6      	str	r6, [r4, #8]
 80146a6:	2e00      	cmp	r6, #0
 80146a8:	db05      	blt.n	80146b6 <_printf_i+0x10e>
 80146aa:	6821      	ldr	r1, [r4, #0]
 80146ac:	432e      	orrs	r6, r5
 80146ae:	f021 0104 	bic.w	r1, r1, #4
 80146b2:	6021      	str	r1, [r4, #0]
 80146b4:	d04b      	beq.n	801474e <_printf_i+0x1a6>
 80146b6:	4616      	mov	r6, r2
 80146b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80146bc:	fb03 5711 	mls	r7, r3, r1, r5
 80146c0:	5dc7      	ldrb	r7, [r0, r7]
 80146c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80146c6:	462f      	mov	r7, r5
 80146c8:	42bb      	cmp	r3, r7
 80146ca:	460d      	mov	r5, r1
 80146cc:	d9f4      	bls.n	80146b8 <_printf_i+0x110>
 80146ce:	2b08      	cmp	r3, #8
 80146d0:	d10b      	bne.n	80146ea <_printf_i+0x142>
 80146d2:	6823      	ldr	r3, [r4, #0]
 80146d4:	07df      	lsls	r7, r3, #31
 80146d6:	d508      	bpl.n	80146ea <_printf_i+0x142>
 80146d8:	6923      	ldr	r3, [r4, #16]
 80146da:	6861      	ldr	r1, [r4, #4]
 80146dc:	4299      	cmp	r1, r3
 80146de:	bfde      	ittt	le
 80146e0:	2330      	movle	r3, #48	@ 0x30
 80146e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80146e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80146ea:	1b92      	subs	r2, r2, r6
 80146ec:	6122      	str	r2, [r4, #16]
 80146ee:	f8cd a000 	str.w	sl, [sp]
 80146f2:	464b      	mov	r3, r9
 80146f4:	aa03      	add	r2, sp, #12
 80146f6:	4621      	mov	r1, r4
 80146f8:	4640      	mov	r0, r8
 80146fa:	f7ff fee7 	bl	80144cc <_printf_common>
 80146fe:	3001      	adds	r0, #1
 8014700:	d14a      	bne.n	8014798 <_printf_i+0x1f0>
 8014702:	f04f 30ff 	mov.w	r0, #4294967295
 8014706:	b004      	add	sp, #16
 8014708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801470c:	6823      	ldr	r3, [r4, #0]
 801470e:	f043 0320 	orr.w	r3, r3, #32
 8014712:	6023      	str	r3, [r4, #0]
 8014714:	4832      	ldr	r0, [pc, #200]	@ (80147e0 <_printf_i+0x238>)
 8014716:	2778      	movs	r7, #120	@ 0x78
 8014718:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801471c:	6823      	ldr	r3, [r4, #0]
 801471e:	6831      	ldr	r1, [r6, #0]
 8014720:	061f      	lsls	r7, r3, #24
 8014722:	f851 5b04 	ldr.w	r5, [r1], #4
 8014726:	d402      	bmi.n	801472e <_printf_i+0x186>
 8014728:	065f      	lsls	r7, r3, #25
 801472a:	bf48      	it	mi
 801472c:	b2ad      	uxthmi	r5, r5
 801472e:	6031      	str	r1, [r6, #0]
 8014730:	07d9      	lsls	r1, r3, #31
 8014732:	bf44      	itt	mi
 8014734:	f043 0320 	orrmi.w	r3, r3, #32
 8014738:	6023      	strmi	r3, [r4, #0]
 801473a:	b11d      	cbz	r5, 8014744 <_printf_i+0x19c>
 801473c:	2310      	movs	r3, #16
 801473e:	e7ad      	b.n	801469c <_printf_i+0xf4>
 8014740:	4826      	ldr	r0, [pc, #152]	@ (80147dc <_printf_i+0x234>)
 8014742:	e7e9      	b.n	8014718 <_printf_i+0x170>
 8014744:	6823      	ldr	r3, [r4, #0]
 8014746:	f023 0320 	bic.w	r3, r3, #32
 801474a:	6023      	str	r3, [r4, #0]
 801474c:	e7f6      	b.n	801473c <_printf_i+0x194>
 801474e:	4616      	mov	r6, r2
 8014750:	e7bd      	b.n	80146ce <_printf_i+0x126>
 8014752:	6833      	ldr	r3, [r6, #0]
 8014754:	6825      	ldr	r5, [r4, #0]
 8014756:	6961      	ldr	r1, [r4, #20]
 8014758:	1d18      	adds	r0, r3, #4
 801475a:	6030      	str	r0, [r6, #0]
 801475c:	062e      	lsls	r6, r5, #24
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	d501      	bpl.n	8014766 <_printf_i+0x1be>
 8014762:	6019      	str	r1, [r3, #0]
 8014764:	e002      	b.n	801476c <_printf_i+0x1c4>
 8014766:	0668      	lsls	r0, r5, #25
 8014768:	d5fb      	bpl.n	8014762 <_printf_i+0x1ba>
 801476a:	8019      	strh	r1, [r3, #0]
 801476c:	2300      	movs	r3, #0
 801476e:	6123      	str	r3, [r4, #16]
 8014770:	4616      	mov	r6, r2
 8014772:	e7bc      	b.n	80146ee <_printf_i+0x146>
 8014774:	6833      	ldr	r3, [r6, #0]
 8014776:	1d1a      	adds	r2, r3, #4
 8014778:	6032      	str	r2, [r6, #0]
 801477a:	681e      	ldr	r6, [r3, #0]
 801477c:	6862      	ldr	r2, [r4, #4]
 801477e:	2100      	movs	r1, #0
 8014780:	4630      	mov	r0, r6
 8014782:	f7eb fd4d 	bl	8000220 <memchr>
 8014786:	b108      	cbz	r0, 801478c <_printf_i+0x1e4>
 8014788:	1b80      	subs	r0, r0, r6
 801478a:	6060      	str	r0, [r4, #4]
 801478c:	6863      	ldr	r3, [r4, #4]
 801478e:	6123      	str	r3, [r4, #16]
 8014790:	2300      	movs	r3, #0
 8014792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014796:	e7aa      	b.n	80146ee <_printf_i+0x146>
 8014798:	6923      	ldr	r3, [r4, #16]
 801479a:	4632      	mov	r2, r6
 801479c:	4649      	mov	r1, r9
 801479e:	4640      	mov	r0, r8
 80147a0:	47d0      	blx	sl
 80147a2:	3001      	adds	r0, #1
 80147a4:	d0ad      	beq.n	8014702 <_printf_i+0x15a>
 80147a6:	6823      	ldr	r3, [r4, #0]
 80147a8:	079b      	lsls	r3, r3, #30
 80147aa:	d413      	bmi.n	80147d4 <_printf_i+0x22c>
 80147ac:	68e0      	ldr	r0, [r4, #12]
 80147ae:	9b03      	ldr	r3, [sp, #12]
 80147b0:	4298      	cmp	r0, r3
 80147b2:	bfb8      	it	lt
 80147b4:	4618      	movlt	r0, r3
 80147b6:	e7a6      	b.n	8014706 <_printf_i+0x15e>
 80147b8:	2301      	movs	r3, #1
 80147ba:	4632      	mov	r2, r6
 80147bc:	4649      	mov	r1, r9
 80147be:	4640      	mov	r0, r8
 80147c0:	47d0      	blx	sl
 80147c2:	3001      	adds	r0, #1
 80147c4:	d09d      	beq.n	8014702 <_printf_i+0x15a>
 80147c6:	3501      	adds	r5, #1
 80147c8:	68e3      	ldr	r3, [r4, #12]
 80147ca:	9903      	ldr	r1, [sp, #12]
 80147cc:	1a5b      	subs	r3, r3, r1
 80147ce:	42ab      	cmp	r3, r5
 80147d0:	dcf2      	bgt.n	80147b8 <_printf_i+0x210>
 80147d2:	e7eb      	b.n	80147ac <_printf_i+0x204>
 80147d4:	2500      	movs	r5, #0
 80147d6:	f104 0619 	add.w	r6, r4, #25
 80147da:	e7f5      	b.n	80147c8 <_printf_i+0x220>
 80147dc:	0801b606 	.word	0x0801b606
 80147e0:	0801b617 	.word	0x0801b617

080147e4 <_scanf_float>:
 80147e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e8:	b087      	sub	sp, #28
 80147ea:	4691      	mov	r9, r2
 80147ec:	9303      	str	r3, [sp, #12]
 80147ee:	688b      	ldr	r3, [r1, #8]
 80147f0:	1e5a      	subs	r2, r3, #1
 80147f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80147f6:	bf81      	itttt	hi
 80147f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80147fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8014800:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014804:	608b      	strhi	r3, [r1, #8]
 8014806:	680b      	ldr	r3, [r1, #0]
 8014808:	460a      	mov	r2, r1
 801480a:	f04f 0500 	mov.w	r5, #0
 801480e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014812:	f842 3b1c 	str.w	r3, [r2], #28
 8014816:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801481a:	4680      	mov	r8, r0
 801481c:	460c      	mov	r4, r1
 801481e:	bf98      	it	ls
 8014820:	f04f 0b00 	movls.w	fp, #0
 8014824:	9201      	str	r2, [sp, #4]
 8014826:	4616      	mov	r6, r2
 8014828:	46aa      	mov	sl, r5
 801482a:	462f      	mov	r7, r5
 801482c:	9502      	str	r5, [sp, #8]
 801482e:	68a2      	ldr	r2, [r4, #8]
 8014830:	b15a      	cbz	r2, 801484a <_scanf_float+0x66>
 8014832:	f8d9 3000 	ldr.w	r3, [r9]
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	2b4e      	cmp	r3, #78	@ 0x4e
 801483a:	d863      	bhi.n	8014904 <_scanf_float+0x120>
 801483c:	2b40      	cmp	r3, #64	@ 0x40
 801483e:	d83b      	bhi.n	80148b8 <_scanf_float+0xd4>
 8014840:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014844:	b2c8      	uxtb	r0, r1
 8014846:	280e      	cmp	r0, #14
 8014848:	d939      	bls.n	80148be <_scanf_float+0xda>
 801484a:	b11f      	cbz	r7, 8014854 <_scanf_float+0x70>
 801484c:	6823      	ldr	r3, [r4, #0]
 801484e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014852:	6023      	str	r3, [r4, #0]
 8014854:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014858:	f1ba 0f01 	cmp.w	sl, #1
 801485c:	f200 8114 	bhi.w	8014a88 <_scanf_float+0x2a4>
 8014860:	9b01      	ldr	r3, [sp, #4]
 8014862:	429e      	cmp	r6, r3
 8014864:	f200 8105 	bhi.w	8014a72 <_scanf_float+0x28e>
 8014868:	2001      	movs	r0, #1
 801486a:	b007      	add	sp, #28
 801486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014870:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014874:	2a0d      	cmp	r2, #13
 8014876:	d8e8      	bhi.n	801484a <_scanf_float+0x66>
 8014878:	a101      	add	r1, pc, #4	@ (adr r1, 8014880 <_scanf_float+0x9c>)
 801487a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801487e:	bf00      	nop
 8014880:	080149c9 	.word	0x080149c9
 8014884:	0801484b 	.word	0x0801484b
 8014888:	0801484b 	.word	0x0801484b
 801488c:	0801484b 	.word	0x0801484b
 8014890:	08014a25 	.word	0x08014a25
 8014894:	080149ff 	.word	0x080149ff
 8014898:	0801484b 	.word	0x0801484b
 801489c:	0801484b 	.word	0x0801484b
 80148a0:	080149d7 	.word	0x080149d7
 80148a4:	0801484b 	.word	0x0801484b
 80148a8:	0801484b 	.word	0x0801484b
 80148ac:	0801484b 	.word	0x0801484b
 80148b0:	0801484b 	.word	0x0801484b
 80148b4:	08014993 	.word	0x08014993
 80148b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80148bc:	e7da      	b.n	8014874 <_scanf_float+0x90>
 80148be:	290e      	cmp	r1, #14
 80148c0:	d8c3      	bhi.n	801484a <_scanf_float+0x66>
 80148c2:	a001      	add	r0, pc, #4	@ (adr r0, 80148c8 <_scanf_float+0xe4>)
 80148c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80148c8:	08014983 	.word	0x08014983
 80148cc:	0801484b 	.word	0x0801484b
 80148d0:	08014983 	.word	0x08014983
 80148d4:	08014a13 	.word	0x08014a13
 80148d8:	0801484b 	.word	0x0801484b
 80148dc:	08014925 	.word	0x08014925
 80148e0:	08014969 	.word	0x08014969
 80148e4:	08014969 	.word	0x08014969
 80148e8:	08014969 	.word	0x08014969
 80148ec:	08014969 	.word	0x08014969
 80148f0:	08014969 	.word	0x08014969
 80148f4:	08014969 	.word	0x08014969
 80148f8:	08014969 	.word	0x08014969
 80148fc:	08014969 	.word	0x08014969
 8014900:	08014969 	.word	0x08014969
 8014904:	2b6e      	cmp	r3, #110	@ 0x6e
 8014906:	d809      	bhi.n	801491c <_scanf_float+0x138>
 8014908:	2b60      	cmp	r3, #96	@ 0x60
 801490a:	d8b1      	bhi.n	8014870 <_scanf_float+0x8c>
 801490c:	2b54      	cmp	r3, #84	@ 0x54
 801490e:	d07b      	beq.n	8014a08 <_scanf_float+0x224>
 8014910:	2b59      	cmp	r3, #89	@ 0x59
 8014912:	d19a      	bne.n	801484a <_scanf_float+0x66>
 8014914:	2d07      	cmp	r5, #7
 8014916:	d198      	bne.n	801484a <_scanf_float+0x66>
 8014918:	2508      	movs	r5, #8
 801491a:	e02f      	b.n	801497c <_scanf_float+0x198>
 801491c:	2b74      	cmp	r3, #116	@ 0x74
 801491e:	d073      	beq.n	8014a08 <_scanf_float+0x224>
 8014920:	2b79      	cmp	r3, #121	@ 0x79
 8014922:	e7f6      	b.n	8014912 <_scanf_float+0x12e>
 8014924:	6821      	ldr	r1, [r4, #0]
 8014926:	05c8      	lsls	r0, r1, #23
 8014928:	d51e      	bpl.n	8014968 <_scanf_float+0x184>
 801492a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801492e:	6021      	str	r1, [r4, #0]
 8014930:	3701      	adds	r7, #1
 8014932:	f1bb 0f00 	cmp.w	fp, #0
 8014936:	d003      	beq.n	8014940 <_scanf_float+0x15c>
 8014938:	3201      	adds	r2, #1
 801493a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801493e:	60a2      	str	r2, [r4, #8]
 8014940:	68a3      	ldr	r3, [r4, #8]
 8014942:	3b01      	subs	r3, #1
 8014944:	60a3      	str	r3, [r4, #8]
 8014946:	6923      	ldr	r3, [r4, #16]
 8014948:	3301      	adds	r3, #1
 801494a:	6123      	str	r3, [r4, #16]
 801494c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014950:	3b01      	subs	r3, #1
 8014952:	2b00      	cmp	r3, #0
 8014954:	f8c9 3004 	str.w	r3, [r9, #4]
 8014958:	f340 8082 	ble.w	8014a60 <_scanf_float+0x27c>
 801495c:	f8d9 3000 	ldr.w	r3, [r9]
 8014960:	3301      	adds	r3, #1
 8014962:	f8c9 3000 	str.w	r3, [r9]
 8014966:	e762      	b.n	801482e <_scanf_float+0x4a>
 8014968:	eb1a 0105 	adds.w	r1, sl, r5
 801496c:	f47f af6d 	bne.w	801484a <_scanf_float+0x66>
 8014970:	6822      	ldr	r2, [r4, #0]
 8014972:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014976:	6022      	str	r2, [r4, #0]
 8014978:	460d      	mov	r5, r1
 801497a:	468a      	mov	sl, r1
 801497c:	f806 3b01 	strb.w	r3, [r6], #1
 8014980:	e7de      	b.n	8014940 <_scanf_float+0x15c>
 8014982:	6822      	ldr	r2, [r4, #0]
 8014984:	0610      	lsls	r0, r2, #24
 8014986:	f57f af60 	bpl.w	801484a <_scanf_float+0x66>
 801498a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801498e:	6022      	str	r2, [r4, #0]
 8014990:	e7f4      	b.n	801497c <_scanf_float+0x198>
 8014992:	f1ba 0f00 	cmp.w	sl, #0
 8014996:	d10c      	bne.n	80149b2 <_scanf_float+0x1ce>
 8014998:	b977      	cbnz	r7, 80149b8 <_scanf_float+0x1d4>
 801499a:	6822      	ldr	r2, [r4, #0]
 801499c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80149a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80149a4:	d108      	bne.n	80149b8 <_scanf_float+0x1d4>
 80149a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80149aa:	6022      	str	r2, [r4, #0]
 80149ac:	f04f 0a01 	mov.w	sl, #1
 80149b0:	e7e4      	b.n	801497c <_scanf_float+0x198>
 80149b2:	f1ba 0f02 	cmp.w	sl, #2
 80149b6:	d050      	beq.n	8014a5a <_scanf_float+0x276>
 80149b8:	2d01      	cmp	r5, #1
 80149ba:	d002      	beq.n	80149c2 <_scanf_float+0x1de>
 80149bc:	2d04      	cmp	r5, #4
 80149be:	f47f af44 	bne.w	801484a <_scanf_float+0x66>
 80149c2:	3501      	adds	r5, #1
 80149c4:	b2ed      	uxtb	r5, r5
 80149c6:	e7d9      	b.n	801497c <_scanf_float+0x198>
 80149c8:	f1ba 0f01 	cmp.w	sl, #1
 80149cc:	f47f af3d 	bne.w	801484a <_scanf_float+0x66>
 80149d0:	f04f 0a02 	mov.w	sl, #2
 80149d4:	e7d2      	b.n	801497c <_scanf_float+0x198>
 80149d6:	b975      	cbnz	r5, 80149f6 <_scanf_float+0x212>
 80149d8:	2f00      	cmp	r7, #0
 80149da:	f47f af37 	bne.w	801484c <_scanf_float+0x68>
 80149de:	6822      	ldr	r2, [r4, #0]
 80149e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80149e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80149e8:	f040 8103 	bne.w	8014bf2 <_scanf_float+0x40e>
 80149ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80149f0:	6022      	str	r2, [r4, #0]
 80149f2:	2501      	movs	r5, #1
 80149f4:	e7c2      	b.n	801497c <_scanf_float+0x198>
 80149f6:	2d03      	cmp	r5, #3
 80149f8:	d0e3      	beq.n	80149c2 <_scanf_float+0x1de>
 80149fa:	2d05      	cmp	r5, #5
 80149fc:	e7df      	b.n	80149be <_scanf_float+0x1da>
 80149fe:	2d02      	cmp	r5, #2
 8014a00:	f47f af23 	bne.w	801484a <_scanf_float+0x66>
 8014a04:	2503      	movs	r5, #3
 8014a06:	e7b9      	b.n	801497c <_scanf_float+0x198>
 8014a08:	2d06      	cmp	r5, #6
 8014a0a:	f47f af1e 	bne.w	801484a <_scanf_float+0x66>
 8014a0e:	2507      	movs	r5, #7
 8014a10:	e7b4      	b.n	801497c <_scanf_float+0x198>
 8014a12:	6822      	ldr	r2, [r4, #0]
 8014a14:	0591      	lsls	r1, r2, #22
 8014a16:	f57f af18 	bpl.w	801484a <_scanf_float+0x66>
 8014a1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014a1e:	6022      	str	r2, [r4, #0]
 8014a20:	9702      	str	r7, [sp, #8]
 8014a22:	e7ab      	b.n	801497c <_scanf_float+0x198>
 8014a24:	6822      	ldr	r2, [r4, #0]
 8014a26:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014a2a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014a2e:	d005      	beq.n	8014a3c <_scanf_float+0x258>
 8014a30:	0550      	lsls	r0, r2, #21
 8014a32:	f57f af0a 	bpl.w	801484a <_scanf_float+0x66>
 8014a36:	2f00      	cmp	r7, #0
 8014a38:	f000 80db 	beq.w	8014bf2 <_scanf_float+0x40e>
 8014a3c:	0591      	lsls	r1, r2, #22
 8014a3e:	bf58      	it	pl
 8014a40:	9902      	ldrpl	r1, [sp, #8]
 8014a42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014a46:	bf58      	it	pl
 8014a48:	1a79      	subpl	r1, r7, r1
 8014a4a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014a4e:	bf58      	it	pl
 8014a50:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014a54:	6022      	str	r2, [r4, #0]
 8014a56:	2700      	movs	r7, #0
 8014a58:	e790      	b.n	801497c <_scanf_float+0x198>
 8014a5a:	f04f 0a03 	mov.w	sl, #3
 8014a5e:	e78d      	b.n	801497c <_scanf_float+0x198>
 8014a60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014a64:	4649      	mov	r1, r9
 8014a66:	4640      	mov	r0, r8
 8014a68:	4798      	blx	r3
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	f43f aedf 	beq.w	801482e <_scanf_float+0x4a>
 8014a70:	e6eb      	b.n	801484a <_scanf_float+0x66>
 8014a72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014a76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014a7a:	464a      	mov	r2, r9
 8014a7c:	4640      	mov	r0, r8
 8014a7e:	4798      	blx	r3
 8014a80:	6923      	ldr	r3, [r4, #16]
 8014a82:	3b01      	subs	r3, #1
 8014a84:	6123      	str	r3, [r4, #16]
 8014a86:	e6eb      	b.n	8014860 <_scanf_float+0x7c>
 8014a88:	1e6b      	subs	r3, r5, #1
 8014a8a:	2b06      	cmp	r3, #6
 8014a8c:	d824      	bhi.n	8014ad8 <_scanf_float+0x2f4>
 8014a8e:	2d02      	cmp	r5, #2
 8014a90:	d836      	bhi.n	8014b00 <_scanf_float+0x31c>
 8014a92:	9b01      	ldr	r3, [sp, #4]
 8014a94:	429e      	cmp	r6, r3
 8014a96:	f67f aee7 	bls.w	8014868 <_scanf_float+0x84>
 8014a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014a9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014aa2:	464a      	mov	r2, r9
 8014aa4:	4640      	mov	r0, r8
 8014aa6:	4798      	blx	r3
 8014aa8:	6923      	ldr	r3, [r4, #16]
 8014aaa:	3b01      	subs	r3, #1
 8014aac:	6123      	str	r3, [r4, #16]
 8014aae:	e7f0      	b.n	8014a92 <_scanf_float+0x2ae>
 8014ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014ab4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014ab8:	464a      	mov	r2, r9
 8014aba:	4640      	mov	r0, r8
 8014abc:	4798      	blx	r3
 8014abe:	6923      	ldr	r3, [r4, #16]
 8014ac0:	3b01      	subs	r3, #1
 8014ac2:	6123      	str	r3, [r4, #16]
 8014ac4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ac8:	fa5f fa8a 	uxtb.w	sl, sl
 8014acc:	f1ba 0f02 	cmp.w	sl, #2
 8014ad0:	d1ee      	bne.n	8014ab0 <_scanf_float+0x2cc>
 8014ad2:	3d03      	subs	r5, #3
 8014ad4:	b2ed      	uxtb	r5, r5
 8014ad6:	1b76      	subs	r6, r6, r5
 8014ad8:	6823      	ldr	r3, [r4, #0]
 8014ada:	05da      	lsls	r2, r3, #23
 8014adc:	d530      	bpl.n	8014b40 <_scanf_float+0x35c>
 8014ade:	055b      	lsls	r3, r3, #21
 8014ae0:	d511      	bpl.n	8014b06 <_scanf_float+0x322>
 8014ae2:	9b01      	ldr	r3, [sp, #4]
 8014ae4:	429e      	cmp	r6, r3
 8014ae6:	f67f aebf 	bls.w	8014868 <_scanf_float+0x84>
 8014aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014aee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014af2:	464a      	mov	r2, r9
 8014af4:	4640      	mov	r0, r8
 8014af6:	4798      	blx	r3
 8014af8:	6923      	ldr	r3, [r4, #16]
 8014afa:	3b01      	subs	r3, #1
 8014afc:	6123      	str	r3, [r4, #16]
 8014afe:	e7f0      	b.n	8014ae2 <_scanf_float+0x2fe>
 8014b00:	46aa      	mov	sl, r5
 8014b02:	46b3      	mov	fp, r6
 8014b04:	e7de      	b.n	8014ac4 <_scanf_float+0x2e0>
 8014b06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014b0a:	6923      	ldr	r3, [r4, #16]
 8014b0c:	2965      	cmp	r1, #101	@ 0x65
 8014b0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014b12:	f106 35ff 	add.w	r5, r6, #4294967295
 8014b16:	6123      	str	r3, [r4, #16]
 8014b18:	d00c      	beq.n	8014b34 <_scanf_float+0x350>
 8014b1a:	2945      	cmp	r1, #69	@ 0x45
 8014b1c:	d00a      	beq.n	8014b34 <_scanf_float+0x350>
 8014b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b22:	464a      	mov	r2, r9
 8014b24:	4640      	mov	r0, r8
 8014b26:	4798      	blx	r3
 8014b28:	6923      	ldr	r3, [r4, #16]
 8014b2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014b2e:	3b01      	subs	r3, #1
 8014b30:	1eb5      	subs	r5, r6, #2
 8014b32:	6123      	str	r3, [r4, #16]
 8014b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b38:	464a      	mov	r2, r9
 8014b3a:	4640      	mov	r0, r8
 8014b3c:	4798      	blx	r3
 8014b3e:	462e      	mov	r6, r5
 8014b40:	6822      	ldr	r2, [r4, #0]
 8014b42:	f012 0210 	ands.w	r2, r2, #16
 8014b46:	d001      	beq.n	8014b4c <_scanf_float+0x368>
 8014b48:	2000      	movs	r0, #0
 8014b4a:	e68e      	b.n	801486a <_scanf_float+0x86>
 8014b4c:	7032      	strb	r2, [r6, #0]
 8014b4e:	6823      	ldr	r3, [r4, #0]
 8014b50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014b58:	d125      	bne.n	8014ba6 <_scanf_float+0x3c2>
 8014b5a:	9b02      	ldr	r3, [sp, #8]
 8014b5c:	429f      	cmp	r7, r3
 8014b5e:	d00a      	beq.n	8014b76 <_scanf_float+0x392>
 8014b60:	1bda      	subs	r2, r3, r7
 8014b62:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014b66:	429e      	cmp	r6, r3
 8014b68:	bf28      	it	cs
 8014b6a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014b6e:	4922      	ldr	r1, [pc, #136]	@ (8014bf8 <_scanf_float+0x414>)
 8014b70:	4630      	mov	r0, r6
 8014b72:	f000 f99b 	bl	8014eac <siprintf>
 8014b76:	9901      	ldr	r1, [sp, #4]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	4640      	mov	r0, r8
 8014b7c:	f002 fd28 	bl	80175d0 <_strtod_r>
 8014b80:	9b03      	ldr	r3, [sp, #12]
 8014b82:	6821      	ldr	r1, [r4, #0]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f011 0f02 	tst.w	r1, #2
 8014b8a:	ec57 6b10 	vmov	r6, r7, d0
 8014b8e:	f103 0204 	add.w	r2, r3, #4
 8014b92:	d015      	beq.n	8014bc0 <_scanf_float+0x3dc>
 8014b94:	9903      	ldr	r1, [sp, #12]
 8014b96:	600a      	str	r2, [r1, #0]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	e9c3 6700 	strd	r6, r7, [r3]
 8014b9e:	68e3      	ldr	r3, [r4, #12]
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	60e3      	str	r3, [r4, #12]
 8014ba4:	e7d0      	b.n	8014b48 <_scanf_float+0x364>
 8014ba6:	9b04      	ldr	r3, [sp, #16]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d0e4      	beq.n	8014b76 <_scanf_float+0x392>
 8014bac:	9905      	ldr	r1, [sp, #20]
 8014bae:	230a      	movs	r3, #10
 8014bb0:	3101      	adds	r1, #1
 8014bb2:	4640      	mov	r0, r8
 8014bb4:	f002 fd8c 	bl	80176d0 <_strtol_r>
 8014bb8:	9b04      	ldr	r3, [sp, #16]
 8014bba:	9e05      	ldr	r6, [sp, #20]
 8014bbc:	1ac2      	subs	r2, r0, r3
 8014bbe:	e7d0      	b.n	8014b62 <_scanf_float+0x37e>
 8014bc0:	f011 0f04 	tst.w	r1, #4
 8014bc4:	9903      	ldr	r1, [sp, #12]
 8014bc6:	600a      	str	r2, [r1, #0]
 8014bc8:	d1e6      	bne.n	8014b98 <_scanf_float+0x3b4>
 8014bca:	681d      	ldr	r5, [r3, #0]
 8014bcc:	4632      	mov	r2, r6
 8014bce:	463b      	mov	r3, r7
 8014bd0:	4630      	mov	r0, r6
 8014bd2:	4639      	mov	r1, r7
 8014bd4:	f7eb ffd2 	bl	8000b7c <__aeabi_dcmpun>
 8014bd8:	b128      	cbz	r0, 8014be6 <_scanf_float+0x402>
 8014bda:	4808      	ldr	r0, [pc, #32]	@ (8014bfc <_scanf_float+0x418>)
 8014bdc:	f000 faee 	bl	80151bc <nanf>
 8014be0:	ed85 0a00 	vstr	s0, [r5]
 8014be4:	e7db      	b.n	8014b9e <_scanf_float+0x3ba>
 8014be6:	4630      	mov	r0, r6
 8014be8:	4639      	mov	r1, r7
 8014bea:	f7ec f825 	bl	8000c38 <__aeabi_d2f>
 8014bee:	6028      	str	r0, [r5, #0]
 8014bf0:	e7d5      	b.n	8014b9e <_scanf_float+0x3ba>
 8014bf2:	2700      	movs	r7, #0
 8014bf4:	e62e      	b.n	8014854 <_scanf_float+0x70>
 8014bf6:	bf00      	nop
 8014bf8:	0801b628 	.word	0x0801b628
 8014bfc:	0801b769 	.word	0x0801b769

08014c00 <std>:
 8014c00:	2300      	movs	r3, #0
 8014c02:	b510      	push	{r4, lr}
 8014c04:	4604      	mov	r4, r0
 8014c06:	e9c0 3300 	strd	r3, r3, [r0]
 8014c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c0e:	6083      	str	r3, [r0, #8]
 8014c10:	8181      	strh	r1, [r0, #12]
 8014c12:	6643      	str	r3, [r0, #100]	@ 0x64
 8014c14:	81c2      	strh	r2, [r0, #14]
 8014c16:	6183      	str	r3, [r0, #24]
 8014c18:	4619      	mov	r1, r3
 8014c1a:	2208      	movs	r2, #8
 8014c1c:	305c      	adds	r0, #92	@ 0x5c
 8014c1e:	f000 fa3f 	bl	80150a0 <memset>
 8014c22:	4b0d      	ldr	r3, [pc, #52]	@ (8014c58 <std+0x58>)
 8014c24:	6263      	str	r3, [r4, #36]	@ 0x24
 8014c26:	4b0d      	ldr	r3, [pc, #52]	@ (8014c5c <std+0x5c>)
 8014c28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8014c60 <std+0x60>)
 8014c2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8014c64 <std+0x64>)
 8014c30:	6323      	str	r3, [r4, #48]	@ 0x30
 8014c32:	4b0d      	ldr	r3, [pc, #52]	@ (8014c68 <std+0x68>)
 8014c34:	6224      	str	r4, [r4, #32]
 8014c36:	429c      	cmp	r4, r3
 8014c38:	d006      	beq.n	8014c48 <std+0x48>
 8014c3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014c3e:	4294      	cmp	r4, r2
 8014c40:	d002      	beq.n	8014c48 <std+0x48>
 8014c42:	33d0      	adds	r3, #208	@ 0xd0
 8014c44:	429c      	cmp	r4, r3
 8014c46:	d105      	bne.n	8014c54 <std+0x54>
 8014c48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c50:	f000 baa2 	b.w	8015198 <__retarget_lock_init_recursive>
 8014c54:	bd10      	pop	{r4, pc}
 8014c56:	bf00      	nop
 8014c58:	08014ef1 	.word	0x08014ef1
 8014c5c:	08014f13 	.word	0x08014f13
 8014c60:	08014f4b 	.word	0x08014f4b
 8014c64:	08014f6f 	.word	0x08014f6f
 8014c68:	20003f10 	.word	0x20003f10

08014c6c <stdio_exit_handler>:
 8014c6c:	4a02      	ldr	r2, [pc, #8]	@ (8014c78 <stdio_exit_handler+0xc>)
 8014c6e:	4903      	ldr	r1, [pc, #12]	@ (8014c7c <stdio_exit_handler+0x10>)
 8014c70:	4803      	ldr	r0, [pc, #12]	@ (8014c80 <stdio_exit_handler+0x14>)
 8014c72:	f000 b869 	b.w	8014d48 <_fwalk_sglue>
 8014c76:	bf00      	nop
 8014c78:	20000050 	.word	0x20000050
 8014c7c:	08017a8d 	.word	0x08017a8d
 8014c80:	20000060 	.word	0x20000060

08014c84 <cleanup_stdio>:
 8014c84:	6841      	ldr	r1, [r0, #4]
 8014c86:	4b0c      	ldr	r3, [pc, #48]	@ (8014cb8 <cleanup_stdio+0x34>)
 8014c88:	4299      	cmp	r1, r3
 8014c8a:	b510      	push	{r4, lr}
 8014c8c:	4604      	mov	r4, r0
 8014c8e:	d001      	beq.n	8014c94 <cleanup_stdio+0x10>
 8014c90:	f002 fefc 	bl	8017a8c <_fflush_r>
 8014c94:	68a1      	ldr	r1, [r4, #8]
 8014c96:	4b09      	ldr	r3, [pc, #36]	@ (8014cbc <cleanup_stdio+0x38>)
 8014c98:	4299      	cmp	r1, r3
 8014c9a:	d002      	beq.n	8014ca2 <cleanup_stdio+0x1e>
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f002 fef5 	bl	8017a8c <_fflush_r>
 8014ca2:	68e1      	ldr	r1, [r4, #12]
 8014ca4:	4b06      	ldr	r3, [pc, #24]	@ (8014cc0 <cleanup_stdio+0x3c>)
 8014ca6:	4299      	cmp	r1, r3
 8014ca8:	d004      	beq.n	8014cb4 <cleanup_stdio+0x30>
 8014caa:	4620      	mov	r0, r4
 8014cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cb0:	f002 beec 	b.w	8017a8c <_fflush_r>
 8014cb4:	bd10      	pop	{r4, pc}
 8014cb6:	bf00      	nop
 8014cb8:	20003f10 	.word	0x20003f10
 8014cbc:	20003f78 	.word	0x20003f78
 8014cc0:	20003fe0 	.word	0x20003fe0

08014cc4 <global_stdio_init.part.0>:
 8014cc4:	b510      	push	{r4, lr}
 8014cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8014cf4 <global_stdio_init.part.0+0x30>)
 8014cc8:	4c0b      	ldr	r4, [pc, #44]	@ (8014cf8 <global_stdio_init.part.0+0x34>)
 8014cca:	4a0c      	ldr	r2, [pc, #48]	@ (8014cfc <global_stdio_init.part.0+0x38>)
 8014ccc:	601a      	str	r2, [r3, #0]
 8014cce:	4620      	mov	r0, r4
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	2104      	movs	r1, #4
 8014cd4:	f7ff ff94 	bl	8014c00 <std>
 8014cd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014cdc:	2201      	movs	r2, #1
 8014cde:	2109      	movs	r1, #9
 8014ce0:	f7ff ff8e 	bl	8014c00 <std>
 8014ce4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014ce8:	2202      	movs	r2, #2
 8014cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cee:	2112      	movs	r1, #18
 8014cf0:	f7ff bf86 	b.w	8014c00 <std>
 8014cf4:	20004048 	.word	0x20004048
 8014cf8:	20003f10 	.word	0x20003f10
 8014cfc:	08014c6d 	.word	0x08014c6d

08014d00 <__sfp_lock_acquire>:
 8014d00:	4801      	ldr	r0, [pc, #4]	@ (8014d08 <__sfp_lock_acquire+0x8>)
 8014d02:	f000 ba4a 	b.w	801519a <__retarget_lock_acquire_recursive>
 8014d06:	bf00      	nop
 8014d08:	20004051 	.word	0x20004051

08014d0c <__sfp_lock_release>:
 8014d0c:	4801      	ldr	r0, [pc, #4]	@ (8014d14 <__sfp_lock_release+0x8>)
 8014d0e:	f000 ba45 	b.w	801519c <__retarget_lock_release_recursive>
 8014d12:	bf00      	nop
 8014d14:	20004051 	.word	0x20004051

08014d18 <__sinit>:
 8014d18:	b510      	push	{r4, lr}
 8014d1a:	4604      	mov	r4, r0
 8014d1c:	f7ff fff0 	bl	8014d00 <__sfp_lock_acquire>
 8014d20:	6a23      	ldr	r3, [r4, #32]
 8014d22:	b11b      	cbz	r3, 8014d2c <__sinit+0x14>
 8014d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d28:	f7ff bff0 	b.w	8014d0c <__sfp_lock_release>
 8014d2c:	4b04      	ldr	r3, [pc, #16]	@ (8014d40 <__sinit+0x28>)
 8014d2e:	6223      	str	r3, [r4, #32]
 8014d30:	4b04      	ldr	r3, [pc, #16]	@ (8014d44 <__sinit+0x2c>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d1f5      	bne.n	8014d24 <__sinit+0xc>
 8014d38:	f7ff ffc4 	bl	8014cc4 <global_stdio_init.part.0>
 8014d3c:	e7f2      	b.n	8014d24 <__sinit+0xc>
 8014d3e:	bf00      	nop
 8014d40:	08014c85 	.word	0x08014c85
 8014d44:	20004048 	.word	0x20004048

08014d48 <_fwalk_sglue>:
 8014d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d4c:	4607      	mov	r7, r0
 8014d4e:	4688      	mov	r8, r1
 8014d50:	4614      	mov	r4, r2
 8014d52:	2600      	movs	r6, #0
 8014d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014d58:	f1b9 0901 	subs.w	r9, r9, #1
 8014d5c:	d505      	bpl.n	8014d6a <_fwalk_sglue+0x22>
 8014d5e:	6824      	ldr	r4, [r4, #0]
 8014d60:	2c00      	cmp	r4, #0
 8014d62:	d1f7      	bne.n	8014d54 <_fwalk_sglue+0xc>
 8014d64:	4630      	mov	r0, r6
 8014d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d6a:	89ab      	ldrh	r3, [r5, #12]
 8014d6c:	2b01      	cmp	r3, #1
 8014d6e:	d907      	bls.n	8014d80 <_fwalk_sglue+0x38>
 8014d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014d74:	3301      	adds	r3, #1
 8014d76:	d003      	beq.n	8014d80 <_fwalk_sglue+0x38>
 8014d78:	4629      	mov	r1, r5
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	47c0      	blx	r8
 8014d7e:	4306      	orrs	r6, r0
 8014d80:	3568      	adds	r5, #104	@ 0x68
 8014d82:	e7e9      	b.n	8014d58 <_fwalk_sglue+0x10>

08014d84 <_puts_r>:
 8014d84:	6a03      	ldr	r3, [r0, #32]
 8014d86:	b570      	push	{r4, r5, r6, lr}
 8014d88:	6884      	ldr	r4, [r0, #8]
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	460e      	mov	r6, r1
 8014d8e:	b90b      	cbnz	r3, 8014d94 <_puts_r+0x10>
 8014d90:	f7ff ffc2 	bl	8014d18 <__sinit>
 8014d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014d96:	07db      	lsls	r3, r3, #31
 8014d98:	d405      	bmi.n	8014da6 <_puts_r+0x22>
 8014d9a:	89a3      	ldrh	r3, [r4, #12]
 8014d9c:	0598      	lsls	r0, r3, #22
 8014d9e:	d402      	bmi.n	8014da6 <_puts_r+0x22>
 8014da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014da2:	f000 f9fa 	bl	801519a <__retarget_lock_acquire_recursive>
 8014da6:	89a3      	ldrh	r3, [r4, #12]
 8014da8:	0719      	lsls	r1, r3, #28
 8014daa:	d502      	bpl.n	8014db2 <_puts_r+0x2e>
 8014dac:	6923      	ldr	r3, [r4, #16]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d135      	bne.n	8014e1e <_puts_r+0x9a>
 8014db2:	4621      	mov	r1, r4
 8014db4:	4628      	mov	r0, r5
 8014db6:	f000 f91d 	bl	8014ff4 <__swsetup_r>
 8014dba:	b380      	cbz	r0, 8014e1e <_puts_r+0x9a>
 8014dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8014dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014dc2:	07da      	lsls	r2, r3, #31
 8014dc4:	d405      	bmi.n	8014dd2 <_puts_r+0x4e>
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	059b      	lsls	r3, r3, #22
 8014dca:	d402      	bmi.n	8014dd2 <_puts_r+0x4e>
 8014dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014dce:	f000 f9e5 	bl	801519c <__retarget_lock_release_recursive>
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	bd70      	pop	{r4, r5, r6, pc}
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	da04      	bge.n	8014de4 <_puts_r+0x60>
 8014dda:	69a2      	ldr	r2, [r4, #24]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	dc17      	bgt.n	8014e10 <_puts_r+0x8c>
 8014de0:	290a      	cmp	r1, #10
 8014de2:	d015      	beq.n	8014e10 <_puts_r+0x8c>
 8014de4:	6823      	ldr	r3, [r4, #0]
 8014de6:	1c5a      	adds	r2, r3, #1
 8014de8:	6022      	str	r2, [r4, #0]
 8014dea:	7019      	strb	r1, [r3, #0]
 8014dec:	68a3      	ldr	r3, [r4, #8]
 8014dee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014df2:	3b01      	subs	r3, #1
 8014df4:	60a3      	str	r3, [r4, #8]
 8014df6:	2900      	cmp	r1, #0
 8014df8:	d1ed      	bne.n	8014dd6 <_puts_r+0x52>
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	da11      	bge.n	8014e22 <_puts_r+0x9e>
 8014dfe:	4622      	mov	r2, r4
 8014e00:	210a      	movs	r1, #10
 8014e02:	4628      	mov	r0, r5
 8014e04:	f000 f8b7 	bl	8014f76 <__swbuf_r>
 8014e08:	3001      	adds	r0, #1
 8014e0a:	d0d7      	beq.n	8014dbc <_puts_r+0x38>
 8014e0c:	250a      	movs	r5, #10
 8014e0e:	e7d7      	b.n	8014dc0 <_puts_r+0x3c>
 8014e10:	4622      	mov	r2, r4
 8014e12:	4628      	mov	r0, r5
 8014e14:	f000 f8af 	bl	8014f76 <__swbuf_r>
 8014e18:	3001      	adds	r0, #1
 8014e1a:	d1e7      	bne.n	8014dec <_puts_r+0x68>
 8014e1c:	e7ce      	b.n	8014dbc <_puts_r+0x38>
 8014e1e:	3e01      	subs	r6, #1
 8014e20:	e7e4      	b.n	8014dec <_puts_r+0x68>
 8014e22:	6823      	ldr	r3, [r4, #0]
 8014e24:	1c5a      	adds	r2, r3, #1
 8014e26:	6022      	str	r2, [r4, #0]
 8014e28:	220a      	movs	r2, #10
 8014e2a:	701a      	strb	r2, [r3, #0]
 8014e2c:	e7ee      	b.n	8014e0c <_puts_r+0x88>
	...

08014e30 <puts>:
 8014e30:	4b02      	ldr	r3, [pc, #8]	@ (8014e3c <puts+0xc>)
 8014e32:	4601      	mov	r1, r0
 8014e34:	6818      	ldr	r0, [r3, #0]
 8014e36:	f7ff bfa5 	b.w	8014d84 <_puts_r>
 8014e3a:	bf00      	nop
 8014e3c:	2000005c 	.word	0x2000005c

08014e40 <sniprintf>:
 8014e40:	b40c      	push	{r2, r3}
 8014e42:	b530      	push	{r4, r5, lr}
 8014e44:	4b18      	ldr	r3, [pc, #96]	@ (8014ea8 <sniprintf+0x68>)
 8014e46:	1e0c      	subs	r4, r1, #0
 8014e48:	681d      	ldr	r5, [r3, #0]
 8014e4a:	b09d      	sub	sp, #116	@ 0x74
 8014e4c:	da08      	bge.n	8014e60 <sniprintf+0x20>
 8014e4e:	238b      	movs	r3, #139	@ 0x8b
 8014e50:	602b      	str	r3, [r5, #0]
 8014e52:	f04f 30ff 	mov.w	r0, #4294967295
 8014e56:	b01d      	add	sp, #116	@ 0x74
 8014e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e5c:	b002      	add	sp, #8
 8014e5e:	4770      	bx	lr
 8014e60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014e64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e68:	f04f 0300 	mov.w	r3, #0
 8014e6c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014e6e:	bf14      	ite	ne
 8014e70:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014e74:	4623      	moveq	r3, r4
 8014e76:	9304      	str	r3, [sp, #16]
 8014e78:	9307      	str	r3, [sp, #28]
 8014e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e7e:	9002      	str	r0, [sp, #8]
 8014e80:	9006      	str	r0, [sp, #24]
 8014e82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014e86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014e88:	ab21      	add	r3, sp, #132	@ 0x84
 8014e8a:	a902      	add	r1, sp, #8
 8014e8c:	4628      	mov	r0, r5
 8014e8e:	9301      	str	r3, [sp, #4]
 8014e90:	f002 fc7c 	bl	801778c <_svfiprintf_r>
 8014e94:	1c43      	adds	r3, r0, #1
 8014e96:	bfbc      	itt	lt
 8014e98:	238b      	movlt	r3, #139	@ 0x8b
 8014e9a:	602b      	strlt	r3, [r5, #0]
 8014e9c:	2c00      	cmp	r4, #0
 8014e9e:	d0da      	beq.n	8014e56 <sniprintf+0x16>
 8014ea0:	9b02      	ldr	r3, [sp, #8]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	701a      	strb	r2, [r3, #0]
 8014ea6:	e7d6      	b.n	8014e56 <sniprintf+0x16>
 8014ea8:	2000005c 	.word	0x2000005c

08014eac <siprintf>:
 8014eac:	b40e      	push	{r1, r2, r3}
 8014eae:	b510      	push	{r4, lr}
 8014eb0:	b09d      	sub	sp, #116	@ 0x74
 8014eb2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014eb4:	9002      	str	r0, [sp, #8]
 8014eb6:	9006      	str	r0, [sp, #24]
 8014eb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014ebc:	480a      	ldr	r0, [pc, #40]	@ (8014ee8 <siprintf+0x3c>)
 8014ebe:	9107      	str	r1, [sp, #28]
 8014ec0:	9104      	str	r1, [sp, #16]
 8014ec2:	490a      	ldr	r1, [pc, #40]	@ (8014eec <siprintf+0x40>)
 8014ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ec8:	9105      	str	r1, [sp, #20]
 8014eca:	2400      	movs	r4, #0
 8014ecc:	a902      	add	r1, sp, #8
 8014ece:	6800      	ldr	r0, [r0, #0]
 8014ed0:	9301      	str	r3, [sp, #4]
 8014ed2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014ed4:	f002 fc5a 	bl	801778c <_svfiprintf_r>
 8014ed8:	9b02      	ldr	r3, [sp, #8]
 8014eda:	701c      	strb	r4, [r3, #0]
 8014edc:	b01d      	add	sp, #116	@ 0x74
 8014ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ee2:	b003      	add	sp, #12
 8014ee4:	4770      	bx	lr
 8014ee6:	bf00      	nop
 8014ee8:	2000005c 	.word	0x2000005c
 8014eec:	ffff0208 	.word	0xffff0208

08014ef0 <__sread>:
 8014ef0:	b510      	push	{r4, lr}
 8014ef2:	460c      	mov	r4, r1
 8014ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ef8:	f000 f900 	bl	80150fc <_read_r>
 8014efc:	2800      	cmp	r0, #0
 8014efe:	bfab      	itete	ge
 8014f00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014f02:	89a3      	ldrhlt	r3, [r4, #12]
 8014f04:	181b      	addge	r3, r3, r0
 8014f06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014f0a:	bfac      	ite	ge
 8014f0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014f0e:	81a3      	strhlt	r3, [r4, #12]
 8014f10:	bd10      	pop	{r4, pc}

08014f12 <__swrite>:
 8014f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f16:	461f      	mov	r7, r3
 8014f18:	898b      	ldrh	r3, [r1, #12]
 8014f1a:	05db      	lsls	r3, r3, #23
 8014f1c:	4605      	mov	r5, r0
 8014f1e:	460c      	mov	r4, r1
 8014f20:	4616      	mov	r6, r2
 8014f22:	d505      	bpl.n	8014f30 <__swrite+0x1e>
 8014f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f28:	2302      	movs	r3, #2
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	f000 f8d4 	bl	80150d8 <_lseek_r>
 8014f30:	89a3      	ldrh	r3, [r4, #12]
 8014f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014f3a:	81a3      	strh	r3, [r4, #12]
 8014f3c:	4632      	mov	r2, r6
 8014f3e:	463b      	mov	r3, r7
 8014f40:	4628      	mov	r0, r5
 8014f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f46:	f000 b8eb 	b.w	8015120 <_write_r>

08014f4a <__sseek>:
 8014f4a:	b510      	push	{r4, lr}
 8014f4c:	460c      	mov	r4, r1
 8014f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f52:	f000 f8c1 	bl	80150d8 <_lseek_r>
 8014f56:	1c43      	adds	r3, r0, #1
 8014f58:	89a3      	ldrh	r3, [r4, #12]
 8014f5a:	bf15      	itete	ne
 8014f5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014f5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014f62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014f66:	81a3      	strheq	r3, [r4, #12]
 8014f68:	bf18      	it	ne
 8014f6a:	81a3      	strhne	r3, [r4, #12]
 8014f6c:	bd10      	pop	{r4, pc}

08014f6e <__sclose>:
 8014f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f72:	f000 b8a1 	b.w	80150b8 <_close_r>

08014f76 <__swbuf_r>:
 8014f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f78:	460e      	mov	r6, r1
 8014f7a:	4614      	mov	r4, r2
 8014f7c:	4605      	mov	r5, r0
 8014f7e:	b118      	cbz	r0, 8014f88 <__swbuf_r+0x12>
 8014f80:	6a03      	ldr	r3, [r0, #32]
 8014f82:	b90b      	cbnz	r3, 8014f88 <__swbuf_r+0x12>
 8014f84:	f7ff fec8 	bl	8014d18 <__sinit>
 8014f88:	69a3      	ldr	r3, [r4, #24]
 8014f8a:	60a3      	str	r3, [r4, #8]
 8014f8c:	89a3      	ldrh	r3, [r4, #12]
 8014f8e:	071a      	lsls	r2, r3, #28
 8014f90:	d501      	bpl.n	8014f96 <__swbuf_r+0x20>
 8014f92:	6923      	ldr	r3, [r4, #16]
 8014f94:	b943      	cbnz	r3, 8014fa8 <__swbuf_r+0x32>
 8014f96:	4621      	mov	r1, r4
 8014f98:	4628      	mov	r0, r5
 8014f9a:	f000 f82b 	bl	8014ff4 <__swsetup_r>
 8014f9e:	b118      	cbz	r0, 8014fa8 <__swbuf_r+0x32>
 8014fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8014fa4:	4638      	mov	r0, r7
 8014fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fa8:	6823      	ldr	r3, [r4, #0]
 8014faa:	6922      	ldr	r2, [r4, #16]
 8014fac:	1a98      	subs	r0, r3, r2
 8014fae:	6963      	ldr	r3, [r4, #20]
 8014fb0:	b2f6      	uxtb	r6, r6
 8014fb2:	4283      	cmp	r3, r0
 8014fb4:	4637      	mov	r7, r6
 8014fb6:	dc05      	bgt.n	8014fc4 <__swbuf_r+0x4e>
 8014fb8:	4621      	mov	r1, r4
 8014fba:	4628      	mov	r0, r5
 8014fbc:	f002 fd66 	bl	8017a8c <_fflush_r>
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	d1ed      	bne.n	8014fa0 <__swbuf_r+0x2a>
 8014fc4:	68a3      	ldr	r3, [r4, #8]
 8014fc6:	3b01      	subs	r3, #1
 8014fc8:	60a3      	str	r3, [r4, #8]
 8014fca:	6823      	ldr	r3, [r4, #0]
 8014fcc:	1c5a      	adds	r2, r3, #1
 8014fce:	6022      	str	r2, [r4, #0]
 8014fd0:	701e      	strb	r6, [r3, #0]
 8014fd2:	6962      	ldr	r2, [r4, #20]
 8014fd4:	1c43      	adds	r3, r0, #1
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d004      	beq.n	8014fe4 <__swbuf_r+0x6e>
 8014fda:	89a3      	ldrh	r3, [r4, #12]
 8014fdc:	07db      	lsls	r3, r3, #31
 8014fde:	d5e1      	bpl.n	8014fa4 <__swbuf_r+0x2e>
 8014fe0:	2e0a      	cmp	r6, #10
 8014fe2:	d1df      	bne.n	8014fa4 <__swbuf_r+0x2e>
 8014fe4:	4621      	mov	r1, r4
 8014fe6:	4628      	mov	r0, r5
 8014fe8:	f002 fd50 	bl	8017a8c <_fflush_r>
 8014fec:	2800      	cmp	r0, #0
 8014fee:	d0d9      	beq.n	8014fa4 <__swbuf_r+0x2e>
 8014ff0:	e7d6      	b.n	8014fa0 <__swbuf_r+0x2a>
	...

08014ff4 <__swsetup_r>:
 8014ff4:	b538      	push	{r3, r4, r5, lr}
 8014ff6:	4b29      	ldr	r3, [pc, #164]	@ (801509c <__swsetup_r+0xa8>)
 8014ff8:	4605      	mov	r5, r0
 8014ffa:	6818      	ldr	r0, [r3, #0]
 8014ffc:	460c      	mov	r4, r1
 8014ffe:	b118      	cbz	r0, 8015008 <__swsetup_r+0x14>
 8015000:	6a03      	ldr	r3, [r0, #32]
 8015002:	b90b      	cbnz	r3, 8015008 <__swsetup_r+0x14>
 8015004:	f7ff fe88 	bl	8014d18 <__sinit>
 8015008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801500c:	0719      	lsls	r1, r3, #28
 801500e:	d422      	bmi.n	8015056 <__swsetup_r+0x62>
 8015010:	06da      	lsls	r2, r3, #27
 8015012:	d407      	bmi.n	8015024 <__swsetup_r+0x30>
 8015014:	2209      	movs	r2, #9
 8015016:	602a      	str	r2, [r5, #0]
 8015018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801501c:	81a3      	strh	r3, [r4, #12]
 801501e:	f04f 30ff 	mov.w	r0, #4294967295
 8015022:	e033      	b.n	801508c <__swsetup_r+0x98>
 8015024:	0758      	lsls	r0, r3, #29
 8015026:	d512      	bpl.n	801504e <__swsetup_r+0x5a>
 8015028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801502a:	b141      	cbz	r1, 801503e <__swsetup_r+0x4a>
 801502c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015030:	4299      	cmp	r1, r3
 8015032:	d002      	beq.n	801503a <__swsetup_r+0x46>
 8015034:	4628      	mov	r0, r5
 8015036:	f000 ff1f 	bl	8015e78 <_free_r>
 801503a:	2300      	movs	r3, #0
 801503c:	6363      	str	r3, [r4, #52]	@ 0x34
 801503e:	89a3      	ldrh	r3, [r4, #12]
 8015040:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015044:	81a3      	strh	r3, [r4, #12]
 8015046:	2300      	movs	r3, #0
 8015048:	6063      	str	r3, [r4, #4]
 801504a:	6923      	ldr	r3, [r4, #16]
 801504c:	6023      	str	r3, [r4, #0]
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	f043 0308 	orr.w	r3, r3, #8
 8015054:	81a3      	strh	r3, [r4, #12]
 8015056:	6923      	ldr	r3, [r4, #16]
 8015058:	b94b      	cbnz	r3, 801506e <__swsetup_r+0x7a>
 801505a:	89a3      	ldrh	r3, [r4, #12]
 801505c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015064:	d003      	beq.n	801506e <__swsetup_r+0x7a>
 8015066:	4621      	mov	r1, r4
 8015068:	4628      	mov	r0, r5
 801506a:	f002 fd5d 	bl	8017b28 <__smakebuf_r>
 801506e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015072:	f013 0201 	ands.w	r2, r3, #1
 8015076:	d00a      	beq.n	801508e <__swsetup_r+0x9a>
 8015078:	2200      	movs	r2, #0
 801507a:	60a2      	str	r2, [r4, #8]
 801507c:	6962      	ldr	r2, [r4, #20]
 801507e:	4252      	negs	r2, r2
 8015080:	61a2      	str	r2, [r4, #24]
 8015082:	6922      	ldr	r2, [r4, #16]
 8015084:	b942      	cbnz	r2, 8015098 <__swsetup_r+0xa4>
 8015086:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801508a:	d1c5      	bne.n	8015018 <__swsetup_r+0x24>
 801508c:	bd38      	pop	{r3, r4, r5, pc}
 801508e:	0799      	lsls	r1, r3, #30
 8015090:	bf58      	it	pl
 8015092:	6962      	ldrpl	r2, [r4, #20]
 8015094:	60a2      	str	r2, [r4, #8]
 8015096:	e7f4      	b.n	8015082 <__swsetup_r+0x8e>
 8015098:	2000      	movs	r0, #0
 801509a:	e7f7      	b.n	801508c <__swsetup_r+0x98>
 801509c:	2000005c 	.word	0x2000005c

080150a0 <memset>:
 80150a0:	4402      	add	r2, r0
 80150a2:	4603      	mov	r3, r0
 80150a4:	4293      	cmp	r3, r2
 80150a6:	d100      	bne.n	80150aa <memset+0xa>
 80150a8:	4770      	bx	lr
 80150aa:	f803 1b01 	strb.w	r1, [r3], #1
 80150ae:	e7f9      	b.n	80150a4 <memset+0x4>

080150b0 <_localeconv_r>:
 80150b0:	4800      	ldr	r0, [pc, #0]	@ (80150b4 <_localeconv_r+0x4>)
 80150b2:	4770      	bx	lr
 80150b4:	2000019c 	.word	0x2000019c

080150b8 <_close_r>:
 80150b8:	b538      	push	{r3, r4, r5, lr}
 80150ba:	4d06      	ldr	r5, [pc, #24]	@ (80150d4 <_close_r+0x1c>)
 80150bc:	2300      	movs	r3, #0
 80150be:	4604      	mov	r4, r0
 80150c0:	4608      	mov	r0, r1
 80150c2:	602b      	str	r3, [r5, #0]
 80150c4:	f7ee fee2 	bl	8003e8c <_close>
 80150c8:	1c43      	adds	r3, r0, #1
 80150ca:	d102      	bne.n	80150d2 <_close_r+0x1a>
 80150cc:	682b      	ldr	r3, [r5, #0]
 80150ce:	b103      	cbz	r3, 80150d2 <_close_r+0x1a>
 80150d0:	6023      	str	r3, [r4, #0]
 80150d2:	bd38      	pop	{r3, r4, r5, pc}
 80150d4:	2000404c 	.word	0x2000404c

080150d8 <_lseek_r>:
 80150d8:	b538      	push	{r3, r4, r5, lr}
 80150da:	4d07      	ldr	r5, [pc, #28]	@ (80150f8 <_lseek_r+0x20>)
 80150dc:	4604      	mov	r4, r0
 80150de:	4608      	mov	r0, r1
 80150e0:	4611      	mov	r1, r2
 80150e2:	2200      	movs	r2, #0
 80150e4:	602a      	str	r2, [r5, #0]
 80150e6:	461a      	mov	r2, r3
 80150e8:	f7ee fef7 	bl	8003eda <_lseek>
 80150ec:	1c43      	adds	r3, r0, #1
 80150ee:	d102      	bne.n	80150f6 <_lseek_r+0x1e>
 80150f0:	682b      	ldr	r3, [r5, #0]
 80150f2:	b103      	cbz	r3, 80150f6 <_lseek_r+0x1e>
 80150f4:	6023      	str	r3, [r4, #0]
 80150f6:	bd38      	pop	{r3, r4, r5, pc}
 80150f8:	2000404c 	.word	0x2000404c

080150fc <_read_r>:
 80150fc:	b538      	push	{r3, r4, r5, lr}
 80150fe:	4d07      	ldr	r5, [pc, #28]	@ (801511c <_read_r+0x20>)
 8015100:	4604      	mov	r4, r0
 8015102:	4608      	mov	r0, r1
 8015104:	4611      	mov	r1, r2
 8015106:	2200      	movs	r2, #0
 8015108:	602a      	str	r2, [r5, #0]
 801510a:	461a      	mov	r2, r3
 801510c:	f7ee fe85 	bl	8003e1a <_read>
 8015110:	1c43      	adds	r3, r0, #1
 8015112:	d102      	bne.n	801511a <_read_r+0x1e>
 8015114:	682b      	ldr	r3, [r5, #0]
 8015116:	b103      	cbz	r3, 801511a <_read_r+0x1e>
 8015118:	6023      	str	r3, [r4, #0]
 801511a:	bd38      	pop	{r3, r4, r5, pc}
 801511c:	2000404c 	.word	0x2000404c

08015120 <_write_r>:
 8015120:	b538      	push	{r3, r4, r5, lr}
 8015122:	4d07      	ldr	r5, [pc, #28]	@ (8015140 <_write_r+0x20>)
 8015124:	4604      	mov	r4, r0
 8015126:	4608      	mov	r0, r1
 8015128:	4611      	mov	r1, r2
 801512a:	2200      	movs	r2, #0
 801512c:	602a      	str	r2, [r5, #0]
 801512e:	461a      	mov	r2, r3
 8015130:	f7ee fe90 	bl	8003e54 <_write>
 8015134:	1c43      	adds	r3, r0, #1
 8015136:	d102      	bne.n	801513e <_write_r+0x1e>
 8015138:	682b      	ldr	r3, [r5, #0]
 801513a:	b103      	cbz	r3, 801513e <_write_r+0x1e>
 801513c:	6023      	str	r3, [r4, #0]
 801513e:	bd38      	pop	{r3, r4, r5, pc}
 8015140:	2000404c 	.word	0x2000404c

08015144 <__errno>:
 8015144:	4b01      	ldr	r3, [pc, #4]	@ (801514c <__errno+0x8>)
 8015146:	6818      	ldr	r0, [r3, #0]
 8015148:	4770      	bx	lr
 801514a:	bf00      	nop
 801514c:	2000005c 	.word	0x2000005c

08015150 <__libc_init_array>:
 8015150:	b570      	push	{r4, r5, r6, lr}
 8015152:	4d0d      	ldr	r5, [pc, #52]	@ (8015188 <__libc_init_array+0x38>)
 8015154:	4c0d      	ldr	r4, [pc, #52]	@ (801518c <__libc_init_array+0x3c>)
 8015156:	1b64      	subs	r4, r4, r5
 8015158:	10a4      	asrs	r4, r4, #2
 801515a:	2600      	movs	r6, #0
 801515c:	42a6      	cmp	r6, r4
 801515e:	d109      	bne.n	8015174 <__libc_init_array+0x24>
 8015160:	4d0b      	ldr	r5, [pc, #44]	@ (8015190 <__libc_init_array+0x40>)
 8015162:	4c0c      	ldr	r4, [pc, #48]	@ (8015194 <__libc_init_array+0x44>)
 8015164:	f004 f8a0 	bl	80192a8 <_init>
 8015168:	1b64      	subs	r4, r4, r5
 801516a:	10a4      	asrs	r4, r4, #2
 801516c:	2600      	movs	r6, #0
 801516e:	42a6      	cmp	r6, r4
 8015170:	d105      	bne.n	801517e <__libc_init_array+0x2e>
 8015172:	bd70      	pop	{r4, r5, r6, pc}
 8015174:	f855 3b04 	ldr.w	r3, [r5], #4
 8015178:	4798      	blx	r3
 801517a:	3601      	adds	r6, #1
 801517c:	e7ee      	b.n	801515c <__libc_init_array+0xc>
 801517e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015182:	4798      	blx	r3
 8015184:	3601      	adds	r6, #1
 8015186:	e7f2      	b.n	801516e <__libc_init_array+0x1e>
 8015188:	0801ba3c 	.word	0x0801ba3c
 801518c:	0801ba3c 	.word	0x0801ba3c
 8015190:	0801ba3c 	.word	0x0801ba3c
 8015194:	0801ba40 	.word	0x0801ba40

08015198 <__retarget_lock_init_recursive>:
 8015198:	4770      	bx	lr

0801519a <__retarget_lock_acquire_recursive>:
 801519a:	4770      	bx	lr

0801519c <__retarget_lock_release_recursive>:
 801519c:	4770      	bx	lr

0801519e <memcpy>:
 801519e:	440a      	add	r2, r1
 80151a0:	4291      	cmp	r1, r2
 80151a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80151a6:	d100      	bne.n	80151aa <memcpy+0xc>
 80151a8:	4770      	bx	lr
 80151aa:	b510      	push	{r4, lr}
 80151ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151b4:	4291      	cmp	r1, r2
 80151b6:	d1f9      	bne.n	80151ac <memcpy+0xe>
 80151b8:	bd10      	pop	{r4, pc}
	...

080151bc <nanf>:
 80151bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80151c4 <nanf+0x8>
 80151c0:	4770      	bx	lr
 80151c2:	bf00      	nop
 80151c4:	7fc00000 	.word	0x7fc00000

080151c8 <quorem>:
 80151c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151cc:	6903      	ldr	r3, [r0, #16]
 80151ce:	690c      	ldr	r4, [r1, #16]
 80151d0:	42a3      	cmp	r3, r4
 80151d2:	4607      	mov	r7, r0
 80151d4:	db7e      	blt.n	80152d4 <quorem+0x10c>
 80151d6:	3c01      	subs	r4, #1
 80151d8:	f101 0814 	add.w	r8, r1, #20
 80151dc:	00a3      	lsls	r3, r4, #2
 80151de:	f100 0514 	add.w	r5, r0, #20
 80151e2:	9300      	str	r3, [sp, #0]
 80151e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80151e8:	9301      	str	r3, [sp, #4]
 80151ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80151ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80151f2:	3301      	adds	r3, #1
 80151f4:	429a      	cmp	r2, r3
 80151f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80151fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80151fe:	d32e      	bcc.n	801525e <quorem+0x96>
 8015200:	f04f 0a00 	mov.w	sl, #0
 8015204:	46c4      	mov	ip, r8
 8015206:	46ae      	mov	lr, r5
 8015208:	46d3      	mov	fp, sl
 801520a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801520e:	b298      	uxth	r0, r3
 8015210:	fb06 a000 	mla	r0, r6, r0, sl
 8015214:	0c02      	lsrs	r2, r0, #16
 8015216:	0c1b      	lsrs	r3, r3, #16
 8015218:	fb06 2303 	mla	r3, r6, r3, r2
 801521c:	f8de 2000 	ldr.w	r2, [lr]
 8015220:	b280      	uxth	r0, r0
 8015222:	b292      	uxth	r2, r2
 8015224:	1a12      	subs	r2, r2, r0
 8015226:	445a      	add	r2, fp
 8015228:	f8de 0000 	ldr.w	r0, [lr]
 801522c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015230:	b29b      	uxth	r3, r3
 8015232:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015236:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801523a:	b292      	uxth	r2, r2
 801523c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015240:	45e1      	cmp	r9, ip
 8015242:	f84e 2b04 	str.w	r2, [lr], #4
 8015246:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801524a:	d2de      	bcs.n	801520a <quorem+0x42>
 801524c:	9b00      	ldr	r3, [sp, #0]
 801524e:	58eb      	ldr	r3, [r5, r3]
 8015250:	b92b      	cbnz	r3, 801525e <quorem+0x96>
 8015252:	9b01      	ldr	r3, [sp, #4]
 8015254:	3b04      	subs	r3, #4
 8015256:	429d      	cmp	r5, r3
 8015258:	461a      	mov	r2, r3
 801525a:	d32f      	bcc.n	80152bc <quorem+0xf4>
 801525c:	613c      	str	r4, [r7, #16]
 801525e:	4638      	mov	r0, r7
 8015260:	f001 f9c6 	bl	80165f0 <__mcmp>
 8015264:	2800      	cmp	r0, #0
 8015266:	db25      	blt.n	80152b4 <quorem+0xec>
 8015268:	4629      	mov	r1, r5
 801526a:	2000      	movs	r0, #0
 801526c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015270:	f8d1 c000 	ldr.w	ip, [r1]
 8015274:	fa1f fe82 	uxth.w	lr, r2
 8015278:	fa1f f38c 	uxth.w	r3, ip
 801527c:	eba3 030e 	sub.w	r3, r3, lr
 8015280:	4403      	add	r3, r0
 8015282:	0c12      	lsrs	r2, r2, #16
 8015284:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015288:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801528c:	b29b      	uxth	r3, r3
 801528e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015292:	45c1      	cmp	r9, r8
 8015294:	f841 3b04 	str.w	r3, [r1], #4
 8015298:	ea4f 4022 	mov.w	r0, r2, asr #16
 801529c:	d2e6      	bcs.n	801526c <quorem+0xa4>
 801529e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80152a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80152a6:	b922      	cbnz	r2, 80152b2 <quorem+0xea>
 80152a8:	3b04      	subs	r3, #4
 80152aa:	429d      	cmp	r5, r3
 80152ac:	461a      	mov	r2, r3
 80152ae:	d30b      	bcc.n	80152c8 <quorem+0x100>
 80152b0:	613c      	str	r4, [r7, #16]
 80152b2:	3601      	adds	r6, #1
 80152b4:	4630      	mov	r0, r6
 80152b6:	b003      	add	sp, #12
 80152b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152bc:	6812      	ldr	r2, [r2, #0]
 80152be:	3b04      	subs	r3, #4
 80152c0:	2a00      	cmp	r2, #0
 80152c2:	d1cb      	bne.n	801525c <quorem+0x94>
 80152c4:	3c01      	subs	r4, #1
 80152c6:	e7c6      	b.n	8015256 <quorem+0x8e>
 80152c8:	6812      	ldr	r2, [r2, #0]
 80152ca:	3b04      	subs	r3, #4
 80152cc:	2a00      	cmp	r2, #0
 80152ce:	d1ef      	bne.n	80152b0 <quorem+0xe8>
 80152d0:	3c01      	subs	r4, #1
 80152d2:	e7ea      	b.n	80152aa <quorem+0xe2>
 80152d4:	2000      	movs	r0, #0
 80152d6:	e7ee      	b.n	80152b6 <quorem+0xee>

080152d8 <_dtoa_r>:
 80152d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152dc:	69c7      	ldr	r7, [r0, #28]
 80152de:	b097      	sub	sp, #92	@ 0x5c
 80152e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80152e4:	ec55 4b10 	vmov	r4, r5, d0
 80152e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80152ea:	9107      	str	r1, [sp, #28]
 80152ec:	4681      	mov	r9, r0
 80152ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80152f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80152f2:	b97f      	cbnz	r7, 8015314 <_dtoa_r+0x3c>
 80152f4:	2010      	movs	r0, #16
 80152f6:	f000 fe09 	bl	8015f0c <malloc>
 80152fa:	4602      	mov	r2, r0
 80152fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8015300:	b920      	cbnz	r0, 801530c <_dtoa_r+0x34>
 8015302:	4ba9      	ldr	r3, [pc, #676]	@ (80155a8 <_dtoa_r+0x2d0>)
 8015304:	21ef      	movs	r1, #239	@ 0xef
 8015306:	48a9      	ldr	r0, [pc, #676]	@ (80155ac <_dtoa_r+0x2d4>)
 8015308:	f002 fcb2 	bl	8017c70 <__assert_func>
 801530c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015310:	6007      	str	r7, [r0, #0]
 8015312:	60c7      	str	r7, [r0, #12]
 8015314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015318:	6819      	ldr	r1, [r3, #0]
 801531a:	b159      	cbz	r1, 8015334 <_dtoa_r+0x5c>
 801531c:	685a      	ldr	r2, [r3, #4]
 801531e:	604a      	str	r2, [r1, #4]
 8015320:	2301      	movs	r3, #1
 8015322:	4093      	lsls	r3, r2
 8015324:	608b      	str	r3, [r1, #8]
 8015326:	4648      	mov	r0, r9
 8015328:	f000 fee6 	bl	80160f8 <_Bfree>
 801532c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015330:	2200      	movs	r2, #0
 8015332:	601a      	str	r2, [r3, #0]
 8015334:	1e2b      	subs	r3, r5, #0
 8015336:	bfb9      	ittee	lt
 8015338:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801533c:	9305      	strlt	r3, [sp, #20]
 801533e:	2300      	movge	r3, #0
 8015340:	6033      	strge	r3, [r6, #0]
 8015342:	9f05      	ldr	r7, [sp, #20]
 8015344:	4b9a      	ldr	r3, [pc, #616]	@ (80155b0 <_dtoa_r+0x2d8>)
 8015346:	bfbc      	itt	lt
 8015348:	2201      	movlt	r2, #1
 801534a:	6032      	strlt	r2, [r6, #0]
 801534c:	43bb      	bics	r3, r7
 801534e:	d112      	bne.n	8015376 <_dtoa_r+0x9e>
 8015350:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015352:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015356:	6013      	str	r3, [r2, #0]
 8015358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801535c:	4323      	orrs	r3, r4
 801535e:	f000 855a 	beq.w	8015e16 <_dtoa_r+0xb3e>
 8015362:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015364:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80155c4 <_dtoa_r+0x2ec>
 8015368:	2b00      	cmp	r3, #0
 801536a:	f000 855c 	beq.w	8015e26 <_dtoa_r+0xb4e>
 801536e:	f10a 0303 	add.w	r3, sl, #3
 8015372:	f000 bd56 	b.w	8015e22 <_dtoa_r+0xb4a>
 8015376:	ed9d 7b04 	vldr	d7, [sp, #16]
 801537a:	2200      	movs	r2, #0
 801537c:	ec51 0b17 	vmov	r0, r1, d7
 8015380:	2300      	movs	r3, #0
 8015382:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8015386:	f7eb fbc7 	bl	8000b18 <__aeabi_dcmpeq>
 801538a:	4680      	mov	r8, r0
 801538c:	b158      	cbz	r0, 80153a6 <_dtoa_r+0xce>
 801538e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015390:	2301      	movs	r3, #1
 8015392:	6013      	str	r3, [r2, #0]
 8015394:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015396:	b113      	cbz	r3, 801539e <_dtoa_r+0xc6>
 8015398:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801539a:	4b86      	ldr	r3, [pc, #536]	@ (80155b4 <_dtoa_r+0x2dc>)
 801539c:	6013      	str	r3, [r2, #0]
 801539e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80155c8 <_dtoa_r+0x2f0>
 80153a2:	f000 bd40 	b.w	8015e26 <_dtoa_r+0xb4e>
 80153a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80153aa:	aa14      	add	r2, sp, #80	@ 0x50
 80153ac:	a915      	add	r1, sp, #84	@ 0x54
 80153ae:	4648      	mov	r0, r9
 80153b0:	f001 fa3e 	bl	8016830 <__d2b>
 80153b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80153b8:	9002      	str	r0, [sp, #8]
 80153ba:	2e00      	cmp	r6, #0
 80153bc:	d078      	beq.n	80154b0 <_dtoa_r+0x1d8>
 80153be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80153c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80153c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80153cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80153d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80153d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80153d8:	4619      	mov	r1, r3
 80153da:	2200      	movs	r2, #0
 80153dc:	4b76      	ldr	r3, [pc, #472]	@ (80155b8 <_dtoa_r+0x2e0>)
 80153de:	f7ea ff7b 	bl	80002d8 <__aeabi_dsub>
 80153e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8015590 <_dtoa_r+0x2b8>)
 80153e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e8:	f7eb f92e 	bl	8000648 <__aeabi_dmul>
 80153ec:	a36a      	add	r3, pc, #424	@ (adr r3, 8015598 <_dtoa_r+0x2c0>)
 80153ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f2:	f7ea ff73 	bl	80002dc <__adddf3>
 80153f6:	4604      	mov	r4, r0
 80153f8:	4630      	mov	r0, r6
 80153fa:	460d      	mov	r5, r1
 80153fc:	f7eb f8ba 	bl	8000574 <__aeabi_i2d>
 8015400:	a367      	add	r3, pc, #412	@ (adr r3, 80155a0 <_dtoa_r+0x2c8>)
 8015402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015406:	f7eb f91f 	bl	8000648 <__aeabi_dmul>
 801540a:	4602      	mov	r2, r0
 801540c:	460b      	mov	r3, r1
 801540e:	4620      	mov	r0, r4
 8015410:	4629      	mov	r1, r5
 8015412:	f7ea ff63 	bl	80002dc <__adddf3>
 8015416:	4604      	mov	r4, r0
 8015418:	460d      	mov	r5, r1
 801541a:	f7eb fbc5 	bl	8000ba8 <__aeabi_d2iz>
 801541e:	2200      	movs	r2, #0
 8015420:	4607      	mov	r7, r0
 8015422:	2300      	movs	r3, #0
 8015424:	4620      	mov	r0, r4
 8015426:	4629      	mov	r1, r5
 8015428:	f7eb fb80 	bl	8000b2c <__aeabi_dcmplt>
 801542c:	b140      	cbz	r0, 8015440 <_dtoa_r+0x168>
 801542e:	4638      	mov	r0, r7
 8015430:	f7eb f8a0 	bl	8000574 <__aeabi_i2d>
 8015434:	4622      	mov	r2, r4
 8015436:	462b      	mov	r3, r5
 8015438:	f7eb fb6e 	bl	8000b18 <__aeabi_dcmpeq>
 801543c:	b900      	cbnz	r0, 8015440 <_dtoa_r+0x168>
 801543e:	3f01      	subs	r7, #1
 8015440:	2f16      	cmp	r7, #22
 8015442:	d852      	bhi.n	80154ea <_dtoa_r+0x212>
 8015444:	4b5d      	ldr	r3, [pc, #372]	@ (80155bc <_dtoa_r+0x2e4>)
 8015446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801544e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015452:	f7eb fb6b 	bl	8000b2c <__aeabi_dcmplt>
 8015456:	2800      	cmp	r0, #0
 8015458:	d049      	beq.n	80154ee <_dtoa_r+0x216>
 801545a:	3f01      	subs	r7, #1
 801545c:	2300      	movs	r3, #0
 801545e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015460:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015462:	1b9b      	subs	r3, r3, r6
 8015464:	1e5a      	subs	r2, r3, #1
 8015466:	bf45      	ittet	mi
 8015468:	f1c3 0301 	rsbmi	r3, r3, #1
 801546c:	9300      	strmi	r3, [sp, #0]
 801546e:	2300      	movpl	r3, #0
 8015470:	2300      	movmi	r3, #0
 8015472:	9206      	str	r2, [sp, #24]
 8015474:	bf54      	ite	pl
 8015476:	9300      	strpl	r3, [sp, #0]
 8015478:	9306      	strmi	r3, [sp, #24]
 801547a:	2f00      	cmp	r7, #0
 801547c:	db39      	blt.n	80154f2 <_dtoa_r+0x21a>
 801547e:	9b06      	ldr	r3, [sp, #24]
 8015480:	970d      	str	r7, [sp, #52]	@ 0x34
 8015482:	443b      	add	r3, r7
 8015484:	9306      	str	r3, [sp, #24]
 8015486:	2300      	movs	r3, #0
 8015488:	9308      	str	r3, [sp, #32]
 801548a:	9b07      	ldr	r3, [sp, #28]
 801548c:	2b09      	cmp	r3, #9
 801548e:	d863      	bhi.n	8015558 <_dtoa_r+0x280>
 8015490:	2b05      	cmp	r3, #5
 8015492:	bfc4      	itt	gt
 8015494:	3b04      	subgt	r3, #4
 8015496:	9307      	strgt	r3, [sp, #28]
 8015498:	9b07      	ldr	r3, [sp, #28]
 801549a:	f1a3 0302 	sub.w	r3, r3, #2
 801549e:	bfcc      	ite	gt
 80154a0:	2400      	movgt	r4, #0
 80154a2:	2401      	movle	r4, #1
 80154a4:	2b03      	cmp	r3, #3
 80154a6:	d863      	bhi.n	8015570 <_dtoa_r+0x298>
 80154a8:	e8df f003 	tbb	[pc, r3]
 80154ac:	2b375452 	.word	0x2b375452
 80154b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80154b4:	441e      	add	r6, r3
 80154b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80154ba:	2b20      	cmp	r3, #32
 80154bc:	bfc1      	itttt	gt
 80154be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80154c2:	409f      	lslgt	r7, r3
 80154c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80154c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80154cc:	bfd6      	itet	le
 80154ce:	f1c3 0320 	rsble	r3, r3, #32
 80154d2:	ea47 0003 	orrgt.w	r0, r7, r3
 80154d6:	fa04 f003 	lslle.w	r0, r4, r3
 80154da:	f7eb f83b 	bl	8000554 <__aeabi_ui2d>
 80154de:	2201      	movs	r2, #1
 80154e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80154e4:	3e01      	subs	r6, #1
 80154e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80154e8:	e776      	b.n	80153d8 <_dtoa_r+0x100>
 80154ea:	2301      	movs	r3, #1
 80154ec:	e7b7      	b.n	801545e <_dtoa_r+0x186>
 80154ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80154f0:	e7b6      	b.n	8015460 <_dtoa_r+0x188>
 80154f2:	9b00      	ldr	r3, [sp, #0]
 80154f4:	1bdb      	subs	r3, r3, r7
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	427b      	negs	r3, r7
 80154fa:	9308      	str	r3, [sp, #32]
 80154fc:	2300      	movs	r3, #0
 80154fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8015500:	e7c3      	b.n	801548a <_dtoa_r+0x1b2>
 8015502:	2301      	movs	r3, #1
 8015504:	9309      	str	r3, [sp, #36]	@ 0x24
 8015506:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015508:	eb07 0b03 	add.w	fp, r7, r3
 801550c:	f10b 0301 	add.w	r3, fp, #1
 8015510:	2b01      	cmp	r3, #1
 8015512:	9303      	str	r3, [sp, #12]
 8015514:	bfb8      	it	lt
 8015516:	2301      	movlt	r3, #1
 8015518:	e006      	b.n	8015528 <_dtoa_r+0x250>
 801551a:	2301      	movs	r3, #1
 801551c:	9309      	str	r3, [sp, #36]	@ 0x24
 801551e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015520:	2b00      	cmp	r3, #0
 8015522:	dd28      	ble.n	8015576 <_dtoa_r+0x29e>
 8015524:	469b      	mov	fp, r3
 8015526:	9303      	str	r3, [sp, #12]
 8015528:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801552c:	2100      	movs	r1, #0
 801552e:	2204      	movs	r2, #4
 8015530:	f102 0514 	add.w	r5, r2, #20
 8015534:	429d      	cmp	r5, r3
 8015536:	d926      	bls.n	8015586 <_dtoa_r+0x2ae>
 8015538:	6041      	str	r1, [r0, #4]
 801553a:	4648      	mov	r0, r9
 801553c:	f000 fd9c 	bl	8016078 <_Balloc>
 8015540:	4682      	mov	sl, r0
 8015542:	2800      	cmp	r0, #0
 8015544:	d142      	bne.n	80155cc <_dtoa_r+0x2f4>
 8015546:	4b1e      	ldr	r3, [pc, #120]	@ (80155c0 <_dtoa_r+0x2e8>)
 8015548:	4602      	mov	r2, r0
 801554a:	f240 11af 	movw	r1, #431	@ 0x1af
 801554e:	e6da      	b.n	8015306 <_dtoa_r+0x2e>
 8015550:	2300      	movs	r3, #0
 8015552:	e7e3      	b.n	801551c <_dtoa_r+0x244>
 8015554:	2300      	movs	r3, #0
 8015556:	e7d5      	b.n	8015504 <_dtoa_r+0x22c>
 8015558:	2401      	movs	r4, #1
 801555a:	2300      	movs	r3, #0
 801555c:	9307      	str	r3, [sp, #28]
 801555e:	9409      	str	r4, [sp, #36]	@ 0x24
 8015560:	f04f 3bff 	mov.w	fp, #4294967295
 8015564:	2200      	movs	r2, #0
 8015566:	f8cd b00c 	str.w	fp, [sp, #12]
 801556a:	2312      	movs	r3, #18
 801556c:	920c      	str	r2, [sp, #48]	@ 0x30
 801556e:	e7db      	b.n	8015528 <_dtoa_r+0x250>
 8015570:	2301      	movs	r3, #1
 8015572:	9309      	str	r3, [sp, #36]	@ 0x24
 8015574:	e7f4      	b.n	8015560 <_dtoa_r+0x288>
 8015576:	f04f 0b01 	mov.w	fp, #1
 801557a:	f8cd b00c 	str.w	fp, [sp, #12]
 801557e:	465b      	mov	r3, fp
 8015580:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015584:	e7d0      	b.n	8015528 <_dtoa_r+0x250>
 8015586:	3101      	adds	r1, #1
 8015588:	0052      	lsls	r2, r2, #1
 801558a:	e7d1      	b.n	8015530 <_dtoa_r+0x258>
 801558c:	f3af 8000 	nop.w
 8015590:	636f4361 	.word	0x636f4361
 8015594:	3fd287a7 	.word	0x3fd287a7
 8015598:	8b60c8b3 	.word	0x8b60c8b3
 801559c:	3fc68a28 	.word	0x3fc68a28
 80155a0:	509f79fb 	.word	0x509f79fb
 80155a4:	3fd34413 	.word	0x3fd34413
 80155a8:	0801b63a 	.word	0x0801b63a
 80155ac:	0801b651 	.word	0x0801b651
 80155b0:	7ff00000 	.word	0x7ff00000
 80155b4:	0801b605 	.word	0x0801b605
 80155b8:	3ff80000 	.word	0x3ff80000
 80155bc:	0801b800 	.word	0x0801b800
 80155c0:	0801b6a9 	.word	0x0801b6a9
 80155c4:	0801b636 	.word	0x0801b636
 80155c8:	0801b604 	.word	0x0801b604
 80155cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80155d0:	6018      	str	r0, [r3, #0]
 80155d2:	9b03      	ldr	r3, [sp, #12]
 80155d4:	2b0e      	cmp	r3, #14
 80155d6:	f200 80a1 	bhi.w	801571c <_dtoa_r+0x444>
 80155da:	2c00      	cmp	r4, #0
 80155dc:	f000 809e 	beq.w	801571c <_dtoa_r+0x444>
 80155e0:	2f00      	cmp	r7, #0
 80155e2:	dd33      	ble.n	801564c <_dtoa_r+0x374>
 80155e4:	4b9c      	ldr	r3, [pc, #624]	@ (8015858 <_dtoa_r+0x580>)
 80155e6:	f007 020f 	and.w	r2, r7, #15
 80155ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155ee:	ed93 7b00 	vldr	d7, [r3]
 80155f2:	05f8      	lsls	r0, r7, #23
 80155f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80155f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80155fc:	d516      	bpl.n	801562c <_dtoa_r+0x354>
 80155fe:	4b97      	ldr	r3, [pc, #604]	@ (801585c <_dtoa_r+0x584>)
 8015600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015608:	f7eb f948 	bl	800089c <__aeabi_ddiv>
 801560c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015610:	f004 040f 	and.w	r4, r4, #15
 8015614:	2603      	movs	r6, #3
 8015616:	4d91      	ldr	r5, [pc, #580]	@ (801585c <_dtoa_r+0x584>)
 8015618:	b954      	cbnz	r4, 8015630 <_dtoa_r+0x358>
 801561a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801561e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015622:	f7eb f93b 	bl	800089c <__aeabi_ddiv>
 8015626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801562a:	e028      	b.n	801567e <_dtoa_r+0x3a6>
 801562c:	2602      	movs	r6, #2
 801562e:	e7f2      	b.n	8015616 <_dtoa_r+0x33e>
 8015630:	07e1      	lsls	r1, r4, #31
 8015632:	d508      	bpl.n	8015646 <_dtoa_r+0x36e>
 8015634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015638:	e9d5 2300 	ldrd	r2, r3, [r5]
 801563c:	f7eb f804 	bl	8000648 <__aeabi_dmul>
 8015640:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015644:	3601      	adds	r6, #1
 8015646:	1064      	asrs	r4, r4, #1
 8015648:	3508      	adds	r5, #8
 801564a:	e7e5      	b.n	8015618 <_dtoa_r+0x340>
 801564c:	f000 80af 	beq.w	80157ae <_dtoa_r+0x4d6>
 8015650:	427c      	negs	r4, r7
 8015652:	4b81      	ldr	r3, [pc, #516]	@ (8015858 <_dtoa_r+0x580>)
 8015654:	4d81      	ldr	r5, [pc, #516]	@ (801585c <_dtoa_r+0x584>)
 8015656:	f004 020f 	and.w	r2, r4, #15
 801565a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015666:	f7ea ffef 	bl	8000648 <__aeabi_dmul>
 801566a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801566e:	1124      	asrs	r4, r4, #4
 8015670:	2300      	movs	r3, #0
 8015672:	2602      	movs	r6, #2
 8015674:	2c00      	cmp	r4, #0
 8015676:	f040 808f 	bne.w	8015798 <_dtoa_r+0x4c0>
 801567a:	2b00      	cmp	r3, #0
 801567c:	d1d3      	bne.n	8015626 <_dtoa_r+0x34e>
 801567e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015680:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015684:	2b00      	cmp	r3, #0
 8015686:	f000 8094 	beq.w	80157b2 <_dtoa_r+0x4da>
 801568a:	4b75      	ldr	r3, [pc, #468]	@ (8015860 <_dtoa_r+0x588>)
 801568c:	2200      	movs	r2, #0
 801568e:	4620      	mov	r0, r4
 8015690:	4629      	mov	r1, r5
 8015692:	f7eb fa4b 	bl	8000b2c <__aeabi_dcmplt>
 8015696:	2800      	cmp	r0, #0
 8015698:	f000 808b 	beq.w	80157b2 <_dtoa_r+0x4da>
 801569c:	9b03      	ldr	r3, [sp, #12]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	f000 8087 	beq.w	80157b2 <_dtoa_r+0x4da>
 80156a4:	f1bb 0f00 	cmp.w	fp, #0
 80156a8:	dd34      	ble.n	8015714 <_dtoa_r+0x43c>
 80156aa:	4620      	mov	r0, r4
 80156ac:	4b6d      	ldr	r3, [pc, #436]	@ (8015864 <_dtoa_r+0x58c>)
 80156ae:	2200      	movs	r2, #0
 80156b0:	4629      	mov	r1, r5
 80156b2:	f7ea ffc9 	bl	8000648 <__aeabi_dmul>
 80156b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80156ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80156be:	3601      	adds	r6, #1
 80156c0:	465c      	mov	r4, fp
 80156c2:	4630      	mov	r0, r6
 80156c4:	f7ea ff56 	bl	8000574 <__aeabi_i2d>
 80156c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156cc:	f7ea ffbc 	bl	8000648 <__aeabi_dmul>
 80156d0:	4b65      	ldr	r3, [pc, #404]	@ (8015868 <_dtoa_r+0x590>)
 80156d2:	2200      	movs	r2, #0
 80156d4:	f7ea fe02 	bl	80002dc <__adddf3>
 80156d8:	4605      	mov	r5, r0
 80156da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80156de:	2c00      	cmp	r4, #0
 80156e0:	d16a      	bne.n	80157b8 <_dtoa_r+0x4e0>
 80156e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80156e6:	4b61      	ldr	r3, [pc, #388]	@ (801586c <_dtoa_r+0x594>)
 80156e8:	2200      	movs	r2, #0
 80156ea:	f7ea fdf5 	bl	80002d8 <__aeabi_dsub>
 80156ee:	4602      	mov	r2, r0
 80156f0:	460b      	mov	r3, r1
 80156f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80156f6:	462a      	mov	r2, r5
 80156f8:	4633      	mov	r3, r6
 80156fa:	f7eb fa35 	bl	8000b68 <__aeabi_dcmpgt>
 80156fe:	2800      	cmp	r0, #0
 8015700:	f040 8298 	bne.w	8015c34 <_dtoa_r+0x95c>
 8015704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015708:	462a      	mov	r2, r5
 801570a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801570e:	f7eb fa0d 	bl	8000b2c <__aeabi_dcmplt>
 8015712:	bb38      	cbnz	r0, 8015764 <_dtoa_r+0x48c>
 8015714:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015718:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801571c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801571e:	2b00      	cmp	r3, #0
 8015720:	f2c0 8157 	blt.w	80159d2 <_dtoa_r+0x6fa>
 8015724:	2f0e      	cmp	r7, #14
 8015726:	f300 8154 	bgt.w	80159d2 <_dtoa_r+0x6fa>
 801572a:	4b4b      	ldr	r3, [pc, #300]	@ (8015858 <_dtoa_r+0x580>)
 801572c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015730:	ed93 7b00 	vldr	d7, [r3]
 8015734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015736:	2b00      	cmp	r3, #0
 8015738:	ed8d 7b00 	vstr	d7, [sp]
 801573c:	f280 80e5 	bge.w	801590a <_dtoa_r+0x632>
 8015740:	9b03      	ldr	r3, [sp, #12]
 8015742:	2b00      	cmp	r3, #0
 8015744:	f300 80e1 	bgt.w	801590a <_dtoa_r+0x632>
 8015748:	d10c      	bne.n	8015764 <_dtoa_r+0x48c>
 801574a:	4b48      	ldr	r3, [pc, #288]	@ (801586c <_dtoa_r+0x594>)
 801574c:	2200      	movs	r2, #0
 801574e:	ec51 0b17 	vmov	r0, r1, d7
 8015752:	f7ea ff79 	bl	8000648 <__aeabi_dmul>
 8015756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801575a:	f7eb f9fb 	bl	8000b54 <__aeabi_dcmpge>
 801575e:	2800      	cmp	r0, #0
 8015760:	f000 8266 	beq.w	8015c30 <_dtoa_r+0x958>
 8015764:	2400      	movs	r4, #0
 8015766:	4625      	mov	r5, r4
 8015768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801576a:	4656      	mov	r6, sl
 801576c:	ea6f 0803 	mvn.w	r8, r3
 8015770:	2700      	movs	r7, #0
 8015772:	4621      	mov	r1, r4
 8015774:	4648      	mov	r0, r9
 8015776:	f000 fcbf 	bl	80160f8 <_Bfree>
 801577a:	2d00      	cmp	r5, #0
 801577c:	f000 80bd 	beq.w	80158fa <_dtoa_r+0x622>
 8015780:	b12f      	cbz	r7, 801578e <_dtoa_r+0x4b6>
 8015782:	42af      	cmp	r7, r5
 8015784:	d003      	beq.n	801578e <_dtoa_r+0x4b6>
 8015786:	4639      	mov	r1, r7
 8015788:	4648      	mov	r0, r9
 801578a:	f000 fcb5 	bl	80160f8 <_Bfree>
 801578e:	4629      	mov	r1, r5
 8015790:	4648      	mov	r0, r9
 8015792:	f000 fcb1 	bl	80160f8 <_Bfree>
 8015796:	e0b0      	b.n	80158fa <_dtoa_r+0x622>
 8015798:	07e2      	lsls	r2, r4, #31
 801579a:	d505      	bpl.n	80157a8 <_dtoa_r+0x4d0>
 801579c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80157a0:	f7ea ff52 	bl	8000648 <__aeabi_dmul>
 80157a4:	3601      	adds	r6, #1
 80157a6:	2301      	movs	r3, #1
 80157a8:	1064      	asrs	r4, r4, #1
 80157aa:	3508      	adds	r5, #8
 80157ac:	e762      	b.n	8015674 <_dtoa_r+0x39c>
 80157ae:	2602      	movs	r6, #2
 80157b0:	e765      	b.n	801567e <_dtoa_r+0x3a6>
 80157b2:	9c03      	ldr	r4, [sp, #12]
 80157b4:	46b8      	mov	r8, r7
 80157b6:	e784      	b.n	80156c2 <_dtoa_r+0x3ea>
 80157b8:	4b27      	ldr	r3, [pc, #156]	@ (8015858 <_dtoa_r+0x580>)
 80157ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80157bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80157c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80157c4:	4454      	add	r4, sl
 80157c6:	2900      	cmp	r1, #0
 80157c8:	d054      	beq.n	8015874 <_dtoa_r+0x59c>
 80157ca:	4929      	ldr	r1, [pc, #164]	@ (8015870 <_dtoa_r+0x598>)
 80157cc:	2000      	movs	r0, #0
 80157ce:	f7eb f865 	bl	800089c <__aeabi_ddiv>
 80157d2:	4633      	mov	r3, r6
 80157d4:	462a      	mov	r2, r5
 80157d6:	f7ea fd7f 	bl	80002d8 <__aeabi_dsub>
 80157da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80157de:	4656      	mov	r6, sl
 80157e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80157e4:	f7eb f9e0 	bl	8000ba8 <__aeabi_d2iz>
 80157e8:	4605      	mov	r5, r0
 80157ea:	f7ea fec3 	bl	8000574 <__aeabi_i2d>
 80157ee:	4602      	mov	r2, r0
 80157f0:	460b      	mov	r3, r1
 80157f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80157f6:	f7ea fd6f 	bl	80002d8 <__aeabi_dsub>
 80157fa:	3530      	adds	r5, #48	@ 0x30
 80157fc:	4602      	mov	r2, r0
 80157fe:	460b      	mov	r3, r1
 8015800:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015804:	f806 5b01 	strb.w	r5, [r6], #1
 8015808:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801580c:	f7eb f98e 	bl	8000b2c <__aeabi_dcmplt>
 8015810:	2800      	cmp	r0, #0
 8015812:	d172      	bne.n	80158fa <_dtoa_r+0x622>
 8015814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015818:	4911      	ldr	r1, [pc, #68]	@ (8015860 <_dtoa_r+0x588>)
 801581a:	2000      	movs	r0, #0
 801581c:	f7ea fd5c 	bl	80002d8 <__aeabi_dsub>
 8015820:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015824:	f7eb f982 	bl	8000b2c <__aeabi_dcmplt>
 8015828:	2800      	cmp	r0, #0
 801582a:	f040 80b4 	bne.w	8015996 <_dtoa_r+0x6be>
 801582e:	42a6      	cmp	r6, r4
 8015830:	f43f af70 	beq.w	8015714 <_dtoa_r+0x43c>
 8015834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015838:	4b0a      	ldr	r3, [pc, #40]	@ (8015864 <_dtoa_r+0x58c>)
 801583a:	2200      	movs	r2, #0
 801583c:	f7ea ff04 	bl	8000648 <__aeabi_dmul>
 8015840:	4b08      	ldr	r3, [pc, #32]	@ (8015864 <_dtoa_r+0x58c>)
 8015842:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015846:	2200      	movs	r2, #0
 8015848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801584c:	f7ea fefc 	bl	8000648 <__aeabi_dmul>
 8015850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015854:	e7c4      	b.n	80157e0 <_dtoa_r+0x508>
 8015856:	bf00      	nop
 8015858:	0801b800 	.word	0x0801b800
 801585c:	0801b7d8 	.word	0x0801b7d8
 8015860:	3ff00000 	.word	0x3ff00000
 8015864:	40240000 	.word	0x40240000
 8015868:	401c0000 	.word	0x401c0000
 801586c:	40140000 	.word	0x40140000
 8015870:	3fe00000 	.word	0x3fe00000
 8015874:	4631      	mov	r1, r6
 8015876:	4628      	mov	r0, r5
 8015878:	f7ea fee6 	bl	8000648 <__aeabi_dmul>
 801587c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015880:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015882:	4656      	mov	r6, sl
 8015884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015888:	f7eb f98e 	bl	8000ba8 <__aeabi_d2iz>
 801588c:	4605      	mov	r5, r0
 801588e:	f7ea fe71 	bl	8000574 <__aeabi_i2d>
 8015892:	4602      	mov	r2, r0
 8015894:	460b      	mov	r3, r1
 8015896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801589a:	f7ea fd1d 	bl	80002d8 <__aeabi_dsub>
 801589e:	3530      	adds	r5, #48	@ 0x30
 80158a0:	f806 5b01 	strb.w	r5, [r6], #1
 80158a4:	4602      	mov	r2, r0
 80158a6:	460b      	mov	r3, r1
 80158a8:	42a6      	cmp	r6, r4
 80158aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80158ae:	f04f 0200 	mov.w	r2, #0
 80158b2:	d124      	bne.n	80158fe <_dtoa_r+0x626>
 80158b4:	4baf      	ldr	r3, [pc, #700]	@ (8015b74 <_dtoa_r+0x89c>)
 80158b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80158ba:	f7ea fd0f 	bl	80002dc <__adddf3>
 80158be:	4602      	mov	r2, r0
 80158c0:	460b      	mov	r3, r1
 80158c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80158c6:	f7eb f94f 	bl	8000b68 <__aeabi_dcmpgt>
 80158ca:	2800      	cmp	r0, #0
 80158cc:	d163      	bne.n	8015996 <_dtoa_r+0x6be>
 80158ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80158d2:	49a8      	ldr	r1, [pc, #672]	@ (8015b74 <_dtoa_r+0x89c>)
 80158d4:	2000      	movs	r0, #0
 80158d6:	f7ea fcff 	bl	80002d8 <__aeabi_dsub>
 80158da:	4602      	mov	r2, r0
 80158dc:	460b      	mov	r3, r1
 80158de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80158e2:	f7eb f923 	bl	8000b2c <__aeabi_dcmplt>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	f43f af14 	beq.w	8015714 <_dtoa_r+0x43c>
 80158ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80158ee:	1e73      	subs	r3, r6, #1
 80158f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80158f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80158f6:	2b30      	cmp	r3, #48	@ 0x30
 80158f8:	d0f8      	beq.n	80158ec <_dtoa_r+0x614>
 80158fa:	4647      	mov	r7, r8
 80158fc:	e03b      	b.n	8015976 <_dtoa_r+0x69e>
 80158fe:	4b9e      	ldr	r3, [pc, #632]	@ (8015b78 <_dtoa_r+0x8a0>)
 8015900:	f7ea fea2 	bl	8000648 <__aeabi_dmul>
 8015904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015908:	e7bc      	b.n	8015884 <_dtoa_r+0x5ac>
 801590a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801590e:	4656      	mov	r6, sl
 8015910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015914:	4620      	mov	r0, r4
 8015916:	4629      	mov	r1, r5
 8015918:	f7ea ffc0 	bl	800089c <__aeabi_ddiv>
 801591c:	f7eb f944 	bl	8000ba8 <__aeabi_d2iz>
 8015920:	4680      	mov	r8, r0
 8015922:	f7ea fe27 	bl	8000574 <__aeabi_i2d>
 8015926:	e9dd 2300 	ldrd	r2, r3, [sp]
 801592a:	f7ea fe8d 	bl	8000648 <__aeabi_dmul>
 801592e:	4602      	mov	r2, r0
 8015930:	460b      	mov	r3, r1
 8015932:	4620      	mov	r0, r4
 8015934:	4629      	mov	r1, r5
 8015936:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801593a:	f7ea fccd 	bl	80002d8 <__aeabi_dsub>
 801593e:	f806 4b01 	strb.w	r4, [r6], #1
 8015942:	9d03      	ldr	r5, [sp, #12]
 8015944:	eba6 040a 	sub.w	r4, r6, sl
 8015948:	42a5      	cmp	r5, r4
 801594a:	4602      	mov	r2, r0
 801594c:	460b      	mov	r3, r1
 801594e:	d133      	bne.n	80159b8 <_dtoa_r+0x6e0>
 8015950:	f7ea fcc4 	bl	80002dc <__adddf3>
 8015954:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015958:	4604      	mov	r4, r0
 801595a:	460d      	mov	r5, r1
 801595c:	f7eb f904 	bl	8000b68 <__aeabi_dcmpgt>
 8015960:	b9c0      	cbnz	r0, 8015994 <_dtoa_r+0x6bc>
 8015962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015966:	4620      	mov	r0, r4
 8015968:	4629      	mov	r1, r5
 801596a:	f7eb f8d5 	bl	8000b18 <__aeabi_dcmpeq>
 801596e:	b110      	cbz	r0, 8015976 <_dtoa_r+0x69e>
 8015970:	f018 0f01 	tst.w	r8, #1
 8015974:	d10e      	bne.n	8015994 <_dtoa_r+0x6bc>
 8015976:	9902      	ldr	r1, [sp, #8]
 8015978:	4648      	mov	r0, r9
 801597a:	f000 fbbd 	bl	80160f8 <_Bfree>
 801597e:	2300      	movs	r3, #0
 8015980:	7033      	strb	r3, [r6, #0]
 8015982:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015984:	3701      	adds	r7, #1
 8015986:	601f      	str	r7, [r3, #0]
 8015988:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801598a:	2b00      	cmp	r3, #0
 801598c:	f000 824b 	beq.w	8015e26 <_dtoa_r+0xb4e>
 8015990:	601e      	str	r6, [r3, #0]
 8015992:	e248      	b.n	8015e26 <_dtoa_r+0xb4e>
 8015994:	46b8      	mov	r8, r7
 8015996:	4633      	mov	r3, r6
 8015998:	461e      	mov	r6, r3
 801599a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801599e:	2a39      	cmp	r2, #57	@ 0x39
 80159a0:	d106      	bne.n	80159b0 <_dtoa_r+0x6d8>
 80159a2:	459a      	cmp	sl, r3
 80159a4:	d1f8      	bne.n	8015998 <_dtoa_r+0x6c0>
 80159a6:	2230      	movs	r2, #48	@ 0x30
 80159a8:	f108 0801 	add.w	r8, r8, #1
 80159ac:	f88a 2000 	strb.w	r2, [sl]
 80159b0:	781a      	ldrb	r2, [r3, #0]
 80159b2:	3201      	adds	r2, #1
 80159b4:	701a      	strb	r2, [r3, #0]
 80159b6:	e7a0      	b.n	80158fa <_dtoa_r+0x622>
 80159b8:	4b6f      	ldr	r3, [pc, #444]	@ (8015b78 <_dtoa_r+0x8a0>)
 80159ba:	2200      	movs	r2, #0
 80159bc:	f7ea fe44 	bl	8000648 <__aeabi_dmul>
 80159c0:	2200      	movs	r2, #0
 80159c2:	2300      	movs	r3, #0
 80159c4:	4604      	mov	r4, r0
 80159c6:	460d      	mov	r5, r1
 80159c8:	f7eb f8a6 	bl	8000b18 <__aeabi_dcmpeq>
 80159cc:	2800      	cmp	r0, #0
 80159ce:	d09f      	beq.n	8015910 <_dtoa_r+0x638>
 80159d0:	e7d1      	b.n	8015976 <_dtoa_r+0x69e>
 80159d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159d4:	2a00      	cmp	r2, #0
 80159d6:	f000 80ea 	beq.w	8015bae <_dtoa_r+0x8d6>
 80159da:	9a07      	ldr	r2, [sp, #28]
 80159dc:	2a01      	cmp	r2, #1
 80159de:	f300 80cd 	bgt.w	8015b7c <_dtoa_r+0x8a4>
 80159e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80159e4:	2a00      	cmp	r2, #0
 80159e6:	f000 80c1 	beq.w	8015b6c <_dtoa_r+0x894>
 80159ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80159ee:	9c08      	ldr	r4, [sp, #32]
 80159f0:	9e00      	ldr	r6, [sp, #0]
 80159f2:	9a00      	ldr	r2, [sp, #0]
 80159f4:	441a      	add	r2, r3
 80159f6:	9200      	str	r2, [sp, #0]
 80159f8:	9a06      	ldr	r2, [sp, #24]
 80159fa:	2101      	movs	r1, #1
 80159fc:	441a      	add	r2, r3
 80159fe:	4648      	mov	r0, r9
 8015a00:	9206      	str	r2, [sp, #24]
 8015a02:	f000 fc77 	bl	80162f4 <__i2b>
 8015a06:	4605      	mov	r5, r0
 8015a08:	b166      	cbz	r6, 8015a24 <_dtoa_r+0x74c>
 8015a0a:	9b06      	ldr	r3, [sp, #24]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	dd09      	ble.n	8015a24 <_dtoa_r+0x74c>
 8015a10:	42b3      	cmp	r3, r6
 8015a12:	9a00      	ldr	r2, [sp, #0]
 8015a14:	bfa8      	it	ge
 8015a16:	4633      	movge	r3, r6
 8015a18:	1ad2      	subs	r2, r2, r3
 8015a1a:	9200      	str	r2, [sp, #0]
 8015a1c:	9a06      	ldr	r2, [sp, #24]
 8015a1e:	1af6      	subs	r6, r6, r3
 8015a20:	1ad3      	subs	r3, r2, r3
 8015a22:	9306      	str	r3, [sp, #24]
 8015a24:	9b08      	ldr	r3, [sp, #32]
 8015a26:	b30b      	cbz	r3, 8015a6c <_dtoa_r+0x794>
 8015a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	f000 80c6 	beq.w	8015bbc <_dtoa_r+0x8e4>
 8015a30:	2c00      	cmp	r4, #0
 8015a32:	f000 80c0 	beq.w	8015bb6 <_dtoa_r+0x8de>
 8015a36:	4629      	mov	r1, r5
 8015a38:	4622      	mov	r2, r4
 8015a3a:	4648      	mov	r0, r9
 8015a3c:	f000 fd12 	bl	8016464 <__pow5mult>
 8015a40:	9a02      	ldr	r2, [sp, #8]
 8015a42:	4601      	mov	r1, r0
 8015a44:	4605      	mov	r5, r0
 8015a46:	4648      	mov	r0, r9
 8015a48:	f000 fc6a 	bl	8016320 <__multiply>
 8015a4c:	9902      	ldr	r1, [sp, #8]
 8015a4e:	4680      	mov	r8, r0
 8015a50:	4648      	mov	r0, r9
 8015a52:	f000 fb51 	bl	80160f8 <_Bfree>
 8015a56:	9b08      	ldr	r3, [sp, #32]
 8015a58:	1b1b      	subs	r3, r3, r4
 8015a5a:	9308      	str	r3, [sp, #32]
 8015a5c:	f000 80b1 	beq.w	8015bc2 <_dtoa_r+0x8ea>
 8015a60:	9a08      	ldr	r2, [sp, #32]
 8015a62:	4641      	mov	r1, r8
 8015a64:	4648      	mov	r0, r9
 8015a66:	f000 fcfd 	bl	8016464 <__pow5mult>
 8015a6a:	9002      	str	r0, [sp, #8]
 8015a6c:	2101      	movs	r1, #1
 8015a6e:	4648      	mov	r0, r9
 8015a70:	f000 fc40 	bl	80162f4 <__i2b>
 8015a74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a76:	4604      	mov	r4, r0
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	f000 81d8 	beq.w	8015e2e <_dtoa_r+0xb56>
 8015a7e:	461a      	mov	r2, r3
 8015a80:	4601      	mov	r1, r0
 8015a82:	4648      	mov	r0, r9
 8015a84:	f000 fcee 	bl	8016464 <__pow5mult>
 8015a88:	9b07      	ldr	r3, [sp, #28]
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	4604      	mov	r4, r0
 8015a8e:	f300 809f 	bgt.w	8015bd0 <_dtoa_r+0x8f8>
 8015a92:	9b04      	ldr	r3, [sp, #16]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	f040 8097 	bne.w	8015bc8 <_dtoa_r+0x8f0>
 8015a9a:	9b05      	ldr	r3, [sp, #20]
 8015a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	f040 8093 	bne.w	8015bcc <_dtoa_r+0x8f4>
 8015aa6:	9b05      	ldr	r3, [sp, #20]
 8015aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015aac:	0d1b      	lsrs	r3, r3, #20
 8015aae:	051b      	lsls	r3, r3, #20
 8015ab0:	b133      	cbz	r3, 8015ac0 <_dtoa_r+0x7e8>
 8015ab2:	9b00      	ldr	r3, [sp, #0]
 8015ab4:	3301      	adds	r3, #1
 8015ab6:	9300      	str	r3, [sp, #0]
 8015ab8:	9b06      	ldr	r3, [sp, #24]
 8015aba:	3301      	adds	r3, #1
 8015abc:	9306      	str	r3, [sp, #24]
 8015abe:	2301      	movs	r3, #1
 8015ac0:	9308      	str	r3, [sp, #32]
 8015ac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	f000 81b8 	beq.w	8015e3a <_dtoa_r+0xb62>
 8015aca:	6923      	ldr	r3, [r4, #16]
 8015acc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ad0:	6918      	ldr	r0, [r3, #16]
 8015ad2:	f000 fbc3 	bl	801625c <__hi0bits>
 8015ad6:	f1c0 0020 	rsb	r0, r0, #32
 8015ada:	9b06      	ldr	r3, [sp, #24]
 8015adc:	4418      	add	r0, r3
 8015ade:	f010 001f 	ands.w	r0, r0, #31
 8015ae2:	f000 8082 	beq.w	8015bea <_dtoa_r+0x912>
 8015ae6:	f1c0 0320 	rsb	r3, r0, #32
 8015aea:	2b04      	cmp	r3, #4
 8015aec:	dd73      	ble.n	8015bd6 <_dtoa_r+0x8fe>
 8015aee:	9b00      	ldr	r3, [sp, #0]
 8015af0:	f1c0 001c 	rsb	r0, r0, #28
 8015af4:	4403      	add	r3, r0
 8015af6:	9300      	str	r3, [sp, #0]
 8015af8:	9b06      	ldr	r3, [sp, #24]
 8015afa:	4403      	add	r3, r0
 8015afc:	4406      	add	r6, r0
 8015afe:	9306      	str	r3, [sp, #24]
 8015b00:	9b00      	ldr	r3, [sp, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	dd05      	ble.n	8015b12 <_dtoa_r+0x83a>
 8015b06:	9902      	ldr	r1, [sp, #8]
 8015b08:	461a      	mov	r2, r3
 8015b0a:	4648      	mov	r0, r9
 8015b0c:	f000 fd04 	bl	8016518 <__lshift>
 8015b10:	9002      	str	r0, [sp, #8]
 8015b12:	9b06      	ldr	r3, [sp, #24]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	dd05      	ble.n	8015b24 <_dtoa_r+0x84c>
 8015b18:	4621      	mov	r1, r4
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	4648      	mov	r0, r9
 8015b1e:	f000 fcfb 	bl	8016518 <__lshift>
 8015b22:	4604      	mov	r4, r0
 8015b24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d061      	beq.n	8015bee <_dtoa_r+0x916>
 8015b2a:	9802      	ldr	r0, [sp, #8]
 8015b2c:	4621      	mov	r1, r4
 8015b2e:	f000 fd5f 	bl	80165f0 <__mcmp>
 8015b32:	2800      	cmp	r0, #0
 8015b34:	da5b      	bge.n	8015bee <_dtoa_r+0x916>
 8015b36:	2300      	movs	r3, #0
 8015b38:	9902      	ldr	r1, [sp, #8]
 8015b3a:	220a      	movs	r2, #10
 8015b3c:	4648      	mov	r0, r9
 8015b3e:	f000 fafd 	bl	801613c <__multadd>
 8015b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b44:	9002      	str	r0, [sp, #8]
 8015b46:	f107 38ff 	add.w	r8, r7, #4294967295
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	f000 8177 	beq.w	8015e3e <_dtoa_r+0xb66>
 8015b50:	4629      	mov	r1, r5
 8015b52:	2300      	movs	r3, #0
 8015b54:	220a      	movs	r2, #10
 8015b56:	4648      	mov	r0, r9
 8015b58:	f000 faf0 	bl	801613c <__multadd>
 8015b5c:	f1bb 0f00 	cmp.w	fp, #0
 8015b60:	4605      	mov	r5, r0
 8015b62:	dc6f      	bgt.n	8015c44 <_dtoa_r+0x96c>
 8015b64:	9b07      	ldr	r3, [sp, #28]
 8015b66:	2b02      	cmp	r3, #2
 8015b68:	dc49      	bgt.n	8015bfe <_dtoa_r+0x926>
 8015b6a:	e06b      	b.n	8015c44 <_dtoa_r+0x96c>
 8015b6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015b6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015b72:	e73c      	b.n	80159ee <_dtoa_r+0x716>
 8015b74:	3fe00000 	.word	0x3fe00000
 8015b78:	40240000 	.word	0x40240000
 8015b7c:	9b03      	ldr	r3, [sp, #12]
 8015b7e:	1e5c      	subs	r4, r3, #1
 8015b80:	9b08      	ldr	r3, [sp, #32]
 8015b82:	42a3      	cmp	r3, r4
 8015b84:	db09      	blt.n	8015b9a <_dtoa_r+0x8c2>
 8015b86:	1b1c      	subs	r4, r3, r4
 8015b88:	9b03      	ldr	r3, [sp, #12]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	f6bf af30 	bge.w	80159f0 <_dtoa_r+0x718>
 8015b90:	9b00      	ldr	r3, [sp, #0]
 8015b92:	9a03      	ldr	r2, [sp, #12]
 8015b94:	1a9e      	subs	r6, r3, r2
 8015b96:	2300      	movs	r3, #0
 8015b98:	e72b      	b.n	80159f2 <_dtoa_r+0x71a>
 8015b9a:	9b08      	ldr	r3, [sp, #32]
 8015b9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015b9e:	9408      	str	r4, [sp, #32]
 8015ba0:	1ae3      	subs	r3, r4, r3
 8015ba2:	441a      	add	r2, r3
 8015ba4:	9e00      	ldr	r6, [sp, #0]
 8015ba6:	9b03      	ldr	r3, [sp, #12]
 8015ba8:	920d      	str	r2, [sp, #52]	@ 0x34
 8015baa:	2400      	movs	r4, #0
 8015bac:	e721      	b.n	80159f2 <_dtoa_r+0x71a>
 8015bae:	9c08      	ldr	r4, [sp, #32]
 8015bb0:	9e00      	ldr	r6, [sp, #0]
 8015bb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015bb4:	e728      	b.n	8015a08 <_dtoa_r+0x730>
 8015bb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015bba:	e751      	b.n	8015a60 <_dtoa_r+0x788>
 8015bbc:	9a08      	ldr	r2, [sp, #32]
 8015bbe:	9902      	ldr	r1, [sp, #8]
 8015bc0:	e750      	b.n	8015a64 <_dtoa_r+0x78c>
 8015bc2:	f8cd 8008 	str.w	r8, [sp, #8]
 8015bc6:	e751      	b.n	8015a6c <_dtoa_r+0x794>
 8015bc8:	2300      	movs	r3, #0
 8015bca:	e779      	b.n	8015ac0 <_dtoa_r+0x7e8>
 8015bcc:	9b04      	ldr	r3, [sp, #16]
 8015bce:	e777      	b.n	8015ac0 <_dtoa_r+0x7e8>
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	9308      	str	r3, [sp, #32]
 8015bd4:	e779      	b.n	8015aca <_dtoa_r+0x7f2>
 8015bd6:	d093      	beq.n	8015b00 <_dtoa_r+0x828>
 8015bd8:	9a00      	ldr	r2, [sp, #0]
 8015bda:	331c      	adds	r3, #28
 8015bdc:	441a      	add	r2, r3
 8015bde:	9200      	str	r2, [sp, #0]
 8015be0:	9a06      	ldr	r2, [sp, #24]
 8015be2:	441a      	add	r2, r3
 8015be4:	441e      	add	r6, r3
 8015be6:	9206      	str	r2, [sp, #24]
 8015be8:	e78a      	b.n	8015b00 <_dtoa_r+0x828>
 8015bea:	4603      	mov	r3, r0
 8015bec:	e7f4      	b.n	8015bd8 <_dtoa_r+0x900>
 8015bee:	9b03      	ldr	r3, [sp, #12]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	46b8      	mov	r8, r7
 8015bf4:	dc20      	bgt.n	8015c38 <_dtoa_r+0x960>
 8015bf6:	469b      	mov	fp, r3
 8015bf8:	9b07      	ldr	r3, [sp, #28]
 8015bfa:	2b02      	cmp	r3, #2
 8015bfc:	dd1e      	ble.n	8015c3c <_dtoa_r+0x964>
 8015bfe:	f1bb 0f00 	cmp.w	fp, #0
 8015c02:	f47f adb1 	bne.w	8015768 <_dtoa_r+0x490>
 8015c06:	4621      	mov	r1, r4
 8015c08:	465b      	mov	r3, fp
 8015c0a:	2205      	movs	r2, #5
 8015c0c:	4648      	mov	r0, r9
 8015c0e:	f000 fa95 	bl	801613c <__multadd>
 8015c12:	4601      	mov	r1, r0
 8015c14:	4604      	mov	r4, r0
 8015c16:	9802      	ldr	r0, [sp, #8]
 8015c18:	f000 fcea 	bl	80165f0 <__mcmp>
 8015c1c:	2800      	cmp	r0, #0
 8015c1e:	f77f ada3 	ble.w	8015768 <_dtoa_r+0x490>
 8015c22:	4656      	mov	r6, sl
 8015c24:	2331      	movs	r3, #49	@ 0x31
 8015c26:	f806 3b01 	strb.w	r3, [r6], #1
 8015c2a:	f108 0801 	add.w	r8, r8, #1
 8015c2e:	e59f      	b.n	8015770 <_dtoa_r+0x498>
 8015c30:	9c03      	ldr	r4, [sp, #12]
 8015c32:	46b8      	mov	r8, r7
 8015c34:	4625      	mov	r5, r4
 8015c36:	e7f4      	b.n	8015c22 <_dtoa_r+0x94a>
 8015c38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	f000 8101 	beq.w	8015e46 <_dtoa_r+0xb6e>
 8015c44:	2e00      	cmp	r6, #0
 8015c46:	dd05      	ble.n	8015c54 <_dtoa_r+0x97c>
 8015c48:	4629      	mov	r1, r5
 8015c4a:	4632      	mov	r2, r6
 8015c4c:	4648      	mov	r0, r9
 8015c4e:	f000 fc63 	bl	8016518 <__lshift>
 8015c52:	4605      	mov	r5, r0
 8015c54:	9b08      	ldr	r3, [sp, #32]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d05c      	beq.n	8015d14 <_dtoa_r+0xa3c>
 8015c5a:	6869      	ldr	r1, [r5, #4]
 8015c5c:	4648      	mov	r0, r9
 8015c5e:	f000 fa0b 	bl	8016078 <_Balloc>
 8015c62:	4606      	mov	r6, r0
 8015c64:	b928      	cbnz	r0, 8015c72 <_dtoa_r+0x99a>
 8015c66:	4b82      	ldr	r3, [pc, #520]	@ (8015e70 <_dtoa_r+0xb98>)
 8015c68:	4602      	mov	r2, r0
 8015c6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015c6e:	f7ff bb4a 	b.w	8015306 <_dtoa_r+0x2e>
 8015c72:	692a      	ldr	r2, [r5, #16]
 8015c74:	3202      	adds	r2, #2
 8015c76:	0092      	lsls	r2, r2, #2
 8015c78:	f105 010c 	add.w	r1, r5, #12
 8015c7c:	300c      	adds	r0, #12
 8015c7e:	f7ff fa8e 	bl	801519e <memcpy>
 8015c82:	2201      	movs	r2, #1
 8015c84:	4631      	mov	r1, r6
 8015c86:	4648      	mov	r0, r9
 8015c88:	f000 fc46 	bl	8016518 <__lshift>
 8015c8c:	f10a 0301 	add.w	r3, sl, #1
 8015c90:	9300      	str	r3, [sp, #0]
 8015c92:	eb0a 030b 	add.w	r3, sl, fp
 8015c96:	9308      	str	r3, [sp, #32]
 8015c98:	9b04      	ldr	r3, [sp, #16]
 8015c9a:	f003 0301 	and.w	r3, r3, #1
 8015c9e:	462f      	mov	r7, r5
 8015ca0:	9306      	str	r3, [sp, #24]
 8015ca2:	4605      	mov	r5, r0
 8015ca4:	9b00      	ldr	r3, [sp, #0]
 8015ca6:	9802      	ldr	r0, [sp, #8]
 8015ca8:	4621      	mov	r1, r4
 8015caa:	f103 3bff 	add.w	fp, r3, #4294967295
 8015cae:	f7ff fa8b 	bl	80151c8 <quorem>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	3330      	adds	r3, #48	@ 0x30
 8015cb6:	9003      	str	r0, [sp, #12]
 8015cb8:	4639      	mov	r1, r7
 8015cba:	9802      	ldr	r0, [sp, #8]
 8015cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cbe:	f000 fc97 	bl	80165f0 <__mcmp>
 8015cc2:	462a      	mov	r2, r5
 8015cc4:	9004      	str	r0, [sp, #16]
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	4648      	mov	r0, r9
 8015cca:	f000 fcad 	bl	8016628 <__mdiff>
 8015cce:	68c2      	ldr	r2, [r0, #12]
 8015cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cd2:	4606      	mov	r6, r0
 8015cd4:	bb02      	cbnz	r2, 8015d18 <_dtoa_r+0xa40>
 8015cd6:	4601      	mov	r1, r0
 8015cd8:	9802      	ldr	r0, [sp, #8]
 8015cda:	f000 fc89 	bl	80165f0 <__mcmp>
 8015cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ce0:	4602      	mov	r2, r0
 8015ce2:	4631      	mov	r1, r6
 8015ce4:	4648      	mov	r0, r9
 8015ce6:	920c      	str	r2, [sp, #48]	@ 0x30
 8015ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cea:	f000 fa05 	bl	80160f8 <_Bfree>
 8015cee:	9b07      	ldr	r3, [sp, #28]
 8015cf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015cf2:	9e00      	ldr	r6, [sp, #0]
 8015cf4:	ea42 0103 	orr.w	r1, r2, r3
 8015cf8:	9b06      	ldr	r3, [sp, #24]
 8015cfa:	4319      	orrs	r1, r3
 8015cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cfe:	d10d      	bne.n	8015d1c <_dtoa_r+0xa44>
 8015d00:	2b39      	cmp	r3, #57	@ 0x39
 8015d02:	d027      	beq.n	8015d54 <_dtoa_r+0xa7c>
 8015d04:	9a04      	ldr	r2, [sp, #16]
 8015d06:	2a00      	cmp	r2, #0
 8015d08:	dd01      	ble.n	8015d0e <_dtoa_r+0xa36>
 8015d0a:	9b03      	ldr	r3, [sp, #12]
 8015d0c:	3331      	adds	r3, #49	@ 0x31
 8015d0e:	f88b 3000 	strb.w	r3, [fp]
 8015d12:	e52e      	b.n	8015772 <_dtoa_r+0x49a>
 8015d14:	4628      	mov	r0, r5
 8015d16:	e7b9      	b.n	8015c8c <_dtoa_r+0x9b4>
 8015d18:	2201      	movs	r2, #1
 8015d1a:	e7e2      	b.n	8015ce2 <_dtoa_r+0xa0a>
 8015d1c:	9904      	ldr	r1, [sp, #16]
 8015d1e:	2900      	cmp	r1, #0
 8015d20:	db04      	blt.n	8015d2c <_dtoa_r+0xa54>
 8015d22:	9807      	ldr	r0, [sp, #28]
 8015d24:	4301      	orrs	r1, r0
 8015d26:	9806      	ldr	r0, [sp, #24]
 8015d28:	4301      	orrs	r1, r0
 8015d2a:	d120      	bne.n	8015d6e <_dtoa_r+0xa96>
 8015d2c:	2a00      	cmp	r2, #0
 8015d2e:	ddee      	ble.n	8015d0e <_dtoa_r+0xa36>
 8015d30:	9902      	ldr	r1, [sp, #8]
 8015d32:	9300      	str	r3, [sp, #0]
 8015d34:	2201      	movs	r2, #1
 8015d36:	4648      	mov	r0, r9
 8015d38:	f000 fbee 	bl	8016518 <__lshift>
 8015d3c:	4621      	mov	r1, r4
 8015d3e:	9002      	str	r0, [sp, #8]
 8015d40:	f000 fc56 	bl	80165f0 <__mcmp>
 8015d44:	2800      	cmp	r0, #0
 8015d46:	9b00      	ldr	r3, [sp, #0]
 8015d48:	dc02      	bgt.n	8015d50 <_dtoa_r+0xa78>
 8015d4a:	d1e0      	bne.n	8015d0e <_dtoa_r+0xa36>
 8015d4c:	07da      	lsls	r2, r3, #31
 8015d4e:	d5de      	bpl.n	8015d0e <_dtoa_r+0xa36>
 8015d50:	2b39      	cmp	r3, #57	@ 0x39
 8015d52:	d1da      	bne.n	8015d0a <_dtoa_r+0xa32>
 8015d54:	2339      	movs	r3, #57	@ 0x39
 8015d56:	f88b 3000 	strb.w	r3, [fp]
 8015d5a:	4633      	mov	r3, r6
 8015d5c:	461e      	mov	r6, r3
 8015d5e:	3b01      	subs	r3, #1
 8015d60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015d64:	2a39      	cmp	r2, #57	@ 0x39
 8015d66:	d04e      	beq.n	8015e06 <_dtoa_r+0xb2e>
 8015d68:	3201      	adds	r2, #1
 8015d6a:	701a      	strb	r2, [r3, #0]
 8015d6c:	e501      	b.n	8015772 <_dtoa_r+0x49a>
 8015d6e:	2a00      	cmp	r2, #0
 8015d70:	dd03      	ble.n	8015d7a <_dtoa_r+0xaa2>
 8015d72:	2b39      	cmp	r3, #57	@ 0x39
 8015d74:	d0ee      	beq.n	8015d54 <_dtoa_r+0xa7c>
 8015d76:	3301      	adds	r3, #1
 8015d78:	e7c9      	b.n	8015d0e <_dtoa_r+0xa36>
 8015d7a:	9a00      	ldr	r2, [sp, #0]
 8015d7c:	9908      	ldr	r1, [sp, #32]
 8015d7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015d82:	428a      	cmp	r2, r1
 8015d84:	d028      	beq.n	8015dd8 <_dtoa_r+0xb00>
 8015d86:	9902      	ldr	r1, [sp, #8]
 8015d88:	2300      	movs	r3, #0
 8015d8a:	220a      	movs	r2, #10
 8015d8c:	4648      	mov	r0, r9
 8015d8e:	f000 f9d5 	bl	801613c <__multadd>
 8015d92:	42af      	cmp	r7, r5
 8015d94:	9002      	str	r0, [sp, #8]
 8015d96:	f04f 0300 	mov.w	r3, #0
 8015d9a:	f04f 020a 	mov.w	r2, #10
 8015d9e:	4639      	mov	r1, r7
 8015da0:	4648      	mov	r0, r9
 8015da2:	d107      	bne.n	8015db4 <_dtoa_r+0xadc>
 8015da4:	f000 f9ca 	bl	801613c <__multadd>
 8015da8:	4607      	mov	r7, r0
 8015daa:	4605      	mov	r5, r0
 8015dac:	9b00      	ldr	r3, [sp, #0]
 8015dae:	3301      	adds	r3, #1
 8015db0:	9300      	str	r3, [sp, #0]
 8015db2:	e777      	b.n	8015ca4 <_dtoa_r+0x9cc>
 8015db4:	f000 f9c2 	bl	801613c <__multadd>
 8015db8:	4629      	mov	r1, r5
 8015dba:	4607      	mov	r7, r0
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	220a      	movs	r2, #10
 8015dc0:	4648      	mov	r0, r9
 8015dc2:	f000 f9bb 	bl	801613c <__multadd>
 8015dc6:	4605      	mov	r5, r0
 8015dc8:	e7f0      	b.n	8015dac <_dtoa_r+0xad4>
 8015dca:	f1bb 0f00 	cmp.w	fp, #0
 8015dce:	bfcc      	ite	gt
 8015dd0:	465e      	movgt	r6, fp
 8015dd2:	2601      	movle	r6, #1
 8015dd4:	4456      	add	r6, sl
 8015dd6:	2700      	movs	r7, #0
 8015dd8:	9902      	ldr	r1, [sp, #8]
 8015dda:	9300      	str	r3, [sp, #0]
 8015ddc:	2201      	movs	r2, #1
 8015dde:	4648      	mov	r0, r9
 8015de0:	f000 fb9a 	bl	8016518 <__lshift>
 8015de4:	4621      	mov	r1, r4
 8015de6:	9002      	str	r0, [sp, #8]
 8015de8:	f000 fc02 	bl	80165f0 <__mcmp>
 8015dec:	2800      	cmp	r0, #0
 8015dee:	dcb4      	bgt.n	8015d5a <_dtoa_r+0xa82>
 8015df0:	d102      	bne.n	8015df8 <_dtoa_r+0xb20>
 8015df2:	9b00      	ldr	r3, [sp, #0]
 8015df4:	07db      	lsls	r3, r3, #31
 8015df6:	d4b0      	bmi.n	8015d5a <_dtoa_r+0xa82>
 8015df8:	4633      	mov	r3, r6
 8015dfa:	461e      	mov	r6, r3
 8015dfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015e00:	2a30      	cmp	r2, #48	@ 0x30
 8015e02:	d0fa      	beq.n	8015dfa <_dtoa_r+0xb22>
 8015e04:	e4b5      	b.n	8015772 <_dtoa_r+0x49a>
 8015e06:	459a      	cmp	sl, r3
 8015e08:	d1a8      	bne.n	8015d5c <_dtoa_r+0xa84>
 8015e0a:	2331      	movs	r3, #49	@ 0x31
 8015e0c:	f108 0801 	add.w	r8, r8, #1
 8015e10:	f88a 3000 	strb.w	r3, [sl]
 8015e14:	e4ad      	b.n	8015772 <_dtoa_r+0x49a>
 8015e16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015e18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015e74 <_dtoa_r+0xb9c>
 8015e1c:	b11b      	cbz	r3, 8015e26 <_dtoa_r+0xb4e>
 8015e1e:	f10a 0308 	add.w	r3, sl, #8
 8015e22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015e24:	6013      	str	r3, [r2, #0]
 8015e26:	4650      	mov	r0, sl
 8015e28:	b017      	add	sp, #92	@ 0x5c
 8015e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2e:	9b07      	ldr	r3, [sp, #28]
 8015e30:	2b01      	cmp	r3, #1
 8015e32:	f77f ae2e 	ble.w	8015a92 <_dtoa_r+0x7ba>
 8015e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e38:	9308      	str	r3, [sp, #32]
 8015e3a:	2001      	movs	r0, #1
 8015e3c:	e64d      	b.n	8015ada <_dtoa_r+0x802>
 8015e3e:	f1bb 0f00 	cmp.w	fp, #0
 8015e42:	f77f aed9 	ble.w	8015bf8 <_dtoa_r+0x920>
 8015e46:	4656      	mov	r6, sl
 8015e48:	9802      	ldr	r0, [sp, #8]
 8015e4a:	4621      	mov	r1, r4
 8015e4c:	f7ff f9bc 	bl	80151c8 <quorem>
 8015e50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015e54:	f806 3b01 	strb.w	r3, [r6], #1
 8015e58:	eba6 020a 	sub.w	r2, r6, sl
 8015e5c:	4593      	cmp	fp, r2
 8015e5e:	ddb4      	ble.n	8015dca <_dtoa_r+0xaf2>
 8015e60:	9902      	ldr	r1, [sp, #8]
 8015e62:	2300      	movs	r3, #0
 8015e64:	220a      	movs	r2, #10
 8015e66:	4648      	mov	r0, r9
 8015e68:	f000 f968 	bl	801613c <__multadd>
 8015e6c:	9002      	str	r0, [sp, #8]
 8015e6e:	e7eb      	b.n	8015e48 <_dtoa_r+0xb70>
 8015e70:	0801b6a9 	.word	0x0801b6a9
 8015e74:	0801b62d 	.word	0x0801b62d

08015e78 <_free_r>:
 8015e78:	b538      	push	{r3, r4, r5, lr}
 8015e7a:	4605      	mov	r5, r0
 8015e7c:	2900      	cmp	r1, #0
 8015e7e:	d041      	beq.n	8015f04 <_free_r+0x8c>
 8015e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e84:	1f0c      	subs	r4, r1, #4
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	bfb8      	it	lt
 8015e8a:	18e4      	addlt	r4, r4, r3
 8015e8c:	f000 f8e8 	bl	8016060 <__malloc_lock>
 8015e90:	4a1d      	ldr	r2, [pc, #116]	@ (8015f08 <_free_r+0x90>)
 8015e92:	6813      	ldr	r3, [r2, #0]
 8015e94:	b933      	cbnz	r3, 8015ea4 <_free_r+0x2c>
 8015e96:	6063      	str	r3, [r4, #4]
 8015e98:	6014      	str	r4, [r2, #0]
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ea0:	f000 b8e4 	b.w	801606c <__malloc_unlock>
 8015ea4:	42a3      	cmp	r3, r4
 8015ea6:	d908      	bls.n	8015eba <_free_r+0x42>
 8015ea8:	6820      	ldr	r0, [r4, #0]
 8015eaa:	1821      	adds	r1, r4, r0
 8015eac:	428b      	cmp	r3, r1
 8015eae:	bf01      	itttt	eq
 8015eb0:	6819      	ldreq	r1, [r3, #0]
 8015eb2:	685b      	ldreq	r3, [r3, #4]
 8015eb4:	1809      	addeq	r1, r1, r0
 8015eb6:	6021      	streq	r1, [r4, #0]
 8015eb8:	e7ed      	b.n	8015e96 <_free_r+0x1e>
 8015eba:	461a      	mov	r2, r3
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	b10b      	cbz	r3, 8015ec4 <_free_r+0x4c>
 8015ec0:	42a3      	cmp	r3, r4
 8015ec2:	d9fa      	bls.n	8015eba <_free_r+0x42>
 8015ec4:	6811      	ldr	r1, [r2, #0]
 8015ec6:	1850      	adds	r0, r2, r1
 8015ec8:	42a0      	cmp	r0, r4
 8015eca:	d10b      	bne.n	8015ee4 <_free_r+0x6c>
 8015ecc:	6820      	ldr	r0, [r4, #0]
 8015ece:	4401      	add	r1, r0
 8015ed0:	1850      	adds	r0, r2, r1
 8015ed2:	4283      	cmp	r3, r0
 8015ed4:	6011      	str	r1, [r2, #0]
 8015ed6:	d1e0      	bne.n	8015e9a <_free_r+0x22>
 8015ed8:	6818      	ldr	r0, [r3, #0]
 8015eda:	685b      	ldr	r3, [r3, #4]
 8015edc:	6053      	str	r3, [r2, #4]
 8015ede:	4408      	add	r0, r1
 8015ee0:	6010      	str	r0, [r2, #0]
 8015ee2:	e7da      	b.n	8015e9a <_free_r+0x22>
 8015ee4:	d902      	bls.n	8015eec <_free_r+0x74>
 8015ee6:	230c      	movs	r3, #12
 8015ee8:	602b      	str	r3, [r5, #0]
 8015eea:	e7d6      	b.n	8015e9a <_free_r+0x22>
 8015eec:	6820      	ldr	r0, [r4, #0]
 8015eee:	1821      	adds	r1, r4, r0
 8015ef0:	428b      	cmp	r3, r1
 8015ef2:	bf04      	itt	eq
 8015ef4:	6819      	ldreq	r1, [r3, #0]
 8015ef6:	685b      	ldreq	r3, [r3, #4]
 8015ef8:	6063      	str	r3, [r4, #4]
 8015efa:	bf04      	itt	eq
 8015efc:	1809      	addeq	r1, r1, r0
 8015efe:	6021      	streq	r1, [r4, #0]
 8015f00:	6054      	str	r4, [r2, #4]
 8015f02:	e7ca      	b.n	8015e9a <_free_r+0x22>
 8015f04:	bd38      	pop	{r3, r4, r5, pc}
 8015f06:	bf00      	nop
 8015f08:	20004058 	.word	0x20004058

08015f0c <malloc>:
 8015f0c:	4b02      	ldr	r3, [pc, #8]	@ (8015f18 <malloc+0xc>)
 8015f0e:	4601      	mov	r1, r0
 8015f10:	6818      	ldr	r0, [r3, #0]
 8015f12:	f000 b825 	b.w	8015f60 <_malloc_r>
 8015f16:	bf00      	nop
 8015f18:	2000005c 	.word	0x2000005c

08015f1c <sbrk_aligned>:
 8015f1c:	b570      	push	{r4, r5, r6, lr}
 8015f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8015f5c <sbrk_aligned+0x40>)
 8015f20:	460c      	mov	r4, r1
 8015f22:	6831      	ldr	r1, [r6, #0]
 8015f24:	4605      	mov	r5, r0
 8015f26:	b911      	cbnz	r1, 8015f2e <sbrk_aligned+0x12>
 8015f28:	f001 fe88 	bl	8017c3c <_sbrk_r>
 8015f2c:	6030      	str	r0, [r6, #0]
 8015f2e:	4621      	mov	r1, r4
 8015f30:	4628      	mov	r0, r5
 8015f32:	f001 fe83 	bl	8017c3c <_sbrk_r>
 8015f36:	1c43      	adds	r3, r0, #1
 8015f38:	d103      	bne.n	8015f42 <sbrk_aligned+0x26>
 8015f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8015f3e:	4620      	mov	r0, r4
 8015f40:	bd70      	pop	{r4, r5, r6, pc}
 8015f42:	1cc4      	adds	r4, r0, #3
 8015f44:	f024 0403 	bic.w	r4, r4, #3
 8015f48:	42a0      	cmp	r0, r4
 8015f4a:	d0f8      	beq.n	8015f3e <sbrk_aligned+0x22>
 8015f4c:	1a21      	subs	r1, r4, r0
 8015f4e:	4628      	mov	r0, r5
 8015f50:	f001 fe74 	bl	8017c3c <_sbrk_r>
 8015f54:	3001      	adds	r0, #1
 8015f56:	d1f2      	bne.n	8015f3e <sbrk_aligned+0x22>
 8015f58:	e7ef      	b.n	8015f3a <sbrk_aligned+0x1e>
 8015f5a:	bf00      	nop
 8015f5c:	20004054 	.word	0x20004054

08015f60 <_malloc_r>:
 8015f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f64:	1ccd      	adds	r5, r1, #3
 8015f66:	f025 0503 	bic.w	r5, r5, #3
 8015f6a:	3508      	adds	r5, #8
 8015f6c:	2d0c      	cmp	r5, #12
 8015f6e:	bf38      	it	cc
 8015f70:	250c      	movcc	r5, #12
 8015f72:	2d00      	cmp	r5, #0
 8015f74:	4606      	mov	r6, r0
 8015f76:	db01      	blt.n	8015f7c <_malloc_r+0x1c>
 8015f78:	42a9      	cmp	r1, r5
 8015f7a:	d904      	bls.n	8015f86 <_malloc_r+0x26>
 8015f7c:	230c      	movs	r3, #12
 8015f7e:	6033      	str	r3, [r6, #0]
 8015f80:	2000      	movs	r0, #0
 8015f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801605c <_malloc_r+0xfc>
 8015f8a:	f000 f869 	bl	8016060 <__malloc_lock>
 8015f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8015f92:	461c      	mov	r4, r3
 8015f94:	bb44      	cbnz	r4, 8015fe8 <_malloc_r+0x88>
 8015f96:	4629      	mov	r1, r5
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f7ff ffbf 	bl	8015f1c <sbrk_aligned>
 8015f9e:	1c43      	adds	r3, r0, #1
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	d158      	bne.n	8016056 <_malloc_r+0xf6>
 8015fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8015fa8:	4627      	mov	r7, r4
 8015faa:	2f00      	cmp	r7, #0
 8015fac:	d143      	bne.n	8016036 <_malloc_r+0xd6>
 8015fae:	2c00      	cmp	r4, #0
 8015fb0:	d04b      	beq.n	801604a <_malloc_r+0xea>
 8015fb2:	6823      	ldr	r3, [r4, #0]
 8015fb4:	4639      	mov	r1, r7
 8015fb6:	4630      	mov	r0, r6
 8015fb8:	eb04 0903 	add.w	r9, r4, r3
 8015fbc:	f001 fe3e 	bl	8017c3c <_sbrk_r>
 8015fc0:	4581      	cmp	r9, r0
 8015fc2:	d142      	bne.n	801604a <_malloc_r+0xea>
 8015fc4:	6821      	ldr	r1, [r4, #0]
 8015fc6:	1a6d      	subs	r5, r5, r1
 8015fc8:	4629      	mov	r1, r5
 8015fca:	4630      	mov	r0, r6
 8015fcc:	f7ff ffa6 	bl	8015f1c <sbrk_aligned>
 8015fd0:	3001      	adds	r0, #1
 8015fd2:	d03a      	beq.n	801604a <_malloc_r+0xea>
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	442b      	add	r3, r5
 8015fd8:	6023      	str	r3, [r4, #0]
 8015fda:	f8d8 3000 	ldr.w	r3, [r8]
 8015fde:	685a      	ldr	r2, [r3, #4]
 8015fe0:	bb62      	cbnz	r2, 801603c <_malloc_r+0xdc>
 8015fe2:	f8c8 7000 	str.w	r7, [r8]
 8015fe6:	e00f      	b.n	8016008 <_malloc_r+0xa8>
 8015fe8:	6822      	ldr	r2, [r4, #0]
 8015fea:	1b52      	subs	r2, r2, r5
 8015fec:	d420      	bmi.n	8016030 <_malloc_r+0xd0>
 8015fee:	2a0b      	cmp	r2, #11
 8015ff0:	d917      	bls.n	8016022 <_malloc_r+0xc2>
 8015ff2:	1961      	adds	r1, r4, r5
 8015ff4:	42a3      	cmp	r3, r4
 8015ff6:	6025      	str	r5, [r4, #0]
 8015ff8:	bf18      	it	ne
 8015ffa:	6059      	strne	r1, [r3, #4]
 8015ffc:	6863      	ldr	r3, [r4, #4]
 8015ffe:	bf08      	it	eq
 8016000:	f8c8 1000 	streq.w	r1, [r8]
 8016004:	5162      	str	r2, [r4, r5]
 8016006:	604b      	str	r3, [r1, #4]
 8016008:	4630      	mov	r0, r6
 801600a:	f000 f82f 	bl	801606c <__malloc_unlock>
 801600e:	f104 000b 	add.w	r0, r4, #11
 8016012:	1d23      	adds	r3, r4, #4
 8016014:	f020 0007 	bic.w	r0, r0, #7
 8016018:	1ac2      	subs	r2, r0, r3
 801601a:	bf1c      	itt	ne
 801601c:	1a1b      	subne	r3, r3, r0
 801601e:	50a3      	strne	r3, [r4, r2]
 8016020:	e7af      	b.n	8015f82 <_malloc_r+0x22>
 8016022:	6862      	ldr	r2, [r4, #4]
 8016024:	42a3      	cmp	r3, r4
 8016026:	bf0c      	ite	eq
 8016028:	f8c8 2000 	streq.w	r2, [r8]
 801602c:	605a      	strne	r2, [r3, #4]
 801602e:	e7eb      	b.n	8016008 <_malloc_r+0xa8>
 8016030:	4623      	mov	r3, r4
 8016032:	6864      	ldr	r4, [r4, #4]
 8016034:	e7ae      	b.n	8015f94 <_malloc_r+0x34>
 8016036:	463c      	mov	r4, r7
 8016038:	687f      	ldr	r7, [r7, #4]
 801603a:	e7b6      	b.n	8015faa <_malloc_r+0x4a>
 801603c:	461a      	mov	r2, r3
 801603e:	685b      	ldr	r3, [r3, #4]
 8016040:	42a3      	cmp	r3, r4
 8016042:	d1fb      	bne.n	801603c <_malloc_r+0xdc>
 8016044:	2300      	movs	r3, #0
 8016046:	6053      	str	r3, [r2, #4]
 8016048:	e7de      	b.n	8016008 <_malloc_r+0xa8>
 801604a:	230c      	movs	r3, #12
 801604c:	6033      	str	r3, [r6, #0]
 801604e:	4630      	mov	r0, r6
 8016050:	f000 f80c 	bl	801606c <__malloc_unlock>
 8016054:	e794      	b.n	8015f80 <_malloc_r+0x20>
 8016056:	6005      	str	r5, [r0, #0]
 8016058:	e7d6      	b.n	8016008 <_malloc_r+0xa8>
 801605a:	bf00      	nop
 801605c:	20004058 	.word	0x20004058

08016060 <__malloc_lock>:
 8016060:	4801      	ldr	r0, [pc, #4]	@ (8016068 <__malloc_lock+0x8>)
 8016062:	f7ff b89a 	b.w	801519a <__retarget_lock_acquire_recursive>
 8016066:	bf00      	nop
 8016068:	20004050 	.word	0x20004050

0801606c <__malloc_unlock>:
 801606c:	4801      	ldr	r0, [pc, #4]	@ (8016074 <__malloc_unlock+0x8>)
 801606e:	f7ff b895 	b.w	801519c <__retarget_lock_release_recursive>
 8016072:	bf00      	nop
 8016074:	20004050 	.word	0x20004050

08016078 <_Balloc>:
 8016078:	b570      	push	{r4, r5, r6, lr}
 801607a:	69c6      	ldr	r6, [r0, #28]
 801607c:	4604      	mov	r4, r0
 801607e:	460d      	mov	r5, r1
 8016080:	b976      	cbnz	r6, 80160a0 <_Balloc+0x28>
 8016082:	2010      	movs	r0, #16
 8016084:	f7ff ff42 	bl	8015f0c <malloc>
 8016088:	4602      	mov	r2, r0
 801608a:	61e0      	str	r0, [r4, #28]
 801608c:	b920      	cbnz	r0, 8016098 <_Balloc+0x20>
 801608e:	4b18      	ldr	r3, [pc, #96]	@ (80160f0 <_Balloc+0x78>)
 8016090:	4818      	ldr	r0, [pc, #96]	@ (80160f4 <_Balloc+0x7c>)
 8016092:	216b      	movs	r1, #107	@ 0x6b
 8016094:	f001 fdec 	bl	8017c70 <__assert_func>
 8016098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801609c:	6006      	str	r6, [r0, #0]
 801609e:	60c6      	str	r6, [r0, #12]
 80160a0:	69e6      	ldr	r6, [r4, #28]
 80160a2:	68f3      	ldr	r3, [r6, #12]
 80160a4:	b183      	cbz	r3, 80160c8 <_Balloc+0x50>
 80160a6:	69e3      	ldr	r3, [r4, #28]
 80160a8:	68db      	ldr	r3, [r3, #12]
 80160aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80160ae:	b9b8      	cbnz	r0, 80160e0 <_Balloc+0x68>
 80160b0:	2101      	movs	r1, #1
 80160b2:	fa01 f605 	lsl.w	r6, r1, r5
 80160b6:	1d72      	adds	r2, r6, #5
 80160b8:	0092      	lsls	r2, r2, #2
 80160ba:	4620      	mov	r0, r4
 80160bc:	f001 fdf6 	bl	8017cac <_calloc_r>
 80160c0:	b160      	cbz	r0, 80160dc <_Balloc+0x64>
 80160c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80160c6:	e00e      	b.n	80160e6 <_Balloc+0x6e>
 80160c8:	2221      	movs	r2, #33	@ 0x21
 80160ca:	2104      	movs	r1, #4
 80160cc:	4620      	mov	r0, r4
 80160ce:	f001 fded 	bl	8017cac <_calloc_r>
 80160d2:	69e3      	ldr	r3, [r4, #28]
 80160d4:	60f0      	str	r0, [r6, #12]
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d1e4      	bne.n	80160a6 <_Balloc+0x2e>
 80160dc:	2000      	movs	r0, #0
 80160de:	bd70      	pop	{r4, r5, r6, pc}
 80160e0:	6802      	ldr	r2, [r0, #0]
 80160e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80160e6:	2300      	movs	r3, #0
 80160e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80160ec:	e7f7      	b.n	80160de <_Balloc+0x66>
 80160ee:	bf00      	nop
 80160f0:	0801b63a 	.word	0x0801b63a
 80160f4:	0801b6ba 	.word	0x0801b6ba

080160f8 <_Bfree>:
 80160f8:	b570      	push	{r4, r5, r6, lr}
 80160fa:	69c6      	ldr	r6, [r0, #28]
 80160fc:	4605      	mov	r5, r0
 80160fe:	460c      	mov	r4, r1
 8016100:	b976      	cbnz	r6, 8016120 <_Bfree+0x28>
 8016102:	2010      	movs	r0, #16
 8016104:	f7ff ff02 	bl	8015f0c <malloc>
 8016108:	4602      	mov	r2, r0
 801610a:	61e8      	str	r0, [r5, #28]
 801610c:	b920      	cbnz	r0, 8016118 <_Bfree+0x20>
 801610e:	4b09      	ldr	r3, [pc, #36]	@ (8016134 <_Bfree+0x3c>)
 8016110:	4809      	ldr	r0, [pc, #36]	@ (8016138 <_Bfree+0x40>)
 8016112:	218f      	movs	r1, #143	@ 0x8f
 8016114:	f001 fdac 	bl	8017c70 <__assert_func>
 8016118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801611c:	6006      	str	r6, [r0, #0]
 801611e:	60c6      	str	r6, [r0, #12]
 8016120:	b13c      	cbz	r4, 8016132 <_Bfree+0x3a>
 8016122:	69eb      	ldr	r3, [r5, #28]
 8016124:	6862      	ldr	r2, [r4, #4]
 8016126:	68db      	ldr	r3, [r3, #12]
 8016128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801612c:	6021      	str	r1, [r4, #0]
 801612e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016132:	bd70      	pop	{r4, r5, r6, pc}
 8016134:	0801b63a 	.word	0x0801b63a
 8016138:	0801b6ba 	.word	0x0801b6ba

0801613c <__multadd>:
 801613c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016140:	690d      	ldr	r5, [r1, #16]
 8016142:	4607      	mov	r7, r0
 8016144:	460c      	mov	r4, r1
 8016146:	461e      	mov	r6, r3
 8016148:	f101 0c14 	add.w	ip, r1, #20
 801614c:	2000      	movs	r0, #0
 801614e:	f8dc 3000 	ldr.w	r3, [ip]
 8016152:	b299      	uxth	r1, r3
 8016154:	fb02 6101 	mla	r1, r2, r1, r6
 8016158:	0c1e      	lsrs	r6, r3, #16
 801615a:	0c0b      	lsrs	r3, r1, #16
 801615c:	fb02 3306 	mla	r3, r2, r6, r3
 8016160:	b289      	uxth	r1, r1
 8016162:	3001      	adds	r0, #1
 8016164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016168:	4285      	cmp	r5, r0
 801616a:	f84c 1b04 	str.w	r1, [ip], #4
 801616e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016172:	dcec      	bgt.n	801614e <__multadd+0x12>
 8016174:	b30e      	cbz	r6, 80161ba <__multadd+0x7e>
 8016176:	68a3      	ldr	r3, [r4, #8]
 8016178:	42ab      	cmp	r3, r5
 801617a:	dc19      	bgt.n	80161b0 <__multadd+0x74>
 801617c:	6861      	ldr	r1, [r4, #4]
 801617e:	4638      	mov	r0, r7
 8016180:	3101      	adds	r1, #1
 8016182:	f7ff ff79 	bl	8016078 <_Balloc>
 8016186:	4680      	mov	r8, r0
 8016188:	b928      	cbnz	r0, 8016196 <__multadd+0x5a>
 801618a:	4602      	mov	r2, r0
 801618c:	4b0c      	ldr	r3, [pc, #48]	@ (80161c0 <__multadd+0x84>)
 801618e:	480d      	ldr	r0, [pc, #52]	@ (80161c4 <__multadd+0x88>)
 8016190:	21ba      	movs	r1, #186	@ 0xba
 8016192:	f001 fd6d 	bl	8017c70 <__assert_func>
 8016196:	6922      	ldr	r2, [r4, #16]
 8016198:	3202      	adds	r2, #2
 801619a:	f104 010c 	add.w	r1, r4, #12
 801619e:	0092      	lsls	r2, r2, #2
 80161a0:	300c      	adds	r0, #12
 80161a2:	f7fe fffc 	bl	801519e <memcpy>
 80161a6:	4621      	mov	r1, r4
 80161a8:	4638      	mov	r0, r7
 80161aa:	f7ff ffa5 	bl	80160f8 <_Bfree>
 80161ae:	4644      	mov	r4, r8
 80161b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80161b4:	3501      	adds	r5, #1
 80161b6:	615e      	str	r6, [r3, #20]
 80161b8:	6125      	str	r5, [r4, #16]
 80161ba:	4620      	mov	r0, r4
 80161bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161c0:	0801b6a9 	.word	0x0801b6a9
 80161c4:	0801b6ba 	.word	0x0801b6ba

080161c8 <__s2b>:
 80161c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161cc:	460c      	mov	r4, r1
 80161ce:	4615      	mov	r5, r2
 80161d0:	461f      	mov	r7, r3
 80161d2:	2209      	movs	r2, #9
 80161d4:	3308      	adds	r3, #8
 80161d6:	4606      	mov	r6, r0
 80161d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80161dc:	2100      	movs	r1, #0
 80161de:	2201      	movs	r2, #1
 80161e0:	429a      	cmp	r2, r3
 80161e2:	db09      	blt.n	80161f8 <__s2b+0x30>
 80161e4:	4630      	mov	r0, r6
 80161e6:	f7ff ff47 	bl	8016078 <_Balloc>
 80161ea:	b940      	cbnz	r0, 80161fe <__s2b+0x36>
 80161ec:	4602      	mov	r2, r0
 80161ee:	4b19      	ldr	r3, [pc, #100]	@ (8016254 <__s2b+0x8c>)
 80161f0:	4819      	ldr	r0, [pc, #100]	@ (8016258 <__s2b+0x90>)
 80161f2:	21d3      	movs	r1, #211	@ 0xd3
 80161f4:	f001 fd3c 	bl	8017c70 <__assert_func>
 80161f8:	0052      	lsls	r2, r2, #1
 80161fa:	3101      	adds	r1, #1
 80161fc:	e7f0      	b.n	80161e0 <__s2b+0x18>
 80161fe:	9b08      	ldr	r3, [sp, #32]
 8016200:	6143      	str	r3, [r0, #20]
 8016202:	2d09      	cmp	r5, #9
 8016204:	f04f 0301 	mov.w	r3, #1
 8016208:	6103      	str	r3, [r0, #16]
 801620a:	dd16      	ble.n	801623a <__s2b+0x72>
 801620c:	f104 0909 	add.w	r9, r4, #9
 8016210:	46c8      	mov	r8, r9
 8016212:	442c      	add	r4, r5
 8016214:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016218:	4601      	mov	r1, r0
 801621a:	3b30      	subs	r3, #48	@ 0x30
 801621c:	220a      	movs	r2, #10
 801621e:	4630      	mov	r0, r6
 8016220:	f7ff ff8c 	bl	801613c <__multadd>
 8016224:	45a0      	cmp	r8, r4
 8016226:	d1f5      	bne.n	8016214 <__s2b+0x4c>
 8016228:	f1a5 0408 	sub.w	r4, r5, #8
 801622c:	444c      	add	r4, r9
 801622e:	1b2d      	subs	r5, r5, r4
 8016230:	1963      	adds	r3, r4, r5
 8016232:	42bb      	cmp	r3, r7
 8016234:	db04      	blt.n	8016240 <__s2b+0x78>
 8016236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801623a:	340a      	adds	r4, #10
 801623c:	2509      	movs	r5, #9
 801623e:	e7f6      	b.n	801622e <__s2b+0x66>
 8016240:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016244:	4601      	mov	r1, r0
 8016246:	3b30      	subs	r3, #48	@ 0x30
 8016248:	220a      	movs	r2, #10
 801624a:	4630      	mov	r0, r6
 801624c:	f7ff ff76 	bl	801613c <__multadd>
 8016250:	e7ee      	b.n	8016230 <__s2b+0x68>
 8016252:	bf00      	nop
 8016254:	0801b6a9 	.word	0x0801b6a9
 8016258:	0801b6ba 	.word	0x0801b6ba

0801625c <__hi0bits>:
 801625c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016260:	4603      	mov	r3, r0
 8016262:	bf36      	itet	cc
 8016264:	0403      	lslcc	r3, r0, #16
 8016266:	2000      	movcs	r0, #0
 8016268:	2010      	movcc	r0, #16
 801626a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801626e:	bf3c      	itt	cc
 8016270:	021b      	lslcc	r3, r3, #8
 8016272:	3008      	addcc	r0, #8
 8016274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016278:	bf3c      	itt	cc
 801627a:	011b      	lslcc	r3, r3, #4
 801627c:	3004      	addcc	r0, #4
 801627e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016282:	bf3c      	itt	cc
 8016284:	009b      	lslcc	r3, r3, #2
 8016286:	3002      	addcc	r0, #2
 8016288:	2b00      	cmp	r3, #0
 801628a:	db05      	blt.n	8016298 <__hi0bits+0x3c>
 801628c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016290:	f100 0001 	add.w	r0, r0, #1
 8016294:	bf08      	it	eq
 8016296:	2020      	moveq	r0, #32
 8016298:	4770      	bx	lr

0801629a <__lo0bits>:
 801629a:	6803      	ldr	r3, [r0, #0]
 801629c:	4602      	mov	r2, r0
 801629e:	f013 0007 	ands.w	r0, r3, #7
 80162a2:	d00b      	beq.n	80162bc <__lo0bits+0x22>
 80162a4:	07d9      	lsls	r1, r3, #31
 80162a6:	d421      	bmi.n	80162ec <__lo0bits+0x52>
 80162a8:	0798      	lsls	r0, r3, #30
 80162aa:	bf49      	itett	mi
 80162ac:	085b      	lsrmi	r3, r3, #1
 80162ae:	089b      	lsrpl	r3, r3, #2
 80162b0:	2001      	movmi	r0, #1
 80162b2:	6013      	strmi	r3, [r2, #0]
 80162b4:	bf5c      	itt	pl
 80162b6:	6013      	strpl	r3, [r2, #0]
 80162b8:	2002      	movpl	r0, #2
 80162ba:	4770      	bx	lr
 80162bc:	b299      	uxth	r1, r3
 80162be:	b909      	cbnz	r1, 80162c4 <__lo0bits+0x2a>
 80162c0:	0c1b      	lsrs	r3, r3, #16
 80162c2:	2010      	movs	r0, #16
 80162c4:	b2d9      	uxtb	r1, r3
 80162c6:	b909      	cbnz	r1, 80162cc <__lo0bits+0x32>
 80162c8:	3008      	adds	r0, #8
 80162ca:	0a1b      	lsrs	r3, r3, #8
 80162cc:	0719      	lsls	r1, r3, #28
 80162ce:	bf04      	itt	eq
 80162d0:	091b      	lsreq	r3, r3, #4
 80162d2:	3004      	addeq	r0, #4
 80162d4:	0799      	lsls	r1, r3, #30
 80162d6:	bf04      	itt	eq
 80162d8:	089b      	lsreq	r3, r3, #2
 80162da:	3002      	addeq	r0, #2
 80162dc:	07d9      	lsls	r1, r3, #31
 80162de:	d403      	bmi.n	80162e8 <__lo0bits+0x4e>
 80162e0:	085b      	lsrs	r3, r3, #1
 80162e2:	f100 0001 	add.w	r0, r0, #1
 80162e6:	d003      	beq.n	80162f0 <__lo0bits+0x56>
 80162e8:	6013      	str	r3, [r2, #0]
 80162ea:	4770      	bx	lr
 80162ec:	2000      	movs	r0, #0
 80162ee:	4770      	bx	lr
 80162f0:	2020      	movs	r0, #32
 80162f2:	4770      	bx	lr

080162f4 <__i2b>:
 80162f4:	b510      	push	{r4, lr}
 80162f6:	460c      	mov	r4, r1
 80162f8:	2101      	movs	r1, #1
 80162fa:	f7ff febd 	bl	8016078 <_Balloc>
 80162fe:	4602      	mov	r2, r0
 8016300:	b928      	cbnz	r0, 801630e <__i2b+0x1a>
 8016302:	4b05      	ldr	r3, [pc, #20]	@ (8016318 <__i2b+0x24>)
 8016304:	4805      	ldr	r0, [pc, #20]	@ (801631c <__i2b+0x28>)
 8016306:	f240 1145 	movw	r1, #325	@ 0x145
 801630a:	f001 fcb1 	bl	8017c70 <__assert_func>
 801630e:	2301      	movs	r3, #1
 8016310:	6144      	str	r4, [r0, #20]
 8016312:	6103      	str	r3, [r0, #16]
 8016314:	bd10      	pop	{r4, pc}
 8016316:	bf00      	nop
 8016318:	0801b6a9 	.word	0x0801b6a9
 801631c:	0801b6ba 	.word	0x0801b6ba

08016320 <__multiply>:
 8016320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016324:	4617      	mov	r7, r2
 8016326:	690a      	ldr	r2, [r1, #16]
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	429a      	cmp	r2, r3
 801632c:	bfa8      	it	ge
 801632e:	463b      	movge	r3, r7
 8016330:	4689      	mov	r9, r1
 8016332:	bfa4      	itt	ge
 8016334:	460f      	movge	r7, r1
 8016336:	4699      	movge	r9, r3
 8016338:	693d      	ldr	r5, [r7, #16]
 801633a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	6879      	ldr	r1, [r7, #4]
 8016342:	eb05 060a 	add.w	r6, r5, sl
 8016346:	42b3      	cmp	r3, r6
 8016348:	b085      	sub	sp, #20
 801634a:	bfb8      	it	lt
 801634c:	3101      	addlt	r1, #1
 801634e:	f7ff fe93 	bl	8016078 <_Balloc>
 8016352:	b930      	cbnz	r0, 8016362 <__multiply+0x42>
 8016354:	4602      	mov	r2, r0
 8016356:	4b41      	ldr	r3, [pc, #260]	@ (801645c <__multiply+0x13c>)
 8016358:	4841      	ldr	r0, [pc, #260]	@ (8016460 <__multiply+0x140>)
 801635a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801635e:	f001 fc87 	bl	8017c70 <__assert_func>
 8016362:	f100 0414 	add.w	r4, r0, #20
 8016366:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801636a:	4623      	mov	r3, r4
 801636c:	2200      	movs	r2, #0
 801636e:	4573      	cmp	r3, lr
 8016370:	d320      	bcc.n	80163b4 <__multiply+0x94>
 8016372:	f107 0814 	add.w	r8, r7, #20
 8016376:	f109 0114 	add.w	r1, r9, #20
 801637a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801637e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016382:	9302      	str	r3, [sp, #8]
 8016384:	1beb      	subs	r3, r5, r7
 8016386:	3b15      	subs	r3, #21
 8016388:	f023 0303 	bic.w	r3, r3, #3
 801638c:	3304      	adds	r3, #4
 801638e:	3715      	adds	r7, #21
 8016390:	42bd      	cmp	r5, r7
 8016392:	bf38      	it	cc
 8016394:	2304      	movcc	r3, #4
 8016396:	9301      	str	r3, [sp, #4]
 8016398:	9b02      	ldr	r3, [sp, #8]
 801639a:	9103      	str	r1, [sp, #12]
 801639c:	428b      	cmp	r3, r1
 801639e:	d80c      	bhi.n	80163ba <__multiply+0x9a>
 80163a0:	2e00      	cmp	r6, #0
 80163a2:	dd03      	ble.n	80163ac <__multiply+0x8c>
 80163a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d055      	beq.n	8016458 <__multiply+0x138>
 80163ac:	6106      	str	r6, [r0, #16]
 80163ae:	b005      	add	sp, #20
 80163b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163b4:	f843 2b04 	str.w	r2, [r3], #4
 80163b8:	e7d9      	b.n	801636e <__multiply+0x4e>
 80163ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80163be:	f1ba 0f00 	cmp.w	sl, #0
 80163c2:	d01f      	beq.n	8016404 <__multiply+0xe4>
 80163c4:	46c4      	mov	ip, r8
 80163c6:	46a1      	mov	r9, r4
 80163c8:	2700      	movs	r7, #0
 80163ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 80163ce:	f8d9 3000 	ldr.w	r3, [r9]
 80163d2:	fa1f fb82 	uxth.w	fp, r2
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80163dc:	443b      	add	r3, r7
 80163de:	f8d9 7000 	ldr.w	r7, [r9]
 80163e2:	0c12      	lsrs	r2, r2, #16
 80163e4:	0c3f      	lsrs	r7, r7, #16
 80163e6:	fb0a 7202 	mla	r2, sl, r2, r7
 80163ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163f4:	4565      	cmp	r5, ip
 80163f6:	f849 3b04 	str.w	r3, [r9], #4
 80163fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80163fe:	d8e4      	bhi.n	80163ca <__multiply+0xaa>
 8016400:	9b01      	ldr	r3, [sp, #4]
 8016402:	50e7      	str	r7, [r4, r3]
 8016404:	9b03      	ldr	r3, [sp, #12]
 8016406:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801640a:	3104      	adds	r1, #4
 801640c:	f1b9 0f00 	cmp.w	r9, #0
 8016410:	d020      	beq.n	8016454 <__multiply+0x134>
 8016412:	6823      	ldr	r3, [r4, #0]
 8016414:	4647      	mov	r7, r8
 8016416:	46a4      	mov	ip, r4
 8016418:	f04f 0a00 	mov.w	sl, #0
 801641c:	f8b7 b000 	ldrh.w	fp, [r7]
 8016420:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016424:	fb09 220b 	mla	r2, r9, fp, r2
 8016428:	4452      	add	r2, sl
 801642a:	b29b      	uxth	r3, r3
 801642c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016430:	f84c 3b04 	str.w	r3, [ip], #4
 8016434:	f857 3b04 	ldr.w	r3, [r7], #4
 8016438:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801643c:	f8bc 3000 	ldrh.w	r3, [ip]
 8016440:	fb09 330a 	mla	r3, r9, sl, r3
 8016444:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016448:	42bd      	cmp	r5, r7
 801644a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801644e:	d8e5      	bhi.n	801641c <__multiply+0xfc>
 8016450:	9a01      	ldr	r2, [sp, #4]
 8016452:	50a3      	str	r3, [r4, r2]
 8016454:	3404      	adds	r4, #4
 8016456:	e79f      	b.n	8016398 <__multiply+0x78>
 8016458:	3e01      	subs	r6, #1
 801645a:	e7a1      	b.n	80163a0 <__multiply+0x80>
 801645c:	0801b6a9 	.word	0x0801b6a9
 8016460:	0801b6ba 	.word	0x0801b6ba

08016464 <__pow5mult>:
 8016464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016468:	4615      	mov	r5, r2
 801646a:	f012 0203 	ands.w	r2, r2, #3
 801646e:	4607      	mov	r7, r0
 8016470:	460e      	mov	r6, r1
 8016472:	d007      	beq.n	8016484 <__pow5mult+0x20>
 8016474:	4c25      	ldr	r4, [pc, #148]	@ (801650c <__pow5mult+0xa8>)
 8016476:	3a01      	subs	r2, #1
 8016478:	2300      	movs	r3, #0
 801647a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801647e:	f7ff fe5d 	bl	801613c <__multadd>
 8016482:	4606      	mov	r6, r0
 8016484:	10ad      	asrs	r5, r5, #2
 8016486:	d03d      	beq.n	8016504 <__pow5mult+0xa0>
 8016488:	69fc      	ldr	r4, [r7, #28]
 801648a:	b97c      	cbnz	r4, 80164ac <__pow5mult+0x48>
 801648c:	2010      	movs	r0, #16
 801648e:	f7ff fd3d 	bl	8015f0c <malloc>
 8016492:	4602      	mov	r2, r0
 8016494:	61f8      	str	r0, [r7, #28]
 8016496:	b928      	cbnz	r0, 80164a4 <__pow5mult+0x40>
 8016498:	4b1d      	ldr	r3, [pc, #116]	@ (8016510 <__pow5mult+0xac>)
 801649a:	481e      	ldr	r0, [pc, #120]	@ (8016514 <__pow5mult+0xb0>)
 801649c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80164a0:	f001 fbe6 	bl	8017c70 <__assert_func>
 80164a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80164a8:	6004      	str	r4, [r0, #0]
 80164aa:	60c4      	str	r4, [r0, #12]
 80164ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80164b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80164b4:	b94c      	cbnz	r4, 80164ca <__pow5mult+0x66>
 80164b6:	f240 2171 	movw	r1, #625	@ 0x271
 80164ba:	4638      	mov	r0, r7
 80164bc:	f7ff ff1a 	bl	80162f4 <__i2b>
 80164c0:	2300      	movs	r3, #0
 80164c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80164c6:	4604      	mov	r4, r0
 80164c8:	6003      	str	r3, [r0, #0]
 80164ca:	f04f 0900 	mov.w	r9, #0
 80164ce:	07eb      	lsls	r3, r5, #31
 80164d0:	d50a      	bpl.n	80164e8 <__pow5mult+0x84>
 80164d2:	4631      	mov	r1, r6
 80164d4:	4622      	mov	r2, r4
 80164d6:	4638      	mov	r0, r7
 80164d8:	f7ff ff22 	bl	8016320 <__multiply>
 80164dc:	4631      	mov	r1, r6
 80164de:	4680      	mov	r8, r0
 80164e0:	4638      	mov	r0, r7
 80164e2:	f7ff fe09 	bl	80160f8 <_Bfree>
 80164e6:	4646      	mov	r6, r8
 80164e8:	106d      	asrs	r5, r5, #1
 80164ea:	d00b      	beq.n	8016504 <__pow5mult+0xa0>
 80164ec:	6820      	ldr	r0, [r4, #0]
 80164ee:	b938      	cbnz	r0, 8016500 <__pow5mult+0x9c>
 80164f0:	4622      	mov	r2, r4
 80164f2:	4621      	mov	r1, r4
 80164f4:	4638      	mov	r0, r7
 80164f6:	f7ff ff13 	bl	8016320 <__multiply>
 80164fa:	6020      	str	r0, [r4, #0]
 80164fc:	f8c0 9000 	str.w	r9, [r0]
 8016500:	4604      	mov	r4, r0
 8016502:	e7e4      	b.n	80164ce <__pow5mult+0x6a>
 8016504:	4630      	mov	r0, r6
 8016506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801650a:	bf00      	nop
 801650c:	0801b7cc 	.word	0x0801b7cc
 8016510:	0801b63a 	.word	0x0801b63a
 8016514:	0801b6ba 	.word	0x0801b6ba

08016518 <__lshift>:
 8016518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801651c:	460c      	mov	r4, r1
 801651e:	6849      	ldr	r1, [r1, #4]
 8016520:	6923      	ldr	r3, [r4, #16]
 8016522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016526:	68a3      	ldr	r3, [r4, #8]
 8016528:	4607      	mov	r7, r0
 801652a:	4691      	mov	r9, r2
 801652c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016530:	f108 0601 	add.w	r6, r8, #1
 8016534:	42b3      	cmp	r3, r6
 8016536:	db0b      	blt.n	8016550 <__lshift+0x38>
 8016538:	4638      	mov	r0, r7
 801653a:	f7ff fd9d 	bl	8016078 <_Balloc>
 801653e:	4605      	mov	r5, r0
 8016540:	b948      	cbnz	r0, 8016556 <__lshift+0x3e>
 8016542:	4602      	mov	r2, r0
 8016544:	4b28      	ldr	r3, [pc, #160]	@ (80165e8 <__lshift+0xd0>)
 8016546:	4829      	ldr	r0, [pc, #164]	@ (80165ec <__lshift+0xd4>)
 8016548:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801654c:	f001 fb90 	bl	8017c70 <__assert_func>
 8016550:	3101      	adds	r1, #1
 8016552:	005b      	lsls	r3, r3, #1
 8016554:	e7ee      	b.n	8016534 <__lshift+0x1c>
 8016556:	2300      	movs	r3, #0
 8016558:	f100 0114 	add.w	r1, r0, #20
 801655c:	f100 0210 	add.w	r2, r0, #16
 8016560:	4618      	mov	r0, r3
 8016562:	4553      	cmp	r3, sl
 8016564:	db33      	blt.n	80165ce <__lshift+0xb6>
 8016566:	6920      	ldr	r0, [r4, #16]
 8016568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801656c:	f104 0314 	add.w	r3, r4, #20
 8016570:	f019 091f 	ands.w	r9, r9, #31
 8016574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016578:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801657c:	d02b      	beq.n	80165d6 <__lshift+0xbe>
 801657e:	f1c9 0e20 	rsb	lr, r9, #32
 8016582:	468a      	mov	sl, r1
 8016584:	2200      	movs	r2, #0
 8016586:	6818      	ldr	r0, [r3, #0]
 8016588:	fa00 f009 	lsl.w	r0, r0, r9
 801658c:	4310      	orrs	r0, r2
 801658e:	f84a 0b04 	str.w	r0, [sl], #4
 8016592:	f853 2b04 	ldr.w	r2, [r3], #4
 8016596:	459c      	cmp	ip, r3
 8016598:	fa22 f20e 	lsr.w	r2, r2, lr
 801659c:	d8f3      	bhi.n	8016586 <__lshift+0x6e>
 801659e:	ebac 0304 	sub.w	r3, ip, r4
 80165a2:	3b15      	subs	r3, #21
 80165a4:	f023 0303 	bic.w	r3, r3, #3
 80165a8:	3304      	adds	r3, #4
 80165aa:	f104 0015 	add.w	r0, r4, #21
 80165ae:	4560      	cmp	r0, ip
 80165b0:	bf88      	it	hi
 80165b2:	2304      	movhi	r3, #4
 80165b4:	50ca      	str	r2, [r1, r3]
 80165b6:	b10a      	cbz	r2, 80165bc <__lshift+0xa4>
 80165b8:	f108 0602 	add.w	r6, r8, #2
 80165bc:	3e01      	subs	r6, #1
 80165be:	4638      	mov	r0, r7
 80165c0:	612e      	str	r6, [r5, #16]
 80165c2:	4621      	mov	r1, r4
 80165c4:	f7ff fd98 	bl	80160f8 <_Bfree>
 80165c8:	4628      	mov	r0, r5
 80165ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80165d2:	3301      	adds	r3, #1
 80165d4:	e7c5      	b.n	8016562 <__lshift+0x4a>
 80165d6:	3904      	subs	r1, #4
 80165d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80165dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80165e0:	459c      	cmp	ip, r3
 80165e2:	d8f9      	bhi.n	80165d8 <__lshift+0xc0>
 80165e4:	e7ea      	b.n	80165bc <__lshift+0xa4>
 80165e6:	bf00      	nop
 80165e8:	0801b6a9 	.word	0x0801b6a9
 80165ec:	0801b6ba 	.word	0x0801b6ba

080165f0 <__mcmp>:
 80165f0:	690a      	ldr	r2, [r1, #16]
 80165f2:	4603      	mov	r3, r0
 80165f4:	6900      	ldr	r0, [r0, #16]
 80165f6:	1a80      	subs	r0, r0, r2
 80165f8:	b530      	push	{r4, r5, lr}
 80165fa:	d10e      	bne.n	801661a <__mcmp+0x2a>
 80165fc:	3314      	adds	r3, #20
 80165fe:	3114      	adds	r1, #20
 8016600:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016604:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016608:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801660c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016610:	4295      	cmp	r5, r2
 8016612:	d003      	beq.n	801661c <__mcmp+0x2c>
 8016614:	d205      	bcs.n	8016622 <__mcmp+0x32>
 8016616:	f04f 30ff 	mov.w	r0, #4294967295
 801661a:	bd30      	pop	{r4, r5, pc}
 801661c:	42a3      	cmp	r3, r4
 801661e:	d3f3      	bcc.n	8016608 <__mcmp+0x18>
 8016620:	e7fb      	b.n	801661a <__mcmp+0x2a>
 8016622:	2001      	movs	r0, #1
 8016624:	e7f9      	b.n	801661a <__mcmp+0x2a>
	...

08016628 <__mdiff>:
 8016628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801662c:	4689      	mov	r9, r1
 801662e:	4606      	mov	r6, r0
 8016630:	4611      	mov	r1, r2
 8016632:	4648      	mov	r0, r9
 8016634:	4614      	mov	r4, r2
 8016636:	f7ff ffdb 	bl	80165f0 <__mcmp>
 801663a:	1e05      	subs	r5, r0, #0
 801663c:	d112      	bne.n	8016664 <__mdiff+0x3c>
 801663e:	4629      	mov	r1, r5
 8016640:	4630      	mov	r0, r6
 8016642:	f7ff fd19 	bl	8016078 <_Balloc>
 8016646:	4602      	mov	r2, r0
 8016648:	b928      	cbnz	r0, 8016656 <__mdiff+0x2e>
 801664a:	4b3f      	ldr	r3, [pc, #252]	@ (8016748 <__mdiff+0x120>)
 801664c:	f240 2137 	movw	r1, #567	@ 0x237
 8016650:	483e      	ldr	r0, [pc, #248]	@ (801674c <__mdiff+0x124>)
 8016652:	f001 fb0d 	bl	8017c70 <__assert_func>
 8016656:	2301      	movs	r3, #1
 8016658:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801665c:	4610      	mov	r0, r2
 801665e:	b003      	add	sp, #12
 8016660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016664:	bfbc      	itt	lt
 8016666:	464b      	movlt	r3, r9
 8016668:	46a1      	movlt	r9, r4
 801666a:	4630      	mov	r0, r6
 801666c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016670:	bfba      	itte	lt
 8016672:	461c      	movlt	r4, r3
 8016674:	2501      	movlt	r5, #1
 8016676:	2500      	movge	r5, #0
 8016678:	f7ff fcfe 	bl	8016078 <_Balloc>
 801667c:	4602      	mov	r2, r0
 801667e:	b918      	cbnz	r0, 8016688 <__mdiff+0x60>
 8016680:	4b31      	ldr	r3, [pc, #196]	@ (8016748 <__mdiff+0x120>)
 8016682:	f240 2145 	movw	r1, #581	@ 0x245
 8016686:	e7e3      	b.n	8016650 <__mdiff+0x28>
 8016688:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801668c:	6926      	ldr	r6, [r4, #16]
 801668e:	60c5      	str	r5, [r0, #12]
 8016690:	f109 0310 	add.w	r3, r9, #16
 8016694:	f109 0514 	add.w	r5, r9, #20
 8016698:	f104 0e14 	add.w	lr, r4, #20
 801669c:	f100 0b14 	add.w	fp, r0, #20
 80166a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80166a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80166a8:	9301      	str	r3, [sp, #4]
 80166aa:	46d9      	mov	r9, fp
 80166ac:	f04f 0c00 	mov.w	ip, #0
 80166b0:	9b01      	ldr	r3, [sp, #4]
 80166b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80166b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80166ba:	9301      	str	r3, [sp, #4]
 80166bc:	fa1f f38a 	uxth.w	r3, sl
 80166c0:	4619      	mov	r1, r3
 80166c2:	b283      	uxth	r3, r0
 80166c4:	1acb      	subs	r3, r1, r3
 80166c6:	0c00      	lsrs	r0, r0, #16
 80166c8:	4463      	add	r3, ip
 80166ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80166ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80166d8:	4576      	cmp	r6, lr
 80166da:	f849 3b04 	str.w	r3, [r9], #4
 80166de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80166e2:	d8e5      	bhi.n	80166b0 <__mdiff+0x88>
 80166e4:	1b33      	subs	r3, r6, r4
 80166e6:	3b15      	subs	r3, #21
 80166e8:	f023 0303 	bic.w	r3, r3, #3
 80166ec:	3415      	adds	r4, #21
 80166ee:	3304      	adds	r3, #4
 80166f0:	42a6      	cmp	r6, r4
 80166f2:	bf38      	it	cc
 80166f4:	2304      	movcc	r3, #4
 80166f6:	441d      	add	r5, r3
 80166f8:	445b      	add	r3, fp
 80166fa:	461e      	mov	r6, r3
 80166fc:	462c      	mov	r4, r5
 80166fe:	4544      	cmp	r4, r8
 8016700:	d30e      	bcc.n	8016720 <__mdiff+0xf8>
 8016702:	f108 0103 	add.w	r1, r8, #3
 8016706:	1b49      	subs	r1, r1, r5
 8016708:	f021 0103 	bic.w	r1, r1, #3
 801670c:	3d03      	subs	r5, #3
 801670e:	45a8      	cmp	r8, r5
 8016710:	bf38      	it	cc
 8016712:	2100      	movcc	r1, #0
 8016714:	440b      	add	r3, r1
 8016716:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801671a:	b191      	cbz	r1, 8016742 <__mdiff+0x11a>
 801671c:	6117      	str	r7, [r2, #16]
 801671e:	e79d      	b.n	801665c <__mdiff+0x34>
 8016720:	f854 1b04 	ldr.w	r1, [r4], #4
 8016724:	46e6      	mov	lr, ip
 8016726:	0c08      	lsrs	r0, r1, #16
 8016728:	fa1c fc81 	uxtah	ip, ip, r1
 801672c:	4471      	add	r1, lr
 801672e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016732:	b289      	uxth	r1, r1
 8016734:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016738:	f846 1b04 	str.w	r1, [r6], #4
 801673c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016740:	e7dd      	b.n	80166fe <__mdiff+0xd6>
 8016742:	3f01      	subs	r7, #1
 8016744:	e7e7      	b.n	8016716 <__mdiff+0xee>
 8016746:	bf00      	nop
 8016748:	0801b6a9 	.word	0x0801b6a9
 801674c:	0801b6ba 	.word	0x0801b6ba

08016750 <__ulp>:
 8016750:	b082      	sub	sp, #8
 8016752:	ed8d 0b00 	vstr	d0, [sp]
 8016756:	9a01      	ldr	r2, [sp, #4]
 8016758:	4b0f      	ldr	r3, [pc, #60]	@ (8016798 <__ulp+0x48>)
 801675a:	4013      	ands	r3, r2
 801675c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016760:	2b00      	cmp	r3, #0
 8016762:	dc08      	bgt.n	8016776 <__ulp+0x26>
 8016764:	425b      	negs	r3, r3
 8016766:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801676a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801676e:	da04      	bge.n	801677a <__ulp+0x2a>
 8016770:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016774:	4113      	asrs	r3, r2
 8016776:	2200      	movs	r2, #0
 8016778:	e008      	b.n	801678c <__ulp+0x3c>
 801677a:	f1a2 0314 	sub.w	r3, r2, #20
 801677e:	2b1e      	cmp	r3, #30
 8016780:	bfda      	itte	le
 8016782:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016786:	40da      	lsrle	r2, r3
 8016788:	2201      	movgt	r2, #1
 801678a:	2300      	movs	r3, #0
 801678c:	4619      	mov	r1, r3
 801678e:	4610      	mov	r0, r2
 8016790:	ec41 0b10 	vmov	d0, r0, r1
 8016794:	b002      	add	sp, #8
 8016796:	4770      	bx	lr
 8016798:	7ff00000 	.word	0x7ff00000

0801679c <__b2d>:
 801679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167a0:	6906      	ldr	r6, [r0, #16]
 80167a2:	f100 0814 	add.w	r8, r0, #20
 80167a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80167aa:	1f37      	subs	r7, r6, #4
 80167ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80167b0:	4610      	mov	r0, r2
 80167b2:	f7ff fd53 	bl	801625c <__hi0bits>
 80167b6:	f1c0 0320 	rsb	r3, r0, #32
 80167ba:	280a      	cmp	r0, #10
 80167bc:	600b      	str	r3, [r1, #0]
 80167be:	491b      	ldr	r1, [pc, #108]	@ (801682c <__b2d+0x90>)
 80167c0:	dc15      	bgt.n	80167ee <__b2d+0x52>
 80167c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80167c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80167ca:	45b8      	cmp	r8, r7
 80167cc:	ea43 0501 	orr.w	r5, r3, r1
 80167d0:	bf34      	ite	cc
 80167d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80167d6:	2300      	movcs	r3, #0
 80167d8:	3015      	adds	r0, #21
 80167da:	fa02 f000 	lsl.w	r0, r2, r0
 80167de:	fa23 f30c 	lsr.w	r3, r3, ip
 80167e2:	4303      	orrs	r3, r0
 80167e4:	461c      	mov	r4, r3
 80167e6:	ec45 4b10 	vmov	d0, r4, r5
 80167ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167ee:	45b8      	cmp	r8, r7
 80167f0:	bf3a      	itte	cc
 80167f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80167f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80167fa:	2300      	movcs	r3, #0
 80167fc:	380b      	subs	r0, #11
 80167fe:	d012      	beq.n	8016826 <__b2d+0x8a>
 8016800:	f1c0 0120 	rsb	r1, r0, #32
 8016804:	fa23 f401 	lsr.w	r4, r3, r1
 8016808:	4082      	lsls	r2, r0
 801680a:	4322      	orrs	r2, r4
 801680c:	4547      	cmp	r7, r8
 801680e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016812:	bf8c      	ite	hi
 8016814:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016818:	2200      	movls	r2, #0
 801681a:	4083      	lsls	r3, r0
 801681c:	40ca      	lsrs	r2, r1
 801681e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016822:	4313      	orrs	r3, r2
 8016824:	e7de      	b.n	80167e4 <__b2d+0x48>
 8016826:	ea42 0501 	orr.w	r5, r2, r1
 801682a:	e7db      	b.n	80167e4 <__b2d+0x48>
 801682c:	3ff00000 	.word	0x3ff00000

08016830 <__d2b>:
 8016830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016834:	460f      	mov	r7, r1
 8016836:	2101      	movs	r1, #1
 8016838:	ec59 8b10 	vmov	r8, r9, d0
 801683c:	4616      	mov	r6, r2
 801683e:	f7ff fc1b 	bl	8016078 <_Balloc>
 8016842:	4604      	mov	r4, r0
 8016844:	b930      	cbnz	r0, 8016854 <__d2b+0x24>
 8016846:	4602      	mov	r2, r0
 8016848:	4b23      	ldr	r3, [pc, #140]	@ (80168d8 <__d2b+0xa8>)
 801684a:	4824      	ldr	r0, [pc, #144]	@ (80168dc <__d2b+0xac>)
 801684c:	f240 310f 	movw	r1, #783	@ 0x30f
 8016850:	f001 fa0e 	bl	8017c70 <__assert_func>
 8016854:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801685c:	b10d      	cbz	r5, 8016862 <__d2b+0x32>
 801685e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016862:	9301      	str	r3, [sp, #4]
 8016864:	f1b8 0300 	subs.w	r3, r8, #0
 8016868:	d023      	beq.n	80168b2 <__d2b+0x82>
 801686a:	4668      	mov	r0, sp
 801686c:	9300      	str	r3, [sp, #0]
 801686e:	f7ff fd14 	bl	801629a <__lo0bits>
 8016872:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016876:	b1d0      	cbz	r0, 80168ae <__d2b+0x7e>
 8016878:	f1c0 0320 	rsb	r3, r0, #32
 801687c:	fa02 f303 	lsl.w	r3, r2, r3
 8016880:	430b      	orrs	r3, r1
 8016882:	40c2      	lsrs	r2, r0
 8016884:	6163      	str	r3, [r4, #20]
 8016886:	9201      	str	r2, [sp, #4]
 8016888:	9b01      	ldr	r3, [sp, #4]
 801688a:	61a3      	str	r3, [r4, #24]
 801688c:	2b00      	cmp	r3, #0
 801688e:	bf0c      	ite	eq
 8016890:	2201      	moveq	r2, #1
 8016892:	2202      	movne	r2, #2
 8016894:	6122      	str	r2, [r4, #16]
 8016896:	b1a5      	cbz	r5, 80168c2 <__d2b+0x92>
 8016898:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801689c:	4405      	add	r5, r0
 801689e:	603d      	str	r5, [r7, #0]
 80168a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80168a4:	6030      	str	r0, [r6, #0]
 80168a6:	4620      	mov	r0, r4
 80168a8:	b003      	add	sp, #12
 80168aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168ae:	6161      	str	r1, [r4, #20]
 80168b0:	e7ea      	b.n	8016888 <__d2b+0x58>
 80168b2:	a801      	add	r0, sp, #4
 80168b4:	f7ff fcf1 	bl	801629a <__lo0bits>
 80168b8:	9b01      	ldr	r3, [sp, #4]
 80168ba:	6163      	str	r3, [r4, #20]
 80168bc:	3020      	adds	r0, #32
 80168be:	2201      	movs	r2, #1
 80168c0:	e7e8      	b.n	8016894 <__d2b+0x64>
 80168c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80168c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80168ca:	6038      	str	r0, [r7, #0]
 80168cc:	6918      	ldr	r0, [r3, #16]
 80168ce:	f7ff fcc5 	bl	801625c <__hi0bits>
 80168d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80168d6:	e7e5      	b.n	80168a4 <__d2b+0x74>
 80168d8:	0801b6a9 	.word	0x0801b6a9
 80168dc:	0801b6ba 	.word	0x0801b6ba

080168e0 <__ratio>:
 80168e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168e4:	b085      	sub	sp, #20
 80168e6:	e9cd 1000 	strd	r1, r0, [sp]
 80168ea:	a902      	add	r1, sp, #8
 80168ec:	f7ff ff56 	bl	801679c <__b2d>
 80168f0:	9800      	ldr	r0, [sp, #0]
 80168f2:	a903      	add	r1, sp, #12
 80168f4:	ec55 4b10 	vmov	r4, r5, d0
 80168f8:	f7ff ff50 	bl	801679c <__b2d>
 80168fc:	9b01      	ldr	r3, [sp, #4]
 80168fe:	6919      	ldr	r1, [r3, #16]
 8016900:	9b00      	ldr	r3, [sp, #0]
 8016902:	691b      	ldr	r3, [r3, #16]
 8016904:	1ac9      	subs	r1, r1, r3
 8016906:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801690a:	1a9b      	subs	r3, r3, r2
 801690c:	ec5b ab10 	vmov	sl, fp, d0
 8016910:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016914:	2b00      	cmp	r3, #0
 8016916:	bfce      	itee	gt
 8016918:	462a      	movgt	r2, r5
 801691a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801691e:	465a      	movle	r2, fp
 8016920:	462f      	mov	r7, r5
 8016922:	46d9      	mov	r9, fp
 8016924:	bfcc      	ite	gt
 8016926:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801692a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801692e:	464b      	mov	r3, r9
 8016930:	4652      	mov	r2, sl
 8016932:	4620      	mov	r0, r4
 8016934:	4639      	mov	r1, r7
 8016936:	f7e9 ffb1 	bl	800089c <__aeabi_ddiv>
 801693a:	ec41 0b10 	vmov	d0, r0, r1
 801693e:	b005      	add	sp, #20
 8016940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016944 <__copybits>:
 8016944:	3901      	subs	r1, #1
 8016946:	b570      	push	{r4, r5, r6, lr}
 8016948:	1149      	asrs	r1, r1, #5
 801694a:	6914      	ldr	r4, [r2, #16]
 801694c:	3101      	adds	r1, #1
 801694e:	f102 0314 	add.w	r3, r2, #20
 8016952:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016956:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801695a:	1f05      	subs	r5, r0, #4
 801695c:	42a3      	cmp	r3, r4
 801695e:	d30c      	bcc.n	801697a <__copybits+0x36>
 8016960:	1aa3      	subs	r3, r4, r2
 8016962:	3b11      	subs	r3, #17
 8016964:	f023 0303 	bic.w	r3, r3, #3
 8016968:	3211      	adds	r2, #17
 801696a:	42a2      	cmp	r2, r4
 801696c:	bf88      	it	hi
 801696e:	2300      	movhi	r3, #0
 8016970:	4418      	add	r0, r3
 8016972:	2300      	movs	r3, #0
 8016974:	4288      	cmp	r0, r1
 8016976:	d305      	bcc.n	8016984 <__copybits+0x40>
 8016978:	bd70      	pop	{r4, r5, r6, pc}
 801697a:	f853 6b04 	ldr.w	r6, [r3], #4
 801697e:	f845 6f04 	str.w	r6, [r5, #4]!
 8016982:	e7eb      	b.n	801695c <__copybits+0x18>
 8016984:	f840 3b04 	str.w	r3, [r0], #4
 8016988:	e7f4      	b.n	8016974 <__copybits+0x30>

0801698a <__any_on>:
 801698a:	f100 0214 	add.w	r2, r0, #20
 801698e:	6900      	ldr	r0, [r0, #16]
 8016990:	114b      	asrs	r3, r1, #5
 8016992:	4298      	cmp	r0, r3
 8016994:	b510      	push	{r4, lr}
 8016996:	db11      	blt.n	80169bc <__any_on+0x32>
 8016998:	dd0a      	ble.n	80169b0 <__any_on+0x26>
 801699a:	f011 011f 	ands.w	r1, r1, #31
 801699e:	d007      	beq.n	80169b0 <__any_on+0x26>
 80169a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80169a4:	fa24 f001 	lsr.w	r0, r4, r1
 80169a8:	fa00 f101 	lsl.w	r1, r0, r1
 80169ac:	428c      	cmp	r4, r1
 80169ae:	d10b      	bne.n	80169c8 <__any_on+0x3e>
 80169b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80169b4:	4293      	cmp	r3, r2
 80169b6:	d803      	bhi.n	80169c0 <__any_on+0x36>
 80169b8:	2000      	movs	r0, #0
 80169ba:	bd10      	pop	{r4, pc}
 80169bc:	4603      	mov	r3, r0
 80169be:	e7f7      	b.n	80169b0 <__any_on+0x26>
 80169c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80169c4:	2900      	cmp	r1, #0
 80169c6:	d0f5      	beq.n	80169b4 <__any_on+0x2a>
 80169c8:	2001      	movs	r0, #1
 80169ca:	e7f6      	b.n	80169ba <__any_on+0x30>

080169cc <sulp>:
 80169cc:	b570      	push	{r4, r5, r6, lr}
 80169ce:	4604      	mov	r4, r0
 80169d0:	460d      	mov	r5, r1
 80169d2:	ec45 4b10 	vmov	d0, r4, r5
 80169d6:	4616      	mov	r6, r2
 80169d8:	f7ff feba 	bl	8016750 <__ulp>
 80169dc:	ec51 0b10 	vmov	r0, r1, d0
 80169e0:	b17e      	cbz	r6, 8016a02 <sulp+0x36>
 80169e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80169e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	dd09      	ble.n	8016a02 <sulp+0x36>
 80169ee:	051b      	lsls	r3, r3, #20
 80169f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80169f4:	2400      	movs	r4, #0
 80169f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80169fa:	4622      	mov	r2, r4
 80169fc:	462b      	mov	r3, r5
 80169fe:	f7e9 fe23 	bl	8000648 <__aeabi_dmul>
 8016a02:	ec41 0b10 	vmov	d0, r0, r1
 8016a06:	bd70      	pop	{r4, r5, r6, pc}

08016a08 <_strtod_l>:
 8016a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a0c:	b09f      	sub	sp, #124	@ 0x7c
 8016a0e:	460c      	mov	r4, r1
 8016a10:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016a12:	2200      	movs	r2, #0
 8016a14:	921a      	str	r2, [sp, #104]	@ 0x68
 8016a16:	9005      	str	r0, [sp, #20]
 8016a18:	f04f 0a00 	mov.w	sl, #0
 8016a1c:	f04f 0b00 	mov.w	fp, #0
 8016a20:	460a      	mov	r2, r1
 8016a22:	9219      	str	r2, [sp, #100]	@ 0x64
 8016a24:	7811      	ldrb	r1, [r2, #0]
 8016a26:	292b      	cmp	r1, #43	@ 0x2b
 8016a28:	d04a      	beq.n	8016ac0 <_strtod_l+0xb8>
 8016a2a:	d838      	bhi.n	8016a9e <_strtod_l+0x96>
 8016a2c:	290d      	cmp	r1, #13
 8016a2e:	d832      	bhi.n	8016a96 <_strtod_l+0x8e>
 8016a30:	2908      	cmp	r1, #8
 8016a32:	d832      	bhi.n	8016a9a <_strtod_l+0x92>
 8016a34:	2900      	cmp	r1, #0
 8016a36:	d03b      	beq.n	8016ab0 <_strtod_l+0xa8>
 8016a38:	2200      	movs	r2, #0
 8016a3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8016a3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016a3e:	782a      	ldrb	r2, [r5, #0]
 8016a40:	2a30      	cmp	r2, #48	@ 0x30
 8016a42:	f040 80b2 	bne.w	8016baa <_strtod_l+0x1a2>
 8016a46:	786a      	ldrb	r2, [r5, #1]
 8016a48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016a4c:	2a58      	cmp	r2, #88	@ 0x58
 8016a4e:	d16e      	bne.n	8016b2e <_strtod_l+0x126>
 8016a50:	9302      	str	r3, [sp, #8]
 8016a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a54:	9301      	str	r3, [sp, #4]
 8016a56:	ab1a      	add	r3, sp, #104	@ 0x68
 8016a58:	9300      	str	r3, [sp, #0]
 8016a5a:	4a8f      	ldr	r2, [pc, #572]	@ (8016c98 <_strtod_l+0x290>)
 8016a5c:	9805      	ldr	r0, [sp, #20]
 8016a5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016a60:	a919      	add	r1, sp, #100	@ 0x64
 8016a62:	f001 f99f 	bl	8017da4 <__gethex>
 8016a66:	f010 060f 	ands.w	r6, r0, #15
 8016a6a:	4604      	mov	r4, r0
 8016a6c:	d005      	beq.n	8016a7a <_strtod_l+0x72>
 8016a6e:	2e06      	cmp	r6, #6
 8016a70:	d128      	bne.n	8016ac4 <_strtod_l+0xbc>
 8016a72:	3501      	adds	r5, #1
 8016a74:	2300      	movs	r3, #0
 8016a76:	9519      	str	r5, [sp, #100]	@ 0x64
 8016a78:	930e      	str	r3, [sp, #56]	@ 0x38
 8016a7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	f040 858e 	bne.w	801759e <_strtod_l+0xb96>
 8016a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a84:	b1cb      	cbz	r3, 8016aba <_strtod_l+0xb2>
 8016a86:	4652      	mov	r2, sl
 8016a88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016a8c:	ec43 2b10 	vmov	d0, r2, r3
 8016a90:	b01f      	add	sp, #124	@ 0x7c
 8016a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a96:	2920      	cmp	r1, #32
 8016a98:	d1ce      	bne.n	8016a38 <_strtod_l+0x30>
 8016a9a:	3201      	adds	r2, #1
 8016a9c:	e7c1      	b.n	8016a22 <_strtod_l+0x1a>
 8016a9e:	292d      	cmp	r1, #45	@ 0x2d
 8016aa0:	d1ca      	bne.n	8016a38 <_strtod_l+0x30>
 8016aa2:	2101      	movs	r1, #1
 8016aa4:	910e      	str	r1, [sp, #56]	@ 0x38
 8016aa6:	1c51      	adds	r1, r2, #1
 8016aa8:	9119      	str	r1, [sp, #100]	@ 0x64
 8016aaa:	7852      	ldrb	r2, [r2, #1]
 8016aac:	2a00      	cmp	r2, #0
 8016aae:	d1c5      	bne.n	8016a3c <_strtod_l+0x34>
 8016ab0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016ab2:	9419      	str	r4, [sp, #100]	@ 0x64
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	f040 8570 	bne.w	801759a <_strtod_l+0xb92>
 8016aba:	4652      	mov	r2, sl
 8016abc:	465b      	mov	r3, fp
 8016abe:	e7e5      	b.n	8016a8c <_strtod_l+0x84>
 8016ac0:	2100      	movs	r1, #0
 8016ac2:	e7ef      	b.n	8016aa4 <_strtod_l+0x9c>
 8016ac4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016ac6:	b13a      	cbz	r2, 8016ad8 <_strtod_l+0xd0>
 8016ac8:	2135      	movs	r1, #53	@ 0x35
 8016aca:	a81c      	add	r0, sp, #112	@ 0x70
 8016acc:	f7ff ff3a 	bl	8016944 <__copybits>
 8016ad0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016ad2:	9805      	ldr	r0, [sp, #20]
 8016ad4:	f7ff fb10 	bl	80160f8 <_Bfree>
 8016ad8:	3e01      	subs	r6, #1
 8016ada:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016adc:	2e04      	cmp	r6, #4
 8016ade:	d806      	bhi.n	8016aee <_strtod_l+0xe6>
 8016ae0:	e8df f006 	tbb	[pc, r6]
 8016ae4:	201d0314 	.word	0x201d0314
 8016ae8:	14          	.byte	0x14
 8016ae9:	00          	.byte	0x00
 8016aea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016aee:	05e1      	lsls	r1, r4, #23
 8016af0:	bf48      	it	mi
 8016af2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016af6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016afa:	0d1b      	lsrs	r3, r3, #20
 8016afc:	051b      	lsls	r3, r3, #20
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d1bb      	bne.n	8016a7a <_strtod_l+0x72>
 8016b02:	f7fe fb1f 	bl	8015144 <__errno>
 8016b06:	2322      	movs	r3, #34	@ 0x22
 8016b08:	6003      	str	r3, [r0, #0]
 8016b0a:	e7b6      	b.n	8016a7a <_strtod_l+0x72>
 8016b0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016b10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016b14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016b18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016b1c:	e7e7      	b.n	8016aee <_strtod_l+0xe6>
 8016b1e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016ca0 <_strtod_l+0x298>
 8016b22:	e7e4      	b.n	8016aee <_strtod_l+0xe6>
 8016b24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016b28:	f04f 3aff 	mov.w	sl, #4294967295
 8016b2c:	e7df      	b.n	8016aee <_strtod_l+0xe6>
 8016b2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016b30:	1c5a      	adds	r2, r3, #1
 8016b32:	9219      	str	r2, [sp, #100]	@ 0x64
 8016b34:	785b      	ldrb	r3, [r3, #1]
 8016b36:	2b30      	cmp	r3, #48	@ 0x30
 8016b38:	d0f9      	beq.n	8016b2e <_strtod_l+0x126>
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d09d      	beq.n	8016a7a <_strtod_l+0x72>
 8016b3e:	2301      	movs	r3, #1
 8016b40:	2700      	movs	r7, #0
 8016b42:	9308      	str	r3, [sp, #32]
 8016b44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016b46:	930c      	str	r3, [sp, #48]	@ 0x30
 8016b48:	970b      	str	r7, [sp, #44]	@ 0x2c
 8016b4a:	46b9      	mov	r9, r7
 8016b4c:	220a      	movs	r2, #10
 8016b4e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016b50:	7805      	ldrb	r5, [r0, #0]
 8016b52:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016b56:	b2d9      	uxtb	r1, r3
 8016b58:	2909      	cmp	r1, #9
 8016b5a:	d928      	bls.n	8016bae <_strtod_l+0x1a6>
 8016b5c:	494f      	ldr	r1, [pc, #316]	@ (8016c9c <_strtod_l+0x294>)
 8016b5e:	2201      	movs	r2, #1
 8016b60:	f001 f838 	bl	8017bd4 <strncmp>
 8016b64:	2800      	cmp	r0, #0
 8016b66:	d032      	beq.n	8016bce <_strtod_l+0x1c6>
 8016b68:	2000      	movs	r0, #0
 8016b6a:	462a      	mov	r2, r5
 8016b6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8016b6e:	464d      	mov	r5, r9
 8016b70:	4603      	mov	r3, r0
 8016b72:	2a65      	cmp	r2, #101	@ 0x65
 8016b74:	d001      	beq.n	8016b7a <_strtod_l+0x172>
 8016b76:	2a45      	cmp	r2, #69	@ 0x45
 8016b78:	d114      	bne.n	8016ba4 <_strtod_l+0x19c>
 8016b7a:	b91d      	cbnz	r5, 8016b84 <_strtod_l+0x17c>
 8016b7c:	9a08      	ldr	r2, [sp, #32]
 8016b7e:	4302      	orrs	r2, r0
 8016b80:	d096      	beq.n	8016ab0 <_strtod_l+0xa8>
 8016b82:	2500      	movs	r5, #0
 8016b84:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016b86:	1c62      	adds	r2, r4, #1
 8016b88:	9219      	str	r2, [sp, #100]	@ 0x64
 8016b8a:	7862      	ldrb	r2, [r4, #1]
 8016b8c:	2a2b      	cmp	r2, #43	@ 0x2b
 8016b8e:	d07a      	beq.n	8016c86 <_strtod_l+0x27e>
 8016b90:	2a2d      	cmp	r2, #45	@ 0x2d
 8016b92:	d07e      	beq.n	8016c92 <_strtod_l+0x28a>
 8016b94:	f04f 0c00 	mov.w	ip, #0
 8016b98:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016b9c:	2909      	cmp	r1, #9
 8016b9e:	f240 8085 	bls.w	8016cac <_strtod_l+0x2a4>
 8016ba2:	9419      	str	r4, [sp, #100]	@ 0x64
 8016ba4:	f04f 0800 	mov.w	r8, #0
 8016ba8:	e0a5      	b.n	8016cf6 <_strtod_l+0x2ee>
 8016baa:	2300      	movs	r3, #0
 8016bac:	e7c8      	b.n	8016b40 <_strtod_l+0x138>
 8016bae:	f1b9 0f08 	cmp.w	r9, #8
 8016bb2:	bfd8      	it	le
 8016bb4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8016bb6:	f100 0001 	add.w	r0, r0, #1
 8016bba:	bfda      	itte	le
 8016bbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8016bc0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8016bc2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8016bc6:	f109 0901 	add.w	r9, r9, #1
 8016bca:	9019      	str	r0, [sp, #100]	@ 0x64
 8016bcc:	e7bf      	b.n	8016b4e <_strtod_l+0x146>
 8016bce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016bd0:	1c5a      	adds	r2, r3, #1
 8016bd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8016bd4:	785a      	ldrb	r2, [r3, #1]
 8016bd6:	f1b9 0f00 	cmp.w	r9, #0
 8016bda:	d03b      	beq.n	8016c54 <_strtod_l+0x24c>
 8016bdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8016bde:	464d      	mov	r5, r9
 8016be0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016be4:	2b09      	cmp	r3, #9
 8016be6:	d912      	bls.n	8016c0e <_strtod_l+0x206>
 8016be8:	2301      	movs	r3, #1
 8016bea:	e7c2      	b.n	8016b72 <_strtod_l+0x16a>
 8016bec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016bee:	1c5a      	adds	r2, r3, #1
 8016bf0:	9219      	str	r2, [sp, #100]	@ 0x64
 8016bf2:	785a      	ldrb	r2, [r3, #1]
 8016bf4:	3001      	adds	r0, #1
 8016bf6:	2a30      	cmp	r2, #48	@ 0x30
 8016bf8:	d0f8      	beq.n	8016bec <_strtod_l+0x1e4>
 8016bfa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016bfe:	2b08      	cmp	r3, #8
 8016c00:	f200 84d2 	bhi.w	80175a8 <_strtod_l+0xba0>
 8016c04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c06:	900a      	str	r0, [sp, #40]	@ 0x28
 8016c08:	2000      	movs	r0, #0
 8016c0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8016c0c:	4605      	mov	r5, r0
 8016c0e:	3a30      	subs	r2, #48	@ 0x30
 8016c10:	f100 0301 	add.w	r3, r0, #1
 8016c14:	d018      	beq.n	8016c48 <_strtod_l+0x240>
 8016c16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016c18:	4419      	add	r1, r3
 8016c1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8016c1c:	462e      	mov	r6, r5
 8016c1e:	f04f 0e0a 	mov.w	lr, #10
 8016c22:	1c71      	adds	r1, r6, #1
 8016c24:	eba1 0c05 	sub.w	ip, r1, r5
 8016c28:	4563      	cmp	r3, ip
 8016c2a:	dc15      	bgt.n	8016c58 <_strtod_l+0x250>
 8016c2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016c30:	182b      	adds	r3, r5, r0
 8016c32:	2b08      	cmp	r3, #8
 8016c34:	f105 0501 	add.w	r5, r5, #1
 8016c38:	4405      	add	r5, r0
 8016c3a:	dc1a      	bgt.n	8016c72 <_strtod_l+0x26a>
 8016c3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016c3e:	230a      	movs	r3, #10
 8016c40:	fb03 2301 	mla	r3, r3, r1, r2
 8016c44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c46:	2300      	movs	r3, #0
 8016c48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016c4a:	1c51      	adds	r1, r2, #1
 8016c4c:	9119      	str	r1, [sp, #100]	@ 0x64
 8016c4e:	7852      	ldrb	r2, [r2, #1]
 8016c50:	4618      	mov	r0, r3
 8016c52:	e7c5      	b.n	8016be0 <_strtod_l+0x1d8>
 8016c54:	4648      	mov	r0, r9
 8016c56:	e7ce      	b.n	8016bf6 <_strtod_l+0x1ee>
 8016c58:	2e08      	cmp	r6, #8
 8016c5a:	dc05      	bgt.n	8016c68 <_strtod_l+0x260>
 8016c5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016c5e:	fb0e f606 	mul.w	r6, lr, r6
 8016c62:	960b      	str	r6, [sp, #44]	@ 0x2c
 8016c64:	460e      	mov	r6, r1
 8016c66:	e7dc      	b.n	8016c22 <_strtod_l+0x21a>
 8016c68:	2910      	cmp	r1, #16
 8016c6a:	bfd8      	it	le
 8016c6c:	fb0e f707 	mulle.w	r7, lr, r7
 8016c70:	e7f8      	b.n	8016c64 <_strtod_l+0x25c>
 8016c72:	2b0f      	cmp	r3, #15
 8016c74:	bfdc      	itt	le
 8016c76:	230a      	movle	r3, #10
 8016c78:	fb03 2707 	mlale	r7, r3, r7, r2
 8016c7c:	e7e3      	b.n	8016c46 <_strtod_l+0x23e>
 8016c7e:	2300      	movs	r3, #0
 8016c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8016c82:	2301      	movs	r3, #1
 8016c84:	e77a      	b.n	8016b7c <_strtod_l+0x174>
 8016c86:	f04f 0c00 	mov.w	ip, #0
 8016c8a:	1ca2      	adds	r2, r4, #2
 8016c8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8016c8e:	78a2      	ldrb	r2, [r4, #2]
 8016c90:	e782      	b.n	8016b98 <_strtod_l+0x190>
 8016c92:	f04f 0c01 	mov.w	ip, #1
 8016c96:	e7f8      	b.n	8016c8a <_strtod_l+0x282>
 8016c98:	0801b8dc 	.word	0x0801b8dc
 8016c9c:	0801b713 	.word	0x0801b713
 8016ca0:	7ff00000 	.word	0x7ff00000
 8016ca4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016ca6:	1c51      	adds	r1, r2, #1
 8016ca8:	9119      	str	r1, [sp, #100]	@ 0x64
 8016caa:	7852      	ldrb	r2, [r2, #1]
 8016cac:	2a30      	cmp	r2, #48	@ 0x30
 8016cae:	d0f9      	beq.n	8016ca4 <_strtod_l+0x29c>
 8016cb0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016cb4:	2908      	cmp	r1, #8
 8016cb6:	f63f af75 	bhi.w	8016ba4 <_strtod_l+0x19c>
 8016cba:	3a30      	subs	r2, #48	@ 0x30
 8016cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8016cbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016cc0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016cc2:	f04f 080a 	mov.w	r8, #10
 8016cc6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016cc8:	1c56      	adds	r6, r2, #1
 8016cca:	9619      	str	r6, [sp, #100]	@ 0x64
 8016ccc:	7852      	ldrb	r2, [r2, #1]
 8016cce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016cd2:	f1be 0f09 	cmp.w	lr, #9
 8016cd6:	d939      	bls.n	8016d4c <_strtod_l+0x344>
 8016cd8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016cda:	1a76      	subs	r6, r6, r1
 8016cdc:	2e08      	cmp	r6, #8
 8016cde:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016ce2:	dc03      	bgt.n	8016cec <_strtod_l+0x2e4>
 8016ce4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016ce6:	4588      	cmp	r8, r1
 8016ce8:	bfa8      	it	ge
 8016cea:	4688      	movge	r8, r1
 8016cec:	f1bc 0f00 	cmp.w	ip, #0
 8016cf0:	d001      	beq.n	8016cf6 <_strtod_l+0x2ee>
 8016cf2:	f1c8 0800 	rsb	r8, r8, #0
 8016cf6:	2d00      	cmp	r5, #0
 8016cf8:	d14e      	bne.n	8016d98 <_strtod_l+0x390>
 8016cfa:	9908      	ldr	r1, [sp, #32]
 8016cfc:	4308      	orrs	r0, r1
 8016cfe:	f47f aebc 	bne.w	8016a7a <_strtod_l+0x72>
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	f47f aed4 	bne.w	8016ab0 <_strtod_l+0xa8>
 8016d08:	2a69      	cmp	r2, #105	@ 0x69
 8016d0a:	d028      	beq.n	8016d5e <_strtod_l+0x356>
 8016d0c:	dc25      	bgt.n	8016d5a <_strtod_l+0x352>
 8016d0e:	2a49      	cmp	r2, #73	@ 0x49
 8016d10:	d025      	beq.n	8016d5e <_strtod_l+0x356>
 8016d12:	2a4e      	cmp	r2, #78	@ 0x4e
 8016d14:	f47f aecc 	bne.w	8016ab0 <_strtod_l+0xa8>
 8016d18:	499a      	ldr	r1, [pc, #616]	@ (8016f84 <_strtod_l+0x57c>)
 8016d1a:	a819      	add	r0, sp, #100	@ 0x64
 8016d1c:	f001 fa64 	bl	80181e8 <__match>
 8016d20:	2800      	cmp	r0, #0
 8016d22:	f43f aec5 	beq.w	8016ab0 <_strtod_l+0xa8>
 8016d26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d28:	781b      	ldrb	r3, [r3, #0]
 8016d2a:	2b28      	cmp	r3, #40	@ 0x28
 8016d2c:	d12e      	bne.n	8016d8c <_strtod_l+0x384>
 8016d2e:	4996      	ldr	r1, [pc, #600]	@ (8016f88 <_strtod_l+0x580>)
 8016d30:	aa1c      	add	r2, sp, #112	@ 0x70
 8016d32:	a819      	add	r0, sp, #100	@ 0x64
 8016d34:	f001 fa6c 	bl	8018210 <__hexnan>
 8016d38:	2805      	cmp	r0, #5
 8016d3a:	d127      	bne.n	8016d8c <_strtod_l+0x384>
 8016d3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016d3e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016d42:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016d46:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016d4a:	e696      	b.n	8016a7a <_strtod_l+0x72>
 8016d4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016d4e:	fb08 2101 	mla	r1, r8, r1, r2
 8016d52:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016d56:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d58:	e7b5      	b.n	8016cc6 <_strtod_l+0x2be>
 8016d5a:	2a6e      	cmp	r2, #110	@ 0x6e
 8016d5c:	e7da      	b.n	8016d14 <_strtod_l+0x30c>
 8016d5e:	498b      	ldr	r1, [pc, #556]	@ (8016f8c <_strtod_l+0x584>)
 8016d60:	a819      	add	r0, sp, #100	@ 0x64
 8016d62:	f001 fa41 	bl	80181e8 <__match>
 8016d66:	2800      	cmp	r0, #0
 8016d68:	f43f aea2 	beq.w	8016ab0 <_strtod_l+0xa8>
 8016d6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d6e:	4988      	ldr	r1, [pc, #544]	@ (8016f90 <_strtod_l+0x588>)
 8016d70:	3b01      	subs	r3, #1
 8016d72:	a819      	add	r0, sp, #100	@ 0x64
 8016d74:	9319      	str	r3, [sp, #100]	@ 0x64
 8016d76:	f001 fa37 	bl	80181e8 <__match>
 8016d7a:	b910      	cbnz	r0, 8016d82 <_strtod_l+0x37a>
 8016d7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d7e:	3301      	adds	r3, #1
 8016d80:	9319      	str	r3, [sp, #100]	@ 0x64
 8016d82:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016fa0 <_strtod_l+0x598>
 8016d86:	f04f 0a00 	mov.w	sl, #0
 8016d8a:	e676      	b.n	8016a7a <_strtod_l+0x72>
 8016d8c:	4881      	ldr	r0, [pc, #516]	@ (8016f94 <_strtod_l+0x58c>)
 8016d8e:	f000 ff67 	bl	8017c60 <nan>
 8016d92:	ec5b ab10 	vmov	sl, fp, d0
 8016d96:	e670      	b.n	8016a7a <_strtod_l+0x72>
 8016d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016d9c:	eba8 0303 	sub.w	r3, r8, r3
 8016da0:	f1b9 0f00 	cmp.w	r9, #0
 8016da4:	bf08      	it	eq
 8016da6:	46a9      	moveq	r9, r5
 8016da8:	2d10      	cmp	r5, #16
 8016daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dac:	462c      	mov	r4, r5
 8016dae:	bfa8      	it	ge
 8016db0:	2410      	movge	r4, #16
 8016db2:	f7e9 fbcf 	bl	8000554 <__aeabi_ui2d>
 8016db6:	2d09      	cmp	r5, #9
 8016db8:	4682      	mov	sl, r0
 8016dba:	468b      	mov	fp, r1
 8016dbc:	dc13      	bgt.n	8016de6 <_strtod_l+0x3de>
 8016dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	f43f ae5a 	beq.w	8016a7a <_strtod_l+0x72>
 8016dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dc8:	dd78      	ble.n	8016ebc <_strtod_l+0x4b4>
 8016dca:	2b16      	cmp	r3, #22
 8016dcc:	dc5f      	bgt.n	8016e8e <_strtod_l+0x486>
 8016dce:	4972      	ldr	r1, [pc, #456]	@ (8016f98 <_strtod_l+0x590>)
 8016dd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016dd8:	4652      	mov	r2, sl
 8016dda:	465b      	mov	r3, fp
 8016ddc:	f7e9 fc34 	bl	8000648 <__aeabi_dmul>
 8016de0:	4682      	mov	sl, r0
 8016de2:	468b      	mov	fp, r1
 8016de4:	e649      	b.n	8016a7a <_strtod_l+0x72>
 8016de6:	4b6c      	ldr	r3, [pc, #432]	@ (8016f98 <_strtod_l+0x590>)
 8016de8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016dec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016df0:	f7e9 fc2a 	bl	8000648 <__aeabi_dmul>
 8016df4:	4682      	mov	sl, r0
 8016df6:	4638      	mov	r0, r7
 8016df8:	468b      	mov	fp, r1
 8016dfa:	f7e9 fbab 	bl	8000554 <__aeabi_ui2d>
 8016dfe:	4602      	mov	r2, r0
 8016e00:	460b      	mov	r3, r1
 8016e02:	4650      	mov	r0, sl
 8016e04:	4659      	mov	r1, fp
 8016e06:	f7e9 fa69 	bl	80002dc <__adddf3>
 8016e0a:	2d0f      	cmp	r5, #15
 8016e0c:	4682      	mov	sl, r0
 8016e0e:	468b      	mov	fp, r1
 8016e10:	ddd5      	ble.n	8016dbe <_strtod_l+0x3b6>
 8016e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e14:	1b2c      	subs	r4, r5, r4
 8016e16:	441c      	add	r4, r3
 8016e18:	2c00      	cmp	r4, #0
 8016e1a:	f340 8093 	ble.w	8016f44 <_strtod_l+0x53c>
 8016e1e:	f014 030f 	ands.w	r3, r4, #15
 8016e22:	d00a      	beq.n	8016e3a <_strtod_l+0x432>
 8016e24:	495c      	ldr	r1, [pc, #368]	@ (8016f98 <_strtod_l+0x590>)
 8016e26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016e2a:	4652      	mov	r2, sl
 8016e2c:	465b      	mov	r3, fp
 8016e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e32:	f7e9 fc09 	bl	8000648 <__aeabi_dmul>
 8016e36:	4682      	mov	sl, r0
 8016e38:	468b      	mov	fp, r1
 8016e3a:	f034 040f 	bics.w	r4, r4, #15
 8016e3e:	d073      	beq.n	8016f28 <_strtod_l+0x520>
 8016e40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016e44:	dd49      	ble.n	8016eda <_strtod_l+0x4d2>
 8016e46:	2400      	movs	r4, #0
 8016e48:	46a0      	mov	r8, r4
 8016e4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016e4c:	46a1      	mov	r9, r4
 8016e4e:	9a05      	ldr	r2, [sp, #20]
 8016e50:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016fa0 <_strtod_l+0x598>
 8016e54:	2322      	movs	r3, #34	@ 0x22
 8016e56:	6013      	str	r3, [r2, #0]
 8016e58:	f04f 0a00 	mov.w	sl, #0
 8016e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f43f ae0b 	beq.w	8016a7a <_strtod_l+0x72>
 8016e64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016e66:	9805      	ldr	r0, [sp, #20]
 8016e68:	f7ff f946 	bl	80160f8 <_Bfree>
 8016e6c:	9805      	ldr	r0, [sp, #20]
 8016e6e:	4649      	mov	r1, r9
 8016e70:	f7ff f942 	bl	80160f8 <_Bfree>
 8016e74:	9805      	ldr	r0, [sp, #20]
 8016e76:	4641      	mov	r1, r8
 8016e78:	f7ff f93e 	bl	80160f8 <_Bfree>
 8016e7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016e7e:	9805      	ldr	r0, [sp, #20]
 8016e80:	f7ff f93a 	bl	80160f8 <_Bfree>
 8016e84:	9805      	ldr	r0, [sp, #20]
 8016e86:	4621      	mov	r1, r4
 8016e88:	f7ff f936 	bl	80160f8 <_Bfree>
 8016e8c:	e5f5      	b.n	8016a7a <_strtod_l+0x72>
 8016e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016e94:	4293      	cmp	r3, r2
 8016e96:	dbbc      	blt.n	8016e12 <_strtod_l+0x40a>
 8016e98:	4c3f      	ldr	r4, [pc, #252]	@ (8016f98 <_strtod_l+0x590>)
 8016e9a:	f1c5 050f 	rsb	r5, r5, #15
 8016e9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016ea2:	4652      	mov	r2, sl
 8016ea4:	465b      	mov	r3, fp
 8016ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016eaa:	f7e9 fbcd 	bl	8000648 <__aeabi_dmul>
 8016eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016eb0:	1b5d      	subs	r5, r3, r5
 8016eb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016eb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016eba:	e78f      	b.n	8016ddc <_strtod_l+0x3d4>
 8016ebc:	3316      	adds	r3, #22
 8016ebe:	dba8      	blt.n	8016e12 <_strtod_l+0x40a>
 8016ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ec2:	eba3 0808 	sub.w	r8, r3, r8
 8016ec6:	4b34      	ldr	r3, [pc, #208]	@ (8016f98 <_strtod_l+0x590>)
 8016ec8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016ecc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016ed0:	4650      	mov	r0, sl
 8016ed2:	4659      	mov	r1, fp
 8016ed4:	f7e9 fce2 	bl	800089c <__aeabi_ddiv>
 8016ed8:	e782      	b.n	8016de0 <_strtod_l+0x3d8>
 8016eda:	2300      	movs	r3, #0
 8016edc:	4f2f      	ldr	r7, [pc, #188]	@ (8016f9c <_strtod_l+0x594>)
 8016ede:	1124      	asrs	r4, r4, #4
 8016ee0:	4650      	mov	r0, sl
 8016ee2:	4659      	mov	r1, fp
 8016ee4:	461e      	mov	r6, r3
 8016ee6:	2c01      	cmp	r4, #1
 8016ee8:	dc21      	bgt.n	8016f2e <_strtod_l+0x526>
 8016eea:	b10b      	cbz	r3, 8016ef0 <_strtod_l+0x4e8>
 8016eec:	4682      	mov	sl, r0
 8016eee:	468b      	mov	fp, r1
 8016ef0:	492a      	ldr	r1, [pc, #168]	@ (8016f9c <_strtod_l+0x594>)
 8016ef2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016ef6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016efa:	4652      	mov	r2, sl
 8016efc:	465b      	mov	r3, fp
 8016efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f02:	f7e9 fba1 	bl	8000648 <__aeabi_dmul>
 8016f06:	4b26      	ldr	r3, [pc, #152]	@ (8016fa0 <_strtod_l+0x598>)
 8016f08:	460a      	mov	r2, r1
 8016f0a:	400b      	ands	r3, r1
 8016f0c:	4925      	ldr	r1, [pc, #148]	@ (8016fa4 <_strtod_l+0x59c>)
 8016f0e:	428b      	cmp	r3, r1
 8016f10:	4682      	mov	sl, r0
 8016f12:	d898      	bhi.n	8016e46 <_strtod_l+0x43e>
 8016f14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016f18:	428b      	cmp	r3, r1
 8016f1a:	bf86      	itte	hi
 8016f1c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016fa8 <_strtod_l+0x5a0>
 8016f20:	f04f 3aff 	movhi.w	sl, #4294967295
 8016f24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016f28:	2300      	movs	r3, #0
 8016f2a:	9308      	str	r3, [sp, #32]
 8016f2c:	e076      	b.n	801701c <_strtod_l+0x614>
 8016f2e:	07e2      	lsls	r2, r4, #31
 8016f30:	d504      	bpl.n	8016f3c <_strtod_l+0x534>
 8016f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f36:	f7e9 fb87 	bl	8000648 <__aeabi_dmul>
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	3601      	adds	r6, #1
 8016f3e:	1064      	asrs	r4, r4, #1
 8016f40:	3708      	adds	r7, #8
 8016f42:	e7d0      	b.n	8016ee6 <_strtod_l+0x4de>
 8016f44:	d0f0      	beq.n	8016f28 <_strtod_l+0x520>
 8016f46:	4264      	negs	r4, r4
 8016f48:	f014 020f 	ands.w	r2, r4, #15
 8016f4c:	d00a      	beq.n	8016f64 <_strtod_l+0x55c>
 8016f4e:	4b12      	ldr	r3, [pc, #72]	@ (8016f98 <_strtod_l+0x590>)
 8016f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f54:	4650      	mov	r0, sl
 8016f56:	4659      	mov	r1, fp
 8016f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f5c:	f7e9 fc9e 	bl	800089c <__aeabi_ddiv>
 8016f60:	4682      	mov	sl, r0
 8016f62:	468b      	mov	fp, r1
 8016f64:	1124      	asrs	r4, r4, #4
 8016f66:	d0df      	beq.n	8016f28 <_strtod_l+0x520>
 8016f68:	2c1f      	cmp	r4, #31
 8016f6a:	dd1f      	ble.n	8016fac <_strtod_l+0x5a4>
 8016f6c:	2400      	movs	r4, #0
 8016f6e:	46a0      	mov	r8, r4
 8016f70:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016f72:	46a1      	mov	r9, r4
 8016f74:	9a05      	ldr	r2, [sp, #20]
 8016f76:	2322      	movs	r3, #34	@ 0x22
 8016f78:	f04f 0a00 	mov.w	sl, #0
 8016f7c:	f04f 0b00 	mov.w	fp, #0
 8016f80:	6013      	str	r3, [r2, #0]
 8016f82:	e76b      	b.n	8016e5c <_strtod_l+0x454>
 8016f84:	0801b601 	.word	0x0801b601
 8016f88:	0801b8c8 	.word	0x0801b8c8
 8016f8c:	0801b5f9 	.word	0x0801b5f9
 8016f90:	0801b630 	.word	0x0801b630
 8016f94:	0801b769 	.word	0x0801b769
 8016f98:	0801b800 	.word	0x0801b800
 8016f9c:	0801b7d8 	.word	0x0801b7d8
 8016fa0:	7ff00000 	.word	0x7ff00000
 8016fa4:	7ca00000 	.word	0x7ca00000
 8016fa8:	7fefffff 	.word	0x7fefffff
 8016fac:	f014 0310 	ands.w	r3, r4, #16
 8016fb0:	bf18      	it	ne
 8016fb2:	236a      	movne	r3, #106	@ 0x6a
 8016fb4:	4ea9      	ldr	r6, [pc, #676]	@ (801725c <_strtod_l+0x854>)
 8016fb6:	9308      	str	r3, [sp, #32]
 8016fb8:	4650      	mov	r0, sl
 8016fba:	4659      	mov	r1, fp
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	07e7      	lsls	r7, r4, #31
 8016fc0:	d504      	bpl.n	8016fcc <_strtod_l+0x5c4>
 8016fc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016fc6:	f7e9 fb3f 	bl	8000648 <__aeabi_dmul>
 8016fca:	2301      	movs	r3, #1
 8016fcc:	1064      	asrs	r4, r4, #1
 8016fce:	f106 0608 	add.w	r6, r6, #8
 8016fd2:	d1f4      	bne.n	8016fbe <_strtod_l+0x5b6>
 8016fd4:	b10b      	cbz	r3, 8016fda <_strtod_l+0x5d2>
 8016fd6:	4682      	mov	sl, r0
 8016fd8:	468b      	mov	fp, r1
 8016fda:	9b08      	ldr	r3, [sp, #32]
 8016fdc:	b1b3      	cbz	r3, 801700c <_strtod_l+0x604>
 8016fde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016fe2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	4659      	mov	r1, fp
 8016fea:	dd0f      	ble.n	801700c <_strtod_l+0x604>
 8016fec:	2b1f      	cmp	r3, #31
 8016fee:	dd56      	ble.n	801709e <_strtod_l+0x696>
 8016ff0:	2b34      	cmp	r3, #52	@ 0x34
 8016ff2:	bfde      	ittt	le
 8016ff4:	f04f 33ff 	movle.w	r3, #4294967295
 8016ff8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016ffc:	4093      	lslle	r3, r2
 8016ffe:	f04f 0a00 	mov.w	sl, #0
 8017002:	bfcc      	ite	gt
 8017004:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017008:	ea03 0b01 	andle.w	fp, r3, r1
 801700c:	2200      	movs	r2, #0
 801700e:	2300      	movs	r3, #0
 8017010:	4650      	mov	r0, sl
 8017012:	4659      	mov	r1, fp
 8017014:	f7e9 fd80 	bl	8000b18 <__aeabi_dcmpeq>
 8017018:	2800      	cmp	r0, #0
 801701a:	d1a7      	bne.n	8016f6c <_strtod_l+0x564>
 801701c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017022:	9805      	ldr	r0, [sp, #20]
 8017024:	462b      	mov	r3, r5
 8017026:	464a      	mov	r2, r9
 8017028:	f7ff f8ce 	bl	80161c8 <__s2b>
 801702c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801702e:	2800      	cmp	r0, #0
 8017030:	f43f af09 	beq.w	8016e46 <_strtod_l+0x43e>
 8017034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017036:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017038:	2a00      	cmp	r2, #0
 801703a:	eba3 0308 	sub.w	r3, r3, r8
 801703e:	bfa8      	it	ge
 8017040:	2300      	movge	r3, #0
 8017042:	9312      	str	r3, [sp, #72]	@ 0x48
 8017044:	2400      	movs	r4, #0
 8017046:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801704a:	9316      	str	r3, [sp, #88]	@ 0x58
 801704c:	46a0      	mov	r8, r4
 801704e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017050:	9805      	ldr	r0, [sp, #20]
 8017052:	6859      	ldr	r1, [r3, #4]
 8017054:	f7ff f810 	bl	8016078 <_Balloc>
 8017058:	4681      	mov	r9, r0
 801705a:	2800      	cmp	r0, #0
 801705c:	f43f aef7 	beq.w	8016e4e <_strtod_l+0x446>
 8017060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017062:	691a      	ldr	r2, [r3, #16]
 8017064:	3202      	adds	r2, #2
 8017066:	f103 010c 	add.w	r1, r3, #12
 801706a:	0092      	lsls	r2, r2, #2
 801706c:	300c      	adds	r0, #12
 801706e:	f7fe f896 	bl	801519e <memcpy>
 8017072:	ec4b ab10 	vmov	d0, sl, fp
 8017076:	9805      	ldr	r0, [sp, #20]
 8017078:	aa1c      	add	r2, sp, #112	@ 0x70
 801707a:	a91b      	add	r1, sp, #108	@ 0x6c
 801707c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8017080:	f7ff fbd6 	bl	8016830 <__d2b>
 8017084:	901a      	str	r0, [sp, #104]	@ 0x68
 8017086:	2800      	cmp	r0, #0
 8017088:	f43f aee1 	beq.w	8016e4e <_strtod_l+0x446>
 801708c:	9805      	ldr	r0, [sp, #20]
 801708e:	2101      	movs	r1, #1
 8017090:	f7ff f930 	bl	80162f4 <__i2b>
 8017094:	4680      	mov	r8, r0
 8017096:	b948      	cbnz	r0, 80170ac <_strtod_l+0x6a4>
 8017098:	f04f 0800 	mov.w	r8, #0
 801709c:	e6d7      	b.n	8016e4e <_strtod_l+0x446>
 801709e:	f04f 32ff 	mov.w	r2, #4294967295
 80170a2:	fa02 f303 	lsl.w	r3, r2, r3
 80170a6:	ea03 0a0a 	and.w	sl, r3, sl
 80170aa:	e7af      	b.n	801700c <_strtod_l+0x604>
 80170ac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80170ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80170b0:	2d00      	cmp	r5, #0
 80170b2:	bfab      	itete	ge
 80170b4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80170b6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80170b8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80170ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80170bc:	bfac      	ite	ge
 80170be:	18ef      	addge	r7, r5, r3
 80170c0:	1b5e      	sublt	r6, r3, r5
 80170c2:	9b08      	ldr	r3, [sp, #32]
 80170c4:	1aed      	subs	r5, r5, r3
 80170c6:	4415      	add	r5, r2
 80170c8:	4b65      	ldr	r3, [pc, #404]	@ (8017260 <_strtod_l+0x858>)
 80170ca:	3d01      	subs	r5, #1
 80170cc:	429d      	cmp	r5, r3
 80170ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80170d2:	da50      	bge.n	8017176 <_strtod_l+0x76e>
 80170d4:	1b5b      	subs	r3, r3, r5
 80170d6:	2b1f      	cmp	r3, #31
 80170d8:	eba2 0203 	sub.w	r2, r2, r3
 80170dc:	f04f 0101 	mov.w	r1, #1
 80170e0:	dc3d      	bgt.n	801715e <_strtod_l+0x756>
 80170e2:	fa01 f303 	lsl.w	r3, r1, r3
 80170e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80170e8:	2300      	movs	r3, #0
 80170ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80170ec:	18bd      	adds	r5, r7, r2
 80170ee:	9b08      	ldr	r3, [sp, #32]
 80170f0:	42af      	cmp	r7, r5
 80170f2:	4416      	add	r6, r2
 80170f4:	441e      	add	r6, r3
 80170f6:	463b      	mov	r3, r7
 80170f8:	bfa8      	it	ge
 80170fa:	462b      	movge	r3, r5
 80170fc:	42b3      	cmp	r3, r6
 80170fe:	bfa8      	it	ge
 8017100:	4633      	movge	r3, r6
 8017102:	2b00      	cmp	r3, #0
 8017104:	bfc2      	ittt	gt
 8017106:	1aed      	subgt	r5, r5, r3
 8017108:	1af6      	subgt	r6, r6, r3
 801710a:	1aff      	subgt	r7, r7, r3
 801710c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801710e:	2b00      	cmp	r3, #0
 8017110:	dd16      	ble.n	8017140 <_strtod_l+0x738>
 8017112:	4641      	mov	r1, r8
 8017114:	9805      	ldr	r0, [sp, #20]
 8017116:	461a      	mov	r2, r3
 8017118:	f7ff f9a4 	bl	8016464 <__pow5mult>
 801711c:	4680      	mov	r8, r0
 801711e:	2800      	cmp	r0, #0
 8017120:	d0ba      	beq.n	8017098 <_strtod_l+0x690>
 8017122:	4601      	mov	r1, r0
 8017124:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017126:	9805      	ldr	r0, [sp, #20]
 8017128:	f7ff f8fa 	bl	8016320 <__multiply>
 801712c:	900a      	str	r0, [sp, #40]	@ 0x28
 801712e:	2800      	cmp	r0, #0
 8017130:	f43f ae8d 	beq.w	8016e4e <_strtod_l+0x446>
 8017134:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017136:	9805      	ldr	r0, [sp, #20]
 8017138:	f7fe ffde 	bl	80160f8 <_Bfree>
 801713c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801713e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017140:	2d00      	cmp	r5, #0
 8017142:	dc1d      	bgt.n	8017180 <_strtod_l+0x778>
 8017144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017146:	2b00      	cmp	r3, #0
 8017148:	dd23      	ble.n	8017192 <_strtod_l+0x78a>
 801714a:	4649      	mov	r1, r9
 801714c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801714e:	9805      	ldr	r0, [sp, #20]
 8017150:	f7ff f988 	bl	8016464 <__pow5mult>
 8017154:	4681      	mov	r9, r0
 8017156:	b9e0      	cbnz	r0, 8017192 <_strtod_l+0x78a>
 8017158:	f04f 0900 	mov.w	r9, #0
 801715c:	e677      	b.n	8016e4e <_strtod_l+0x446>
 801715e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8017162:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8017166:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801716a:	35e2      	adds	r5, #226	@ 0xe2
 801716c:	fa01 f305 	lsl.w	r3, r1, r5
 8017170:	9310      	str	r3, [sp, #64]	@ 0x40
 8017172:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017174:	e7ba      	b.n	80170ec <_strtod_l+0x6e4>
 8017176:	2300      	movs	r3, #0
 8017178:	9310      	str	r3, [sp, #64]	@ 0x40
 801717a:	2301      	movs	r3, #1
 801717c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801717e:	e7b5      	b.n	80170ec <_strtod_l+0x6e4>
 8017180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017182:	9805      	ldr	r0, [sp, #20]
 8017184:	462a      	mov	r2, r5
 8017186:	f7ff f9c7 	bl	8016518 <__lshift>
 801718a:	901a      	str	r0, [sp, #104]	@ 0x68
 801718c:	2800      	cmp	r0, #0
 801718e:	d1d9      	bne.n	8017144 <_strtod_l+0x73c>
 8017190:	e65d      	b.n	8016e4e <_strtod_l+0x446>
 8017192:	2e00      	cmp	r6, #0
 8017194:	dd07      	ble.n	80171a6 <_strtod_l+0x79e>
 8017196:	4649      	mov	r1, r9
 8017198:	9805      	ldr	r0, [sp, #20]
 801719a:	4632      	mov	r2, r6
 801719c:	f7ff f9bc 	bl	8016518 <__lshift>
 80171a0:	4681      	mov	r9, r0
 80171a2:	2800      	cmp	r0, #0
 80171a4:	d0d8      	beq.n	8017158 <_strtod_l+0x750>
 80171a6:	2f00      	cmp	r7, #0
 80171a8:	dd08      	ble.n	80171bc <_strtod_l+0x7b4>
 80171aa:	4641      	mov	r1, r8
 80171ac:	9805      	ldr	r0, [sp, #20]
 80171ae:	463a      	mov	r2, r7
 80171b0:	f7ff f9b2 	bl	8016518 <__lshift>
 80171b4:	4680      	mov	r8, r0
 80171b6:	2800      	cmp	r0, #0
 80171b8:	f43f ae49 	beq.w	8016e4e <_strtod_l+0x446>
 80171bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80171be:	9805      	ldr	r0, [sp, #20]
 80171c0:	464a      	mov	r2, r9
 80171c2:	f7ff fa31 	bl	8016628 <__mdiff>
 80171c6:	4604      	mov	r4, r0
 80171c8:	2800      	cmp	r0, #0
 80171ca:	f43f ae40 	beq.w	8016e4e <_strtod_l+0x446>
 80171ce:	68c3      	ldr	r3, [r0, #12]
 80171d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80171d2:	2300      	movs	r3, #0
 80171d4:	60c3      	str	r3, [r0, #12]
 80171d6:	4641      	mov	r1, r8
 80171d8:	f7ff fa0a 	bl	80165f0 <__mcmp>
 80171dc:	2800      	cmp	r0, #0
 80171de:	da45      	bge.n	801726c <_strtod_l+0x864>
 80171e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171e2:	ea53 030a 	orrs.w	r3, r3, sl
 80171e6:	d16b      	bne.n	80172c0 <_strtod_l+0x8b8>
 80171e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d167      	bne.n	80172c0 <_strtod_l+0x8b8>
 80171f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80171f4:	0d1b      	lsrs	r3, r3, #20
 80171f6:	051b      	lsls	r3, r3, #20
 80171f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80171fc:	d960      	bls.n	80172c0 <_strtod_l+0x8b8>
 80171fe:	6963      	ldr	r3, [r4, #20]
 8017200:	b913      	cbnz	r3, 8017208 <_strtod_l+0x800>
 8017202:	6923      	ldr	r3, [r4, #16]
 8017204:	2b01      	cmp	r3, #1
 8017206:	dd5b      	ble.n	80172c0 <_strtod_l+0x8b8>
 8017208:	4621      	mov	r1, r4
 801720a:	2201      	movs	r2, #1
 801720c:	9805      	ldr	r0, [sp, #20]
 801720e:	f7ff f983 	bl	8016518 <__lshift>
 8017212:	4641      	mov	r1, r8
 8017214:	4604      	mov	r4, r0
 8017216:	f7ff f9eb 	bl	80165f0 <__mcmp>
 801721a:	2800      	cmp	r0, #0
 801721c:	dd50      	ble.n	80172c0 <_strtod_l+0x8b8>
 801721e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017222:	9a08      	ldr	r2, [sp, #32]
 8017224:	0d1b      	lsrs	r3, r3, #20
 8017226:	051b      	lsls	r3, r3, #20
 8017228:	2a00      	cmp	r2, #0
 801722a:	d06a      	beq.n	8017302 <_strtod_l+0x8fa>
 801722c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017230:	d867      	bhi.n	8017302 <_strtod_l+0x8fa>
 8017232:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017236:	f67f ae9d 	bls.w	8016f74 <_strtod_l+0x56c>
 801723a:	4b0a      	ldr	r3, [pc, #40]	@ (8017264 <_strtod_l+0x85c>)
 801723c:	4650      	mov	r0, sl
 801723e:	4659      	mov	r1, fp
 8017240:	2200      	movs	r2, #0
 8017242:	f7e9 fa01 	bl	8000648 <__aeabi_dmul>
 8017246:	4b08      	ldr	r3, [pc, #32]	@ (8017268 <_strtod_l+0x860>)
 8017248:	400b      	ands	r3, r1
 801724a:	4682      	mov	sl, r0
 801724c:	468b      	mov	fp, r1
 801724e:	2b00      	cmp	r3, #0
 8017250:	f47f ae08 	bne.w	8016e64 <_strtod_l+0x45c>
 8017254:	9a05      	ldr	r2, [sp, #20]
 8017256:	2322      	movs	r3, #34	@ 0x22
 8017258:	6013      	str	r3, [r2, #0]
 801725a:	e603      	b.n	8016e64 <_strtod_l+0x45c>
 801725c:	0801b8f0 	.word	0x0801b8f0
 8017260:	fffffc02 	.word	0xfffffc02
 8017264:	39500000 	.word	0x39500000
 8017268:	7ff00000 	.word	0x7ff00000
 801726c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017270:	d165      	bne.n	801733e <_strtod_l+0x936>
 8017272:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017274:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017278:	b35a      	cbz	r2, 80172d2 <_strtod_l+0x8ca>
 801727a:	4a9f      	ldr	r2, [pc, #636]	@ (80174f8 <_strtod_l+0xaf0>)
 801727c:	4293      	cmp	r3, r2
 801727e:	d12b      	bne.n	80172d8 <_strtod_l+0x8d0>
 8017280:	9b08      	ldr	r3, [sp, #32]
 8017282:	4651      	mov	r1, sl
 8017284:	b303      	cbz	r3, 80172c8 <_strtod_l+0x8c0>
 8017286:	4b9d      	ldr	r3, [pc, #628]	@ (80174fc <_strtod_l+0xaf4>)
 8017288:	465a      	mov	r2, fp
 801728a:	4013      	ands	r3, r2
 801728c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017290:	f04f 32ff 	mov.w	r2, #4294967295
 8017294:	d81b      	bhi.n	80172ce <_strtod_l+0x8c6>
 8017296:	0d1b      	lsrs	r3, r3, #20
 8017298:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801729c:	fa02 f303 	lsl.w	r3, r2, r3
 80172a0:	4299      	cmp	r1, r3
 80172a2:	d119      	bne.n	80172d8 <_strtod_l+0x8d0>
 80172a4:	4b96      	ldr	r3, [pc, #600]	@ (8017500 <_strtod_l+0xaf8>)
 80172a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d102      	bne.n	80172b2 <_strtod_l+0x8aa>
 80172ac:	3101      	adds	r1, #1
 80172ae:	f43f adce 	beq.w	8016e4e <_strtod_l+0x446>
 80172b2:	4b92      	ldr	r3, [pc, #584]	@ (80174fc <_strtod_l+0xaf4>)
 80172b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80172b6:	401a      	ands	r2, r3
 80172b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80172bc:	f04f 0a00 	mov.w	sl, #0
 80172c0:	9b08      	ldr	r3, [sp, #32]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d1b9      	bne.n	801723a <_strtod_l+0x832>
 80172c6:	e5cd      	b.n	8016e64 <_strtod_l+0x45c>
 80172c8:	f04f 33ff 	mov.w	r3, #4294967295
 80172cc:	e7e8      	b.n	80172a0 <_strtod_l+0x898>
 80172ce:	4613      	mov	r3, r2
 80172d0:	e7e6      	b.n	80172a0 <_strtod_l+0x898>
 80172d2:	ea53 030a 	orrs.w	r3, r3, sl
 80172d6:	d0a2      	beq.n	801721e <_strtod_l+0x816>
 80172d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80172da:	b1db      	cbz	r3, 8017314 <_strtod_l+0x90c>
 80172dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80172de:	4213      	tst	r3, r2
 80172e0:	d0ee      	beq.n	80172c0 <_strtod_l+0x8b8>
 80172e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80172e4:	9a08      	ldr	r2, [sp, #32]
 80172e6:	4650      	mov	r0, sl
 80172e8:	4659      	mov	r1, fp
 80172ea:	b1bb      	cbz	r3, 801731c <_strtod_l+0x914>
 80172ec:	f7ff fb6e 	bl	80169cc <sulp>
 80172f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80172f4:	ec53 2b10 	vmov	r2, r3, d0
 80172f8:	f7e8 fff0 	bl	80002dc <__adddf3>
 80172fc:	4682      	mov	sl, r0
 80172fe:	468b      	mov	fp, r1
 8017300:	e7de      	b.n	80172c0 <_strtod_l+0x8b8>
 8017302:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017306:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801730a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801730e:	f04f 3aff 	mov.w	sl, #4294967295
 8017312:	e7d5      	b.n	80172c0 <_strtod_l+0x8b8>
 8017314:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017316:	ea13 0f0a 	tst.w	r3, sl
 801731a:	e7e1      	b.n	80172e0 <_strtod_l+0x8d8>
 801731c:	f7ff fb56 	bl	80169cc <sulp>
 8017320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017324:	ec53 2b10 	vmov	r2, r3, d0
 8017328:	f7e8 ffd6 	bl	80002d8 <__aeabi_dsub>
 801732c:	2200      	movs	r2, #0
 801732e:	2300      	movs	r3, #0
 8017330:	4682      	mov	sl, r0
 8017332:	468b      	mov	fp, r1
 8017334:	f7e9 fbf0 	bl	8000b18 <__aeabi_dcmpeq>
 8017338:	2800      	cmp	r0, #0
 801733a:	d0c1      	beq.n	80172c0 <_strtod_l+0x8b8>
 801733c:	e61a      	b.n	8016f74 <_strtod_l+0x56c>
 801733e:	4641      	mov	r1, r8
 8017340:	4620      	mov	r0, r4
 8017342:	f7ff facd 	bl	80168e0 <__ratio>
 8017346:	ec57 6b10 	vmov	r6, r7, d0
 801734a:	2200      	movs	r2, #0
 801734c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017350:	4630      	mov	r0, r6
 8017352:	4639      	mov	r1, r7
 8017354:	f7e9 fbf4 	bl	8000b40 <__aeabi_dcmple>
 8017358:	2800      	cmp	r0, #0
 801735a:	d06f      	beq.n	801743c <_strtod_l+0xa34>
 801735c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801735e:	2b00      	cmp	r3, #0
 8017360:	d17a      	bne.n	8017458 <_strtod_l+0xa50>
 8017362:	f1ba 0f00 	cmp.w	sl, #0
 8017366:	d158      	bne.n	801741a <_strtod_l+0xa12>
 8017368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801736a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801736e:	2b00      	cmp	r3, #0
 8017370:	d15a      	bne.n	8017428 <_strtod_l+0xa20>
 8017372:	4b64      	ldr	r3, [pc, #400]	@ (8017504 <_strtod_l+0xafc>)
 8017374:	2200      	movs	r2, #0
 8017376:	4630      	mov	r0, r6
 8017378:	4639      	mov	r1, r7
 801737a:	f7e9 fbd7 	bl	8000b2c <__aeabi_dcmplt>
 801737e:	2800      	cmp	r0, #0
 8017380:	d159      	bne.n	8017436 <_strtod_l+0xa2e>
 8017382:	4630      	mov	r0, r6
 8017384:	4639      	mov	r1, r7
 8017386:	4b60      	ldr	r3, [pc, #384]	@ (8017508 <_strtod_l+0xb00>)
 8017388:	2200      	movs	r2, #0
 801738a:	f7e9 f95d 	bl	8000648 <__aeabi_dmul>
 801738e:	4606      	mov	r6, r0
 8017390:	460f      	mov	r7, r1
 8017392:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017396:	9606      	str	r6, [sp, #24]
 8017398:	9307      	str	r3, [sp, #28]
 801739a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801739e:	4d57      	ldr	r5, [pc, #348]	@ (80174fc <_strtod_l+0xaf4>)
 80173a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80173a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80173a6:	401d      	ands	r5, r3
 80173a8:	4b58      	ldr	r3, [pc, #352]	@ (801750c <_strtod_l+0xb04>)
 80173aa:	429d      	cmp	r5, r3
 80173ac:	f040 80b2 	bne.w	8017514 <_strtod_l+0xb0c>
 80173b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80173b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80173b6:	ec4b ab10 	vmov	d0, sl, fp
 80173ba:	f7ff f9c9 	bl	8016750 <__ulp>
 80173be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80173c2:	ec51 0b10 	vmov	r0, r1, d0
 80173c6:	f7e9 f93f 	bl	8000648 <__aeabi_dmul>
 80173ca:	4652      	mov	r2, sl
 80173cc:	465b      	mov	r3, fp
 80173ce:	f7e8 ff85 	bl	80002dc <__adddf3>
 80173d2:	460b      	mov	r3, r1
 80173d4:	4949      	ldr	r1, [pc, #292]	@ (80174fc <_strtod_l+0xaf4>)
 80173d6:	4a4e      	ldr	r2, [pc, #312]	@ (8017510 <_strtod_l+0xb08>)
 80173d8:	4019      	ands	r1, r3
 80173da:	4291      	cmp	r1, r2
 80173dc:	4682      	mov	sl, r0
 80173de:	d942      	bls.n	8017466 <_strtod_l+0xa5e>
 80173e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80173e2:	4b47      	ldr	r3, [pc, #284]	@ (8017500 <_strtod_l+0xaf8>)
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d103      	bne.n	80173f0 <_strtod_l+0x9e8>
 80173e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173ea:	3301      	adds	r3, #1
 80173ec:	f43f ad2f 	beq.w	8016e4e <_strtod_l+0x446>
 80173f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017500 <_strtod_l+0xaf8>
 80173f4:	f04f 3aff 	mov.w	sl, #4294967295
 80173f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80173fa:	9805      	ldr	r0, [sp, #20]
 80173fc:	f7fe fe7c 	bl	80160f8 <_Bfree>
 8017400:	9805      	ldr	r0, [sp, #20]
 8017402:	4649      	mov	r1, r9
 8017404:	f7fe fe78 	bl	80160f8 <_Bfree>
 8017408:	9805      	ldr	r0, [sp, #20]
 801740a:	4641      	mov	r1, r8
 801740c:	f7fe fe74 	bl	80160f8 <_Bfree>
 8017410:	9805      	ldr	r0, [sp, #20]
 8017412:	4621      	mov	r1, r4
 8017414:	f7fe fe70 	bl	80160f8 <_Bfree>
 8017418:	e619      	b.n	801704e <_strtod_l+0x646>
 801741a:	f1ba 0f01 	cmp.w	sl, #1
 801741e:	d103      	bne.n	8017428 <_strtod_l+0xa20>
 8017420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017422:	2b00      	cmp	r3, #0
 8017424:	f43f ada6 	beq.w	8016f74 <_strtod_l+0x56c>
 8017428:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80174d8 <_strtod_l+0xad0>
 801742c:	4f35      	ldr	r7, [pc, #212]	@ (8017504 <_strtod_l+0xafc>)
 801742e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017432:	2600      	movs	r6, #0
 8017434:	e7b1      	b.n	801739a <_strtod_l+0x992>
 8017436:	4f34      	ldr	r7, [pc, #208]	@ (8017508 <_strtod_l+0xb00>)
 8017438:	2600      	movs	r6, #0
 801743a:	e7aa      	b.n	8017392 <_strtod_l+0x98a>
 801743c:	4b32      	ldr	r3, [pc, #200]	@ (8017508 <_strtod_l+0xb00>)
 801743e:	4630      	mov	r0, r6
 8017440:	4639      	mov	r1, r7
 8017442:	2200      	movs	r2, #0
 8017444:	f7e9 f900 	bl	8000648 <__aeabi_dmul>
 8017448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801744a:	4606      	mov	r6, r0
 801744c:	460f      	mov	r7, r1
 801744e:	2b00      	cmp	r3, #0
 8017450:	d09f      	beq.n	8017392 <_strtod_l+0x98a>
 8017452:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017456:	e7a0      	b.n	801739a <_strtod_l+0x992>
 8017458:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80174e0 <_strtod_l+0xad8>
 801745c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017460:	ec57 6b17 	vmov	r6, r7, d7
 8017464:	e799      	b.n	801739a <_strtod_l+0x992>
 8017466:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801746a:	9b08      	ldr	r3, [sp, #32]
 801746c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017470:	2b00      	cmp	r3, #0
 8017472:	d1c1      	bne.n	80173f8 <_strtod_l+0x9f0>
 8017474:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017478:	0d1b      	lsrs	r3, r3, #20
 801747a:	051b      	lsls	r3, r3, #20
 801747c:	429d      	cmp	r5, r3
 801747e:	d1bb      	bne.n	80173f8 <_strtod_l+0x9f0>
 8017480:	4630      	mov	r0, r6
 8017482:	4639      	mov	r1, r7
 8017484:	f7e9 fc40 	bl	8000d08 <__aeabi_d2lz>
 8017488:	f7e9 f8b0 	bl	80005ec <__aeabi_l2d>
 801748c:	4602      	mov	r2, r0
 801748e:	460b      	mov	r3, r1
 8017490:	4630      	mov	r0, r6
 8017492:	4639      	mov	r1, r7
 8017494:	f7e8 ff20 	bl	80002d8 <__aeabi_dsub>
 8017498:	460b      	mov	r3, r1
 801749a:	4602      	mov	r2, r0
 801749c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80174a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80174a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174a6:	ea46 060a 	orr.w	r6, r6, sl
 80174aa:	431e      	orrs	r6, r3
 80174ac:	d06f      	beq.n	801758e <_strtod_l+0xb86>
 80174ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80174e8 <_strtod_l+0xae0>)
 80174b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174b4:	f7e9 fb3a 	bl	8000b2c <__aeabi_dcmplt>
 80174b8:	2800      	cmp	r0, #0
 80174ba:	f47f acd3 	bne.w	8016e64 <_strtod_l+0x45c>
 80174be:	a30c      	add	r3, pc, #48	@ (adr r3, 80174f0 <_strtod_l+0xae8>)
 80174c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80174c8:	f7e9 fb4e 	bl	8000b68 <__aeabi_dcmpgt>
 80174cc:	2800      	cmp	r0, #0
 80174ce:	d093      	beq.n	80173f8 <_strtod_l+0x9f0>
 80174d0:	e4c8      	b.n	8016e64 <_strtod_l+0x45c>
 80174d2:	bf00      	nop
 80174d4:	f3af 8000 	nop.w
 80174d8:	00000000 	.word	0x00000000
 80174dc:	bff00000 	.word	0xbff00000
 80174e0:	00000000 	.word	0x00000000
 80174e4:	3ff00000 	.word	0x3ff00000
 80174e8:	94a03595 	.word	0x94a03595
 80174ec:	3fdfffff 	.word	0x3fdfffff
 80174f0:	35afe535 	.word	0x35afe535
 80174f4:	3fe00000 	.word	0x3fe00000
 80174f8:	000fffff 	.word	0x000fffff
 80174fc:	7ff00000 	.word	0x7ff00000
 8017500:	7fefffff 	.word	0x7fefffff
 8017504:	3ff00000 	.word	0x3ff00000
 8017508:	3fe00000 	.word	0x3fe00000
 801750c:	7fe00000 	.word	0x7fe00000
 8017510:	7c9fffff 	.word	0x7c9fffff
 8017514:	9b08      	ldr	r3, [sp, #32]
 8017516:	b323      	cbz	r3, 8017562 <_strtod_l+0xb5a>
 8017518:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801751c:	d821      	bhi.n	8017562 <_strtod_l+0xb5a>
 801751e:	a328      	add	r3, pc, #160	@ (adr r3, 80175c0 <_strtod_l+0xbb8>)
 8017520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017524:	4630      	mov	r0, r6
 8017526:	4639      	mov	r1, r7
 8017528:	f7e9 fb0a 	bl	8000b40 <__aeabi_dcmple>
 801752c:	b1a0      	cbz	r0, 8017558 <_strtod_l+0xb50>
 801752e:	4639      	mov	r1, r7
 8017530:	4630      	mov	r0, r6
 8017532:	f7e9 fb61 	bl	8000bf8 <__aeabi_d2uiz>
 8017536:	2801      	cmp	r0, #1
 8017538:	bf38      	it	cc
 801753a:	2001      	movcc	r0, #1
 801753c:	f7e9 f80a 	bl	8000554 <__aeabi_ui2d>
 8017540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017542:	4606      	mov	r6, r0
 8017544:	460f      	mov	r7, r1
 8017546:	b9fb      	cbnz	r3, 8017588 <_strtod_l+0xb80>
 8017548:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801754c:	9014      	str	r0, [sp, #80]	@ 0x50
 801754e:	9315      	str	r3, [sp, #84]	@ 0x54
 8017550:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8017554:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017558:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801755a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801755e:	1b5b      	subs	r3, r3, r5
 8017560:	9311      	str	r3, [sp, #68]	@ 0x44
 8017562:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017566:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801756a:	f7ff f8f1 	bl	8016750 <__ulp>
 801756e:	4650      	mov	r0, sl
 8017570:	ec53 2b10 	vmov	r2, r3, d0
 8017574:	4659      	mov	r1, fp
 8017576:	f7e9 f867 	bl	8000648 <__aeabi_dmul>
 801757a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801757e:	f7e8 fead 	bl	80002dc <__adddf3>
 8017582:	4682      	mov	sl, r0
 8017584:	468b      	mov	fp, r1
 8017586:	e770      	b.n	801746a <_strtod_l+0xa62>
 8017588:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801758c:	e7e0      	b.n	8017550 <_strtod_l+0xb48>
 801758e:	a30e      	add	r3, pc, #56	@ (adr r3, 80175c8 <_strtod_l+0xbc0>)
 8017590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017594:	f7e9 faca 	bl	8000b2c <__aeabi_dcmplt>
 8017598:	e798      	b.n	80174cc <_strtod_l+0xac4>
 801759a:	2300      	movs	r3, #0
 801759c:	930e      	str	r3, [sp, #56]	@ 0x38
 801759e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80175a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80175a2:	6013      	str	r3, [r2, #0]
 80175a4:	f7ff ba6d 	b.w	8016a82 <_strtod_l+0x7a>
 80175a8:	2a65      	cmp	r2, #101	@ 0x65
 80175aa:	f43f ab68 	beq.w	8016c7e <_strtod_l+0x276>
 80175ae:	2a45      	cmp	r2, #69	@ 0x45
 80175b0:	f43f ab65 	beq.w	8016c7e <_strtod_l+0x276>
 80175b4:	2301      	movs	r3, #1
 80175b6:	f7ff bba0 	b.w	8016cfa <_strtod_l+0x2f2>
 80175ba:	bf00      	nop
 80175bc:	f3af 8000 	nop.w
 80175c0:	ffc00000 	.word	0xffc00000
 80175c4:	41dfffff 	.word	0x41dfffff
 80175c8:	94a03595 	.word	0x94a03595
 80175cc:	3fcfffff 	.word	0x3fcfffff

080175d0 <_strtod_r>:
 80175d0:	4b01      	ldr	r3, [pc, #4]	@ (80175d8 <_strtod_r+0x8>)
 80175d2:	f7ff ba19 	b.w	8016a08 <_strtod_l>
 80175d6:	bf00      	nop
 80175d8:	200000ac 	.word	0x200000ac

080175dc <_strtol_l.isra.0>:
 80175dc:	2b24      	cmp	r3, #36	@ 0x24
 80175de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175e2:	4686      	mov	lr, r0
 80175e4:	4690      	mov	r8, r2
 80175e6:	d801      	bhi.n	80175ec <_strtol_l.isra.0+0x10>
 80175e8:	2b01      	cmp	r3, #1
 80175ea:	d106      	bne.n	80175fa <_strtol_l.isra.0+0x1e>
 80175ec:	f7fd fdaa 	bl	8015144 <__errno>
 80175f0:	2316      	movs	r3, #22
 80175f2:	6003      	str	r3, [r0, #0]
 80175f4:	2000      	movs	r0, #0
 80175f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175fa:	4834      	ldr	r0, [pc, #208]	@ (80176cc <_strtol_l.isra.0+0xf0>)
 80175fc:	460d      	mov	r5, r1
 80175fe:	462a      	mov	r2, r5
 8017600:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017604:	5d06      	ldrb	r6, [r0, r4]
 8017606:	f016 0608 	ands.w	r6, r6, #8
 801760a:	d1f8      	bne.n	80175fe <_strtol_l.isra.0+0x22>
 801760c:	2c2d      	cmp	r4, #45	@ 0x2d
 801760e:	d110      	bne.n	8017632 <_strtol_l.isra.0+0x56>
 8017610:	782c      	ldrb	r4, [r5, #0]
 8017612:	2601      	movs	r6, #1
 8017614:	1c95      	adds	r5, r2, #2
 8017616:	f033 0210 	bics.w	r2, r3, #16
 801761a:	d115      	bne.n	8017648 <_strtol_l.isra.0+0x6c>
 801761c:	2c30      	cmp	r4, #48	@ 0x30
 801761e:	d10d      	bne.n	801763c <_strtol_l.isra.0+0x60>
 8017620:	782a      	ldrb	r2, [r5, #0]
 8017622:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017626:	2a58      	cmp	r2, #88	@ 0x58
 8017628:	d108      	bne.n	801763c <_strtol_l.isra.0+0x60>
 801762a:	786c      	ldrb	r4, [r5, #1]
 801762c:	3502      	adds	r5, #2
 801762e:	2310      	movs	r3, #16
 8017630:	e00a      	b.n	8017648 <_strtol_l.isra.0+0x6c>
 8017632:	2c2b      	cmp	r4, #43	@ 0x2b
 8017634:	bf04      	itt	eq
 8017636:	782c      	ldrbeq	r4, [r5, #0]
 8017638:	1c95      	addeq	r5, r2, #2
 801763a:	e7ec      	b.n	8017616 <_strtol_l.isra.0+0x3a>
 801763c:	2b00      	cmp	r3, #0
 801763e:	d1f6      	bne.n	801762e <_strtol_l.isra.0+0x52>
 8017640:	2c30      	cmp	r4, #48	@ 0x30
 8017642:	bf14      	ite	ne
 8017644:	230a      	movne	r3, #10
 8017646:	2308      	moveq	r3, #8
 8017648:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801764c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017650:	2200      	movs	r2, #0
 8017652:	fbbc f9f3 	udiv	r9, ip, r3
 8017656:	4610      	mov	r0, r2
 8017658:	fb03 ca19 	mls	sl, r3, r9, ip
 801765c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017660:	2f09      	cmp	r7, #9
 8017662:	d80f      	bhi.n	8017684 <_strtol_l.isra.0+0xa8>
 8017664:	463c      	mov	r4, r7
 8017666:	42a3      	cmp	r3, r4
 8017668:	dd1b      	ble.n	80176a2 <_strtol_l.isra.0+0xc6>
 801766a:	1c57      	adds	r7, r2, #1
 801766c:	d007      	beq.n	801767e <_strtol_l.isra.0+0xa2>
 801766e:	4581      	cmp	r9, r0
 8017670:	d314      	bcc.n	801769c <_strtol_l.isra.0+0xc0>
 8017672:	d101      	bne.n	8017678 <_strtol_l.isra.0+0x9c>
 8017674:	45a2      	cmp	sl, r4
 8017676:	db11      	blt.n	801769c <_strtol_l.isra.0+0xc0>
 8017678:	fb00 4003 	mla	r0, r0, r3, r4
 801767c:	2201      	movs	r2, #1
 801767e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017682:	e7eb      	b.n	801765c <_strtol_l.isra.0+0x80>
 8017684:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017688:	2f19      	cmp	r7, #25
 801768a:	d801      	bhi.n	8017690 <_strtol_l.isra.0+0xb4>
 801768c:	3c37      	subs	r4, #55	@ 0x37
 801768e:	e7ea      	b.n	8017666 <_strtol_l.isra.0+0x8a>
 8017690:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017694:	2f19      	cmp	r7, #25
 8017696:	d804      	bhi.n	80176a2 <_strtol_l.isra.0+0xc6>
 8017698:	3c57      	subs	r4, #87	@ 0x57
 801769a:	e7e4      	b.n	8017666 <_strtol_l.isra.0+0x8a>
 801769c:	f04f 32ff 	mov.w	r2, #4294967295
 80176a0:	e7ed      	b.n	801767e <_strtol_l.isra.0+0xa2>
 80176a2:	1c53      	adds	r3, r2, #1
 80176a4:	d108      	bne.n	80176b8 <_strtol_l.isra.0+0xdc>
 80176a6:	2322      	movs	r3, #34	@ 0x22
 80176a8:	f8ce 3000 	str.w	r3, [lr]
 80176ac:	4660      	mov	r0, ip
 80176ae:	f1b8 0f00 	cmp.w	r8, #0
 80176b2:	d0a0      	beq.n	80175f6 <_strtol_l.isra.0+0x1a>
 80176b4:	1e69      	subs	r1, r5, #1
 80176b6:	e006      	b.n	80176c6 <_strtol_l.isra.0+0xea>
 80176b8:	b106      	cbz	r6, 80176bc <_strtol_l.isra.0+0xe0>
 80176ba:	4240      	negs	r0, r0
 80176bc:	f1b8 0f00 	cmp.w	r8, #0
 80176c0:	d099      	beq.n	80175f6 <_strtol_l.isra.0+0x1a>
 80176c2:	2a00      	cmp	r2, #0
 80176c4:	d1f6      	bne.n	80176b4 <_strtol_l.isra.0+0xd8>
 80176c6:	f8c8 1000 	str.w	r1, [r8]
 80176ca:	e794      	b.n	80175f6 <_strtol_l.isra.0+0x1a>
 80176cc:	0801b919 	.word	0x0801b919

080176d0 <_strtol_r>:
 80176d0:	f7ff bf84 	b.w	80175dc <_strtol_l.isra.0>

080176d4 <__ssputs_r>:
 80176d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176d8:	688e      	ldr	r6, [r1, #8]
 80176da:	461f      	mov	r7, r3
 80176dc:	42be      	cmp	r6, r7
 80176de:	680b      	ldr	r3, [r1, #0]
 80176e0:	4682      	mov	sl, r0
 80176e2:	460c      	mov	r4, r1
 80176e4:	4690      	mov	r8, r2
 80176e6:	d82d      	bhi.n	8017744 <__ssputs_r+0x70>
 80176e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80176ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80176f0:	d026      	beq.n	8017740 <__ssputs_r+0x6c>
 80176f2:	6965      	ldr	r5, [r4, #20]
 80176f4:	6909      	ldr	r1, [r1, #16]
 80176f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176fa:	eba3 0901 	sub.w	r9, r3, r1
 80176fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017702:	1c7b      	adds	r3, r7, #1
 8017704:	444b      	add	r3, r9
 8017706:	106d      	asrs	r5, r5, #1
 8017708:	429d      	cmp	r5, r3
 801770a:	bf38      	it	cc
 801770c:	461d      	movcc	r5, r3
 801770e:	0553      	lsls	r3, r2, #21
 8017710:	d527      	bpl.n	8017762 <__ssputs_r+0x8e>
 8017712:	4629      	mov	r1, r5
 8017714:	f7fe fc24 	bl	8015f60 <_malloc_r>
 8017718:	4606      	mov	r6, r0
 801771a:	b360      	cbz	r0, 8017776 <__ssputs_r+0xa2>
 801771c:	6921      	ldr	r1, [r4, #16]
 801771e:	464a      	mov	r2, r9
 8017720:	f7fd fd3d 	bl	801519e <memcpy>
 8017724:	89a3      	ldrh	r3, [r4, #12]
 8017726:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801772a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801772e:	81a3      	strh	r3, [r4, #12]
 8017730:	6126      	str	r6, [r4, #16]
 8017732:	6165      	str	r5, [r4, #20]
 8017734:	444e      	add	r6, r9
 8017736:	eba5 0509 	sub.w	r5, r5, r9
 801773a:	6026      	str	r6, [r4, #0]
 801773c:	60a5      	str	r5, [r4, #8]
 801773e:	463e      	mov	r6, r7
 8017740:	42be      	cmp	r6, r7
 8017742:	d900      	bls.n	8017746 <__ssputs_r+0x72>
 8017744:	463e      	mov	r6, r7
 8017746:	6820      	ldr	r0, [r4, #0]
 8017748:	4632      	mov	r2, r6
 801774a:	4641      	mov	r1, r8
 801774c:	f000 fa28 	bl	8017ba0 <memmove>
 8017750:	68a3      	ldr	r3, [r4, #8]
 8017752:	1b9b      	subs	r3, r3, r6
 8017754:	60a3      	str	r3, [r4, #8]
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	4433      	add	r3, r6
 801775a:	6023      	str	r3, [r4, #0]
 801775c:	2000      	movs	r0, #0
 801775e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017762:	462a      	mov	r2, r5
 8017764:	f000 fe01 	bl	801836a <_realloc_r>
 8017768:	4606      	mov	r6, r0
 801776a:	2800      	cmp	r0, #0
 801776c:	d1e0      	bne.n	8017730 <__ssputs_r+0x5c>
 801776e:	6921      	ldr	r1, [r4, #16]
 8017770:	4650      	mov	r0, sl
 8017772:	f7fe fb81 	bl	8015e78 <_free_r>
 8017776:	230c      	movs	r3, #12
 8017778:	f8ca 3000 	str.w	r3, [sl]
 801777c:	89a3      	ldrh	r3, [r4, #12]
 801777e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017782:	81a3      	strh	r3, [r4, #12]
 8017784:	f04f 30ff 	mov.w	r0, #4294967295
 8017788:	e7e9      	b.n	801775e <__ssputs_r+0x8a>
	...

0801778c <_svfiprintf_r>:
 801778c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017790:	4698      	mov	r8, r3
 8017792:	898b      	ldrh	r3, [r1, #12]
 8017794:	061b      	lsls	r3, r3, #24
 8017796:	b09d      	sub	sp, #116	@ 0x74
 8017798:	4607      	mov	r7, r0
 801779a:	460d      	mov	r5, r1
 801779c:	4614      	mov	r4, r2
 801779e:	d510      	bpl.n	80177c2 <_svfiprintf_r+0x36>
 80177a0:	690b      	ldr	r3, [r1, #16]
 80177a2:	b973      	cbnz	r3, 80177c2 <_svfiprintf_r+0x36>
 80177a4:	2140      	movs	r1, #64	@ 0x40
 80177a6:	f7fe fbdb 	bl	8015f60 <_malloc_r>
 80177aa:	6028      	str	r0, [r5, #0]
 80177ac:	6128      	str	r0, [r5, #16]
 80177ae:	b930      	cbnz	r0, 80177be <_svfiprintf_r+0x32>
 80177b0:	230c      	movs	r3, #12
 80177b2:	603b      	str	r3, [r7, #0]
 80177b4:	f04f 30ff 	mov.w	r0, #4294967295
 80177b8:	b01d      	add	sp, #116	@ 0x74
 80177ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177be:	2340      	movs	r3, #64	@ 0x40
 80177c0:	616b      	str	r3, [r5, #20]
 80177c2:	2300      	movs	r3, #0
 80177c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80177c6:	2320      	movs	r3, #32
 80177c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80177cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80177d0:	2330      	movs	r3, #48	@ 0x30
 80177d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017970 <_svfiprintf_r+0x1e4>
 80177d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80177da:	f04f 0901 	mov.w	r9, #1
 80177de:	4623      	mov	r3, r4
 80177e0:	469a      	mov	sl, r3
 80177e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177e6:	b10a      	cbz	r2, 80177ec <_svfiprintf_r+0x60>
 80177e8:	2a25      	cmp	r2, #37	@ 0x25
 80177ea:	d1f9      	bne.n	80177e0 <_svfiprintf_r+0x54>
 80177ec:	ebba 0b04 	subs.w	fp, sl, r4
 80177f0:	d00b      	beq.n	801780a <_svfiprintf_r+0x7e>
 80177f2:	465b      	mov	r3, fp
 80177f4:	4622      	mov	r2, r4
 80177f6:	4629      	mov	r1, r5
 80177f8:	4638      	mov	r0, r7
 80177fa:	f7ff ff6b 	bl	80176d4 <__ssputs_r>
 80177fe:	3001      	adds	r0, #1
 8017800:	f000 80a7 	beq.w	8017952 <_svfiprintf_r+0x1c6>
 8017804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017806:	445a      	add	r2, fp
 8017808:	9209      	str	r2, [sp, #36]	@ 0x24
 801780a:	f89a 3000 	ldrb.w	r3, [sl]
 801780e:	2b00      	cmp	r3, #0
 8017810:	f000 809f 	beq.w	8017952 <_svfiprintf_r+0x1c6>
 8017814:	2300      	movs	r3, #0
 8017816:	f04f 32ff 	mov.w	r2, #4294967295
 801781a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801781e:	f10a 0a01 	add.w	sl, sl, #1
 8017822:	9304      	str	r3, [sp, #16]
 8017824:	9307      	str	r3, [sp, #28]
 8017826:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801782a:	931a      	str	r3, [sp, #104]	@ 0x68
 801782c:	4654      	mov	r4, sl
 801782e:	2205      	movs	r2, #5
 8017830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017834:	484e      	ldr	r0, [pc, #312]	@ (8017970 <_svfiprintf_r+0x1e4>)
 8017836:	f7e8 fcf3 	bl	8000220 <memchr>
 801783a:	9a04      	ldr	r2, [sp, #16]
 801783c:	b9d8      	cbnz	r0, 8017876 <_svfiprintf_r+0xea>
 801783e:	06d0      	lsls	r0, r2, #27
 8017840:	bf44      	itt	mi
 8017842:	2320      	movmi	r3, #32
 8017844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017848:	0711      	lsls	r1, r2, #28
 801784a:	bf44      	itt	mi
 801784c:	232b      	movmi	r3, #43	@ 0x2b
 801784e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017852:	f89a 3000 	ldrb.w	r3, [sl]
 8017856:	2b2a      	cmp	r3, #42	@ 0x2a
 8017858:	d015      	beq.n	8017886 <_svfiprintf_r+0xfa>
 801785a:	9a07      	ldr	r2, [sp, #28]
 801785c:	4654      	mov	r4, sl
 801785e:	2000      	movs	r0, #0
 8017860:	f04f 0c0a 	mov.w	ip, #10
 8017864:	4621      	mov	r1, r4
 8017866:	f811 3b01 	ldrb.w	r3, [r1], #1
 801786a:	3b30      	subs	r3, #48	@ 0x30
 801786c:	2b09      	cmp	r3, #9
 801786e:	d94b      	bls.n	8017908 <_svfiprintf_r+0x17c>
 8017870:	b1b0      	cbz	r0, 80178a0 <_svfiprintf_r+0x114>
 8017872:	9207      	str	r2, [sp, #28]
 8017874:	e014      	b.n	80178a0 <_svfiprintf_r+0x114>
 8017876:	eba0 0308 	sub.w	r3, r0, r8
 801787a:	fa09 f303 	lsl.w	r3, r9, r3
 801787e:	4313      	orrs	r3, r2
 8017880:	9304      	str	r3, [sp, #16]
 8017882:	46a2      	mov	sl, r4
 8017884:	e7d2      	b.n	801782c <_svfiprintf_r+0xa0>
 8017886:	9b03      	ldr	r3, [sp, #12]
 8017888:	1d19      	adds	r1, r3, #4
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	9103      	str	r1, [sp, #12]
 801788e:	2b00      	cmp	r3, #0
 8017890:	bfbb      	ittet	lt
 8017892:	425b      	neglt	r3, r3
 8017894:	f042 0202 	orrlt.w	r2, r2, #2
 8017898:	9307      	strge	r3, [sp, #28]
 801789a:	9307      	strlt	r3, [sp, #28]
 801789c:	bfb8      	it	lt
 801789e:	9204      	strlt	r2, [sp, #16]
 80178a0:	7823      	ldrb	r3, [r4, #0]
 80178a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80178a4:	d10a      	bne.n	80178bc <_svfiprintf_r+0x130>
 80178a6:	7863      	ldrb	r3, [r4, #1]
 80178a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80178aa:	d132      	bne.n	8017912 <_svfiprintf_r+0x186>
 80178ac:	9b03      	ldr	r3, [sp, #12]
 80178ae:	1d1a      	adds	r2, r3, #4
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	9203      	str	r2, [sp, #12]
 80178b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80178b8:	3402      	adds	r4, #2
 80178ba:	9305      	str	r3, [sp, #20]
 80178bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017980 <_svfiprintf_r+0x1f4>
 80178c0:	7821      	ldrb	r1, [r4, #0]
 80178c2:	2203      	movs	r2, #3
 80178c4:	4650      	mov	r0, sl
 80178c6:	f7e8 fcab 	bl	8000220 <memchr>
 80178ca:	b138      	cbz	r0, 80178dc <_svfiprintf_r+0x150>
 80178cc:	9b04      	ldr	r3, [sp, #16]
 80178ce:	eba0 000a 	sub.w	r0, r0, sl
 80178d2:	2240      	movs	r2, #64	@ 0x40
 80178d4:	4082      	lsls	r2, r0
 80178d6:	4313      	orrs	r3, r2
 80178d8:	3401      	adds	r4, #1
 80178da:	9304      	str	r3, [sp, #16]
 80178dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178e0:	4824      	ldr	r0, [pc, #144]	@ (8017974 <_svfiprintf_r+0x1e8>)
 80178e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80178e6:	2206      	movs	r2, #6
 80178e8:	f7e8 fc9a 	bl	8000220 <memchr>
 80178ec:	2800      	cmp	r0, #0
 80178ee:	d036      	beq.n	801795e <_svfiprintf_r+0x1d2>
 80178f0:	4b21      	ldr	r3, [pc, #132]	@ (8017978 <_svfiprintf_r+0x1ec>)
 80178f2:	bb1b      	cbnz	r3, 801793c <_svfiprintf_r+0x1b0>
 80178f4:	9b03      	ldr	r3, [sp, #12]
 80178f6:	3307      	adds	r3, #7
 80178f8:	f023 0307 	bic.w	r3, r3, #7
 80178fc:	3308      	adds	r3, #8
 80178fe:	9303      	str	r3, [sp, #12]
 8017900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017902:	4433      	add	r3, r6
 8017904:	9309      	str	r3, [sp, #36]	@ 0x24
 8017906:	e76a      	b.n	80177de <_svfiprintf_r+0x52>
 8017908:	fb0c 3202 	mla	r2, ip, r2, r3
 801790c:	460c      	mov	r4, r1
 801790e:	2001      	movs	r0, #1
 8017910:	e7a8      	b.n	8017864 <_svfiprintf_r+0xd8>
 8017912:	2300      	movs	r3, #0
 8017914:	3401      	adds	r4, #1
 8017916:	9305      	str	r3, [sp, #20]
 8017918:	4619      	mov	r1, r3
 801791a:	f04f 0c0a 	mov.w	ip, #10
 801791e:	4620      	mov	r0, r4
 8017920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017924:	3a30      	subs	r2, #48	@ 0x30
 8017926:	2a09      	cmp	r2, #9
 8017928:	d903      	bls.n	8017932 <_svfiprintf_r+0x1a6>
 801792a:	2b00      	cmp	r3, #0
 801792c:	d0c6      	beq.n	80178bc <_svfiprintf_r+0x130>
 801792e:	9105      	str	r1, [sp, #20]
 8017930:	e7c4      	b.n	80178bc <_svfiprintf_r+0x130>
 8017932:	fb0c 2101 	mla	r1, ip, r1, r2
 8017936:	4604      	mov	r4, r0
 8017938:	2301      	movs	r3, #1
 801793a:	e7f0      	b.n	801791e <_svfiprintf_r+0x192>
 801793c:	ab03      	add	r3, sp, #12
 801793e:	9300      	str	r3, [sp, #0]
 8017940:	462a      	mov	r2, r5
 8017942:	4b0e      	ldr	r3, [pc, #56]	@ (801797c <_svfiprintf_r+0x1f0>)
 8017944:	a904      	add	r1, sp, #16
 8017946:	4638      	mov	r0, r7
 8017948:	f7fc fb96 	bl	8014078 <_printf_float>
 801794c:	1c42      	adds	r2, r0, #1
 801794e:	4606      	mov	r6, r0
 8017950:	d1d6      	bne.n	8017900 <_svfiprintf_r+0x174>
 8017952:	89ab      	ldrh	r3, [r5, #12]
 8017954:	065b      	lsls	r3, r3, #25
 8017956:	f53f af2d 	bmi.w	80177b4 <_svfiprintf_r+0x28>
 801795a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801795c:	e72c      	b.n	80177b8 <_svfiprintf_r+0x2c>
 801795e:	ab03      	add	r3, sp, #12
 8017960:	9300      	str	r3, [sp, #0]
 8017962:	462a      	mov	r2, r5
 8017964:	4b05      	ldr	r3, [pc, #20]	@ (801797c <_svfiprintf_r+0x1f0>)
 8017966:	a904      	add	r1, sp, #16
 8017968:	4638      	mov	r0, r7
 801796a:	f7fc fe1d 	bl	80145a8 <_printf_i>
 801796e:	e7ed      	b.n	801794c <_svfiprintf_r+0x1c0>
 8017970:	0801b715 	.word	0x0801b715
 8017974:	0801b71f 	.word	0x0801b71f
 8017978:	08014079 	.word	0x08014079
 801797c:	080176d5 	.word	0x080176d5
 8017980:	0801b71b 	.word	0x0801b71b

08017984 <__sflush_r>:
 8017984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801798c:	0716      	lsls	r6, r2, #28
 801798e:	4605      	mov	r5, r0
 8017990:	460c      	mov	r4, r1
 8017992:	d454      	bmi.n	8017a3e <__sflush_r+0xba>
 8017994:	684b      	ldr	r3, [r1, #4]
 8017996:	2b00      	cmp	r3, #0
 8017998:	dc02      	bgt.n	80179a0 <__sflush_r+0x1c>
 801799a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801799c:	2b00      	cmp	r3, #0
 801799e:	dd48      	ble.n	8017a32 <__sflush_r+0xae>
 80179a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179a2:	2e00      	cmp	r6, #0
 80179a4:	d045      	beq.n	8017a32 <__sflush_r+0xae>
 80179a6:	2300      	movs	r3, #0
 80179a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80179ac:	682f      	ldr	r7, [r5, #0]
 80179ae:	6a21      	ldr	r1, [r4, #32]
 80179b0:	602b      	str	r3, [r5, #0]
 80179b2:	d030      	beq.n	8017a16 <__sflush_r+0x92>
 80179b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80179b6:	89a3      	ldrh	r3, [r4, #12]
 80179b8:	0759      	lsls	r1, r3, #29
 80179ba:	d505      	bpl.n	80179c8 <__sflush_r+0x44>
 80179bc:	6863      	ldr	r3, [r4, #4]
 80179be:	1ad2      	subs	r2, r2, r3
 80179c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80179c2:	b10b      	cbz	r3, 80179c8 <__sflush_r+0x44>
 80179c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80179c6:	1ad2      	subs	r2, r2, r3
 80179c8:	2300      	movs	r3, #0
 80179ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179cc:	6a21      	ldr	r1, [r4, #32]
 80179ce:	4628      	mov	r0, r5
 80179d0:	47b0      	blx	r6
 80179d2:	1c43      	adds	r3, r0, #1
 80179d4:	89a3      	ldrh	r3, [r4, #12]
 80179d6:	d106      	bne.n	80179e6 <__sflush_r+0x62>
 80179d8:	6829      	ldr	r1, [r5, #0]
 80179da:	291d      	cmp	r1, #29
 80179dc:	d82b      	bhi.n	8017a36 <__sflush_r+0xb2>
 80179de:	4a2a      	ldr	r2, [pc, #168]	@ (8017a88 <__sflush_r+0x104>)
 80179e0:	40ca      	lsrs	r2, r1
 80179e2:	07d6      	lsls	r6, r2, #31
 80179e4:	d527      	bpl.n	8017a36 <__sflush_r+0xb2>
 80179e6:	2200      	movs	r2, #0
 80179e8:	6062      	str	r2, [r4, #4]
 80179ea:	04d9      	lsls	r1, r3, #19
 80179ec:	6922      	ldr	r2, [r4, #16]
 80179ee:	6022      	str	r2, [r4, #0]
 80179f0:	d504      	bpl.n	80179fc <__sflush_r+0x78>
 80179f2:	1c42      	adds	r2, r0, #1
 80179f4:	d101      	bne.n	80179fa <__sflush_r+0x76>
 80179f6:	682b      	ldr	r3, [r5, #0]
 80179f8:	b903      	cbnz	r3, 80179fc <__sflush_r+0x78>
 80179fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80179fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80179fe:	602f      	str	r7, [r5, #0]
 8017a00:	b1b9      	cbz	r1, 8017a32 <__sflush_r+0xae>
 8017a02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a06:	4299      	cmp	r1, r3
 8017a08:	d002      	beq.n	8017a10 <__sflush_r+0x8c>
 8017a0a:	4628      	mov	r0, r5
 8017a0c:	f7fe fa34 	bl	8015e78 <_free_r>
 8017a10:	2300      	movs	r3, #0
 8017a12:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a14:	e00d      	b.n	8017a32 <__sflush_r+0xae>
 8017a16:	2301      	movs	r3, #1
 8017a18:	4628      	mov	r0, r5
 8017a1a:	47b0      	blx	r6
 8017a1c:	4602      	mov	r2, r0
 8017a1e:	1c50      	adds	r0, r2, #1
 8017a20:	d1c9      	bne.n	80179b6 <__sflush_r+0x32>
 8017a22:	682b      	ldr	r3, [r5, #0]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d0c6      	beq.n	80179b6 <__sflush_r+0x32>
 8017a28:	2b1d      	cmp	r3, #29
 8017a2a:	d001      	beq.n	8017a30 <__sflush_r+0xac>
 8017a2c:	2b16      	cmp	r3, #22
 8017a2e:	d11e      	bne.n	8017a6e <__sflush_r+0xea>
 8017a30:	602f      	str	r7, [r5, #0]
 8017a32:	2000      	movs	r0, #0
 8017a34:	e022      	b.n	8017a7c <__sflush_r+0xf8>
 8017a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a3a:	b21b      	sxth	r3, r3
 8017a3c:	e01b      	b.n	8017a76 <__sflush_r+0xf2>
 8017a3e:	690f      	ldr	r7, [r1, #16]
 8017a40:	2f00      	cmp	r7, #0
 8017a42:	d0f6      	beq.n	8017a32 <__sflush_r+0xae>
 8017a44:	0793      	lsls	r3, r2, #30
 8017a46:	680e      	ldr	r6, [r1, #0]
 8017a48:	bf08      	it	eq
 8017a4a:	694b      	ldreq	r3, [r1, #20]
 8017a4c:	600f      	str	r7, [r1, #0]
 8017a4e:	bf18      	it	ne
 8017a50:	2300      	movne	r3, #0
 8017a52:	eba6 0807 	sub.w	r8, r6, r7
 8017a56:	608b      	str	r3, [r1, #8]
 8017a58:	f1b8 0f00 	cmp.w	r8, #0
 8017a5c:	dde9      	ble.n	8017a32 <__sflush_r+0xae>
 8017a5e:	6a21      	ldr	r1, [r4, #32]
 8017a60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a62:	4643      	mov	r3, r8
 8017a64:	463a      	mov	r2, r7
 8017a66:	4628      	mov	r0, r5
 8017a68:	47b0      	blx	r6
 8017a6a:	2800      	cmp	r0, #0
 8017a6c:	dc08      	bgt.n	8017a80 <__sflush_r+0xfc>
 8017a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a76:	81a3      	strh	r3, [r4, #12]
 8017a78:	f04f 30ff 	mov.w	r0, #4294967295
 8017a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a80:	4407      	add	r7, r0
 8017a82:	eba8 0800 	sub.w	r8, r8, r0
 8017a86:	e7e7      	b.n	8017a58 <__sflush_r+0xd4>
 8017a88:	20400001 	.word	0x20400001

08017a8c <_fflush_r>:
 8017a8c:	b538      	push	{r3, r4, r5, lr}
 8017a8e:	690b      	ldr	r3, [r1, #16]
 8017a90:	4605      	mov	r5, r0
 8017a92:	460c      	mov	r4, r1
 8017a94:	b913      	cbnz	r3, 8017a9c <_fflush_r+0x10>
 8017a96:	2500      	movs	r5, #0
 8017a98:	4628      	mov	r0, r5
 8017a9a:	bd38      	pop	{r3, r4, r5, pc}
 8017a9c:	b118      	cbz	r0, 8017aa6 <_fflush_r+0x1a>
 8017a9e:	6a03      	ldr	r3, [r0, #32]
 8017aa0:	b90b      	cbnz	r3, 8017aa6 <_fflush_r+0x1a>
 8017aa2:	f7fd f939 	bl	8014d18 <__sinit>
 8017aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d0f3      	beq.n	8017a96 <_fflush_r+0xa>
 8017aae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017ab0:	07d0      	lsls	r0, r2, #31
 8017ab2:	d404      	bmi.n	8017abe <_fflush_r+0x32>
 8017ab4:	0599      	lsls	r1, r3, #22
 8017ab6:	d402      	bmi.n	8017abe <_fflush_r+0x32>
 8017ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017aba:	f7fd fb6e 	bl	801519a <__retarget_lock_acquire_recursive>
 8017abe:	4628      	mov	r0, r5
 8017ac0:	4621      	mov	r1, r4
 8017ac2:	f7ff ff5f 	bl	8017984 <__sflush_r>
 8017ac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ac8:	07da      	lsls	r2, r3, #31
 8017aca:	4605      	mov	r5, r0
 8017acc:	d4e4      	bmi.n	8017a98 <_fflush_r+0xc>
 8017ace:	89a3      	ldrh	r3, [r4, #12]
 8017ad0:	059b      	lsls	r3, r3, #22
 8017ad2:	d4e1      	bmi.n	8017a98 <_fflush_r+0xc>
 8017ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ad6:	f7fd fb61 	bl	801519c <__retarget_lock_release_recursive>
 8017ada:	e7dd      	b.n	8017a98 <_fflush_r+0xc>

08017adc <__swhatbuf_r>:
 8017adc:	b570      	push	{r4, r5, r6, lr}
 8017ade:	460c      	mov	r4, r1
 8017ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ae4:	2900      	cmp	r1, #0
 8017ae6:	b096      	sub	sp, #88	@ 0x58
 8017ae8:	4615      	mov	r5, r2
 8017aea:	461e      	mov	r6, r3
 8017aec:	da0d      	bge.n	8017b0a <__swhatbuf_r+0x2e>
 8017aee:	89a3      	ldrh	r3, [r4, #12]
 8017af0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017af4:	f04f 0100 	mov.w	r1, #0
 8017af8:	bf14      	ite	ne
 8017afa:	2340      	movne	r3, #64	@ 0x40
 8017afc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017b00:	2000      	movs	r0, #0
 8017b02:	6031      	str	r1, [r6, #0]
 8017b04:	602b      	str	r3, [r5, #0]
 8017b06:	b016      	add	sp, #88	@ 0x58
 8017b08:	bd70      	pop	{r4, r5, r6, pc}
 8017b0a:	466a      	mov	r2, sp
 8017b0c:	f000 f874 	bl	8017bf8 <_fstat_r>
 8017b10:	2800      	cmp	r0, #0
 8017b12:	dbec      	blt.n	8017aee <__swhatbuf_r+0x12>
 8017b14:	9901      	ldr	r1, [sp, #4]
 8017b16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017b1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017b1e:	4259      	negs	r1, r3
 8017b20:	4159      	adcs	r1, r3
 8017b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017b26:	e7eb      	b.n	8017b00 <__swhatbuf_r+0x24>

08017b28 <__smakebuf_r>:
 8017b28:	898b      	ldrh	r3, [r1, #12]
 8017b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b2c:	079d      	lsls	r5, r3, #30
 8017b2e:	4606      	mov	r6, r0
 8017b30:	460c      	mov	r4, r1
 8017b32:	d507      	bpl.n	8017b44 <__smakebuf_r+0x1c>
 8017b34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017b38:	6023      	str	r3, [r4, #0]
 8017b3a:	6123      	str	r3, [r4, #16]
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	6163      	str	r3, [r4, #20]
 8017b40:	b003      	add	sp, #12
 8017b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b44:	ab01      	add	r3, sp, #4
 8017b46:	466a      	mov	r2, sp
 8017b48:	f7ff ffc8 	bl	8017adc <__swhatbuf_r>
 8017b4c:	9f00      	ldr	r7, [sp, #0]
 8017b4e:	4605      	mov	r5, r0
 8017b50:	4639      	mov	r1, r7
 8017b52:	4630      	mov	r0, r6
 8017b54:	f7fe fa04 	bl	8015f60 <_malloc_r>
 8017b58:	b948      	cbnz	r0, 8017b6e <__smakebuf_r+0x46>
 8017b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b5e:	059a      	lsls	r2, r3, #22
 8017b60:	d4ee      	bmi.n	8017b40 <__smakebuf_r+0x18>
 8017b62:	f023 0303 	bic.w	r3, r3, #3
 8017b66:	f043 0302 	orr.w	r3, r3, #2
 8017b6a:	81a3      	strh	r3, [r4, #12]
 8017b6c:	e7e2      	b.n	8017b34 <__smakebuf_r+0xc>
 8017b6e:	89a3      	ldrh	r3, [r4, #12]
 8017b70:	6020      	str	r0, [r4, #0]
 8017b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b76:	81a3      	strh	r3, [r4, #12]
 8017b78:	9b01      	ldr	r3, [sp, #4]
 8017b7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017b7e:	b15b      	cbz	r3, 8017b98 <__smakebuf_r+0x70>
 8017b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b84:	4630      	mov	r0, r6
 8017b86:	f000 f849 	bl	8017c1c <_isatty_r>
 8017b8a:	b128      	cbz	r0, 8017b98 <__smakebuf_r+0x70>
 8017b8c:	89a3      	ldrh	r3, [r4, #12]
 8017b8e:	f023 0303 	bic.w	r3, r3, #3
 8017b92:	f043 0301 	orr.w	r3, r3, #1
 8017b96:	81a3      	strh	r3, [r4, #12]
 8017b98:	89a3      	ldrh	r3, [r4, #12]
 8017b9a:	431d      	orrs	r5, r3
 8017b9c:	81a5      	strh	r5, [r4, #12]
 8017b9e:	e7cf      	b.n	8017b40 <__smakebuf_r+0x18>

08017ba0 <memmove>:
 8017ba0:	4288      	cmp	r0, r1
 8017ba2:	b510      	push	{r4, lr}
 8017ba4:	eb01 0402 	add.w	r4, r1, r2
 8017ba8:	d902      	bls.n	8017bb0 <memmove+0x10>
 8017baa:	4284      	cmp	r4, r0
 8017bac:	4623      	mov	r3, r4
 8017bae:	d807      	bhi.n	8017bc0 <memmove+0x20>
 8017bb0:	1e43      	subs	r3, r0, #1
 8017bb2:	42a1      	cmp	r1, r4
 8017bb4:	d008      	beq.n	8017bc8 <memmove+0x28>
 8017bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017bbe:	e7f8      	b.n	8017bb2 <memmove+0x12>
 8017bc0:	4402      	add	r2, r0
 8017bc2:	4601      	mov	r1, r0
 8017bc4:	428a      	cmp	r2, r1
 8017bc6:	d100      	bne.n	8017bca <memmove+0x2a>
 8017bc8:	bd10      	pop	{r4, pc}
 8017bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017bd2:	e7f7      	b.n	8017bc4 <memmove+0x24>

08017bd4 <strncmp>:
 8017bd4:	b510      	push	{r4, lr}
 8017bd6:	b16a      	cbz	r2, 8017bf4 <strncmp+0x20>
 8017bd8:	3901      	subs	r1, #1
 8017bda:	1884      	adds	r4, r0, r2
 8017bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017be0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d103      	bne.n	8017bf0 <strncmp+0x1c>
 8017be8:	42a0      	cmp	r0, r4
 8017bea:	d001      	beq.n	8017bf0 <strncmp+0x1c>
 8017bec:	2a00      	cmp	r2, #0
 8017bee:	d1f5      	bne.n	8017bdc <strncmp+0x8>
 8017bf0:	1ad0      	subs	r0, r2, r3
 8017bf2:	bd10      	pop	{r4, pc}
 8017bf4:	4610      	mov	r0, r2
 8017bf6:	e7fc      	b.n	8017bf2 <strncmp+0x1e>

08017bf8 <_fstat_r>:
 8017bf8:	b538      	push	{r3, r4, r5, lr}
 8017bfa:	4d07      	ldr	r5, [pc, #28]	@ (8017c18 <_fstat_r+0x20>)
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	4604      	mov	r4, r0
 8017c00:	4608      	mov	r0, r1
 8017c02:	4611      	mov	r1, r2
 8017c04:	602b      	str	r3, [r5, #0]
 8017c06:	f7ec f94d 	bl	8003ea4 <_fstat>
 8017c0a:	1c43      	adds	r3, r0, #1
 8017c0c:	d102      	bne.n	8017c14 <_fstat_r+0x1c>
 8017c0e:	682b      	ldr	r3, [r5, #0]
 8017c10:	b103      	cbz	r3, 8017c14 <_fstat_r+0x1c>
 8017c12:	6023      	str	r3, [r4, #0]
 8017c14:	bd38      	pop	{r3, r4, r5, pc}
 8017c16:	bf00      	nop
 8017c18:	2000404c 	.word	0x2000404c

08017c1c <_isatty_r>:
 8017c1c:	b538      	push	{r3, r4, r5, lr}
 8017c1e:	4d06      	ldr	r5, [pc, #24]	@ (8017c38 <_isatty_r+0x1c>)
 8017c20:	2300      	movs	r3, #0
 8017c22:	4604      	mov	r4, r0
 8017c24:	4608      	mov	r0, r1
 8017c26:	602b      	str	r3, [r5, #0]
 8017c28:	f7ec f94c 	bl	8003ec4 <_isatty>
 8017c2c:	1c43      	adds	r3, r0, #1
 8017c2e:	d102      	bne.n	8017c36 <_isatty_r+0x1a>
 8017c30:	682b      	ldr	r3, [r5, #0]
 8017c32:	b103      	cbz	r3, 8017c36 <_isatty_r+0x1a>
 8017c34:	6023      	str	r3, [r4, #0]
 8017c36:	bd38      	pop	{r3, r4, r5, pc}
 8017c38:	2000404c 	.word	0x2000404c

08017c3c <_sbrk_r>:
 8017c3c:	b538      	push	{r3, r4, r5, lr}
 8017c3e:	4d06      	ldr	r5, [pc, #24]	@ (8017c58 <_sbrk_r+0x1c>)
 8017c40:	2300      	movs	r3, #0
 8017c42:	4604      	mov	r4, r0
 8017c44:	4608      	mov	r0, r1
 8017c46:	602b      	str	r3, [r5, #0]
 8017c48:	f7ec f954 	bl	8003ef4 <_sbrk>
 8017c4c:	1c43      	adds	r3, r0, #1
 8017c4e:	d102      	bne.n	8017c56 <_sbrk_r+0x1a>
 8017c50:	682b      	ldr	r3, [r5, #0]
 8017c52:	b103      	cbz	r3, 8017c56 <_sbrk_r+0x1a>
 8017c54:	6023      	str	r3, [r4, #0]
 8017c56:	bd38      	pop	{r3, r4, r5, pc}
 8017c58:	2000404c 	.word	0x2000404c
 8017c5c:	00000000 	.word	0x00000000

08017c60 <nan>:
 8017c60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017c68 <nan+0x8>
 8017c64:	4770      	bx	lr
 8017c66:	bf00      	nop
 8017c68:	00000000 	.word	0x00000000
 8017c6c:	7ff80000 	.word	0x7ff80000

08017c70 <__assert_func>:
 8017c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c72:	4614      	mov	r4, r2
 8017c74:	461a      	mov	r2, r3
 8017c76:	4b09      	ldr	r3, [pc, #36]	@ (8017c9c <__assert_func+0x2c>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	4605      	mov	r5, r0
 8017c7c:	68d8      	ldr	r0, [r3, #12]
 8017c7e:	b14c      	cbz	r4, 8017c94 <__assert_func+0x24>
 8017c80:	4b07      	ldr	r3, [pc, #28]	@ (8017ca0 <__assert_func+0x30>)
 8017c82:	9100      	str	r1, [sp, #0]
 8017c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c88:	4906      	ldr	r1, [pc, #24]	@ (8017ca4 <__assert_func+0x34>)
 8017c8a:	462b      	mov	r3, r5
 8017c8c:	f000 fba8 	bl	80183e0 <fiprintf>
 8017c90:	f000 fbb8 	bl	8018404 <abort>
 8017c94:	4b04      	ldr	r3, [pc, #16]	@ (8017ca8 <__assert_func+0x38>)
 8017c96:	461c      	mov	r4, r3
 8017c98:	e7f3      	b.n	8017c82 <__assert_func+0x12>
 8017c9a:	bf00      	nop
 8017c9c:	2000005c 	.word	0x2000005c
 8017ca0:	0801b72e 	.word	0x0801b72e
 8017ca4:	0801b73b 	.word	0x0801b73b
 8017ca8:	0801b769 	.word	0x0801b769

08017cac <_calloc_r>:
 8017cac:	b570      	push	{r4, r5, r6, lr}
 8017cae:	fba1 5402 	umull	r5, r4, r1, r2
 8017cb2:	b934      	cbnz	r4, 8017cc2 <_calloc_r+0x16>
 8017cb4:	4629      	mov	r1, r5
 8017cb6:	f7fe f953 	bl	8015f60 <_malloc_r>
 8017cba:	4606      	mov	r6, r0
 8017cbc:	b928      	cbnz	r0, 8017cca <_calloc_r+0x1e>
 8017cbe:	4630      	mov	r0, r6
 8017cc0:	bd70      	pop	{r4, r5, r6, pc}
 8017cc2:	220c      	movs	r2, #12
 8017cc4:	6002      	str	r2, [r0, #0]
 8017cc6:	2600      	movs	r6, #0
 8017cc8:	e7f9      	b.n	8017cbe <_calloc_r+0x12>
 8017cca:	462a      	mov	r2, r5
 8017ccc:	4621      	mov	r1, r4
 8017cce:	f7fd f9e7 	bl	80150a0 <memset>
 8017cd2:	e7f4      	b.n	8017cbe <_calloc_r+0x12>

08017cd4 <rshift>:
 8017cd4:	6903      	ldr	r3, [r0, #16]
 8017cd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017ce2:	f100 0414 	add.w	r4, r0, #20
 8017ce6:	dd45      	ble.n	8017d74 <rshift+0xa0>
 8017ce8:	f011 011f 	ands.w	r1, r1, #31
 8017cec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017cf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017cf4:	d10c      	bne.n	8017d10 <rshift+0x3c>
 8017cf6:	f100 0710 	add.w	r7, r0, #16
 8017cfa:	4629      	mov	r1, r5
 8017cfc:	42b1      	cmp	r1, r6
 8017cfe:	d334      	bcc.n	8017d6a <rshift+0x96>
 8017d00:	1a9b      	subs	r3, r3, r2
 8017d02:	009b      	lsls	r3, r3, #2
 8017d04:	1eea      	subs	r2, r5, #3
 8017d06:	4296      	cmp	r6, r2
 8017d08:	bf38      	it	cc
 8017d0a:	2300      	movcc	r3, #0
 8017d0c:	4423      	add	r3, r4
 8017d0e:	e015      	b.n	8017d3c <rshift+0x68>
 8017d10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017d14:	f1c1 0820 	rsb	r8, r1, #32
 8017d18:	40cf      	lsrs	r7, r1
 8017d1a:	f105 0e04 	add.w	lr, r5, #4
 8017d1e:	46a1      	mov	r9, r4
 8017d20:	4576      	cmp	r6, lr
 8017d22:	46f4      	mov	ip, lr
 8017d24:	d815      	bhi.n	8017d52 <rshift+0x7e>
 8017d26:	1a9a      	subs	r2, r3, r2
 8017d28:	0092      	lsls	r2, r2, #2
 8017d2a:	3a04      	subs	r2, #4
 8017d2c:	3501      	adds	r5, #1
 8017d2e:	42ae      	cmp	r6, r5
 8017d30:	bf38      	it	cc
 8017d32:	2200      	movcc	r2, #0
 8017d34:	18a3      	adds	r3, r4, r2
 8017d36:	50a7      	str	r7, [r4, r2]
 8017d38:	b107      	cbz	r7, 8017d3c <rshift+0x68>
 8017d3a:	3304      	adds	r3, #4
 8017d3c:	1b1a      	subs	r2, r3, r4
 8017d3e:	42a3      	cmp	r3, r4
 8017d40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017d44:	bf08      	it	eq
 8017d46:	2300      	moveq	r3, #0
 8017d48:	6102      	str	r2, [r0, #16]
 8017d4a:	bf08      	it	eq
 8017d4c:	6143      	streq	r3, [r0, #20]
 8017d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d52:	f8dc c000 	ldr.w	ip, [ip]
 8017d56:	fa0c fc08 	lsl.w	ip, ip, r8
 8017d5a:	ea4c 0707 	orr.w	r7, ip, r7
 8017d5e:	f849 7b04 	str.w	r7, [r9], #4
 8017d62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017d66:	40cf      	lsrs	r7, r1
 8017d68:	e7da      	b.n	8017d20 <rshift+0x4c>
 8017d6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8017d6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8017d72:	e7c3      	b.n	8017cfc <rshift+0x28>
 8017d74:	4623      	mov	r3, r4
 8017d76:	e7e1      	b.n	8017d3c <rshift+0x68>

08017d78 <__hexdig_fun>:
 8017d78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017d7c:	2b09      	cmp	r3, #9
 8017d7e:	d802      	bhi.n	8017d86 <__hexdig_fun+0xe>
 8017d80:	3820      	subs	r0, #32
 8017d82:	b2c0      	uxtb	r0, r0
 8017d84:	4770      	bx	lr
 8017d86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017d8a:	2b05      	cmp	r3, #5
 8017d8c:	d801      	bhi.n	8017d92 <__hexdig_fun+0x1a>
 8017d8e:	3847      	subs	r0, #71	@ 0x47
 8017d90:	e7f7      	b.n	8017d82 <__hexdig_fun+0xa>
 8017d92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017d96:	2b05      	cmp	r3, #5
 8017d98:	d801      	bhi.n	8017d9e <__hexdig_fun+0x26>
 8017d9a:	3827      	subs	r0, #39	@ 0x27
 8017d9c:	e7f1      	b.n	8017d82 <__hexdig_fun+0xa>
 8017d9e:	2000      	movs	r0, #0
 8017da0:	4770      	bx	lr
	...

08017da4 <__gethex>:
 8017da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da8:	b085      	sub	sp, #20
 8017daa:	468a      	mov	sl, r1
 8017dac:	9302      	str	r3, [sp, #8]
 8017dae:	680b      	ldr	r3, [r1, #0]
 8017db0:	9001      	str	r0, [sp, #4]
 8017db2:	4690      	mov	r8, r2
 8017db4:	1c9c      	adds	r4, r3, #2
 8017db6:	46a1      	mov	r9, r4
 8017db8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017dbc:	2830      	cmp	r0, #48	@ 0x30
 8017dbe:	d0fa      	beq.n	8017db6 <__gethex+0x12>
 8017dc0:	eba9 0303 	sub.w	r3, r9, r3
 8017dc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8017dc8:	f7ff ffd6 	bl	8017d78 <__hexdig_fun>
 8017dcc:	4605      	mov	r5, r0
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	d168      	bne.n	8017ea4 <__gethex+0x100>
 8017dd2:	49a0      	ldr	r1, [pc, #640]	@ (8018054 <__gethex+0x2b0>)
 8017dd4:	2201      	movs	r2, #1
 8017dd6:	4648      	mov	r0, r9
 8017dd8:	f7ff fefc 	bl	8017bd4 <strncmp>
 8017ddc:	4607      	mov	r7, r0
 8017dde:	2800      	cmp	r0, #0
 8017de0:	d167      	bne.n	8017eb2 <__gethex+0x10e>
 8017de2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017de6:	4626      	mov	r6, r4
 8017de8:	f7ff ffc6 	bl	8017d78 <__hexdig_fun>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	d062      	beq.n	8017eb6 <__gethex+0x112>
 8017df0:	4623      	mov	r3, r4
 8017df2:	7818      	ldrb	r0, [r3, #0]
 8017df4:	2830      	cmp	r0, #48	@ 0x30
 8017df6:	4699      	mov	r9, r3
 8017df8:	f103 0301 	add.w	r3, r3, #1
 8017dfc:	d0f9      	beq.n	8017df2 <__gethex+0x4e>
 8017dfe:	f7ff ffbb 	bl	8017d78 <__hexdig_fun>
 8017e02:	fab0 f580 	clz	r5, r0
 8017e06:	096d      	lsrs	r5, r5, #5
 8017e08:	f04f 0b01 	mov.w	fp, #1
 8017e0c:	464a      	mov	r2, r9
 8017e0e:	4616      	mov	r6, r2
 8017e10:	3201      	adds	r2, #1
 8017e12:	7830      	ldrb	r0, [r6, #0]
 8017e14:	f7ff ffb0 	bl	8017d78 <__hexdig_fun>
 8017e18:	2800      	cmp	r0, #0
 8017e1a:	d1f8      	bne.n	8017e0e <__gethex+0x6a>
 8017e1c:	498d      	ldr	r1, [pc, #564]	@ (8018054 <__gethex+0x2b0>)
 8017e1e:	2201      	movs	r2, #1
 8017e20:	4630      	mov	r0, r6
 8017e22:	f7ff fed7 	bl	8017bd4 <strncmp>
 8017e26:	2800      	cmp	r0, #0
 8017e28:	d13f      	bne.n	8017eaa <__gethex+0x106>
 8017e2a:	b944      	cbnz	r4, 8017e3e <__gethex+0x9a>
 8017e2c:	1c74      	adds	r4, r6, #1
 8017e2e:	4622      	mov	r2, r4
 8017e30:	4616      	mov	r6, r2
 8017e32:	3201      	adds	r2, #1
 8017e34:	7830      	ldrb	r0, [r6, #0]
 8017e36:	f7ff ff9f 	bl	8017d78 <__hexdig_fun>
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	d1f8      	bne.n	8017e30 <__gethex+0x8c>
 8017e3e:	1ba4      	subs	r4, r4, r6
 8017e40:	00a7      	lsls	r7, r4, #2
 8017e42:	7833      	ldrb	r3, [r6, #0]
 8017e44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017e48:	2b50      	cmp	r3, #80	@ 0x50
 8017e4a:	d13e      	bne.n	8017eca <__gethex+0x126>
 8017e4c:	7873      	ldrb	r3, [r6, #1]
 8017e4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8017e50:	d033      	beq.n	8017eba <__gethex+0x116>
 8017e52:	2b2d      	cmp	r3, #45	@ 0x2d
 8017e54:	d034      	beq.n	8017ec0 <__gethex+0x11c>
 8017e56:	1c71      	adds	r1, r6, #1
 8017e58:	2400      	movs	r4, #0
 8017e5a:	7808      	ldrb	r0, [r1, #0]
 8017e5c:	f7ff ff8c 	bl	8017d78 <__hexdig_fun>
 8017e60:	1e43      	subs	r3, r0, #1
 8017e62:	b2db      	uxtb	r3, r3
 8017e64:	2b18      	cmp	r3, #24
 8017e66:	d830      	bhi.n	8017eca <__gethex+0x126>
 8017e68:	f1a0 0210 	sub.w	r2, r0, #16
 8017e6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017e70:	f7ff ff82 	bl	8017d78 <__hexdig_fun>
 8017e74:	f100 3cff 	add.w	ip, r0, #4294967295
 8017e78:	fa5f fc8c 	uxtb.w	ip, ip
 8017e7c:	f1bc 0f18 	cmp.w	ip, #24
 8017e80:	f04f 030a 	mov.w	r3, #10
 8017e84:	d91e      	bls.n	8017ec4 <__gethex+0x120>
 8017e86:	b104      	cbz	r4, 8017e8a <__gethex+0xe6>
 8017e88:	4252      	negs	r2, r2
 8017e8a:	4417      	add	r7, r2
 8017e8c:	f8ca 1000 	str.w	r1, [sl]
 8017e90:	b1ed      	cbz	r5, 8017ece <__gethex+0x12a>
 8017e92:	f1bb 0f00 	cmp.w	fp, #0
 8017e96:	bf0c      	ite	eq
 8017e98:	2506      	moveq	r5, #6
 8017e9a:	2500      	movne	r5, #0
 8017e9c:	4628      	mov	r0, r5
 8017e9e:	b005      	add	sp, #20
 8017ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ea4:	2500      	movs	r5, #0
 8017ea6:	462c      	mov	r4, r5
 8017ea8:	e7b0      	b.n	8017e0c <__gethex+0x68>
 8017eaa:	2c00      	cmp	r4, #0
 8017eac:	d1c7      	bne.n	8017e3e <__gethex+0x9a>
 8017eae:	4627      	mov	r7, r4
 8017eb0:	e7c7      	b.n	8017e42 <__gethex+0x9e>
 8017eb2:	464e      	mov	r6, r9
 8017eb4:	462f      	mov	r7, r5
 8017eb6:	2501      	movs	r5, #1
 8017eb8:	e7c3      	b.n	8017e42 <__gethex+0x9e>
 8017eba:	2400      	movs	r4, #0
 8017ebc:	1cb1      	adds	r1, r6, #2
 8017ebe:	e7cc      	b.n	8017e5a <__gethex+0xb6>
 8017ec0:	2401      	movs	r4, #1
 8017ec2:	e7fb      	b.n	8017ebc <__gethex+0x118>
 8017ec4:	fb03 0002 	mla	r0, r3, r2, r0
 8017ec8:	e7ce      	b.n	8017e68 <__gethex+0xc4>
 8017eca:	4631      	mov	r1, r6
 8017ecc:	e7de      	b.n	8017e8c <__gethex+0xe8>
 8017ece:	eba6 0309 	sub.w	r3, r6, r9
 8017ed2:	3b01      	subs	r3, #1
 8017ed4:	4629      	mov	r1, r5
 8017ed6:	2b07      	cmp	r3, #7
 8017ed8:	dc0a      	bgt.n	8017ef0 <__gethex+0x14c>
 8017eda:	9801      	ldr	r0, [sp, #4]
 8017edc:	f7fe f8cc 	bl	8016078 <_Balloc>
 8017ee0:	4604      	mov	r4, r0
 8017ee2:	b940      	cbnz	r0, 8017ef6 <__gethex+0x152>
 8017ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8018058 <__gethex+0x2b4>)
 8017ee6:	4602      	mov	r2, r0
 8017ee8:	21e4      	movs	r1, #228	@ 0xe4
 8017eea:	485c      	ldr	r0, [pc, #368]	@ (801805c <__gethex+0x2b8>)
 8017eec:	f7ff fec0 	bl	8017c70 <__assert_func>
 8017ef0:	3101      	adds	r1, #1
 8017ef2:	105b      	asrs	r3, r3, #1
 8017ef4:	e7ef      	b.n	8017ed6 <__gethex+0x132>
 8017ef6:	f100 0a14 	add.w	sl, r0, #20
 8017efa:	2300      	movs	r3, #0
 8017efc:	4655      	mov	r5, sl
 8017efe:	469b      	mov	fp, r3
 8017f00:	45b1      	cmp	r9, r6
 8017f02:	d337      	bcc.n	8017f74 <__gethex+0x1d0>
 8017f04:	f845 bb04 	str.w	fp, [r5], #4
 8017f08:	eba5 050a 	sub.w	r5, r5, sl
 8017f0c:	10ad      	asrs	r5, r5, #2
 8017f0e:	6125      	str	r5, [r4, #16]
 8017f10:	4658      	mov	r0, fp
 8017f12:	f7fe f9a3 	bl	801625c <__hi0bits>
 8017f16:	016d      	lsls	r5, r5, #5
 8017f18:	f8d8 6000 	ldr.w	r6, [r8]
 8017f1c:	1a2d      	subs	r5, r5, r0
 8017f1e:	42b5      	cmp	r5, r6
 8017f20:	dd54      	ble.n	8017fcc <__gethex+0x228>
 8017f22:	1bad      	subs	r5, r5, r6
 8017f24:	4629      	mov	r1, r5
 8017f26:	4620      	mov	r0, r4
 8017f28:	f7fe fd2f 	bl	801698a <__any_on>
 8017f2c:	4681      	mov	r9, r0
 8017f2e:	b178      	cbz	r0, 8017f50 <__gethex+0x1ac>
 8017f30:	1e6b      	subs	r3, r5, #1
 8017f32:	1159      	asrs	r1, r3, #5
 8017f34:	f003 021f 	and.w	r2, r3, #31
 8017f38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017f3c:	f04f 0901 	mov.w	r9, #1
 8017f40:	fa09 f202 	lsl.w	r2, r9, r2
 8017f44:	420a      	tst	r2, r1
 8017f46:	d003      	beq.n	8017f50 <__gethex+0x1ac>
 8017f48:	454b      	cmp	r3, r9
 8017f4a:	dc36      	bgt.n	8017fba <__gethex+0x216>
 8017f4c:	f04f 0902 	mov.w	r9, #2
 8017f50:	4629      	mov	r1, r5
 8017f52:	4620      	mov	r0, r4
 8017f54:	f7ff febe 	bl	8017cd4 <rshift>
 8017f58:	442f      	add	r7, r5
 8017f5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f5e:	42bb      	cmp	r3, r7
 8017f60:	da42      	bge.n	8017fe8 <__gethex+0x244>
 8017f62:	9801      	ldr	r0, [sp, #4]
 8017f64:	4621      	mov	r1, r4
 8017f66:	f7fe f8c7 	bl	80160f8 <_Bfree>
 8017f6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	6013      	str	r3, [r2, #0]
 8017f70:	25a3      	movs	r5, #163	@ 0xa3
 8017f72:	e793      	b.n	8017e9c <__gethex+0xf8>
 8017f74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017f78:	2a2e      	cmp	r2, #46	@ 0x2e
 8017f7a:	d012      	beq.n	8017fa2 <__gethex+0x1fe>
 8017f7c:	2b20      	cmp	r3, #32
 8017f7e:	d104      	bne.n	8017f8a <__gethex+0x1e6>
 8017f80:	f845 bb04 	str.w	fp, [r5], #4
 8017f84:	f04f 0b00 	mov.w	fp, #0
 8017f88:	465b      	mov	r3, fp
 8017f8a:	7830      	ldrb	r0, [r6, #0]
 8017f8c:	9303      	str	r3, [sp, #12]
 8017f8e:	f7ff fef3 	bl	8017d78 <__hexdig_fun>
 8017f92:	9b03      	ldr	r3, [sp, #12]
 8017f94:	f000 000f 	and.w	r0, r0, #15
 8017f98:	4098      	lsls	r0, r3
 8017f9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8017f9e:	3304      	adds	r3, #4
 8017fa0:	e7ae      	b.n	8017f00 <__gethex+0x15c>
 8017fa2:	45b1      	cmp	r9, r6
 8017fa4:	d8ea      	bhi.n	8017f7c <__gethex+0x1d8>
 8017fa6:	492b      	ldr	r1, [pc, #172]	@ (8018054 <__gethex+0x2b0>)
 8017fa8:	9303      	str	r3, [sp, #12]
 8017faa:	2201      	movs	r2, #1
 8017fac:	4630      	mov	r0, r6
 8017fae:	f7ff fe11 	bl	8017bd4 <strncmp>
 8017fb2:	9b03      	ldr	r3, [sp, #12]
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	d1e1      	bne.n	8017f7c <__gethex+0x1d8>
 8017fb8:	e7a2      	b.n	8017f00 <__gethex+0x15c>
 8017fba:	1ea9      	subs	r1, r5, #2
 8017fbc:	4620      	mov	r0, r4
 8017fbe:	f7fe fce4 	bl	801698a <__any_on>
 8017fc2:	2800      	cmp	r0, #0
 8017fc4:	d0c2      	beq.n	8017f4c <__gethex+0x1a8>
 8017fc6:	f04f 0903 	mov.w	r9, #3
 8017fca:	e7c1      	b.n	8017f50 <__gethex+0x1ac>
 8017fcc:	da09      	bge.n	8017fe2 <__gethex+0x23e>
 8017fce:	1b75      	subs	r5, r6, r5
 8017fd0:	4621      	mov	r1, r4
 8017fd2:	9801      	ldr	r0, [sp, #4]
 8017fd4:	462a      	mov	r2, r5
 8017fd6:	f7fe fa9f 	bl	8016518 <__lshift>
 8017fda:	1b7f      	subs	r7, r7, r5
 8017fdc:	4604      	mov	r4, r0
 8017fde:	f100 0a14 	add.w	sl, r0, #20
 8017fe2:	f04f 0900 	mov.w	r9, #0
 8017fe6:	e7b8      	b.n	8017f5a <__gethex+0x1b6>
 8017fe8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017fec:	42bd      	cmp	r5, r7
 8017fee:	dd6f      	ble.n	80180d0 <__gethex+0x32c>
 8017ff0:	1bed      	subs	r5, r5, r7
 8017ff2:	42ae      	cmp	r6, r5
 8017ff4:	dc34      	bgt.n	8018060 <__gethex+0x2bc>
 8017ff6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017ffa:	2b02      	cmp	r3, #2
 8017ffc:	d022      	beq.n	8018044 <__gethex+0x2a0>
 8017ffe:	2b03      	cmp	r3, #3
 8018000:	d024      	beq.n	801804c <__gethex+0x2a8>
 8018002:	2b01      	cmp	r3, #1
 8018004:	d115      	bne.n	8018032 <__gethex+0x28e>
 8018006:	42ae      	cmp	r6, r5
 8018008:	d113      	bne.n	8018032 <__gethex+0x28e>
 801800a:	2e01      	cmp	r6, #1
 801800c:	d10b      	bne.n	8018026 <__gethex+0x282>
 801800e:	9a02      	ldr	r2, [sp, #8]
 8018010:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018014:	6013      	str	r3, [r2, #0]
 8018016:	2301      	movs	r3, #1
 8018018:	6123      	str	r3, [r4, #16]
 801801a:	f8ca 3000 	str.w	r3, [sl]
 801801e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018020:	2562      	movs	r5, #98	@ 0x62
 8018022:	601c      	str	r4, [r3, #0]
 8018024:	e73a      	b.n	8017e9c <__gethex+0xf8>
 8018026:	1e71      	subs	r1, r6, #1
 8018028:	4620      	mov	r0, r4
 801802a:	f7fe fcae 	bl	801698a <__any_on>
 801802e:	2800      	cmp	r0, #0
 8018030:	d1ed      	bne.n	801800e <__gethex+0x26a>
 8018032:	9801      	ldr	r0, [sp, #4]
 8018034:	4621      	mov	r1, r4
 8018036:	f7fe f85f 	bl	80160f8 <_Bfree>
 801803a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801803c:	2300      	movs	r3, #0
 801803e:	6013      	str	r3, [r2, #0]
 8018040:	2550      	movs	r5, #80	@ 0x50
 8018042:	e72b      	b.n	8017e9c <__gethex+0xf8>
 8018044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018046:	2b00      	cmp	r3, #0
 8018048:	d1f3      	bne.n	8018032 <__gethex+0x28e>
 801804a:	e7e0      	b.n	801800e <__gethex+0x26a>
 801804c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801804e:	2b00      	cmp	r3, #0
 8018050:	d1dd      	bne.n	801800e <__gethex+0x26a>
 8018052:	e7ee      	b.n	8018032 <__gethex+0x28e>
 8018054:	0801b713 	.word	0x0801b713
 8018058:	0801b6a9 	.word	0x0801b6a9
 801805c:	0801b76a 	.word	0x0801b76a
 8018060:	1e6f      	subs	r7, r5, #1
 8018062:	f1b9 0f00 	cmp.w	r9, #0
 8018066:	d130      	bne.n	80180ca <__gethex+0x326>
 8018068:	b127      	cbz	r7, 8018074 <__gethex+0x2d0>
 801806a:	4639      	mov	r1, r7
 801806c:	4620      	mov	r0, r4
 801806e:	f7fe fc8c 	bl	801698a <__any_on>
 8018072:	4681      	mov	r9, r0
 8018074:	117a      	asrs	r2, r7, #5
 8018076:	2301      	movs	r3, #1
 8018078:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801807c:	f007 071f 	and.w	r7, r7, #31
 8018080:	40bb      	lsls	r3, r7
 8018082:	4213      	tst	r3, r2
 8018084:	4629      	mov	r1, r5
 8018086:	4620      	mov	r0, r4
 8018088:	bf18      	it	ne
 801808a:	f049 0902 	orrne.w	r9, r9, #2
 801808e:	f7ff fe21 	bl	8017cd4 <rshift>
 8018092:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018096:	1b76      	subs	r6, r6, r5
 8018098:	2502      	movs	r5, #2
 801809a:	f1b9 0f00 	cmp.w	r9, #0
 801809e:	d047      	beq.n	8018130 <__gethex+0x38c>
 80180a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80180a4:	2b02      	cmp	r3, #2
 80180a6:	d015      	beq.n	80180d4 <__gethex+0x330>
 80180a8:	2b03      	cmp	r3, #3
 80180aa:	d017      	beq.n	80180dc <__gethex+0x338>
 80180ac:	2b01      	cmp	r3, #1
 80180ae:	d109      	bne.n	80180c4 <__gethex+0x320>
 80180b0:	f019 0f02 	tst.w	r9, #2
 80180b4:	d006      	beq.n	80180c4 <__gethex+0x320>
 80180b6:	f8da 3000 	ldr.w	r3, [sl]
 80180ba:	ea49 0903 	orr.w	r9, r9, r3
 80180be:	f019 0f01 	tst.w	r9, #1
 80180c2:	d10e      	bne.n	80180e2 <__gethex+0x33e>
 80180c4:	f045 0510 	orr.w	r5, r5, #16
 80180c8:	e032      	b.n	8018130 <__gethex+0x38c>
 80180ca:	f04f 0901 	mov.w	r9, #1
 80180ce:	e7d1      	b.n	8018074 <__gethex+0x2d0>
 80180d0:	2501      	movs	r5, #1
 80180d2:	e7e2      	b.n	801809a <__gethex+0x2f6>
 80180d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80180d6:	f1c3 0301 	rsb	r3, r3, #1
 80180da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80180dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d0f0      	beq.n	80180c4 <__gethex+0x320>
 80180e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80180e6:	f104 0314 	add.w	r3, r4, #20
 80180ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80180ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80180f2:	f04f 0c00 	mov.w	ip, #0
 80180f6:	4618      	mov	r0, r3
 80180f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80180fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018100:	d01b      	beq.n	801813a <__gethex+0x396>
 8018102:	3201      	adds	r2, #1
 8018104:	6002      	str	r2, [r0, #0]
 8018106:	2d02      	cmp	r5, #2
 8018108:	f104 0314 	add.w	r3, r4, #20
 801810c:	d13c      	bne.n	8018188 <__gethex+0x3e4>
 801810e:	f8d8 2000 	ldr.w	r2, [r8]
 8018112:	3a01      	subs	r2, #1
 8018114:	42b2      	cmp	r2, r6
 8018116:	d109      	bne.n	801812c <__gethex+0x388>
 8018118:	1171      	asrs	r1, r6, #5
 801811a:	2201      	movs	r2, #1
 801811c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018120:	f006 061f 	and.w	r6, r6, #31
 8018124:	fa02 f606 	lsl.w	r6, r2, r6
 8018128:	421e      	tst	r6, r3
 801812a:	d13a      	bne.n	80181a2 <__gethex+0x3fe>
 801812c:	f045 0520 	orr.w	r5, r5, #32
 8018130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018132:	601c      	str	r4, [r3, #0]
 8018134:	9b02      	ldr	r3, [sp, #8]
 8018136:	601f      	str	r7, [r3, #0]
 8018138:	e6b0      	b.n	8017e9c <__gethex+0xf8>
 801813a:	4299      	cmp	r1, r3
 801813c:	f843 cc04 	str.w	ip, [r3, #-4]
 8018140:	d8d9      	bhi.n	80180f6 <__gethex+0x352>
 8018142:	68a3      	ldr	r3, [r4, #8]
 8018144:	459b      	cmp	fp, r3
 8018146:	db17      	blt.n	8018178 <__gethex+0x3d4>
 8018148:	6861      	ldr	r1, [r4, #4]
 801814a:	9801      	ldr	r0, [sp, #4]
 801814c:	3101      	adds	r1, #1
 801814e:	f7fd ff93 	bl	8016078 <_Balloc>
 8018152:	4681      	mov	r9, r0
 8018154:	b918      	cbnz	r0, 801815e <__gethex+0x3ba>
 8018156:	4b1a      	ldr	r3, [pc, #104]	@ (80181c0 <__gethex+0x41c>)
 8018158:	4602      	mov	r2, r0
 801815a:	2184      	movs	r1, #132	@ 0x84
 801815c:	e6c5      	b.n	8017eea <__gethex+0x146>
 801815e:	6922      	ldr	r2, [r4, #16]
 8018160:	3202      	adds	r2, #2
 8018162:	f104 010c 	add.w	r1, r4, #12
 8018166:	0092      	lsls	r2, r2, #2
 8018168:	300c      	adds	r0, #12
 801816a:	f7fd f818 	bl	801519e <memcpy>
 801816e:	4621      	mov	r1, r4
 8018170:	9801      	ldr	r0, [sp, #4]
 8018172:	f7fd ffc1 	bl	80160f8 <_Bfree>
 8018176:	464c      	mov	r4, r9
 8018178:	6923      	ldr	r3, [r4, #16]
 801817a:	1c5a      	adds	r2, r3, #1
 801817c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018180:	6122      	str	r2, [r4, #16]
 8018182:	2201      	movs	r2, #1
 8018184:	615a      	str	r2, [r3, #20]
 8018186:	e7be      	b.n	8018106 <__gethex+0x362>
 8018188:	6922      	ldr	r2, [r4, #16]
 801818a:	455a      	cmp	r2, fp
 801818c:	dd0b      	ble.n	80181a6 <__gethex+0x402>
 801818e:	2101      	movs	r1, #1
 8018190:	4620      	mov	r0, r4
 8018192:	f7ff fd9f 	bl	8017cd4 <rshift>
 8018196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801819a:	3701      	adds	r7, #1
 801819c:	42bb      	cmp	r3, r7
 801819e:	f6ff aee0 	blt.w	8017f62 <__gethex+0x1be>
 80181a2:	2501      	movs	r5, #1
 80181a4:	e7c2      	b.n	801812c <__gethex+0x388>
 80181a6:	f016 061f 	ands.w	r6, r6, #31
 80181aa:	d0fa      	beq.n	80181a2 <__gethex+0x3fe>
 80181ac:	4453      	add	r3, sl
 80181ae:	f1c6 0620 	rsb	r6, r6, #32
 80181b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80181b6:	f7fe f851 	bl	801625c <__hi0bits>
 80181ba:	42b0      	cmp	r0, r6
 80181bc:	dbe7      	blt.n	801818e <__gethex+0x3ea>
 80181be:	e7f0      	b.n	80181a2 <__gethex+0x3fe>
 80181c0:	0801b6a9 	.word	0x0801b6a9

080181c4 <L_shift>:
 80181c4:	f1c2 0208 	rsb	r2, r2, #8
 80181c8:	0092      	lsls	r2, r2, #2
 80181ca:	b570      	push	{r4, r5, r6, lr}
 80181cc:	f1c2 0620 	rsb	r6, r2, #32
 80181d0:	6843      	ldr	r3, [r0, #4]
 80181d2:	6804      	ldr	r4, [r0, #0]
 80181d4:	fa03 f506 	lsl.w	r5, r3, r6
 80181d8:	432c      	orrs	r4, r5
 80181da:	40d3      	lsrs	r3, r2
 80181dc:	6004      	str	r4, [r0, #0]
 80181de:	f840 3f04 	str.w	r3, [r0, #4]!
 80181e2:	4288      	cmp	r0, r1
 80181e4:	d3f4      	bcc.n	80181d0 <L_shift+0xc>
 80181e6:	bd70      	pop	{r4, r5, r6, pc}

080181e8 <__match>:
 80181e8:	b530      	push	{r4, r5, lr}
 80181ea:	6803      	ldr	r3, [r0, #0]
 80181ec:	3301      	adds	r3, #1
 80181ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181f2:	b914      	cbnz	r4, 80181fa <__match+0x12>
 80181f4:	6003      	str	r3, [r0, #0]
 80181f6:	2001      	movs	r0, #1
 80181f8:	bd30      	pop	{r4, r5, pc}
 80181fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8018202:	2d19      	cmp	r5, #25
 8018204:	bf98      	it	ls
 8018206:	3220      	addls	r2, #32
 8018208:	42a2      	cmp	r2, r4
 801820a:	d0f0      	beq.n	80181ee <__match+0x6>
 801820c:	2000      	movs	r0, #0
 801820e:	e7f3      	b.n	80181f8 <__match+0x10>

08018210 <__hexnan>:
 8018210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018214:	680b      	ldr	r3, [r1, #0]
 8018216:	6801      	ldr	r1, [r0, #0]
 8018218:	115e      	asrs	r6, r3, #5
 801821a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801821e:	f013 031f 	ands.w	r3, r3, #31
 8018222:	b087      	sub	sp, #28
 8018224:	bf18      	it	ne
 8018226:	3604      	addne	r6, #4
 8018228:	2500      	movs	r5, #0
 801822a:	1f37      	subs	r7, r6, #4
 801822c:	4682      	mov	sl, r0
 801822e:	4690      	mov	r8, r2
 8018230:	9301      	str	r3, [sp, #4]
 8018232:	f846 5c04 	str.w	r5, [r6, #-4]
 8018236:	46b9      	mov	r9, r7
 8018238:	463c      	mov	r4, r7
 801823a:	9502      	str	r5, [sp, #8]
 801823c:	46ab      	mov	fp, r5
 801823e:	784a      	ldrb	r2, [r1, #1]
 8018240:	1c4b      	adds	r3, r1, #1
 8018242:	9303      	str	r3, [sp, #12]
 8018244:	b342      	cbz	r2, 8018298 <__hexnan+0x88>
 8018246:	4610      	mov	r0, r2
 8018248:	9105      	str	r1, [sp, #20]
 801824a:	9204      	str	r2, [sp, #16]
 801824c:	f7ff fd94 	bl	8017d78 <__hexdig_fun>
 8018250:	2800      	cmp	r0, #0
 8018252:	d151      	bne.n	80182f8 <__hexnan+0xe8>
 8018254:	9a04      	ldr	r2, [sp, #16]
 8018256:	9905      	ldr	r1, [sp, #20]
 8018258:	2a20      	cmp	r2, #32
 801825a:	d818      	bhi.n	801828e <__hexnan+0x7e>
 801825c:	9b02      	ldr	r3, [sp, #8]
 801825e:	459b      	cmp	fp, r3
 8018260:	dd13      	ble.n	801828a <__hexnan+0x7a>
 8018262:	454c      	cmp	r4, r9
 8018264:	d206      	bcs.n	8018274 <__hexnan+0x64>
 8018266:	2d07      	cmp	r5, #7
 8018268:	dc04      	bgt.n	8018274 <__hexnan+0x64>
 801826a:	462a      	mov	r2, r5
 801826c:	4649      	mov	r1, r9
 801826e:	4620      	mov	r0, r4
 8018270:	f7ff ffa8 	bl	80181c4 <L_shift>
 8018274:	4544      	cmp	r4, r8
 8018276:	d952      	bls.n	801831e <__hexnan+0x10e>
 8018278:	2300      	movs	r3, #0
 801827a:	f1a4 0904 	sub.w	r9, r4, #4
 801827e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018282:	f8cd b008 	str.w	fp, [sp, #8]
 8018286:	464c      	mov	r4, r9
 8018288:	461d      	mov	r5, r3
 801828a:	9903      	ldr	r1, [sp, #12]
 801828c:	e7d7      	b.n	801823e <__hexnan+0x2e>
 801828e:	2a29      	cmp	r2, #41	@ 0x29
 8018290:	d157      	bne.n	8018342 <__hexnan+0x132>
 8018292:	3102      	adds	r1, #2
 8018294:	f8ca 1000 	str.w	r1, [sl]
 8018298:	f1bb 0f00 	cmp.w	fp, #0
 801829c:	d051      	beq.n	8018342 <__hexnan+0x132>
 801829e:	454c      	cmp	r4, r9
 80182a0:	d206      	bcs.n	80182b0 <__hexnan+0xa0>
 80182a2:	2d07      	cmp	r5, #7
 80182a4:	dc04      	bgt.n	80182b0 <__hexnan+0xa0>
 80182a6:	462a      	mov	r2, r5
 80182a8:	4649      	mov	r1, r9
 80182aa:	4620      	mov	r0, r4
 80182ac:	f7ff ff8a 	bl	80181c4 <L_shift>
 80182b0:	4544      	cmp	r4, r8
 80182b2:	d936      	bls.n	8018322 <__hexnan+0x112>
 80182b4:	f1a8 0204 	sub.w	r2, r8, #4
 80182b8:	4623      	mov	r3, r4
 80182ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80182be:	f842 1f04 	str.w	r1, [r2, #4]!
 80182c2:	429f      	cmp	r7, r3
 80182c4:	d2f9      	bcs.n	80182ba <__hexnan+0xaa>
 80182c6:	1b3b      	subs	r3, r7, r4
 80182c8:	f023 0303 	bic.w	r3, r3, #3
 80182cc:	3304      	adds	r3, #4
 80182ce:	3401      	adds	r4, #1
 80182d0:	3e03      	subs	r6, #3
 80182d2:	42b4      	cmp	r4, r6
 80182d4:	bf88      	it	hi
 80182d6:	2304      	movhi	r3, #4
 80182d8:	4443      	add	r3, r8
 80182da:	2200      	movs	r2, #0
 80182dc:	f843 2b04 	str.w	r2, [r3], #4
 80182e0:	429f      	cmp	r7, r3
 80182e2:	d2fb      	bcs.n	80182dc <__hexnan+0xcc>
 80182e4:	683b      	ldr	r3, [r7, #0]
 80182e6:	b91b      	cbnz	r3, 80182f0 <__hexnan+0xe0>
 80182e8:	4547      	cmp	r7, r8
 80182ea:	d128      	bne.n	801833e <__hexnan+0x12e>
 80182ec:	2301      	movs	r3, #1
 80182ee:	603b      	str	r3, [r7, #0]
 80182f0:	2005      	movs	r0, #5
 80182f2:	b007      	add	sp, #28
 80182f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182f8:	3501      	adds	r5, #1
 80182fa:	2d08      	cmp	r5, #8
 80182fc:	f10b 0b01 	add.w	fp, fp, #1
 8018300:	dd06      	ble.n	8018310 <__hexnan+0x100>
 8018302:	4544      	cmp	r4, r8
 8018304:	d9c1      	bls.n	801828a <__hexnan+0x7a>
 8018306:	2300      	movs	r3, #0
 8018308:	f844 3c04 	str.w	r3, [r4, #-4]
 801830c:	2501      	movs	r5, #1
 801830e:	3c04      	subs	r4, #4
 8018310:	6822      	ldr	r2, [r4, #0]
 8018312:	f000 000f 	and.w	r0, r0, #15
 8018316:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801831a:	6020      	str	r0, [r4, #0]
 801831c:	e7b5      	b.n	801828a <__hexnan+0x7a>
 801831e:	2508      	movs	r5, #8
 8018320:	e7b3      	b.n	801828a <__hexnan+0x7a>
 8018322:	9b01      	ldr	r3, [sp, #4]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d0dd      	beq.n	80182e4 <__hexnan+0xd4>
 8018328:	f1c3 0320 	rsb	r3, r3, #32
 801832c:	f04f 32ff 	mov.w	r2, #4294967295
 8018330:	40da      	lsrs	r2, r3
 8018332:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018336:	4013      	ands	r3, r2
 8018338:	f846 3c04 	str.w	r3, [r6, #-4]
 801833c:	e7d2      	b.n	80182e4 <__hexnan+0xd4>
 801833e:	3f04      	subs	r7, #4
 8018340:	e7d0      	b.n	80182e4 <__hexnan+0xd4>
 8018342:	2004      	movs	r0, #4
 8018344:	e7d5      	b.n	80182f2 <__hexnan+0xe2>

08018346 <__ascii_mbtowc>:
 8018346:	b082      	sub	sp, #8
 8018348:	b901      	cbnz	r1, 801834c <__ascii_mbtowc+0x6>
 801834a:	a901      	add	r1, sp, #4
 801834c:	b142      	cbz	r2, 8018360 <__ascii_mbtowc+0x1a>
 801834e:	b14b      	cbz	r3, 8018364 <__ascii_mbtowc+0x1e>
 8018350:	7813      	ldrb	r3, [r2, #0]
 8018352:	600b      	str	r3, [r1, #0]
 8018354:	7812      	ldrb	r2, [r2, #0]
 8018356:	1e10      	subs	r0, r2, #0
 8018358:	bf18      	it	ne
 801835a:	2001      	movne	r0, #1
 801835c:	b002      	add	sp, #8
 801835e:	4770      	bx	lr
 8018360:	4610      	mov	r0, r2
 8018362:	e7fb      	b.n	801835c <__ascii_mbtowc+0x16>
 8018364:	f06f 0001 	mvn.w	r0, #1
 8018368:	e7f8      	b.n	801835c <__ascii_mbtowc+0x16>

0801836a <_realloc_r>:
 801836a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801836e:	4607      	mov	r7, r0
 8018370:	4614      	mov	r4, r2
 8018372:	460d      	mov	r5, r1
 8018374:	b921      	cbnz	r1, 8018380 <_realloc_r+0x16>
 8018376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801837a:	4611      	mov	r1, r2
 801837c:	f7fd bdf0 	b.w	8015f60 <_malloc_r>
 8018380:	b92a      	cbnz	r2, 801838e <_realloc_r+0x24>
 8018382:	f7fd fd79 	bl	8015e78 <_free_r>
 8018386:	4625      	mov	r5, r4
 8018388:	4628      	mov	r0, r5
 801838a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801838e:	f000 f840 	bl	8018412 <_malloc_usable_size_r>
 8018392:	4284      	cmp	r4, r0
 8018394:	4606      	mov	r6, r0
 8018396:	d802      	bhi.n	801839e <_realloc_r+0x34>
 8018398:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801839c:	d8f4      	bhi.n	8018388 <_realloc_r+0x1e>
 801839e:	4621      	mov	r1, r4
 80183a0:	4638      	mov	r0, r7
 80183a2:	f7fd fddd 	bl	8015f60 <_malloc_r>
 80183a6:	4680      	mov	r8, r0
 80183a8:	b908      	cbnz	r0, 80183ae <_realloc_r+0x44>
 80183aa:	4645      	mov	r5, r8
 80183ac:	e7ec      	b.n	8018388 <_realloc_r+0x1e>
 80183ae:	42b4      	cmp	r4, r6
 80183b0:	4622      	mov	r2, r4
 80183b2:	4629      	mov	r1, r5
 80183b4:	bf28      	it	cs
 80183b6:	4632      	movcs	r2, r6
 80183b8:	f7fc fef1 	bl	801519e <memcpy>
 80183bc:	4629      	mov	r1, r5
 80183be:	4638      	mov	r0, r7
 80183c0:	f7fd fd5a 	bl	8015e78 <_free_r>
 80183c4:	e7f1      	b.n	80183aa <_realloc_r+0x40>

080183c6 <__ascii_wctomb>:
 80183c6:	4603      	mov	r3, r0
 80183c8:	4608      	mov	r0, r1
 80183ca:	b141      	cbz	r1, 80183de <__ascii_wctomb+0x18>
 80183cc:	2aff      	cmp	r2, #255	@ 0xff
 80183ce:	d904      	bls.n	80183da <__ascii_wctomb+0x14>
 80183d0:	228a      	movs	r2, #138	@ 0x8a
 80183d2:	601a      	str	r2, [r3, #0]
 80183d4:	f04f 30ff 	mov.w	r0, #4294967295
 80183d8:	4770      	bx	lr
 80183da:	700a      	strb	r2, [r1, #0]
 80183dc:	2001      	movs	r0, #1
 80183de:	4770      	bx	lr

080183e0 <fiprintf>:
 80183e0:	b40e      	push	{r1, r2, r3}
 80183e2:	b503      	push	{r0, r1, lr}
 80183e4:	4601      	mov	r1, r0
 80183e6:	ab03      	add	r3, sp, #12
 80183e8:	4805      	ldr	r0, [pc, #20]	@ (8018400 <fiprintf+0x20>)
 80183ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80183ee:	6800      	ldr	r0, [r0, #0]
 80183f0:	9301      	str	r3, [sp, #4]
 80183f2:	f000 f83f 	bl	8018474 <_vfiprintf_r>
 80183f6:	b002      	add	sp, #8
 80183f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80183fc:	b003      	add	sp, #12
 80183fe:	4770      	bx	lr
 8018400:	2000005c 	.word	0x2000005c

08018404 <abort>:
 8018404:	b508      	push	{r3, lr}
 8018406:	2006      	movs	r0, #6
 8018408:	f000 f974 	bl	80186f4 <raise>
 801840c:	2001      	movs	r0, #1
 801840e:	f7eb fcf9 	bl	8003e04 <_exit>

08018412 <_malloc_usable_size_r>:
 8018412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018416:	1f18      	subs	r0, r3, #4
 8018418:	2b00      	cmp	r3, #0
 801841a:	bfbc      	itt	lt
 801841c:	580b      	ldrlt	r3, [r1, r0]
 801841e:	18c0      	addlt	r0, r0, r3
 8018420:	4770      	bx	lr

08018422 <__sfputc_r>:
 8018422:	6893      	ldr	r3, [r2, #8]
 8018424:	3b01      	subs	r3, #1
 8018426:	2b00      	cmp	r3, #0
 8018428:	b410      	push	{r4}
 801842a:	6093      	str	r3, [r2, #8]
 801842c:	da08      	bge.n	8018440 <__sfputc_r+0x1e>
 801842e:	6994      	ldr	r4, [r2, #24]
 8018430:	42a3      	cmp	r3, r4
 8018432:	db01      	blt.n	8018438 <__sfputc_r+0x16>
 8018434:	290a      	cmp	r1, #10
 8018436:	d103      	bne.n	8018440 <__sfputc_r+0x1e>
 8018438:	f85d 4b04 	ldr.w	r4, [sp], #4
 801843c:	f7fc bd9b 	b.w	8014f76 <__swbuf_r>
 8018440:	6813      	ldr	r3, [r2, #0]
 8018442:	1c58      	adds	r0, r3, #1
 8018444:	6010      	str	r0, [r2, #0]
 8018446:	7019      	strb	r1, [r3, #0]
 8018448:	4608      	mov	r0, r1
 801844a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801844e:	4770      	bx	lr

08018450 <__sfputs_r>:
 8018450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018452:	4606      	mov	r6, r0
 8018454:	460f      	mov	r7, r1
 8018456:	4614      	mov	r4, r2
 8018458:	18d5      	adds	r5, r2, r3
 801845a:	42ac      	cmp	r4, r5
 801845c:	d101      	bne.n	8018462 <__sfputs_r+0x12>
 801845e:	2000      	movs	r0, #0
 8018460:	e007      	b.n	8018472 <__sfputs_r+0x22>
 8018462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018466:	463a      	mov	r2, r7
 8018468:	4630      	mov	r0, r6
 801846a:	f7ff ffda 	bl	8018422 <__sfputc_r>
 801846e:	1c43      	adds	r3, r0, #1
 8018470:	d1f3      	bne.n	801845a <__sfputs_r+0xa>
 8018472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018474 <_vfiprintf_r>:
 8018474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018478:	460d      	mov	r5, r1
 801847a:	b09d      	sub	sp, #116	@ 0x74
 801847c:	4614      	mov	r4, r2
 801847e:	4698      	mov	r8, r3
 8018480:	4606      	mov	r6, r0
 8018482:	b118      	cbz	r0, 801848c <_vfiprintf_r+0x18>
 8018484:	6a03      	ldr	r3, [r0, #32]
 8018486:	b90b      	cbnz	r3, 801848c <_vfiprintf_r+0x18>
 8018488:	f7fc fc46 	bl	8014d18 <__sinit>
 801848c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801848e:	07d9      	lsls	r1, r3, #31
 8018490:	d405      	bmi.n	801849e <_vfiprintf_r+0x2a>
 8018492:	89ab      	ldrh	r3, [r5, #12]
 8018494:	059a      	lsls	r2, r3, #22
 8018496:	d402      	bmi.n	801849e <_vfiprintf_r+0x2a>
 8018498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801849a:	f7fc fe7e 	bl	801519a <__retarget_lock_acquire_recursive>
 801849e:	89ab      	ldrh	r3, [r5, #12]
 80184a0:	071b      	lsls	r3, r3, #28
 80184a2:	d501      	bpl.n	80184a8 <_vfiprintf_r+0x34>
 80184a4:	692b      	ldr	r3, [r5, #16]
 80184a6:	b99b      	cbnz	r3, 80184d0 <_vfiprintf_r+0x5c>
 80184a8:	4629      	mov	r1, r5
 80184aa:	4630      	mov	r0, r6
 80184ac:	f7fc fda2 	bl	8014ff4 <__swsetup_r>
 80184b0:	b170      	cbz	r0, 80184d0 <_vfiprintf_r+0x5c>
 80184b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80184b4:	07dc      	lsls	r4, r3, #31
 80184b6:	d504      	bpl.n	80184c2 <_vfiprintf_r+0x4e>
 80184b8:	f04f 30ff 	mov.w	r0, #4294967295
 80184bc:	b01d      	add	sp, #116	@ 0x74
 80184be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184c2:	89ab      	ldrh	r3, [r5, #12]
 80184c4:	0598      	lsls	r0, r3, #22
 80184c6:	d4f7      	bmi.n	80184b8 <_vfiprintf_r+0x44>
 80184c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80184ca:	f7fc fe67 	bl	801519c <__retarget_lock_release_recursive>
 80184ce:	e7f3      	b.n	80184b8 <_vfiprintf_r+0x44>
 80184d0:	2300      	movs	r3, #0
 80184d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80184d4:	2320      	movs	r3, #32
 80184d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80184da:	f8cd 800c 	str.w	r8, [sp, #12]
 80184de:	2330      	movs	r3, #48	@ 0x30
 80184e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018690 <_vfiprintf_r+0x21c>
 80184e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80184e8:	f04f 0901 	mov.w	r9, #1
 80184ec:	4623      	mov	r3, r4
 80184ee:	469a      	mov	sl, r3
 80184f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184f4:	b10a      	cbz	r2, 80184fa <_vfiprintf_r+0x86>
 80184f6:	2a25      	cmp	r2, #37	@ 0x25
 80184f8:	d1f9      	bne.n	80184ee <_vfiprintf_r+0x7a>
 80184fa:	ebba 0b04 	subs.w	fp, sl, r4
 80184fe:	d00b      	beq.n	8018518 <_vfiprintf_r+0xa4>
 8018500:	465b      	mov	r3, fp
 8018502:	4622      	mov	r2, r4
 8018504:	4629      	mov	r1, r5
 8018506:	4630      	mov	r0, r6
 8018508:	f7ff ffa2 	bl	8018450 <__sfputs_r>
 801850c:	3001      	adds	r0, #1
 801850e:	f000 80a7 	beq.w	8018660 <_vfiprintf_r+0x1ec>
 8018512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018514:	445a      	add	r2, fp
 8018516:	9209      	str	r2, [sp, #36]	@ 0x24
 8018518:	f89a 3000 	ldrb.w	r3, [sl]
 801851c:	2b00      	cmp	r3, #0
 801851e:	f000 809f 	beq.w	8018660 <_vfiprintf_r+0x1ec>
 8018522:	2300      	movs	r3, #0
 8018524:	f04f 32ff 	mov.w	r2, #4294967295
 8018528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801852c:	f10a 0a01 	add.w	sl, sl, #1
 8018530:	9304      	str	r3, [sp, #16]
 8018532:	9307      	str	r3, [sp, #28]
 8018534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018538:	931a      	str	r3, [sp, #104]	@ 0x68
 801853a:	4654      	mov	r4, sl
 801853c:	2205      	movs	r2, #5
 801853e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018542:	4853      	ldr	r0, [pc, #332]	@ (8018690 <_vfiprintf_r+0x21c>)
 8018544:	f7e7 fe6c 	bl	8000220 <memchr>
 8018548:	9a04      	ldr	r2, [sp, #16]
 801854a:	b9d8      	cbnz	r0, 8018584 <_vfiprintf_r+0x110>
 801854c:	06d1      	lsls	r1, r2, #27
 801854e:	bf44      	itt	mi
 8018550:	2320      	movmi	r3, #32
 8018552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018556:	0713      	lsls	r3, r2, #28
 8018558:	bf44      	itt	mi
 801855a:	232b      	movmi	r3, #43	@ 0x2b
 801855c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018560:	f89a 3000 	ldrb.w	r3, [sl]
 8018564:	2b2a      	cmp	r3, #42	@ 0x2a
 8018566:	d015      	beq.n	8018594 <_vfiprintf_r+0x120>
 8018568:	9a07      	ldr	r2, [sp, #28]
 801856a:	4654      	mov	r4, sl
 801856c:	2000      	movs	r0, #0
 801856e:	f04f 0c0a 	mov.w	ip, #10
 8018572:	4621      	mov	r1, r4
 8018574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018578:	3b30      	subs	r3, #48	@ 0x30
 801857a:	2b09      	cmp	r3, #9
 801857c:	d94b      	bls.n	8018616 <_vfiprintf_r+0x1a2>
 801857e:	b1b0      	cbz	r0, 80185ae <_vfiprintf_r+0x13a>
 8018580:	9207      	str	r2, [sp, #28]
 8018582:	e014      	b.n	80185ae <_vfiprintf_r+0x13a>
 8018584:	eba0 0308 	sub.w	r3, r0, r8
 8018588:	fa09 f303 	lsl.w	r3, r9, r3
 801858c:	4313      	orrs	r3, r2
 801858e:	9304      	str	r3, [sp, #16]
 8018590:	46a2      	mov	sl, r4
 8018592:	e7d2      	b.n	801853a <_vfiprintf_r+0xc6>
 8018594:	9b03      	ldr	r3, [sp, #12]
 8018596:	1d19      	adds	r1, r3, #4
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	9103      	str	r1, [sp, #12]
 801859c:	2b00      	cmp	r3, #0
 801859e:	bfbb      	ittet	lt
 80185a0:	425b      	neglt	r3, r3
 80185a2:	f042 0202 	orrlt.w	r2, r2, #2
 80185a6:	9307      	strge	r3, [sp, #28]
 80185a8:	9307      	strlt	r3, [sp, #28]
 80185aa:	bfb8      	it	lt
 80185ac:	9204      	strlt	r2, [sp, #16]
 80185ae:	7823      	ldrb	r3, [r4, #0]
 80185b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80185b2:	d10a      	bne.n	80185ca <_vfiprintf_r+0x156>
 80185b4:	7863      	ldrb	r3, [r4, #1]
 80185b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80185b8:	d132      	bne.n	8018620 <_vfiprintf_r+0x1ac>
 80185ba:	9b03      	ldr	r3, [sp, #12]
 80185bc:	1d1a      	adds	r2, r3, #4
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	9203      	str	r2, [sp, #12]
 80185c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80185c6:	3402      	adds	r4, #2
 80185c8:	9305      	str	r3, [sp, #20]
 80185ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80186a0 <_vfiprintf_r+0x22c>
 80185ce:	7821      	ldrb	r1, [r4, #0]
 80185d0:	2203      	movs	r2, #3
 80185d2:	4650      	mov	r0, sl
 80185d4:	f7e7 fe24 	bl	8000220 <memchr>
 80185d8:	b138      	cbz	r0, 80185ea <_vfiprintf_r+0x176>
 80185da:	9b04      	ldr	r3, [sp, #16]
 80185dc:	eba0 000a 	sub.w	r0, r0, sl
 80185e0:	2240      	movs	r2, #64	@ 0x40
 80185e2:	4082      	lsls	r2, r0
 80185e4:	4313      	orrs	r3, r2
 80185e6:	3401      	adds	r4, #1
 80185e8:	9304      	str	r3, [sp, #16]
 80185ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185ee:	4829      	ldr	r0, [pc, #164]	@ (8018694 <_vfiprintf_r+0x220>)
 80185f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80185f4:	2206      	movs	r2, #6
 80185f6:	f7e7 fe13 	bl	8000220 <memchr>
 80185fa:	2800      	cmp	r0, #0
 80185fc:	d03f      	beq.n	801867e <_vfiprintf_r+0x20a>
 80185fe:	4b26      	ldr	r3, [pc, #152]	@ (8018698 <_vfiprintf_r+0x224>)
 8018600:	bb1b      	cbnz	r3, 801864a <_vfiprintf_r+0x1d6>
 8018602:	9b03      	ldr	r3, [sp, #12]
 8018604:	3307      	adds	r3, #7
 8018606:	f023 0307 	bic.w	r3, r3, #7
 801860a:	3308      	adds	r3, #8
 801860c:	9303      	str	r3, [sp, #12]
 801860e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018610:	443b      	add	r3, r7
 8018612:	9309      	str	r3, [sp, #36]	@ 0x24
 8018614:	e76a      	b.n	80184ec <_vfiprintf_r+0x78>
 8018616:	fb0c 3202 	mla	r2, ip, r2, r3
 801861a:	460c      	mov	r4, r1
 801861c:	2001      	movs	r0, #1
 801861e:	e7a8      	b.n	8018572 <_vfiprintf_r+0xfe>
 8018620:	2300      	movs	r3, #0
 8018622:	3401      	adds	r4, #1
 8018624:	9305      	str	r3, [sp, #20]
 8018626:	4619      	mov	r1, r3
 8018628:	f04f 0c0a 	mov.w	ip, #10
 801862c:	4620      	mov	r0, r4
 801862e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018632:	3a30      	subs	r2, #48	@ 0x30
 8018634:	2a09      	cmp	r2, #9
 8018636:	d903      	bls.n	8018640 <_vfiprintf_r+0x1cc>
 8018638:	2b00      	cmp	r3, #0
 801863a:	d0c6      	beq.n	80185ca <_vfiprintf_r+0x156>
 801863c:	9105      	str	r1, [sp, #20]
 801863e:	e7c4      	b.n	80185ca <_vfiprintf_r+0x156>
 8018640:	fb0c 2101 	mla	r1, ip, r1, r2
 8018644:	4604      	mov	r4, r0
 8018646:	2301      	movs	r3, #1
 8018648:	e7f0      	b.n	801862c <_vfiprintf_r+0x1b8>
 801864a:	ab03      	add	r3, sp, #12
 801864c:	9300      	str	r3, [sp, #0]
 801864e:	462a      	mov	r2, r5
 8018650:	4b12      	ldr	r3, [pc, #72]	@ (801869c <_vfiprintf_r+0x228>)
 8018652:	a904      	add	r1, sp, #16
 8018654:	4630      	mov	r0, r6
 8018656:	f7fb fd0f 	bl	8014078 <_printf_float>
 801865a:	4607      	mov	r7, r0
 801865c:	1c78      	adds	r0, r7, #1
 801865e:	d1d6      	bne.n	801860e <_vfiprintf_r+0x19a>
 8018660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018662:	07d9      	lsls	r1, r3, #31
 8018664:	d405      	bmi.n	8018672 <_vfiprintf_r+0x1fe>
 8018666:	89ab      	ldrh	r3, [r5, #12]
 8018668:	059a      	lsls	r2, r3, #22
 801866a:	d402      	bmi.n	8018672 <_vfiprintf_r+0x1fe>
 801866c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801866e:	f7fc fd95 	bl	801519c <__retarget_lock_release_recursive>
 8018672:	89ab      	ldrh	r3, [r5, #12]
 8018674:	065b      	lsls	r3, r3, #25
 8018676:	f53f af1f 	bmi.w	80184b8 <_vfiprintf_r+0x44>
 801867a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801867c:	e71e      	b.n	80184bc <_vfiprintf_r+0x48>
 801867e:	ab03      	add	r3, sp, #12
 8018680:	9300      	str	r3, [sp, #0]
 8018682:	462a      	mov	r2, r5
 8018684:	4b05      	ldr	r3, [pc, #20]	@ (801869c <_vfiprintf_r+0x228>)
 8018686:	a904      	add	r1, sp, #16
 8018688:	4630      	mov	r0, r6
 801868a:	f7fb ff8d 	bl	80145a8 <_printf_i>
 801868e:	e7e4      	b.n	801865a <_vfiprintf_r+0x1e6>
 8018690:	0801b715 	.word	0x0801b715
 8018694:	0801b71f 	.word	0x0801b71f
 8018698:	08014079 	.word	0x08014079
 801869c:	08018451 	.word	0x08018451
 80186a0:	0801b71b 	.word	0x0801b71b

080186a4 <_raise_r>:
 80186a4:	291f      	cmp	r1, #31
 80186a6:	b538      	push	{r3, r4, r5, lr}
 80186a8:	4605      	mov	r5, r0
 80186aa:	460c      	mov	r4, r1
 80186ac:	d904      	bls.n	80186b8 <_raise_r+0x14>
 80186ae:	2316      	movs	r3, #22
 80186b0:	6003      	str	r3, [r0, #0]
 80186b2:	f04f 30ff 	mov.w	r0, #4294967295
 80186b6:	bd38      	pop	{r3, r4, r5, pc}
 80186b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80186ba:	b112      	cbz	r2, 80186c2 <_raise_r+0x1e>
 80186bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80186c0:	b94b      	cbnz	r3, 80186d6 <_raise_r+0x32>
 80186c2:	4628      	mov	r0, r5
 80186c4:	f000 f830 	bl	8018728 <_getpid_r>
 80186c8:	4622      	mov	r2, r4
 80186ca:	4601      	mov	r1, r0
 80186cc:	4628      	mov	r0, r5
 80186ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186d2:	f000 b817 	b.w	8018704 <_kill_r>
 80186d6:	2b01      	cmp	r3, #1
 80186d8:	d00a      	beq.n	80186f0 <_raise_r+0x4c>
 80186da:	1c59      	adds	r1, r3, #1
 80186dc:	d103      	bne.n	80186e6 <_raise_r+0x42>
 80186de:	2316      	movs	r3, #22
 80186e0:	6003      	str	r3, [r0, #0]
 80186e2:	2001      	movs	r0, #1
 80186e4:	e7e7      	b.n	80186b6 <_raise_r+0x12>
 80186e6:	2100      	movs	r1, #0
 80186e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80186ec:	4620      	mov	r0, r4
 80186ee:	4798      	blx	r3
 80186f0:	2000      	movs	r0, #0
 80186f2:	e7e0      	b.n	80186b6 <_raise_r+0x12>

080186f4 <raise>:
 80186f4:	4b02      	ldr	r3, [pc, #8]	@ (8018700 <raise+0xc>)
 80186f6:	4601      	mov	r1, r0
 80186f8:	6818      	ldr	r0, [r3, #0]
 80186fa:	f7ff bfd3 	b.w	80186a4 <_raise_r>
 80186fe:	bf00      	nop
 8018700:	2000005c 	.word	0x2000005c

08018704 <_kill_r>:
 8018704:	b538      	push	{r3, r4, r5, lr}
 8018706:	4d07      	ldr	r5, [pc, #28]	@ (8018724 <_kill_r+0x20>)
 8018708:	2300      	movs	r3, #0
 801870a:	4604      	mov	r4, r0
 801870c:	4608      	mov	r0, r1
 801870e:	4611      	mov	r1, r2
 8018710:	602b      	str	r3, [r5, #0]
 8018712:	f7eb fb67 	bl	8003de4 <_kill>
 8018716:	1c43      	adds	r3, r0, #1
 8018718:	d102      	bne.n	8018720 <_kill_r+0x1c>
 801871a:	682b      	ldr	r3, [r5, #0]
 801871c:	b103      	cbz	r3, 8018720 <_kill_r+0x1c>
 801871e:	6023      	str	r3, [r4, #0]
 8018720:	bd38      	pop	{r3, r4, r5, pc}
 8018722:	bf00      	nop
 8018724:	2000404c 	.word	0x2000404c

08018728 <_getpid_r>:
 8018728:	f7eb bb54 	b.w	8003dd4 <_getpid>
 801872c:	0000      	movs	r0, r0
	...

08018730 <log>:
 8018730:	b538      	push	{r3, r4, r5, lr}
 8018732:	ed2d 8b02 	vpush	{d8}
 8018736:	ec55 4b10 	vmov	r4, r5, d0
 801873a:	f000 f8a5 	bl	8018888 <__ieee754_log>
 801873e:	4622      	mov	r2, r4
 8018740:	462b      	mov	r3, r5
 8018742:	4620      	mov	r0, r4
 8018744:	4629      	mov	r1, r5
 8018746:	eeb0 8a40 	vmov.f32	s16, s0
 801874a:	eef0 8a60 	vmov.f32	s17, s1
 801874e:	f7e8 fa15 	bl	8000b7c <__aeabi_dcmpun>
 8018752:	b998      	cbnz	r0, 801877c <log+0x4c>
 8018754:	2200      	movs	r2, #0
 8018756:	2300      	movs	r3, #0
 8018758:	4620      	mov	r0, r4
 801875a:	4629      	mov	r1, r5
 801875c:	f7e8 fa04 	bl	8000b68 <__aeabi_dcmpgt>
 8018760:	b960      	cbnz	r0, 801877c <log+0x4c>
 8018762:	2200      	movs	r2, #0
 8018764:	2300      	movs	r3, #0
 8018766:	4620      	mov	r0, r4
 8018768:	4629      	mov	r1, r5
 801876a:	f7e8 f9d5 	bl	8000b18 <__aeabi_dcmpeq>
 801876e:	b160      	cbz	r0, 801878a <log+0x5a>
 8018770:	f7fc fce8 	bl	8015144 <__errno>
 8018774:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80187a0 <log+0x70>
 8018778:	2322      	movs	r3, #34	@ 0x22
 801877a:	6003      	str	r3, [r0, #0]
 801877c:	eeb0 0a48 	vmov.f32	s0, s16
 8018780:	eef0 0a68 	vmov.f32	s1, s17
 8018784:	ecbd 8b02 	vpop	{d8}
 8018788:	bd38      	pop	{r3, r4, r5, pc}
 801878a:	f7fc fcdb 	bl	8015144 <__errno>
 801878e:	ecbd 8b02 	vpop	{d8}
 8018792:	2321      	movs	r3, #33	@ 0x21
 8018794:	6003      	str	r3, [r0, #0]
 8018796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801879a:	4803      	ldr	r0, [pc, #12]	@ (80187a8 <log+0x78>)
 801879c:	f7ff ba60 	b.w	8017c60 <nan>
 80187a0:	00000000 	.word	0x00000000
 80187a4:	fff00000 	.word	0xfff00000
 80187a8:	0801b769 	.word	0x0801b769

080187ac <powf>:
 80187ac:	b508      	push	{r3, lr}
 80187ae:	ed2d 8b04 	vpush	{d8-d9}
 80187b2:	eeb0 8a60 	vmov.f32	s16, s1
 80187b6:	eeb0 9a40 	vmov.f32	s18, s0
 80187ba:	f000 fa1b 	bl	8018bf4 <__ieee754_powf>
 80187be:	eeb4 8a48 	vcmp.f32	s16, s16
 80187c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c6:	eef0 8a40 	vmov.f32	s17, s0
 80187ca:	d63e      	bvs.n	801884a <powf+0x9e>
 80187cc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80187d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187d4:	d112      	bne.n	80187fc <powf+0x50>
 80187d6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80187da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187de:	d039      	beq.n	8018854 <powf+0xa8>
 80187e0:	eeb0 0a48 	vmov.f32	s0, s16
 80187e4:	f000 f840 	bl	8018868 <finitef>
 80187e8:	b378      	cbz	r0, 801884a <powf+0x9e>
 80187ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80187ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f2:	d52a      	bpl.n	801884a <powf+0x9e>
 80187f4:	f7fc fca6 	bl	8015144 <__errno>
 80187f8:	2322      	movs	r3, #34	@ 0x22
 80187fa:	e014      	b.n	8018826 <powf+0x7a>
 80187fc:	f000 f834 	bl	8018868 <finitef>
 8018800:	b998      	cbnz	r0, 801882a <powf+0x7e>
 8018802:	eeb0 0a49 	vmov.f32	s0, s18
 8018806:	f000 f82f 	bl	8018868 <finitef>
 801880a:	b170      	cbz	r0, 801882a <powf+0x7e>
 801880c:	eeb0 0a48 	vmov.f32	s0, s16
 8018810:	f000 f82a 	bl	8018868 <finitef>
 8018814:	b148      	cbz	r0, 801882a <powf+0x7e>
 8018816:	eef4 8a68 	vcmp.f32	s17, s17
 801881a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801881e:	d7e9      	bvc.n	80187f4 <powf+0x48>
 8018820:	f7fc fc90 	bl	8015144 <__errno>
 8018824:	2321      	movs	r3, #33	@ 0x21
 8018826:	6003      	str	r3, [r0, #0]
 8018828:	e00f      	b.n	801884a <powf+0x9e>
 801882a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801882e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018832:	d10a      	bne.n	801884a <powf+0x9e>
 8018834:	eeb0 0a49 	vmov.f32	s0, s18
 8018838:	f000 f816 	bl	8018868 <finitef>
 801883c:	b128      	cbz	r0, 801884a <powf+0x9e>
 801883e:	eeb0 0a48 	vmov.f32	s0, s16
 8018842:	f000 f811 	bl	8018868 <finitef>
 8018846:	2800      	cmp	r0, #0
 8018848:	d1d4      	bne.n	80187f4 <powf+0x48>
 801884a:	eeb0 0a68 	vmov.f32	s0, s17
 801884e:	ecbd 8b04 	vpop	{d8-d9}
 8018852:	bd08      	pop	{r3, pc}
 8018854:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8018858:	e7f7      	b.n	801884a <powf+0x9e>

0801885a <fabsf>:
 801885a:	ee10 3a10 	vmov	r3, s0
 801885e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018862:	ee00 3a10 	vmov	s0, r3
 8018866:	4770      	bx	lr

08018868 <finitef>:
 8018868:	ee10 3a10 	vmov	r3, s0
 801886c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8018870:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8018874:	bfac      	ite	ge
 8018876:	2000      	movge	r0, #0
 8018878:	2001      	movlt	r0, #1
 801887a:	4770      	bx	lr

0801887c <__ieee754_sqrtf>:
 801887c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018880:	4770      	bx	lr
 8018882:	0000      	movs	r0, r0
 8018884:	0000      	movs	r0, r0
	...

08018888 <__ieee754_log>:
 8018888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801888c:	ec51 0b10 	vmov	r0, r1, d0
 8018890:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8018894:	b087      	sub	sp, #28
 8018896:	460d      	mov	r5, r1
 8018898:	da26      	bge.n	80188e8 <__ieee754_log+0x60>
 801889a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801889e:	4303      	orrs	r3, r0
 80188a0:	4602      	mov	r2, r0
 80188a2:	d10a      	bne.n	80188ba <__ieee754_log+0x32>
 80188a4:	49ce      	ldr	r1, [pc, #824]	@ (8018be0 <__ieee754_log+0x358>)
 80188a6:	2200      	movs	r2, #0
 80188a8:	2300      	movs	r3, #0
 80188aa:	2000      	movs	r0, #0
 80188ac:	f7e7 fff6 	bl	800089c <__aeabi_ddiv>
 80188b0:	ec41 0b10 	vmov	d0, r0, r1
 80188b4:	b007      	add	sp, #28
 80188b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ba:	2900      	cmp	r1, #0
 80188bc:	da05      	bge.n	80188ca <__ieee754_log+0x42>
 80188be:	460b      	mov	r3, r1
 80188c0:	f7e7 fd0a 	bl	80002d8 <__aeabi_dsub>
 80188c4:	2200      	movs	r2, #0
 80188c6:	2300      	movs	r3, #0
 80188c8:	e7f0      	b.n	80188ac <__ieee754_log+0x24>
 80188ca:	4bc6      	ldr	r3, [pc, #792]	@ (8018be4 <__ieee754_log+0x35c>)
 80188cc:	2200      	movs	r2, #0
 80188ce:	f7e7 febb 	bl	8000648 <__aeabi_dmul>
 80188d2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80188d6:	460d      	mov	r5, r1
 80188d8:	4ac3      	ldr	r2, [pc, #780]	@ (8018be8 <__ieee754_log+0x360>)
 80188da:	4295      	cmp	r5, r2
 80188dc:	dd06      	ble.n	80188ec <__ieee754_log+0x64>
 80188de:	4602      	mov	r2, r0
 80188e0:	460b      	mov	r3, r1
 80188e2:	f7e7 fcfb 	bl	80002dc <__adddf3>
 80188e6:	e7e3      	b.n	80188b0 <__ieee754_log+0x28>
 80188e8:	2300      	movs	r3, #0
 80188ea:	e7f5      	b.n	80188d8 <__ieee754_log+0x50>
 80188ec:	152c      	asrs	r4, r5, #20
 80188ee:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80188f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80188f6:	441c      	add	r4, r3
 80188f8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80188fc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8018900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018904:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8018908:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 801890c:	ea42 0105 	orr.w	r1, r2, r5
 8018910:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8018914:	2200      	movs	r2, #0
 8018916:	4bb5      	ldr	r3, [pc, #724]	@ (8018bec <__ieee754_log+0x364>)
 8018918:	f7e7 fcde 	bl	80002d8 <__aeabi_dsub>
 801891c:	1cab      	adds	r3, r5, #2
 801891e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018922:	2b02      	cmp	r3, #2
 8018924:	4682      	mov	sl, r0
 8018926:	468b      	mov	fp, r1
 8018928:	f04f 0200 	mov.w	r2, #0
 801892c:	dc53      	bgt.n	80189d6 <__ieee754_log+0x14e>
 801892e:	2300      	movs	r3, #0
 8018930:	f7e8 f8f2 	bl	8000b18 <__aeabi_dcmpeq>
 8018934:	b1d0      	cbz	r0, 801896c <__ieee754_log+0xe4>
 8018936:	2c00      	cmp	r4, #0
 8018938:	f000 8120 	beq.w	8018b7c <__ieee754_log+0x2f4>
 801893c:	4620      	mov	r0, r4
 801893e:	f7e7 fe19 	bl	8000574 <__aeabi_i2d>
 8018942:	a391      	add	r3, pc, #580	@ (adr r3, 8018b88 <__ieee754_log+0x300>)
 8018944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018948:	4606      	mov	r6, r0
 801894a:	460f      	mov	r7, r1
 801894c:	f7e7 fe7c 	bl	8000648 <__aeabi_dmul>
 8018950:	a38f      	add	r3, pc, #572	@ (adr r3, 8018b90 <__ieee754_log+0x308>)
 8018952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018956:	4604      	mov	r4, r0
 8018958:	460d      	mov	r5, r1
 801895a:	4630      	mov	r0, r6
 801895c:	4639      	mov	r1, r7
 801895e:	f7e7 fe73 	bl	8000648 <__aeabi_dmul>
 8018962:	4602      	mov	r2, r0
 8018964:	460b      	mov	r3, r1
 8018966:	4620      	mov	r0, r4
 8018968:	4629      	mov	r1, r5
 801896a:	e7ba      	b.n	80188e2 <__ieee754_log+0x5a>
 801896c:	a38a      	add	r3, pc, #552	@ (adr r3, 8018b98 <__ieee754_log+0x310>)
 801896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018972:	4650      	mov	r0, sl
 8018974:	4659      	mov	r1, fp
 8018976:	f7e7 fe67 	bl	8000648 <__aeabi_dmul>
 801897a:	4602      	mov	r2, r0
 801897c:	460b      	mov	r3, r1
 801897e:	2000      	movs	r0, #0
 8018980:	499b      	ldr	r1, [pc, #620]	@ (8018bf0 <__ieee754_log+0x368>)
 8018982:	f7e7 fca9 	bl	80002d8 <__aeabi_dsub>
 8018986:	4652      	mov	r2, sl
 8018988:	4606      	mov	r6, r0
 801898a:	460f      	mov	r7, r1
 801898c:	465b      	mov	r3, fp
 801898e:	4650      	mov	r0, sl
 8018990:	4659      	mov	r1, fp
 8018992:	f7e7 fe59 	bl	8000648 <__aeabi_dmul>
 8018996:	4602      	mov	r2, r0
 8018998:	460b      	mov	r3, r1
 801899a:	4630      	mov	r0, r6
 801899c:	4639      	mov	r1, r7
 801899e:	f7e7 fe53 	bl	8000648 <__aeabi_dmul>
 80189a2:	4606      	mov	r6, r0
 80189a4:	460f      	mov	r7, r1
 80189a6:	b914      	cbnz	r4, 80189ae <__ieee754_log+0x126>
 80189a8:	4632      	mov	r2, r6
 80189aa:	463b      	mov	r3, r7
 80189ac:	e0a0      	b.n	8018af0 <__ieee754_log+0x268>
 80189ae:	4620      	mov	r0, r4
 80189b0:	f7e7 fde0 	bl	8000574 <__aeabi_i2d>
 80189b4:	a374      	add	r3, pc, #464	@ (adr r3, 8018b88 <__ieee754_log+0x300>)
 80189b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ba:	4680      	mov	r8, r0
 80189bc:	4689      	mov	r9, r1
 80189be:	f7e7 fe43 	bl	8000648 <__aeabi_dmul>
 80189c2:	a373      	add	r3, pc, #460	@ (adr r3, 8018b90 <__ieee754_log+0x308>)
 80189c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189c8:	4604      	mov	r4, r0
 80189ca:	460d      	mov	r5, r1
 80189cc:	4640      	mov	r0, r8
 80189ce:	4649      	mov	r1, r9
 80189d0:	f7e7 fe3a 	bl	8000648 <__aeabi_dmul>
 80189d4:	e0a5      	b.n	8018b22 <__ieee754_log+0x29a>
 80189d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80189da:	f7e7 fc7f 	bl	80002dc <__adddf3>
 80189de:	4602      	mov	r2, r0
 80189e0:	460b      	mov	r3, r1
 80189e2:	4650      	mov	r0, sl
 80189e4:	4659      	mov	r1, fp
 80189e6:	f7e7 ff59 	bl	800089c <__aeabi_ddiv>
 80189ea:	e9cd 0100 	strd	r0, r1, [sp]
 80189ee:	4620      	mov	r0, r4
 80189f0:	f7e7 fdc0 	bl	8000574 <__aeabi_i2d>
 80189f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80189f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189fc:	4610      	mov	r0, r2
 80189fe:	4619      	mov	r1, r3
 8018a00:	f7e7 fe22 	bl	8000648 <__aeabi_dmul>
 8018a04:	4602      	mov	r2, r0
 8018a06:	460b      	mov	r3, r1
 8018a08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018a0c:	f7e7 fe1c 	bl	8000648 <__aeabi_dmul>
 8018a10:	a363      	add	r3, pc, #396	@ (adr r3, 8018ba0 <__ieee754_log+0x318>)
 8018a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a16:	4680      	mov	r8, r0
 8018a18:	4689      	mov	r9, r1
 8018a1a:	f7e7 fe15 	bl	8000648 <__aeabi_dmul>
 8018a1e:	a362      	add	r3, pc, #392	@ (adr r3, 8018ba8 <__ieee754_log+0x320>)
 8018a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a24:	f7e7 fc5a 	bl	80002dc <__adddf3>
 8018a28:	4642      	mov	r2, r8
 8018a2a:	464b      	mov	r3, r9
 8018a2c:	f7e7 fe0c 	bl	8000648 <__aeabi_dmul>
 8018a30:	a35f      	add	r3, pc, #380	@ (adr r3, 8018bb0 <__ieee754_log+0x328>)
 8018a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a36:	f7e7 fc51 	bl	80002dc <__adddf3>
 8018a3a:	4642      	mov	r2, r8
 8018a3c:	464b      	mov	r3, r9
 8018a3e:	f7e7 fe03 	bl	8000648 <__aeabi_dmul>
 8018a42:	a35d      	add	r3, pc, #372	@ (adr r3, 8018bb8 <__ieee754_log+0x330>)
 8018a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a48:	f7e7 fc48 	bl	80002dc <__adddf3>
 8018a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018a50:	f7e7 fdfa 	bl	8000648 <__aeabi_dmul>
 8018a54:	a35a      	add	r3, pc, #360	@ (adr r3, 8018bc0 <__ieee754_log+0x338>)
 8018a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a5e:	4640      	mov	r0, r8
 8018a60:	4649      	mov	r1, r9
 8018a62:	f7e7 fdf1 	bl	8000648 <__aeabi_dmul>
 8018a66:	a358      	add	r3, pc, #352	@ (adr r3, 8018bc8 <__ieee754_log+0x340>)
 8018a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a6c:	f7e7 fc36 	bl	80002dc <__adddf3>
 8018a70:	4642      	mov	r2, r8
 8018a72:	464b      	mov	r3, r9
 8018a74:	f7e7 fde8 	bl	8000648 <__aeabi_dmul>
 8018a78:	a355      	add	r3, pc, #340	@ (adr r3, 8018bd0 <__ieee754_log+0x348>)
 8018a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a7e:	f7e7 fc2d 	bl	80002dc <__adddf3>
 8018a82:	4642      	mov	r2, r8
 8018a84:	464b      	mov	r3, r9
 8018a86:	f7e7 fddf 	bl	8000648 <__aeabi_dmul>
 8018a8a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8018a8e:	4602      	mov	r2, r0
 8018a90:	460b      	mov	r3, r1
 8018a92:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8018a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018a9a:	f7e7 fc1f 	bl	80002dc <__adddf3>
 8018a9e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8018aa2:	3551      	adds	r5, #81	@ 0x51
 8018aa4:	4335      	orrs	r5, r6
 8018aa6:	2d00      	cmp	r5, #0
 8018aa8:	4680      	mov	r8, r0
 8018aaa:	4689      	mov	r9, r1
 8018aac:	dd48      	ble.n	8018b40 <__ieee754_log+0x2b8>
 8018aae:	4b50      	ldr	r3, [pc, #320]	@ (8018bf0 <__ieee754_log+0x368>)
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	4650      	mov	r0, sl
 8018ab4:	4659      	mov	r1, fp
 8018ab6:	f7e7 fdc7 	bl	8000648 <__aeabi_dmul>
 8018aba:	4652      	mov	r2, sl
 8018abc:	465b      	mov	r3, fp
 8018abe:	f7e7 fdc3 	bl	8000648 <__aeabi_dmul>
 8018ac2:	4602      	mov	r2, r0
 8018ac4:	460b      	mov	r3, r1
 8018ac6:	4606      	mov	r6, r0
 8018ac8:	460f      	mov	r7, r1
 8018aca:	4640      	mov	r0, r8
 8018acc:	4649      	mov	r1, r9
 8018ace:	f7e7 fc05 	bl	80002dc <__adddf3>
 8018ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ad6:	f7e7 fdb7 	bl	8000648 <__aeabi_dmul>
 8018ada:	4680      	mov	r8, r0
 8018adc:	4689      	mov	r9, r1
 8018ade:	b964      	cbnz	r4, 8018afa <__ieee754_log+0x272>
 8018ae0:	4602      	mov	r2, r0
 8018ae2:	460b      	mov	r3, r1
 8018ae4:	4630      	mov	r0, r6
 8018ae6:	4639      	mov	r1, r7
 8018ae8:	f7e7 fbf6 	bl	80002d8 <__aeabi_dsub>
 8018aec:	4602      	mov	r2, r0
 8018aee:	460b      	mov	r3, r1
 8018af0:	4650      	mov	r0, sl
 8018af2:	4659      	mov	r1, fp
 8018af4:	f7e7 fbf0 	bl	80002d8 <__aeabi_dsub>
 8018af8:	e6da      	b.n	80188b0 <__ieee754_log+0x28>
 8018afa:	a323      	add	r3, pc, #140	@ (adr r3, 8018b88 <__ieee754_log+0x300>)
 8018afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018b04:	f7e7 fda0 	bl	8000648 <__aeabi_dmul>
 8018b08:	a321      	add	r3, pc, #132	@ (adr r3, 8018b90 <__ieee754_log+0x308>)
 8018b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b0e:	4604      	mov	r4, r0
 8018b10:	460d      	mov	r5, r1
 8018b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018b16:	f7e7 fd97 	bl	8000648 <__aeabi_dmul>
 8018b1a:	4642      	mov	r2, r8
 8018b1c:	464b      	mov	r3, r9
 8018b1e:	f7e7 fbdd 	bl	80002dc <__adddf3>
 8018b22:	4602      	mov	r2, r0
 8018b24:	460b      	mov	r3, r1
 8018b26:	4630      	mov	r0, r6
 8018b28:	4639      	mov	r1, r7
 8018b2a:	f7e7 fbd5 	bl	80002d8 <__aeabi_dsub>
 8018b2e:	4652      	mov	r2, sl
 8018b30:	465b      	mov	r3, fp
 8018b32:	f7e7 fbd1 	bl	80002d8 <__aeabi_dsub>
 8018b36:	4602      	mov	r2, r0
 8018b38:	460b      	mov	r3, r1
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	4629      	mov	r1, r5
 8018b3e:	e7d9      	b.n	8018af4 <__ieee754_log+0x26c>
 8018b40:	4602      	mov	r2, r0
 8018b42:	460b      	mov	r3, r1
 8018b44:	4650      	mov	r0, sl
 8018b46:	4659      	mov	r1, fp
 8018b48:	f7e7 fbc6 	bl	80002d8 <__aeabi_dsub>
 8018b4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018b50:	f7e7 fd7a 	bl	8000648 <__aeabi_dmul>
 8018b54:	4606      	mov	r6, r0
 8018b56:	460f      	mov	r7, r1
 8018b58:	2c00      	cmp	r4, #0
 8018b5a:	f43f af25 	beq.w	80189a8 <__ieee754_log+0x120>
 8018b5e:	a30a      	add	r3, pc, #40	@ (adr r3, 8018b88 <__ieee754_log+0x300>)
 8018b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018b68:	f7e7 fd6e 	bl	8000648 <__aeabi_dmul>
 8018b6c:	a308      	add	r3, pc, #32	@ (adr r3, 8018b90 <__ieee754_log+0x308>)
 8018b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b72:	4604      	mov	r4, r0
 8018b74:	460d      	mov	r5, r1
 8018b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018b7a:	e729      	b.n	80189d0 <__ieee754_log+0x148>
 8018b7c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8018bd8 <__ieee754_log+0x350>
 8018b80:	e698      	b.n	80188b4 <__ieee754_log+0x2c>
 8018b82:	bf00      	nop
 8018b84:	f3af 8000 	nop.w
 8018b88:	fee00000 	.word	0xfee00000
 8018b8c:	3fe62e42 	.word	0x3fe62e42
 8018b90:	35793c76 	.word	0x35793c76
 8018b94:	3dea39ef 	.word	0x3dea39ef
 8018b98:	55555555 	.word	0x55555555
 8018b9c:	3fd55555 	.word	0x3fd55555
 8018ba0:	df3e5244 	.word	0xdf3e5244
 8018ba4:	3fc2f112 	.word	0x3fc2f112
 8018ba8:	96cb03de 	.word	0x96cb03de
 8018bac:	3fc74664 	.word	0x3fc74664
 8018bb0:	94229359 	.word	0x94229359
 8018bb4:	3fd24924 	.word	0x3fd24924
 8018bb8:	55555593 	.word	0x55555593
 8018bbc:	3fe55555 	.word	0x3fe55555
 8018bc0:	d078c69f 	.word	0xd078c69f
 8018bc4:	3fc39a09 	.word	0x3fc39a09
 8018bc8:	1d8e78af 	.word	0x1d8e78af
 8018bcc:	3fcc71c5 	.word	0x3fcc71c5
 8018bd0:	9997fa04 	.word	0x9997fa04
 8018bd4:	3fd99999 	.word	0x3fd99999
	...
 8018be0:	c3500000 	.word	0xc3500000
 8018be4:	43500000 	.word	0x43500000
 8018be8:	7fefffff 	.word	0x7fefffff
 8018bec:	3ff00000 	.word	0x3ff00000
 8018bf0:	3fe00000 	.word	0x3fe00000

08018bf4 <__ieee754_powf>:
 8018bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bf8:	ee10 4a90 	vmov	r4, s1
 8018bfc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8018c00:	ed2d 8b02 	vpush	{d8}
 8018c04:	ee10 6a10 	vmov	r6, s0
 8018c08:	eeb0 8a40 	vmov.f32	s16, s0
 8018c0c:	eef0 8a60 	vmov.f32	s17, s1
 8018c10:	d10c      	bne.n	8018c2c <__ieee754_powf+0x38>
 8018c12:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8018c16:	0076      	lsls	r6, r6, #1
 8018c18:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8018c1c:	f240 8274 	bls.w	8019108 <__ieee754_powf+0x514>
 8018c20:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018c24:	ecbd 8b02 	vpop	{d8}
 8018c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c2c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8018c30:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8018c34:	d802      	bhi.n	8018c3c <__ieee754_powf+0x48>
 8018c36:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018c3a:	d908      	bls.n	8018c4e <__ieee754_powf+0x5a>
 8018c3c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8018c40:	d1ee      	bne.n	8018c20 <__ieee754_powf+0x2c>
 8018c42:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8018c46:	0064      	lsls	r4, r4, #1
 8018c48:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8018c4c:	e7e6      	b.n	8018c1c <__ieee754_powf+0x28>
 8018c4e:	2e00      	cmp	r6, #0
 8018c50:	da1f      	bge.n	8018c92 <__ieee754_powf+0x9e>
 8018c52:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8018c56:	f080 8260 	bcs.w	801911a <__ieee754_powf+0x526>
 8018c5a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8018c5e:	d32f      	bcc.n	8018cc0 <__ieee754_powf+0xcc>
 8018c60:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8018c64:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8018c68:	fa49 f503 	asr.w	r5, r9, r3
 8018c6c:	fa05 f303 	lsl.w	r3, r5, r3
 8018c70:	454b      	cmp	r3, r9
 8018c72:	d123      	bne.n	8018cbc <__ieee754_powf+0xc8>
 8018c74:	f005 0501 	and.w	r5, r5, #1
 8018c78:	f1c5 0502 	rsb	r5, r5, #2
 8018c7c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8018c80:	d11f      	bne.n	8018cc2 <__ieee754_powf+0xce>
 8018c82:	2c00      	cmp	r4, #0
 8018c84:	f280 8246 	bge.w	8019114 <__ieee754_powf+0x520>
 8018c88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018c8c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018c90:	e7c8      	b.n	8018c24 <__ieee754_powf+0x30>
 8018c92:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018c96:	d111      	bne.n	8018cbc <__ieee754_powf+0xc8>
 8018c98:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8018c9c:	f000 8234 	beq.w	8019108 <__ieee754_powf+0x514>
 8018ca0:	d906      	bls.n	8018cb0 <__ieee754_powf+0xbc>
 8018ca2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8018fb8 <__ieee754_powf+0x3c4>
 8018ca6:	2c00      	cmp	r4, #0
 8018ca8:	bfa8      	it	ge
 8018caa:	eeb0 0a68 	vmovge.f32	s0, s17
 8018cae:	e7b9      	b.n	8018c24 <__ieee754_powf+0x30>
 8018cb0:	2c00      	cmp	r4, #0
 8018cb2:	f280 822c 	bge.w	801910e <__ieee754_powf+0x51a>
 8018cb6:	eeb1 0a68 	vneg.f32	s0, s17
 8018cba:	e7b3      	b.n	8018c24 <__ieee754_powf+0x30>
 8018cbc:	2500      	movs	r5, #0
 8018cbe:	e7dd      	b.n	8018c7c <__ieee754_powf+0x88>
 8018cc0:	2500      	movs	r5, #0
 8018cc2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018cc6:	d102      	bne.n	8018cce <__ieee754_powf+0xda>
 8018cc8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018ccc:	e7aa      	b.n	8018c24 <__ieee754_powf+0x30>
 8018cce:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8018cd2:	f040 8227 	bne.w	8019124 <__ieee754_powf+0x530>
 8018cd6:	2e00      	cmp	r6, #0
 8018cd8:	f2c0 8224 	blt.w	8019124 <__ieee754_powf+0x530>
 8018cdc:	eeb0 0a48 	vmov.f32	s0, s16
 8018ce0:	ecbd 8b02 	vpop	{d8}
 8018ce4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ce8:	f7ff bdc8 	b.w	801887c <__ieee754_sqrtf>
 8018cec:	2d01      	cmp	r5, #1
 8018cee:	d199      	bne.n	8018c24 <__ieee754_powf+0x30>
 8018cf0:	eeb1 0a40 	vneg.f32	s0, s0
 8018cf4:	e796      	b.n	8018c24 <__ieee754_powf+0x30>
 8018cf6:	0ff0      	lsrs	r0, r6, #31
 8018cf8:	3801      	subs	r0, #1
 8018cfa:	ea55 0300 	orrs.w	r3, r5, r0
 8018cfe:	d104      	bne.n	8018d0a <__ieee754_powf+0x116>
 8018d00:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018d04:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018d08:	e78c      	b.n	8018c24 <__ieee754_powf+0x30>
 8018d0a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8018d0e:	d96d      	bls.n	8018dec <__ieee754_powf+0x1f8>
 8018d10:	4baa      	ldr	r3, [pc, #680]	@ (8018fbc <__ieee754_powf+0x3c8>)
 8018d12:	4598      	cmp	r8, r3
 8018d14:	d808      	bhi.n	8018d28 <__ieee754_powf+0x134>
 8018d16:	2c00      	cmp	r4, #0
 8018d18:	da0b      	bge.n	8018d32 <__ieee754_powf+0x13e>
 8018d1a:	2000      	movs	r0, #0
 8018d1c:	ecbd 8b02 	vpop	{d8}
 8018d20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d24:	f000 baba 	b.w	801929c <__math_oflowf>
 8018d28:	4ba5      	ldr	r3, [pc, #660]	@ (8018fc0 <__ieee754_powf+0x3cc>)
 8018d2a:	4598      	cmp	r8, r3
 8018d2c:	d908      	bls.n	8018d40 <__ieee754_powf+0x14c>
 8018d2e:	2c00      	cmp	r4, #0
 8018d30:	dcf3      	bgt.n	8018d1a <__ieee754_powf+0x126>
 8018d32:	2000      	movs	r0, #0
 8018d34:	ecbd 8b02 	vpop	{d8}
 8018d38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d3c:	f000 baa8 	b.w	8019290 <__math_uflowf>
 8018d40:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018d44:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018d48:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8018fc4 <__ieee754_powf+0x3d0>
 8018d4c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8018d50:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018d54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018d58:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018d5c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018d60:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8018fc8 <__ieee754_powf+0x3d4>
 8018d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d68:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8018fcc <__ieee754_powf+0x3d8>
 8018d6c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8018d70:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8018fd0 <__ieee754_powf+0x3dc>
 8018d74:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018d78:	eeb0 7a67 	vmov.f32	s14, s15
 8018d7c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8018d80:	ee17 3a10 	vmov	r3, s14
 8018d84:	f36f 030b 	bfc	r3, #0, #12
 8018d88:	ee07 3a10 	vmov	s14, r3
 8018d8c:	eeb0 6a47 	vmov.f32	s12, s14
 8018d90:	eea0 6a66 	vfms.f32	s12, s0, s13
 8018d94:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018d98:	3d01      	subs	r5, #1
 8018d9a:	4305      	orrs	r5, r0
 8018d9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018da0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018da4:	f36f 040b 	bfc	r4, #0, #12
 8018da8:	bf18      	it	ne
 8018daa:	eeb0 8a66 	vmovne.f32	s16, s13
 8018dae:	ee06 4a90 	vmov	s13, r4
 8018db2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018db6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8018dba:	ee67 7a26 	vmul.f32	s15, s14, s13
 8018dbe:	eee6 0a07 	vfma.f32	s1, s12, s14
 8018dc2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018dc6:	ee17 1a10 	vmov	r1, s14
 8018dca:	2900      	cmp	r1, #0
 8018dcc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018dd0:	f340 80dd 	ble.w	8018f8e <__ieee754_powf+0x39a>
 8018dd4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8018dd8:	f240 80ca 	bls.w	8018f70 <__ieee754_powf+0x37c>
 8018ddc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de4:	bf4c      	ite	mi
 8018de6:	2001      	movmi	r0, #1
 8018de8:	2000      	movpl	r0, #0
 8018dea:	e797      	b.n	8018d1c <__ieee754_powf+0x128>
 8018dec:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8018df0:	bf01      	itttt	eq
 8018df2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018fd4 <__ieee754_powf+0x3e0>
 8018df6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018dfa:	f06f 0317 	mvneq.w	r3, #23
 8018dfe:	ee17 7a90 	vmoveq	r7, s15
 8018e02:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8018e06:	bf18      	it	ne
 8018e08:	2300      	movne	r3, #0
 8018e0a:	3a7f      	subs	r2, #127	@ 0x7f
 8018e0c:	441a      	add	r2, r3
 8018e0e:	4b72      	ldr	r3, [pc, #456]	@ (8018fd8 <__ieee754_powf+0x3e4>)
 8018e10:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018e14:	429f      	cmp	r7, r3
 8018e16:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8018e1a:	dd06      	ble.n	8018e2a <__ieee754_powf+0x236>
 8018e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8018fdc <__ieee754_powf+0x3e8>)
 8018e1e:	429f      	cmp	r7, r3
 8018e20:	f340 80a4 	ble.w	8018f6c <__ieee754_powf+0x378>
 8018e24:	3201      	adds	r2, #1
 8018e26:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8018e2a:	2600      	movs	r6, #0
 8018e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8018fe0 <__ieee754_powf+0x3ec>)
 8018e2e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8018e32:	ee07 1a10 	vmov	s14, r1
 8018e36:	edd3 5a00 	vldr	s11, [r3]
 8018e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8018fe4 <__ieee754_powf+0x3f0>)
 8018e3c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8018e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018e44:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8018e48:	1049      	asrs	r1, r1, #1
 8018e4a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8018e4e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8018e52:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8018e56:	ee37 6a65 	vsub.f32	s12, s14, s11
 8018e5a:	ee07 1a90 	vmov	s15, r1
 8018e5e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8018e62:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8018e66:	ee15 7a10 	vmov	r7, s10
 8018e6a:	401f      	ands	r7, r3
 8018e6c:	ee06 7a90 	vmov	s13, r7
 8018e70:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8018e74:	ee37 7a65 	vsub.f32	s14, s14, s11
 8018e78:	ee65 7a05 	vmul.f32	s15, s10, s10
 8018e7c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018e80:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8018fe8 <__ieee754_powf+0x3f4>
 8018e84:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018fec <__ieee754_powf+0x3f8>
 8018e88:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018e8c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8018ff0 <__ieee754_powf+0x3fc>
 8018e90:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018e94:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018fc4 <__ieee754_powf+0x3d0>
 8018e98:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018e9c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018ff4 <__ieee754_powf+0x400>
 8018ea0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018ea4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8018ff8 <__ieee754_powf+0x404>
 8018ea8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018eac:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018eb0:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018eb4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018eb8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018ebc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8018ec0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018ec4:	eef0 5a67 	vmov.f32	s11, s15
 8018ec8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018ecc:	ee75 5a87 	vadd.f32	s11, s11, s14
 8018ed0:	ee15 1a90 	vmov	r1, s11
 8018ed4:	4019      	ands	r1, r3
 8018ed6:	ee05 1a90 	vmov	s11, r1
 8018eda:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018ede:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8018ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ee6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018eea:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018eee:	eeb0 6a67 	vmov.f32	s12, s15
 8018ef2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018ef6:	ee16 1a10 	vmov	r1, s12
 8018efa:	4019      	ands	r1, r3
 8018efc:	ee06 1a10 	vmov	s12, r1
 8018f00:	eeb0 7a46 	vmov.f32	s14, s12
 8018f04:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018f08:	493c      	ldr	r1, [pc, #240]	@ (8018ffc <__ieee754_powf+0x408>)
 8018f0a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8018f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f12:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8019000 <__ieee754_powf+0x40c>
 8018f16:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8019004 <__ieee754_powf+0x410>
 8018f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f1e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8019008 <__ieee754_powf+0x414>
 8018f22:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018f26:	ed91 7a00 	vldr	s14, [r1]
 8018f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018f2e:	ee07 2a10 	vmov	s14, r2
 8018f32:	4a36      	ldr	r2, [pc, #216]	@ (801900c <__ieee754_powf+0x418>)
 8018f34:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018f38:	eeb0 7a67 	vmov.f32	s14, s15
 8018f3c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8018f40:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8018f44:	ed92 5a00 	vldr	s10, [r2]
 8018f48:	ee37 7a05 	vadd.f32	s14, s14, s10
 8018f4c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018f50:	ee17 2a10 	vmov	r2, s14
 8018f54:	401a      	ands	r2, r3
 8018f56:	ee07 2a10 	vmov	s14, r2
 8018f5a:	ee77 6a66 	vsub.f32	s13, s14, s13
 8018f5e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8018f62:	eee6 6a65 	vfms.f32	s13, s12, s11
 8018f66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018f6a:	e715      	b.n	8018d98 <__ieee754_powf+0x1a4>
 8018f6c:	2601      	movs	r6, #1
 8018f6e:	e75d      	b.n	8018e2c <__ieee754_powf+0x238>
 8018f70:	d152      	bne.n	8019018 <__ieee754_powf+0x424>
 8018f72:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8019010 <__ieee754_powf+0x41c>
 8018f76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018f7a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018f7e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f86:	f73f af29 	bgt.w	8018ddc <__ieee754_powf+0x1e8>
 8018f8a:	2386      	movs	r3, #134	@ 0x86
 8018f8c:	e048      	b.n	8019020 <__ieee754_powf+0x42c>
 8018f8e:	4a21      	ldr	r2, [pc, #132]	@ (8019014 <__ieee754_powf+0x420>)
 8018f90:	4293      	cmp	r3, r2
 8018f92:	d907      	bls.n	8018fa4 <__ieee754_powf+0x3b0>
 8018f94:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f9c:	bf4c      	ite	mi
 8018f9e:	2001      	movmi	r0, #1
 8018fa0:	2000      	movpl	r0, #0
 8018fa2:	e6c7      	b.n	8018d34 <__ieee754_powf+0x140>
 8018fa4:	d138      	bne.n	8019018 <__ieee754_powf+0x424>
 8018fa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018faa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8018fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fb2:	dbea      	blt.n	8018f8a <__ieee754_powf+0x396>
 8018fb4:	e7ee      	b.n	8018f94 <__ieee754_powf+0x3a0>
 8018fb6:	bf00      	nop
 8018fb8:	00000000 	.word	0x00000000
 8018fbc:	3f7ffff3 	.word	0x3f7ffff3
 8018fc0:	3f800007 	.word	0x3f800007
 8018fc4:	3eaaaaab 	.word	0x3eaaaaab
 8018fc8:	3fb8aa00 	.word	0x3fb8aa00
 8018fcc:	3fb8aa3b 	.word	0x3fb8aa3b
 8018fd0:	36eca570 	.word	0x36eca570
 8018fd4:	4b800000 	.word	0x4b800000
 8018fd8:	001cc471 	.word	0x001cc471
 8018fdc:	005db3d6 	.word	0x005db3d6
 8018fe0:	0801ba2c 	.word	0x0801ba2c
 8018fe4:	fffff000 	.word	0xfffff000
 8018fe8:	3e6c3255 	.word	0x3e6c3255
 8018fec:	3e53f142 	.word	0x3e53f142
 8018ff0:	3e8ba305 	.word	0x3e8ba305
 8018ff4:	3edb6db7 	.word	0x3edb6db7
 8018ff8:	3f19999a 	.word	0x3f19999a
 8018ffc:	0801ba1c 	.word	0x0801ba1c
 8019000:	3f76384f 	.word	0x3f76384f
 8019004:	3f763800 	.word	0x3f763800
 8019008:	369dc3a0 	.word	0x369dc3a0
 801900c:	0801ba24 	.word	0x0801ba24
 8019010:	3338aa3c 	.word	0x3338aa3c
 8019014:	43160000 	.word	0x43160000
 8019018:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801901c:	d96f      	bls.n	80190fe <__ieee754_powf+0x50a>
 801901e:	15db      	asrs	r3, r3, #23
 8019020:	3b7e      	subs	r3, #126	@ 0x7e
 8019022:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8019026:	4118      	asrs	r0, r3
 8019028:	4408      	add	r0, r1
 801902a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801902e:	4a4e      	ldr	r2, [pc, #312]	@ (8019168 <__ieee754_powf+0x574>)
 8019030:	3b7f      	subs	r3, #127	@ 0x7f
 8019032:	411a      	asrs	r2, r3
 8019034:	4002      	ands	r2, r0
 8019036:	ee07 2a10 	vmov	s14, r2
 801903a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801903e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8019042:	f1c3 0317 	rsb	r3, r3, #23
 8019046:	4118      	asrs	r0, r3
 8019048:	2900      	cmp	r1, #0
 801904a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801904e:	bfb8      	it	lt
 8019050:	4240      	neglt	r0, r0
 8019052:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8019056:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801916c <__ieee754_powf+0x578>
 801905a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8019170 <__ieee754_powf+0x57c>
 801905e:	ee16 3a90 	vmov	r3, s13
 8019062:	f36f 030b 	bfc	r3, #0, #12
 8019066:	ee06 3a90 	vmov	s13, r3
 801906a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801906e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019072:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019076:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8019174 <__ieee754_powf+0x580>
 801907a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801907e:	eee0 7a87 	vfma.f32	s15, s1, s14
 8019082:	eeb0 7a67 	vmov.f32	s14, s15
 8019086:	eea6 7a86 	vfma.f32	s14, s13, s12
 801908a:	eef0 5a47 	vmov.f32	s11, s14
 801908e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8019092:	ee67 6a07 	vmul.f32	s13, s14, s14
 8019096:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801909a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8019178 <__ieee754_powf+0x584>
 801909e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 801917c <__ieee754_powf+0x588>
 80190a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80190a6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8019180 <__ieee754_powf+0x58c>
 80190aa:	eee6 5a26 	vfma.f32	s11, s12, s13
 80190ae:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8019184 <__ieee754_powf+0x590>
 80190b2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80190b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8019188 <__ieee754_powf+0x594>
 80190ba:	eee6 5a26 	vfma.f32	s11, s12, s13
 80190be:	eeb0 6a47 	vmov.f32	s12, s14
 80190c2:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80190c6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80190ca:	ee67 5a06 	vmul.f32	s11, s14, s12
 80190ce:	ee36 6a66 	vsub.f32	s12, s12, s13
 80190d2:	eee7 7a27 	vfma.f32	s15, s14, s15
 80190d6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80190da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80190de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80190e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80190e6:	ee10 3a10 	vmov	r3, s0
 80190ea:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80190ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80190f2:	da06      	bge.n	8019102 <__ieee754_powf+0x50e>
 80190f4:	f000 f84c 	bl	8019190 <scalbnf>
 80190f8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80190fc:	e592      	b.n	8018c24 <__ieee754_powf+0x30>
 80190fe:	2000      	movs	r0, #0
 8019100:	e7a7      	b.n	8019052 <__ieee754_powf+0x45e>
 8019102:	ee00 3a10 	vmov	s0, r3
 8019106:	e7f7      	b.n	80190f8 <__ieee754_powf+0x504>
 8019108:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801910c:	e58a      	b.n	8018c24 <__ieee754_powf+0x30>
 801910e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801918c <__ieee754_powf+0x598>
 8019112:	e587      	b.n	8018c24 <__ieee754_powf+0x30>
 8019114:	eeb0 0a48 	vmov.f32	s0, s16
 8019118:	e584      	b.n	8018c24 <__ieee754_powf+0x30>
 801911a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801911e:	f43f adbb 	beq.w	8018c98 <__ieee754_powf+0xa4>
 8019122:	2502      	movs	r5, #2
 8019124:	eeb0 0a48 	vmov.f32	s0, s16
 8019128:	f7ff fb97 	bl	801885a <fabsf>
 801912c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8019130:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8019134:	4647      	mov	r7, r8
 8019136:	d003      	beq.n	8019140 <__ieee754_powf+0x54c>
 8019138:	f1b8 0f00 	cmp.w	r8, #0
 801913c:	f47f addb 	bne.w	8018cf6 <__ieee754_powf+0x102>
 8019140:	2c00      	cmp	r4, #0
 8019142:	bfbc      	itt	lt
 8019144:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8019148:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801914c:	2e00      	cmp	r6, #0
 801914e:	f6bf ad69 	bge.w	8018c24 <__ieee754_powf+0x30>
 8019152:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8019156:	ea58 0805 	orrs.w	r8, r8, r5
 801915a:	f47f adc7 	bne.w	8018cec <__ieee754_powf+0xf8>
 801915e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019162:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019166:	e55d      	b.n	8018c24 <__ieee754_powf+0x30>
 8019168:	ff800000 	.word	0xff800000
 801916c:	3f317218 	.word	0x3f317218
 8019170:	3f317200 	.word	0x3f317200
 8019174:	35bfbe8c 	.word	0x35bfbe8c
 8019178:	b5ddea0e 	.word	0xb5ddea0e
 801917c:	3331bb4c 	.word	0x3331bb4c
 8019180:	388ab355 	.word	0x388ab355
 8019184:	bb360b61 	.word	0xbb360b61
 8019188:	3e2aaaab 	.word	0x3e2aaaab
 801918c:	00000000 	.word	0x00000000

08019190 <scalbnf>:
 8019190:	ee10 3a10 	vmov	r3, s0
 8019194:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019198:	d02b      	beq.n	80191f2 <scalbnf+0x62>
 801919a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801919e:	d302      	bcc.n	80191a6 <scalbnf+0x16>
 80191a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80191a4:	4770      	bx	lr
 80191a6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80191aa:	d123      	bne.n	80191f4 <scalbnf+0x64>
 80191ac:	4b24      	ldr	r3, [pc, #144]	@ (8019240 <scalbnf+0xb0>)
 80191ae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019244 <scalbnf+0xb4>
 80191b2:	4298      	cmp	r0, r3
 80191b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80191b8:	db17      	blt.n	80191ea <scalbnf+0x5a>
 80191ba:	ee10 3a10 	vmov	r3, s0
 80191be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80191c2:	3a19      	subs	r2, #25
 80191c4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80191c8:	4288      	cmp	r0, r1
 80191ca:	dd15      	ble.n	80191f8 <scalbnf+0x68>
 80191cc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8019248 <scalbnf+0xb8>
 80191d0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801924c <scalbnf+0xbc>
 80191d4:	ee10 3a10 	vmov	r3, s0
 80191d8:	eeb0 7a67 	vmov.f32	s14, s15
 80191dc:	2b00      	cmp	r3, #0
 80191de:	bfb8      	it	lt
 80191e0:	eef0 7a66 	vmovlt.f32	s15, s13
 80191e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80191e8:	4770      	bx	lr
 80191ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019250 <scalbnf+0xc0>
 80191ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 80191f2:	4770      	bx	lr
 80191f4:	0dd2      	lsrs	r2, r2, #23
 80191f6:	e7e5      	b.n	80191c4 <scalbnf+0x34>
 80191f8:	4410      	add	r0, r2
 80191fa:	28fe      	cmp	r0, #254	@ 0xfe
 80191fc:	dce6      	bgt.n	80191cc <scalbnf+0x3c>
 80191fe:	2800      	cmp	r0, #0
 8019200:	dd06      	ble.n	8019210 <scalbnf+0x80>
 8019202:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019206:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801920a:	ee00 3a10 	vmov	s0, r3
 801920e:	4770      	bx	lr
 8019210:	f110 0f16 	cmn.w	r0, #22
 8019214:	da09      	bge.n	801922a <scalbnf+0x9a>
 8019216:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019250 <scalbnf+0xc0>
 801921a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8019254 <scalbnf+0xc4>
 801921e:	ee10 3a10 	vmov	r3, s0
 8019222:	eeb0 7a67 	vmov.f32	s14, s15
 8019226:	2b00      	cmp	r3, #0
 8019228:	e7d9      	b.n	80191de <scalbnf+0x4e>
 801922a:	3019      	adds	r0, #25
 801922c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019230:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019234:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8019258 <scalbnf+0xc8>
 8019238:	ee07 3a90 	vmov	s15, r3
 801923c:	e7d7      	b.n	80191ee <scalbnf+0x5e>
 801923e:	bf00      	nop
 8019240:	ffff3cb0 	.word	0xffff3cb0
 8019244:	4c000000 	.word	0x4c000000
 8019248:	7149f2ca 	.word	0x7149f2ca
 801924c:	f149f2ca 	.word	0xf149f2ca
 8019250:	0da24260 	.word	0x0da24260
 8019254:	8da24260 	.word	0x8da24260
 8019258:	33000000 	.word	0x33000000

0801925c <with_errnof>:
 801925c:	b510      	push	{r4, lr}
 801925e:	ed2d 8b02 	vpush	{d8}
 8019262:	eeb0 8a40 	vmov.f32	s16, s0
 8019266:	4604      	mov	r4, r0
 8019268:	f7fb ff6c 	bl	8015144 <__errno>
 801926c:	eeb0 0a48 	vmov.f32	s0, s16
 8019270:	ecbd 8b02 	vpop	{d8}
 8019274:	6004      	str	r4, [r0, #0]
 8019276:	bd10      	pop	{r4, pc}

08019278 <xflowf>:
 8019278:	b130      	cbz	r0, 8019288 <xflowf+0x10>
 801927a:	eef1 7a40 	vneg.f32	s15, s0
 801927e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019282:	2022      	movs	r0, #34	@ 0x22
 8019284:	f7ff bfea 	b.w	801925c <with_errnof>
 8019288:	eef0 7a40 	vmov.f32	s15, s0
 801928c:	e7f7      	b.n	801927e <xflowf+0x6>
	...

08019290 <__math_uflowf>:
 8019290:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019298 <__math_uflowf+0x8>
 8019294:	f7ff bff0 	b.w	8019278 <xflowf>
 8019298:	10000000 	.word	0x10000000

0801929c <__math_oflowf>:
 801929c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80192a4 <__math_oflowf+0x8>
 80192a0:	f7ff bfea 	b.w	8019278 <xflowf>
 80192a4:	70000000 	.word	0x70000000

080192a8 <_init>:
 80192a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192aa:	bf00      	nop
 80192ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192ae:	bc08      	pop	{r3}
 80192b0:	469e      	mov	lr, r3
 80192b2:	4770      	bx	lr

080192b4 <_fini>:
 80192b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192b6:	bf00      	nop
 80192b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192ba:	bc08      	pop	{r3}
 80192bc:	469e      	mov	lr, r3
 80192be:	4770      	bx	lr
