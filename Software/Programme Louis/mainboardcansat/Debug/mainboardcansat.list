
mainboardcansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c28  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08012e08  08012e08  00013e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013548  08013548  000151f8  2**0
                  CONTENTS
  4 .ARM          00000008  08013548  08013548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013550  08013550  000151f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013550  08013550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013554  08013554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08013558  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001324  200001f8  08013750  000151f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000151c  08013750  0001551c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a708  00000000  00000000  00015228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cc8  00000000  00000000  0003f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022c0  00000000  00000000  000455f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001adf  00000000  00000000  000478b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027361  00000000  00000000  00049397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fb67  00000000  00000000  000706f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a10  00000000  00000000  000a025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a980  00000000  00000000  00188cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00193634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012df0 	.word	0x08012df0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	08012df0 	.word	0x08012df0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800103e:	2354      	movs	r3, #84	@ 0x54
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2210      	movs	r2, #16
 8001054:	21d6      	movs	r1, #214	@ 0xd6
 8001056:	4838      	ldr	r0, [pc, #224]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001058:	f005 fd6c 	bl	8006b34 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 800105c:	234c      	movs	r3, #76	@ 0x4c
 800105e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2211      	movs	r2, #17
 8001072:	21d6      	movs	r1, #214	@ 0xd6
 8001074:	4830      	ldr	r0, [pc, #192]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001076:	f005 fd5d 	bl	8006b34 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2212      	movs	r2, #18
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4829      	ldr	r0, [pc, #164]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f005 fd4e 	bl	8006b34 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2215      	movs	r2, #21
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4821      	ldr	r0, [pc, #132]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f005 fd3f 	bl	8006b34 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2216      	movs	r2, #22
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	481a      	ldr	r0, [pc, #104]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f005 fd30 	bl	8006b34 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2217      	movs	r2, #23
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4812      	ldr	r0, [pc, #72]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f005 fd21 	bl	8006b34 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	221e      	movs	r2, #30
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f005 fe26 	bl	8006d5c <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 800111a:	4808      	ldr	r0, [pc, #32]	@ (800113c <Init_HighPerf_Mode_6_axis+0x108>)
 800111c:	f00f f8f8 	bl	8010310 <puts>
        }
        if (status & 0x02) {
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <Init_HighPerf_Mode_6_axis+0x10c>)
 800112c:	f00f f8f0 	bl	8010310 <puts>
        }

}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000408 	.word	0x20000408
 800113c:	08012e44 	.word	0x08012e44
 8001140:	08012e78 	.word	0x08012e78

08001144 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	@ 0x38
 8001148:	af04      	add	r7, sp, #16
 800114a:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 030b 	add.w	r3, r7, #11
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	221e      	movs	r2, #30
 8001160:	21d6      	movs	r1, #214	@ 0xd6
 8001162:	486d      	ldr	r0, [pc, #436]	@ (8001318 <Read_sensor_data+0x1d4>)
 8001164:	f005 fdfa 	bl	8006d5c <HAL_I2C_Mem_Read>
 8001168:	4603      	mov	r3, r0
 800116a:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <Read_sensor_data+0x32>
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	e0cc      	b.n	8001310 <Read_sensor_data+0x1cc>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <Read_sensor_data+0x46>
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0c0      	b.n	8001310 <Read_sensor_data+0x1cc>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
 8001192:	e043      	b.n	800121c <Read_sensor_data+0xd8>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001196:	3311      	adds	r3, #17
 8001198:	b2db      	uxtb	r3, r3
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 800119e:	7f3b      	ldrb	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011a4:	7f3b      	ldrb	r3, [r7, #28]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f107 030a 	add.w	r3, r7, #10
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	21d6      	movs	r1, #214	@ 0xd6
 80011bc:	4856      	ldr	r0, [pc, #344]	@ (8001318 <Read_sensor_data+0x1d4>)
 80011be:	f005 fdcd 	bl	8006d5c <HAL_I2C_Mem_Read>
 80011c2:	4603      	mov	r3, r0
 80011c4:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <Read_sensor_data+0x8c>
 80011cc:	7ffb      	ldrb	r3, [r7, #31]
 80011ce:	e09f      	b.n	8001310 <Read_sensor_data+0x1cc>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80011d0:	7efb      	ldrb	r3, [r7, #27]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	f107 0309 	add.w	r3, r7, #9
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	21d6      	movs	r1, #214	@ 0xd6
 80011e8:	484b      	ldr	r0, [pc, #300]	@ (8001318 <Read_sensor_data+0x1d4>)
 80011ea:	f005 fdb7 	bl	8006d5c <HAL_I2C_Mem_Read>
 80011ee:	4603      	mov	r3, r0
 80011f0:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <Read_sensor_data+0xb8>
 80011f8:	7ffb      	ldrb	r3, [r7, #31]
 80011fa:	e089      	b.n	8001310 <Read_sensor_data+0x1cc>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80011fc:	7a7b      	ldrb	r3, [r7, #9]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	7abb      	ldrb	r3, [r7, #10]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21a      	sxth	r2, r3
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	3328      	adds	r3, #40	@ 0x28
 8001210:	443b      	add	r3, r7
 8001212:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	2b02      	cmp	r3, #2
 8001220:	ddb8      	ble.n	8001194 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	e043      	b.n	80012b0 <Read_sensor_data+0x16c>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	3314      	adds	r3, #20
 800122c:	b2db      	uxtb	r3, r3
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001232:	7fbb      	ldrb	r3, [r7, #30]
 8001234:	3301      	adds	r3, #1
 8001236:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001238:	7fbb      	ldrb	r3, [r7, #30]
 800123a:	b29a      	uxth	r2, r3
 800123c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030a 	add.w	r3, r7, #10
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	21d6      	movs	r1, #214	@ 0xd6
 8001250:	4831      	ldr	r0, [pc, #196]	@ (8001318 <Read_sensor_data+0x1d4>)
 8001252:	f005 fd83 	bl	8006d5c <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800125a:	7ffb      	ldrb	r3, [r7, #31]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <Read_sensor_data+0x120>
 8001260:	7ffb      	ldrb	r3, [r7, #31]
 8001262:	e055      	b.n	8001310 <Read_sensor_data+0x1cc>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001264:	7f7b      	ldrb	r3, [r7, #29]
 8001266:	b29a      	uxth	r2, r3
 8001268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f107 0309 	add.w	r3, r7, #9
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	21d6      	movs	r1, #214	@ 0xd6
 800127c:	4826      	ldr	r0, [pc, #152]	@ (8001318 <Read_sensor_data+0x1d4>)
 800127e:	f005 fd6d 	bl	8006d5c <HAL_I2C_Mem_Read>
 8001282:	4603      	mov	r3, r0
 8001284:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <Read_sensor_data+0x14c>
 800128c:	7ffb      	ldrb	r3, [r7, #31]
 800128e:	e03f      	b.n	8001310 <Read_sensor_data+0x1cc>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001290:	7a7b      	ldrb	r3, [r7, #9]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	7abb      	ldrb	r3, [r7, #10]
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21a      	sxth	r2, r3
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	3328      	adds	r3, #40	@ 0x28
 80012a4:	443b      	add	r3, r7
 80012a6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	3301      	adds	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	ddb8      	ble.n	8001228 <Read_sensor_data+0xe4>
	}
	data->AccelX = accel_data[0];
 80012b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]
	data->AccelY = accel_data[1];
 80012c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	605a      	str	r2, [r3, #4]
	data->AccelZ = accel_data[2];
 80012ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
	data->GyroX = gyro_data[0];
 80012d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012d8:	461a      	mov	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 80012de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 80012e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 80012f2:	f000 f815 	bl	8001320 <Read_temp>
 80012f6:	ec51 0b10 	vmov	r0, r1, d0
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <Read_sensor_data+0x1d8>)
 8001300:	f7fe ffea 	bl	80002d8 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000408 	.word	0x20000408
 800131c:	40210000 	.word	0x40210000

08001320 <Read_temp>:

double Read_temp() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	2220      	movs	r2, #32
 8001338:	21d6      	movs	r1, #214	@ 0xd6
 800133a:	481e      	ldr	r0, [pc, #120]	@ (80013b4 <Read_temp+0x94>)
 800133c:	f005 fd0e 	bl	8006d5c <HAL_I2C_Mem_Read>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2221      	movs	r2, #33	@ 0x21
 8001356:	21d6      	movs	r1, #214	@ 0xd6
 8001358:	4816      	ldr	r0, [pc, #88]	@ (80013b4 <Read_temp+0x94>)
 800135a:	f005 fcff 	bl	8006d5c <HAL_I2C_Mem_Read>
 800135e:	4603      	mov	r3, r0
 8001360:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 8001370:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8fd 	bl	8000574 <__aeabi_i2d>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <Read_temp+0x98>)
 8001380:	f7ff fa8c 	bl	800089c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <Read_temp+0x9c>)
 8001392:	f7fe ffa3 	bl	80002dc <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 800139e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80013a6:	eeb0 0a47 	vmov.f32	s0, s14
 80013aa:	eef0 0a67 	vmov.f32	s1, s15
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000408 	.word	0x20000408
 80013b8:	40700000 	.word	0x40700000
 80013bc:	40390000 	.word	0x40390000

080013c0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2220      	movs	r2, #32
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f00f f835 	bl	8010448 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013de:	4b48      	ldr	r3, [pc, #288]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013e6:	4b46      	ldr	r3, [pc, #280]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ee:	4b44      	ldr	r3, [pc, #272]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f4:	4b42      	ldr	r3, [pc, #264]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80013fa:	4b41      	ldr	r3, [pc, #260]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001400:	4b3f      	ldr	r3, [pc, #252]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001402:	2201      	movs	r2, #1
 8001404:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001406:	4b3e      	ldr	r3, [pc, #248]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001408:	2208      	movs	r2, #8
 800140a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800140c:	4b3c      	ldr	r3, [pc, #240]	@ (8001500 <MX_ADC1_Init+0x140>)
 800140e:	2200      	movs	r2, #0
 8001410:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001412:	4b3b      	ldr	r3, [pc, #236]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001414:	2201      	movs	r2, #1
 8001416:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001418:	4b39      	ldr	r3, [pc, #228]	@ (8001500 <MX_ADC1_Init+0x140>)
 800141a:	2204      	movs	r2, #4
 800141c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800141e:	4b38      	ldr	r3, [pc, #224]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001426:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001428:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800142c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800142e:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001430:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001434:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001436:	4b32      	ldr	r3, [pc, #200]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143e:	4b30      	ldr	r3, [pc, #192]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001440:	2200      	movs	r2, #0
 8001442:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001444:	4b2e      	ldr	r3, [pc, #184]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144c:	482c      	ldr	r0, [pc, #176]	@ (8001500 <MX_ADC1_Init+0x140>)
 800144e:	f003 fcab 	bl	8004da8 <HAL_ADC_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001458:	f001 fdb4 	bl	8002fc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4826      	ldr	r0, [pc, #152]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001468:	f004 fc1a 	bl	8005ca0 <HAL_ADCEx_MultiModeConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001472:	f001 fda7 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <MX_ADC1_Init+0x144>)
 8001478:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800147a:	2306      	movs	r3, #6
 800147c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800147e:	2307      	movs	r3, #7
 8001480:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001482:	237f      	movs	r3, #127	@ 0x7f
 8001484:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001486:	2304      	movs	r3, #4
 8001488:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	481b      	ldr	r0, [pc, #108]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001494:	f003 fed4 	bl	8005240 <HAL_ADC_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800149e:	f001 fd91 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_ADC1_Init+0x148>)
 80014a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014a6:	230c      	movs	r3, #12
 80014a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4814      	ldr	r0, [pc, #80]	@ (8001500 <MX_ADC1_Init+0x140>)
 80014b0:	f003 fec6 	bl	8005240 <HAL_ADC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80014ba:	f001 fd83 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <MX_ADC1_Init+0x14c>)
 80014c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014c2:	2312      	movs	r3, #18
 80014c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <MX_ADC1_Init+0x140>)
 80014cc:	f003 feb8 	bl	8005240 <HAL_ADC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80014d6:	f001 fd75 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <MX_ADC1_Init+0x150>)
 80014dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014de:	2318      	movs	r3, #24
 80014e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	@ (8001500 <MX_ADC1_Init+0x140>)
 80014e8:	f003 feaa 	bl	8005240 <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80014f2:	f001 fd67 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	3730      	adds	r7, #48	@ 0x30
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000214 	.word	0x20000214
 8001504:	cb840000 	.word	0xcb840000
 8001508:	c3210000 	.word	0xc3210000
 800150c:	08600004 	.word	0x08600004
 8001510:	0c900008 	.word	0x0c900008

08001514 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00e ff91 	bl	8010448 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001526:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001528:	4a2c      	ldr	r2, [pc, #176]	@ (80015dc <MX_ADC2_Init+0xc8>)
 800152a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800152e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001532:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001534:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153a:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001540:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001546:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154c:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800154e:	2204      	movs	r2, #4
 8001550:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001552:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001554:	2200      	movs	r2, #0
 8001556:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800155a:	2201      	movs	r2, #1
 800155c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001560:	2201      	movs	r2, #1
 8001562:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800156c:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800156e:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800157a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001586:	2200      	movs	r2, #0
 8001588:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001592:	4811      	ldr	r0, [pc, #68]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001594:	f003 fc08 	bl	8004da8 <HAL_ADC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800159e:	f001 fd11 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_ADC2_Init+0xcc>)
 80015a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a6:	2306      	movs	r3, #6
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80015aa:	2307      	movs	r3, #7
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ae:	237f      	movs	r3, #127	@ 0x7f
 80015b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b2:	2304      	movs	r3, #4
 80015b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 80015c0:	f003 fe3e 	bl	8005240 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80015ca:	f001 fcfb 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000280 	.word	0x20000280
 80015dc:	50000100 	.word	0x50000100
 80015e0:	47520000 	.word	0x47520000

080015e4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09c      	sub	sp, #112	@ 0x70
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	2244      	movs	r2, #68	@ 0x44
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f00e ff1f 	bl	8010448 <memset>
  if(adcHandle->Instance==ADC1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001612:	d169      	bne.n	80016e8 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001618:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800161a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800161e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	4618      	mov	r0, r3
 8001626:	f006 fee3 	bl	80083f0 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001630:	f001 fcc8 	bl	8002fc4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001634:	4b65      	ldr	r3, [pc, #404]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	4a64      	ldr	r2, [pc, #400]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 800163c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800163e:	4b63      	ldr	r3, [pc, #396]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10b      	bne.n	800165e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001646:	4b62      	ldr	r3, [pc, #392]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a61      	ldr	r2, [pc, #388]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800164c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b5c      	ldr	r3, [pc, #368]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	4a5b      	ldr	r2, [pc, #364]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166a:	4b59      	ldr	r3, [pc, #356]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001676:	2306      	movs	r3, #6
 8001678:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167a:	2303      	movs	r3, #3
 800167c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168c:	f004 fffa 	bl	8006684 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001690:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 8001692:	4a51      	ldr	r2, [pc, #324]	@ (80017d8 <HAL_ADC_MspInit+0x1f4>)
 8001694:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001696:	4b4f      	ldr	r3, [pc, #316]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 8001698:	2205      	movs	r2, #5
 800169a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169c:	4b4d      	ldr	r3, [pc, #308]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a2:	4b4c      	ldr	r3, [pc, #304]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a8:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016aa:	2280      	movs	r2, #128	@ 0x80
 80016ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ae:	4b49      	ldr	r3, [pc, #292]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b6:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016be:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016c0:	2220      	movs	r2, #32
 80016c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016c4:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ca:	4842      	ldr	r0, [pc, #264]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016cc:	f004 fc9c 	bl	8006008 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80016d6:	f001 fc75 	bl	8002fc4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a3d      	ldr	r2, [pc, #244]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016de:	655a      	str	r2, [r3, #84]	@ 0x54
 80016e0:	4a3c      	ldr	r2, [pc, #240]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80016e6:	e06d      	b.n	80017c4 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a3b      	ldr	r2, [pc, #236]	@ (80017dc <HAL_ADC_MspInit+0x1f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d168      	bne.n	80017c4 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016f8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f006 fe74 	bl	80083f0 <HAL_RCCEx_PeriphCLKConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800170e:	f001 fc59 	bl	8002fc4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	4a2c      	ldr	r2, [pc, #176]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 800171a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800171c:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d10b      	bne.n	800173c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001724:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001728:	4a29      	ldr	r2, [pc, #164]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800172a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800172e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	4a23      	ldr	r2, [pc, #140]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001748:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001754:	2310      	movs	r3, #16
 8001756:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001758:	2303      	movs	r3, #3
 800175a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176a:	f004 ff8b 	bl	8006684 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001770:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <HAL_ADC_MspInit+0x200>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001776:	2224      	movs	r2, #36	@ 0x24
 8001778:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 800178e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001792:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800179a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 800179e:	2220      	movs	r2, #32
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017a8:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 80017aa:	f004 fc2d 	bl	8006008 <HAL_DMA_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80017b4:	f001 fc06 	bl	8002fc4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 80017bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80017c4:	bf00      	nop
 80017c6:	3770      	adds	r7, #112	@ 0x70
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200003ac 	.word	0x200003ac
 80017d0:	40021000 	.word	0x40021000
 80017d4:	200002ec 	.word	0x200002ec
 80017d8:	40020030 	.word	0x40020030
 80017dc:	50000100 	.word	0x50000100
 80017e0:	2000034c 	.word	0x2000034c
 80017e4:	40020058 	.word	0x40020058

080017e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80017e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017fa:	f040 80cd 	bne.w	8001998 <HAL_ADC_ConvCpltCallback+0x1b0>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80017fe:	4b80      	ldr	r3, [pc, #512]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feb6 	bl	8000574 <__aeabi_i2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	a178      	add	r1, pc, #480	@ (adr r1, 80019f0 <HAL_ADC_ConvCpltCallback+0x208>)
 800180e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001812:	f7ff f843 	bl	800089c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff fa0b 	bl	8000c38 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a77      	ldr	r2, [pc, #476]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001826:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001828:	4b77      	ldr	r3, [pc, #476]	@ (8001a08 <HAL_ADC_ConvCpltCallback+0x220>)
 800182a:	ed93 7a00 	vldr	s14, [r3]
 800182e:	4b77      	ldr	r3, [pc, #476]	@ (8001a0c <HAL_ADC_ConvCpltCallback+0x224>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001838:	ee17 0a90 	vmov	r0, s15
 800183c:	f7fe feac 	bl	8000598 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	4971      	ldr	r1, [pc, #452]	@ (8001a10 <HAL_ADC_ConvCpltCallback+0x228>)
 800184a:	f7ff f827 	bl	800089c <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4690      	mov	r8, r2
 8001854:	4699      	mov	r9, r3
 8001856:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 8001858:	885b      	ldrh	r3, [r3, #2]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe8a 	bl	8000574 <__aeabi_i2d>
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
 8001864:	4b67      	ldr	r3, [pc, #412]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b68      	ldr	r3, [pc, #416]	@ (8001a14 <HAL_ADC_ConvCpltCallback+0x22c>)
 8001874:	f7ff f812 	bl	800089c <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fee2 	bl	8000648 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4b5f      	ldr	r3, [pc, #380]	@ (8001a0c <HAL_ADC_ConvCpltCallback+0x224>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe81 	bl	8000598 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd1b 	bl	80002d8 <__aeabi_dsub>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4640      	mov	r0, r8
 80018a8:	4649      	mov	r1, r9
 80018aa:	f7fe fecd 	bl	8000648 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f9bf 	bl	8000c38 <__aeabi_d2f>
 80018ba:	ee07 0a10 	vmov	s14, r0
 80018be:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	4b54      	ldr	r3, [pc, #336]	@ (8001a18 <HAL_ADC_ConvCpltCallback+0x230>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 80018cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 80018ce:	88db      	ldrh	r3, [r3, #6]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe4f 	bl	8000574 <__aeabi_i2d>
 80018d6:	a348      	add	r3, pc, #288	@ (adr r3, 80019f8 <HAL_ADC_ConvCpltCallback+0x210>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe ffde 	bl	800089c <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b49      	ldr	r3, [pc, #292]	@ (8001a14 <HAL_ADC_ConvCpltCallback+0x22c>)
 80018ee:	f7fe feab 	bl	8000648 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
 80018fa:	4b42      	ldr	r3, [pc, #264]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe4a 	bl	8000598 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fe9c 	bl	8000648 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f98e 	bl	8000c38 <__aeabi_d2f>
 800191c:	4603      	mov	r3, r0
 800191e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a1c <HAL_ADC_ConvCpltCallback+0x234>)
 8001920:	6013      	str	r3, [r2, #0]
		current=(float) 60.0*(rawADCdata[2]/4095.0)*vrefint;
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 8001924:	889b      	ldrh	r3, [r3, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe24 	bl	8000574 <__aeabi_i2d>
 800192c:	a332      	add	r3, pc, #200	@ (adr r3, 80019f8 <HAL_ADC_ConvCpltCallback+0x210>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe ffb3 	bl	800089c <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <HAL_ADC_ConvCpltCallback+0x238>)
 8001944:	f7fe fe80 	bl	8000648 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4614      	mov	r4, r2
 800194e:	461d      	mov	r5, r3
 8001950:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe1f 	bl	8000598 <__aeabi_f2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fe71 	bl	8000648 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f963 	bl	8000c38 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	4a2b      	ldr	r2, [pc, #172]	@ (8001a24 <HAL_ADC_ConvCpltCallback+0x23c>)
 8001976:	6013      	str	r3, [r2, #0]
		power=(float) vbat*current;
 8001978:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <HAL_ADC_ConvCpltCallback+0x234>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <HAL_ADC_ConvCpltCallback+0x23c>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <HAL_ADC_ConvCpltCallback+0x240>)
 800198a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 4);
 800198e:	2204      	movs	r2, #4
 8001990:	491b      	ldr	r1, [pc, #108]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 8001992:	4826      	ldr	r0, [pc, #152]	@ (8001a2c <HAL_ADC_ConvCpltCallback+0x244>)
 8001994:	f003 fb8c 	bl	80050b0 <HAL_ADC_Start_DMA>

	}
	if(hadc->Instance==ADC2){
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a24      	ldr	r2, [pc, #144]	@ (8001a30 <HAL_ADC_ConvCpltCallback+0x248>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11f      	bne.n	80019e2 <HAL_ADC_ConvCpltCallback+0x1fa>
		vexternalsensor=(float) (rawADCdata[4]/4095.0)*vrefint;
 80019a2:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 80019a4:	891b      	ldrh	r3, [r3, #8]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fde4 	bl	8000574 <__aeabi_i2d>
 80019ac:	a312      	add	r3, pc, #72	@ (adr r3, 80019f8 <HAL_ADC_ConvCpltCallback+0x210>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe ff73 	bl	800089c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f93b 	bl	8000c38 <__aeabi_d2f>
 80019c2:	ee07 0a10 	vmov	s14, r0
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_ADC_ConvCpltCallback+0x24c>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 80019d6:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <HAL_ADC_ConvCpltCallback+0x250>)
 80019d8:	2201      	movs	r2, #1
 80019da:	4619      	mov	r1, r3
 80019dc:	4817      	ldr	r0, [pc, #92]	@ (8001a3c <HAL_ADC_ConvCpltCallback+0x254>)
 80019de:	f003 fb67 	bl	80050b0 <HAL_ADC_Start_DMA>

	}

}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019ec:	f3af 8000 	nop.w
 80019f0:	d70a3d70 	.word	0xd70a3d70
 80019f4:	40b36323 	.word	0x40b36323
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40affe00 	.word	0x40affe00
 8001a00:	20000b40 	.word	0x20000b40
 8001a04:	20000b50 	.word	0x20000b50
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	40590000 	.word	0x40590000
 8001a14:	40080000 	.word	0x40080000
 8001a18:	20000b4c 	.word	0x20000b4c
 8001a1c:	20000b54 	.word	0x20000b54
 8001a20:	404e0000 	.word	0x404e0000
 8001a24:	20000b58 	.word	0x20000b58
 8001a28:	20000b5c 	.word	0x20000b5c
 8001a2c:	20000214 	.word	0x20000214
 8001a30:	50000100 	.word	0x50000100
 8001a34:	20000b60 	.word	0x20000b60
 8001a38:	20000b48 	.word	0x20000b48
 8001a3c:	20000280 	.word	0x20000280

08001a40 <INIT_BARO>:
#define FIFO_SEL 0x18
#define FIFO_CONFIG 0x16
#define FIFO_DATA_ADDR 0x29


void INIT_BARO(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, OSR, I2C_MEMADD_SIZE_8BIT, 0b01111011, 1, HAL_MAX_DELAY);//EN la pression, opti lecture
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	237b      	movs	r3, #123	@ 0x7b
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2301      	movs	r3, #1
 8001a56:	2236      	movs	r2, #54	@ 0x36
 8001a58:	2146      	movs	r1, #70	@ 0x46
 8001a5a:	4823      	ldr	r0, [pc, #140]	@ (8001ae8 <INIT_BARO+0xa8>)
 8001a5c:	f005 f86a 	bl	8006b34 <HAL_I2C_Mem_Write>
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(500);
 8001a64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a68:	f002 ff5e 	bl	8004928 <HAL_Delay>
    status = HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, ODR, I2C_MEMADD_SIZE_8BIT, 0b00000001, 1, HAL_MAX_DELAY);//240Hz, Normal mode
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2237      	movs	r2, #55	@ 0x37
 8001a7e:	2146      	movs	r1, #70	@ 0x46
 8001a80:	4819      	ldr	r0, [pc, #100]	@ (8001ae8 <INIT_BARO+0xa8>)
 8001a82:	f005 f857 	bl	8006b34 <HAL_I2C_Mem_Write>
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(500);
 8001a8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a8e:	f002 ff4b 	bl	8004928 <HAL_Delay>
    status = HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, FIFO_SEL, I2C_MEMADD_SIZE_8BIT, 0b00000111, 1, HAL_MAX_DELAY);//EN FIFO
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	2218      	movs	r2, #24
 8001aa4:	2146      	movs	r1, #70	@ 0x46
 8001aa6:	4810      	ldr	r0, [pc, #64]	@ (8001ae8 <INIT_BARO+0xa8>)
 8001aa8:	f005 f844 	bl	8006b34 <HAL_I2C_Mem_Write>
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(500);
 8001ab0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ab4:	f002 ff38 	bl	8004928 <HAL_Delay>
    status = HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, FIFO_CONFIG, I2C_MEMADD_SIZE_8BIT, 0b00001111, 1, HAL_MAX_DELAY);//stream-to-FIFO/threshold
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	2216      	movs	r2, #22
 8001aca:	2146      	movs	r1, #70	@ 0x46
 8001acc:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <INIT_BARO+0xa8>)
 8001ace:	f005 f831 	bl	8006b34 <HAL_I2C_Mem_Write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(500);
 8001ad6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ada:	f002 ff25 	bl	8004928 <HAL_Delay>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003b4 	.word	0x200003b4

08001aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001af2:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <MX_DMA_Init+0x90>)
 8001af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af6:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <MX_DMA_Init+0x90>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001afe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <MX_DMA_Init+0x90>)
 8001b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <MX_DMA_Init+0x90>)
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b7c <MX_DMA_Init+0x90>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b16:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <MX_DMA_Init+0x90>)
 8001b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	200b      	movs	r0, #11
 8001b28:	f004 fa39 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b2c:	200b      	movs	r0, #11
 8001b2e:	f004 fa50 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	200c      	movs	r0, #12
 8001b38:	f004 fa31 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b3c:	200c      	movs	r0, #12
 8001b3e:	f004 fa48 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	200d      	movs	r0, #13
 8001b48:	f004 fa29 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b4c:	200d      	movs	r0, #13
 8001b4e:	f004 fa40 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200e      	movs	r0, #14
 8001b58:	f004 fa21 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b5c:	200e      	movs	r0, #14
 8001b5e:	f004 fa38 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	200f      	movs	r0, #15
 8001b68:	f004 fa19 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b6c:	200f      	movs	r0, #15
 8001b6e:	f004 fa30 	bl	8005fd2 <HAL_NVIC_EnableIRQ>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000

08001b80 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2110      	movs	r1, #16
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <SELECT+0x14>)
 8001b8a:	f004 fefd 	bl	8006988 <HAL_GPIO_WritePin>
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	48000800 	.word	0x48000800

08001b98 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <DESELECT+0x14>)
 8001ba2:	f004 fef1 	bl	8006988 <HAL_GPIO_WritePin>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	48000800 	.word	0x48000800

08001bb0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001bba:	bf00      	nop
 8001bbc:	4808      	ldr	r0, [pc, #32]	@ (8001be0 <SPI_TxByte+0x30>)
 8001bbe:	f007 fa47 	bl	8009050 <HAL_SPI_GetState>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d1f9      	bne.n	8001bbc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001bc8:	1df9      	adds	r1, r7, #7
 8001bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <SPI_TxByte+0x30>)
 8001bd2:	f006 fea8 	bl	8008926 <HAL_SPI_Transmit>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000d50 	.word	0x20000d50

08001be4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001bea:	23ff      	movs	r3, #255	@ 0xff
 8001bec:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001bf2:	bf00      	nop
 8001bf4:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <SPI_RxByte+0x38>)
 8001bf6:	f007 fa2b 	bl	8009050 <HAL_SPI_GetState>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d1f9      	bne.n	8001bf4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001c00:	1dba      	adds	r2, r7, #6
 8001c02:	1df9      	adds	r1, r7, #7
 8001c04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	4803      	ldr	r0, [pc, #12]	@ (8001c1c <SPI_RxByte+0x38>)
 8001c0e:	f007 f800 	bl	8008c12 <HAL_SPI_TransmitReceive>

  return data;
 8001c12:	79bb      	ldrb	r3, [r7, #6]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000d50 	.word	0x20000d50

08001c20 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001c28:	f7ff ffdc 	bl	8001be4 <SPI_RxByte>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	701a      	strb	r2, [r3, #0]
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <SD_ReadyWait+0x34>)
 8001c44:	2232      	movs	r2, #50	@ 0x32
 8001c46:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001c48:	f7ff ffcc 	bl	8001be4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001c4c:	f7ff ffca 	bl	8001be4 <SPI_RxByte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2bff      	cmp	r3, #255	@ 0xff
 8001c58:	d004      	beq.n	8001c64 <SD_ReadyWait+0x28>
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SD_ReadyWait+0x34>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f3      	bne.n	8001c4c <SD_ReadyWait+0x10>

  return res;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200003b1 	.word	0x200003b1

08001c74 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001c7a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001c80:	f7ff ff8a 	bl	8001b98 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	e005      	b.n	8001c96 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001c8a:	20ff      	movs	r0, #255	@ 0xff
 8001c8c:	f7ff ff90 	bl	8001bb0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	3301      	adds	r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	ddf6      	ble.n	8001c8a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001c9c:	f7ff ff70 	bl	8001b80 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001ca0:	2340      	movs	r3, #64	@ 0x40
 8001ca2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001cb4:	2395      	movs	r3, #149	@ 0x95
 8001cb6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e009      	b.n	8001cd2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001cbe:	1d3a      	adds	r2, r7, #4
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff72 	bl	8001bb0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	ddf2      	ble.n	8001cbe <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001cd8:	e002      	b.n	8001ce0 <SD_PowerOn+0x6c>
  {
    Count--;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001ce0:	f7ff ff80 	bl	8001be4 <SPI_RxByte>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d002      	beq.n	8001cf0 <SD_PowerOn+0x7c>
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f4      	bne.n	8001cda <SD_PowerOn+0x66>
  }

  DESELECT();
 8001cf0:	f7ff ff52 	bl	8001b98 <DESELECT>
  SPI_TxByte(0XFF);
 8001cf4:	20ff      	movs	r0, #255	@ 0xff
 8001cf6:	f7ff ff5b 	bl	8001bb0 <SPI_TxByte>

  PowerFlag = 1;
 8001cfa:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <SD_PowerOn+0x94>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200003b3 	.word	0x200003b3

08001d0c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <SD_PowerOff+0x14>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	200003b3 	.word	0x200003b3

08001d24 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <SD_CheckPower+0x14>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200003b3 	.word	0x200003b3

08001d3c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001d46:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <SD_RxDataBlock+0x68>)
 8001d48:	220a      	movs	r2, #10
 8001d4a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001d4c:	f7ff ff4a 	bl	8001be4 <SPI_RxByte>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2bff      	cmp	r3, #255	@ 0xff
 8001d58:	d104      	bne.n	8001d64 <SD_RxDataBlock+0x28>
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <SD_RxDataBlock+0x68>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f3      	bne.n	8001d4c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d68:	d001      	beq.n	8001d6e <SD_RxDataBlock+0x32>
    return FALSE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e016      	b.n	8001d9c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff53 	bl	8001c20 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff4d 	bl	8001c20 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	3b02      	subs	r3, #2
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ed      	bne.n	8001d6e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001d92:	f7ff ff27 	bl	8001be4 <SPI_RxByte>
  SPI_RxByte();
 8001d96:	f7ff ff25 	bl	8001be4 <SPI_RxByte>

  return TRUE;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200003b0 	.word	0x200003b0

08001da8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001db8:	f7ff ff40 	bl	8001c3c <SD_ReadyWait>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2bff      	cmp	r3, #255	@ 0xff
 8001dc0:	d001      	beq.n	8001dc6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e040      	b.n	8001e48 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fef1 	bl	8001bb0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	2bfd      	cmp	r3, #253	@ 0xfd
 8001dd2:	d031      	beq.n	8001e38 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fee5 	bl	8001bb0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fede 	bl	8001bb0 <SPI_TxByte>
    } while (--wc);
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	73bb      	strb	r3, [r7, #14]
 8001dfa:	7bbb      	ldrb	r3, [r7, #14]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1eb      	bne.n	8001dd8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001e00:	f7ff fef0 	bl	8001be4 <SPI_RxByte>
    SPI_RxByte();
 8001e04:	f7ff feee 	bl	8001be4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001e08:	e00b      	b.n	8001e22 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001e0a:	f7ff feeb 	bl	8001be4 <SPI_RxByte>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d006      	beq.n	8001e2a <SD_TxDataBlock+0x82>
        break;

      i++;
 8001e1c:	7b7b      	ldrb	r3, [r7, #13]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001e22:	7b7b      	ldrb	r3, [r7, #13]
 8001e24:	2b40      	cmp	r3, #64	@ 0x40
 8001e26:	d9f0      	bls.n	8001e0a <SD_TxDataBlock+0x62>
 8001e28:	e000      	b.n	8001e2c <SD_TxDataBlock+0x84>
        break;
 8001e2a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001e2c:	bf00      	nop
 8001e2e:	f7ff fed9 	bl	8001be4 <SPI_RxByte>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0fa      	beq.n	8001e2e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d101      	bne.n	8001e46 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001e5c:	f7ff feee 	bl	8001c3c <SD_ReadyWait>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2bff      	cmp	r3, #255	@ 0xff
 8001e64:	d001      	beq.n	8001e6a <SD_SendCmd+0x1a>
    return 0xFF;
 8001e66:	23ff      	movs	r3, #255	@ 0xff
 8001e68:	e040      	b.n	8001eec <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fe9f 	bl	8001bb0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	0e1b      	lsrs	r3, r3, #24
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fe99 	bl	8001bb0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe93 	bl	8001bb0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fe8d 	bl	8001bb0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fe88 	bl	8001bb0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	2b40      	cmp	r3, #64	@ 0x40
 8001ea8:	d101      	bne.n	8001eae <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001eaa:	2395      	movs	r3, #149	@ 0x95
 8001eac:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	2b48      	cmp	r3, #72	@ 0x48
 8001eb2:	d101      	bne.n	8001eb8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001eb4:	2387      	movs	r3, #135	@ 0x87
 8001eb6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fe78 	bl	8001bb0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	2b4c      	cmp	r3, #76	@ 0x4c
 8001ec4:	d101      	bne.n	8001eca <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001ec6:	f7ff fe8d 	bl	8001be4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001eca:	230a      	movs	r3, #10
 8001ecc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001ece:	f7ff fe89 	bl	8001be4 <SPI_RxByte>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001ed6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da05      	bge.n	8001eea <SD_SendCmd+0x9a>
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	73bb      	strb	r3, [r7, #14]
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f1      	bne.n	8001ece <SD_SendCmd+0x7e>

  return res;
 8001eea:	7b7b      	ldrb	r3, [r7, #13]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d5      	b.n	80020b4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001f08:	4b6c      	ldr	r3, [pc, #432]	@ (80020bc <SD_disk_initialize+0x1c8>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <SD_disk_initialize+0x2a>
    return Stat;
 8001f16:	4b69      	ldr	r3, [pc, #420]	@ (80020bc <SD_disk_initialize+0x1c8>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	e0ca      	b.n	80020b4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001f1e:	f7ff fea9 	bl	8001c74 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001f22:	f7ff fe2d 	bl	8001b80 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2040      	movs	r0, #64	@ 0x40
 8001f2e:	f7ff ff8f 	bl	8001e50 <SD_SendCmd>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	f040 80a5 	bne.w	8002084 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001f3a:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <SD_disk_initialize+0x1cc>)
 8001f3c:	2264      	movs	r2, #100	@ 0x64
 8001f3e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001f40:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001f44:	2048      	movs	r0, #72	@ 0x48
 8001f46:	f7ff ff83 	bl	8001e50 <SD_SendCmd>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d158      	bne.n	8002002 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e00c      	b.n	8001f70 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001f56:	7bfc      	ldrb	r4, [r7, #15]
 8001f58:	f7ff fe44 	bl	8001be4 <SPI_RxByte>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f104 0310 	add.w	r3, r4, #16
 8001f64:	443b      	add	r3, r7
 8001f66:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d9ef      	bls.n	8001f56 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001f76:	7abb      	ldrb	r3, [r7, #10]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	f040 8083 	bne.w	8002084 <SD_disk_initialize+0x190>
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	2baa      	cmp	r3, #170	@ 0xaa
 8001f82:	d17f      	bne.n	8002084 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001f84:	2100      	movs	r1, #0
 8001f86:	2077      	movs	r0, #119	@ 0x77
 8001f88:	f7ff ff62 	bl	8001e50 <SD_SendCmd>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d807      	bhi.n	8001fa2 <SD_disk_initialize+0xae>
 8001f92:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f96:	2069      	movs	r0, #105	@ 0x69
 8001f98:	f7ff ff5a 	bl	8001e50 <SD_SendCmd>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001fa2:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <SD_disk_initialize+0x1cc>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1eb      	bne.n	8001f84 <SD_disk_initialize+0x90>
 8001fac:	e000      	b.n	8001fb0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001fae:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001fb0:	4b43      	ldr	r3, [pc, #268]	@ (80020c0 <SD_disk_initialize+0x1cc>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d064      	beq.n	8002084 <SD_disk_initialize+0x190>
 8001fba:	2100      	movs	r1, #0
 8001fbc:	207a      	movs	r0, #122	@ 0x7a
 8001fbe:	f7ff ff47 	bl	8001e50 <SD_SendCmd>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d15d      	bne.n	8002084 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e00c      	b.n	8001fe8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001fce:	7bfc      	ldrb	r4, [r7, #15]
 8001fd0:	f7ff fe08 	bl	8001be4 <SPI_RxByte>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f104 0310 	add.w	r3, r4, #16
 8001fdc:	443b      	add	r3, r7
 8001fde:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d9ef      	bls.n	8001fce <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001fee:	7a3b      	ldrb	r3, [r7, #8]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SD_disk_initialize+0x108>
 8001ff8:	2306      	movs	r3, #6
 8001ffa:	e000      	b.n	8001ffe <SD_disk_initialize+0x10a>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	73bb      	strb	r3, [r7, #14]
 8002000:	e040      	b.n	8002084 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002002:	2100      	movs	r1, #0
 8002004:	2077      	movs	r0, #119	@ 0x77
 8002006:	f7ff ff23 	bl	8001e50 <SD_SendCmd>
 800200a:	4603      	mov	r3, r0
 800200c:	2b01      	cmp	r3, #1
 800200e:	d808      	bhi.n	8002022 <SD_disk_initialize+0x12e>
 8002010:	2100      	movs	r1, #0
 8002012:	2069      	movs	r0, #105	@ 0x69
 8002014:	f7ff ff1c 	bl	8001e50 <SD_SendCmd>
 8002018:	4603      	mov	r3, r0
 800201a:	2b01      	cmp	r3, #1
 800201c:	d801      	bhi.n	8002022 <SD_disk_initialize+0x12e>
 800201e:	2302      	movs	r3, #2
 8002020:	e000      	b.n	8002024 <SD_disk_initialize+0x130>
 8002022:	2301      	movs	r3, #1
 8002024:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d10e      	bne.n	800204a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800202c:	2100      	movs	r1, #0
 800202e:	2077      	movs	r0, #119	@ 0x77
 8002030:	f7ff ff0e 	bl	8001e50 <SD_SendCmd>
 8002034:	4603      	mov	r3, r0
 8002036:	2b01      	cmp	r3, #1
 8002038:	d80e      	bhi.n	8002058 <SD_disk_initialize+0x164>
 800203a:	2100      	movs	r1, #0
 800203c:	2069      	movs	r0, #105	@ 0x69
 800203e:	f7ff ff07 	bl	8001e50 <SD_SendCmd>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002048:	e00d      	b.n	8002066 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800204a:	2100      	movs	r1, #0
 800204c:	2041      	movs	r0, #65	@ 0x41
 800204e:	f7ff feff 	bl	8001e50 <SD_SendCmd>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <SD_disk_initialize+0x1cc>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1e1      	bne.n	8002026 <SD_disk_initialize+0x132>
 8002062:	e000      	b.n	8002066 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002064:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <SD_disk_initialize+0x1cc>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <SD_disk_initialize+0x18c>
 8002070:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002074:	2050      	movs	r0, #80	@ 0x50
 8002076:	f7ff feeb 	bl	8001e50 <SD_SendCmd>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8002084:	4a0f      	ldr	r2, [pc, #60]	@ (80020c4 <SD_disk_initialize+0x1d0>)
 8002086:	7bbb      	ldrb	r3, [r7, #14]
 8002088:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800208a:	f7ff fd85 	bl	8001b98 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800208e:	f7ff fda9 	bl	8001be4 <SPI_RxByte>

  if (type)
 8002092:	7bbb      	ldrb	r3, [r7, #14]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <SD_disk_initialize+0x1c8>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <SD_disk_initialize+0x1c8>)
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e001      	b.n	80020ae <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80020aa:	f7ff fe2f 	bl	8001d0c <SD_PowerOff>
  }

  return Stat;
 80020ae:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <SD_disk_initialize+0x1c8>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200003b0 	.word	0x200003b0
 80020c4:	200003b2 	.word	0x200003b2

080020c8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SD_disk_status+0x14>
    return STA_NOINIT;
 80020d8:	2301      	movs	r3, #1
 80020da:	e002      	b.n	80020e2 <SD_disk_status+0x1a>

  return Stat;
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <SD_disk_status+0x28>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000008 	.word	0x20000008

080020f4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <SD_disk_read+0x1c>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <SD_disk_read+0x20>
    return RES_PARERR;
 8002110:	2304      	movs	r3, #4
 8002112:	e051      	b.n	80021b8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002114:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <SD_disk_read+0xcc>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002122:	2303      	movs	r3, #3
 8002124:	e048      	b.n	80021b8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8002126:	4b27      	ldr	r3, [pc, #156]	@ (80021c4 <SD_disk_read+0xd0>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	607b      	str	r3, [r7, #4]

  SELECT();
 8002138:	f7ff fd22 	bl	8001b80 <SELECT>

  if (count == 1)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d111      	bne.n	8002166 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	2051      	movs	r0, #81	@ 0x51
 8002146:	f7ff fe83 	bl	8001e50 <SD_SendCmd>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d129      	bne.n	80021a4 <SD_disk_read+0xb0>
 8002150:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002154:	68b8      	ldr	r0, [r7, #8]
 8002156:	f7ff fdf1 	bl	8001d3c <SD_RxDataBlock>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d021      	beq.n	80021a4 <SD_disk_read+0xb0>
      count = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	e01e      	b.n	80021a4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	2052      	movs	r0, #82	@ 0x52
 800216a:	f7ff fe71 	bl	8001e50 <SD_SendCmd>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d117      	bne.n	80021a4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002178:	68b8      	ldr	r0, [r7, #8]
 800217a:	f7ff fddf 	bl	8001d3c <SD_RxDataBlock>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800218a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	3b01      	subs	r3, #1
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ed      	bne.n	8002174 <SD_disk_read+0x80>
 8002198:	e000      	b.n	800219c <SD_disk_read+0xa8>
          break;
 800219a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800219c:	2100      	movs	r1, #0
 800219e:	204c      	movs	r0, #76	@ 0x4c
 80021a0:	f7ff fe56 	bl	8001e50 <SD_SendCmd>
    }
  }

  DESELECT();
 80021a4:	f7ff fcf8 	bl	8001b98 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80021a8:	f7ff fd1c 	bl	8001be4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000008 	.word	0x20000008
 80021c4:	200003b2 	.word	0x200003b2

080021c8 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <SD_disk_write+0x1c>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <SD_disk_write+0x20>
    return RES_PARERR;
 80021e4:	2304      	movs	r3, #4
 80021e6:	e06b      	b.n	80022c0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80021e8:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <SD_disk_write+0x100>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <SD_disk_write+0x32>
    return RES_NOTRDY;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e062      	b.n	80022c0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80021fa:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <SD_disk_write+0x100>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SD_disk_write+0x44>
    return RES_WRPRT;
 8002208:	2302      	movs	r3, #2
 800220a:	e059      	b.n	80022c0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800220c:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <SD_disk_write+0x104>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	025b      	lsls	r3, r3, #9
 800221c:	607b      	str	r3, [r7, #4]

  SELECT();
 800221e:	f7ff fcaf 	bl	8001b80 <SELECT>

  if (count == 1)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d110      	bne.n	800224a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	2058      	movs	r0, #88	@ 0x58
 800222c:	f7ff fe10 	bl	8001e50 <SD_SendCmd>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d13a      	bne.n	80022ac <SD_disk_write+0xe4>
 8002236:	21fe      	movs	r1, #254	@ 0xfe
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f7ff fdb5 	bl	8001da8 <SD_TxDataBlock>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d033      	beq.n	80022ac <SD_disk_write+0xe4>
      count = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	e030      	b.n	80022ac <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <SD_disk_write+0x104>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002256:	2100      	movs	r1, #0
 8002258:	2077      	movs	r0, #119	@ 0x77
 800225a:	f7ff fdf9 	bl	8001e50 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	2057      	movs	r0, #87	@ 0x57
 8002262:	f7ff fdf5 	bl	8001e50 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	2059      	movs	r0, #89	@ 0x59
 800226a:	f7ff fdf1 	bl	8001e50 <SD_SendCmd>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d11b      	bne.n	80022ac <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002274:	21fc      	movs	r1, #252	@ 0xfc
 8002276:	68b8      	ldr	r0, [r7, #8]
 8002278:	f7ff fd96 	bl	8001da8 <SD_TxDataBlock>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002288:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ee      	bne.n	8002274 <SD_disk_write+0xac>
 8002296:	e000      	b.n	800229a <SD_disk_write+0xd2>
          break;
 8002298:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800229a:	21fd      	movs	r1, #253	@ 0xfd
 800229c:	2000      	movs	r0, #0
 800229e:	f7ff fd83 	bl	8001da8 <SD_TxDataBlock>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <SD_disk_write+0xe4>
      {
        count = 1;
 80022a8:	2301      	movs	r3, #1
 80022aa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80022ac:	f7ff fc74 	bl	8001b98 <DESELECT>
  SPI_RxByte();
 80022b0:	f7ff fc98 	bl	8001be4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bf14      	ite	ne
 80022ba:	2301      	movne	r3, #1
 80022bc:	2300      	moveq	r3, #0
 80022be:	b2db      	uxtb	r3, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000008 	.word	0x20000008
 80022cc:	200003b2 	.word	0x200003b2

080022d0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b08b      	sub	sp, #44	@ 0x2c
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	603a      	str	r2, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	460b      	mov	r3, r1
 80022de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80022ea:	2304      	movs	r3, #4
 80022ec:	e119      	b.n	8002522 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80022f4:	79bb      	ldrb	r3, [r7, #6]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d129      	bne.n	800234e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d017      	beq.n	8002332 <SD_disk_ioctl+0x62>
 8002302:	2b02      	cmp	r3, #2
 8002304:	dc1f      	bgt.n	8002346 <SD_disk_ioctl+0x76>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <SD_disk_ioctl+0x40>
 800230a:	2b01      	cmp	r3, #1
 800230c:	d00b      	beq.n	8002326 <SD_disk_ioctl+0x56>
 800230e:	e01a      	b.n	8002346 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002310:	f7ff fd08 	bl	8001d24 <SD_CheckPower>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800231a:	f7ff fcf7 	bl	8001d0c <SD_PowerOff>
      res = RES_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002324:	e0fb      	b.n	800251e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8002326:	f7ff fca5 	bl	8001c74 <SD_PowerOn>
      res = RES_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002330:	e0f5      	b.n	800251e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	1c5c      	adds	r4, r3, #1
 8002336:	f7ff fcf5 	bl	8001d24 <SD_CheckPower>
 800233a:	4603      	mov	r3, r0
 800233c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002344:	e0eb      	b.n	800251e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8002346:	2304      	movs	r3, #4
 8002348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800234c:	e0e7      	b.n	800251e <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800234e:	4b77      	ldr	r3, [pc, #476]	@ (800252c <SD_disk_ioctl+0x25c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800235c:	2303      	movs	r3, #3
 800235e:	e0e0      	b.n	8002522 <SD_disk_ioctl+0x252>

    SELECT();
 8002360:	f7ff fc0e 	bl	8001b80 <SELECT>

    switch (ctrl)
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	2b0d      	cmp	r3, #13
 8002368:	f200 80ca 	bhi.w	8002500 <SD_disk_ioctl+0x230>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <SD_disk_ioctl+0xa4>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	0800246b 	.word	0x0800246b
 8002378:	080023ad 	.word	0x080023ad
 800237c:	0800245b 	.word	0x0800245b
 8002380:	08002501 	.word	0x08002501
 8002384:	08002501 	.word	0x08002501
 8002388:	08002501 	.word	0x08002501
 800238c:	08002501 	.word	0x08002501
 8002390:	08002501 	.word	0x08002501
 8002394:	08002501 	.word	0x08002501
 8002398:	08002501 	.word	0x08002501
 800239c:	08002501 	.word	0x08002501
 80023a0:	0800247d 	.word	0x0800247d
 80023a4:	080024a1 	.word	0x080024a1
 80023a8:	080024c5 	.word	0x080024c5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80023ac:	2100      	movs	r1, #0
 80023ae:	2049      	movs	r0, #73	@ 0x49
 80023b0:	f7ff fd4e 	bl	8001e50 <SD_SendCmd>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 80a6 	bne.w	8002508 <SD_disk_ioctl+0x238>
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	2110      	movs	r1, #16
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fcba 	bl	8001d3c <SD_RxDataBlock>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 809c 	beq.w	8002508 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 80023d0:	7b3b      	ldrb	r3, [r7, #12]
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10d      	bne.n	80023f6 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80023da:	7d7b      	ldrb	r3, [r7, #21]
 80023dc:	461a      	mov	r2, r3
 80023de:	7d3b      	ldrb	r3, [r7, #20]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80023ec:	8bfb      	ldrh	r3, [r7, #30]
 80023ee:	029a      	lsls	r2, r3, #10
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e02d      	b.n	8002452 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80023f6:	7c7b      	ldrb	r3, [r7, #17]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	7dbb      	ldrb	r3, [r7, #22]
 8002400:	09db      	lsrs	r3, r3, #7
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4413      	add	r3, r2
 8002406:	b2da      	uxtb	r2, r3
 8002408:	7d7b      	ldrb	r3, [r7, #21]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f003 0306 	and.w	r3, r3, #6
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4413      	add	r3, r2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3302      	adds	r3, #2
 800241a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800241e:	7d3b      	ldrb	r3, [r7, #20]
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	b29b      	uxth	r3, r3
 800242c:	4413      	add	r3, r2
 800242e:	b29a      	uxth	r2, r3
 8002430:	7cbb      	ldrb	r3, [r7, #18]
 8002432:	029b      	lsls	r3, r3, #10
 8002434:	b29b      	uxth	r3, r3
 8002436:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800243a:	b29b      	uxth	r3, r3
 800243c:	4413      	add	r3, r2
 800243e:	b29b      	uxth	r3, r3
 8002440:	3301      	adds	r3, #1
 8002442:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002444:	8bfa      	ldrh	r2, [r7, #30]
 8002446:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800244a:	3b09      	subs	r3, #9
 800244c:	409a      	lsls	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002458:	e056      	b.n	8002508 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002460:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002468:	e055      	b.n	8002516 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800246a:	f7ff fbe7 	bl	8001c3c <SD_ReadyWait>
 800246e:	4603      	mov	r3, r0
 8002470:	2bff      	cmp	r3, #255	@ 0xff
 8002472:	d14b      	bne.n	800250c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800247a:	e047      	b.n	800250c <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800247c:	2100      	movs	r1, #0
 800247e:	2049      	movs	r0, #73	@ 0x49
 8002480:	f7ff fce6 	bl	8001e50 <SD_SendCmd>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d142      	bne.n	8002510 <SD_disk_ioctl+0x240>
 800248a:	2110      	movs	r1, #16
 800248c:	6a38      	ldr	r0, [r7, #32]
 800248e:	f7ff fc55 	bl	8001d3c <SD_RxDataBlock>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03b      	beq.n	8002510 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800249e:	e037      	b.n	8002510 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80024a0:	2100      	movs	r1, #0
 80024a2:	204a      	movs	r0, #74	@ 0x4a
 80024a4:	f7ff fcd4 	bl	8001e50 <SD_SendCmd>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d132      	bne.n	8002514 <SD_disk_ioctl+0x244>
 80024ae:	2110      	movs	r1, #16
 80024b0:	6a38      	ldr	r0, [r7, #32]
 80024b2:	f7ff fc43 	bl	8001d3c <SD_RxDataBlock>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d02b      	beq.n	8002514 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80024c2:	e027      	b.n	8002514 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80024c4:	2100      	movs	r1, #0
 80024c6:	207a      	movs	r0, #122	@ 0x7a
 80024c8:	f7ff fcc2 	bl	8001e50 <SD_SendCmd>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80024d8:	e00b      	b.n	80024f2 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80024da:	6a3c      	ldr	r4, [r7, #32]
 80024dc:	1c63      	adds	r3, r4, #1
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	f7ff fb80 	bl	8001be4 <SPI_RxByte>
 80024e4:	4603      	mov	r3, r0
 80024e6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80024e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024ec:	3301      	adds	r3, #1
 80024ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80024f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d9ef      	bls.n	80024da <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8002500:	2304      	movs	r3, #4
 8002502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002506:	e006      	b.n	8002516 <SD_disk_ioctl+0x246>
      break;
 8002508:	bf00      	nop
 800250a:	e004      	b.n	8002516 <SD_disk_ioctl+0x246>
      break;
 800250c:	bf00      	nop
 800250e:	e002      	b.n	8002516 <SD_disk_ioctl+0x246>
      break;
 8002510:	bf00      	nop
 8002512:	e000      	b.n	8002516 <SD_disk_ioctl+0x246>
      break;
 8002514:	bf00      	nop
    }

    DESELECT();
 8002516:	f7ff fb3f 	bl	8001b98 <DESELECT>
    SPI_RxByte();
 800251a:	f7ff fb63 	bl	8001be4 <SPI_RxByte>
  }

  return res;
 800251e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002522:	4618      	mov	r0, r3
 8002524:	372c      	adds	r7, #44	@ 0x2c
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008

08002530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
 8002544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002546:	4b3c      	ldr	r3, [pc, #240]	@ (8002638 <MX_GPIO_Init+0x108>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	4a3b      	ldr	r2, [pc, #236]	@ (8002638 <MX_GPIO_Init+0x108>)
 800254c:	f043 0320 	orr.w	r3, r3, #32
 8002550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002552:	4b39      	ldr	r3, [pc, #228]	@ (8002638 <MX_GPIO_Init+0x108>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <MX_GPIO_Init+0x108>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	4a35      	ldr	r2, [pc, #212]	@ (8002638 <MX_GPIO_Init+0x108>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800256a:	4b33      	ldr	r3, [pc, #204]	@ (8002638 <MX_GPIO_Init+0x108>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <MX_GPIO_Init+0x108>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257a:	4a2f      	ldr	r2, [pc, #188]	@ (8002638 <MX_GPIO_Init+0x108>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002582:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <MX_GPIO_Init+0x108>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <MX_GPIO_Init+0x108>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	4a29      	ldr	r2, [pc, #164]	@ (8002638 <MX_GPIO_Init+0x108>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800259a:	4b27      	ldr	r3, [pc, #156]	@ (8002638 <MX_GPIO_Init+0x108>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2110      	movs	r1, #16
 80025aa:	4824      	ldr	r0, [pc, #144]	@ (800263c <MX_GPIO_Init+0x10c>)
 80025ac:	f004 f9ec 	bl	8006988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80025b6:	4822      	ldr	r0, [pc, #136]	@ (8002640 <MX_GPIO_Init+0x110>)
 80025b8:	f004 f9e6 	bl	8006988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025bc:	2310      	movs	r3, #16
 80025be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4619      	mov	r1, r3
 80025d2:	481a      	ldr	r0, [pc, #104]	@ (800263c <MX_GPIO_Init+0x10c>)
 80025d4:	f004 f856 	bl	8006684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80025d8:	2306      	movs	r3, #6
 80025da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	4814      	ldr	r0, [pc, #80]	@ (8002640 <MX_GPIO_Init+0x110>)
 80025ee:	f004 f849 	bl	8006684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	@ (8002640 <MX_GPIO_Init+0x110>)
 800260c:	f004 f83a 	bl	8006684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2007      	movs	r0, #7
 8002616:	f003 fcc2 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800261a:	2007      	movs	r0, #7
 800261c:	f003 fcd9 	bl	8005fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	2008      	movs	r0, #8
 8002626:	f003 fcba 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800262a:	2008      	movs	r0, #8
 800262c:	f003 fcd1 	bl	8005fd2 <HAL_NVIC_EnableIRQ>

}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	@ 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	48000800 	.word	0x48000800
 8002640:	48000400 	.word	0x48000400

08002644 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <MX_I2C1_Init+0x74>)
 800264a:	4a1c      	ldr	r2, [pc, #112]	@ (80026bc <MX_I2C1_Init+0x78>)
 800264c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <MX_I2C1_Init+0x74>)
 8002650:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <MX_I2C1_Init+0x7c>)
 8002652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002654:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <MX_I2C1_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800265a:	4b17      	ldr	r3, [pc, #92]	@ (80026b8 <MX_I2C1_Init+0x74>)
 800265c:	2201      	movs	r2, #1
 800265e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002660:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <MX_I2C1_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <MX_I2C1_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <MX_I2C1_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <MX_I2C1_Init+0x74>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002678:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <MX_I2C1_Init+0x74>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800267e:	480e      	ldr	r0, [pc, #56]	@ (80026b8 <MX_I2C1_Init+0x74>)
 8002680:	f004 f9bd 	bl	80069fe <HAL_I2C_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800268a:	f000 fc9b 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800268e:	2100      	movs	r1, #0
 8002690:	4809      	ldr	r0, [pc, #36]	@ (80026b8 <MX_I2C1_Init+0x74>)
 8002692:	f004 ff3f 	bl	8007514 <HAL_I2CEx_ConfigAnalogFilter>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800269c:	f000 fc92 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026a0:	2100      	movs	r1, #0
 80026a2:	4805      	ldr	r0, [pc, #20]	@ (80026b8 <MX_I2C1_Init+0x74>)
 80026a4:	f004 ff81 	bl	80075aa <HAL_I2CEx_ConfigDigitalFilter>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026ae:	f000 fc89 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200003b4 	.word	0x200003b4
 80026bc:	40005400 	.word	0x40005400
 80026c0:	10b17db5 	.word	0x10b17db5

080026c4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026ca:	4a1c      	ldr	r2, [pc, #112]	@ (800273c <MX_I2C3_Init+0x78>)
 80026cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002740 <MX_I2C3_Init+0x7c>)
 80026d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80026d4:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026da:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026dc:	2201      	movs	r2, #1
 80026de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e0:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026e6:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <MX_I2C3_Init+0x74>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026fe:	480e      	ldr	r0, [pc, #56]	@ (8002738 <MX_I2C3_Init+0x74>)
 8002700:	f004 f97d 	bl	80069fe <HAL_I2C_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800270a:	f000 fc5b 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800270e:	2100      	movs	r1, #0
 8002710:	4809      	ldr	r0, [pc, #36]	@ (8002738 <MX_I2C3_Init+0x74>)
 8002712:	f004 feff 	bl	8007514 <HAL_I2CEx_ConfigAnalogFilter>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800271c:	f000 fc52 	bl	8002fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002720:	2100      	movs	r1, #0
 8002722:	4805      	ldr	r0, [pc, #20]	@ (8002738 <MX_I2C3_Init+0x74>)
 8002724:	f004 ff41 	bl	80075aa <HAL_I2CEx_ConfigDigitalFilter>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800272e:	f000 fc49 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000408 	.word	0x20000408
 800273c:	40007800 	.word	0x40007800
 8002740:	10b17db5 	.word	0x10b17db5

08002744 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b09e      	sub	sp, #120	@ 0x78
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800275c:	f107 0320 	add.w	r3, r7, #32
 8002760:	2244      	movs	r2, #68	@ 0x44
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f00d fe6f 	bl	8010448 <memset>
  if(i2cHandle->Instance==I2C1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5c      	ldr	r2, [pc, #368]	@ (80028e0 <HAL_I2C_MspInit+0x19c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d155      	bne.n	8002820 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002774:	2340      	movs	r3, #64	@ 0x40
 8002776:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002778:	2300      	movs	r3, #0
 800277a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277c:	f107 0320 	add.w	r3, r7, #32
 8002780:	4618      	mov	r0, r3
 8002782:	f005 fe35 	bl	80083f0 <HAL_RCCEx_PeriphCLKConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800278c:	f000 fc1a 	bl	8002fc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002790:	4b54      	ldr	r3, [pc, #336]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	4a53      	ldr	r2, [pc, #332]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800279c:	4b51      	ldr	r3, [pc, #324]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 800279e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a8:	4b4e      	ldr	r3, [pc, #312]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ac:	4a4d      	ldr	r2, [pc, #308]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b4:	4b4b      	ldr	r3, [pc, #300]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c6:	2312      	movs	r3, #18
 80027c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027d2:	2304      	movs	r3, #4
 80027d4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e0:	f003 ff50 	bl	8006684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ea:	2312      	movs	r3, #18
 80027ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027f6:	2304      	movs	r3, #4
 80027f8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027fe:	4619      	mov	r1, r3
 8002800:	4839      	ldr	r0, [pc, #228]	@ (80028e8 <HAL_I2C_MspInit+0x1a4>)
 8002802:	f003 ff3f 	bl	8006684 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002806:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280a:	4a36      	ldr	r2, [pc, #216]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 800280c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002810:	6593      	str	r3, [r2, #88]	@ 0x58
 8002812:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800281e:	e05a      	b.n	80028d6 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a31      	ldr	r2, [pc, #196]	@ (80028ec <HAL_I2C_MspInit+0x1a8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d155      	bne.n	80028d6 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800282a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800282e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002830:	2300      	movs	r3, #0
 8002832:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002834:	f107 0320 	add.w	r3, r7, #32
 8002838:	4618      	mov	r0, r3
 800283a:	f005 fdd9 	bl	80083f0 <HAL_RCCEx_PeriphCLKConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8002844:	f000 fbbe 	bl	8002fc4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002848:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 800284a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284c:	4a25      	ldr	r2, [pc, #148]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002854:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 8002856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002860:	4b20      	ldr	r3, [pc, #128]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286c:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800287c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800287e:	2312      	movs	r3, #18
 8002880:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800288a:	2302      	movs	r3, #2
 800288c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002898:	f003 fef4 	bl	8006684 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800289c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a2:	2312      	movs	r3, #18
 80028a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80028ae:	2308      	movs	r3, #8
 80028b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028b6:	4619      	mov	r1, r3
 80028b8:	480d      	ldr	r0, [pc, #52]	@ (80028f0 <HAL_I2C_MspInit+0x1ac>)
 80028ba:	f003 fee3 	bl	8006684 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028be:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c2:	4a08      	ldr	r2, [pc, #32]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 80028c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ca:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_I2C_MspInit+0x1a0>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
}
 80028d6:	bf00      	nop
 80028d8:	3778      	adds	r7, #120	@ 0x78
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40005400 	.word	0x40005400
 80028e4:	40021000 	.word	0x40021000
 80028e8:	48000400 	.word	0x48000400
 80028ec:	40007800 	.word	0x40007800
 80028f0:	48000800 	.word	0x48000800

080028f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b092      	sub	sp, #72	@ 0x48
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028fa:	f001 ffa4 	bl	8004846 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fe:	f000 f94d 	bl	8002b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002902:	f7ff fe15 	bl	8002530 <MX_GPIO_Init>
  MX_DMA_Init();
 8002906:	f7ff f8f1 	bl	8001aec <MX_DMA_Init>
  MX_SPI1_Init();
 800290a:	f000 ff27 	bl	800375c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800290e:	f001 ff15 	bl	800473c <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002912:	f009 fde3 	bl	800c4dc <MX_FATFS_Init>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <main+0x2c>
    Error_Handler();
 800291c:	f000 fb52 	bl	8002fc4 <Error_Handler>
  }
  MX_I2C3_Init();
 8002920:	f7ff fed0 	bl	80026c4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002924:	f001 fc5e 	bl	80041e4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8002928:	f7fe fd4a 	bl	80013c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800292c:	f001 fca4 	bl	8004278 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002930:	f001 faf2 	bl	8003f18 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002934:	f001 fb68 	bl	8004008 <MX_TIM4_Init>
  MX_ADC2_Init();
 8002938:	f7fe fdec 	bl	8001514 <MX_ADC2_Init>
  MX_I2C1_Init();
 800293c:	f7ff fe82 	bl	8002644 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 5);
 8002940:	2205      	movs	r2, #5
 8002942:	4977      	ldr	r1, [pc, #476]	@ (8002b20 <main+0x22c>)
 8002944:	4877      	ldr	r0, [pc, #476]	@ (8002b24 <main+0x230>)
 8002946:	f002 fbb3 	bl	80050b0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 800294a:	4b77      	ldr	r3, [pc, #476]	@ (8002b28 <main+0x234>)
 800294c:	2201      	movs	r2, #1
 800294e:	4619      	mov	r1, r3
 8002950:	4876      	ldr	r0, [pc, #472]	@ (8002b2c <main+0x238>)
 8002952:	f002 fbad 	bl	80050b0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim4);
 8002956:	4876      	ldr	r0, [pc, #472]	@ (8002b30 <main+0x23c>)
 8002958:	f006 fd44 	bl	80093e4 <HAL_TIM_Base_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,1520);
 800295c:	4b75      	ldr	r3, [pc, #468]	@ (8002b34 <main+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002966:	2100      	movs	r1, #0
 8002968:	4872      	ldr	r0, [pc, #456]	@ (8002b34 <main+0x240>)
 800296a:	f006 fe07 	bl	800957c <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB,PIN_ENABLE,GPIO_PIN_SET);
 800296e:	2201      	movs	r2, #1
 8002970:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002974:	4870      	ldr	r0, [pc, #448]	@ (8002b38 <main+0x244>)
 8002976:	f004 f807 	bl	8006988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,LED_ROUGE,GPIO_PIN_RESET);
 800297a:	2200      	movs	r2, #0
 800297c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002980:	486d      	ldr	r0, [pc, #436]	@ (8002b38 <main+0x244>)
 8002982:	f004 f801 	bl	8006988 <HAL_GPIO_WritePin>



  HAL_Delay(100);
 8002986:	2064      	movs	r0, #100	@ 0x64
 8002988:	f001 ffce 	bl	8004928 <HAL_Delay>
  HAL_UART_Abort(&huart1);
 800298c:	486b      	ldr	r0, [pc, #428]	@ (8002b3c <main+0x248>)
 800298e:	f008 f8cb 	bl	800ab28 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 8002992:	2240      	movs	r2, #64	@ 0x40
 8002994:	496a      	ldr	r1, [pc, #424]	@ (8002b40 <main+0x24c>)
 8002996:	4869      	ldr	r0, [pc, #420]	@ (8002b3c <main+0x248>)
 8002998:	f008 f87a 	bl	800aa90 <HAL_UART_Receive_DMA>

  HAL_Delay(100);
 800299c:	2064      	movs	r0, #100	@ 0x64
 800299e:	f001 ffc3 	bl	8004928 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 80029a2:	4868      	ldr	r0, [pc, #416]	@ (8002b44 <main+0x250>)
 80029a4:	f008 f8c0 	bl	800ab28 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&hlpuart1, (char*)usart_buffer, BUFFER_SIZE);
 80029a8:	2214      	movs	r2, #20
 80029aa:	4967      	ldr	r1, [pc, #412]	@ (8002b48 <main+0x254>)
 80029ac:	4865      	ldr	r0, [pc, #404]	@ (8002b44 <main+0x250>)
 80029ae:	f008 f86f 	bl	800aa90 <HAL_UART_Receive_DMA>




  f_mount(&fs, "", 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	4965      	ldr	r1, [pc, #404]	@ (8002b4c <main+0x258>)
 80029b6:	4866      	ldr	r0, [pc, #408]	@ (8002b50 <main+0x25c>)
 80029b8:	f00b fa0e 	bl	800ddd8 <f_mount>
//  f_close(&fil);
//  /* Unmount SDCARD */
//  f_mount(NULL, "", 1);


  int indexboucle=0;
 80029bc:	2300      	movs	r3, #0
 80029be:	647b      	str	r3, [r7, #68]	@ 0x44
  int tarvosen=0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	643b      	str	r3, [r7, #64]	@ 0x40
  f_open(&fil, "adc.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80029c4:	2213      	movs	r2, #19
 80029c6:	4963      	ldr	r1, [pc, #396]	@ (8002b54 <main+0x260>)
 80029c8:	4863      	ldr	r0, [pc, #396]	@ (8002b58 <main+0x264>)
 80029ca:	f00b fa4b 	bl	800de64 <f_open>

  		   f_getfree("", &fre_clust, &pfs);
 80029ce:	4a63      	ldr	r2, [pc, #396]	@ (8002b5c <main+0x268>)
 80029d0:	4963      	ldr	r1, [pc, #396]	@ (8002b60 <main+0x26c>)
 80029d2:	485e      	ldr	r0, [pc, #376]	@ (8002b4c <main+0x258>)
 80029d4:	f00b fc00 	bl	800e1d8 <f_getfree>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Init_HighPerf_Mode_6_axis();
 80029d8:	f7fe fb2c 	bl	8001034 <Init_HighPerf_Mode_6_axis>
  INIT_PERM_TARVOS(0x15, 0x16); //mon adresse est 1° et on envoit à 2°
 80029dc:	2116      	movs	r1, #22
 80029de:	2015      	movs	r0, #21
 80029e0:	f001 f91a 	bl	8003c18 <INIT_PERM_TARVOS>
  INIT_BARO();
 80029e4:	f7ff f82c 	bl	8001a40 <INIT_BARO>

  while (1)
   {
	//Servo entre 1350 et 1550

	nmea_parse(&myDataGPS,(uint8_t*) GPS_RX_Buffer);
 80029e8:	495e      	ldr	r1, [pc, #376]	@ (8002b64 <main+0x270>)
 80029ea:	485f      	ldr	r0, [pc, #380]	@ (8002b68 <main+0x274>)
 80029ec:	f000 fe06 	bl	80035fc <nmea_parse>
	//Évitement de l'ouverture
	if (myDataGPS.altitude - pointnull > 60 && flag_ouverture == 0){
 80029f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002b68 <main+0x274>)
 80029f2:	ed93 7a07 	vldr	s14, [r3, #28]
 80029f6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b6c <main+0x278>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a06:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002b70 <main+0x27c>
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	dd06      	ble.n	8002a22 <main+0x12e>
 8002a14:	4b57      	ldr	r3, [pc, #348]	@ (8002b74 <main+0x280>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <main+0x12e>
		flag_ouverture = 1 ;
 8002a1c:	4b55      	ldr	r3, [pc, #340]	@ (8002b74 <main+0x280>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
	}
	//Séparation des parties du CANSAT
	if (myDataGPS.altitude - pointnull < 60 && myDataGPS.altitude != 0 && flag_ouverture == 1) {
 8002a22:	4b51      	ldr	r3, [pc, #324]	@ (8002b68 <main+0x274>)
 8002a24:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a28:	4b50      	ldr	r3, [pc, #320]	@ (8002b6c <main+0x278>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a38:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8002b70 <main+0x27c>
 8002a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	d541      	bpl.n	8002aca <main+0x1d6>
 8002a46:	4b48      	ldr	r3, [pc, #288]	@ (8002b68 <main+0x274>)
 8002a48:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d039      	beq.n	8002aca <main+0x1d6>
 8002a56:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <main+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d135      	bne.n	8002aca <main+0x1d6>
	    char trame[51];  // Augmenté pour inclure l'astérisque et le '\0'
	    char altitude_str[10];

	    // Conversion de l'altitude en chaîne de caractères
	    strcpy(altitude_str, conv_float_to_char(myDataGPS.altitude));
 8002a5e:	4b42      	ldr	r3, [pc, #264]	@ (8002b68 <main+0x274>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd98 	bl	8000598 <__aeabi_f2d>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	ec43 2b10 	vmov	d0, r2, r3
 8002a70:	f000 fa56 	bl	8002f20 <conv_float_to_char>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f00d fd39 	bl	80104f6 <strcpy>

	    // Construction du message
	    strcpy(trame, "$2,le parachute s'est ouvert à ");
 8002a84:	463b      	mov	r3, r7
 8002a86:	4a3c      	ldr	r2, [pc, #240]	@ (8002b78 <main+0x284>)
 8002a88:	461c      	mov	r4, r3
 8002a8a:	4615      	mov	r5, r2
 8002a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	7023      	strb	r3, [r4, #0]
	    strcat(trame, altitude_str);
 8002a98:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f00d fc3d 	bl	8010320 <strcat>
	    strcat(trame, "*");
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fc09 	bl	80002c0 <strlen>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4931      	ldr	r1, [pc, #196]	@ (8002b7c <main+0x288>)
 8002ab8:	461a      	mov	r2, r3
 8002aba:	460b      	mov	r3, r1
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	8013      	strh	r3, [r2, #0]

	    // Action sur le timer
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1350);
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <main+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f240 5246 	movw	r2, #1350	@ 0x546
 8002ac8:	635a      	str	r2, [r3, #52]	@ 0x34

	    // Envoi du message
	    //SEND_DATA_NETW(trame, 0x82, 0x16, strlen(trame));
	}
	//Lecture de la valeur du servo
	if (flag_servo == 1){
 8002aca:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <main+0x28c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d107      	bne.n	8002ae2 <main+0x1ee>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,position_servo);
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b84 <main+0x290>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <main+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34
		//HAL_Delay(1000);
		flag_servo = 0 ;
 8002adc:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <main+0x28c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
	//Batterie faible
	if (vbat <= 7){
		//SEND_DATA_NETW("$2,batterie faible#", 0x82, 0x16, strlen("$2,batterie faible#"));
	}
	// Problème de GPS
	if (myDataGPS.fix == 0){
 8002ae2:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <main+0x274>)
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <main+0x202>
		SEND_DATA_NETW("$2,pas de GPS#", 0x82, 0x16, strlen("$2,pas de GPS#"));
 8002aea:	230e      	movs	r3, #14
 8002aec:	2216      	movs	r2, #22
 8002aee:	2182      	movs	r1, #130	@ 0x82
 8002af0:	4825      	ldr	r0, [pc, #148]	@ (8002b88 <main+0x294>)
 8002af2:	f001 f959 	bl	8003da8 <SEND_DATA_NETW>
	}
	//Envoi des données selon le timer
	if (flag_sensor == 1){
 8002af6:	4b25      	ldr	r3, [pc, #148]	@ (8002b8c <main+0x298>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	f47f af74 	bne.w	80029e8 <main+0xf4>
		Read_sensor_data(&myData6AXIS);
 8002b00:	4823      	ldr	r0, [pc, #140]	@ (8002b90 <main+0x29c>)
 8002b02:	f7fe fb1f 	bl	8001144 <Read_sensor_data>
//		BARO_FILL(&myDataBaro);
		conversion_char(envoi);
 8002b06:	4823      	ldr	r0, [pc, #140]	@ (8002b94 <main+0x2a0>)
 8002b08:	f000 f89a 	bl	8002c40 <conversion_char>
		SEND_DATA_NETW("$23,42,N,2,E,14,120,1013,2025,01,18,14,30,45*", 0x82, 0x16, strlen("$23,42,N,2,E,14,120,1013,2025,01,18,14,30,45*"));
 8002b0c:	232d      	movs	r3, #45	@ 0x2d
 8002b0e:	2216      	movs	r2, #22
 8002b10:	2182      	movs	r1, #130	@ 0x82
 8002b12:	4821      	ldr	r0, [pc, #132]	@ (8002b98 <main+0x2a4>)
 8002b14:	f001 f948 	bl	8003da8 <SEND_DATA_NETW>

		//SEND_DATA_NETW(envoi, 0x82, 0x16, strlen(envoi));
		flag_sensor = 0;
 8002b18:	4b1c      	ldr	r3, [pc, #112]	@ (8002b8c <main+0x298>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
	nmea_parse(&myDataGPS,(uint8_t*) GPS_RX_Buffer);
 8002b1e:	e763      	b.n	80029e8 <main+0xf4>
 8002b20:	20000b40 	.word	0x20000b40
 8002b24:	20000214 	.word	0x20000214
 8002b28:	20000b48 	.word	0x20000b48
 8002b2c:	20000280 	.word	0x20000280
 8002b30:	20000e18 	.word	0x20000e18
 8002b34:	20000dcc 	.word	0x20000dcc
 8002b38:	48000400 	.word	0x48000400
 8002b3c:	20000f00 	.word	0x20000f00
 8002b40:	20000ae4 	.word	0x20000ae4
 8002b44:	20000e6c 	.word	0x20000e6c
 8002b48:	20000b24 	.word	0x20000b24
 8002b4c:	08012ea4 	.word	0x08012ea4
 8002b50:	2000045c 	.word	0x2000045c
 8002b54:	08012ea8 	.word	0x08012ea8
 8002b58:	20000690 	.word	0x20000690
 8002b5c:	2000068c 	.word	0x2000068c
 8002b60:	200008c0 	.word	0x200008c0
 8002b64:	200008e4 	.word	0x200008e4
 8002b68:	20000c90 	.word	0x20000c90
 8002b6c:	2000000c 	.word	0x2000000c
 8002b70:	42700000 	.word	0x42700000
 8002b74:	20000d10 	.word	0x20000d10
 8002b78:	08012eb0 	.word	0x08012eb0
 8002b7c:	08012ed4 	.word	0x08012ed4
 8002b80:	20000e68 	.word	0x20000e68
 8002b84:	20000e64 	.word	0x20000e64
 8002b88:	08012ed8 	.word	0x08012ed8
 8002b8c:	20000db4 	.word	0x20000db4
 8002b90:	20000cd0 	.word	0x20000cd0
 8002b94:	20000b64 	.word	0x20000b64
 8002b98:	08012ee8 	.word	0x08012ee8

08002b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b094      	sub	sp, #80	@ 0x50
 8002ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ba2:	f107 0318 	add.w	r3, r7, #24
 8002ba6:	2238      	movs	r2, #56	@ 0x38
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f00d fc4c 	bl	8010448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bbe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002bc2:	f004 fe37 	bl	8007834 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8002bc6:	2323      	movs	r3, #35	@ 0x23
 8002bc8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bd6:	2340      	movs	r3, #64	@ 0x40
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bde:	2302      	movs	r3, #2
 8002be0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002be2:	2303      	movs	r3, #3
 8002be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002be6:	2301      	movs	r3, #1
 8002be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002bea:	2308      	movs	r3, #8
 8002bec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bfa:	f107 0318 	add.w	r3, r7, #24
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 fecc 	bl	800799c <HAL_RCC_OscConfig>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c0a:	f000 f9db 	bl	8002fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c0e:	230f      	movs	r3, #15
 8002c10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c12:	2303      	movs	r3, #3
 8002c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	2102      	movs	r1, #2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f005 f9ca 	bl	8007fc0 <HAL_RCC_ClockConfig>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c32:	f000 f9c7 	bl	8002fc4 <Error_Handler>
  }
}
 8002c36:	bf00      	nop
 8002c38:	3750      	adds	r7, #80	@ 0x50
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <conversion_char>:
  for (size_t i = 0; i < taille; i++) {
    destination[i] = (char)source[i];
  }
}

void conversion_char(char *envoi){
 8002c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c42:	b091      	sub	sp, #68	@ 0x44
 8002c44:	af06      	add	r7, sp, #24
 8002c46:	6078      	str	r0, [r7, #4]
    size_t len;
    memset(envoi, '0', strlen(envoi));  // Remplit la chaîne de '0'
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fd fb39 	bl	80002c0 <strlen>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	2130      	movs	r1, #48	@ 0x30
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f00d fbf7 	bl	8010448 <memset>
    envoi[0]='$';
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	@ 0x24
 8002c5e:	701a      	strb	r2, [r3, #0]
    envoi[1]='1';
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3301      	adds	r3, #1
 8002c64:	2231      	movs	r2, #49	@ 0x31
 8002c66:	701a      	strb	r2, [r3, #0]
    envoi[2]=',';
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	222c      	movs	r2, #44	@ 0x2c
 8002c6e:	701a      	strb	r2, [r3, #0]
    snprintf(accel_gyro, accel_gyro, "%u , %u , %u , %u,%u,%u,",
 8002c70:	4ea1      	ldr	r6, [pc, #644]	@ (8002ef8 <conversion_char+0x2b8>)
 8002c72:	4ba2      	ldr	r3, [pc, #648]	@ (8002efc <conversion_char+0x2bc>)
 8002c74:	681d      	ldr	r5, [r3, #0]
 8002c76:	4ba1      	ldr	r3, [pc, #644]	@ (8002efc <conversion_char+0x2bc>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4aa0      	ldr	r2, [pc, #640]	@ (8002efc <conversion_char+0x2bc>)
 8002c7c:	6892      	ldr	r2, [r2, #8]
 8002c7e:	499f      	ldr	r1, [pc, #636]	@ (8002efc <conversion_char+0x2bc>)
 8002c80:	68c9      	ldr	r1, [r1, #12]
 8002c82:	489e      	ldr	r0, [pc, #632]	@ (8002efc <conversion_char+0x2bc>)
 8002c84:	6900      	ldr	r0, [r0, #16]
 8002c86:	4c9d      	ldr	r4, [pc, #628]	@ (8002efc <conversion_char+0x2bc>)
 8002c88:	6964      	ldr	r4, [r4, #20]
 8002c8a:	9404      	str	r4, [sp, #16]
 8002c8c:	9003      	str	r0, [sp, #12]
 8002c8e:	9102      	str	r1, [sp, #8]
 8002c90:	9201      	str	r2, [sp, #4]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	462b      	mov	r3, r5
 8002c96:	4a9a      	ldr	r2, [pc, #616]	@ (8002f00 <conversion_char+0x2c0>)
 8002c98:	4631      	mov	r1, r6
 8002c9a:	4897      	ldr	r0, [pc, #604]	@ (8002ef8 <conversion_char+0x2b8>)
 8002c9c:	f00c face 	bl	800f23c <sniprintf>
                           myData6AXIS.AccelX, myData6AXIS.AccelY, myData6AXIS.AccelZ,
    					   myData6AXIS.GyroX, myData6AXIS.GyroY, myData6AXIS.GyroZ);
    convertIntToChar(myData6AXIS, accel_gyro, 20);
 8002ca0:	4c96      	ldr	r4, [pc, #600]	@ (8002efc <conversion_char+0x2bc>)
 8002ca2:	2314      	movs	r3, #20
 8002ca4:	9305      	str	r3, [sp, #20]
 8002ca6:	4b94      	ldr	r3, [pc, #592]	@ (8002ef8 <conversion_char+0x2b8>)
 8002ca8:	9304      	str	r3, [sp, #16]
 8002caa:	466d      	mov	r5, sp
 8002cac:	f104 0310 	add.w	r3, r4, #16
 8002cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cba:	f000 f961 	bl	8002f80 <convertIntToChar>
    len = strlen(envoi);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd fafe 	bl	80002c0 <strlen>
 8002cc4:	60b8      	str	r0, [r7, #8]
    for (int i = 0; i<(sizeof(accel_gyro));i++){
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cca:	e00c      	b.n	8002ce6 <conversion_char+0xa6>
    	envoi[i+len] = accel_gyro[i];
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4988      	ldr	r1, [pc, #544]	@ (8002ef8 <conversion_char+0x2b8>)
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cda:	440a      	add	r2, r1
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(accel_gyro));i++){
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d9ef      	bls.n	8002ccc <conversion_char+0x8c>
    }
    len = strlen(envoi);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7fd fae7 	bl	80002c0 <strlen>
 8002cf2:	60b8      	str	r0, [r7, #8]
    conv_float_to_char(temperature_6axis, sizeof(temperature_6axis),myData6AXIS.temp);
 8002cf4:	4b81      	ldr	r3, [pc, #516]	@ (8002efc <conversion_char+0x2bc>)
 8002cf6:	ed93 7b06 	vldr	d7, [r3, #24]
 8002cfa:	eeb0 0a47 	vmov.f32	s0, s14
 8002cfe:	eef0 0a67 	vmov.f32	s1, s15
 8002d02:	2114      	movs	r1, #20
 8002d04:	487f      	ldr	r0, [pc, #508]	@ (8002f04 <conversion_char+0x2c4>)
 8002d06:	f000 f90b 	bl	8002f20 <conv_float_to_char>
    for (int i = 0; i<(sizeof(temperature_6axis));i++){
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	e00c      	b.n	8002d2a <conversion_char+0xea>
        	envoi[i+len] = temperature_6axis[i];
 8002d10:	6a3a      	ldr	r2, [r7, #32]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4413      	add	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	497a      	ldr	r1, [pc, #488]	@ (8002f04 <conversion_char+0x2c4>)
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	440a      	add	r2, r1
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(temperature_6axis));i++){
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	3301      	adds	r3, #1
 8002d28:	623b      	str	r3, [r7, #32]
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b13      	cmp	r3, #19
 8002d2e:	d9ef      	bls.n	8002d10 <conversion_char+0xd0>
    }
    envoi[strlen(envoi)]=',';
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fd fac5 	bl	80002c0 <strlen>
 8002d36:	4602      	mov	r2, r0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	222c      	movs	r2, #44	@ 0x2c
 8002d3e:	701a      	strb	r2, [r3, #0]
    len = strlen(envoi);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fd fabd 	bl	80002c0 <strlen>
 8002d46:	60b8      	str	r0, [r7, #8]
    mef_pos(pos, sizeof(pos),myDataGPS.latitude);
 8002d48:	4b6f      	ldr	r3, [pc, #444]	@ (8002f08 <conversion_char+0x2c8>)
 8002d4a:	ed93 7b00 	vldr	d7, [r3]
 8002d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d52:	eef0 0a67 	vmov.f32	s1, s15
 8002d56:	210a      	movs	r1, #10
 8002d58:	486c      	ldr	r0, [pc, #432]	@ (8002f0c <conversion_char+0x2cc>)
 8002d5a:	f000 f8fb 	bl	8002f54 <mef_pos>
    for (int i = 0; i<(sizeof(pos));i++){
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e00c      	b.n	8002d7e <conversion_char+0x13e>
            	envoi[i+len] = pos[i];
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4413      	add	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4967      	ldr	r1, [pc, #412]	@ (8002f0c <conversion_char+0x2cc>)
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	440a      	add	r2, r1
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(pos));i++){
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2b09      	cmp	r3, #9
 8002d82:	d9ef      	bls.n	8002d64 <conversion_char+0x124>
    }
    envoi[strlen(envoi)]=',';
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fd fa9b 	bl	80002c0 <strlen>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	222c      	movs	r2, #44	@ 0x2c
 8002d92:	701a      	strb	r2, [r3, #0]
    len = strlen(envoi);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fd fa93 	bl	80002c0 <strlen>
 8002d9a:	60b8      	str	r0, [r7, #8]
	mef_pos(pos, sizeof(pos),myDataGPS.longitude);
 8002d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8002f08 <conversion_char+0x2c8>)
 8002d9e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002da2:	eeb0 0a47 	vmov.f32	s0, s14
 8002da6:	eef0 0a67 	vmov.f32	s1, s15
 8002daa:	210a      	movs	r1, #10
 8002dac:	4857      	ldr	r0, [pc, #348]	@ (8002f0c <conversion_char+0x2cc>)
 8002dae:	f000 f8d1 	bl	8002f54 <mef_pos>
	for (int i = 0; i<(sizeof(pos));i++){
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e00c      	b.n	8002dd2 <conversion_char+0x192>
				envoi[i+len] = pos[i];
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4952      	ldr	r1, [pc, #328]	@ (8002f0c <conversion_char+0x2cc>)
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	440a      	add	r2, r1
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<(sizeof(pos));i++){
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	d9ef      	bls.n	8002db8 <conversion_char+0x178>
	}
    envoi[strlen(envoi)]=',';
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fd fa71 	bl	80002c0 <strlen>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	222c      	movs	r2, #44	@ 0x2c
 8002de6:	701a      	strb	r2, [r3, #0]
    len = strlen(envoi);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fd fa69 	bl	80002c0 <strlen>
 8002dee:	60b8      	str	r0, [r7, #8]
    conv_float_to_char(altitude,sizeof(altitude),myDataGPS.altitude);
 8002df0:	4b45      	ldr	r3, [pc, #276]	@ (8002f08 <conversion_char+0x2c8>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fbcf 	bl	8000598 <__aeabi_f2d>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	ec43 2b10 	vmov	d0, r2, r3
 8002e02:	210a      	movs	r1, #10
 8002e04:	4842      	ldr	r0, [pc, #264]	@ (8002f10 <conversion_char+0x2d0>)
 8002e06:	f000 f88b 	bl	8002f20 <conv_float_to_char>
    for (int i = 0; i<(sizeof(altitude));i++){
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e00c      	b.n	8002e2a <conversion_char+0x1ea>
    				envoi[i+len] = altitude[i];
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4413      	add	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	493d      	ldr	r1, [pc, #244]	@ (8002f10 <conversion_char+0x2d0>)
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	440a      	add	r2, r1
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(altitude));i++){
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3301      	adds	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	d9ef      	bls.n	8002e10 <conversion_char+0x1d0>
    }
    envoi[strlen(envoi)]=',';
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd fa45 	bl	80002c0 <strlen>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	222c      	movs	r2, #44	@ 0x2c
 8002e3e:	701a      	strb	r2, [r3, #0]
	len = strlen(envoi);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7fd fa3d 	bl	80002c0 <strlen>
 8002e46:	60b8      	str	r0, [r7, #8]
	conv_float_to_char(pression,sizeof(pression),myDataBaro.Pression);
 8002e48:	4b32      	ldr	r3, [pc, #200]	@ (8002f14 <conversion_char+0x2d4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd fba3 	bl	8000598 <__aeabi_f2d>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	ec43 2b10 	vmov	d0, r2, r3
 8002e5a:	2114      	movs	r1, #20
 8002e5c:	482e      	ldr	r0, [pc, #184]	@ (8002f18 <conversion_char+0x2d8>)
 8002e5e:	f000 f85f 	bl	8002f20 <conv_float_to_char>
	for (int i = 0; i<(sizeof(pression));i++){
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	e00c      	b.n	8002e82 <conversion_char+0x242>
					envoi[i+len] = pression[i];
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	4929      	ldr	r1, [pc, #164]	@ (8002f18 <conversion_char+0x2d8>)
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	440a      	add	r2, r1
 8002e78:	7812      	ldrb	r2, [r2, #0]
 8002e7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<(sizeof(pression));i++){
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b13      	cmp	r3, #19
 8002e86:	d9ef      	bls.n	8002e68 <conversion_char+0x228>
	}
	envoi[strlen(envoi)]=',';
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7fd fa19 	bl	80002c0 <strlen>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	222c      	movs	r2, #44	@ 0x2c
 8002e96:	701a      	strb	r2, [r3, #0]
	len = strlen(envoi);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fd fa11 	bl	80002c0 <strlen>
 8002e9e:	60b8      	str	r0, [r7, #8]
	conv_float_to_char(temperature_baro,sizeof(temperature_baro),myDataBaro.Temperature);
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f14 <conversion_char+0x2d4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fb77 	bl	8000598 <__aeabi_f2d>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	ec43 2b10 	vmov	d0, r2, r3
 8002eb2:	2114      	movs	r1, #20
 8002eb4:	4819      	ldr	r0, [pc, #100]	@ (8002f1c <conversion_char+0x2dc>)
 8002eb6:	f000 f833 	bl	8002f20 <conv_float_to_char>
	for (int i = 0; i<(sizeof(temperature_baro));i++){
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e00c      	b.n	8002eda <conversion_char+0x29a>
					envoi[i+len] = temperature_baro[i];
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	4914      	ldr	r1, [pc, #80]	@ (8002f1c <conversion_char+0x2dc>)
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	440a      	add	r2, r1
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<(sizeof(temperature_baro));i++){
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b13      	cmp	r3, #19
 8002ede:	d9ef      	bls.n	8002ec0 <conversion_char+0x280>
	}
    envoi[strlen(envoi)]='#';
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fd f9ed 	bl	80002c0 <strlen>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	2223      	movs	r2, #35	@ 0x23
 8002eee:	701a      	strb	r2, [r3, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	372c      	adds	r7, #44	@ 0x2c
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef8:	20000c2c 	.word	0x20000c2c
 8002efc:	20000cd0 	.word	0x20000cd0
 8002f00:	08012f18 	.word	0x08012f18
 8002f04:	20000c50 	.word	0x20000c50
 8002f08:	20000c90 	.word	0x20000c90
 8002f0c:	20000cf8 	.word	0x20000cf8
 8002f10:	20000d04 	.word	0x20000d04
 8002f14:	20000cf0 	.word	0x20000cf0
 8002f18:	20000c78 	.word	0x20000c78
 8002f1c:	20000c64 	.word	0x20000c64

08002f20 <conv_float_to_char>:



void conv_float_to_char(char *buffer, size_t buffer_size, float temperature) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	ed87 0a01 	vstr	s0, [r7, #4]
    snprintf(buffer, buffer_size, "%.1f", temperature);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd fb32 	bl	8000598 <__aeabi_f2d>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	e9cd 2300 	strd	r2, r3, [sp]
 8002f3c:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <conv_float_to_char+0x30>)
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f00c f97b 	bl	800f23c <sniprintf>
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	08012f34 	.word	0x08012f34

08002f54 <mef_pos>:

void mef_pos(char *buffer, size_t buffer_size, double position) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	ed87 0b00 	vstr	d0, [r7]
    snprintf(buffer, buffer_size, "%.7f", position);
 8002f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f66:	e9cd 2300 	strd	r2, r3, [sp]
 8002f6a:	4a04      	ldr	r2, [pc, #16]	@ (8002f7c <mef_pos+0x28>)
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f00c f964 	bl	800f23c <sniprintf>
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	08012f3c 	.word	0x08012f3c

08002f80 <convertIntToChar>:

void Set_Servo_Position(uint16_t pulse_width) {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_width);
}

void convertIntToChar(AXIS6 data, char *buffer, size_t buffer_size) {
 8002f80:	b084      	sub	sp, #16
 8002f82:	b5b0      	push	{r4, r5, r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af06      	add	r7, sp, #24
 8002f88:	f107 0410 	add.w	r4, r7, #16
 8002f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    snprintf(buffer, buffer_size,
 8002f90:	693d      	ldr	r5, [r7, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	69f9      	ldr	r1, [r7, #28]
 8002f98:	6a38      	ldr	r0, [r7, #32]
 8002f9a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002f9c:	9404      	str	r4, [sp, #16]
 8002f9e:	9003      	str	r0, [sp, #12]
 8002fa0:	9102      	str	r1, [sp, #8]
 8002fa2:	9201      	str	r2, [sp, #4]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	4a05      	ldr	r2, [pc, #20]	@ (8002fc0 <convertIntToChar+0x40>)
 8002faa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fae:	f00c f945 	bl	800f23c <sniprintf>
             "%d,%d,%d,%d,%d,%d",
             data.AccelX, data.AccelY, data.AccelZ,
             data.GyroX, data.GyroY, data.GyroZ);
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002fba:	b004      	add	sp, #16
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	08012f44 	.word	0x08012f44

08002fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc8:	b672      	cpsid	i
}
 8002fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <Error_Handler+0x8>

08002fd0 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fd f971 	bl	80002c0 <strlen>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d801      	bhi.n	8002fe8 <gps_checksum+0x18>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e038      	b.n	800305a <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7fd f969 	bl	80002c0 <strlen>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	3b04      	subs	r3, #4
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd f960 	bl	80002c0 <strlen>
 8003000:	4603      	mov	r3, r0
 8003002:	3b03      	subs	r3, #3
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	e00a      	b.n	800302c <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	4053      	eors	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3301      	adds	r3, #1
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fd f947 	bl	80002c0 <strlen>
 8003032:	4603      	mov	r3, r0
 8003034:	1f5a      	subs	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	429a      	cmp	r2, r3
 800303a:	d8ec      	bhi.n	8003016 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800303c:	f107 0308 	add.w	r3, r7, #8
 8003040:	2210      	movs	r2, #16
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f00d f8e5 	bl	8010214 <strtol>
 800304a:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	429a      	cmp	r2, r3
 8003052:	d101      	bne.n	8003058 <gps_checksum+0x88>
        return 1;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <gps_checksum+0x8a>
    }
    else{
        return 0;
 8003058:	2300      	movs	r3, #0
    }
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b0b7      	sub	sp, #220	@ 0xdc
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8003074:	f107 0320 	add.w	r3, r7, #32
 8003078:	2264      	movs	r2, #100	@ 0x64
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f00d f9e3 	bl	8010448 <memset>
    char *marker = strtok(inputString, ",");
 8003082:	49c2      	ldr	r1, [pc, #776]	@ (800338c <nmea_GPGGA+0x328>)
 8003084:	6838      	ldr	r0, [r7, #0]
 8003086:	f00d f96d 	bl	8010364 <strtok>
 800308a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800308e:	e027      	b.n	80030e0 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003090:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003094:	f7fd f914 	bl	80002c0 <strlen>
 8003098:	4603      	mov	r3, r0
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 80030a0:	1c63      	adds	r3, r4, #1
 80030a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80030a6:	4610      	mov	r0, r2
 80030a8:	f00b fc74 	bl	800e994 <malloc>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	00a3      	lsls	r3, r4, #2
 80030b2:	33d8      	adds	r3, #216	@ 0xd8
 80030b4:	443b      	add	r3, r7
 80030b6:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80030ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030be:	3b01      	subs	r3, #1
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	33d8      	adds	r3, #216	@ 0xd8
 80030c4:	443b      	add	r3, r7
 80030c6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030ca:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00d fa11 	bl	80104f6 <strcpy>
        marker = strtok(NULL, ",");
 80030d4:	49ad      	ldr	r1, [pc, #692]	@ (800338c <nmea_GPGGA+0x328>)
 80030d6:	2000      	movs	r0, #0
 80030d8:	f00d f944 	bl	8010364 <strtok>
 80030dc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80030e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1d3      	bne.n	8003090 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80030e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	332c      	adds	r3, #44	@ 0x2c
 80030fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f00d f9f8 	bl	80104f6 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8003106:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800310a:	2b53      	cmp	r3, #83	@ 0x53
 800310c:	d004      	beq.n	8003118 <nmea_GPGGA+0xb4>
 800310e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8003112:	2b4e      	cmp	r3, #78	@ 0x4e
 8003114:	f040 8159 	bne.w	80033ca <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800311e:	e010      	b.n	8003142 <nmea_GPGGA+0xde>
 8003120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003126:	4413      	add	r3, r2
 8003128:	7819      	ldrb	r1, [r3, #0]
 800312a:	f107 021c 	add.w	r2, r7, #28
 800312e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003132:	4413      	add	r3, r2
 8003134:	460a      	mov	r2, r1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800313c:	3301      	adds	r3, #1
 800313e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003146:	2b01      	cmp	r3, #1
 8003148:	ddea      	ble.n	8003120 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003150:	e011      	b.n	8003176 <nmea_GPGGA+0x112>
 8003152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003158:	3302      	adds	r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	7819      	ldrb	r1, [r3, #0]
 800315e:	f107 0214 	add.w	r2, r7, #20
 8003162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003166:	4413      	add	r3, r2
 8003168:	460a      	mov	r2, r1
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003170:	3301      	adds	r3, #1
 8003172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800317a:	2b05      	cmp	r3, #5
 800317c:	dde9      	ble.n	8003152 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	220a      	movs	r2, #10
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f00d f844 	bl	8010214 <strtol>
 800318c:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f00c ff5c 	bl	8010054 <strtof>
 800319c:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80031a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ac:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 80031b0:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 8003390 <nmea_GPGGA+0x32c>
 80031b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	ee17 0a90 	vmov	r0, s15
 80031c0:	f7fd f9ea 	bl	8000598 <__aeabi_f2d>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031d2:	e010      	b.n	80031f6 <nmea_GPGGA+0x192>
 80031d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031da:	4413      	add	r3, r2
 80031dc:	7819      	ldrb	r1, [r3, #0]
 80031de:	f107 0210 	add.w	r2, r7, #16
 80031e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e6:	4413      	add	r3, r2
 80031e8:	460a      	mov	r2, r1
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f0:	3301      	adds	r3, #1
 80031f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	ddea      	ble.n	80031d4 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80031fe:	2300      	movs	r3, #0
 8003200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003204:	e011      	b.n	800322a <nmea_GPGGA+0x1c6>
 8003206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800320c:	3303      	adds	r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	7819      	ldrb	r1, [r3, #0]
 8003212:	f107 0208 	add.w	r2, r7, #8
 8003216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800321a:	4413      	add	r3, r2
 800321c:	460a      	mov	r2, r1
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003224:	3301      	adds	r3, #1
 8003226:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800322a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800322e:	2b05      	cmp	r3, #5
 8003230:	dde9      	ble.n	8003206 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	220a      	movs	r2, #10
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f00c ffea 	bl	8010214 <strtol>
 8003240:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003244:	f107 0308 	add.w	r3, r7, #8
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f00c ff02 	bl	8010054 <strtof>
 8003250:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003254:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003260:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8003264:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 8003390 <nmea_GPGGA+0x32c>
 8003268:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800326c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003270:	ee17 0a90 	vmov	r0, s15
 8003274:	f7fd f990 	bl	8000598 <__aeabi_f2d>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800328c:	f7fd fc44 	bl	8000b18 <__aeabi_dcmpeq>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d176      	bne.n	8003384 <nmea_GPGGA+0x320>
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80032a2:	f7fd fc39 	bl	8000b18 <__aeabi_dcmpeq>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d16b      	bne.n	8003384 <nmea_GPGGA+0x320>
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	4b38      	ldr	r3, [pc, #224]	@ (8003394 <nmea_GPGGA+0x330>)
 80032b2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80032b6:	f7fd fc39 	bl	8000b2c <__aeabi_dcmplt>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d061      	beq.n	8003384 <nmea_GPGGA+0x320>
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	4b34      	ldr	r3, [pc, #208]	@ (8003398 <nmea_GPGGA+0x334>)
 80032c6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80032ca:	f7fd fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d057      	beq.n	8003384 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80032da:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80032e4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80032ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80032f6:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80032f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f00c fea9 	bl	8010054 <strtof>
 8003302:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8003306:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800330a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	d102      	bne.n	800331a <nmea_GPGGA+0x2b6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	e001      	b.n	800331e <nmea_GPGGA+0x2ba>
 800331a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003324:	220a      	movs	r2, #10
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f00c ff73 	bl	8010214 <strtol>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003336:	220a      	movs	r2, #10
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f00c ff6a 	bl	8010214 <strtol>
 8003340:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003344:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003348:	2b00      	cmp	r3, #0
 800334a:	bfcc      	ite	gt
 800334c:	2301      	movgt	r3, #1
 800334e:	2300      	movle	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f00c fe79 	bl	8010054 <strtof>
 8003362:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003366:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800336a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	d102      	bne.n	800337a <nmea_GPGGA+0x316>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	e001      	b.n	800337e <nmea_GPGGA+0x31a>
 800337a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003382:	e022      	b.n	80033ca <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800338a:	e016      	b.n	80033ba <nmea_GPGGA+0x356>
 800338c:	08012f58 	.word	0x08012f58
 8003390:	42700000 	.word	0x42700000
 8003394:	40568000 	.word	0x40568000
 8003398:	40668000 	.word	0x40668000
 800339c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	33d8      	adds	r3, #216	@ 0xd8
 80033a4:	443b      	add	r3, r7
 80033a6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f00b fafa 	bl	800e9a4 <free>
 80033b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033b4:	3301      	adds	r3, #1
 80033b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80033be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dbea      	blt.n	800339c <nmea_GPGGA+0x338>
            return 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e019      	b.n	80033fe <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033d0:	e00e      	b.n	80033f0 <nmea_GPGGA+0x38c>
 80033d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	33d8      	adds	r3, #216	@ 0xd8
 80033da:	443b      	add	r3, r7
 80033dc:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f00b fadf 	bl	800e9a4 <free>
 80033e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033ea:	3301      	adds	r3, #1
 80033ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbea      	blt.n	80033d2 <nmea_GPGGA+0x36e>
    return 1;
 80033fc:	2301      	movs	r3, #1
}
 80033fe:	4618      	mov	r0, r3
 8003400:	37dc      	adds	r7, #220	@ 0xdc
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}
 8003406:	bf00      	nop

08003408 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b0a3      	sub	sp, #140	@ 0x8c
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	2264      	movs	r2, #100	@ 0x64
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f00d f811 	bl	8010448 <memset>
    char *marker = strtok(inputString, ",");
 8003426:	493b      	ldr	r1, [pc, #236]	@ (8003514 <nmea_GPGSA+0x10c>)
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	f00c ff9b 	bl	8010364 <strtok>
 800342e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8003432:	e027      	b.n	8003484 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003434:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003438:	f7fc ff42 	bl	80002c0 <strlen>
 800343c:	4603      	mov	r3, r0
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8003444:	1c63      	adds	r3, r4, #1
 8003446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800344a:	4610      	mov	r0, r2
 800344c:	f00b faa2 	bl	800e994 <malloc>
 8003450:	4603      	mov	r3, r0
 8003452:	461a      	mov	r2, r3
 8003454:	00a3      	lsls	r3, r4, #2
 8003456:	3388      	adds	r3, #136	@ 0x88
 8003458:	443b      	add	r3, r7
 800345a:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800345e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003462:	3b01      	subs	r3, #1
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	3388      	adds	r3, #136	@ 0x88
 8003468:	443b      	add	r3, r7
 800346a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800346e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003472:	4618      	mov	r0, r3
 8003474:	f00d f83f 	bl	80104f6 <strcpy>
        marker = strtok(NULL, ",");
 8003478:	4926      	ldr	r1, [pc, #152]	@ (8003514 <nmea_GPGSA+0x10c>)
 800347a:	2000      	movs	r0, #0
 800347c:	f00c ff72 	bl	8010364 <strtok>
 8003480:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8003484:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1d3      	bne.n	8003434 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	220a      	movs	r2, #10
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f00c febe 	bl	8010214 <strtol>
 8003498:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 800349a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800349c:	2b01      	cmp	r3, #1
 800349e:	bfcc      	ite	gt
 80034a0:	2301      	movgt	r3, #1
 80034a2:	2300      	movle	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80034b0:	2303      	movs	r3, #3
 80034b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034b4:	e00e      	b.n	80034d4 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80034b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	3388      	adds	r3, #136	@ 0x88
 80034bc:	443b      	add	r3, r7
 80034be:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <nmea_GPGSA+0xc6>
            satelliteCount++;
 80034c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034ca:	3301      	adds	r3, #1
 80034cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80034ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034d0:	3301      	adds	r3, #1
 80034d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034d6:	2b0e      	cmp	r3, #14
 80034d8:	dded      	ble.n	80034b6 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80034e0:	2300      	movs	r3, #0
 80034e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80034e4:	e00b      	b.n	80034fe <nmea_GPGSA+0xf6>
 80034e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	3388      	adds	r3, #136	@ 0x88
 80034ec:	443b      	add	r3, r7
 80034ee:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f00b fa56 	bl	800e9a4 <free>
 80034f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034fa:	3301      	adds	r3, #1
 80034fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80034fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003500:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003504:	429a      	cmp	r2, r3
 8003506:	dbee      	blt.n	80034e6 <nmea_GPGSA+0xde>
    return 1;
 8003508:	2301      	movs	r3, #1
}
 800350a:	4618      	mov	r0, r3
 800350c:	378c      	adds	r7, #140	@ 0x8c
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	bf00      	nop
 8003514:	08012f58 	.word	0x08012f58

08003518 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b0a1      	sub	sp, #132	@ 0x84
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	2264      	movs	r2, #100	@ 0x64
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f00c ff8a 	bl	8010448 <memset>
    char *marker = strtok(inputString, ",");
 8003534:	4930      	ldr	r1, [pc, #192]	@ (80035f8 <nmea_GNRMC+0xe0>)
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	f00c ff14 	bl	8010364 <strtok>
 800353c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800353e:	e021      	b.n	8003584 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003540:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003542:	f7fc febd 	bl	80002c0 <strlen>
 8003546:	4603      	mov	r3, r0
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800354c:	1c63      	adds	r3, r4, #1
 800354e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003550:	4610      	mov	r0, r2
 8003552:	f00b fa1f 	bl	800e994 <malloc>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	00a3      	lsls	r3, r4, #2
 800355c:	3380      	adds	r3, #128	@ 0x80
 800355e:	443b      	add	r3, r7
 8003560:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8003564:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003566:	3b01      	subs	r3, #1
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3380      	adds	r3, #128	@ 0x80
 800356c:	443b      	add	r3, r7
 800356e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003572:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003574:	4618      	mov	r0, r3
 8003576:	f00c ffbe 	bl	80104f6 <strcpy>
        marker = strtok(NULL, ",");
 800357a:	491f      	ldr	r1, [pc, #124]	@ (80035f8 <nmea_GNRMC+0xe0>)
 800357c:	2000      	movs	r0, #0
 800357e:	f00c fef1 	bl	8010364 <strtok>
 8003582:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8003584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1da      	bne.n	8003540 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f00c fd60 	bl	8010054 <strtof>
 8003594:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8003598:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800359a:	f7fc fffd 	bl	8000598 <__aeabi_f2d>
 800359e:	a314      	add	r3, pc, #80	@ (adr r3, 80035f0 <nmea_GNRMC+0xd8>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f7fd f97a 	bl	800089c <__aeabi_ddiv>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7fd fb42 	bl	8000c38 <__aeabi_d2f>
 80035b4:	4602      	mov	r2, r0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80035ba:	2300      	movs	r3, #0
 80035bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80035be:	e00b      	b.n	80035d8 <nmea_GNRMC+0xc0>
 80035c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	3380      	adds	r3, #128	@ 0x80
 80035c6:	443b      	add	r3, r7
 80035c8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f00b f9e9 	bl	800e9a4 <free>
 80035d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d4:	3301      	adds	r3, #1
 80035d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80035d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035dc:	429a      	cmp	r2, r3
 80035de:	dbef      	blt.n	80035c0 <nmea_GNRMC+0xa8>
    return 1;
 80035e0:	2301      	movs	r3, #1
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3784      	adds	r7, #132	@ 0x84
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd90      	pop	{r4, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	f3af 8000 	nop.w
 80035f0:	be76c8b4 	.word	0xbe76c8b4
 80035f4:	3fff1a9f 	.word	0x3fff1a9f
 80035f8:	08012f58 	.word	0x08012f58

080035fc <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8003606:	223c      	movs	r2, #60	@ 0x3c
 8003608:	2100      	movs	r1, #0
 800360a:	484e      	ldr	r0, [pc, #312]	@ (8003744 <nmea_parse+0x148>)
 800360c:	f00c ff1c 	bl	8010448 <memset>
    char * token = strtok(buffer, "$");
 8003610:	494d      	ldr	r1, [pc, #308]	@ (8003748 <nmea_parse+0x14c>)
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	f00c fea6 	bl	8010364 <strtok>
 8003618:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800361e:	e01d      	b.n	800365c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f7fc fe4d 	bl	80002c0 <strlen>
 8003626:	4603      	mov	r3, r0
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	693c      	ldr	r4, [r7, #16]
 800362c:	1c63      	adds	r3, r4, #1
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	4610      	mov	r0, r2
 8003632:	f00b f9af 	bl	800e994 <malloc>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	4b42      	ldr	r3, [pc, #264]	@ (8003744 <nmea_parse+0x148>)
 800363c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3b01      	subs	r3, #1
 8003644:	4a3f      	ldr	r2, [pc, #252]	@ (8003744 <nmea_parse+0x148>)
 8003646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364a:	6979      	ldr	r1, [r7, #20]
 800364c:	4618      	mov	r0, r3
 800364e:	f00c ff52 	bl	80104f6 <strcpy>
        token = strtok(NULL, "$");
 8003652:	493d      	ldr	r1, [pc, #244]	@ (8003748 <nmea_parse+0x14c>)
 8003654:	2000      	movs	r0, #0
 8003656:	f00c fe85 	bl	8010364 <strtok>
 800365a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1de      	bne.n	8003620 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	e052      	b.n	800370e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003668:	4a36      	ldr	r2, [pc, #216]	@ (8003744 <nmea_parse+0x148>)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003670:	4936      	ldr	r1, [pc, #216]	@ (800374c <nmea_parse+0x150>)
 8003672:	4618      	mov	r0, r3
 8003674:	f00c fed2 	bl	801041c <strstr>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d044      	beq.n	8003708 <nmea_parse+0x10c>
 800367e:	4a31      	ldr	r2, [pc, #196]	@ (8003744 <nmea_parse+0x148>)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fca2 	bl	8002fd0 <gps_checksum>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d03a      	beq.n	8003708 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8003692:	4a2c      	ldr	r2, [pc, #176]	@ (8003744 <nmea_parse+0x148>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369a:	492d      	ldr	r1, [pc, #180]	@ (8003750 <nmea_parse+0x154>)
 800369c:	4618      	mov	r0, r3
 800369e:	f00c febd 	bl	801041c <strstr>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80036a8:	4a26      	ldr	r2, [pc, #152]	@ (8003744 <nmea_parse+0x148>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ff30 	bl	8003518 <nmea_GNRMC>
 80036b8:	e026      	b.n	8003708 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80036ba:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <nmea_parse+0x148>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	4924      	ldr	r1, [pc, #144]	@ (8003754 <nmea_parse+0x158>)
 80036c4:	4618      	mov	r0, r3
 80036c6:	f00c fea9 	bl	801041c <strstr>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80036d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003744 <nmea_parse+0x148>)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fe94 	bl	8003408 <nmea_GPGSA>
 80036e0:	e012      	b.n	8003708 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80036e2:	4a18      	ldr	r2, [pc, #96]	@ (8003744 <nmea_parse+0x148>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ea:	491b      	ldr	r1, [pc, #108]	@ (8003758 <nmea_parse+0x15c>)
 80036ec:	4618      	mov	r0, r3
 80036ee:	f00c fe95 	bl	801041c <strstr>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 80036f8:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <nmea_parse+0x148>)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fcae 	bl	8003064 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3301      	adds	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	429a      	cmp	r2, r3
 8003714:	dba8      	blt.n	8003668 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	e009      	b.n	8003730 <nmea_parse+0x134>
 800371c:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <nmea_parse+0x148>)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	4618      	mov	r0, r3
 8003726:	f00b f93d 	bl	800e9a4 <free>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	429a      	cmp	r2, r3
 8003736:	dbf1      	blt.n	800371c <nmea_parse+0x120>


}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}
 8003742:	bf00      	nop
 8003744:	20000d14 	.word	0x20000d14
 8003748:	08012f5c 	.word	0x08012f5c
 800374c:	08012f60 	.word	0x08012f60
 8003750:	08012f64 	.word	0x08012f64
 8003754:	08012f6c 	.word	0x08012f6c
 8003758:	08012f74 	.word	0x08012f74

0800375c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003760:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <MX_SPI1_Init+0x74>)
 8003762:	4a1c      	ldr	r2, [pc, #112]	@ (80037d4 <MX_SPI1_Init+0x78>)
 8003764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003766:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <MX_SPI1_Init+0x74>)
 8003768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800376c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800376e:	4b18      	ldr	r3, [pc, #96]	@ (80037d0 <MX_SPI1_Init+0x74>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003774:	4b16      	ldr	r3, [pc, #88]	@ (80037d0 <MX_SPI1_Init+0x74>)
 8003776:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800377a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800377c:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <MX_SPI1_Init+0x74>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003782:	4b13      	ldr	r3, [pc, #76]	@ (80037d0 <MX_SPI1_Init+0x74>)
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <MX_SPI1_Init+0x74>)
 800378a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800378e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003790:	4b0f      	ldr	r3, [pc, #60]	@ (80037d0 <MX_SPI1_Init+0x74>)
 8003792:	2210      	movs	r2, #16
 8003794:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003796:	4b0e      	ldr	r3, [pc, #56]	@ (80037d0 <MX_SPI1_Init+0x74>)
 8003798:	2200      	movs	r2, #0
 800379a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800379c:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <MX_SPI1_Init+0x74>)
 800379e:	2200      	movs	r2, #0
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a2:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <MX_SPI1_Init+0x74>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037a8:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <MX_SPI1_Init+0x74>)
 80037aa:	2207      	movs	r2, #7
 80037ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <MX_SPI1_Init+0x74>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <MX_SPI1_Init+0x74>)
 80037b6:	2208      	movs	r2, #8
 80037b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037ba:	4805      	ldr	r0, [pc, #20]	@ (80037d0 <MX_SPI1_Init+0x74>)
 80037bc:	f005 f808 	bl	80087d0 <HAL_SPI_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80037c6:	f7ff fbfd 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000d50 	.word	0x20000d50
 80037d4:	40013000 	.word	0x40013000

080037d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	@ 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	@ (8003854 <HAL_SPI_MspInit+0x7c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d128      	bne.n	800384c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037fa:	4b17      	ldr	r3, [pc, #92]	@ (8003858 <HAL_SPI_MspInit+0x80>)
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <HAL_SPI_MspInit+0x80>)
 8003800:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003804:	6613      	str	r3, [r2, #96]	@ 0x60
 8003806:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <HAL_SPI_MspInit+0x80>)
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <HAL_SPI_MspInit+0x80>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	4a10      	ldr	r2, [pc, #64]	@ (8003858 <HAL_SPI_MspInit+0x80>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800381e:	4b0e      	ldr	r3, [pc, #56]	@ (8003858 <HAL_SPI_MspInit+0x80>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800382a:	23e0      	movs	r3, #224	@ 0xe0
 800382c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800383a:	2305      	movs	r3, #5
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	4619      	mov	r1, r3
 8003844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003848:	f002 ff1c 	bl	8006684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800384c:	bf00      	nop
 800384e:	3728      	adds	r7, #40	@ 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40013000 	.word	0x40013000
 8003858:	40021000 	.word	0x40021000

0800385c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	4b0f      	ldr	r3, [pc, #60]	@ (80038a0 <HAL_MspInit+0x44>)
 8003864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003866:	4a0e      	ldr	r2, [pc, #56]	@ (80038a0 <HAL_MspInit+0x44>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6613      	str	r3, [r2, #96]	@ 0x60
 800386e:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <HAL_MspInit+0x44>)
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_MspInit+0x44>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	4a08      	ldr	r2, [pc, #32]	@ (80038a0 <HAL_MspInit+0x44>)
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	@ 0x58
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_MspInit+0x44>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003892:	f004 f873 	bl	800797c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80038a8:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <SDTimer_Handler+0x40>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <SDTimer_Handler+0x1c>
    Timer1--;
 80038b2:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <SDTimer_Handler+0x40>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	4b09      	ldr	r3, [pc, #36]	@ (80038e4 <SDTimer_Handler+0x40>)
 80038be:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80038c0:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <SDTimer_Handler+0x44>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d006      	beq.n	80038d8 <SDTimer_Handler+0x34>
    Timer2--;
 80038ca:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <SDTimer_Handler+0x44>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <SDTimer_Handler+0x44>)
 80038d6:	701a      	strb	r2, [r3, #0]
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	200003b0 	.word	0x200003b0
 80038e8:	200003b1 	.word	0x200003b1

080038ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <NMI_Handler+0x4>

080038f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <HardFault_Handler+0x4>

080038fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <MemManage_Handler+0x4>

08003904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <BusFault_Handler+0x4>

0800390c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <UsageFault_Handler+0x4>

08003914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <SysTick_Handler+0x30>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	3301      	adds	r3, #1
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <SysTick_Handler+0x30>)
 8003950:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8003952:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <SysTick_Handler+0x30>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b09      	cmp	r3, #9
 800395a:	d904      	bls.n	8003966 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SysTick_Handler+0x30>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8003962:	f7ff ff9f 	bl	80038a4 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003966:	f000 ffc1 	bl	80048ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000dbc 	.word	0x20000dbc

08003974 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003978:	2002      	movs	r0, #2
 800397a:	f003 f81d 	bl	80069b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}

08003982 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003986:	2004      	movs	r0, #4
 8003988:	f003 f816 	bl	80069b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003994:	4802      	ldr	r0, [pc, #8]	@ (80039a0 <DMA1_Channel1_IRQHandler+0x10>)
 8003996:	f002 fd1a 	bl	80063ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000f94 	.word	0x20000f94

080039a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80039a8:	4802      	ldr	r0, [pc, #8]	@ (80039b4 <DMA1_Channel2_IRQHandler+0x10>)
 80039aa:	f002 fd10 	bl	80063ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000ff4 	.word	0x20000ff4

080039b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039bc:	4802      	ldr	r0, [pc, #8]	@ (80039c8 <DMA1_Channel3_IRQHandler+0x10>)
 80039be:	f002 fd06 	bl	80063ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200002ec 	.word	0x200002ec

080039cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80039d0:	4802      	ldr	r0, [pc, #8]	@ (80039dc <DMA1_Channel4_IRQHandler+0x10>)
 80039d2:	f002 fcfc 	bl	80063ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20001054 	.word	0x20001054

080039e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80039e4:	4802      	ldr	r0, [pc, #8]	@ (80039f0 <DMA1_Channel5_IRQHandler+0x10>)
 80039e6:	f002 fcf2 	bl	80063ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	2000034c 	.word	0x2000034c

080039f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039f8:	4802      	ldr	r0, [pc, #8]	@ (8003a04 <TIM3_IRQHandler+0x10>)
 80039fa:	f005 febf 	bl	800977c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000dcc 	.word	0x20000dcc

08003a08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a0c:	4809      	ldr	r0, [pc, #36]	@ (8003a34 <TIM4_IRQHandler+0x2c>)
 8003a0e:	f005 feb5 	bl	800977c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  compteur += 1 ;
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <TIM4_IRQHandler+0x30>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	4a07      	ldr	r2, [pc, #28]	@ (8003a38 <TIM4_IRQHandler+0x30>)
 8003a1a:	6013      	str	r3, [r2, #0]
  if (compteur == 100){
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <TIM4_IRQHandler+0x30>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b64      	cmp	r3, #100	@ 0x64
 8003a22:	d105      	bne.n	8003a30 <TIM4_IRQHandler+0x28>
	  flag_sensor = 1;
 8003a24:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <TIM4_IRQHandler+0x34>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
	  compteur = 0;
 8003a2a:	4b03      	ldr	r3, [pc, #12]	@ (8003a38 <TIM4_IRQHandler+0x30>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
  }


  /* USER CODE END TIM4_IRQn 1 */
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000e18 	.word	0x20000e18
 8003a38:	20000db8 	.word	0x20000db8
 8003a3c:	20000db4 	.word	0x20000db4

08003a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a44:	4802      	ldr	r0, [pc, #8]	@ (8003a50 <USART1_IRQHandler+0x10>)
 8003a46:	f007 f97d 	bl	800ad44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000f00 	.word	0x20000f00

08003a54 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003a58:	4802      	ldr	r0, [pc, #8]	@ (8003a64 <LPUART1_IRQHandler+0x10>)
 8003a5a:	f007 f973 	bl	800ad44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000e6c 	.word	0x20000e6c

08003a68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return 1;
 8003a6c:	2301      	movs	r3, #1
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <_kill>:

int _kill(int pid, int sig)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a82:	f00c fcfd 	bl	8010480 <__errno>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2216      	movs	r2, #22
 8003a8a:	601a      	str	r2, [r3, #0]
  return -1;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <_exit>:

void _exit (int status)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ffe7 	bl	8003a78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003aaa:	bf00      	nop
 8003aac:	e7fd      	b.n	8003aaa <_exit+0x12>

08003aae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e00a      	b.n	8003ad6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ac0:	f3af 8000 	nop.w
 8003ac4:	4601      	mov	r1, r0
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	60ba      	str	r2, [r7, #8]
 8003acc:	b2ca      	uxtb	r2, r1
 8003ace:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	dbf0      	blt.n	8003ac0 <_read+0x12>
  }

  return len;
 8003ade:	687b      	ldr	r3, [r7, #4]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e009      	b.n	8003b0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	60ba      	str	r2, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	dbf1      	blt.n	8003afa <_write+0x12>
  }
  return len;
 8003b16:	687b      	ldr	r3, [r7, #4]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_close>:

int _close(int file)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b48:	605a      	str	r2, [r3, #4]
  return 0;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_isatty>:

int _isatty(int file)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b60:	2301      	movs	r3, #1
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b90:	4a14      	ldr	r2, [pc, #80]	@ (8003be4 <_sbrk+0x5c>)
 8003b92:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <_sbrk+0x60>)
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b9c:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <_sbrk+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <_sbrk+0x64>)
 8003ba6:	4a12      	ldr	r2, [pc, #72]	@ (8003bf0 <_sbrk+0x68>)
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003baa:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <_sbrk+0x64>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d207      	bcs.n	8003bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bb8:	f00c fc62 	bl	8010480 <__errno>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bc6:	e009      	b.n	8003bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bc8:	4b08      	ldr	r3, [pc, #32]	@ (8003bec <_sbrk+0x64>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bce:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <_sbrk+0x64>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4a05      	ldr	r2, [pc, #20]	@ (8003bec <_sbrk+0x64>)
 8003bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20008000 	.word	0x20008000
 8003be8:	00000400 	.word	0x00000400
 8003bec:	20000dc0 	.word	0x20000dc0
 8003bf0:	20001520 	.word	0x20001520

08003bf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003bf8:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <SystemInit+0x20>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfe:	4a05      	ldr	r2, [pc, #20]	@ (8003c14 <SystemInit+0x20>)
 8003c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <INIT_PERM_TARVOS>:

	HAL_UART_Transmit(&hlpuart1,"yo",sizeof("yo"),100);
	HAL_Delay(1000);
}

void INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08e      	sub	sp, #56	@ 0x38
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	460a      	mov	r2, r1
 8003c22:	71fb      	strb	r3, [r7, #7]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71bb      	strb	r3, [r7, #6]
    // On passe le module en mode 1 byte (sécurité)
    uint8_t mode1[6] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 8003c28:	4a4a      	ldr	r2, [pc, #296]	@ (8003d54 <INIT_PERM_TARVOS+0x13c>)
 8003c2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c32:	6018      	str	r0, [r3, #0]
 8003c34:	3304      	adds	r3, #4
 8003c36:	8019      	strh	r1, [r3, #0]
    mode1[5] = Get_CRC8(mode1, 5); // Ajout du CRC
 8003c38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c3c:	2105      	movs	r1, #5
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f892 	bl	8003d68 <Get_CRC8>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, sizeof(mode1), 500);
 8003c4a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8003c4e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003c52:	2206      	movs	r2, #6
 8003c54:	4840      	ldr	r0, [pc, #256]	@ (8003d58 <INIT_PERM_TARVOS+0x140>)
 8003c56:	f006 fe8d 	bl	800a974 <HAL_UART_Transmit>

    // On change le canal (la fréquence du module)
    uint8_t frequence[6] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 8003c5a:	4a40      	ldr	r2, [pc, #256]	@ (8003d5c <INIT_PERM_TARVOS+0x144>)
 8003c5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c64:	6018      	str	r0, [r3, #0]
 8003c66:	3304      	adds	r3, #4
 8003c68:	8019      	strh	r1, [r3, #0]
    frequence[5] = Get_CRC8(frequence, 5); // Ajout du CRC
 8003c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c6e:	2105      	movs	r1, #5
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f879 	bl	8003d68 <Get_CRC8>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    HAL_UART_Transmit(&hlpuart1, frequence, sizeof(frequence), 500);
 8003c7c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003c80:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003c84:	2206      	movs	r2, #6
 8003c86:	4834      	ldr	r0, [pc, #208]	@ (8003d58 <INIT_PERM_TARVOS+0x140>)
 8003c88:	f006 fe74 	bl	800a974 <HAL_UART_Transmit>

    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[6] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8003c8c:	4a34      	ldr	r2, [pc, #208]	@ (8003d60 <INIT_PERM_TARVOS+0x148>)
 8003c8e:	f107 0320 	add.w	r3, r7, #32
 8003c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c96:	6018      	str	r0, [r3, #0]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	8019      	strh	r1, [r3, #0]
    puissance[5] = Get_CRC8(puissance, 5); // Ajout du CRC
 8003c9c:	f107 0320 	add.w	r3, r7, #32
 8003ca0:	2105      	movs	r1, #5
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f860 	bl	8003d68 <Get_CRC8>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_UART_Transmit(&hlpuart1, puissance, sizeof(puissance), 500);
 8003cae:	f107 0120 	add.w	r1, r7, #32
 8003cb2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003cb6:	2206      	movs	r2, #6
 8003cb8:	4827      	ldr	r0, [pc, #156]	@ (8003d58 <INIT_PERM_TARVOS+0x140>)
 8003cba:	f006 fe5b 	bl	800a974 <HAL_UART_Transmit>

    // On modifie l'adresse de la source
    uint8_t Sadrr[6] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	763b      	strb	r3, [r7, #24]
 8003cc2:	2309      	movs	r3, #9
 8003cc4:	767b      	strb	r3, [r7, #25]
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	76bb      	strb	r3, [r7, #26]
 8003cca:	230b      	movs	r3, #11
 8003ccc:	76fb      	strb	r3, [r7, #27]
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	773b      	strb	r3, [r7, #28]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	777b      	strb	r3, [r7, #29]
    Sadrr[5] = Get_CRC8(Sadrr, 5); // Ajout du CRC
 8003cd6:	f107 0318 	add.w	r3, r7, #24
 8003cda:	2105      	movs	r1, #5
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f843 	bl	8003d68 <Get_CRC8>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	777b      	strb	r3, [r7, #29]
    HAL_UART_Transmit(&hlpuart1, Sadrr, sizeof(Sadrr), 500);
 8003ce6:	f107 0118 	add.w	r1, r7, #24
 8003cea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003cee:	2206      	movs	r2, #6
 8003cf0:	4819      	ldr	r0, [pc, #100]	@ (8003d58 <INIT_PERM_TARVOS+0x140>)
 8003cf2:	f006 fe3f 	bl	800a974 <HAL_UART_Transmit>

    // On modifie l'adresse avec qui on veut communiquer
	uint8_t send[6] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	743b      	strb	r3, [r7, #16]
 8003cfa:	2309      	movs	r3, #9
 8003cfc:	747b      	strb	r3, [r7, #17]
 8003cfe:	2302      	movs	r3, #2
 8003d00:	74bb      	strb	r3, [r7, #18]
 8003d02:	2308      	movs	r3, #8
 8003d04:	74fb      	strb	r3, [r7, #19]
 8003d06:	79bb      	ldrb	r3, [r7, #6]
 8003d08:	753b      	strb	r3, [r7, #20]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	757b      	strb	r3, [r7, #21]
	send[5] = Get_CRC8(send, 5); // Ajout du CRC
 8003d0e:	f107 0310 	add.w	r3, r7, #16
 8003d12:	2105      	movs	r1, #5
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f827 	bl	8003d68 <Get_CRC8>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	757b      	strb	r3, [r7, #21]
	HAL_UART_Transmit(&hlpuart1, send, sizeof(send), 500);
 8003d1e:	f107 0110 	add.w	r1, r7, #16
 8003d22:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d26:	2206      	movs	r2, #6
 8003d28:	480b      	ldr	r0, [pc, #44]	@ (8003d58 <INIT_PERM_TARVOS+0x140>)
 8003d2a:	f006 fe23 	bl	800a974 <HAL_UART_Transmit>

    // On redémarre le module pour mettre à jour les paramètres
    uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <INIT_PERM_TARVOS+0x14c>)
 8003d30:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, restart, sizeof(restart), 500);
 8003d32:	f107 010c 	add.w	r1, r7, #12
 8003d36:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	4806      	ldr	r0, [pc, #24]	@ (8003d58 <INIT_PERM_TARVOS+0x140>)
 8003d3e:	f006 fe19 	bl	800a974 <HAL_UART_Transmit>

    HAL_Delay(1000);
 8003d42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d46:	f000 fdef 	bl	8004928 <HAL_Delay>
}
 8003d4a:	bf00      	nop
 8003d4c:	3738      	adds	r7, #56	@ 0x38
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	08012f88 	.word	0x08012f88
 8003d58:	20000e6c 	.word	0x20000e6c
 8003d5c:	08012f90 	.word	0x08012f90
 8003d60:	08012f98 	.word	0x08012f98
 8003d64:	07000502 	.word	0x07000502

08003d68 <Get_CRC8>:
		HAL_UART_Transmit(&hlpuart1,command,sizeof(command),500);
	}
}
//Calcule du CRC
uint8_t Get_CRC8(uint8_t * bufP, uint16_t len)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
uint8_t crc = 0x00;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	81bb      	strh	r3, [r7, #12]
 8003d7c:	e009      	b.n	8003d92 <Get_CRC8+0x2a>
{
crc ^= bufP[i];
 8003d7e:	89bb      	ldrh	r3, [r7, #12]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4413      	add	r3, r2
 8003d84:	781a      	ldrb	r2, [r3, #0]
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	4053      	eors	r3, r2
 8003d8a:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8003d8c:	89bb      	ldrh	r3, [r7, #12]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	81bb      	strh	r3, [r7, #12]
 8003d92:	89ba      	ldrh	r2, [r7, #12]
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d3f1      	bcc.n	8003d7e <Get_CRC8+0x16>
}
return crc;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <SEND_DATA_NETW>:

int SEND_DATA_NETW(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8003da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	b08a      	sub	sp, #40	@ 0x28
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	72fb      	strb	r3, [r7, #11]
 8003db8:	4613      	mov	r3, r2
 8003dba:	72bb      	strb	r3, [r7, #10]
 8003dbc:	466b      	mov	r3, sp
 8003dbe:	469a      	mov	sl, r3
	uint8_t trame_reception[5];
	// Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[HEAD + length + CRC]; // +1 pour le CRC
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	1d9e      	adds	r6, r3, #6
 8003dc4:	1e73      	subs	r3, r6, #1
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	4632      	mov	r2, r6
 8003dca:	2300      	movs	r3, #0
 8003dcc:	4690      	mov	r8, r2
 8003dce:	4699      	mov	r9, r3
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ddc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003de4:	4632      	mov	r2, r6
 8003de6:	2300      	movs	r3, #0
 8003de8:	4614      	mov	r4, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	00eb      	lsls	r3, r5, #3
 8003df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	4633      	mov	r3, r6
 8003dfe:	3307      	adds	r3, #7
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	ebad 0d03 	sub.w	sp, sp, r3
 8003e08:	466b      	mov	r3, sp
 8003e0a:	3300      	adds	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2202      	movs	r2, #2
 8003e12:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2201      	movs	r2, #1
 8003e18:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	3302      	adds	r3, #2
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	7afa      	ldrb	r2, [r7, #11]
 8003e2a:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	7aba      	ldrb	r2, [r7, #10]
 8003e30:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (int i = 0; i < length; i++) {
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e36:	e00a      	b.n	8003e4e <SEND_DATA_NETW+0xa6>
        trame[5 + i] = data[i];
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	441a      	add	r2, r3
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	3305      	adds	r3, #5
 8003e42:	7811      	ldrb	r1, [r2, #0]
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; i++) {
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	dbf0      	blt.n	8003e38 <SEND_DATA_NETW+0x90>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3305      	adds	r3, #5
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	1d5c      	adds	r4, r3, #5
 8003e62:	4611      	mov	r1, r2
 8003e64:	69f8      	ldr	r0, [r7, #28]
 8003e66:	f7ff ff7f 	bl	8003d68 <Get_CRC8>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 8003e72:	b2b2      	uxth	r2, r6
 8003e74:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e78:	69f9      	ldr	r1, [r7, #28]
 8003e7a:	480a      	ldr	r0, [pc, #40]	@ (8003ea4 <SEND_DATA_NETW+0xfc>)
 8003e7c:	f006 fd7a 	bl	800a974 <HAL_UART_Transmit>

    if (copyTarvosBuffer(tarvos_RX_Tampon)[3]== FAIL){
 8003e80:	4809      	ldr	r0, [pc, #36]	@ (8003ea8 <SEND_DATA_NETW+0x100>)
 8003e82:	f000 f813 	bl	8003eac <copyTarvosBuffer>
 8003e86:	4603      	mov	r3, r0
 8003e88:	3303      	adds	r3, #3
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <SEND_DATA_NETW+0xec>
    	return ERROR;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <SEND_DATA_NETW+0xee>
    }
    else { return SUCCESS;}
 8003e94:	2301      	movs	r3, #1
 8003e96:	46d5      	mov	sp, sl

}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3728      	adds	r7, #40	@ 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000e6c 	.word	0x20000e6c
 8003ea8:	200008c4 	.word	0x200008c4

08003eac <copyTarvosBuffer>:


uint8_t* copyTarvosBuffer() {
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
    static uint8_t buffer[5];  // Utilisation de static pour éviter la perte des données
    int p = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
    uint8_t a;
    for (int i = 0; i < TarvosRxTamponSize; i++) {
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	e01e      	b.n	8003efa <copyTarvosBuffer+0x4e>
        if (tarvos_RX_Tampon[i] == 0x02 && p == 0 && tarvos_RX_Tampon[i+1] == 0x40) {
 8003ebc:	4a14      	ldr	r2, [pc, #80]	@ (8003f10 <copyTarvosBuffer+0x64>)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d115      	bne.n	8003ef4 <copyTarvosBuffer+0x48>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d112      	bne.n	8003ef4 <copyTarvosBuffer+0x48>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8003f10 <copyTarvosBuffer+0x64>)
 8003ed4:	5cd3      	ldrb	r3, [r2, r3]
 8003ed6:	2b40      	cmp	r3, #64	@ 0x40
 8003ed8:	d10c      	bne.n	8003ef4 <copyTarvosBuffer+0x48>
            if (i + 5 <= TarvosRxTamponSize) {  // Vérification pour éviter un dépassement de mémoire
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b19      	cmp	r3, #25
 8003ede:	dc09      	bgt.n	8003ef4 <copyTarvosBuffer+0x48>
                memcpy(buffer, &tarvos_RX_Tampon[i], 5);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8003f10 <copyTarvosBuffer+0x64>)
 8003ee4:	441a      	add	r2, r3
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <copyTarvosBuffer+0x68>)
 8003ee8:	6810      	ldr	r0, [r2, #0]
 8003eea:	6018      	str	r0, [r3, #0]
 8003eec:	7912      	ldrb	r2, [r2, #4]
 8003eee:	711a      	strb	r2, [r3, #4]
                p = 1;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < TarvosRxTamponSize; i++) {
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b1d      	cmp	r3, #29
 8003efe:	dddd      	ble.n	8003ebc <copyTarvosBuffer+0x10>
            }
        }
    }
    return buffer;
 8003f00:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <copyTarvosBuffer+0x68>)
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	200008c4 	.word	0x200008c4
 8003f14:	20000dc4 	.word	0x20000dc4

08003f18 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08e      	sub	sp, #56	@ 0x38
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f2c:	f107 031c 	add.w	r3, r7, #28
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f38:	463b      	mov	r3, r7
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
 8003f40:	609a      	str	r2, [r3, #8]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	611a      	str	r2, [r3, #16]
 8003f46:	615a      	str	r2, [r3, #20]
 8003f48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004004 <MX_TIM3_Init+0xec>)
 8003f4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8003f50:	4b2b      	ldr	r3, [pc, #172]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f52:	223f      	movs	r2, #63	@ 0x3f
 8003f54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f56:	4b2a      	ldr	r3, [pc, #168]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003f5c:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f5e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f64:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6a:	4b25      	ldr	r3, [pc, #148]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f70:	4823      	ldr	r0, [pc, #140]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f72:	f005 f9df 	bl	8009334 <HAL_TIM_Base_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003f7c:	f7ff f822 	bl	8002fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	481c      	ldr	r0, [pc, #112]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f8e:	f005 fe59 	bl	8009c44 <HAL_TIM_ConfigClockSource>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003f98:	f7ff f814 	bl	8002fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f9c:	4818      	ldr	r0, [pc, #96]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003f9e:	f005 fa8b 	bl	80094b8 <HAL_TIM_PWM_Init>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003fa8:	f7ff f80c 	bl	8002fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fb4:	f107 031c 	add.w	r3, r7, #28
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4811      	ldr	r0, [pc, #68]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003fbc:	f006 fbc2 	bl	800a744 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003fc6:	f7fe fffd 	bl	8002fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fca:	2360      	movs	r3, #96	@ 0x60
 8003fcc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8003fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fdc:	463b      	mov	r3, r7
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4807      	ldr	r0, [pc, #28]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003fe4:	f005 fd1a 	bl	8009a1c <HAL_TIM_PWM_ConfigChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003fee:	f7fe ffe9 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ff2:	4803      	ldr	r0, [pc, #12]	@ (8004000 <MX_TIM3_Init+0xe8>)
 8003ff4:	f000 f8be 	bl	8004174 <HAL_TIM_MspPostInit>

}
 8003ff8:	bf00      	nop
 8003ffa:	3738      	adds	r7, #56	@ 0x38
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000dcc 	.word	0x20000dcc
 8004004:	40000400 	.word	0x40000400

08004008 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08e      	sub	sp, #56	@ 0x38
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800400e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004028:	463b      	mov	r3, r7
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	609a      	str	r2, [r3, #8]
 8004032:	60da      	str	r2, [r3, #12]
 8004034:	611a      	str	r2, [r3, #16]
 8004036:	615a      	str	r2, [r3, #20]
 8004038:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800403a:	4b2b      	ldr	r3, [pc, #172]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 800403c:	4a2b      	ldr	r2, [pc, #172]	@ (80040ec <MX_TIM4_Init+0xe4>)
 800403e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8004040:	4b29      	ldr	r3, [pc, #164]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 8004042:	223f      	movs	r2, #63	@ 0x3f
 8004044:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004046:	4b28      	ldr	r3, [pc, #160]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800404c:	4b26      	ldr	r3, [pc, #152]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 800404e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004052:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004054:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 8004056:	2200      	movs	r2, #0
 8004058:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800405a:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 800405c:	2200      	movs	r2, #0
 800405e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004060:	4821      	ldr	r0, [pc, #132]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 8004062:	f005 f967 	bl	8009334 <HAL_TIM_Base_Init>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800406c:	f7fe ffaa 	bl	8002fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800407a:	4619      	mov	r1, r3
 800407c:	481a      	ldr	r0, [pc, #104]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 800407e:	f005 fde1 	bl	8009c44 <HAL_TIM_ConfigClockSource>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004088:	f7fe ff9c 	bl	8002fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800408c:	4816      	ldr	r0, [pc, #88]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 800408e:	f005 fa13 	bl	80094b8 <HAL_TIM_PWM_Init>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004098:	f7fe ff94 	bl	8002fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800409c:	2320      	movs	r3, #32
 800409e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040a4:	f107 031c 	add.w	r3, r7, #28
 80040a8:	4619      	mov	r1, r3
 80040aa:	480f      	ldr	r0, [pc, #60]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 80040ac:	f006 fb4a 	bl	800a744 <HAL_TIMEx_MasterConfigSynchronization>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80040b6:	f7fe ff85 	bl	8002fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ba:	2360      	movs	r3, #96	@ 0x60
 80040bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040ca:	463b      	mov	r3, r7
 80040cc:	2208      	movs	r2, #8
 80040ce:	4619      	mov	r1, r3
 80040d0:	4805      	ldr	r0, [pc, #20]	@ (80040e8 <MX_TIM4_Init+0xe0>)
 80040d2:	f005 fca3 	bl	8009a1c <HAL_TIM_PWM_ConfigChannel>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80040dc:	f7fe ff72 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80040e0:	bf00      	nop
 80040e2:	3738      	adds	r7, #56	@ 0x38
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000e18 	.word	0x20000e18
 80040ec:	40000800 	.word	0x40000800

080040f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <HAL_TIM_Base_MspInit+0x78>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d114      	bne.n	800412c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004102:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <HAL_TIM_Base_MspInit+0x7c>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004106:	4a19      	ldr	r2, [pc, #100]	@ (800416c <HAL_TIM_Base_MspInit+0x7c>)
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	6593      	str	r3, [r2, #88]	@ 0x58
 800410e:	4b17      	ldr	r3, [pc, #92]	@ (800416c <HAL_TIM_Base_MspInit+0x7c>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800411a:	2200      	movs	r2, #0
 800411c:	2100      	movs	r1, #0
 800411e:	201d      	movs	r0, #29
 8004120:	f001 ff3d 	bl	8005f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004124:	201d      	movs	r0, #29
 8004126:	f001 ff54 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800412a:	e018      	b.n	800415e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0f      	ldr	r2, [pc, #60]	@ (8004170 <HAL_TIM_Base_MspInit+0x80>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d113      	bne.n	800415e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <HAL_TIM_Base_MspInit+0x7c>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	4a0c      	ldr	r2, [pc, #48]	@ (800416c <HAL_TIM_Base_MspInit+0x7c>)
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	6593      	str	r3, [r2, #88]	@ 0x58
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <HAL_TIM_Base_MspInit+0x7c>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	201e      	movs	r0, #30
 8004154:	f001 ff23 	bl	8005f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004158:	201e      	movs	r0, #30
 800415a:	f001 ff3a 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40000400 	.word	0x40000400
 800416c:	40021000 	.word	0x40021000
 8004170:	40000800 	.word	0x40000800

08004174 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <HAL_TIM_MspPostInit+0x64>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d11b      	bne.n	80041ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <HAL_TIM_MspPostInit+0x68>)
 8004198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419a:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <HAL_TIM_MspPostInit+0x68>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041a2:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <HAL_TIM_MspPostInit+0x68>)
 80041a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041ae:	2340      	movs	r3, #64	@ 0x40
 80041b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b2:	2302      	movs	r3, #2
 80041b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041be:	2302      	movs	r3, #2
 80041c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	4619      	mov	r1, r3
 80041c8:	4805      	ldr	r0, [pc, #20]	@ (80041e0 <HAL_TIM_MspPostInit+0x6c>)
 80041ca:	f002 fa5b 	bl	8006684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80041ce:	bf00      	nop
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40021000 	.word	0x40021000
 80041e0:	48000800 	.word	0x48000800

080041e4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80041e8:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 80041ea:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <MX_LPUART1_UART_Init+0x90>)
 80041ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 80041f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80041f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80041fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004202:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 8004204:	2200      	movs	r2, #0
 8004206:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004208:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 800420a:	220c      	movs	r2, #12
 800420c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800420e:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004214:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 8004216:	2200      	movs	r2, #0
 8004218:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 800421c:	2200      	movs	r2, #0
 800421e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004220:	4b13      	ldr	r3, [pc, #76]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004226:	4812      	ldr	r0, [pc, #72]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 8004228:	f006 fb54 	bl	800a8d4 <HAL_UART_Init>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8004232:	f7fe fec7 	bl	8002fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004236:	2100      	movs	r1, #0
 8004238:	480d      	ldr	r0, [pc, #52]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 800423a:	f008 f84b 	bl	800c2d4 <HAL_UARTEx_SetTxFifoThreshold>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8004244:	f7fe febe 	bl	8002fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004248:	2100      	movs	r1, #0
 800424a:	4809      	ldr	r0, [pc, #36]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 800424c:	f008 f880 	bl	800c350 <HAL_UARTEx_SetRxFifoThreshold>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8004256:	f7fe feb5 	bl	8002fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800425a:	4805      	ldr	r0, [pc, #20]	@ (8004270 <MX_LPUART1_UART_Init+0x8c>)
 800425c:	f008 f801 	bl	800c262 <HAL_UARTEx_DisableFifoMode>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8004266:	f7fe fead 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000e6c 	.word	0x20000e6c
 8004274:	40008000 	.word	0x40008000

08004278 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800427c:	4b22      	ldr	r3, [pc, #136]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 800427e:	4a23      	ldr	r2, [pc, #140]	@ (800430c <MX_USART1_UART_Init+0x94>)
 8004280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004282:	4b21      	ldr	r3, [pc, #132]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 8004284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800428a:	4b1f      	ldr	r3, [pc, #124]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 8004292:	2200      	movs	r2, #0
 8004294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004296:	4b1c      	ldr	r3, [pc, #112]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 8004298:	2200      	movs	r2, #0
 800429a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800429c:	4b1a      	ldr	r3, [pc, #104]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 800429e:	220c      	movs	r2, #12
 80042a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042a2:	4b19      	ldr	r3, [pc, #100]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042a8:	4b17      	ldr	r3, [pc, #92]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ae:	4b16      	ldr	r3, [pc, #88]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042ba:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042bc:	2200      	movs	r2, #0
 80042be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042c0:	4811      	ldr	r0, [pc, #68]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042c2:	f006 fb07 	bl	800a8d4 <HAL_UART_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80042cc:	f7fe fe7a 	bl	8002fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042d0:	2100      	movs	r1, #0
 80042d2:	480d      	ldr	r0, [pc, #52]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042d4:	f007 fffe 	bl	800c2d4 <HAL_UARTEx_SetTxFifoThreshold>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80042de:	f7fe fe71 	bl	8002fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042e2:	2100      	movs	r1, #0
 80042e4:	4808      	ldr	r0, [pc, #32]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042e6:	f008 f833 	bl	800c350 <HAL_UARTEx_SetRxFifoThreshold>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042f0:	f7fe fe68 	bl	8002fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042f4:	4804      	ldr	r0, [pc, #16]	@ (8004308 <MX_USART1_UART_Init+0x90>)
 80042f6:	f007 ffb4 	bl	800c262 <HAL_UARTEx_DisableFifoMode>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004300:	f7fe fe60 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004304:	bf00      	nop
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20000f00 	.word	0x20000f00
 800430c:	40013800 	.word	0x40013800

08004310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b09e      	sub	sp, #120	@ 0x78
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004328:	f107 0320 	add.w	r3, r7, #32
 800432c:	2244      	movs	r2, #68	@ 0x44
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f00c f889 	bl	8010448 <memset>
  if(uartHandle->Instance==LPUART1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a92      	ldr	r2, [pc, #584]	@ (8004584 <HAL_UART_MspInit+0x274>)
 800433c:	4293      	cmp	r3, r2
 800433e:	f040 80b0 	bne.w	80044a2 <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004342:	2320      	movs	r3, #32
 8004344:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004346:	2300      	movs	r3, #0
 8004348:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800434a:	f107 0320 	add.w	r3, r7, #32
 800434e:	4618      	mov	r0, r3
 8004350:	f004 f84e 	bl	80083f0 <HAL_RCCEx_PeriphCLKConfig>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800435a:	f7fe fe33 	bl	8002fc4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800435e:	4b8a      	ldr	r3, [pc, #552]	@ (8004588 <HAL_UART_MspInit+0x278>)
 8004360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004362:	4a89      	ldr	r2, [pc, #548]	@ (8004588 <HAL_UART_MspInit+0x278>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800436a:	4b87      	ldr	r3, [pc, #540]	@ (8004588 <HAL_UART_MspInit+0x278>)
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004376:	4b84      	ldr	r3, [pc, #528]	@ (8004588 <HAL_UART_MspInit+0x278>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437a:	4a83      	ldr	r2, [pc, #524]	@ (8004588 <HAL_UART_MspInit+0x278>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004382:	4b81      	ldr	r3, [pc, #516]	@ (8004588 <HAL_UART_MspInit+0x278>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800438e:	4b7e      	ldr	r3, [pc, #504]	@ (8004588 <HAL_UART_MspInit+0x278>)
 8004390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004392:	4a7d      	ldr	r2, [pc, #500]	@ (8004588 <HAL_UART_MspInit+0x278>)
 8004394:	f043 0302 	orr.w	r3, r3, #2
 8004398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800439a:	4b7b      	ldr	r3, [pc, #492]	@ (8004588 <HAL_UART_MspInit+0x278>)
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043a6:	2308      	movs	r3, #8
 80043a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043aa:	2302      	movs	r3, #2
 80043ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b2:	2300      	movs	r3, #0
 80043b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80043b6:	230c      	movs	r3, #12
 80043b8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043be:	4619      	mov	r1, r3
 80043c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043c4:	f002 f95e 	bl	8006684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d6:	2300      	movs	r3, #0
 80043d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80043da:	2308      	movs	r3, #8
 80043dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043e2:	4619      	mov	r1, r3
 80043e4:	4869      	ldr	r0, [pc, #420]	@ (800458c <HAL_UART_MspInit+0x27c>)
 80043e6:	f002 f94d 	bl	8006684 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80043ea:	4b69      	ldr	r3, [pc, #420]	@ (8004590 <HAL_UART_MspInit+0x280>)
 80043ec:	4a69      	ldr	r2, [pc, #420]	@ (8004594 <HAL_UART_MspInit+0x284>)
 80043ee:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80043f0:	4b67      	ldr	r3, [pc, #412]	@ (8004590 <HAL_UART_MspInit+0x280>)
 80043f2:	2222      	movs	r2, #34	@ 0x22
 80043f4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043f6:	4b66      	ldr	r3, [pc, #408]	@ (8004590 <HAL_UART_MspInit+0x280>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043fc:	4b64      	ldr	r3, [pc, #400]	@ (8004590 <HAL_UART_MspInit+0x280>)
 80043fe:	2200      	movs	r2, #0
 8004400:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004402:	4b63      	ldr	r3, [pc, #396]	@ (8004590 <HAL_UART_MspInit+0x280>)
 8004404:	2280      	movs	r2, #128	@ 0x80
 8004406:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004408:	4b61      	ldr	r3, [pc, #388]	@ (8004590 <HAL_UART_MspInit+0x280>)
 800440a:	2200      	movs	r2, #0
 800440c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800440e:	4b60      	ldr	r3, [pc, #384]	@ (8004590 <HAL_UART_MspInit+0x280>)
 8004410:	2200      	movs	r2, #0
 8004412:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004414:	4b5e      	ldr	r3, [pc, #376]	@ (8004590 <HAL_UART_MspInit+0x280>)
 8004416:	2220      	movs	r2, #32
 8004418:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800441a:	4b5d      	ldr	r3, [pc, #372]	@ (8004590 <HAL_UART_MspInit+0x280>)
 800441c:	2200      	movs	r2, #0
 800441e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004420:	485b      	ldr	r0, [pc, #364]	@ (8004590 <HAL_UART_MspInit+0x280>)
 8004422:	f001 fdf1 	bl	8006008 <HAL_DMA_Init>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 800442c:	f7fe fdca 	bl	8002fc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a57      	ldr	r2, [pc, #348]	@ (8004590 <HAL_UART_MspInit+0x280>)
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004438:	4a55      	ldr	r2, [pc, #340]	@ (8004590 <HAL_UART_MspInit+0x280>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800443e:	4b56      	ldr	r3, [pc, #344]	@ (8004598 <HAL_UART_MspInit+0x288>)
 8004440:	4a56      	ldr	r2, [pc, #344]	@ (800459c <HAL_UART_MspInit+0x28c>)
 8004442:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8004444:	4b54      	ldr	r3, [pc, #336]	@ (8004598 <HAL_UART_MspInit+0x288>)
 8004446:	2223      	movs	r2, #35	@ 0x23
 8004448:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800444a:	4b53      	ldr	r3, [pc, #332]	@ (8004598 <HAL_UART_MspInit+0x288>)
 800444c:	2210      	movs	r2, #16
 800444e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004450:	4b51      	ldr	r3, [pc, #324]	@ (8004598 <HAL_UART_MspInit+0x288>)
 8004452:	2200      	movs	r2, #0
 8004454:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004456:	4b50      	ldr	r3, [pc, #320]	@ (8004598 <HAL_UART_MspInit+0x288>)
 8004458:	2280      	movs	r2, #128	@ 0x80
 800445a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800445c:	4b4e      	ldr	r3, [pc, #312]	@ (8004598 <HAL_UART_MspInit+0x288>)
 800445e:	2200      	movs	r2, #0
 8004460:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004462:	4b4d      	ldr	r3, [pc, #308]	@ (8004598 <HAL_UART_MspInit+0x288>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004468:	4b4b      	ldr	r3, [pc, #300]	@ (8004598 <HAL_UART_MspInit+0x288>)
 800446a:	2200      	movs	r2, #0
 800446c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800446e:	4b4a      	ldr	r3, [pc, #296]	@ (8004598 <HAL_UART_MspInit+0x288>)
 8004470:	2200      	movs	r2, #0
 8004472:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004474:	4848      	ldr	r0, [pc, #288]	@ (8004598 <HAL_UART_MspInit+0x288>)
 8004476:	f001 fdc7 	bl	8006008 <HAL_DMA_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8004480:	f7fe fda0 	bl	8002fc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a44      	ldr	r2, [pc, #272]	@ (8004598 <HAL_UART_MspInit+0x288>)
 8004488:	67da      	str	r2, [r3, #124]	@ 0x7c
 800448a:	4a43      	ldr	r2, [pc, #268]	@ (8004598 <HAL_UART_MspInit+0x288>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004490:	2200      	movs	r2, #0
 8004492:	2100      	movs	r1, #0
 8004494:	205b      	movs	r0, #91	@ 0x5b
 8004496:	f001 fd82 	bl	8005f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800449a:	205b      	movs	r0, #91	@ 0x5b
 800449c:	f001 fd99 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80044a0:	e06c      	b.n	800457c <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3e      	ldr	r2, [pc, #248]	@ (80045a0 <HAL_UART_MspInit+0x290>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d167      	bne.n	800457c <HAL_UART_MspInit+0x26c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80044ac:	2301      	movs	r3, #1
 80044ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80044b0:	2302      	movs	r3, #2
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044b4:	f107 0320 	add.w	r3, r7, #32
 80044b8:	4618      	mov	r0, r3
 80044ba:	f003 ff99 	bl	80083f0 <HAL_RCCEx_PeriphCLKConfig>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80044c4:	f7fe fd7e 	bl	8002fc4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80044c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004588 <HAL_UART_MspInit+0x278>)
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004588 <HAL_UART_MspInit+0x278>)
 80044ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80044d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004588 <HAL_UART_MspInit+0x278>)
 80044d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e0:	4b29      	ldr	r3, [pc, #164]	@ (8004588 <HAL_UART_MspInit+0x278>)
 80044e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e4:	4a28      	ldr	r2, [pc, #160]	@ (8004588 <HAL_UART_MspInit+0x278>)
 80044e6:	f043 0302 	orr.w	r3, r3, #2
 80044ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044ec:	4b26      	ldr	r3, [pc, #152]	@ (8004588 <HAL_UART_MspInit+0x278>)
 80044ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044f8:	23c0      	movs	r3, #192	@ 0xc0
 80044fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	2302      	movs	r3, #2
 80044fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	2300      	movs	r3, #0
 8004506:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004508:	2307      	movs	r3, #7
 800450a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800450c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004510:	4619      	mov	r1, r3
 8004512:	481e      	ldr	r0, [pc, #120]	@ (800458c <HAL_UART_MspInit+0x27c>)
 8004514:	f002 f8b6 	bl	8006684 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8004518:	4b22      	ldr	r3, [pc, #136]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 800451a:	4a23      	ldr	r2, [pc, #140]	@ (80045a8 <HAL_UART_MspInit+0x298>)
 800451c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800451e:	4b21      	ldr	r3, [pc, #132]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 8004520:	2218      	movs	r2, #24
 8004522:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004524:	4b1f      	ldr	r3, [pc, #124]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800452a:	4b1e      	ldr	r3, [pc, #120]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 800452c:	2200      	movs	r2, #0
 800452e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004530:	4b1c      	ldr	r3, [pc, #112]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 8004532:	2280      	movs	r2, #128	@ 0x80
 8004534:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004536:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 8004538:	2200      	movs	r2, #0
 800453a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800453c:	4b19      	ldr	r3, [pc, #100]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 800453e:	2200      	movs	r2, #0
 8004540:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004542:	4b18      	ldr	r3, [pc, #96]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 8004544:	2220      	movs	r2, #32
 8004546:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004548:	4b16      	ldr	r3, [pc, #88]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 800454a:	2200      	movs	r2, #0
 800454c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800454e:	4815      	ldr	r0, [pc, #84]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 8004550:	f001 fd5a 	bl	8006008 <HAL_DMA_Init>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800455a:	f7fe fd33 	bl	8002fc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a10      	ldr	r2, [pc, #64]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 8004562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004566:	4a0f      	ldr	r2, [pc, #60]	@ (80045a4 <HAL_UART_MspInit+0x294>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800456c:	2200      	movs	r2, #0
 800456e:	2100      	movs	r1, #0
 8004570:	2025      	movs	r0, #37	@ 0x25
 8004572:	f001 fd14 	bl	8005f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004576:	2025      	movs	r0, #37	@ 0x25
 8004578:	f001 fd2b 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
}
 800457c:	bf00      	nop
 800457e:	3778      	adds	r7, #120	@ 0x78
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40008000 	.word	0x40008000
 8004588:	40021000 	.word	0x40021000
 800458c:	48000400 	.word	0x48000400
 8004590:	20000f94 	.word	0x20000f94
 8004594:	40020008 	.word	0x40020008
 8004598:	20000ff4 	.word	0x20000ff4
 800459c:	4002001c 	.word	0x4002001c
 80045a0:	40013800 	.word	0x40013800
 80045a4:	20001054 	.word	0x20001054
 80045a8:	40020044 	.word	0x40020044

080045ac <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a53      	ldr	r2, [pc, #332]	@ (8004708 <HAL_UART_RxCpltCallback+0x15c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d15b      	bne.n	8004676 <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 80045be:	4b53      	ldr	r3, [pc, #332]	@ (800470c <HAL_UART_RxCpltCallback+0x160>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a53      	ldr	r2, [pc, #332]	@ (8004710 <HAL_UART_RxCpltCallback+0x164>)
 80045c4:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 80045c6:	4b52      	ldr	r3, [pc, #328]	@ (8004710 <HAL_UART_RxCpltCallback+0x164>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80045ce:	dd22      	ble.n	8004616 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 80045d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004710 <HAL_UART_RxCpltCallback+0x164>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80045da:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 80045dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004710 <HAL_UART_RxCpltCallback+0x164>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004714 <HAL_UART_RxCpltCallback+0x168>)
 80045e4:	4413      	add	r3, r2
 80045e6:	89fa      	ldrh	r2, [r7, #14]
 80045e8:	494b      	ldr	r1, [pc, #300]	@ (8004718 <HAL_UART_RxCpltCallback+0x16c>)
 80045ea:	4618      	mov	r0, r3
 80045ec:	f00b ff75 	bl	80104da <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 80045f0:	4b47      	ldr	r3, [pc, #284]	@ (8004710 <HAL_UART_RxCpltCallback+0x164>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 80045f6:	89fb      	ldrh	r3, [r7, #14]
 80045f8:	4a47      	ldr	r2, [pc, #284]	@ (8004718 <HAL_UART_RxCpltCallback+0x16c>)
 80045fa:	1899      	adds	r1, r3, r2
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8004602:	461a      	mov	r2, r3
 8004604:	4843      	ldr	r0, [pc, #268]	@ (8004714 <HAL_UART_RxCpltCallback+0x168>)
 8004606:	f00b ff68 	bl	80104da <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 800460a:	89fb      	ldrh	r3, [r7, #14]
 800460c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8004610:	4a3e      	ldr	r2, [pc, #248]	@ (800470c <HAL_UART_RxCpltCallback+0x160>)
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	e01d      	b.n	8004652 <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 8004616:	4b3e      	ldr	r3, [pc, #248]	@ (8004710 <HAL_UART_RxCpltCallback+0x164>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	4b3d      	ldr	r3, [pc, #244]	@ (8004714 <HAL_UART_RxCpltCallback+0x168>)
 800461e:	441a      	add	r2, r3
 8004620:	4b3d      	ldr	r3, [pc, #244]	@ (8004718 <HAL_UART_RxCpltCallback+0x16c>)
 8004622:	4610      	mov	r0, r2
 8004624:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8004628:	4602      	mov	r2, r0
 800462a:	4619      	mov	r1, r3
 800462c:	f8d1 c000 	ldr.w	ip, [r1]
 8004630:	684e      	ldr	r6, [r1, #4]
 8004632:	688d      	ldr	r5, [r1, #8]
 8004634:	68c9      	ldr	r1, [r1, #12]
 8004636:	f8c2 c000 	str.w	ip, [r2]
 800463a:	6056      	str	r6, [r2, #4]
 800463c:	6095      	str	r5, [r2, #8]
 800463e:	60d1      	str	r1, [r2, #12]
 8004640:	3310      	adds	r3, #16
 8004642:	3010      	adds	r0, #16
 8004644:	42a3      	cmp	r3, r4
 8004646:	d1ef      	bne.n	8004628 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 8004648:	4b31      	ldr	r3, [pc, #196]	@ (8004710 <HAL_UART_RxCpltCallback+0x164>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3340      	adds	r3, #64	@ 0x40
 800464e:	4a2f      	ldr	r2, [pc, #188]	@ (800470c <HAL_UART_RxCpltCallback+0x160>)
 8004650:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8004652:	2240      	movs	r2, #64	@ 0x40
 8004654:	4930      	ldr	r1, [pc, #192]	@ (8004718 <HAL_UART_RxCpltCallback+0x16c>)
 8004656:	4831      	ldr	r0, [pc, #196]	@ (800471c <HAL_UART_RxCpltCallback+0x170>)
 8004658:	f006 fa1a 	bl	800aa90 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800465c:	4b30      	ldr	r3, [pc, #192]	@ (8004720 <HAL_UART_RxCpltCallback+0x174>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b2f      	ldr	r3, [pc, #188]	@ (8004720 <HAL_UART_RxCpltCallback+0x174>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0204 	bic.w	r2, r2, #4
 800466a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 800466c:	2240      	movs	r2, #64	@ 0x40
 800466e:	492a      	ldr	r1, [pc, #168]	@ (8004718 <HAL_UART_RxCpltCallback+0x16c>)
 8004670:	482a      	ldr	r0, [pc, #168]	@ (800471c <HAL_UART_RxCpltCallback+0x170>)
 8004672:	f006 fa0d 	bl	800aa90 <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2a      	ldr	r2, [pc, #168]	@ (8004724 <HAL_UART_RxCpltCallback+0x178>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d13f      	bne.n	8004700 <HAL_UART_RxCpltCallback+0x154>
			for (int i;i<20;i++){
 8004680:	e02e      	b.n	80046e0 <HAL_UART_RxCpltCallback+0x134>
				char buffer_servo[4];
				if (usart_buffer[i]=='$' && usart_buffer[i+1]=='3'){
 8004682:	4a29      	ldr	r2, [pc, #164]	@ (8004728 <HAL_UART_RxCpltCallback+0x17c>)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	4413      	add	r3, r2
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b24      	cmp	r3, #36	@ 0x24
 800468c:	d11d      	bne.n	80046ca <HAL_UART_RxCpltCallback+0x11e>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	3301      	adds	r3, #1
 8004692:	4a25      	ldr	r2, [pc, #148]	@ (8004728 <HAL_UART_RxCpltCallback+0x17c>)
 8004694:	5cd3      	ldrb	r3, [r2, r3]
 8004696:	2b33      	cmp	r3, #51	@ 0x33
 8004698:	d117      	bne.n	80046ca <HAL_UART_RxCpltCallback+0x11e>
					flag_servo = 1;
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <HAL_UART_RxCpltCallback+0x180>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
					for (int j;j<4;j++){
 80046a0:	e00e      	b.n	80046c0 <HAL_UART_RxCpltCallback+0x114>
						buffer_servo[j]=usart_buffer[i+3+j];
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	1cda      	adds	r2, r3, #3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4413      	add	r3, r2
 80046aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004728 <HAL_UART_RxCpltCallback+0x17c>)
 80046ac:	5cd1      	ldrb	r1, [r2, r3]
 80046ae:	f107 0208 	add.w	r2, r7, #8
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4413      	add	r3, r2
 80046b6:	460a      	mov	r2, r1
 80046b8:	701a      	strb	r2, [r3, #0]
					for (int j;j<4;j++){
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	3301      	adds	r3, #1
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	dded      	ble.n	80046a2 <HAL_UART_RxCpltCallback+0xf6>
					}
					buffer_servo[5]='\0';
 80046c6:	2300      	movs	r3, #0
 80046c8:	737b      	strb	r3, [r7, #13]
				}
				position_servo = atoi(buffer_servo);
 80046ca:	f107 0308 	add.w	r3, r7, #8
 80046ce:	4618      	mov	r0, r3
 80046d0:	f009 fe93 	bl	800e3fa <atoi>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <HAL_UART_RxCpltCallback+0x184>)
 80046d8:	6013      	str	r3, [r2, #0]
			for (int i;i<20;i++){
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	3301      	adds	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b13      	cmp	r3, #19
 80046e4:	ddcd      	ble.n	8004682 <HAL_UART_RxCpltCallback+0xd6>
				//break;
			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)usart_buffer, BUFFER_SIZE);//on recoit par dma à nouveau 64 caractères
 80046e6:	2214      	movs	r2, #20
 80046e8:	490f      	ldr	r1, [pc, #60]	@ (8004728 <HAL_UART_RxCpltCallback+0x17c>)
 80046ea:	4812      	ldr	r0, [pc, #72]	@ (8004734 <HAL_UART_RxCpltCallback+0x188>)
 80046ec:	f006 f9d0 	bl	800aa90 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80046f0:	4b11      	ldr	r3, [pc, #68]	@ (8004738 <HAL_UART_RxCpltCallback+0x18c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <HAL_UART_RxCpltCallback+0x18c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0204 	bic.w	r2, r2, #4
 80046fe:	601a      	str	r2, [r3, #0]
			}

}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004708:	40013800 	.word	0x40013800
 800470c:	20000b3c 	.word	0x20000b3c
 8004710:	20000b38 	.word	0x20000b38
 8004714:	200008e4 	.word	0x200008e4
 8004718:	20000ae4 	.word	0x20000ae4
 800471c:	20000f00 	.word	0x20000f00
 8004720:	20001054 	.word	0x20001054
 8004724:	40008000 	.word	0x40008000
 8004728:	20000b24 	.word	0x20000b24
 800472c:	20000e68 	.word	0x20000e68
 8004730:	20000e64 	.word	0x20000e64
 8004734:	20000e6c 	.word	0x20000e6c
 8004738:	20000f94 	.word	0x20000f94

0800473c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004740:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 8004742:	4a11      	ldr	r2, [pc, #68]	@ (8004788 <MX_USB_PCD_Init+0x4c>)
 8004744:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004746:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 8004748:	2208      	movs	r2, #8
 800474a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800474c:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 800474e:	2202      	movs	r2, #2
 8004750:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004752:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 8004754:	2202      	movs	r2, #2
 8004756:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004758:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 800475a:	2200      	movs	r2, #0
 800475c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800475e:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 8004760:	2200      	movs	r2, #0
 8004762:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004764:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 8004766:	2200      	movs	r2, #0
 8004768:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 800476c:	2200      	movs	r2, #0
 800476e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004770:	4804      	ldr	r0, [pc, #16]	@ (8004784 <MX_USB_PCD_Init+0x48>)
 8004772:	f002 ff66 	bl	8007642 <HAL_PCD_Init>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800477c:	f7fe fc22 	bl	8002fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200010b4 	.word	0x200010b4
 8004788:	40005c00 	.word	0x40005c00

0800478c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b094      	sub	sp, #80	@ 0x50
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	2244      	movs	r2, #68	@ 0x44
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f00b fe53 	bl	8010448 <memset>
  if(pcdHandle->Instance==USB)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a11      	ldr	r2, [pc, #68]	@ (80047ec <HAL_PCD_MspInit+0x60>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d11a      	bne.n	80047e2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80047ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80047b2:	2300      	movs	r3, #0
 80047b4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047b6:	f107 030c 	add.w	r3, r7, #12
 80047ba:	4618      	mov	r0, r3
 80047bc:	f003 fe18 	bl	80083f0 <HAL_RCCEx_PeriphCLKConfig>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80047c6:	f7fe fbfd 	bl	8002fc4 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80047ca:	4b09      	ldr	r3, [pc, #36]	@ (80047f0 <HAL_PCD_MspInit+0x64>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ce:	4a08      	ldr	r2, [pc, #32]	@ (80047f0 <HAL_PCD_MspInit+0x64>)
 80047d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d6:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <HAL_PCD_MspInit+0x64>)
 80047d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80047e2:	bf00      	nop
 80047e4:	3750      	adds	r7, #80	@ 0x50
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40005c00 	.word	0x40005c00
 80047f0:	40021000 	.word	0x40021000

080047f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047f4:	480d      	ldr	r0, [pc, #52]	@ (800482c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80047f8:	f7ff f9fc 	bl	8003bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047fc:	480c      	ldr	r0, [pc, #48]	@ (8004830 <LoopForever+0x6>)
  ldr r1, =_edata
 80047fe:	490d      	ldr	r1, [pc, #52]	@ (8004834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004800:	4a0d      	ldr	r2, [pc, #52]	@ (8004838 <LoopForever+0xe>)
  movs r3, #0
 8004802:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004804:	e002      	b.n	800480c <LoopCopyDataInit>

08004806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800480a:	3304      	adds	r3, #4

0800480c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800480c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800480e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004810:	d3f9      	bcc.n	8004806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004812:	4a0a      	ldr	r2, [pc, #40]	@ (800483c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004814:	4c0a      	ldr	r4, [pc, #40]	@ (8004840 <LoopForever+0x16>)
  movs r3, #0
 8004816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004818:	e001      	b.n	800481e <LoopFillZerobss>

0800481a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800481a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800481c:	3204      	adds	r2, #4

0800481e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800481e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004820:	d3fb      	bcc.n	800481a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8004822:	f00b fe33 	bl	801048c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004826:	f7fe f865 	bl	80028f4 <main>

0800482a <LoopForever>:

LoopForever:
    b LoopForever
 800482a:	e7fe      	b.n	800482a <LoopForever>
  ldr   r0, =_estack
 800482c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004834:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004838:	08013558 	.word	0x08013558
  ldr r2, =_sbss
 800483c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004840:	2000151c 	.word	0x2000151c

08004844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004844:	e7fe      	b.n	8004844 <ADC1_2_IRQHandler>

08004846 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004850:	2003      	movs	r0, #3
 8004852:	f001 fb99 	bl	8005f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004856:	200f      	movs	r0, #15
 8004858:	f000 f80e 	bl	8004878 <HAL_InitTick>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	71fb      	strb	r3, [r7, #7]
 8004866:	e001      	b.n	800486c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004868:	f7fe fff8 	bl	800385c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800486c:	79fb      	ldrb	r3, [r7, #7]

}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004884:	4b16      	ldr	r3, [pc, #88]	@ (80048e0 <HAL_InitTick+0x68>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d022      	beq.n	80048d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800488c:	4b15      	ldr	r3, [pc, #84]	@ (80048e4 <HAL_InitTick+0x6c>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b13      	ldr	r3, [pc, #76]	@ (80048e0 <HAL_InitTick+0x68>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004898:	fbb1 f3f3 	udiv	r3, r1, r3
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fba4 	bl	8005fee <HAL_SYSTICK_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10f      	bne.n	80048cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	d809      	bhi.n	80048c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048b2:	2200      	movs	r2, #0
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048ba:	f001 fb70 	bl	8005f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048be:	4a0a      	ldr	r2, [pc, #40]	@ (80048e8 <HAL_InitTick+0x70>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e007      	b.n	80048d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
 80048ca:	e004      	b.n	80048d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e001      	b.n	80048d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000018 	.word	0x20000018
 80048e4:	20000010 	.word	0x20000010
 80048e8:	20000014 	.word	0x20000014

080048ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048f0:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <HAL_IncTick+0x1c>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <HAL_IncTick+0x20>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4413      	add	r3, r2
 80048fa:	4a03      	ldr	r2, [pc, #12]	@ (8004908 <HAL_IncTick+0x1c>)
 80048fc:	6013      	str	r3, [r2, #0]
}
 80048fe:	bf00      	nop
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	20001390 	.word	0x20001390
 800490c:	20000018 	.word	0x20000018

08004910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return uwTick;
 8004914:	4b03      	ldr	r3, [pc, #12]	@ (8004924 <HAL_GetTick+0x14>)
 8004916:	681b      	ldr	r3, [r3, #0]
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20001390 	.word	0x20001390

08004928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004930:	f7ff ffee 	bl	8004910 <HAL_GetTick>
 8004934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004940:	d004      	beq.n	800494c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <HAL_Delay+0x40>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800494c:	bf00      	nop
 800494e:	f7ff ffdf 	bl	8004910 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	429a      	cmp	r2, r3
 800495c:	d8f7      	bhi.n	800494e <HAL_Delay+0x26>
  {
  }
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000018 	.word	0x20000018

0800496c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	609a      	str	r2, [r3, #8]
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	609a      	str	r2, [r3, #8]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3360      	adds	r3, #96	@ 0x60
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <LL_ADC_SetOffset+0x44>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	03fff000 	.word	0x03fff000

08004a1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3360      	adds	r3, #96	@ 0x60
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3360      	adds	r3, #96	@ 0x60
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b087      	sub	sp, #28
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3360      	adds	r3, #96	@ 0x60
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3360      	adds	r3, #96	@ 0x60
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	615a      	str	r2, [r3, #20]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b087      	sub	sp, #28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3330      	adds	r3, #48	@ 0x30
 8004b46:	461a      	mov	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	4413      	add	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	211f      	movs	r1, #31
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	401a      	ands	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0e9b      	lsrs	r3, r3, #26
 8004b6e:	f003 011f 	and.w	r1, r3, #31
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b087      	sub	sp, #28
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	0e5b      	lsrs	r3, r3, #25
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	4413      	add	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	0d1b      	lsrs	r3, r3, #20
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	2107      	movs	r1, #7
 8004bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	0d1b      	lsrs	r3, r3, #20
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f003 0318 	and.w	r3, r3, #24
 8004c06:	4908      	ldr	r1, [pc, #32]	@ (8004c28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004c08:	40d9      	lsrs	r1, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	400b      	ands	r3, r1
 8004c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c12:	431a      	orrs	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	0007ffff 	.word	0x0007ffff

08004c2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 031f 	and.w	r3, r3, #31
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6093      	str	r3, [r2, #8]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c80:	d101      	bne.n	8004c86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004ca4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ca8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cd0:	d101      	bne.n	8004cd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <LL_ADC_IsEnabled+0x18>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <LL_ADC_IsEnabled+0x1a>
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d42:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d46:	f043 0204 	orr.w	r2, r3, #4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d101      	bne.n	8004d72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d101      	bne.n	8004d98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b089      	sub	sp, #36	@ 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e167      	b.n	8005092 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fc fc07 	bl	80015e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff3f 	bl	8004c6c <LL_ADC_IsDeepPowerDownEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d004      	beq.n	8004dfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff25 	bl	8004c48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff5a 	bl	8004cbc <LL_ADC_IsInternalRegulatorEnabled>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d115      	bne.n	8004e3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff ff3e 	bl	8004c94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e18:	4ba0      	ldr	r3, [pc, #640]	@ (800509c <HAL_ADC_Init+0x2f4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	4aa0      	ldr	r2, [pc, #640]	@ (80050a0 <HAL_ADC_Init+0x2f8>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	3301      	adds	r3, #1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004e2c:	e002      	b.n	8004e34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f9      	bne.n	8004e2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff ff3c 	bl	8004cbc <LL_ADC_IsInternalRegulatorEnabled>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	f043 0210 	orr.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ff75 	bl	8004d5a <LL_ADC_REG_IsConversionOngoing>
 8004e70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 8100 	bne.w	8005080 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 80fc 	bne.w	8005080 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004e90:	f043 0202 	orr.w	r2, r3, #2
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff ff35 	bl	8004d0c <LL_ADC_IsEnabled>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d111      	bne.n	8004ecc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004eac:	f7ff ff2e 	bl	8004d0c <LL_ADC_IsEnabled>
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	487c      	ldr	r0, [pc, #496]	@ (80050a4 <HAL_ADC_Init+0x2fc>)
 8004eb4:	f7ff ff2a 	bl	8004d0c <LL_ADC_IsEnabled>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	4323      	orrs	r3, r4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4878      	ldr	r0, [pc, #480]	@ (80050a8 <HAL_ADC_Init+0x300>)
 8004ec8:	f7ff fd50 	bl	800496c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	7f5b      	ldrb	r3, [r3, #29]
 8004ed0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ed6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004edc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004ee2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004eea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d106      	bne.n	8004f08 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	045b      	lsls	r3, r3, #17
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	4b60      	ldr	r3, [pc, #384]	@ (80050ac <HAL_ADC_Init+0x304>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	69b9      	ldr	r1, [r7, #24]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff ff14 	bl	8004d80 <LL_ADC_INJ_IsConversionOngoing>
 8004f58:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d16d      	bne.n	800503c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d16a      	bne.n	800503c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f6a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f82:	f023 0302 	bic.w	r3, r3, #2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	69b9      	ldr	r1, [r7, #24]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d017      	beq.n	8004fc8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004fa6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004fb0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004fb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6911      	ldr	r1, [r2, #16]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004fc6:	e013      	b.n	8004ff0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004fd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d118      	bne.n	800502c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005004:	f023 0304 	bic.w	r3, r3, #4
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005010:	4311      	orrs	r1, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005016:	4311      	orrs	r1, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800501c:	430a      	orrs	r2, r1
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	611a      	str	r2, [r3, #16]
 800502a:	e007      	b.n	800503c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d10c      	bne.n	800505e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	f023 010f 	bic.w	r1, r3, #15
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	1e5a      	subs	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
 800505c:	e007      	b.n	800506e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 020f 	bic.w	r2, r2, #15
 800506c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800507e:	e007      	b.n	8005090 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005084:	f043 0210 	orr.w	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005090:	7ffb      	ldrb	r3, [r7, #31]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	@ 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd90      	pop	{r4, r7, pc}
 800509a:	bf00      	nop
 800509c:	20000010 	.word	0x20000010
 80050a0:	053e2d63 	.word	0x053e2d63
 80050a4:	50000100 	.word	0x50000100
 80050a8:	50000300 	.word	0x50000300
 80050ac:	fff04007 	.word	0xfff04007

080050b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050bc:	4851      	ldr	r0, [pc, #324]	@ (8005204 <HAL_ADC_Start_DMA+0x154>)
 80050be:	f7ff fdb5 	bl	8004c2c <LL_ADC_GetMultimode>
 80050c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fe46 	bl	8004d5a <LL_ADC_REG_IsConversionOngoing>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f040 808f 	bne.w	80051f4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_ADC_Start_DMA+0x34>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e08a      	b.n	80051fa <HAL_ADC_Start_DMA+0x14a>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d002      	beq.n	80050fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b09      	cmp	r3, #9
 80050fc:	d173      	bne.n	80051e6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fc8e 	bl	8005a20 <ADC_Enable>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d166      	bne.n	80051dc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005112:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a38      	ldr	r2, [pc, #224]	@ (8005208 <HAL_ADC_Start_DMA+0x158>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d002      	beq.n	8005132 <HAL_ADC_Start_DMA+0x82>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	e001      	b.n	8005136 <HAL_ADC_Start_DMA+0x86>
 8005132:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	4293      	cmp	r3, r2
 800513c:	d002      	beq.n	8005144 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d105      	bne.n	8005150 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005148:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d006      	beq.n	800516a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005160:	f023 0206 	bic.w	r2, r3, #6
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	661a      	str	r2, [r3, #96]	@ 0x60
 8005168:	e002      	b.n	8005170 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005174:	4a25      	ldr	r2, [pc, #148]	@ (800520c <HAL_ADC_Start_DMA+0x15c>)
 8005176:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517c:	4a24      	ldr	r2, [pc, #144]	@ (8005210 <HAL_ADC_Start_DMA+0x160>)
 800517e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005184:	4a23      	ldr	r2, [pc, #140]	@ (8005214 <HAL_ADC_Start_DMA+0x164>)
 8005186:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	221c      	movs	r2, #28
 800518e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0210 	orr.w	r2, r2, #16
 80051a6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3340      	adds	r3, #64	@ 0x40
 80051c2:	4619      	mov	r1, r3
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f000 ffc6 	bl	8006158 <HAL_DMA_Start_IT>
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fdac 	bl	8004d32 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80051da:	e00d      	b.n	80051f8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80051e4:	e008      	b.n	80051f8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80051f2:	e001      	b.n	80051f8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051f4:	2302      	movs	r3, #2
 80051f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	50000300 	.word	0x50000300
 8005208:	50000100 	.word	0x50000100
 800520c:	08005b2d 	.word	0x08005b2d
 8005210:	08005c05 	.word	0x08005c05
 8005214:	08005c21 	.word	0x08005c21

08005218 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0b6      	sub	sp, #216	@ 0xd8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_ADC_ConfigChannel+0x22>
 800525e:	2302      	movs	r3, #2
 8005260:	e3c8      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x7b4>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff fd73 	bl	8004d5a <LL_ADC_REG_IsConversionOngoing>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	f040 83ad 	bne.w	80059d6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	f7ff fc54 	bl	8004b36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff fd61 	bl	8004d5a <LL_ADC_REG_IsConversionOngoing>
 8005298:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fd6d 	bl	8004d80 <LL_ADC_INJ_IsConversionOngoing>
 80052a6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 81d9 	bne.w	8005666 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 81d4 	bne.w	8005666 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052c6:	d10f      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2200      	movs	r2, #0
 80052d2:	4619      	mov	r1, r3
 80052d4:	f7ff fc5b 	bl	8004b8e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fc02 	bl	8004aea <LL_ADC_SetSamplingTimeCommonConfig>
 80052e6:	e00e      	b.n	8005306 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f7ff fc4a 	bl	8004b8e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fbf2 	bl	8004aea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	08db      	lsrs	r3, r3, #3
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b04      	cmp	r3, #4
 8005326:	d022      	beq.n	800536e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	6919      	ldr	r1, [r3, #16]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005338:	f7ff fb4c 	bl	80049d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	6919      	ldr	r1, [r3, #16]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	461a      	mov	r2, r3
 800534a:	f7ff fb98 	bl	8004a7e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800535a:	2b01      	cmp	r3, #1
 800535c:	d102      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x124>
 800535e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005362:	e000      	b.n	8005366 <HAL_ADC_ConfigChannel+0x126>
 8005364:	2300      	movs	r3, #0
 8005366:	461a      	mov	r2, r3
 8005368:	f7ff fba4 	bl	8004ab4 <LL_ADC_SetOffsetSaturation>
 800536c:	e17b      	b.n	8005666 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fb51 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 800537a:	4603      	mov	r3, r0
 800537c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <HAL_ADC_ConfigChannel+0x15a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fb46 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005390:	4603      	mov	r3, r0
 8005392:	0e9b      	lsrs	r3, r3, #26
 8005394:	f003 021f 	and.w	r2, r3, #31
 8005398:	e01e      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x198>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fb3b 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80053b0:	fa93 f3a3 	rbit	r3, r3
 80053b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80053c8:	2320      	movs	r3, #32
 80053ca:	e004      	b.n	80053d6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80053cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053d0:	fab3 f383 	clz	r3, r3
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x1b0>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	0e9b      	lsrs	r3, r3, #26
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	e018      	b.n	8005422 <HAL_ADC_ConfigChannel+0x1e2>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800540c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005414:	2320      	movs	r3, #32
 8005416:	e004      	b.n	8005422 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005418:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800541c:	fab3 f383 	clz	r3, r3
 8005420:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005422:	429a      	cmp	r2, r3
 8005424:	d106      	bne.n	8005434 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	2100      	movs	r1, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff fb0a 	bl	8004a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2101      	movs	r1, #1
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff faee 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005440:	4603      	mov	r3, r0
 8005442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x220>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2101      	movs	r1, #1
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fae3 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005456:	4603      	mov	r3, r0
 8005458:	0e9b      	lsrs	r3, r3, #26
 800545a:	f003 021f 	and.w	r2, r3, #31
 800545e:	e01e      	b.n	800549e <HAL_ADC_ConfigChannel+0x25e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2101      	movs	r1, #1
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fad8 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 800546c:	4603      	mov	r3, r0
 800546e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005476:	fa93 f3a3 	rbit	r3, r3
 800547a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800547e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005482:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800548e:	2320      	movs	r3, #32
 8005490:	e004      	b.n	800549c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005496:	fab3 f383 	clz	r3, r3
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x276>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	0e9b      	lsrs	r3, r3, #26
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	e018      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x2a8>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054c2:	fa93 f3a3 	rbit	r3, r3
 80054c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80054ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80054d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80054da:	2320      	movs	r3, #32
 80054dc:	e004      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80054de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d106      	bne.n	80054fa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2101      	movs	r1, #1
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff faa7 	bl	8004a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2102      	movs	r1, #2
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff fa8b 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005506:	4603      	mov	r3, r0
 8005508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x2e6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2102      	movs	r1, #2
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fa80 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 800551c:	4603      	mov	r3, r0
 800551e:	0e9b      	lsrs	r3, r3, #26
 8005520:	f003 021f 	and.w	r2, r3, #31
 8005524:	e01e      	b.n	8005564 <HAL_ADC_ConfigChannel+0x324>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2102      	movs	r1, #2
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fa75 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005532:	4603      	mov	r3, r0
 8005534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800553c:	fa93 f3a3 	rbit	r3, r3
 8005540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800554c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005554:	2320      	movs	r3, #32
 8005556:	e004      	b.n	8005562 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005558:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800555c:	fab3 f383 	clz	r3, r3
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <HAL_ADC_ConfigChannel+0x33c>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	0e9b      	lsrs	r3, r3, #26
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	e016      	b.n	80055aa <HAL_ADC_ConfigChannel+0x36a>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800558e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800559c:	2320      	movs	r3, #32
 800559e:	e004      	b.n	80055aa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80055a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055a4:	fab3 f383 	clz	r3, r3
 80055a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d106      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2102      	movs	r1, #2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fa46 	bl	8004a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2103      	movs	r1, #3
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fa2a 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x3a8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2103      	movs	r1, #3
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fa1f 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	f003 021f 	and.w	r2, r3, #31
 80055e6:	e017      	b.n	8005618 <HAL_ADC_ConfigChannel+0x3d8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2103      	movs	r1, #3
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fa14 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005600:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005602:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800560a:	2320      	movs	r3, #32
 800560c:	e003      	b.n	8005616 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800560e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005610:	fab3 f383 	clz	r3, r3
 8005614:	b2db      	uxtb	r3, r3
 8005616:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x3f0>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	0e9b      	lsrs	r3, r3, #26
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	e011      	b.n	8005654 <HAL_ADC_ConfigChannel+0x414>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005638:	fa93 f3a3 	rbit	r3, r3
 800563c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800563e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005640:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005648:	2320      	movs	r3, #32
 800564a:	e003      	b.n	8005654 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800564c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005654:	429a      	cmp	r2, r3
 8005656:	d106      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2200      	movs	r2, #0
 800565e:	2103      	movs	r1, #3
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff f9f1 	bl	8004a48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fb4e 	bl	8004d0c <LL_ADC_IsEnabled>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 8140 	bne.w	80058f8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	461a      	mov	r2, r3
 8005686:	f7ff faad 	bl	8004be4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	4a8f      	ldr	r2, [pc, #572]	@ (80058cc <HAL_ADC_ConfigChannel+0x68c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	f040 8131 	bne.w	80058f8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_ADC_ConfigChannel+0x47e>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	0e9b      	lsrs	r3, r3, #26
 80056ac:	3301      	adds	r3, #1
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2b09      	cmp	r3, #9
 80056b4:	bf94      	ite	ls
 80056b6:	2301      	movls	r3, #1
 80056b8:	2300      	movhi	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	e019      	b.n	80056f2 <HAL_ADC_ConfigChannel+0x4b2>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c6:	fa93 f3a3 	rbit	r3, r3
 80056ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80056cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056ce:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80056d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80056d6:	2320      	movs	r3, #32
 80056d8:	e003      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80056da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056dc:	fab3 f383 	clz	r3, r3
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	3301      	adds	r3, #1
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2b09      	cmp	r3, #9
 80056ea:	bf94      	ite	ls
 80056ec:	2301      	movls	r3, #1
 80056ee:	2300      	movhi	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d079      	beq.n	80057ea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d107      	bne.n	8005712 <HAL_ADC_ConfigChannel+0x4d2>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	0e9b      	lsrs	r3, r3, #26
 8005708:	3301      	adds	r3, #1
 800570a:	069b      	lsls	r3, r3, #26
 800570c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005710:	e015      	b.n	800573e <HAL_ADC_ConfigChannel+0x4fe>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800571a:	fa93 f3a3 	rbit	r3, r3
 800571e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005722:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800572a:	2320      	movs	r3, #32
 800572c:	e003      	b.n	8005736 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800572e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	3301      	adds	r3, #1
 8005738:	069b      	lsls	r3, r3, #26
 800573a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <HAL_ADC_ConfigChannel+0x51e>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	0e9b      	lsrs	r3, r3, #26
 8005750:	3301      	adds	r3, #1
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2101      	movs	r1, #1
 8005758:	fa01 f303 	lsl.w	r3, r1, r3
 800575c:	e017      	b.n	800578e <HAL_ADC_ConfigChannel+0x54e>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005766:	fa93 f3a3 	rbit	r3, r3
 800576a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800576c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005776:	2320      	movs	r3, #32
 8005778:	e003      	b.n	8005782 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800577a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800577c:	fab3 f383 	clz	r3, r3
 8005780:	b2db      	uxtb	r3, r3
 8005782:	3301      	adds	r3, #1
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	ea42 0103 	orr.w	r1, r2, r3
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <HAL_ADC_ConfigChannel+0x574>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	0e9b      	lsrs	r3, r3, #26
 80057a4:	3301      	adds	r3, #1
 80057a6:	f003 021f 	and.w	r2, r3, #31
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	051b      	lsls	r3, r3, #20
 80057b2:	e018      	b.n	80057e6 <HAL_ADC_ConfigChannel+0x5a6>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80057c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80057cc:	2320      	movs	r3, #32
 80057ce:	e003      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80057d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d2:	fab3 f383 	clz	r3, r3
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	3301      	adds	r3, #1
 80057da:	f003 021f 	and.w	r2, r3, #31
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057e6:	430b      	orrs	r3, r1
 80057e8:	e081      	b.n	80058ee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <HAL_ADC_ConfigChannel+0x5c6>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	0e9b      	lsrs	r3, r3, #26
 80057fc:	3301      	adds	r3, #1
 80057fe:	069b      	lsls	r3, r3, #26
 8005800:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005804:	e015      	b.n	8005832 <HAL_ADC_ConfigChannel+0x5f2>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580e:	fa93 f3a3 	rbit	r3, r3
 8005812:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800581e:	2320      	movs	r3, #32
 8005820:	e003      	b.n	800582a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	fab3 f383 	clz	r3, r3
 8005828:	b2db      	uxtb	r3, r3
 800582a:	3301      	adds	r3, #1
 800582c:	069b      	lsls	r3, r3, #26
 800582e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x612>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	0e9b      	lsrs	r3, r3, #26
 8005844:	3301      	adds	r3, #1
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2101      	movs	r1, #1
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	e017      	b.n	8005882 <HAL_ADC_ConfigChannel+0x642>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	fa93 f3a3 	rbit	r3, r3
 800585e:	61fb      	str	r3, [r7, #28]
  return result;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800586a:	2320      	movs	r3, #32
 800586c:	e003      	b.n	8005876 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	fab3 f383 	clz	r3, r3
 8005874:	b2db      	uxtb	r3, r3
 8005876:	3301      	adds	r3, #1
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2101      	movs	r1, #1
 800587e:	fa01 f303 	lsl.w	r3, r1, r3
 8005882:	ea42 0103 	orr.w	r1, r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10d      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x66e>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	0e9b      	lsrs	r3, r3, #26
 8005898:	3301      	adds	r3, #1
 800589a:	f003 021f 	and.w	r2, r3, #31
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	3b1e      	subs	r3, #30
 80058a6:	051b      	lsls	r3, r3, #20
 80058a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80058ac:	e01e      	b.n	80058ec <HAL_ADC_ConfigChannel+0x6ac>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	fa93 f3a3 	rbit	r3, r3
 80058ba:	613b      	str	r3, [r7, #16]
  return result;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80058c6:	2320      	movs	r3, #32
 80058c8:	e006      	b.n	80058d8 <HAL_ADC_ConfigChannel+0x698>
 80058ca:	bf00      	nop
 80058cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	fab3 f383 	clz	r3, r3
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	3301      	adds	r3, #1
 80058da:	f003 021f 	and.w	r2, r3, #31
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	3b1e      	subs	r3, #30
 80058e6:	051b      	lsls	r3, r3, #20
 80058e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058f2:	4619      	mov	r1, r3
 80058f4:	f7ff f94b 	bl	8004b8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4b3f      	ldr	r3, [pc, #252]	@ (80059fc <HAL_ADC_ConfigChannel+0x7bc>)
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d071      	beq.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005904:	483e      	ldr	r0, [pc, #248]	@ (8005a00 <HAL_ADC_ConfigChannel+0x7c0>)
 8005906:	f7ff f857 	bl	80049b8 <LL_ADC_GetCommonPathInternalCh>
 800590a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a3c      	ldr	r2, [pc, #240]	@ (8005a04 <HAL_ADC_ConfigChannel+0x7c4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d004      	beq.n	8005922 <HAL_ADC_ConfigChannel+0x6e2>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a3a      	ldr	r2, [pc, #232]	@ (8005a08 <HAL_ADC_ConfigChannel+0x7c8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d127      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d121      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005936:	d157      	bne.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800593c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005940:	4619      	mov	r1, r3
 8005942:	482f      	ldr	r0, [pc, #188]	@ (8005a00 <HAL_ADC_ConfigChannel+0x7c0>)
 8005944:	f7ff f825 	bl	8004992 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005948:	4b30      	ldr	r3, [pc, #192]	@ (8005a0c <HAL_ADC_ConfigChannel+0x7cc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	099b      	lsrs	r3, r3, #6
 800594e:	4a30      	ldr	r2, [pc, #192]	@ (8005a10 <HAL_ADC_ConfigChannel+0x7d0>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	099b      	lsrs	r3, r3, #6
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	4613      	mov	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005962:	e002      	b.n	800596a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3b01      	subs	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f9      	bne.n	8005964 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005970:	e03a      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a27      	ldr	r2, [pc, #156]	@ (8005a14 <HAL_ADC_ConfigChannel+0x7d4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d113      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800597c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005980:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10d      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a22      	ldr	r2, [pc, #136]	@ (8005a18 <HAL_ADC_ConfigChannel+0x7d8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02a      	beq.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800599a:	4619      	mov	r1, r3
 800599c:	4818      	ldr	r0, [pc, #96]	@ (8005a00 <HAL_ADC_ConfigChannel+0x7c0>)
 800599e:	f7fe fff8 	bl	8004992 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059a2:	e021      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a1c <HAL_ADC_ConfigChannel+0x7dc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d11c      	bne.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d116      	bne.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a16      	ldr	r2, [pc, #88]	@ (8005a18 <HAL_ADC_ConfigChannel+0x7d8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d011      	beq.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80059cc:	4619      	mov	r1, r3
 80059ce:	480c      	ldr	r0, [pc, #48]	@ (8005a00 <HAL_ADC_ConfigChannel+0x7c0>)
 80059d0:	f7fe ffdf 	bl	8004992 <LL_ADC_SetCommonPathInternalCh>
 80059d4:	e008      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059da:	f043 0220 	orr.w	r2, r3, #32
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80059f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	37d8      	adds	r7, #216	@ 0xd8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	80080000 	.word	0x80080000
 8005a00:	50000300 	.word	0x50000300
 8005a04:	c3210000 	.word	0xc3210000
 8005a08:	90c00010 	.word	0x90c00010
 8005a0c:	20000010 	.word	0x20000010
 8005a10:	053e2d63 	.word	0x053e2d63
 8005a14:	c7520000 	.word	0xc7520000
 8005a18:	50000100 	.word	0x50000100
 8005a1c:	cb840000 	.word	0xcb840000

08005a20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff f96b 	bl	8004d0c <LL_ADC_IsEnabled>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d169      	bne.n	8005b10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	4b36      	ldr	r3, [pc, #216]	@ (8005b1c <ADC_Enable+0xfc>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4e:	f043 0210 	orr.w	r2, r3, #16
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a5a:	f043 0201 	orr.w	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e055      	b.n	8005b12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff f93a 	bl	8004ce4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a70:	482b      	ldr	r0, [pc, #172]	@ (8005b20 <ADC_Enable+0x100>)
 8005a72:	f7fe ffa1 	bl	80049b8 <LL_ADC_GetCommonPathInternalCh>
 8005a76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a80:	4b28      	ldr	r3, [pc, #160]	@ (8005b24 <ADC_Enable+0x104>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	4a28      	ldr	r2, [pc, #160]	@ (8005b28 <ADC_Enable+0x108>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	099b      	lsrs	r3, r3, #6
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	4613      	mov	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a9a:	e002      	b.n	8005aa2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f9      	bne.n	8005a9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005aa8:	f7fe ff32 	bl	8004910 <HAL_GetTick>
 8005aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aae:	e028      	b.n	8005b02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff f929 	bl	8004d0c <LL_ADC_IsEnabled>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff f90d 	bl	8004ce4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005aca:	f7fe ff21 	bl	8004910 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d914      	bls.n	8005b02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d00d      	beq.n	8005b02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aea:	f043 0210 	orr.w	r2, r3, #16
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af6:	f043 0201 	orr.w	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e007      	b.n	8005b12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d1cf      	bne.n	8005ab0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	8000003f 	.word	0x8000003f
 8005b20:	50000300 	.word	0x50000300
 8005b24:	20000010 	.word	0x20000010
 8005b28:	053e2d63 	.word	0x053e2d63

08005b2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d14b      	bne.n	8005bde <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d021      	beq.n	8005ba4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe ffd3 	bl	8004b10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d032      	beq.n	8005bd6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d12b      	bne.n	8005bd6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11f      	bne.n	8005bd6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ba2:	e018      	b.n	8005bd6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d111      	bne.n	8005bd6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bce:	f043 0201 	orr.w	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7fb fe06 	bl	80017e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bdc:	e00e      	b.n	8005bfc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff fb1e 	bl	800522c <HAL_ADC_ErrorCallback>
}
 8005bf0:	e004      	b.n	8005bfc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff fb00 	bl	8005218 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c3e:	f043 0204 	orr.w	r2, r3, #4
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff faf0 	bl	800522c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c4c:	bf00      	nop
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <LL_ADC_IsEnabled>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <LL_ADC_IsEnabled+0x18>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <LL_ADC_IsEnabled+0x1a>
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <LL_ADC_REG_IsConversionOngoing>:
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d101      	bne.n	8005c92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b0a1      	sub	sp, #132	@ 0x84
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e08b      	b.n	8005dd6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005cca:	2300      	movs	r3, #0
 8005ccc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cd6:	d102      	bne.n	8005cde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005cd8:	4b41      	ldr	r3, [pc, #260]	@ (8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	e001      	b.n	8005ce2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cec:	f043 0220 	orr.w	r2, r3, #32
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e06a      	b.n	8005dd6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff ffb9 	bl	8005c7a <LL_ADC_REG_IsConversionOngoing>
 8005d08:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ffb3 	bl	8005c7a <LL_ADC_REG_IsConversionOngoing>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d14c      	bne.n	8005db4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005d1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d149      	bne.n	8005db4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d20:	4b30      	ldr	r3, [pc, #192]	@ (8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005d22:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d028      	beq.n	8005d7e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	6859      	ldr	r1, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d3e:	035b      	lsls	r3, r3, #13
 8005d40:	430b      	orrs	r3, r1
 8005d42:	431a      	orrs	r2, r3
 8005d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d4c:	f7ff ff82 	bl	8005c54 <LL_ADC_IsEnabled>
 8005d50:	4604      	mov	r4, r0
 8005d52:	4823      	ldr	r0, [pc, #140]	@ (8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005d54:	f7ff ff7e 	bl	8005c54 <LL_ADC_IsEnabled>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4323      	orrs	r3, r4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d133      	bne.n	8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d68:	f023 030f 	bic.w	r3, r3, #15
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	6811      	ldr	r1, [r2, #0]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	6892      	ldr	r2, [r2, #8]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	431a      	orrs	r2, r3
 8005d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d7a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d7c:	e024      	b.n	8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d8a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d8e:	f7ff ff61 	bl	8005c54 <LL_ADC_IsEnabled>
 8005d92:	4604      	mov	r4, r0
 8005d94:	4812      	ldr	r0, [pc, #72]	@ (8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005d96:	f7ff ff5d 	bl	8005c54 <LL_ADC_IsEnabled>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4323      	orrs	r3, r4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d112      	bne.n	8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005daa:	f023 030f 	bic.w	r3, r3, #15
 8005dae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005db0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005db2:	e009      	b.n	8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005dc6:	e000      	b.n	8005dca <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005dc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005dd2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3784      	adds	r7, #132	@ 0x84
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd90      	pop	{r4, r7, pc}
 8005dde:	bf00      	nop
 8005de0:	50000100 	.word	0x50000100
 8005de4:	50000300 	.word	0x50000300

08005de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005df8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <__NVIC_SetPriorityGrouping+0x44>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e04:	4013      	ands	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e1a:	4a04      	ldr	r2, [pc, #16]	@ (8005e2c <__NVIC_SetPriorityGrouping+0x44>)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	60d3      	str	r3, [r2, #12]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e34:	4b04      	ldr	r3, [pc, #16]	@ (8005e48 <__NVIC_GetPriorityGrouping+0x18>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	f003 0307 	and.w	r3, r3, #7
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	e000ed00 	.word	0xe000ed00

08005e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	db0b      	blt.n	8005e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	f003 021f 	and.w	r2, r3, #31
 8005e64:	4907      	ldr	r1, [pc, #28]	@ (8005e84 <__NVIC_EnableIRQ+0x38>)
 8005e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	e000e100 	.word	0xe000e100

08005e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	db0a      	blt.n	8005eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	490c      	ldr	r1, [pc, #48]	@ (8005ed4 <__NVIC_SetPriority+0x4c>)
 8005ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea6:	0112      	lsls	r2, r2, #4
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	440b      	add	r3, r1
 8005eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005eb0:	e00a      	b.n	8005ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	4908      	ldr	r1, [pc, #32]	@ (8005ed8 <__NVIC_SetPriority+0x50>)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	3b04      	subs	r3, #4
 8005ec0:	0112      	lsls	r2, r2, #4
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	761a      	strb	r2, [r3, #24]
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	e000e100 	.word	0xe000e100
 8005ed8:	e000ed00 	.word	0xe000ed00

08005edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	@ 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f1c3 0307 	rsb	r3, r3, #7
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	bf28      	it	cs
 8005efa:	2304      	movcs	r3, #4
 8005efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3304      	adds	r3, #4
 8005f02:	2b06      	cmp	r3, #6
 8005f04:	d902      	bls.n	8005f0c <NVIC_EncodePriority+0x30>
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	3b03      	subs	r3, #3
 8005f0a:	e000      	b.n	8005f0e <NVIC_EncodePriority+0x32>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	401a      	ands	r2, r3
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2e:	43d9      	mvns	r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f34:	4313      	orrs	r3, r2
         );
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3724      	adds	r7, #36	@ 0x24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f54:	d301      	bcc.n	8005f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f56:	2301      	movs	r3, #1
 8005f58:	e00f      	b.n	8005f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f84 <SysTick_Config+0x40>)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f62:	210f      	movs	r1, #15
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f68:	f7ff ff8e 	bl	8005e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <SysTick_Config+0x40>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f72:	4b04      	ldr	r3, [pc, #16]	@ (8005f84 <SysTick_Config+0x40>)
 8005f74:	2207      	movs	r2, #7
 8005f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	e000e010 	.word	0xe000e010

08005f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ff29 	bl	8005de8 <__NVIC_SetPriorityGrouping>
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b086      	sub	sp, #24
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fac:	f7ff ff40 	bl	8005e30 <__NVIC_GetPriorityGrouping>
 8005fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	6978      	ldr	r0, [r7, #20]
 8005fb8:	f7ff ff90 	bl	8005edc <NVIC_EncodePriority>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ff5f 	bl	8005e88 <__NVIC_SetPriority>
}
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	4603      	mov	r3, r0
 8005fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff ff33 	bl	8005e4c <__NVIC_EnableIRQ>
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff ffa4 	bl	8005f44 <SysTick_Config>
 8005ffc:	4603      	mov	r3, r0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e08d      	b.n	8006136 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	4b47      	ldr	r3, [pc, #284]	@ (8006140 <HAL_DMA_Init+0x138>)
 8006022:	429a      	cmp	r2, r3
 8006024:	d80f      	bhi.n	8006046 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	4b45      	ldr	r3, [pc, #276]	@ (8006144 <HAL_DMA_Init+0x13c>)
 800602e:	4413      	add	r3, r2
 8006030:	4a45      	ldr	r2, [pc, #276]	@ (8006148 <HAL_DMA_Init+0x140>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	009a      	lsls	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a42      	ldr	r2, [pc, #264]	@ (800614c <HAL_DMA_Init+0x144>)
 8006042:	641a      	str	r2, [r3, #64]	@ 0x40
 8006044:	e00e      	b.n	8006064 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	4b40      	ldr	r3, [pc, #256]	@ (8006150 <HAL_DMA_Init+0x148>)
 800604e:	4413      	add	r3, r2
 8006050:	4a3d      	ldr	r2, [pc, #244]	@ (8006148 <HAL_DMA_Init+0x140>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	091b      	lsrs	r3, r3, #4
 8006058:	009a      	lsls	r2, r3, #2
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a3c      	ldr	r2, [pc, #240]	@ (8006154 <HAL_DMA_Init+0x14c>)
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800607a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa82 	bl	80065c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060c4:	d102      	bne.n	80060cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_DMA_Init+0x104>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d80c      	bhi.n	800610c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 faa2 	bl	800663c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	e008      	b.n	800611e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40020407 	.word	0x40020407
 8006144:	bffdfff8 	.word	0xbffdfff8
 8006148:	cccccccd 	.word	0xcccccccd
 800614c:	40020000 	.word	0x40020000
 8006150:	bffdfbf8 	.word	0xbffdfbf8
 8006154:	40020400 	.word	0x40020400

08006158 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_DMA_Start_IT+0x20>
 8006174:	2302      	movs	r3, #2
 8006176:	e066      	b.n	8006246 <HAL_DMA_Start_IT+0xee>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d155      	bne.n	8006238 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f9c7 	bl	8006544 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 020e 	orr.w	r2, r2, #14
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e00f      	b.n	80061f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0204 	bic.w	r2, r2, #4
 80061de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 020a 	orr.w	r2, r2, #10
 80061ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800620c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006224:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e005      	b.n	8006244 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006240:	2302      	movs	r3, #2
 8006242:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006244:	7dfb      	ldrb	r3, [r7, #23]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d005      	beq.n	8006272 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
 8006270:	e037      	b.n	80062e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 020e 	bic.w	r2, r2, #14
 8006280:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800628c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006290:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a6:	f003 021f 	and.w	r2, r3, #31
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	2101      	movs	r1, #1
 80062b0:	fa01 f202 	lsl.w	r2, r1, r2
 80062b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00c      	beq.n	80062e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d00d      	beq.n	8006334 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2204      	movs	r2, #4
 800631c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	e047      	b.n	80063c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 020e 	bic.w	r2, r2, #14
 8006342:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800635e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006368:	f003 021f 	and.w	r2, r3, #31
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	2101      	movs	r1, #1
 8006372:	fa01 f202 	lsl.w	r2, r1, r2
 8006376:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006380:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006398:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80063a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	4798      	blx	r3
    }
  }
  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2204      	movs	r2, #4
 80063f0:	409a      	lsls	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d026      	beq.n	8006448 <HAL_DMA_IRQHandler+0x7a>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d021      	beq.n	8006448 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d107      	bne.n	8006422 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0204 	bic.w	r2, r2, #4
 8006420:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f003 021f 	and.w	r2, r3, #31
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	2104      	movs	r1, #4
 8006430:	fa01 f202 	lsl.w	r2, r1, r2
 8006434:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643a:	2b00      	cmp	r3, #0
 800643c:	d071      	beq.n	8006522 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006446:	e06c      	b.n	8006522 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2202      	movs	r2, #2
 8006452:	409a      	lsls	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4013      	ands	r3, r2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d02e      	beq.n	80064ba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d029      	beq.n	80064ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 020a 	bic.w	r2, r2, #10
 8006482:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006490:	f003 021f 	and.w	r2, r3, #31
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	2102      	movs	r1, #2
 800649a:	fa01 f202 	lsl.w	r2, r1, r2
 800649e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d038      	beq.n	8006522 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80064b8:	e033      	b.n	8006522 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2208      	movs	r2, #8
 80064c4:	409a      	lsls	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d02a      	beq.n	8006524 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d025      	beq.n	8006524 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 020e 	bic.w	r2, r2, #14
 80064e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ec:	f003 021f 	and.w	r2, r3, #31
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	2101      	movs	r1, #1
 80064f6:	fa01 f202 	lsl.w	r2, r1, r2
 80064fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006522:	bf00      	nop
 8006524:	bf00      	nop
}
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800655a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800656c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006572:	f003 021f 	and.w	r2, r3, #31
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657a:	2101      	movs	r1, #1
 800657c:	fa01 f202 	lsl.w	r2, r1, r2
 8006580:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b10      	cmp	r3, #16
 8006590:	d108      	bne.n	80065a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80065a2:	e007      	b.n	80065b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]
}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	4b16      	ldr	r3, [pc, #88]	@ (8006628 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d802      	bhi.n	80065da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80065d4:	4b15      	ldr	r3, [pc, #84]	@ (800662c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e001      	b.n	80065de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80065da:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80065dc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3b08      	subs	r3, #8
 80065ea:	4a12      	ldr	r2, [pc, #72]	@ (8006634 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80065ec:	fba2 2303 	umull	r2, r3, r2, r3
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	009a      	lsls	r2, r3, #2
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4413      	add	r3, r2
 8006600:	461a      	mov	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a0b      	ldr	r2, [pc, #44]	@ (8006638 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800660a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f003 031f 	and.w	r3, r3, #31
 8006612:	2201      	movs	r2, #1
 8006614:	409a      	lsls	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40020407 	.word	0x40020407
 800662c:	40020800 	.word	0x40020800
 8006630:	40020820 	.word	0x40020820
 8006634:	cccccccd 	.word	0xcccccccd
 8006638:	40020880 	.word	0x40020880

0800663c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	461a      	mov	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a08      	ldr	r2, [pc, #32]	@ (8006680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800665e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3b01      	subs	r3, #1
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2201      	movs	r2, #1
 800666a:	409a      	lsls	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006670:	bf00      	nop
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	1000823f 	.word	0x1000823f
 8006680:	40020940 	.word	0x40020940

08006684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006692:	e15a      	b.n	800694a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	2101      	movs	r1, #1
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	4013      	ands	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 814c 	beq.w	8006944 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d005      	beq.n	80066c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d130      	bne.n	8006726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	2203      	movs	r2, #3
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	43db      	mvns	r3, r3
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4013      	ands	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066fa:	2201      	movs	r2, #1
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43db      	mvns	r3, r3
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4013      	ands	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	091b      	lsrs	r3, r3, #4
 8006710:	f003 0201 	and.w	r2, r3, #1
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b03      	cmp	r3, #3
 8006730:	d017      	beq.n	8006762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	2203      	movs	r2, #3
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43db      	mvns	r3, r3
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4013      	ands	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d123      	bne.n	80067b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	08da      	lsrs	r2, r3, #3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3208      	adds	r2, #8
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	220f      	movs	r2, #15
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43db      	mvns	r3, r3
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4013      	ands	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	08da      	lsrs	r2, r3, #3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3208      	adds	r2, #8
 80067b0:	6939      	ldr	r1, [r7, #16]
 80067b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	2203      	movs	r2, #3
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	43db      	mvns	r3, r3
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4013      	ands	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 0203 	and.w	r2, r3, #3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80a6 	beq.w	8006944 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067f8:	4b5b      	ldr	r3, [pc, #364]	@ (8006968 <HAL_GPIO_Init+0x2e4>)
 80067fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006968 <HAL_GPIO_Init+0x2e4>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6613      	str	r3, [r2, #96]	@ 0x60
 8006804:	4b58      	ldr	r3, [pc, #352]	@ (8006968 <HAL_GPIO_Init+0x2e4>)
 8006806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006810:	4a56      	ldr	r2, [pc, #344]	@ (800696c <HAL_GPIO_Init+0x2e8>)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	089b      	lsrs	r3, r3, #2
 8006816:	3302      	adds	r3, #2
 8006818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800681c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	220f      	movs	r2, #15
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	43db      	mvns	r3, r3
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4013      	ands	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800683a:	d01f      	beq.n	800687c <HAL_GPIO_Init+0x1f8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a4c      	ldr	r2, [pc, #304]	@ (8006970 <HAL_GPIO_Init+0x2ec>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d019      	beq.n	8006878 <HAL_GPIO_Init+0x1f4>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a4b      	ldr	r2, [pc, #300]	@ (8006974 <HAL_GPIO_Init+0x2f0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <HAL_GPIO_Init+0x1f0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a4a      	ldr	r2, [pc, #296]	@ (8006978 <HAL_GPIO_Init+0x2f4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00d      	beq.n	8006870 <HAL_GPIO_Init+0x1ec>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a49      	ldr	r2, [pc, #292]	@ (800697c <HAL_GPIO_Init+0x2f8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d007      	beq.n	800686c <HAL_GPIO_Init+0x1e8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a48      	ldr	r2, [pc, #288]	@ (8006980 <HAL_GPIO_Init+0x2fc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d101      	bne.n	8006868 <HAL_GPIO_Init+0x1e4>
 8006864:	2305      	movs	r3, #5
 8006866:	e00a      	b.n	800687e <HAL_GPIO_Init+0x1fa>
 8006868:	2306      	movs	r3, #6
 800686a:	e008      	b.n	800687e <HAL_GPIO_Init+0x1fa>
 800686c:	2304      	movs	r3, #4
 800686e:	e006      	b.n	800687e <HAL_GPIO_Init+0x1fa>
 8006870:	2303      	movs	r3, #3
 8006872:	e004      	b.n	800687e <HAL_GPIO_Init+0x1fa>
 8006874:	2302      	movs	r3, #2
 8006876:	e002      	b.n	800687e <HAL_GPIO_Init+0x1fa>
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <HAL_GPIO_Init+0x1fa>
 800687c:	2300      	movs	r3, #0
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	f002 0203 	and.w	r2, r2, #3
 8006884:	0092      	lsls	r2, r2, #2
 8006886:	4093      	lsls	r3, r2
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800688e:	4937      	ldr	r1, [pc, #220]	@ (800696c <HAL_GPIO_Init+0x2e8>)
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	089b      	lsrs	r3, r3, #2
 8006894:	3302      	adds	r3, #2
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800689c:	4b39      	ldr	r3, [pc, #228]	@ (8006984 <HAL_GPIO_Init+0x300>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	43db      	mvns	r3, r3
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4013      	ands	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80068c0:	4a30      	ldr	r2, [pc, #192]	@ (8006984 <HAL_GPIO_Init+0x300>)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80068c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006984 <HAL_GPIO_Init+0x300>)
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	43db      	mvns	r3, r3
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4013      	ands	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80068ea:	4a26      	ldr	r2, [pc, #152]	@ (8006984 <HAL_GPIO_Init+0x300>)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80068f0:	4b24      	ldr	r3, [pc, #144]	@ (8006984 <HAL_GPIO_Init+0x300>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4013      	ands	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006914:	4a1b      	ldr	r2, [pc, #108]	@ (8006984 <HAL_GPIO_Init+0x300>)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800691a:	4b1a      	ldr	r3, [pc, #104]	@ (8006984 <HAL_GPIO_Init+0x300>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	43db      	mvns	r3, r3
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4013      	ands	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800693e:	4a11      	ldr	r2, [pc, #68]	@ (8006984 <HAL_GPIO_Init+0x300>)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	3301      	adds	r3, #1
 8006948:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	f47f ae9d 	bne.w	8006694 <HAL_GPIO_Init+0x10>
  }
}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40021000 	.word	0x40021000
 800696c:	40010000 	.word	0x40010000
 8006970:	48000400 	.word	0x48000400
 8006974:	48000800 	.word	0x48000800
 8006978:	48000c00 	.word	0x48000c00
 800697c:	48001000 	.word	0x48001000
 8006980:	48001400 	.word	0x48001400
 8006984:	40010400 	.word	0x40010400

08006988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	807b      	strh	r3, [r7, #2]
 8006994:	4613      	mov	r3, r2
 8006996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006998:	787b      	ldrb	r3, [r7, #1]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800699e:	887a      	ldrh	r2, [r7, #2]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069a4:	e002      	b.n	80069ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069a6:	887a      	ldrh	r2, [r7, #2]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80069c2:	4b08      	ldr	r3, [pc, #32]	@ (80069e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d006      	beq.n	80069dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069ce:	4a05      	ldr	r2, [pc, #20]	@ (80069e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f806 	bl	80069e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40010400 	.word	0x40010400

080069e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e08d      	b.n	8006b2c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fb fe8d 	bl	8002744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2224      	movs	r2, #36	@ 0x24
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0201 	bic.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a74:	609a      	str	r2, [r3, #8]
 8006a76:	e006      	b.n	8006a86 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d108      	bne.n	8006aa0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a9c:	605a      	str	r2, [r3, #4]
 8006a9e:	e007      	b.n	8006ab0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ac2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ad2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69d9      	ldr	r1, [r3, #28]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0201 	orr.w	r2, r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	817b      	strh	r3, [r7, #10]
 8006b46:	460b      	mov	r3, r1
 8006b48:	813b      	strh	r3, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	f040 80f9 	bne.w	8006d4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <HAL_I2C_Mem_Write+0x34>
 8006b62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d105      	bne.n	8006b74 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b6e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0ed      	b.n	8006d50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_I2C_Mem_Write+0x4e>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e0e6      	b.n	8006d50 <HAL_I2C_Mem_Write+0x21c>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b8a:	f7fd fec1 	bl	8004910 <HAL_GetTick>
 8006b8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2319      	movs	r3, #25
 8006b96:	2201      	movs	r2, #1
 8006b98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 fac3 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0d1      	b.n	8006d50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2221      	movs	r2, #33	@ 0x21
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2240      	movs	r2, #64	@ 0x40
 8006bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a3a      	ldr	r2, [r7, #32]
 8006bc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bd4:	88f8      	ldrh	r0, [r7, #6]
 8006bd6:	893a      	ldrh	r2, [r7, #8]
 8006bd8:	8979      	ldrh	r1, [r7, #10]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	4603      	mov	r3, r0
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f9d3 	bl	8006f90 <I2C_RequestMemoryWrite>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0a9      	b.n	8006d50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2bff      	cmp	r3, #255	@ 0xff
 8006c04:	d90e      	bls.n	8006c24 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	22ff      	movs	r2, #255	@ 0xff
 8006c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	8979      	ldrh	r1, [r7, #10]
 8006c14:	2300      	movs	r3, #0
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fc47 	bl	80074b0 <I2C_TransferConfig>
 8006c22:	e00f      	b.n	8006c44 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	8979      	ldrh	r1, [r7, #10]
 8006c36:	2300      	movs	r3, #0
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fc36 	bl	80074b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fac6 	bl	80071da <I2C_WaitOnTXISFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e07b      	b.n	8006d50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d034      	beq.n	8006cfc <HAL_I2C_Mem_Write+0x1c8>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d130      	bne.n	8006cfc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2180      	movs	r1, #128	@ 0x80
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fa3f 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e04d      	b.n	8006d50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2bff      	cmp	r3, #255	@ 0xff
 8006cbc:	d90e      	bls.n	8006cdc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	22ff      	movs	r2, #255	@ 0xff
 8006cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	8979      	ldrh	r1, [r7, #10]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fbeb 	bl	80074b0 <I2C_TransferConfig>
 8006cda:	e00f      	b.n	8006cfc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	8979      	ldrh	r1, [r7, #10]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fbda 	bl	80074b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d19e      	bne.n	8006c44 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 faac 	bl	8007268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e01a      	b.n	8006d50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6859      	ldr	r1, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d58 <HAL_I2C_Mem_Write+0x224>)
 8006d2e:	400b      	ands	r3, r1
 8006d30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	e000      	b.n	8006d50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006d4e:	2302      	movs	r3, #2
  }
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	fe00e800 	.word	0xfe00e800

08006d5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	4608      	mov	r0, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	817b      	strh	r3, [r7, #10]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	813b      	strh	r3, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	f040 80fd 	bne.w	8006f7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_I2C_Mem_Read+0x34>
 8006d8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0f1      	b.n	8006f80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_I2C_Mem_Read+0x4e>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e0ea      	b.n	8006f80 <HAL_I2C_Mem_Read+0x224>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006db2:	f7fd fdad 	bl	8004910 <HAL_GetTick>
 8006db6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2319      	movs	r3, #25
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 f9af 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e0d5      	b.n	8006f80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2222      	movs	r2, #34	@ 0x22
 8006dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2240      	movs	r2, #64	@ 0x40
 8006de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a3a      	ldr	r2, [r7, #32]
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dfc:	88f8      	ldrh	r0, [r7, #6]
 8006dfe:	893a      	ldrh	r2, [r7, #8]
 8006e00:	8979      	ldrh	r1, [r7, #10]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f913 	bl	8007038 <I2C_RequestMemoryRead>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0ad      	b.n	8006f80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2bff      	cmp	r3, #255	@ 0xff
 8006e2c:	d90e      	bls.n	8006e4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	22ff      	movs	r2, #255	@ 0xff
 8006e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	8979      	ldrh	r1, [r7, #10]
 8006e3c:	4b52      	ldr	r3, [pc, #328]	@ (8006f88 <HAL_I2C_Mem_Read+0x22c>)
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fb33 	bl	80074b0 <I2C_TransferConfig>
 8006e4a:	e00f      	b.n	8006e6c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	8979      	ldrh	r1, [r7, #10]
 8006e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f88 <HAL_I2C_Mem_Read+0x22c>)
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fb22 	bl	80074b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e72:	2200      	movs	r2, #0
 8006e74:	2104      	movs	r1, #4
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 f956 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e07c      	b.n	8006f80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d034      	beq.n	8006f2c <HAL_I2C_Mem_Read+0x1d0>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d130      	bne.n	8006f2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2180      	movs	r1, #128	@ 0x80
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f927 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e04d      	b.n	8006f80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2bff      	cmp	r3, #255	@ 0xff
 8006eec:	d90e      	bls.n	8006f0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	22ff      	movs	r2, #255	@ 0xff
 8006ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	8979      	ldrh	r1, [r7, #10]
 8006efc:	2300      	movs	r3, #0
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fad3 	bl	80074b0 <I2C_TransferConfig>
 8006f0a:	e00f      	b.n	8006f2c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	8979      	ldrh	r1, [r7, #10]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fac2 	bl	80074b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d19a      	bne.n	8006e6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f994 	bl	8007268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e01a      	b.n	8006f80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6859      	ldr	r1, [r3, #4]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f8c <HAL_I2C_Mem_Read+0x230>)
 8006f5e:	400b      	ands	r3, r1
 8006f60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e000      	b.n	8006f80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f7e:	2302      	movs	r3, #2
  }
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	80002400 	.word	0x80002400
 8006f8c:	fe00e800 	.word	0xfe00e800

08006f90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	4608      	mov	r0, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	817b      	strh	r3, [r7, #10]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	813b      	strh	r3, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	8979      	ldrh	r1, [r7, #10]
 8006fb0:	4b20      	ldr	r3, [pc, #128]	@ (8007034 <I2C_RequestMemoryWrite+0xa4>)
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fa79 	bl	80074b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	69b9      	ldr	r1, [r7, #24]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f909 	bl	80071da <I2C_WaitOnTXISFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e02c      	b.n	800702c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d105      	bne.n	8006fe4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fd8:	893b      	ldrh	r3, [r7, #8]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fe2:	e015      	b.n	8007010 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006fe4:	893b      	ldrh	r3, [r7, #8]
 8006fe6:	0a1b      	lsrs	r3, r3, #8
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f8ef 	bl	80071da <I2C_WaitOnTXISFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e012      	b.n	800702c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007006:	893b      	ldrh	r3, [r7, #8]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2200      	movs	r2, #0
 8007018:	2180      	movs	r1, #128	@ 0x80
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f884 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	80002000 	.word	0x80002000

08007038 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af02      	add	r7, sp, #8
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	461a      	mov	r2, r3
 8007046:	4603      	mov	r3, r0
 8007048:	817b      	strh	r3, [r7, #10]
 800704a:	460b      	mov	r3, r1
 800704c:	813b      	strh	r3, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	b2da      	uxtb	r2, r3
 8007056:	8979      	ldrh	r1, [r7, #10]
 8007058:	4b20      	ldr	r3, [pc, #128]	@ (80070dc <I2C_RequestMemoryRead+0xa4>)
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	2300      	movs	r3, #0
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fa26 	bl	80074b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	69b9      	ldr	r1, [r7, #24]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f8b6 	bl	80071da <I2C_WaitOnTXISFlagUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e02c      	b.n	80070d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d105      	bne.n	800708a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800707e:	893b      	ldrh	r3, [r7, #8]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	629a      	str	r2, [r3, #40]	@ 0x28
 8007088:	e015      	b.n	80070b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800708a:	893b      	ldrh	r3, [r7, #8]
 800708c:	0a1b      	lsrs	r3, r3, #8
 800708e:	b29b      	uxth	r3, r3
 8007090:	b2da      	uxtb	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	69b9      	ldr	r1, [r7, #24]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f89c 	bl	80071da <I2C_WaitOnTXISFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e012      	b.n	80070d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070ac:	893b      	ldrh	r3, [r7, #8]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2200      	movs	r2, #0
 80070be:	2140      	movs	r1, #64	@ 0x40
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f831 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	80002000 	.word	0x80002000

080070e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d103      	bne.n	80070fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b01      	cmp	r3, #1
 800710a:	d007      	beq.n	800711c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0201 	orr.w	r2, r2, #1
 800711a:	619a      	str	r2, [r3, #24]
  }
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	4613      	mov	r3, r2
 8007136:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007138:	e03b      	b.n	80071b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f8d6 	bl	80072f0 <I2C_IsErrorOccurred>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e041      	b.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007154:	d02d      	beq.n	80071b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007156:	f7fd fbdb 	bl	8004910 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d122      	bne.n	80071b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4013      	ands	r3, r2
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	429a      	cmp	r2, r3
 800717a:	bf0c      	ite	eq
 800717c:	2301      	moveq	r3, #1
 800717e:	2300      	movne	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	429a      	cmp	r2, r3
 8007188:	d113      	bne.n	80071b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718e:	f043 0220 	orr.w	r2, r3, #32
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e00f      	b.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d0b4      	beq.n	800713a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071e6:	e033      	b.n	8007250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f87f 	bl	80072f0 <I2C_IsErrorOccurred>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e031      	b.n	8007260 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007202:	d025      	beq.n	8007250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007204:	f7fd fb84 	bl	8004910 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	429a      	cmp	r2, r3
 8007212:	d302      	bcc.n	800721a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d11a      	bne.n	8007250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b02      	cmp	r3, #2
 8007226:	d013      	beq.n	8007250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722c:	f043 0220 	orr.w	r2, r3, #32
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e007      	b.n	8007260 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b02      	cmp	r3, #2
 800725c:	d1c4      	bne.n	80071e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007274:	e02f      	b.n	80072d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f838 	bl	80072f0 <I2C_IsErrorOccurred>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e02d      	b.n	80072e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728a:	f7fd fb41 	bl	8004910 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	d302      	bcc.n	80072a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d11a      	bne.n	80072d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d013      	beq.n	80072d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e007      	b.n	80072e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d1c8      	bne.n	8007276 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	@ 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	d068      	beq.n	80073ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2210      	movs	r2, #16
 8007322:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007324:	e049      	b.n	80073ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800732c:	d045      	beq.n	80073ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800732e:	f7fd faef 	bl	8004910 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <I2C_IsErrorOccurred+0x54>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d13a      	bne.n	80073ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800734e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007356:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007366:	d121      	bne.n	80073ac <I2C_IsErrorOccurred+0xbc>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800736e:	d01d      	beq.n	80073ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007370:	7cfb      	ldrb	r3, [r7, #19]
 8007372:	2b20      	cmp	r3, #32
 8007374:	d01a      	beq.n	80073ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007384:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007386:	f7fd fac3 	bl	8004910 <HAL_GetTick>
 800738a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800738c:	e00e      	b.n	80073ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800738e:	f7fd fabf 	bl	8004910 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b19      	cmp	r3, #25
 800739a:	d907      	bls.n	80073ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	f043 0320 	orr.w	r3, r3, #32
 80073a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80073aa:	e006      	b.n	80073ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d1e9      	bne.n	800738e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d003      	beq.n	80073d0 <I2C_IsErrorOccurred+0xe0>
 80073c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0aa      	beq.n	8007326 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80073d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d103      	bne.n	80073e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2220      	movs	r2, #32
 80073de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	f043 0304 	orr.w	r3, r3, #4
 80073e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	f043 0301 	orr.w	r3, r3, #1
 8007406:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007410:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	f043 0308 	orr.w	r3, r3, #8
 8007428:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007432:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	f043 0302 	orr.w	r3, r3, #2
 800744a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007454:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800745c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01c      	beq.n	800749e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff fe3b 	bl	80070e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6859      	ldr	r1, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <I2C_IsErrorOccurred+0x1bc>)
 8007476:	400b      	ands	r3, r1
 8007478:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	431a      	orrs	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800749e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3728      	adds	r7, #40	@ 0x28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	fe00e800 	.word	0xfe00e800

080074b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	817b      	strh	r3, [r7, #10]
 80074be:	4613      	mov	r3, r2
 80074c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074c2:	897b      	ldrh	r3, [r7, #10]
 80074c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074c8:	7a7b      	ldrb	r3, [r7, #9]
 80074ca:	041b      	lsls	r3, r3, #16
 80074cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	4313      	orrs	r3, r2
 80074da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	0d5b      	lsrs	r3, r3, #21
 80074ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80074ee:	4b08      	ldr	r3, [pc, #32]	@ (8007510 <I2C_TransferConfig+0x60>)
 80074f0:	430b      	orrs	r3, r1
 80074f2:	43db      	mvns	r3, r3
 80074f4:	ea02 0103 	and.w	r1, r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007502:	bf00      	nop
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	03ff63ff 	.word	0x03ff63ff

08007514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b20      	cmp	r3, #32
 8007528:	d138      	bne.n	800759c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007534:	2302      	movs	r3, #2
 8007536:	e032      	b.n	800759e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2224      	movs	r2, #36	@ 0x24
 8007544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0201 	bic.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6819      	ldr	r1, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	e000      	b.n	800759e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800759c:	2302      	movs	r3, #2
  }
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d139      	bne.n	8007634 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e033      	b.n	8007636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2224      	movs	r2, #36	@ 0x24
 80075da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80075fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	e000      	b.n	8007636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007634:	2302      	movs	r3, #2
  }
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0c0      	b.n	80077d6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7fd f88f 	bl	800478c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2203      	movs	r2, #3
 8007672:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f004 fef4 	bl	800c468 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
 8007684:	e03e      	b.n	8007704 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007686:	7bfa      	ldrb	r2, [r7, #15]
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	440b      	add	r3, r1
 8007694:	3311      	adds	r3, #17
 8007696:	2201      	movs	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800769a:	7bfa      	ldrb	r2, [r7, #15]
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	440b      	add	r3, r1
 80076a8:	3310      	adds	r3, #16
 80076aa:	7bfa      	ldrb	r2, [r7, #15]
 80076ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80076ae:	7bfa      	ldrb	r2, [r7, #15]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	440b      	add	r3, r1
 80076bc:	3313      	adds	r3, #19
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80076c2:	7bfa      	ldrb	r2, [r7, #15]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	440b      	add	r3, r1
 80076d0:	3320      	adds	r3, #32
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80076d6:	7bfa      	ldrb	r2, [r7, #15]
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	440b      	add	r3, r1
 80076e4:	3324      	adds	r3, #36	@ 0x24
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	440b      	add	r3, r1
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	3301      	adds	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	791b      	ldrb	r3, [r3, #4]
 8007708:	7bfa      	ldrb	r2, [r7, #15]
 800770a:	429a      	cmp	r2, r3
 800770c:	d3bb      	bcc.n	8007686 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
 8007712:	e044      	b.n	800779e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007714:	7bfa      	ldrb	r2, [r7, #15]
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	440b      	add	r3, r1
 8007722:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007726:	2200      	movs	r2, #0
 8007728:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800772a:	7bfa      	ldrb	r2, [r7, #15]
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	440b      	add	r3, r1
 8007738:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800773c:	7bfa      	ldrb	r2, [r7, #15]
 800773e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007740:	7bfa      	ldrb	r2, [r7, #15]
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	440b      	add	r3, r1
 800774e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007756:	7bfa      	ldrb	r2, [r7, #15]
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	00db      	lsls	r3, r3, #3
 8007762:	440b      	add	r3, r1
 8007764:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800776c:	7bfa      	ldrb	r2, [r7, #15]
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	440b      	add	r3, r1
 800777a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007782:	7bfa      	ldrb	r2, [r7, #15]
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	440b      	add	r3, r1
 8007790:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	3301      	adds	r3, #1
 800779c:	73fb      	strb	r3, [r7, #15]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	791b      	ldrb	r3, [r3, #4]
 80077a2:	7bfa      	ldrb	r2, [r7, #15]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d3b5      	bcc.n	8007714 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3304      	adds	r3, #4
 80077b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80077b4:	f004 fe73 	bl	800c49e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7a9b      	ldrb	r3, [r3, #10]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d102      	bne.n	80077d4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f805 	bl	80077de <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007802:	b29b      	uxth	r3, r3
 8007804:	f043 0301 	orr.w	r3, r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007816:	b29b      	uxth	r3, r3
 8007818:	f043 0302 	orr.w	r3, r3, #2
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
	...

08007834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d141      	bne.n	80078c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007842:	4b4b      	ldr	r3, [pc, #300]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800784a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800784e:	d131      	bne.n	80078b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007850:	4b47      	ldr	r3, [pc, #284]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007856:	4a46      	ldr	r2, [pc, #280]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800785c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007860:	4b43      	ldr	r3, [pc, #268]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007868:	4a41      	ldr	r2, [pc, #260]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800786a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800786e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007870:	4b40      	ldr	r3, [pc, #256]	@ (8007974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2232      	movs	r2, #50	@ 0x32
 8007876:	fb02 f303 	mul.w	r3, r2, r3
 800787a:	4a3f      	ldr	r2, [pc, #252]	@ (8007978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	0c9b      	lsrs	r3, r3, #18
 8007882:	3301      	adds	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007886:	e002      	b.n	800788e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3b01      	subs	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800788e:	4b38      	ldr	r3, [pc, #224]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789a:	d102      	bne.n	80078a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f2      	bne.n	8007888 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078a2:	4b33      	ldr	r3, [pc, #204]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ae:	d158      	bne.n	8007962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e057      	b.n	8007964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80078c4:	e04d      	b.n	8007962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078cc:	d141      	bne.n	8007952 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078ce:	4b28      	ldr	r3, [pc, #160]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80078d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078da:	d131      	bne.n	8007940 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078dc:	4b24      	ldr	r3, [pc, #144]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e2:	4a23      	ldr	r2, [pc, #140]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078ec:	4b20      	ldr	r3, [pc, #128]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80078f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2232      	movs	r2, #50	@ 0x32
 8007902:	fb02 f303 	mul.w	r3, r2, r3
 8007906:	4a1c      	ldr	r2, [pc, #112]	@ (8007978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007908:	fba2 2303 	umull	r2, r3, r2, r3
 800790c:	0c9b      	lsrs	r3, r3, #18
 800790e:	3301      	adds	r3, #1
 8007910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007912:	e002      	b.n	800791a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3b01      	subs	r3, #1
 8007918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800791a:	4b15      	ldr	r3, [pc, #84]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007926:	d102      	bne.n	800792e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f2      	bne.n	8007914 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800792e:	4b10      	ldr	r3, [pc, #64]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800793a:	d112      	bne.n	8007962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e011      	b.n	8007964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007940:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007946:	4a0a      	ldr	r2, [pc, #40]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800794c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007950:	e007      	b.n	8007962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007952:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800795a:	4a05      	ldr	r2, [pc, #20]	@ (8007970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800795c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007960:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	40007000 	.word	0x40007000
 8007974:	20000010 	.word	0x20000010
 8007978:	431bde83 	.word	0x431bde83

0800797c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007980:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	4a04      	ldr	r2, [pc, #16]	@ (8007998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800798a:	6093      	str	r3, [r2, #8]
}
 800798c:	bf00      	nop
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	40007000 	.word	0x40007000

0800799c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e2fe      	b.n	8007fac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d075      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079ba:	4b97      	ldr	r3, [pc, #604]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 030c 	and.w	r3, r3, #12
 80079c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079c4:	4b94      	ldr	r3, [pc, #592]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f003 0303 	and.w	r3, r3, #3
 80079cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	d102      	bne.n	80079da <HAL_RCC_OscConfig+0x3e>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d002      	beq.n	80079e0 <HAL_RCC_OscConfig+0x44>
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d10b      	bne.n	80079f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e0:	4b8d      	ldr	r3, [pc, #564]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d05b      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x108>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d157      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e2d9      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a00:	d106      	bne.n	8007a10 <HAL_RCC_OscConfig+0x74>
 8007a02:	4b85      	ldr	r3, [pc, #532]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a84      	ldr	r2, [pc, #528]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e01d      	b.n	8007a4c <HAL_RCC_OscConfig+0xb0>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a18:	d10c      	bne.n	8007a34 <HAL_RCC_OscConfig+0x98>
 8007a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	4b7c      	ldr	r3, [pc, #496]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a7b      	ldr	r2, [pc, #492]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	e00b      	b.n	8007a4c <HAL_RCC_OscConfig+0xb0>
 8007a34:	4b78      	ldr	r3, [pc, #480]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a77      	ldr	r2, [pc, #476]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	4b75      	ldr	r3, [pc, #468]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a74      	ldr	r2, [pc, #464]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d013      	beq.n	8007a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7fc ff5c 	bl	8004910 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a5c:	f7fc ff58 	bl	8004910 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b64      	cmp	r3, #100	@ 0x64
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e29e      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f0      	beq.n	8007a5c <HAL_RCC_OscConfig+0xc0>
 8007a7a:	e014      	b.n	8007aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7fc ff48 	bl	8004910 <HAL_GetTick>
 8007a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a84:	f7fc ff44 	bl	8004910 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b64      	cmp	r3, #100	@ 0x64
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e28a      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a96:	4b60      	ldr	r3, [pc, #384]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f0      	bne.n	8007a84 <HAL_RCC_OscConfig+0xe8>
 8007aa2:	e000      	b.n	8007aa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d075      	beq.n	8007b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ab2:	4b59      	ldr	r3, [pc, #356]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 030c 	and.w	r3, r3, #12
 8007aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007abc:	4b56      	ldr	r3, [pc, #344]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b0c      	cmp	r3, #12
 8007aca:	d102      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x136>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d002      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x13c>
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d11f      	bne.n	8007b18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_RCC_OscConfig+0x154>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e25d      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007af0:	4b49      	ldr	r3, [pc, #292]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	061b      	lsls	r3, r3, #24
 8007afe:	4946      	ldr	r1, [pc, #280]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b04:	4b45      	ldr	r3, [pc, #276]	@ (8007c1c <HAL_RCC_OscConfig+0x280>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fc feb5 	bl	8004878 <HAL_InitTick>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d043      	beq.n	8007b9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e249      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d023      	beq.n	8007b68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b20:	4b3d      	ldr	r3, [pc, #244]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a3c      	ldr	r2, [pc, #240]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2c:	f7fc fef0 	bl	8004910 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b34:	f7fc feec 	bl	8004910 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e232      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b46:	4b34      	ldr	r3, [pc, #208]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f0      	beq.n	8007b34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b52:	4b31      	ldr	r3, [pc, #196]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	061b      	lsls	r3, r3, #24
 8007b60:	492d      	ldr	r1, [pc, #180]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	604b      	str	r3, [r1, #4]
 8007b66:	e01a      	b.n	8007b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b68:	4b2b      	ldr	r3, [pc, #172]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fc fecc 	bl	8004910 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b7c:	f7fc fec8 	bl	8004910 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e20e      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b8e:	4b22      	ldr	r3, [pc, #136]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f0      	bne.n	8007b7c <HAL_RCC_OscConfig+0x1e0>
 8007b9a:	e000      	b.n	8007b9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0308 	and.w	r3, r3, #8
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d041      	beq.n	8007c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01c      	beq.n	8007bec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bb2:	4b19      	ldr	r3, [pc, #100]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bb8:	4a17      	ldr	r2, [pc, #92]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007bba:	f043 0301 	orr.w	r3, r3, #1
 8007bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc2:	f7fc fea5 	bl	8004910 <HAL_GetTick>
 8007bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bc8:	e008      	b.n	8007bdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bca:	f7fc fea1 	bl	8004910 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e1e7      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0ef      	beq.n	8007bca <HAL_RCC_OscConfig+0x22e>
 8007bea:	e020      	b.n	8007c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bec:	4b0a      	ldr	r3, [pc, #40]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bf2:	4a09      	ldr	r2, [pc, #36]	@ (8007c18 <HAL_RCC_OscConfig+0x27c>)
 8007bf4:	f023 0301 	bic.w	r3, r3, #1
 8007bf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bfc:	f7fc fe88 	bl	8004910 <HAL_GetTick>
 8007c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c02:	e00d      	b.n	8007c20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c04:	f7fc fe84 	bl	8004910 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d906      	bls.n	8007c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e1ca      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
 8007c16:	bf00      	nop
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c20:	4b8c      	ldr	r3, [pc, #560]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1ea      	bne.n	8007c04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 80a6 	beq.w	8007d88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c40:	4b84      	ldr	r3, [pc, #528]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <HAL_RCC_OscConfig+0x2b4>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e000      	b.n	8007c52 <HAL_RCC_OscConfig+0x2b6>
 8007c50:	2300      	movs	r3, #0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00d      	beq.n	8007c72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c56:	4b7f      	ldr	r3, [pc, #508]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c62:	4b7c      	ldr	r3, [pc, #496]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c72:	4b79      	ldr	r3, [pc, #484]	@ (8007e58 <HAL_RCC_OscConfig+0x4bc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d118      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c7e:	4b76      	ldr	r3, [pc, #472]	@ (8007e58 <HAL_RCC_OscConfig+0x4bc>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a75      	ldr	r2, [pc, #468]	@ (8007e58 <HAL_RCC_OscConfig+0x4bc>)
 8007c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c8a:	f7fc fe41 	bl	8004910 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c92:	f7fc fe3d 	bl	8004910 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e183      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8007e58 <HAL_RCC_OscConfig+0x4bc>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f0      	beq.n	8007c92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d108      	bne.n	8007cca <HAL_RCC_OscConfig+0x32e>
 8007cb8:	4b66      	ldr	r3, [pc, #408]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cbe:	4a65      	ldr	r2, [pc, #404]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007cc0:	f043 0301 	orr.w	r3, r3, #1
 8007cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cc8:	e024      	b.n	8007d14 <HAL_RCC_OscConfig+0x378>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	d110      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x358>
 8007cd2:	4b60      	ldr	r3, [pc, #384]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd8:	4a5e      	ldr	r2, [pc, #376]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007cda:	f043 0304 	orr.w	r3, r3, #4
 8007cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cf2:	e00f      	b.n	8007d14 <HAL_RCC_OscConfig+0x378>
 8007cf4:	4b57      	ldr	r3, [pc, #348]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cfa:	4a56      	ldr	r2, [pc, #344]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d04:	4b53      	ldr	r3, [pc, #332]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d0a:	4a52      	ldr	r2, [pc, #328]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007d0c:	f023 0304 	bic.w	r3, r3, #4
 8007d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d016      	beq.n	8007d4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1c:	f7fc fdf8 	bl	8004910 <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d22:	e00a      	b.n	8007d3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d24:	f7fc fdf4 	bl	8004910 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e138      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d3a:	4b46      	ldr	r3, [pc, #280]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0ed      	beq.n	8007d24 <HAL_RCC_OscConfig+0x388>
 8007d48:	e015      	b.n	8007d76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d4a:	f7fc fde1 	bl	8004910 <HAL_GetTick>
 8007d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d50:	e00a      	b.n	8007d68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d52:	f7fc fddd 	bl	8004910 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e121      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d68:	4b3a      	ldr	r3, [pc, #232]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1ed      	bne.n	8007d52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d76:	7ffb      	ldrb	r3, [r7, #31]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d105      	bne.n	8007d88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d7c:	4b35      	ldr	r3, [pc, #212]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d80:	4a34      	ldr	r2, [pc, #208]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d03c      	beq.n	8007e0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01c      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007da2:	4a2c      	ldr	r2, [pc, #176]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007da4:	f043 0301 	orr.w	r3, r3, #1
 8007da8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dac:	f7fc fdb0 	bl	8004910 <HAL_GetTick>
 8007db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007db4:	f7fc fdac 	bl	8004910 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e0f2      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dc6:	4b23      	ldr	r3, [pc, #140]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0ef      	beq.n	8007db4 <HAL_RCC_OscConfig+0x418>
 8007dd4:	e01b      	b.n	8007e0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007dde:	f023 0301 	bic.w	r3, r3, #1
 8007de2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de6:	f7fc fd93 	bl	8004910 <HAL_GetTick>
 8007dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dec:	e008      	b.n	8007e00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dee:	f7fc fd8f 	bl	8004910 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e0d5      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e00:	4b14      	ldr	r3, [pc, #80]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1ef      	bne.n	8007dee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 80c9 	beq.w	8007faa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e18:	4b0e      	ldr	r3, [pc, #56]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 030c 	and.w	r3, r3, #12
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	f000 8083 	beq.w	8007f2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d15e      	bne.n	8007eec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e2e:	4b09      	ldr	r3, [pc, #36]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a08      	ldr	r2, [pc, #32]	@ (8007e54 <HAL_RCC_OscConfig+0x4b8>)
 8007e34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3a:	f7fc fd69 	bl	8004910 <HAL_GetTick>
 8007e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e40:	e00c      	b.n	8007e5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e42:	f7fc fd65 	bl	8004910 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d905      	bls.n	8007e5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e0ab      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
 8007e54:	40021000 	.word	0x40021000
 8007e58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e5c:	4b55      	ldr	r3, [pc, #340]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1ec      	bne.n	8007e42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e68:	4b52      	ldr	r3, [pc, #328]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	4b52      	ldr	r3, [pc, #328]	@ (8007fb8 <HAL_RCC_OscConfig+0x61c>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6a11      	ldr	r1, [r2, #32]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e78:	3a01      	subs	r2, #1
 8007e7a:	0112      	lsls	r2, r2, #4
 8007e7c:	4311      	orrs	r1, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007e82:	0212      	lsls	r2, r2, #8
 8007e84:	4311      	orrs	r1, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e8a:	0852      	lsrs	r2, r2, #1
 8007e8c:	3a01      	subs	r2, #1
 8007e8e:	0552      	lsls	r2, r2, #21
 8007e90:	4311      	orrs	r1, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e96:	0852      	lsrs	r2, r2, #1
 8007e98:	3a01      	subs	r2, #1
 8007e9a:	0652      	lsls	r2, r2, #25
 8007e9c:	4311      	orrs	r1, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007ea2:	06d2      	lsls	r2, r2, #27
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	4943      	ldr	r1, [pc, #268]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007eac:	4b41      	ldr	r3, [pc, #260]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a40      	ldr	r2, [pc, #256]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ec2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec4:	f7fc fd24 	bl	8004910 <HAL_GetTick>
 8007ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eca:	e008      	b.n	8007ede <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ecc:	f7fc fd20 	bl	8004910 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e066      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ede:	4b35      	ldr	r3, [pc, #212]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0f0      	beq.n	8007ecc <HAL_RCC_OscConfig+0x530>
 8007eea:	e05e      	b.n	8007faa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eec:	4b31      	ldr	r3, [pc, #196]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a30      	ldr	r2, [pc, #192]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef8:	f7fc fd0a 	bl	8004910 <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f00:	f7fc fd06 	bl	8004910 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e04c      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f12:	4b28      	ldr	r3, [pc, #160]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f0      	bne.n	8007f00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007f1e:	4b25      	ldr	r3, [pc, #148]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	4924      	ldr	r1, [pc, #144]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007f24:	4b25      	ldr	r3, [pc, #148]	@ (8007fbc <HAL_RCC_OscConfig+0x620>)
 8007f26:	4013      	ands	r3, r2
 8007f28:	60cb      	str	r3, [r1, #12]
 8007f2a:	e03e      	b.n	8007faa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e039      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007f38:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb4 <HAL_RCC_OscConfig+0x618>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f003 0203 	and.w	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d12c      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f56:	3b01      	subs	r3, #1
 8007f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d123      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d11b      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d113      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f88:	085b      	lsrs	r3, r3, #1
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d109      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d001      	beq.n	8007faa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	40021000 	.word	0x40021000
 8007fb8:	019f800c 	.word	0x019f800c
 8007fbc:	feeefffc 	.word	0xfeeefffc

08007fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e11e      	b.n	8008216 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fd8:	4b91      	ldr	r3, [pc, #580]	@ (8008220 <HAL_RCC_ClockConfig+0x260>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d910      	bls.n	8008008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8008220 <HAL_RCC_ClockConfig+0x260>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f023 020f 	bic.w	r2, r3, #15
 8007fee:	498c      	ldr	r1, [pc, #560]	@ (8008220 <HAL_RCC_ClockConfig+0x260>)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff6:	4b8a      	ldr	r3, [pc, #552]	@ (8008220 <HAL_RCC_ClockConfig+0x260>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 030f 	and.w	r3, r3, #15
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d001      	beq.n	8008008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e106      	b.n	8008216 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d073      	beq.n	80080fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b03      	cmp	r3, #3
 800801a:	d129      	bne.n	8008070 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800801c:	4b81      	ldr	r3, [pc, #516]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e0f4      	b.n	8008216 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800802c:	f000 f99c 	bl	8008368 <RCC_GetSysClockFreqFromPLLSource>
 8008030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4a7c      	ldr	r2, [pc, #496]	@ (8008228 <HAL_RCC_ClockConfig+0x268>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d93f      	bls.n	80080ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800803a:	4b7a      	ldr	r3, [pc, #488]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d009      	beq.n	800805a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800804e:	2b00      	cmp	r3, #0
 8008050:	d033      	beq.n	80080ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008056:	2b00      	cmp	r3, #0
 8008058:	d12f      	bne.n	80080ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800805a:	4b72      	ldr	r3, [pc, #456]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008062:	4a70      	ldr	r2, [pc, #448]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 8008064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008068:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800806a:	2380      	movs	r3, #128	@ 0x80
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	e024      	b.n	80080ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d107      	bne.n	8008088 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008078:	4b6a      	ldr	r3, [pc, #424]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e0c6      	b.n	8008216 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008088:	4b66      	ldr	r3, [pc, #408]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e0be      	b.n	8008216 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008098:	f000 f8ce 	bl	8008238 <HAL_RCC_GetSysClockFreq>
 800809c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	4a61      	ldr	r2, [pc, #388]	@ (8008228 <HAL_RCC_ClockConfig+0x268>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d909      	bls.n	80080ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80080a6:	4b5f      	ldr	r3, [pc, #380]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ae:	4a5d      	ldr	r2, [pc, #372]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80080b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80080b6:	2380      	movs	r3, #128	@ 0x80
 80080b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080ba:	4b5a      	ldr	r3, [pc, #360]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f023 0203 	bic.w	r2, r3, #3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4957      	ldr	r1, [pc, #348]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080cc:	f7fc fc20 	bl	8004910 <HAL_GetTick>
 80080d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080d2:	e00a      	b.n	80080ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d4:	f7fc fc1c 	bl	8004910 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e095      	b.n	8008216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ea:	4b4e      	ldr	r3, [pc, #312]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 020c 	and.w	r2, r3, #12
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d1eb      	bne.n	80080d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d023      	beq.n	8008150 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008114:	4b43      	ldr	r3, [pc, #268]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	4a42      	ldr	r2, [pc, #264]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800811a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800811e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800812c:	4b3d      	ldr	r3, [pc, #244]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008134:	4a3b      	ldr	r2, [pc, #236]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 8008136:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800813a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800813c:	4b39      	ldr	r3, [pc, #228]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	4936      	ldr	r1, [pc, #216]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800814a:	4313      	orrs	r3, r2
 800814c:	608b      	str	r3, [r1, #8]
 800814e:	e008      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2b80      	cmp	r3, #128	@ 0x80
 8008154:	d105      	bne.n	8008162 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008156:	4b33      	ldr	r3, [pc, #204]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	4a32      	ldr	r2, [pc, #200]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 800815c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008160:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008162:	4b2f      	ldr	r3, [pc, #188]	@ (8008220 <HAL_RCC_ClockConfig+0x260>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d21d      	bcs.n	80081ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008170:	4b2b      	ldr	r3, [pc, #172]	@ (8008220 <HAL_RCC_ClockConfig+0x260>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f023 020f 	bic.w	r2, r3, #15
 8008178:	4929      	ldr	r1, [pc, #164]	@ (8008220 <HAL_RCC_ClockConfig+0x260>)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	4313      	orrs	r3, r2
 800817e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008180:	f7fc fbc6 	bl	8004910 <HAL_GetTick>
 8008184:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008186:	e00a      	b.n	800819e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008188:	f7fc fbc2 	bl	8004910 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008196:	4293      	cmp	r3, r2
 8008198:	d901      	bls.n	800819e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e03b      	b.n	8008216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800819e:	4b20      	ldr	r3, [pc, #128]	@ (8008220 <HAL_RCC_ClockConfig+0x260>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d1ed      	bne.n	8008188 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d008      	beq.n	80081ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4917      	ldr	r1, [pc, #92]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0308 	and.w	r3, r3, #8
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081d6:	4b13      	ldr	r3, [pc, #76]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	490f      	ldr	r1, [pc, #60]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081ea:	f000 f825 	bl	8008238 <HAL_RCC_GetSysClockFreq>
 80081ee:	4602      	mov	r2, r0
 80081f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <HAL_RCC_ClockConfig+0x264>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	091b      	lsrs	r3, r3, #4
 80081f6:	f003 030f 	and.w	r3, r3, #15
 80081fa:	490c      	ldr	r1, [pc, #48]	@ (800822c <HAL_RCC_ClockConfig+0x26c>)
 80081fc:	5ccb      	ldrb	r3, [r1, r3]
 80081fe:	f003 031f 	and.w	r3, r3, #31
 8008202:	fa22 f303 	lsr.w	r3, r2, r3
 8008206:	4a0a      	ldr	r2, [pc, #40]	@ (8008230 <HAL_RCC_ClockConfig+0x270>)
 8008208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800820a:	4b0a      	ldr	r3, [pc, #40]	@ (8008234 <HAL_RCC_ClockConfig+0x274>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f7fc fb32 	bl	8004878 <HAL_InitTick>
 8008214:	4603      	mov	r3, r0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40022000 	.word	0x40022000
 8008224:	40021000 	.word	0x40021000
 8008228:	04c4b400 	.word	0x04c4b400
 800822c:	08013000 	.word	0x08013000
 8008230:	20000010 	.word	0x20000010
 8008234:	20000014 	.word	0x20000014

08008238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800823e:	4b2c      	ldr	r3, [pc, #176]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 030c 	and.w	r3, r3, #12
 8008246:	2b04      	cmp	r3, #4
 8008248:	d102      	bne.n	8008250 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800824a:	4b2a      	ldr	r3, [pc, #168]	@ (80082f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	e047      	b.n	80082e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008250:	4b27      	ldr	r3, [pc, #156]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 030c 	and.w	r3, r3, #12
 8008258:	2b08      	cmp	r3, #8
 800825a:	d102      	bne.n	8008262 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800825c:	4b25      	ldr	r3, [pc, #148]	@ (80082f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	e03e      	b.n	80082e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008262:	4b23      	ldr	r3, [pc, #140]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 030c 	and.w	r3, r3, #12
 800826a:	2b0c      	cmp	r3, #12
 800826c:	d136      	bne.n	80082dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800826e:	4b20      	ldr	r3, [pc, #128]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008278:	4b1d      	ldr	r3, [pc, #116]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	091b      	lsrs	r3, r3, #4
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	3301      	adds	r3, #1
 8008284:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b03      	cmp	r3, #3
 800828a:	d10c      	bne.n	80082a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800828c:	4a19      	ldr	r2, [pc, #100]	@ (80082f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	4a16      	ldr	r2, [pc, #88]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008296:	68d2      	ldr	r2, [r2, #12]
 8008298:	0a12      	lsrs	r2, r2, #8
 800829a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800829e:	fb02 f303 	mul.w	r3, r2, r3
 80082a2:	617b      	str	r3, [r7, #20]
      break;
 80082a4:	e00c      	b.n	80082c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082a6:	4a13      	ldr	r2, [pc, #76]	@ (80082f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ae:	4a10      	ldr	r2, [pc, #64]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082b0:	68d2      	ldr	r2, [r2, #12]
 80082b2:	0a12      	lsrs	r2, r2, #8
 80082b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
 80082bc:	617b      	str	r3, [r7, #20]
      break;
 80082be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082c0:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	0e5b      	lsrs	r3, r3, #25
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	3301      	adds	r3, #1
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d8:	613b      	str	r3, [r7, #16]
 80082da:	e001      	b.n	80082e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80082e0:	693b      	ldr	r3, [r7, #16]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40021000 	.word	0x40021000
 80082f4:	00f42400 	.word	0x00f42400

080082f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082fc:	4b03      	ldr	r3, [pc, #12]	@ (800830c <HAL_RCC_GetHCLKFreq+0x14>)
 80082fe:	681b      	ldr	r3, [r3, #0]
}
 8008300:	4618      	mov	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	20000010 	.word	0x20000010

08008310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008314:	f7ff fff0 	bl	80082f8 <HAL_RCC_GetHCLKFreq>
 8008318:	4602      	mov	r2, r0
 800831a:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	4904      	ldr	r1, [pc, #16]	@ (8008338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008326:	5ccb      	ldrb	r3, [r1, r3]
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008330:	4618      	mov	r0, r3
 8008332:	bd80      	pop	{r7, pc}
 8008334:	40021000 	.word	0x40021000
 8008338:	08013010 	.word	0x08013010

0800833c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008340:	f7ff ffda 	bl	80082f8 <HAL_RCC_GetHCLKFreq>
 8008344:	4602      	mov	r2, r0
 8008346:	4b06      	ldr	r3, [pc, #24]	@ (8008360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	0adb      	lsrs	r3, r3, #11
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	4904      	ldr	r1, [pc, #16]	@ (8008364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008352:	5ccb      	ldrb	r3, [r1, r3]
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800835c:	4618      	mov	r0, r3
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40021000 	.word	0x40021000
 8008364:	08013010 	.word	0x08013010

08008368 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800836e:	4b1e      	ldr	r3, [pc, #120]	@ (80083e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008378:	4b1b      	ldr	r3, [pc, #108]	@ (80083e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	091b      	lsrs	r3, r3, #4
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d10c      	bne.n	80083a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800838c:	4a17      	ldr	r2, [pc, #92]	@ (80083ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	fbb2 f3f3 	udiv	r3, r2, r3
 8008394:	4a14      	ldr	r2, [pc, #80]	@ (80083e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008396:	68d2      	ldr	r2, [r2, #12]
 8008398:	0a12      	lsrs	r2, r2, #8
 800839a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800839e:	fb02 f303 	mul.w	r3, r2, r3
 80083a2:	617b      	str	r3, [r7, #20]
    break;
 80083a4:	e00c      	b.n	80083c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083a6:	4a11      	ldr	r2, [pc, #68]	@ (80083ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ae:	4a0e      	ldr	r2, [pc, #56]	@ (80083e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083b0:	68d2      	ldr	r2, [r2, #12]
 80083b2:	0a12      	lsrs	r2, r2, #8
 80083b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083b8:	fb02 f303 	mul.w	r3, r2, r3
 80083bc:	617b      	str	r3, [r7, #20]
    break;
 80083be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083c0:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	0e5b      	lsrs	r3, r3, #25
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	3301      	adds	r3, #1
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80083da:	687b      	ldr	r3, [r7, #4]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	40021000 	.word	0x40021000
 80083ec:	00f42400 	.word	0x00f42400

080083f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083f8:	2300      	movs	r3, #0
 80083fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083fc:	2300      	movs	r3, #0
 80083fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 8098 	beq.w	800853e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800840e:	2300      	movs	r3, #0
 8008410:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008412:	4b43      	ldr	r3, [pc, #268]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10d      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800841e:	4b40      	ldr	r3, [pc, #256]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008422:	4a3f      	ldr	r2, [pc, #252]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008428:	6593      	str	r3, [r2, #88]	@ 0x58
 800842a:	4b3d      	ldr	r3, [pc, #244]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800842c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008432:	60bb      	str	r3, [r7, #8]
 8008434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008436:	2301      	movs	r3, #1
 8008438:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800843a:	4b3a      	ldr	r3, [pc, #232]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a39      	ldr	r2, [pc, #228]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008446:	f7fc fa63 	bl	8004910 <HAL_GetTick>
 800844a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800844c:	e009      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800844e:	f7fc fa5f 	bl	8004910 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d902      	bls.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	74fb      	strb	r3, [r7, #19]
        break;
 8008460:	e005      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008462:	4b30      	ldr	r3, [pc, #192]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0ef      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800846e:	7cfb      	ldrb	r3, [r7, #19]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d159      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008474:	4b2a      	ldr	r3, [pc, #168]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800847a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800847e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01e      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	429a      	cmp	r2, r3
 800848e:	d019      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008490:	4b23      	ldr	r3, [pc, #140]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800849a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800849c:	4b20      	ldr	r3, [pc, #128]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800849e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80084bc:	4a18      	ldr	r2, [pc, #96]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ce:	f7fc fa1f 	bl	8004910 <HAL_GetTick>
 80084d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084d4:	e00b      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084d6:	f7fc fa1b 	bl	8004910 <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d902      	bls.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	74fb      	strb	r3, [r7, #19]
            break;
 80084ec:	e006      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d0ec      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80084fc:	7cfb      	ldrb	r3, [r7, #19]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10b      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008502:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008510:	4903      	ldr	r1, [pc, #12]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008512:	4313      	orrs	r3, r2
 8008514:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008518:	e008      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800851a:	7cfb      	ldrb	r3, [r7, #19]
 800851c:	74bb      	strb	r3, [r7, #18]
 800851e:	e005      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008520:	40021000 	.word	0x40021000
 8008524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008528:	7cfb      	ldrb	r3, [r7, #19]
 800852a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800852c:	7c7b      	ldrb	r3, [r7, #17]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d105      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008532:	4ba6      	ldr	r3, [pc, #664]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008536:	4aa5      	ldr	r2, [pc, #660]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800853c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800854a:	4ba0      	ldr	r3, [pc, #640]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800854c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008550:	f023 0203 	bic.w	r2, r3, #3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	499c      	ldr	r1, [pc, #624]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800855a:	4313      	orrs	r3, r2
 800855c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800856c:	4b97      	ldr	r3, [pc, #604]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800856e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008572:	f023 020c 	bic.w	r2, r3, #12
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	4994      	ldr	r1, [pc, #592]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800857c:	4313      	orrs	r3, r2
 800857e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800858e:	4b8f      	ldr	r3, [pc, #572]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008594:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	498b      	ldr	r1, [pc, #556]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085b0:	4b86      	ldr	r3, [pc, #536]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	4983      	ldr	r1, [pc, #524]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085d2:	4b7e      	ldr	r3, [pc, #504]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	497a      	ldr	r1, [pc, #488]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085f4:	4b75      	ldr	r3, [pc, #468]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	4972      	ldr	r1, [pc, #456]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008604:	4313      	orrs	r3, r2
 8008606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008616:	4b6d      	ldr	r3, [pc, #436]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800861c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	4969      	ldr	r1, [pc, #420]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008638:	4b64      	ldr	r3, [pc, #400]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800863a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	4961      	ldr	r1, [pc, #388]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008648:	4313      	orrs	r3, r2
 800864a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800865a:	4b5c      	ldr	r3, [pc, #368]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800865c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008660:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008668:	4958      	ldr	r1, [pc, #352]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800866a:	4313      	orrs	r3, r2
 800866c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008678:	2b00      	cmp	r3, #0
 800867a:	d015      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800867c:	4b53      	ldr	r3, [pc, #332]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800867e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008682:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868a:	4950      	ldr	r1, [pc, #320]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800868c:	4313      	orrs	r3, r2
 800868e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800869a:	d105      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800869c:	4b4b      	ldr	r3, [pc, #300]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	4a4a      	ldr	r2, [pc, #296]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086a6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d015      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086b4:	4b45      	ldr	r3, [pc, #276]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c2:	4942      	ldr	r1, [pc, #264]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086d2:	d105      	bne.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086d4:	4b3d      	ldr	r3, [pc, #244]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	4a3c      	ldr	r2, [pc, #240]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086de:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d015      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086ec:	4b37      	ldr	r3, [pc, #220]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fa:	4934      	ldr	r1, [pc, #208]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008706:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800870a:	d105      	bne.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800870c:	4b2f      	ldr	r3, [pc, #188]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4a2e      	ldr	r2, [pc, #184]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008716:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d015      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008724:	4b29      	ldr	r3, [pc, #164]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800872a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008732:	4926      	ldr	r1, [pc, #152]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008734:	4313      	orrs	r3, r2
 8008736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008742:	d105      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008744:	4b21      	ldr	r3, [pc, #132]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	4a20      	ldr	r2, [pc, #128]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800874a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800874e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d015      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800875c:	4b1b      	ldr	r3, [pc, #108]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876a:	4918      	ldr	r1, [pc, #96]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800876c:	4313      	orrs	r3, r2
 800876e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800877a:	d105      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800877c:	4b13      	ldr	r3, [pc, #76]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	4a12      	ldr	r2, [pc, #72]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008786:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d015      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008794:	4b0d      	ldr	r3, [pc, #52]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a2:	490a      	ldr	r1, [pc, #40]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b2:	d105      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087b4:	4b05      	ldr	r3, [pc, #20]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	4a04      	ldr	r2, [pc, #16]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80087c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	40021000 	.word	0x40021000

080087d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e09d      	b.n	800891e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d108      	bne.n	80087fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087f2:	d009      	beq.n	8008808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	61da      	str	r2, [r3, #28]
 80087fa:	e005      	b.n	8008808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fa ffd8 	bl	80037d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800883e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008848:	d902      	bls.n	8008850 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	e002      	b.n	8008856 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008854:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800885e:	d007      	beq.n	8008870 <HAL_SPI_Init+0xa0>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008868:	d002      	beq.n	8008870 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b2:	ea42 0103 	orr.w	r1, r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	0c1b      	lsrs	r3, r3, #16
 80088cc:	f003 0204 	and.w	r2, r3, #4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088de:	f003 0308 	and.w	r3, r3, #8
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80088ec:	ea42 0103 	orr.w	r1, r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69da      	ldr	r2, [r3, #28]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800890c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b088      	sub	sp, #32
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	4613      	mov	r3, r2
 8008934:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008936:	f7fb ffeb 	bl	8004910 <HAL_GetTick>
 800893a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b01      	cmp	r3, #1
 800894a:	d001      	beq.n	8008950 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800894c:	2302      	movs	r3, #2
 800894e:	e15c      	b.n	8008c0a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_SPI_Transmit+0x36>
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e154      	b.n	8008c0a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_SPI_Transmit+0x48>
 800896a:	2302      	movs	r3, #2
 800896c:	e14d      	b.n	8008c0a <HAL_SPI_Transmit+0x2e4>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2203      	movs	r2, #3
 800897a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	88fa      	ldrh	r2, [r7, #6]
 800898e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	88fa      	ldrh	r2, [r7, #6]
 8008994:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089c0:	d10f      	bne.n	80089e2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ec:	2b40      	cmp	r3, #64	@ 0x40
 80089ee:	d007      	beq.n	8008a00 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a08:	d952      	bls.n	8008ab0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <HAL_SPI_Transmit+0xf2>
 8008a12:	8b7b      	ldrh	r3, [r7, #26]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d145      	bne.n	8008aa4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1c:	881a      	ldrh	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a28:	1c9a      	adds	r2, r3, #2
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a3c:	e032      	b.n	8008aa4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d112      	bne.n	8008a72 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a50:	881a      	ldrh	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5c:	1c9a      	adds	r2, r3, #2
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a70:	e018      	b.n	8008aa4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a72:	f7fb ff4d 	bl	8004910 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d803      	bhi.n	8008a8a <HAL_SPI_Transmit+0x164>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a88:	d102      	bne.n	8008a90 <HAL_SPI_Transmit+0x16a>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d109      	bne.n	8008aa4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e0b2      	b.n	8008c0a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1c7      	bne.n	8008a3e <HAL_SPI_Transmit+0x118>
 8008aae:	e083      	b.n	8008bb8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <HAL_SPI_Transmit+0x198>
 8008ab8:	8b7b      	ldrh	r3, [r7, #26]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d177      	bne.n	8008bae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d912      	bls.n	8008aee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008acc:	881a      	ldrh	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad8:	1c9a      	adds	r2, r3, #2
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	3b02      	subs	r3, #2
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008aec:	e05f      	b.n	8008bae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	330c      	adds	r3, #12
 8008af8:	7812      	ldrb	r2, [r2, #0]
 8008afa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008b14:	e04b      	b.n	8008bae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d12b      	bne.n	8008b7c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d912      	bls.n	8008b54 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b32:	881a      	ldrh	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3e:	1c9a      	adds	r2, r3, #2
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b02      	subs	r3, #2
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b52:	e02c      	b.n	8008bae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	330c      	adds	r3, #12
 8008b5e:	7812      	ldrb	r2, [r2, #0]
 8008b60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b7a:	e018      	b.n	8008bae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b7c:	f7fb fec8 	bl	8004910 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d803      	bhi.n	8008b94 <HAL_SPI_Transmit+0x26e>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b92:	d102      	bne.n	8008b9a <HAL_SPI_Transmit+0x274>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d109      	bne.n	8008bae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e02d      	b.n	8008c0a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1ae      	bne.n	8008b16 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 fb73 	bl	80092a8 <SPI_EndRxTxTransaction>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008c08:	2300      	movs	r3, #0
  }
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b08a      	sub	sp, #40	@ 0x28
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
 8008c1e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c20:	2301      	movs	r3, #1
 8008c22:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c24:	f7fb fe74 	bl	8004910 <HAL_GetTick>
 8008c28:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c30:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008c38:	887b      	ldrh	r3, [r7, #2]
 8008c3a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008c3c:	887b      	ldrh	r3, [r7, #2]
 8008c3e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c40:	7ffb      	ldrb	r3, [r7, #31]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d00c      	beq.n	8008c60 <HAL_SPI_TransmitReceive+0x4e>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c4c:	d106      	bne.n	8008c5c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d102      	bne.n	8008c5c <HAL_SPI_TransmitReceive+0x4a>
 8008c56:	7ffb      	ldrb	r3, [r7, #31]
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d001      	beq.n	8008c60 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e1f3      	b.n	8009048 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <HAL_SPI_TransmitReceive+0x60>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <HAL_SPI_TransmitReceive+0x60>
 8008c6c:	887b      	ldrh	r3, [r7, #2]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e1e8      	b.n	8009048 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_SPI_TransmitReceive+0x72>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e1e1      	b.n	8009048 <HAL_SPI_TransmitReceive+0x436>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d003      	beq.n	8008ca0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2205      	movs	r2, #5
 8008c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	887a      	ldrh	r2, [r7, #2]
 8008cb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	887a      	ldrh	r2, [r7, #2]
 8008cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	887a      	ldrh	r2, [r7, #2]
 8008cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	887a      	ldrh	r2, [r7, #2]
 8008ccc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ce2:	d802      	bhi.n	8008cea <HAL_SPI_TransmitReceive+0xd8>
 8008ce4:	8abb      	ldrh	r3, [r7, #20]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d908      	bls.n	8008cfc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cf8:	605a      	str	r2, [r3, #4]
 8008cfa:	e007      	b.n	8008d0c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d0a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d16:	2b40      	cmp	r3, #64	@ 0x40
 8008d18:	d007      	beq.n	8008d2a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d32:	f240 8083 	bls.w	8008e3c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <HAL_SPI_TransmitReceive+0x132>
 8008d3e:	8afb      	ldrh	r3, [r7, #22]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d16f      	bne.n	8008e24 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d48:	881a      	ldrh	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d54:	1c9a      	adds	r2, r3, #2
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d68:	e05c      	b.n	8008e24 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d11b      	bne.n	8008db0 <HAL_SPI_TransmitReceive+0x19e>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d016      	beq.n	8008db0 <HAL_SPI_TransmitReceive+0x19e>
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d113      	bne.n	8008db0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	881a      	ldrh	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d98:	1c9a      	adds	r2, r3, #2
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d11c      	bne.n	8008df8 <HAL_SPI_TransmitReceive+0x1e6>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d016      	beq.n	8008df8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd4:	b292      	uxth	r2, r2
 8008dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ddc:	1c9a      	adds	r2, r3, #2
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008df4:	2301      	movs	r3, #1
 8008df6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008df8:	f7fb fd8a 	bl	8004910 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d80d      	bhi.n	8008e24 <HAL_SPI_TransmitReceive+0x212>
 8008e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e0e:	d009      	beq.n	8008e24 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e111      	b.n	8009048 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d19d      	bne.n	8008d6a <HAL_SPI_TransmitReceive+0x158>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d197      	bne.n	8008d6a <HAL_SPI_TransmitReceive+0x158>
 8008e3a:	e0e5      	b.n	8009008 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <HAL_SPI_TransmitReceive+0x23a>
 8008e44:	8afb      	ldrh	r3, [r7, #22]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	f040 80d1 	bne.w	8008fee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d912      	bls.n	8008e7c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5a:	881a      	ldrh	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e66:	1c9a      	adds	r2, r3, #2
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	3b02      	subs	r3, #2
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e7a:	e0b8      	b.n	8008fee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	330c      	adds	r3, #12
 8008e86:	7812      	ldrb	r2, [r2, #0]
 8008e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ea2:	e0a4      	b.n	8008fee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d134      	bne.n	8008f1c <HAL_SPI_TransmitReceive+0x30a>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d02f      	beq.n	8008f1c <HAL_SPI_TransmitReceive+0x30a>
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d12c      	bne.n	8008f1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d912      	bls.n	8008ef2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed0:	881a      	ldrh	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008edc:	1c9a      	adds	r2, r3, #2
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	3b02      	subs	r3, #2
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ef0:	e012      	b.n	8008f18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	330c      	adds	r3, #12
 8008efc:	7812      	ldrb	r2, [r2, #0]
 8008efe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d148      	bne.n	8008fbc <HAL_SPI_TransmitReceive+0x3aa>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d042      	beq.n	8008fbc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d923      	bls.n	8008f8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4c:	b292      	uxth	r2, r2
 8008f4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	1c9a      	adds	r2, r3, #2
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b02      	subs	r3, #2
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d81f      	bhi.n	8008fb8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f86:	605a      	str	r2, [r3, #4]
 8008f88:	e016      	b.n	8008fb8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f103 020c 	add.w	r2, r3, #12
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f96:	7812      	ldrb	r2, [r2, #0]
 8008f98:	b2d2      	uxtb	r2, r2
 8008f9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fbc:	f7fb fca8 	bl	8004910 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d803      	bhi.n	8008fd4 <HAL_SPI_TransmitReceive+0x3c2>
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fd2:	d102      	bne.n	8008fda <HAL_SPI_TransmitReceive+0x3c8>
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d109      	bne.n	8008fee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e02c      	b.n	8009048 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f47f af55 	bne.w	8008ea4 <HAL_SPI_TransmitReceive+0x292>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	f47f af4e 	bne.w	8008ea4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009008:	6a3a      	ldr	r2, [r7, #32]
 800900a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f94b 	bl	80092a8 <SPI_EndRxTxTransaction>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d008      	beq.n	800902a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2220      	movs	r2, #32
 800901c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e00e      	b.n	8009048 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009046:	2300      	movs	r3, #0
  }
}
 8009048:	4618      	mov	r0, r3
 800904a:	3728      	adds	r7, #40	@ 0x28
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800905e:	b2db      	uxtb	r3, r3
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	4613      	mov	r3, r2
 800907a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800907c:	f7fb fc48 	bl	8004910 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4413      	add	r3, r2
 800908a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800908c:	f7fb fc40 	bl	8004910 <HAL_GetTick>
 8009090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009092:	4b39      	ldr	r3, [pc, #228]	@ (8009178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	015b      	lsls	r3, r3, #5
 8009098:	0d1b      	lsrs	r3, r3, #20
 800909a:	69fa      	ldr	r2, [r7, #28]
 800909c:	fb02 f303 	mul.w	r3, r2, r3
 80090a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090a2:	e054      	b.n	800914e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090aa:	d050      	beq.n	800914e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090ac:	f7fb fc30 	bl	8004910 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	69fa      	ldr	r2, [r7, #28]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d902      	bls.n	80090c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d13d      	bne.n	800913e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80090d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090da:	d111      	bne.n	8009100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090e4:	d004      	beq.n	80090f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ee:	d107      	bne.n	8009100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009108:	d10f      	bne.n	800912a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e017      	b.n	800916e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	3b01      	subs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4013      	ands	r3, r2
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	429a      	cmp	r2, r3
 800915c:	bf0c      	ite	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	2300      	movne	r3, #0
 8009162:	b2db      	uxtb	r3, r3
 8009164:	461a      	mov	r2, r3
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	429a      	cmp	r2, r3
 800916a:	d19b      	bne.n	80090a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000010 	.word	0x20000010

0800917c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	@ 0x28
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800918e:	f7fb fbbf 	bl	8004910 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	1a9b      	subs	r3, r3, r2
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	4413      	add	r3, r2
 800919c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800919e:	f7fb fbb7 	bl	8004910 <HAL_GetTick>
 80091a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	330c      	adds	r3, #12
 80091aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80091ac:	4b3d      	ldr	r3, [pc, #244]	@ (80092a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	00da      	lsls	r2, r3, #3
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	0d1b      	lsrs	r3, r3, #20
 80091bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091be:	fb02 f303 	mul.w	r3, r2, r3
 80091c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80091c4:	e060      	b.n	8009288 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80091cc:	d107      	bne.n	80091de <SPI_WaitFifoStateUntilTimeout+0x62>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091e4:	d050      	beq.n	8009288 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091e6:	f7fb fb93 	bl	8004910 <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d902      	bls.n	80091fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d13d      	bne.n	8009278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800920a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009214:	d111      	bne.n	800923a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800921e:	d004      	beq.n	800922a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009228:	d107      	bne.n	800923a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800923e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009242:	d10f      	bne.n	8009264 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e010      	b.n	800929a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	3b01      	subs	r3, #1
 8009286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	4013      	ands	r3, r2
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	429a      	cmp	r2, r3
 8009296:	d196      	bne.n	80091c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3728      	adds	r7, #40	@ 0x28
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000010 	.word	0x20000010

080092a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f7ff ff5b 	bl	800917c <SPI_WaitFifoStateUntilTimeout>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092d0:	f043 0220 	orr.w	r2, r3, #32
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e027      	b.n	800932c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	2200      	movs	r2, #0
 80092e4:	2180      	movs	r1, #128	@ 0x80
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7ff fec0 	bl	800906c <SPI_WaitFlagStateUntilTimeout>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d007      	beq.n	8009302 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f6:	f043 0220 	orr.w	r2, r3, #32
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e014      	b.n	800932c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2200      	movs	r2, #0
 800930a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff ff34 	bl	800917c <SPI_WaitFifoStateUntilTimeout>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800931e:	f043 0220 	orr.w	r2, r3, #32
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e000      	b.n	800932c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e049      	b.n	80093da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7fa fec8 	bl	80040f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3304      	adds	r3, #4
 8009370:	4619      	mov	r1, r3
 8009372:	4610      	mov	r0, r2
 8009374:	f000 fd92 	bl	8009e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d001      	beq.n	80093fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e04a      	b.n	8009492 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0201 	orr.w	r2, r2, #1
 8009412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a21      	ldr	r2, [pc, #132]	@ (80094a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d018      	beq.n	8009450 <HAL_TIM_Base_Start_IT+0x6c>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009426:	d013      	beq.n	8009450 <HAL_TIM_Base_Start_IT+0x6c>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a1d      	ldr	r2, [pc, #116]	@ (80094a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d00e      	beq.n	8009450 <HAL_TIM_Base_Start_IT+0x6c>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1c      	ldr	r2, [pc, #112]	@ (80094a8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d009      	beq.n	8009450 <HAL_TIM_Base_Start_IT+0x6c>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1a      	ldr	r2, [pc, #104]	@ (80094ac <HAL_TIM_Base_Start_IT+0xc8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d004      	beq.n	8009450 <HAL_TIM_Base_Start_IT+0x6c>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a19      	ldr	r2, [pc, #100]	@ (80094b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d115      	bne.n	800947c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	4b17      	ldr	r3, [pc, #92]	@ (80094b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009458:	4013      	ands	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b06      	cmp	r3, #6
 8009460:	d015      	beq.n	800948e <HAL_TIM_Base_Start_IT+0xaa>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009468:	d011      	beq.n	800948e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0201 	orr.w	r2, r2, #1
 8009478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800947a:	e008      	b.n	800948e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0201 	orr.w	r2, r2, #1
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e000      	b.n	8009490 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800948e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	40012c00 	.word	0x40012c00
 80094a4:	40000400 	.word	0x40000400
 80094a8:	40000800 	.word	0x40000800
 80094ac:	40013400 	.word	0x40013400
 80094b0:	40014000 	.word	0x40014000
 80094b4:	00010007 	.word	0x00010007

080094b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e049      	b.n	800955e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d106      	bne.n	80094e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f841 	bl	8009566 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2202      	movs	r2, #2
 80094e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3304      	adds	r3, #4
 80094f4:	4619      	mov	r1, r3
 80094f6:	4610      	mov	r0, r2
 80094f8:	f000 fcd0 	bl	8009e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d109      	bne.n	80095a0 <HAL_TIM_PWM_Start+0x24>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b01      	cmp	r3, #1
 8009596:	bf14      	ite	ne
 8009598:	2301      	movne	r3, #1
 800959a:	2300      	moveq	r3, #0
 800959c:	b2db      	uxtb	r3, r3
 800959e:	e03c      	b.n	800961a <HAL_TIM_PWM_Start+0x9e>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d109      	bne.n	80095ba <HAL_TIM_PWM_Start+0x3e>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	bf14      	ite	ne
 80095b2:	2301      	movne	r3, #1
 80095b4:	2300      	moveq	r3, #0
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	e02f      	b.n	800961a <HAL_TIM_PWM_Start+0x9e>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b08      	cmp	r3, #8
 80095be:	d109      	bne.n	80095d4 <HAL_TIM_PWM_Start+0x58>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	bf14      	ite	ne
 80095cc:	2301      	movne	r3, #1
 80095ce:	2300      	moveq	r3, #0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	e022      	b.n	800961a <HAL_TIM_PWM_Start+0x9e>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b0c      	cmp	r3, #12
 80095d8:	d109      	bne.n	80095ee <HAL_TIM_PWM_Start+0x72>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	bf14      	ite	ne
 80095e6:	2301      	movne	r3, #1
 80095e8:	2300      	moveq	r3, #0
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	e015      	b.n	800961a <HAL_TIM_PWM_Start+0x9e>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b10      	cmp	r3, #16
 80095f2:	d109      	bne.n	8009608 <HAL_TIM_PWM_Start+0x8c>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	bf14      	ite	ne
 8009600:	2301      	movne	r3, #1
 8009602:	2300      	moveq	r3, #0
 8009604:	b2db      	uxtb	r3, r3
 8009606:	e008      	b.n	800961a <HAL_TIM_PWM_Start+0x9e>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b01      	cmp	r3, #1
 8009612:	bf14      	ite	ne
 8009614:	2301      	movne	r3, #1
 8009616:	2300      	moveq	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e097      	b.n	8009752 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <HAL_TIM_PWM_Start+0xb6>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009630:	e023      	b.n	800967a <HAL_TIM_PWM_Start+0xfe>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b04      	cmp	r3, #4
 8009636:	d104      	bne.n	8009642 <HAL_TIM_PWM_Start+0xc6>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009640:	e01b      	b.n	800967a <HAL_TIM_PWM_Start+0xfe>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b08      	cmp	r3, #8
 8009646:	d104      	bne.n	8009652 <HAL_TIM_PWM_Start+0xd6>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009650:	e013      	b.n	800967a <HAL_TIM_PWM_Start+0xfe>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b0c      	cmp	r3, #12
 8009656:	d104      	bne.n	8009662 <HAL_TIM_PWM_Start+0xe6>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009660:	e00b      	b.n	800967a <HAL_TIM_PWM_Start+0xfe>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b10      	cmp	r3, #16
 8009666:	d104      	bne.n	8009672 <HAL_TIM_PWM_Start+0xf6>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009670:	e003      	b.n	800967a <HAL_TIM_PWM_Start+0xfe>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2202      	movs	r2, #2
 8009676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2201      	movs	r2, #1
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f001 f838 	bl	800a6f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a33      	ldr	r2, [pc, #204]	@ (800975c <HAL_TIM_PWM_Start+0x1e0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <HAL_TIM_PWM_Start+0x13e>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a32      	ldr	r2, [pc, #200]	@ (8009760 <HAL_TIM_PWM_Start+0x1e4>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00e      	beq.n	80096ba <HAL_TIM_PWM_Start+0x13e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a30      	ldr	r2, [pc, #192]	@ (8009764 <HAL_TIM_PWM_Start+0x1e8>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d009      	beq.n	80096ba <HAL_TIM_PWM_Start+0x13e>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009768 <HAL_TIM_PWM_Start+0x1ec>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <HAL_TIM_PWM_Start+0x13e>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a2d      	ldr	r2, [pc, #180]	@ (800976c <HAL_TIM_PWM_Start+0x1f0>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d101      	bne.n	80096be <HAL_TIM_PWM_Start+0x142>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <HAL_TIM_PWM_Start+0x144>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a20      	ldr	r2, [pc, #128]	@ (800975c <HAL_TIM_PWM_Start+0x1e0>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d018      	beq.n	8009710 <HAL_TIM_PWM_Start+0x194>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e6:	d013      	beq.n	8009710 <HAL_TIM_PWM_Start+0x194>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a20      	ldr	r2, [pc, #128]	@ (8009770 <HAL_TIM_PWM_Start+0x1f4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00e      	beq.n	8009710 <HAL_TIM_PWM_Start+0x194>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009774 <HAL_TIM_PWM_Start+0x1f8>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_TIM_PWM_Start+0x194>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a17      	ldr	r2, [pc, #92]	@ (8009760 <HAL_TIM_PWM_Start+0x1e4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d004      	beq.n	8009710 <HAL_TIM_PWM_Start+0x194>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a16      	ldr	r2, [pc, #88]	@ (8009764 <HAL_TIM_PWM_Start+0x1e8>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d115      	bne.n	800973c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	4b18      	ldr	r3, [pc, #96]	@ (8009778 <HAL_TIM_PWM_Start+0x1fc>)
 8009718:	4013      	ands	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b06      	cmp	r3, #6
 8009720:	d015      	beq.n	800974e <HAL_TIM_PWM_Start+0x1d2>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009728:	d011      	beq.n	800974e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f042 0201 	orr.w	r2, r2, #1
 8009738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800973a:	e008      	b.n	800974e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	e000      	b.n	8009750 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	40012c00 	.word	0x40012c00
 8009760:	40013400 	.word	0x40013400
 8009764:	40014000 	.word	0x40014000
 8009768:	40014400 	.word	0x40014400
 800976c:	40014800 	.word	0x40014800
 8009770:	40000400 	.word	0x40000400
 8009774:	40000800 	.word	0x40000800
 8009778:	00010007 	.word	0x00010007

0800977c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f003 0302 	and.w	r3, r3, #2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d020      	beq.n	80097e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d01b      	beq.n	80097e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f06f 0202 	mvn.w	r2, #2
 80097b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fb4a 	bl	8009e60 <HAL_TIM_IC_CaptureCallback>
 80097cc:	e005      	b.n	80097da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fb3c 	bl	8009e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fb4d 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f003 0304 	and.w	r3, r3, #4
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d020      	beq.n	800982c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01b      	beq.n	800982c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f06f 0204 	mvn.w	r2, #4
 80097fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2202      	movs	r2, #2
 8009802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fb24 	bl	8009e60 <HAL_TIM_IC_CaptureCallback>
 8009818:	e005      	b.n	8009826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fb16 	bl	8009e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fb27 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d020      	beq.n	8009878 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f003 0308 	and.w	r3, r3, #8
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01b      	beq.n	8009878 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f06f 0208 	mvn.w	r2, #8
 8009848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2204      	movs	r2, #4
 800984e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fafe 	bl	8009e60 <HAL_TIM_IC_CaptureCallback>
 8009864:	e005      	b.n	8009872 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 faf0 	bl	8009e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fb01 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f003 0310 	and.w	r3, r3, #16
 800987e:	2b00      	cmp	r3, #0
 8009880:	d020      	beq.n	80098c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f003 0310 	and.w	r3, r3, #16
 8009888:	2b00      	cmp	r3, #0
 800988a:	d01b      	beq.n	80098c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f06f 0210 	mvn.w	r2, #16
 8009894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2208      	movs	r2, #8
 800989a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fad8 	bl	8009e60 <HAL_TIM_IC_CaptureCallback>
 80098b0:	e005      	b.n	80098be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 faca 	bl	8009e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fadb 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00c      	beq.n	80098e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d007      	beq.n	80098e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f06f 0201 	mvn.w	r2, #1
 80098e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 faa8 	bl	8009e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d104      	bne.n	80098fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00c      	beq.n	8009916 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009902:	2b00      	cmp	r3, #0
 8009904:	d007      	beq.n	8009916 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800990e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 ffa3 	bl	800a85c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00c      	beq.n	800993a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009926:	2b00      	cmp	r3, #0
 8009928:	d007      	beq.n	800993a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 ff9b 	bl	800a870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00c      	beq.n	800995e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994a:	2b00      	cmp	r3, #0
 800994c:	d007      	beq.n	800995e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fa95 	bl	8009e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f003 0320 	and.w	r3, r3, #32
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00c      	beq.n	8009982 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d007      	beq.n	8009982 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f06f 0220 	mvn.w	r2, #32
 800997a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 ff63 	bl	800a848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00c      	beq.n	80099a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d007      	beq.n	80099a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800999e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 ff6f 	bl	800a884 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00c      	beq.n	80099ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d007      	beq.n	80099ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80099c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 ff67 	bl	800a898 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00c      	beq.n	80099ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d007      	beq.n	80099ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80099e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 ff5f 	bl	800a8ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00c      	beq.n	8009a12 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 ff57 	bl	800a8c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d101      	bne.n	8009a3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a36:	2302      	movs	r3, #2
 8009a38:	e0ff      	b.n	8009c3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b14      	cmp	r3, #20
 8009a46:	f200 80f0 	bhi.w	8009c2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009aa5 	.word	0x08009aa5
 8009a54:	08009c2b 	.word	0x08009c2b
 8009a58:	08009c2b 	.word	0x08009c2b
 8009a5c:	08009c2b 	.word	0x08009c2b
 8009a60:	08009ae5 	.word	0x08009ae5
 8009a64:	08009c2b 	.word	0x08009c2b
 8009a68:	08009c2b 	.word	0x08009c2b
 8009a6c:	08009c2b 	.word	0x08009c2b
 8009a70:	08009b27 	.word	0x08009b27
 8009a74:	08009c2b 	.word	0x08009c2b
 8009a78:	08009c2b 	.word	0x08009c2b
 8009a7c:	08009c2b 	.word	0x08009c2b
 8009a80:	08009b67 	.word	0x08009b67
 8009a84:	08009c2b 	.word	0x08009c2b
 8009a88:	08009c2b 	.word	0x08009c2b
 8009a8c:	08009c2b 	.word	0x08009c2b
 8009a90:	08009ba9 	.word	0x08009ba9
 8009a94:	08009c2b 	.word	0x08009c2b
 8009a98:	08009c2b 	.word	0x08009c2b
 8009a9c:	08009c2b 	.word	0x08009c2b
 8009aa0:	08009be9 	.word	0x08009be9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68b9      	ldr	r1, [r7, #8]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 fa92 	bl	8009fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0208 	orr.w	r2, r2, #8
 8009abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0204 	bic.w	r2, r2, #4
 8009ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6999      	ldr	r1, [r3, #24]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	691a      	ldr	r2, [r3, #16]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	619a      	str	r2, [r3, #24]
      break;
 8009ae2:	e0a5      	b.n	8009c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fb02 	bl	800a0f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699a      	ldr	r2, [r3, #24]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6999      	ldr	r1, [r3, #24]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	021a      	lsls	r2, r3, #8
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	619a      	str	r2, [r3, #24]
      break;
 8009b24:	e084      	b.n	8009c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68b9      	ldr	r1, [r7, #8]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fb6b 	bl	800a208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69da      	ldr	r2, [r3, #28]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f042 0208 	orr.w	r2, r2, #8
 8009b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0204 	bic.w	r2, r2, #4
 8009b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69d9      	ldr	r1, [r3, #28]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	691a      	ldr	r2, [r3, #16]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	61da      	str	r2, [r3, #28]
      break;
 8009b64:	e064      	b.n	8009c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fbd3 	bl	800a318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	69da      	ldr	r2, [r3, #28]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	69da      	ldr	r2, [r3, #28]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69d9      	ldr	r1, [r3, #28]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	021a      	lsls	r2, r3, #8
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	61da      	str	r2, [r3, #28]
      break;
 8009ba6:	e043      	b.n	8009c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fc3c 	bl	800a42c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f042 0208 	orr.w	r2, r2, #8
 8009bc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0204 	bic.w	r2, r2, #4
 8009bd2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	691a      	ldr	r2, [r3, #16]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009be6:	e023      	b.n	8009c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fc80 	bl	800a4f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	021a      	lsls	r2, r3, #8
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009c28:	e002      	b.n	8009c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop

08009c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d101      	bne.n	8009c60 <HAL_TIM_ConfigClockSource+0x1c>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e0de      	b.n	8009e1e <HAL_TIM_ConfigClockSource+0x1da>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009c7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a63      	ldr	r2, [pc, #396]	@ (8009e28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	f000 80a9 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009ca0:	4a61      	ldr	r2, [pc, #388]	@ (8009e28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	f200 80ae 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ca8:	4a60      	ldr	r2, [pc, #384]	@ (8009e2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	f000 80a1 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009cb0:	4a5e      	ldr	r2, [pc, #376]	@ (8009e2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	f200 80a6 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009cb8:	4a5d      	ldr	r2, [pc, #372]	@ (8009e30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	f000 8099 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009cc0:	4a5b      	ldr	r2, [pc, #364]	@ (8009e30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	f200 809e 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8009e34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	f000 8091 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009cd0:	4a58      	ldr	r2, [pc, #352]	@ (8009e34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	f200 8096 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009cd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009cdc:	f000 8089 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009ce0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ce4:	f200 808e 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cec:	d03e      	beq.n	8009d6c <HAL_TIM_ConfigClockSource+0x128>
 8009cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cf2:	f200 8087 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfa:	f000 8086 	beq.w	8009e0a <HAL_TIM_ConfigClockSource+0x1c6>
 8009cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d02:	d87f      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009d04:	2b70      	cmp	r3, #112	@ 0x70
 8009d06:	d01a      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0xfa>
 8009d08:	2b70      	cmp	r3, #112	@ 0x70
 8009d0a:	d87b      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009d0c:	2b60      	cmp	r3, #96	@ 0x60
 8009d0e:	d050      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0x16e>
 8009d10:	2b60      	cmp	r3, #96	@ 0x60
 8009d12:	d877      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009d14:	2b50      	cmp	r3, #80	@ 0x50
 8009d16:	d03c      	beq.n	8009d92 <HAL_TIM_ConfigClockSource+0x14e>
 8009d18:	2b50      	cmp	r3, #80	@ 0x50
 8009d1a:	d873      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009d1c:	2b40      	cmp	r3, #64	@ 0x40
 8009d1e:	d058      	beq.n	8009dd2 <HAL_TIM_ConfigClockSource+0x18e>
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	d86f      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009d24:	2b30      	cmp	r3, #48	@ 0x30
 8009d26:	d064      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009d28:	2b30      	cmp	r3, #48	@ 0x30
 8009d2a:	d86b      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d060      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d867      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d05c      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009d38:	2b10      	cmp	r3, #16
 8009d3a:	d05a      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009d3c:	e062      	b.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d4e:	f000 fcb3 	bl	800a6b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	609a      	str	r2, [r3, #8]
      break;
 8009d6a:	e04f      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d7c:	f000 fc9c 	bl	800a6b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d8e:	609a      	str	r2, [r3, #8]
      break;
 8009d90:	e03c      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f000 fc0e 	bl	800a5c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2150      	movs	r1, #80	@ 0x50
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fc67 	bl	800a67e <TIM_ITRx_SetConfig>
      break;
 8009db0:	e02c      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f000 fc2d 	bl	800a61e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2160      	movs	r1, #96	@ 0x60
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fc57 	bl	800a67e <TIM_ITRx_SetConfig>
      break;
 8009dd0:	e01c      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dde:	461a      	mov	r2, r3
 8009de0:	f000 fbee 	bl	800a5c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2140      	movs	r1, #64	@ 0x40
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 fc47 	bl	800a67e <TIM_ITRx_SetConfig>
      break;
 8009df0:	e00c      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	f000 fc3e 	bl	800a67e <TIM_ITRx_SetConfig>
      break;
 8009e02:	e003      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	73fb      	strb	r3, [r7, #15]
      break;
 8009e08:	e000      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	00100070 	.word	0x00100070
 8009e2c:	00100040 	.word	0x00100040
 8009e30:	00100030 	.word	0x00100030
 8009e34:	00100020 	.word	0x00100020

08009e38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a42      	ldr	r2, [pc, #264]	@ (8009fb8 <TIM_Base_SetConfig+0x11c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d00f      	beq.n	8009ed4 <TIM_Base_SetConfig+0x38>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eba:	d00b      	beq.n	8009ed4 <TIM_Base_SetConfig+0x38>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8009fbc <TIM_Base_SetConfig+0x120>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d007      	beq.n	8009ed4 <TIM_Base_SetConfig+0x38>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8009fc0 <TIM_Base_SetConfig+0x124>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d003      	beq.n	8009ed4 <TIM_Base_SetConfig+0x38>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a3d      	ldr	r2, [pc, #244]	@ (8009fc4 <TIM_Base_SetConfig+0x128>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d108      	bne.n	8009ee6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a33      	ldr	r2, [pc, #204]	@ (8009fb8 <TIM_Base_SetConfig+0x11c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01b      	beq.n	8009f26 <TIM_Base_SetConfig+0x8a>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ef4:	d017      	beq.n	8009f26 <TIM_Base_SetConfig+0x8a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a30      	ldr	r2, [pc, #192]	@ (8009fbc <TIM_Base_SetConfig+0x120>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d013      	beq.n	8009f26 <TIM_Base_SetConfig+0x8a>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a2f      	ldr	r2, [pc, #188]	@ (8009fc0 <TIM_Base_SetConfig+0x124>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00f      	beq.n	8009f26 <TIM_Base_SetConfig+0x8a>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a2e      	ldr	r2, [pc, #184]	@ (8009fc4 <TIM_Base_SetConfig+0x128>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00b      	beq.n	8009f26 <TIM_Base_SetConfig+0x8a>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a2d      	ldr	r2, [pc, #180]	@ (8009fc8 <TIM_Base_SetConfig+0x12c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d007      	beq.n	8009f26 <TIM_Base_SetConfig+0x8a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a2c      	ldr	r2, [pc, #176]	@ (8009fcc <TIM_Base_SetConfig+0x130>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d003      	beq.n	8009f26 <TIM_Base_SetConfig+0x8a>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a2b      	ldr	r2, [pc, #172]	@ (8009fd0 <TIM_Base_SetConfig+0x134>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d108      	bne.n	8009f38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a16      	ldr	r2, [pc, #88]	@ (8009fb8 <TIM_Base_SetConfig+0x11c>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d00f      	beq.n	8009f84 <TIM_Base_SetConfig+0xe8>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a17      	ldr	r2, [pc, #92]	@ (8009fc4 <TIM_Base_SetConfig+0x128>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d00b      	beq.n	8009f84 <TIM_Base_SetConfig+0xe8>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a16      	ldr	r2, [pc, #88]	@ (8009fc8 <TIM_Base_SetConfig+0x12c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d007      	beq.n	8009f84 <TIM_Base_SetConfig+0xe8>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a15      	ldr	r2, [pc, #84]	@ (8009fcc <TIM_Base_SetConfig+0x130>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d003      	beq.n	8009f84 <TIM_Base_SetConfig+0xe8>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a14      	ldr	r2, [pc, #80]	@ (8009fd0 <TIM_Base_SetConfig+0x134>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d103      	bne.n	8009f8c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	691a      	ldr	r2, [r3, #16]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d105      	bne.n	8009faa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f023 0201 	bic.w	r2, r3, #1
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	611a      	str	r2, [r3, #16]
  }
}
 8009faa:	bf00      	nop
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	40012c00 	.word	0x40012c00
 8009fbc:	40000400 	.word	0x40000400
 8009fc0:	40000800 	.word	0x40000800
 8009fc4:	40013400 	.word	0x40013400
 8009fc8:	40014000 	.word	0x40014000
 8009fcc:	40014400 	.word	0x40014400
 8009fd0:	40014800 	.word	0x40014800

08009fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	f023 0201 	bic.w	r2, r3, #1
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f023 0302 	bic.w	r3, r3, #2
 800a020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	4313      	orrs	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a2c      	ldr	r2, [pc, #176]	@ (800a0e0 <TIM_OC1_SetConfig+0x10c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00f      	beq.n	800a054 <TIM_OC1_SetConfig+0x80>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a2b      	ldr	r2, [pc, #172]	@ (800a0e4 <TIM_OC1_SetConfig+0x110>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d00b      	beq.n	800a054 <TIM_OC1_SetConfig+0x80>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a2a      	ldr	r2, [pc, #168]	@ (800a0e8 <TIM_OC1_SetConfig+0x114>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d007      	beq.n	800a054 <TIM_OC1_SetConfig+0x80>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a29      	ldr	r2, [pc, #164]	@ (800a0ec <TIM_OC1_SetConfig+0x118>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d003      	beq.n	800a054 <TIM_OC1_SetConfig+0x80>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a28      	ldr	r2, [pc, #160]	@ (800a0f0 <TIM_OC1_SetConfig+0x11c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d10c      	bne.n	800a06e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f023 0308 	bic.w	r3, r3, #8
 800a05a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	4313      	orrs	r3, r2
 800a064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f023 0304 	bic.w	r3, r3, #4
 800a06c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a1b      	ldr	r2, [pc, #108]	@ (800a0e0 <TIM_OC1_SetConfig+0x10c>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00f      	beq.n	800a096 <TIM_OC1_SetConfig+0xc2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a1a      	ldr	r2, [pc, #104]	@ (800a0e4 <TIM_OC1_SetConfig+0x110>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00b      	beq.n	800a096 <TIM_OC1_SetConfig+0xc2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a19      	ldr	r2, [pc, #100]	@ (800a0e8 <TIM_OC1_SetConfig+0x114>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d007      	beq.n	800a096 <TIM_OC1_SetConfig+0xc2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a18      	ldr	r2, [pc, #96]	@ (800a0ec <TIM_OC1_SetConfig+0x118>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d003      	beq.n	800a096 <TIM_OC1_SetConfig+0xc2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a17      	ldr	r2, [pc, #92]	@ (800a0f0 <TIM_OC1_SetConfig+0x11c>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d111      	bne.n	800a0ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a09c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	621a      	str	r2, [r3, #32]
}
 800a0d4:	bf00      	nop
 800a0d6:	371c      	adds	r7, #28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	40012c00 	.word	0x40012c00
 800a0e4:	40013400 	.word	0x40013400
 800a0e8:	40014000 	.word	0x40014000
 800a0ec:	40014400 	.word	0x40014400
 800a0f0:	40014800 	.word	0x40014800

0800a0f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	f023 0210 	bic.w	r2, r3, #16
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	021b      	lsls	r3, r3, #8
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f023 0320 	bic.w	r3, r3, #32
 800a142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	011b      	lsls	r3, r3, #4
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a28      	ldr	r2, [pc, #160]	@ (800a1f4 <TIM_OC2_SetConfig+0x100>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d003      	beq.n	800a160 <TIM_OC2_SetConfig+0x6c>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a27      	ldr	r2, [pc, #156]	@ (800a1f8 <TIM_OC2_SetConfig+0x104>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d10d      	bne.n	800a17c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4313      	orrs	r3, r2
 800a172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a17a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a1d      	ldr	r2, [pc, #116]	@ (800a1f4 <TIM_OC2_SetConfig+0x100>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d00f      	beq.n	800a1a4 <TIM_OC2_SetConfig+0xb0>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a1c      	ldr	r2, [pc, #112]	@ (800a1f8 <TIM_OC2_SetConfig+0x104>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d00b      	beq.n	800a1a4 <TIM_OC2_SetConfig+0xb0>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1fc <TIM_OC2_SetConfig+0x108>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d007      	beq.n	800a1a4 <TIM_OC2_SetConfig+0xb0>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a1a      	ldr	r2, [pc, #104]	@ (800a200 <TIM_OC2_SetConfig+0x10c>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d003      	beq.n	800a1a4 <TIM_OC2_SetConfig+0xb0>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a19      	ldr	r2, [pc, #100]	@ (800a204 <TIM_OC2_SetConfig+0x110>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d113      	bne.n	800a1cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a1aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	621a      	str	r2, [r3, #32]
}
 800a1e6:	bf00      	nop
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	40012c00 	.word	0x40012c00
 800a1f8:	40013400 	.word	0x40013400
 800a1fc:	40014000 	.word	0x40014000
 800a200:	40014400 	.word	0x40014400
 800a204:	40014800 	.word	0x40014800

0800a208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	021b      	lsls	r3, r3, #8
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	4313      	orrs	r3, r2
 800a260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a27      	ldr	r2, [pc, #156]	@ (800a304 <TIM_OC3_SetConfig+0xfc>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d003      	beq.n	800a272 <TIM_OC3_SetConfig+0x6a>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a26      	ldr	r2, [pc, #152]	@ (800a308 <TIM_OC3_SetConfig+0x100>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d10d      	bne.n	800a28e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	021b      	lsls	r3, r3, #8
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	4313      	orrs	r3, r2
 800a284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a28c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a1c      	ldr	r2, [pc, #112]	@ (800a304 <TIM_OC3_SetConfig+0xfc>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d00f      	beq.n	800a2b6 <TIM_OC3_SetConfig+0xae>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a1b      	ldr	r2, [pc, #108]	@ (800a308 <TIM_OC3_SetConfig+0x100>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d00b      	beq.n	800a2b6 <TIM_OC3_SetConfig+0xae>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a30c <TIM_OC3_SetConfig+0x104>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d007      	beq.n	800a2b6 <TIM_OC3_SetConfig+0xae>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a19      	ldr	r2, [pc, #100]	@ (800a310 <TIM_OC3_SetConfig+0x108>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d003      	beq.n	800a2b6 <TIM_OC3_SetConfig+0xae>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a18      	ldr	r2, [pc, #96]	@ (800a314 <TIM_OC3_SetConfig+0x10c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d113      	bne.n	800a2de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	621a      	str	r2, [r3, #32]
}
 800a2f8:	bf00      	nop
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	40012c00 	.word	0x40012c00
 800a308:	40013400 	.word	0x40013400
 800a30c:	40014000 	.word	0x40014000
 800a310:	40014400 	.word	0x40014400
 800a314:	40014800 	.word	0x40014800

0800a318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	031b      	lsls	r3, r3, #12
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	4313      	orrs	r3, r2
 800a372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a28      	ldr	r2, [pc, #160]	@ (800a418 <TIM_OC4_SetConfig+0x100>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d003      	beq.n	800a384 <TIM_OC4_SetConfig+0x6c>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a27      	ldr	r2, [pc, #156]	@ (800a41c <TIM_OC4_SetConfig+0x104>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d10d      	bne.n	800a3a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	031b      	lsls	r3, r3, #12
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a39e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a1d      	ldr	r2, [pc, #116]	@ (800a418 <TIM_OC4_SetConfig+0x100>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00f      	beq.n	800a3c8 <TIM_OC4_SetConfig+0xb0>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a1c      	ldr	r2, [pc, #112]	@ (800a41c <TIM_OC4_SetConfig+0x104>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d00b      	beq.n	800a3c8 <TIM_OC4_SetConfig+0xb0>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a1b      	ldr	r2, [pc, #108]	@ (800a420 <TIM_OC4_SetConfig+0x108>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d007      	beq.n	800a3c8 <TIM_OC4_SetConfig+0xb0>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a1a      	ldr	r2, [pc, #104]	@ (800a424 <TIM_OC4_SetConfig+0x10c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d003      	beq.n	800a3c8 <TIM_OC4_SetConfig+0xb0>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a19      	ldr	r2, [pc, #100]	@ (800a428 <TIM_OC4_SetConfig+0x110>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d113      	bne.n	800a3f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	019b      	lsls	r3, r3, #6
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	019b      	lsls	r3, r3, #6
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	621a      	str	r2, [r3, #32]
}
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	40012c00 	.word	0x40012c00
 800a41c:	40013400 	.word	0x40013400
 800a420:	40014000 	.word	0x40014000
 800a424:	40014400 	.word	0x40014400
 800a428:	40014800 	.word	0x40014800

0800a42c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a45a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	4313      	orrs	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	041b      	lsls	r3, r3, #16
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a17      	ldr	r2, [pc, #92]	@ (800a4e0 <TIM_OC5_SetConfig+0xb4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00f      	beq.n	800a4a6 <TIM_OC5_SetConfig+0x7a>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a16      	ldr	r2, [pc, #88]	@ (800a4e4 <TIM_OC5_SetConfig+0xb8>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00b      	beq.n	800a4a6 <TIM_OC5_SetConfig+0x7a>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a15      	ldr	r2, [pc, #84]	@ (800a4e8 <TIM_OC5_SetConfig+0xbc>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d007      	beq.n	800a4a6 <TIM_OC5_SetConfig+0x7a>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a14      	ldr	r2, [pc, #80]	@ (800a4ec <TIM_OC5_SetConfig+0xc0>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d003      	beq.n	800a4a6 <TIM_OC5_SetConfig+0x7a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a13      	ldr	r2, [pc, #76]	@ (800a4f0 <TIM_OC5_SetConfig+0xc4>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d109      	bne.n	800a4ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	621a      	str	r2, [r3, #32]
}
 800a4d4:	bf00      	nop
 800a4d6:	371c      	adds	r7, #28
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	40012c00 	.word	0x40012c00
 800a4e4:	40013400 	.word	0x40013400
 800a4e8:	40014000 	.word	0x40014000
 800a4ec:	40014400 	.word	0x40014400
 800a4f0:	40014800 	.word	0x40014800

0800a4f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	4313      	orrs	r3, r2
 800a532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a53a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	051b      	lsls	r3, r3, #20
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	4313      	orrs	r3, r2
 800a546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a18      	ldr	r2, [pc, #96]	@ (800a5ac <TIM_OC6_SetConfig+0xb8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d00f      	beq.n	800a570 <TIM_OC6_SetConfig+0x7c>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a17      	ldr	r2, [pc, #92]	@ (800a5b0 <TIM_OC6_SetConfig+0xbc>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d00b      	beq.n	800a570 <TIM_OC6_SetConfig+0x7c>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a16      	ldr	r2, [pc, #88]	@ (800a5b4 <TIM_OC6_SetConfig+0xc0>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d007      	beq.n	800a570 <TIM_OC6_SetConfig+0x7c>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a15      	ldr	r2, [pc, #84]	@ (800a5b8 <TIM_OC6_SetConfig+0xc4>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d003      	beq.n	800a570 <TIM_OC6_SetConfig+0x7c>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a14      	ldr	r2, [pc, #80]	@ (800a5bc <TIM_OC6_SetConfig+0xc8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d109      	bne.n	800a584 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	029b      	lsls	r3, r3, #10
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	4313      	orrs	r3, r2
 800a582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	621a      	str	r2, [r3, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	40012c00 	.word	0x40012c00
 800a5b0:	40013400 	.word	0x40013400
 800a5b4:	40014000 	.word	0x40014000
 800a5b8:	40014400 	.word	0x40014400
 800a5bc:	40014800 	.word	0x40014800

0800a5c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	f023 0201 	bic.w	r2, r3, #1
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	011b      	lsls	r3, r3, #4
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f023 030a 	bic.w	r3, r3, #10
 800a5fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4313      	orrs	r3, r2
 800a604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	621a      	str	r2, [r3, #32]
}
 800a612:	bf00      	nop
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a61e:	b480      	push	{r7}
 800a620:	b087      	sub	sp, #28
 800a622:	af00      	add	r7, sp, #0
 800a624:	60f8      	str	r0, [r7, #12]
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	f023 0210 	bic.w	r2, r3, #16
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	031b      	lsls	r3, r3, #12
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4313      	orrs	r3, r2
 800a652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a65a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	011b      	lsls	r3, r3, #4
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	4313      	orrs	r3, r2
 800a664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	621a      	str	r2, [r3, #32]
}
 800a672:	bf00      	nop
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a67e:	b480      	push	{r7}
 800a680:	b085      	sub	sp, #20
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	f043 0307 	orr.w	r3, r3, #7
 800a6a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	609a      	str	r2, [r3, #8]
}
 800a6ac:	bf00      	nop
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	021a      	lsls	r2, r3, #8
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	431a      	orrs	r2, r3
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	609a      	str	r2, [r3, #8]
}
 800a6ec:	bf00      	nop
 800a6ee:	371c      	adds	r7, #28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f003 031f 	and.w	r3, r3, #31
 800a70a:	2201      	movs	r2, #1
 800a70c:	fa02 f303 	lsl.w	r3, r2, r3
 800a710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6a1a      	ldr	r2, [r3, #32]
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	43db      	mvns	r3, r3
 800a71a:	401a      	ands	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6a1a      	ldr	r2, [r3, #32]
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f003 031f 	and.w	r3, r3, #31
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	fa01 f303 	lsl.w	r3, r1, r3
 800a730:	431a      	orrs	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	621a      	str	r2, [r3, #32]
}
 800a736:	bf00      	nop
 800a738:	371c      	adds	r7, #28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
	...

0800a744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a754:	2b01      	cmp	r3, #1
 800a756:	d101      	bne.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a758:	2302      	movs	r3, #2
 800a75a:	e065      	b.n	800a828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2202      	movs	r2, #2
 800a768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a2c      	ldr	r2, [pc, #176]	@ (800a834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d004      	beq.n	800a790 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a2b      	ldr	r2, [pc, #172]	@ (800a838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d108      	bne.n	800a7a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a796:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a7a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d018      	beq.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7d2:	d013      	beq.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a18      	ldr	r2, [pc, #96]	@ (800a83c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d00e      	beq.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a17      	ldr	r2, [pc, #92]	@ (800a840 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d009      	beq.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a12      	ldr	r2, [pc, #72]	@ (800a838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d004      	beq.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a13      	ldr	r2, [pc, #76]	@ (800a844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d10c      	bne.n	800a816 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	40012c00 	.word	0x40012c00
 800a838:	40013400 	.word	0x40013400
 800a83c:	40000400 	.word	0x40000400
 800a840:	40000800 	.word	0x40000800
 800a844:	40014000 	.word	0x40014000

0800a848 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e042      	b.n	800a96c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d106      	bne.n	800a8fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7f9 fd09 	bl	8004310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2224      	movs	r2, #36	@ 0x24
 800a902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f022 0201 	bic.w	r2, r2, #1
 800a914:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 f848 	bl	800b9b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fd79 	bl	800b41c <UART_SetConfig>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d101      	bne.n	800a934 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e01b      	b.n	800a96c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	689a      	ldr	r2, [r3, #8]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0201 	orr.w	r2, r2, #1
 800a962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f001 f8c7 	bl	800baf8 <UART_CheckIdleState>
 800a96a:	4603      	mov	r3, r0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08a      	sub	sp, #40	@ 0x28
 800a978:	af02      	add	r7, sp, #8
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	4613      	mov	r3, r2
 800a982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d17b      	bne.n	800aa86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <HAL_UART_Transmit+0x26>
 800a994:	88fb      	ldrh	r3, [r7, #6]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e074      	b.n	800aa88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2221      	movs	r2, #33	@ 0x21
 800a9aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9ae:	f7f9 ffaf 	bl	8004910 <HAL_GetTick>
 800a9b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	88fa      	ldrh	r2, [r7, #6]
 800a9b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	88fa      	ldrh	r2, [r7, #6]
 800a9c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9cc:	d108      	bne.n	800a9e0 <HAL_UART_Transmit+0x6c>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d104      	bne.n	800a9e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	61bb      	str	r3, [r7, #24]
 800a9de:	e003      	b.n	800a9e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a9e8:	e030      	b.n	800aa4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2180      	movs	r1, #128	@ 0x80
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f001 f929 	bl	800bc4c <UART_WaitOnFlagUntilTimeout>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d005      	beq.n	800aa0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2220      	movs	r2, #32
 800aa04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e03d      	b.n	800aa88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10b      	bne.n	800aa2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	3302      	adds	r3, #2
 800aa26:	61bb      	str	r3, [r7, #24]
 800aa28:	e007      	b.n	800aa3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	781a      	ldrb	r2, [r3, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	3301      	adds	r3, #1
 800aa38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	3b01      	subs	r3, #1
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1c8      	bne.n	800a9ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2140      	movs	r1, #64	@ 0x40
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f001 f8f2 	bl	800bc4c <UART_WaitOnFlagUntilTimeout>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d005      	beq.n	800aa7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2220      	movs	r2, #32
 800aa72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e006      	b.n	800aa88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	e000      	b.n	800aa88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aa86:	2302      	movs	r3, #2
  }
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3720      	adds	r7, #32
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08a      	sub	sp, #40	@ 0x28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaa4:	2b20      	cmp	r3, #32
 800aaa6:	d137      	bne.n	800ab18 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <HAL_UART_Receive_DMA+0x24>
 800aaae:	88fb      	ldrh	r3, [r7, #6]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e030      	b.n	800ab1a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a18      	ldr	r2, [pc, #96]	@ (800ab24 <HAL_UART_Receive_DMA+0x94>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d01f      	beq.n	800ab08 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d018      	beq.n	800ab08 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	613b      	str	r3, [r7, #16]
   return(result);
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aaea:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf4:	623b      	str	r3, [r7, #32]
 800aaf6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	69f9      	ldr	r1, [r7, #28]
 800aafa:	6a3a      	ldr	r2, [r7, #32]
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e6      	bne.n	800aad6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ab08:	88fb      	ldrh	r3, [r7, #6]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	68b9      	ldr	r1, [r7, #8]
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f001 f90a 	bl	800bd28 <UART_Start_Receive_DMA>
 800ab14:	4603      	mov	r3, r0
 800ab16:	e000      	b.n	800ab1a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab18:	2302      	movs	r3, #2
  }
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3728      	adds	r7, #40	@ 0x28
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	40008000 	.word	0x40008000

0800ab28 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b0a0      	sub	sp, #128	@ 0x80
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab38:	e853 3f00 	ldrex	r3, [r3]
 800ab3c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ab3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab40:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800ab44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab50:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab52:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ab54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ab56:	e841 2300 	strex	r3, r2, [r1]
 800ab5a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1e6      	bne.n	800ab30 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3308      	adds	r3, #8
 800ab68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab74:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800ab78:	f023 0301 	bic.w	r3, r3, #1
 800ab7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3308      	adds	r3, #8
 800ab84:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ab86:	657a      	str	r2, [r7, #84]	@ 0x54
 800ab88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ab94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e3      	bne.n	800ab62 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d118      	bne.n	800abd4 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abaa:	e853 3f00 	ldrex	r3, [r3]
 800abae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb2:	f023 0310 	bic.w	r3, r3, #16
 800abb6:	677b      	str	r3, [r7, #116]	@ 0x74
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800abc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800abc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abc8:	e841 2300 	strex	r3, r2, [r1]
 800abcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e6      	bne.n	800aba2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abde:	2b80      	cmp	r3, #128	@ 0x80
 800abe0:	d137      	bne.n	800ac52 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3308      	adds	r3, #8
 800abe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	e853 3f00 	ldrex	r3, [r3]
 800abf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abf8:	673b      	str	r3, [r7, #112]	@ 0x70
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3308      	adds	r3, #8
 800ac00:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ac02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac0a:	e841 2300 	strex	r3, r2, [r1]
 800ac0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e5      	bne.n	800abe2 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d019      	beq.n	800ac52 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac22:	2200      	movs	r2, #0
 800ac24:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fb fb0f 	bl	800624e <HAL_DMA_Abort>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00d      	beq.n	800ac52 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fb fc76 	bl	800652c <HAL_DMA_GetError>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	d105      	bne.n	800ac52 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2210      	movs	r2, #16
 800ac4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ac4e:	2303      	movs	r3, #3
 800ac50:	e073      	b.n	800ad3a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac5c:	2b40      	cmp	r3, #64	@ 0x40
 800ac5e:	d13b      	bne.n	800acd8 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3308      	adds	r3, #8
 800ac66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	e853 3f00 	ldrex	r3, [r3]
 800ac6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac80:	61ba      	str	r2, [r7, #24]
 800ac82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac84:	6979      	ldr	r1, [r7, #20]
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	e841 2300 	strex	r3, r2, [r1]
 800ac8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e5      	bne.n	800ac60 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d01c      	beq.n	800acd8 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aca4:	2200      	movs	r2, #0
 800aca6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fb facd 	bl	800624e <HAL_DMA_Abort>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00e      	beq.n	800acd8 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fb fc33 	bl	800652c <HAL_DMA_GetError>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b20      	cmp	r3, #32
 800acca:	d105      	bne.n	800acd8 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2210      	movs	r2, #16
 800acd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e030      	b.n	800ad3a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	220f      	movs	r2, #15
 800acee:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acf8:	d107      	bne.n	800ad0a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	699a      	ldr	r2, [r3, #24]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f042 0210 	orr.w	r2, r2, #16
 800ad08:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	699a      	ldr	r2, [r3, #24]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0208 	orr.w	r2, r2, #8
 800ad18:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2220      	movs	r2, #32
 800ad26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3780      	adds	r7, #128	@ 0x80
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
	...

0800ad44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b0ba      	sub	sp, #232	@ 0xe8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	69db      	ldr	r3, [r3, #28]
 800ad52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ad72:	4013      	ands	r3, r2
 800ad74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ad78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d11b      	bne.n	800adb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad84:	f003 0320 	and.w	r3, r3, #32
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d015      	beq.n	800adb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad90:	f003 0320 	and.w	r3, r3, #32
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d105      	bne.n	800ada4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 8300 	beq.w	800b3ae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	4798      	blx	r3
      }
      return;
 800adb6:	e2fa      	b.n	800b3ae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800adb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 8123 	beq.w	800b008 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800adc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800adc6:	4b8d      	ldr	r3, [pc, #564]	@ (800affc <HAL_UART_IRQHandler+0x2b8>)
 800adc8:	4013      	ands	r3, r2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800adce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800add2:	4b8b      	ldr	r3, [pc, #556]	@ (800b000 <HAL_UART_IRQHandler+0x2bc>)
 800add4:	4013      	ands	r3, r2
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 8116 	beq.w	800b008 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800addc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d011      	beq.n	800ae0c <HAL_UART_IRQHandler+0xc8>
 800ade8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00b      	beq.n	800ae0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2201      	movs	r2, #1
 800adfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae02:	f043 0201 	orr.w	r2, r3, #1
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae10:	f003 0302 	and.w	r3, r3, #2
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d011      	beq.n	800ae3c <HAL_UART_IRQHandler+0xf8>
 800ae18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00b      	beq.n	800ae3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2202      	movs	r2, #2
 800ae2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae32:	f043 0204 	orr.w	r2, r3, #4
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d011      	beq.n	800ae6c <HAL_UART_IRQHandler+0x128>
 800ae48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2204      	movs	r2, #4
 800ae5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae62:	f043 0202 	orr.w	r2, r3, #2
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae70:	f003 0308 	and.w	r3, r3, #8
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d017      	beq.n	800aea8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae7c:	f003 0320 	and.w	r3, r3, #32
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d105      	bne.n	800ae90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ae88:	4b5c      	ldr	r3, [pc, #368]	@ (800affc <HAL_UART_IRQHandler+0x2b8>)
 800ae8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2208      	movs	r2, #8
 800ae96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae9e:	f043 0208 	orr.w	r2, r3, #8
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d012      	beq.n	800aeda <HAL_UART_IRQHandler+0x196>
 800aeb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00c      	beq.n	800aeda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aed0:	f043 0220 	orr.w	r2, r3, #32
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 8266 	beq.w	800b3b2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeea:	f003 0320 	and.w	r3, r3, #32
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d013      	beq.n	800af1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aef6:	f003 0320 	and.w	r3, r3, #32
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d105      	bne.n	800af0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aefe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af2e:	2b40      	cmp	r3, #64	@ 0x40
 800af30:	d005      	beq.n	800af3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d054      	beq.n	800afe8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 ffd9 	bl	800bef6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4e:	2b40      	cmp	r3, #64	@ 0x40
 800af50:	d146      	bne.n	800afe0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3308      	adds	r3, #8
 800af58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af60:	e853 3f00 	ldrex	r3, [r3]
 800af64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800af68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3308      	adds	r3, #8
 800af7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800af7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800af82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800af8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af8e:	e841 2300 	strex	r3, r2, [r1]
 800af92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800af96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1d9      	bne.n	800af52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d017      	beq.n	800afd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afae:	4a15      	ldr	r2, [pc, #84]	@ (800b004 <HAL_UART_IRQHandler+0x2c0>)
 800afb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fb f9a1 	bl	8006300 <HAL_DMA_Abort_IT>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d019      	beq.n	800aff8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800afd2:	4610      	mov	r0, r2
 800afd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd6:	e00f      	b.n	800aff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fa09 	bl	800b3f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afde:	e00b      	b.n	800aff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fa05 	bl	800b3f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe6:	e007      	b.n	800aff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fa01 	bl	800b3f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aff6:	e1dc      	b.n	800b3b2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff8:	bf00      	nop
    return;
 800affa:	e1da      	b.n	800b3b2 <HAL_UART_IRQHandler+0x66e>
 800affc:	10000001 	.word	0x10000001
 800b000:	04000120 	.word	0x04000120
 800b004:	0800c1ad 	.word	0x0800c1ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	f040 8170 	bne.w	800b2f2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b016:	f003 0310 	and.w	r3, r3, #16
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 8169 	beq.w	800b2f2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b024:	f003 0310 	and.w	r3, r3, #16
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8162 	beq.w	800b2f2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2210      	movs	r2, #16
 800b034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b040:	2b40      	cmp	r3, #64	@ 0x40
 800b042:	f040 80d8 	bne.w	800b1f6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 80af 	beq.w	800b1bc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b068:	429a      	cmp	r2, r3
 800b06a:	f080 80a7 	bcs.w	800b1bc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0320 	and.w	r3, r3, #32
 800b086:	2b00      	cmp	r3, #0
 800b088:	f040 8087 	bne.w	800b19a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b098:	e853 3f00 	ldrex	r3, [r3]
 800b09c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b0a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b0b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b0c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b0ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1da      	bne.n	800b08c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3308      	adds	r3, #8
 800b0dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0e0:	e853 3f00 	ldrex	r3, [r3]
 800b0e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b0e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0e8:	f023 0301 	bic.w	r3, r3, #1
 800b0ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b0fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b0fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b100:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b102:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b10c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e1      	bne.n	800b0d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3308      	adds	r3, #8
 800b118:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3308      	adds	r3, #8
 800b132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b138:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b13c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b13e:	e841 2300 	strex	r3, r2, [r1]
 800b142:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e3      	bne.n	800b112 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2220      	movs	r2, #32
 800b14e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b160:	e853 3f00 	ldrex	r3, [r3]
 800b164:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b168:	f023 0310 	bic.w	r3, r3, #16
 800b16c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	461a      	mov	r2, r3
 800b176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b17a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b17c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b182:	e841 2300 	strex	r3, r2, [r1]
 800b186:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1e4      	bne.n	800b158 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b194:	4618      	mov	r0, r3
 800b196:	f7fb f85a 	bl	800624e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2202      	movs	r2, #2
 800b19e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f925 	bl	800b404 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b1ba:	e0fc      	b.n	800b3b6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	f040 80f5 	bne.w	800b3b6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0320 	and.w	r3, r3, #32
 800b1da:	2b20      	cmp	r3, #32
 800b1dc:	f040 80eb 	bne.w	800b3b6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f908 	bl	800b404 <HAL_UARTEx_RxEventCallback>
      return;
 800b1f4:	e0df      	b.n	800b3b6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b202:	b29b      	uxth	r3, r3
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b210:	b29b      	uxth	r3, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 80d1 	beq.w	800b3ba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 80cc 	beq.w	800b3ba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	e853 3f00 	ldrex	r3, [r3]
 800b22e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b244:	647b      	str	r3, [r7, #68]	@ 0x44
 800b246:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b24a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b24c:	e841 2300 	strex	r3, r2, [r1]
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1e4      	bne.n	800b222 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3308      	adds	r3, #8
 800b25e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b262:	e853 3f00 	ldrex	r3, [r3]
 800b266:	623b      	str	r3, [r7, #32]
   return(result);
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b26e:	f023 0301 	bic.w	r3, r3, #1
 800b272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3308      	adds	r3, #8
 800b27c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b280:	633a      	str	r2, [r7, #48]	@ 0x30
 800b282:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b288:	e841 2300 	strex	r3, r2, [r1]
 800b28c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e1      	bne.n	800b258 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2220      	movs	r2, #32
 800b298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f023 0310 	bic.w	r3, r3, #16
 800b2bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b2ca:	61fb      	str	r3, [r7, #28]
 800b2cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ce:	69b9      	ldr	r1, [r7, #24]
 800b2d0:	69fa      	ldr	r2, [r7, #28]
 800b2d2:	e841 2300 	strex	r3, r2, [r1]
 800b2d6:	617b      	str	r3, [r7, #20]
   return(result);
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e4      	bne.n	800b2a8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f88a 	bl	800b404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2f0:	e063      	b.n	800b3ba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00e      	beq.n	800b31c <HAL_UART_IRQHandler+0x5d8>
 800b2fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b306:	2b00      	cmp	r3, #0
 800b308:	d008      	beq.n	800b31c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b312:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 ff86 	bl	800c226 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b31a:	e051      	b.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b324:	2b00      	cmp	r3, #0
 800b326:	d014      	beq.n	800b352 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b330:	2b00      	cmp	r3, #0
 800b332:	d105      	bne.n	800b340 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d008      	beq.n	800b352 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b344:	2b00      	cmp	r3, #0
 800b346:	d03a      	beq.n	800b3be <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	4798      	blx	r3
    }
    return;
 800b350:	e035      	b.n	800b3be <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d009      	beq.n	800b372 <HAL_UART_IRQHandler+0x62e>
 800b35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 ff30 	bl	800c1d0 <UART_EndTransmit_IT>
    return;
 800b370:	e026      	b.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d009      	beq.n	800b392 <HAL_UART_IRQHandler+0x64e>
 800b37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b382:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 ff5f 	bl	800c24e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b390:	e016      	b.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b396:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d010      	beq.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
 800b39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	da0c      	bge.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 ff47 	bl	800c23a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3ac:	e008      	b.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
      return;
 800b3ae:	bf00      	nop
 800b3b0:	e006      	b.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
    return;
 800b3b2:	bf00      	nop
 800b3b4:	e004      	b.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
      return;
 800b3b6:	bf00      	nop
 800b3b8:	e002      	b.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
      return;
 800b3ba:	bf00      	nop
 800b3bc:	e000      	b.n	800b3c0 <HAL_UART_IRQHandler+0x67c>
    return;
 800b3be:	bf00      	nop
  }
}
 800b3c0:	37e8      	adds	r7, #232	@ 0xe8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop

0800b3c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b41c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b420:	b08c      	sub	sp, #48	@ 0x30
 800b422:	af00      	add	r7, sp, #0
 800b424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	689a      	ldr	r2, [r3, #8]
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	431a      	orrs	r2, r3
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	431a      	orrs	r2, r3
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	69db      	ldr	r3, [r3, #28]
 800b440:	4313      	orrs	r3, r2
 800b442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	4bab      	ldr	r3, [pc, #684]	@ (800b6f8 <UART_SetConfig+0x2dc>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b454:	430b      	orrs	r3, r1
 800b456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	68da      	ldr	r2, [r3, #12]
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	430a      	orrs	r2, r1
 800b46c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4aa0      	ldr	r2, [pc, #640]	@ (800b6fc <UART_SetConfig+0x2e0>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d004      	beq.n	800b488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b484:	4313      	orrs	r3, r2
 800b486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b492:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	6812      	ldr	r2, [r2, #0]
 800b49a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b49c:	430b      	orrs	r3, r1
 800b49e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a6:	f023 010f 	bic.w	r1, r3, #15
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a91      	ldr	r2, [pc, #580]	@ (800b700 <UART_SetConfig+0x2e4>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d125      	bne.n	800b50c <UART_SetConfig+0xf0>
 800b4c0:	4b90      	ldr	r3, [pc, #576]	@ (800b704 <UART_SetConfig+0x2e8>)
 800b4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4c6:	f003 0303 	and.w	r3, r3, #3
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d81a      	bhi.n	800b504 <UART_SetConfig+0xe8>
 800b4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d4 <UART_SetConfig+0xb8>)
 800b4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d4:	0800b4e5 	.word	0x0800b4e5
 800b4d8:	0800b4f5 	.word	0x0800b4f5
 800b4dc:	0800b4ed 	.word	0x0800b4ed
 800b4e0:	0800b4fd 	.word	0x0800b4fd
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ea:	e0d6      	b.n	800b69a <UART_SetConfig+0x27e>
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4f2:	e0d2      	b.n	800b69a <UART_SetConfig+0x27e>
 800b4f4:	2304      	movs	r3, #4
 800b4f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4fa:	e0ce      	b.n	800b69a <UART_SetConfig+0x27e>
 800b4fc:	2308      	movs	r3, #8
 800b4fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b502:	e0ca      	b.n	800b69a <UART_SetConfig+0x27e>
 800b504:	2310      	movs	r3, #16
 800b506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b50a:	e0c6      	b.n	800b69a <UART_SetConfig+0x27e>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a7d      	ldr	r2, [pc, #500]	@ (800b708 <UART_SetConfig+0x2ec>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d138      	bne.n	800b588 <UART_SetConfig+0x16c>
 800b516:	4b7b      	ldr	r3, [pc, #492]	@ (800b704 <UART_SetConfig+0x2e8>)
 800b518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b51c:	f003 030c 	and.w	r3, r3, #12
 800b520:	2b0c      	cmp	r3, #12
 800b522:	d82d      	bhi.n	800b580 <UART_SetConfig+0x164>
 800b524:	a201      	add	r2, pc, #4	@ (adr r2, 800b52c <UART_SetConfig+0x110>)
 800b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52a:	bf00      	nop
 800b52c:	0800b561 	.word	0x0800b561
 800b530:	0800b581 	.word	0x0800b581
 800b534:	0800b581 	.word	0x0800b581
 800b538:	0800b581 	.word	0x0800b581
 800b53c:	0800b571 	.word	0x0800b571
 800b540:	0800b581 	.word	0x0800b581
 800b544:	0800b581 	.word	0x0800b581
 800b548:	0800b581 	.word	0x0800b581
 800b54c:	0800b569 	.word	0x0800b569
 800b550:	0800b581 	.word	0x0800b581
 800b554:	0800b581 	.word	0x0800b581
 800b558:	0800b581 	.word	0x0800b581
 800b55c:	0800b579 	.word	0x0800b579
 800b560:	2300      	movs	r3, #0
 800b562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b566:	e098      	b.n	800b69a <UART_SetConfig+0x27e>
 800b568:	2302      	movs	r3, #2
 800b56a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b56e:	e094      	b.n	800b69a <UART_SetConfig+0x27e>
 800b570:	2304      	movs	r3, #4
 800b572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b576:	e090      	b.n	800b69a <UART_SetConfig+0x27e>
 800b578:	2308      	movs	r3, #8
 800b57a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b57e:	e08c      	b.n	800b69a <UART_SetConfig+0x27e>
 800b580:	2310      	movs	r3, #16
 800b582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b586:	e088      	b.n	800b69a <UART_SetConfig+0x27e>
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a5f      	ldr	r2, [pc, #380]	@ (800b70c <UART_SetConfig+0x2f0>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d125      	bne.n	800b5de <UART_SetConfig+0x1c2>
 800b592:	4b5c      	ldr	r3, [pc, #368]	@ (800b704 <UART_SetConfig+0x2e8>)
 800b594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b598:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b59c:	2b30      	cmp	r3, #48	@ 0x30
 800b59e:	d016      	beq.n	800b5ce <UART_SetConfig+0x1b2>
 800b5a0:	2b30      	cmp	r3, #48	@ 0x30
 800b5a2:	d818      	bhi.n	800b5d6 <UART_SetConfig+0x1ba>
 800b5a4:	2b20      	cmp	r3, #32
 800b5a6:	d00a      	beq.n	800b5be <UART_SetConfig+0x1a2>
 800b5a8:	2b20      	cmp	r3, #32
 800b5aa:	d814      	bhi.n	800b5d6 <UART_SetConfig+0x1ba>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <UART_SetConfig+0x19a>
 800b5b0:	2b10      	cmp	r3, #16
 800b5b2:	d008      	beq.n	800b5c6 <UART_SetConfig+0x1aa>
 800b5b4:	e00f      	b.n	800b5d6 <UART_SetConfig+0x1ba>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5bc:	e06d      	b.n	800b69a <UART_SetConfig+0x27e>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5c4:	e069      	b.n	800b69a <UART_SetConfig+0x27e>
 800b5c6:	2304      	movs	r3, #4
 800b5c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5cc:	e065      	b.n	800b69a <UART_SetConfig+0x27e>
 800b5ce:	2308      	movs	r3, #8
 800b5d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5d4:	e061      	b.n	800b69a <UART_SetConfig+0x27e>
 800b5d6:	2310      	movs	r3, #16
 800b5d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5dc:	e05d      	b.n	800b69a <UART_SetConfig+0x27e>
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a4b      	ldr	r2, [pc, #300]	@ (800b710 <UART_SetConfig+0x2f4>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d125      	bne.n	800b634 <UART_SetConfig+0x218>
 800b5e8:	4b46      	ldr	r3, [pc, #280]	@ (800b704 <UART_SetConfig+0x2e8>)
 800b5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b5f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5f4:	d016      	beq.n	800b624 <UART_SetConfig+0x208>
 800b5f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5f8:	d818      	bhi.n	800b62c <UART_SetConfig+0x210>
 800b5fa:	2b80      	cmp	r3, #128	@ 0x80
 800b5fc:	d00a      	beq.n	800b614 <UART_SetConfig+0x1f8>
 800b5fe:	2b80      	cmp	r3, #128	@ 0x80
 800b600:	d814      	bhi.n	800b62c <UART_SetConfig+0x210>
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <UART_SetConfig+0x1f0>
 800b606:	2b40      	cmp	r3, #64	@ 0x40
 800b608:	d008      	beq.n	800b61c <UART_SetConfig+0x200>
 800b60a:	e00f      	b.n	800b62c <UART_SetConfig+0x210>
 800b60c:	2300      	movs	r3, #0
 800b60e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b612:	e042      	b.n	800b69a <UART_SetConfig+0x27e>
 800b614:	2302      	movs	r3, #2
 800b616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b61a:	e03e      	b.n	800b69a <UART_SetConfig+0x27e>
 800b61c:	2304      	movs	r3, #4
 800b61e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b622:	e03a      	b.n	800b69a <UART_SetConfig+0x27e>
 800b624:	2308      	movs	r3, #8
 800b626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b62a:	e036      	b.n	800b69a <UART_SetConfig+0x27e>
 800b62c:	2310      	movs	r3, #16
 800b62e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b632:	e032      	b.n	800b69a <UART_SetConfig+0x27e>
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a30      	ldr	r2, [pc, #192]	@ (800b6fc <UART_SetConfig+0x2e0>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d12a      	bne.n	800b694 <UART_SetConfig+0x278>
 800b63e:	4b31      	ldr	r3, [pc, #196]	@ (800b704 <UART_SetConfig+0x2e8>)
 800b640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b644:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b648:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b64c:	d01a      	beq.n	800b684 <UART_SetConfig+0x268>
 800b64e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b652:	d81b      	bhi.n	800b68c <UART_SetConfig+0x270>
 800b654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b658:	d00c      	beq.n	800b674 <UART_SetConfig+0x258>
 800b65a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b65e:	d815      	bhi.n	800b68c <UART_SetConfig+0x270>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d003      	beq.n	800b66c <UART_SetConfig+0x250>
 800b664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b668:	d008      	beq.n	800b67c <UART_SetConfig+0x260>
 800b66a:	e00f      	b.n	800b68c <UART_SetConfig+0x270>
 800b66c:	2300      	movs	r3, #0
 800b66e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b672:	e012      	b.n	800b69a <UART_SetConfig+0x27e>
 800b674:	2302      	movs	r3, #2
 800b676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b67a:	e00e      	b.n	800b69a <UART_SetConfig+0x27e>
 800b67c:	2304      	movs	r3, #4
 800b67e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b682:	e00a      	b.n	800b69a <UART_SetConfig+0x27e>
 800b684:	2308      	movs	r3, #8
 800b686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b68a:	e006      	b.n	800b69a <UART_SetConfig+0x27e>
 800b68c:	2310      	movs	r3, #16
 800b68e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b692:	e002      	b.n	800b69a <UART_SetConfig+0x27e>
 800b694:	2310      	movs	r3, #16
 800b696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a17      	ldr	r2, [pc, #92]	@ (800b6fc <UART_SetConfig+0x2e0>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	f040 80a8 	bne.w	800b7f6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6aa:	2b08      	cmp	r3, #8
 800b6ac:	d834      	bhi.n	800b718 <UART_SetConfig+0x2fc>
 800b6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <UART_SetConfig+0x298>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6d9 	.word	0x0800b6d9
 800b6b8:	0800b719 	.word	0x0800b719
 800b6bc:	0800b6e1 	.word	0x0800b6e1
 800b6c0:	0800b719 	.word	0x0800b719
 800b6c4:	0800b6e7 	.word	0x0800b6e7
 800b6c8:	0800b719 	.word	0x0800b719
 800b6cc:	0800b719 	.word	0x0800b719
 800b6d0:	0800b719 	.word	0x0800b719
 800b6d4:	0800b6ef 	.word	0x0800b6ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6d8:	f7fc fe1a 	bl	8008310 <HAL_RCC_GetPCLK1Freq>
 800b6dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b6de:	e021      	b.n	800b724 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b714 <UART_SetConfig+0x2f8>)
 800b6e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b6e4:	e01e      	b.n	800b724 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6e6:	f7fc fda7 	bl	8008238 <HAL_RCC_GetSysClockFreq>
 800b6ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b6ec:	e01a      	b.n	800b724 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b6f4:	e016      	b.n	800b724 <UART_SetConfig+0x308>
 800b6f6:	bf00      	nop
 800b6f8:	cfff69f3 	.word	0xcfff69f3
 800b6fc:	40008000 	.word	0x40008000
 800b700:	40013800 	.word	0x40013800
 800b704:	40021000 	.word	0x40021000
 800b708:	40004400 	.word	0x40004400
 800b70c:	40004800 	.word	0x40004800
 800b710:	40004c00 	.word	0x40004c00
 800b714:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b718:	2300      	movs	r3, #0
 800b71a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b722:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 812a 	beq.w	800b980 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b730:	4a9e      	ldr	r2, [pc, #632]	@ (800b9ac <UART_SetConfig+0x590>)
 800b732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b736:	461a      	mov	r2, r3
 800b738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b73e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	685a      	ldr	r2, [r3, #4]
 800b744:	4613      	mov	r3, r2
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	4413      	add	r3, r2
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d305      	bcc.n	800b75c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d903      	bls.n	800b764 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b762:	e10d      	b.n	800b980 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b766:	2200      	movs	r2, #0
 800b768:	60bb      	str	r3, [r7, #8]
 800b76a:	60fa      	str	r2, [r7, #12]
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b770:	4a8e      	ldr	r2, [pc, #568]	@ (800b9ac <UART_SetConfig+0x590>)
 800b772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b776:	b29b      	uxth	r3, r3
 800b778:	2200      	movs	r2, #0
 800b77a:	603b      	str	r3, [r7, #0]
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b786:	f7f5 faa7 	bl	8000cd8 <__aeabi_uldivmod>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4610      	mov	r0, r2
 800b790:	4619      	mov	r1, r3
 800b792:	f04f 0200 	mov.w	r2, #0
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	020b      	lsls	r3, r1, #8
 800b79c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7a0:	0202      	lsls	r2, r0, #8
 800b7a2:	6979      	ldr	r1, [r7, #20]
 800b7a4:	6849      	ldr	r1, [r1, #4]
 800b7a6:	0849      	lsrs	r1, r1, #1
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	eb12 0804 	adds.w	r8, r2, r4
 800b7b2:	eb43 0905 	adc.w	r9, r3, r5
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	469a      	mov	sl, r3
 800b7be:	4693      	mov	fp, r2
 800b7c0:	4652      	mov	r2, sl
 800b7c2:	465b      	mov	r3, fp
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	4649      	mov	r1, r9
 800b7c8:	f7f5 fa86 	bl	8000cd8 <__aeabi_uldivmod>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7d4:	6a3b      	ldr	r3, [r7, #32]
 800b7d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7da:	d308      	bcc.n	800b7ee <UART_SetConfig+0x3d2>
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7e2:	d204      	bcs.n	800b7ee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6a3a      	ldr	r2, [r7, #32]
 800b7ea:	60da      	str	r2, [r3, #12]
 800b7ec:	e0c8      	b.n	800b980 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b7f4:	e0c4      	b.n	800b980 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7fe:	d167      	bne.n	800b8d0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b800:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b804:	2b08      	cmp	r3, #8
 800b806:	d828      	bhi.n	800b85a <UART_SetConfig+0x43e>
 800b808:	a201      	add	r2, pc, #4	@ (adr r2, 800b810 <UART_SetConfig+0x3f4>)
 800b80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80e:	bf00      	nop
 800b810:	0800b835 	.word	0x0800b835
 800b814:	0800b83d 	.word	0x0800b83d
 800b818:	0800b845 	.word	0x0800b845
 800b81c:	0800b85b 	.word	0x0800b85b
 800b820:	0800b84b 	.word	0x0800b84b
 800b824:	0800b85b 	.word	0x0800b85b
 800b828:	0800b85b 	.word	0x0800b85b
 800b82c:	0800b85b 	.word	0x0800b85b
 800b830:	0800b853 	.word	0x0800b853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b834:	f7fc fd6c 	bl	8008310 <HAL_RCC_GetPCLK1Freq>
 800b838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b83a:	e014      	b.n	800b866 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b83c:	f7fc fd7e 	bl	800833c <HAL_RCC_GetPCLK2Freq>
 800b840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b842:	e010      	b.n	800b866 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b844:	4b5a      	ldr	r3, [pc, #360]	@ (800b9b0 <UART_SetConfig+0x594>)
 800b846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b848:	e00d      	b.n	800b866 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b84a:	f7fc fcf5 	bl	8008238 <HAL_RCC_GetSysClockFreq>
 800b84e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b850:	e009      	b.n	800b866 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b858:	e005      	b.n	800b866 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 8089 	beq.w	800b980 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b872:	4a4e      	ldr	r2, [pc, #312]	@ (800b9ac <UART_SetConfig+0x590>)
 800b874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b878:	461a      	mov	r2, r3
 800b87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b880:	005a      	lsls	r2, r3, #1
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	085b      	lsrs	r3, r3, #1
 800b888:	441a      	add	r2, r3
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b892:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	2b0f      	cmp	r3, #15
 800b898:	d916      	bls.n	800b8c8 <UART_SetConfig+0x4ac>
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8a0:	d212      	bcs.n	800b8c8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	f023 030f 	bic.w	r3, r3, #15
 800b8aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	085b      	lsrs	r3, r3, #1
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	8bfb      	ldrh	r3, [r7, #30]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	8bfa      	ldrh	r2, [r7, #30]
 800b8c4:	60da      	str	r2, [r3, #12]
 800b8c6:	e05b      	b.n	800b980 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b8ce:	e057      	b.n	800b980 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d828      	bhi.n	800b92a <UART_SetConfig+0x50e>
 800b8d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e0 <UART_SetConfig+0x4c4>)
 800b8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8de:	bf00      	nop
 800b8e0:	0800b905 	.word	0x0800b905
 800b8e4:	0800b90d 	.word	0x0800b90d
 800b8e8:	0800b915 	.word	0x0800b915
 800b8ec:	0800b92b 	.word	0x0800b92b
 800b8f0:	0800b91b 	.word	0x0800b91b
 800b8f4:	0800b92b 	.word	0x0800b92b
 800b8f8:	0800b92b 	.word	0x0800b92b
 800b8fc:	0800b92b 	.word	0x0800b92b
 800b900:	0800b923 	.word	0x0800b923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b904:	f7fc fd04 	bl	8008310 <HAL_RCC_GetPCLK1Freq>
 800b908:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b90a:	e014      	b.n	800b936 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b90c:	f7fc fd16 	bl	800833c <HAL_RCC_GetPCLK2Freq>
 800b910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b912:	e010      	b.n	800b936 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b914:	4b26      	ldr	r3, [pc, #152]	@ (800b9b0 <UART_SetConfig+0x594>)
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b918:	e00d      	b.n	800b936 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b91a:	f7fc fc8d 	bl	8008238 <HAL_RCC_GetSysClockFreq>
 800b91e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b920:	e009      	b.n	800b936 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b928:	e005      	b.n	800b936 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b934:	bf00      	nop
    }

    if (pclk != 0U)
 800b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d021      	beq.n	800b980 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b940:	4a1a      	ldr	r2, [pc, #104]	@ (800b9ac <UART_SetConfig+0x590>)
 800b942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b946:	461a      	mov	r2, r3
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	085b      	lsrs	r3, r3, #1
 800b954:	441a      	add	r2, r3
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	2b0f      	cmp	r3, #15
 800b964:	d909      	bls.n	800b97a <UART_SetConfig+0x55e>
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b96c:	d205      	bcs.n	800b97a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	b29a      	uxth	r2, r3
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	60da      	str	r2, [r3, #12]
 800b978:	e002      	b.n	800b980 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2201      	movs	r2, #1
 800b984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2200      	movs	r2, #0
 800b994:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2200      	movs	r2, #0
 800b99a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b99c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3730      	adds	r7, #48	@ 0x30
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9aa:	bf00      	nop
 800b9ac:	08013018 	.word	0x08013018
 800b9b0:	00f42400 	.word	0x00f42400

0800b9b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c0:	f003 0308 	and.w	r3, r3, #8
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00a      	beq.n	800b9de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00a      	beq.n	800ba22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	430a      	orrs	r2, r1
 800ba20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba26:	f003 0304 	and.w	r3, r3, #4
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00a      	beq.n	800ba44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba48:	f003 0310 	and.w	r3, r3, #16
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00a      	beq.n	800ba66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6a:	f003 0320 	and.w	r3, r3, #32
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00a      	beq.n	800ba88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d01a      	beq.n	800baca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	430a      	orrs	r2, r1
 800baa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bab2:	d10a      	bne.n	800baca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	430a      	orrs	r2, r1
 800baea:	605a      	str	r2, [r3, #4]
  }
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b098      	sub	sp, #96	@ 0x60
 800bafc:	af02      	add	r7, sp, #8
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb08:	f7f8 ff02 	bl	8004910 <HAL_GetTick>
 800bb0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 0308 	and.w	r3, r3, #8
 800bb18:	2b08      	cmp	r3, #8
 800bb1a:	d12f      	bne.n	800bb7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb24:	2200      	movs	r2, #0
 800bb26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f88e 	bl	800bc4c <UART_WaitOnFlagUntilTimeout>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d022      	beq.n	800bb7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3e:	e853 3f00 	ldrex	r3, [r3]
 800bb42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	461a      	mov	r2, r3
 800bb52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb54:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb5c:	e841 2300 	strex	r3, r2, [r1]
 800bb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e6      	bne.n	800bb36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e063      	b.n	800bc44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f003 0304 	and.w	r3, r3, #4
 800bb86:	2b04      	cmp	r3, #4
 800bb88:	d149      	bne.n	800bc1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb92:	2200      	movs	r2, #0
 800bb94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f857 	bl	800bc4c <UART_WaitOnFlagUntilTimeout>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d03c      	beq.n	800bc1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbac:	e853 3f00 	ldrex	r3, [r3]
 800bbb0:	623b      	str	r3, [r7, #32]
   return(result);
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbca:	e841 2300 	strex	r3, r2, [r1]
 800bbce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1e6      	bne.n	800bba4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3308      	adds	r3, #8
 800bbdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	e853 3f00 	ldrex	r3, [r3]
 800bbe4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f023 0301 	bic.w	r3, r3, #1
 800bbec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbf6:	61fa      	str	r2, [r7, #28]
 800bbf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfa:	69b9      	ldr	r1, [r7, #24]
 800bbfc:	69fa      	ldr	r2, [r7, #28]
 800bbfe:	e841 2300 	strex	r3, r2, [r1]
 800bc02:	617b      	str	r3, [r7, #20]
   return(result);
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1e5      	bne.n	800bbd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2220      	movs	r2, #32
 800bc0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	e012      	b.n	800bc44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2220      	movs	r2, #32
 800bc22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3758      	adds	r7, #88	@ 0x58
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	603b      	str	r3, [r7, #0]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc5c:	e04f      	b.n	800bcfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc64:	d04b      	beq.n	800bcfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc66:	f7f8 fe53 	bl	8004910 <HAL_GetTick>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	69ba      	ldr	r2, [r7, #24]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d302      	bcc.n	800bc7c <UART_WaitOnFlagUntilTimeout+0x30>
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d101      	bne.n	800bc80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e04e      	b.n	800bd1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f003 0304 	and.w	r3, r3, #4
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d037      	beq.n	800bcfe <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b80      	cmp	r3, #128	@ 0x80
 800bc92:	d034      	beq.n	800bcfe <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2b40      	cmp	r3, #64	@ 0x40
 800bc98:	d031      	beq.n	800bcfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	f003 0308 	and.w	r3, r3, #8
 800bca4:	2b08      	cmp	r3, #8
 800bca6:	d110      	bne.n	800bcca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2208      	movs	r2, #8
 800bcae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f000 f920 	bl	800bef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2208      	movs	r2, #8
 800bcba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e029      	b.n	800bd1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcd8:	d111      	bne.n	800bcfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f000 f906 	bl	800bef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	e00f      	b.n	800bd1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69da      	ldr	r2, [r3, #28]
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	4013      	ands	r3, r2
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	bf0c      	ite	eq
 800bd0e:	2301      	moveq	r3, #1
 800bd10:	2300      	movne	r3, #0
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	461a      	mov	r2, r3
 800bd16:	79fb      	ldrb	r3, [r7, #7]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d0a0      	beq.n	800bc5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
	...

0800bd28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b096      	sub	sp, #88	@ 0x58
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	4613      	mov	r3, r2
 800bd34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	88fa      	ldrh	r2, [r7, #6]
 800bd40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2222      	movs	r2, #34	@ 0x22
 800bd50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d02d      	beq.n	800bdba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd64:	4a40      	ldr	r2, [pc, #256]	@ (800be68 <UART_Start_Receive_DMA+0x140>)
 800bd66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd6e:	4a3f      	ldr	r2, [pc, #252]	@ (800be6c <UART_Start_Receive_DMA+0x144>)
 800bd70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd78:	4a3d      	ldr	r2, [pc, #244]	@ (800be70 <UART_Start_Receive_DMA+0x148>)
 800bd7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd82:	2200      	movs	r2, #0
 800bd84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3324      	adds	r3, #36	@ 0x24
 800bd92:	4619      	mov	r1, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd98:	461a      	mov	r2, r3
 800bd9a:	88fb      	ldrh	r3, [r7, #6]
 800bd9c:	f7fa f9dc 	bl	8006158 <HAL_DMA_Start_IT>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d009      	beq.n	800bdba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2210      	movs	r2, #16
 800bdaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e051      	b.n	800be5e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d018      	beq.n	800bdf4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdca:	e853 3f00 	ldrex	r3, [r3]
 800bdce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdd6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	461a      	mov	r2, r3
 800bdde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bde0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bde2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bde6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bde8:	e841 2300 	strex	r3, r2, [r1]
 800bdec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bdee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1e6      	bne.n	800bdc2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3308      	adds	r3, #8
 800bdfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdfe:	e853 3f00 	ldrex	r3, [r3]
 800be02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be06:	f043 0301 	orr.w	r3, r3, #1
 800be0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3308      	adds	r3, #8
 800be12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be14:	637a      	str	r2, [r7, #52]	@ 0x34
 800be16:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be1c:	e841 2300 	strex	r3, r2, [r1]
 800be20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e5      	bne.n	800bdf4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3308      	adds	r3, #8
 800be2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	e853 3f00 	ldrex	r3, [r3]
 800be36:	613b      	str	r3, [r7, #16]
   return(result);
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3308      	adds	r3, #8
 800be46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be48:	623a      	str	r2, [r7, #32]
 800be4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4c:	69f9      	ldr	r1, [r7, #28]
 800be4e:	6a3a      	ldr	r2, [r7, #32]
 800be50:	e841 2300 	strex	r3, r2, [r1]
 800be54:	61bb      	str	r3, [r7, #24]
   return(result);
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1e5      	bne.n	800be28 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3758      	adds	r7, #88	@ 0x58
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	0800bfc3 	.word	0x0800bfc3
 800be6c:	0800c0ef 	.word	0x0800c0ef
 800be70:	0800c12d 	.word	0x0800c12d

0800be74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be74:	b480      	push	{r7}
 800be76:	b08f      	sub	sp, #60	@ 0x3c
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	61fb      	str	r3, [r7, #28]
   return(result);
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800be90:	637b      	str	r3, [r7, #52]	@ 0x34
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be9c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bea2:	e841 2300 	strex	r3, r2, [r1]
 800bea6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1e6      	bne.n	800be7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3308      	adds	r3, #8
 800beb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bec4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3308      	adds	r3, #8
 800becc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bece:	61ba      	str	r2, [r7, #24]
 800bed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed2:	6979      	ldr	r1, [r7, #20]
 800bed4:	69ba      	ldr	r2, [r7, #24]
 800bed6:	e841 2300 	strex	r3, r2, [r1]
 800beda:	613b      	str	r3, [r7, #16]
   return(result);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1e5      	bne.n	800beae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2220      	movs	r2, #32
 800bee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800beea:	bf00      	nop
 800beec:	373c      	adds	r7, #60	@ 0x3c
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b095      	sub	sp, #84	@ 0x54
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf06:	e853 3f00 	ldrex	r3, [r3]
 800bf0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	461a      	mov	r2, r3
 800bf1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf24:	e841 2300 	strex	r3, r2, [r1]
 800bf28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1e6      	bne.n	800befe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3308      	adds	r3, #8
 800bf36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf38:	6a3b      	ldr	r3, [r7, #32]
 800bf3a:	e853 3f00 	ldrex	r3, [r3]
 800bf3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf46:	f023 0301 	bic.w	r3, r3, #1
 800bf4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3308      	adds	r3, #8
 800bf52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf5c:	e841 2300 	strex	r3, r2, [r1]
 800bf60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1e3      	bne.n	800bf30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d118      	bne.n	800bfa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	f023 0310 	bic.w	r3, r3, #16
 800bf84:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf8e:	61bb      	str	r3, [r7, #24]
 800bf90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	6979      	ldr	r1, [r7, #20]
 800bf94:	69ba      	ldr	r2, [r7, #24]
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e6      	bne.n	800bf70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bfb6:	bf00      	nop
 800bfb8:	3754      	adds	r7, #84	@ 0x54
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b09c      	sub	sp, #112	@ 0x70
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfce:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0320 	and.w	r3, r3, #32
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d171      	bne.n	800c0c2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bfde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bff6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bffa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c004:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c006:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c00a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3308      	adds	r3, #8
 800c01e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c022:	e853 3f00 	ldrex	r3, [r3]
 800c026:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c02a:	f023 0301 	bic.w	r3, r3, #1
 800c02e:	667b      	str	r3, [r7, #100]	@ 0x64
 800c030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3308      	adds	r3, #8
 800c036:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c038:	647a      	str	r2, [r7, #68]	@ 0x44
 800c03a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c03e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c040:	e841 2300 	strex	r3, r2, [r1]
 800c044:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e5      	bne.n	800c018 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c04c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3308      	adds	r3, #8
 800c052:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c056:	e853 3f00 	ldrex	r3, [r3]
 800c05a:	623b      	str	r3, [r7, #32]
   return(result);
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c062:	663b      	str	r3, [r7, #96]	@ 0x60
 800c064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3308      	adds	r3, #8
 800c06a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c06c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c074:	e841 2300 	strex	r3, r2, [r1]
 800c078:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e5      	bne.n	800c04c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c082:	2220      	movs	r2, #32
 800c084:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c08a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d118      	bne.n	800c0c2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	e853 3f00 	ldrex	r3, [r3]
 800c09c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f023 0310 	bic.w	r3, r3, #16
 800c0a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0ae:	61fb      	str	r3, [r7, #28]
 800c0b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b2:	69b9      	ldr	r1, [r7, #24]
 800c0b4:	69fa      	ldr	r2, [r7, #28]
 800c0b6:	e841 2300 	strex	r3, r2, [r1]
 800c0ba:	617b      	str	r3, [r7, #20]
   return(result);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1e6      	bne.n	800c090 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d107      	bne.n	800c0e0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0da:	f7ff f993 	bl	800b404 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0de:	e002      	b.n	800c0e6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c0e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0e2:	f7f8 fa63 	bl	80045ac <HAL_UART_RxCpltCallback>
}
 800c0e6:	bf00      	nop
 800c0e8:	3770      	adds	r7, #112	@ 0x70
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2201      	movs	r2, #1
 800c100:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c106:	2b01      	cmp	r3, #1
 800c108:	d109      	bne.n	800c11e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c110:	085b      	lsrs	r3, r3, #1
 800c112:	b29b      	uxth	r3, r3
 800c114:	4619      	mov	r1, r3
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff f974 	bl	800b404 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c11c:	e002      	b.n	800c124 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f7ff f95c 	bl	800b3dc <HAL_UART_RxHalfCpltCallback>
}
 800c124:	bf00      	nop
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c138:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c140:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c148:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c154:	2b80      	cmp	r3, #128	@ 0x80
 800c156:	d109      	bne.n	800c16c <UART_DMAError+0x40>
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	2b21      	cmp	r3, #33	@ 0x21
 800c15c:	d106      	bne.n	800c16c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2200      	movs	r2, #0
 800c162:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c166:	6978      	ldr	r0, [r7, #20]
 800c168:	f7ff fe84 	bl	800be74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c176:	2b40      	cmp	r3, #64	@ 0x40
 800c178:	d109      	bne.n	800c18e <UART_DMAError+0x62>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b22      	cmp	r3, #34	@ 0x22
 800c17e:	d106      	bne.n	800c18e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	2200      	movs	r2, #0
 800c184:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c188:	6978      	ldr	r0, [r7, #20]
 800c18a:	f7ff feb4 	bl	800bef6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c194:	f043 0210 	orr.w	r2, r3, #16
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c19e:	6978      	ldr	r0, [r7, #20]
 800c1a0:	f7ff f926 	bl	800b3f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1a4:	bf00      	nop
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7ff f914 	bl	800b3f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1c8:	bf00      	nop
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	e853 3f00 	ldrex	r3, [r3]
 800c1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1ec:	61fb      	str	r3, [r7, #28]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	61bb      	str	r3, [r7, #24]
 800c1f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	6979      	ldr	r1, [r7, #20]
 800c1fc:	69ba      	ldr	r2, [r7, #24]
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	613b      	str	r3, [r7, #16]
   return(result);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e6      	bne.n	800c1d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2220      	movs	r2, #32
 800c20e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff f8d5 	bl	800b3c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c21e:	bf00      	nop
 800c220:	3720      	adds	r7, #32
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c226:	b480      	push	{r7}
 800c228:	b083      	sub	sp, #12
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c22e:	bf00      	nop
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c23a:	b480      	push	{r7}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c242:	bf00      	nop
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c256:	bf00      	nop
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c262:	b480      	push	{r7}
 800c264:	b085      	sub	sp, #20
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c270:	2b01      	cmp	r3, #1
 800c272:	d101      	bne.n	800c278 <HAL_UARTEx_DisableFifoMode+0x16>
 800c274:	2302      	movs	r3, #2
 800c276:	e027      	b.n	800c2c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2224      	movs	r2, #36	@ 0x24
 800c284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f022 0201 	bic.w	r2, r2, #1
 800c29e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c2a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2220      	movs	r2, #32
 800c2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d101      	bne.n	800c2ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e02d      	b.n	800c348 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2224      	movs	r2, #36	@ 0x24
 800c2f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f022 0201 	bic.w	r2, r2, #1
 800c312:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	430a      	orrs	r2, r1
 800c326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f84f 	bl	800c3cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2220      	movs	r2, #32
 800c33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c360:	2b01      	cmp	r3, #1
 800c362:	d101      	bne.n	800c368 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c364:	2302      	movs	r3, #2
 800c366:	e02d      	b.n	800c3c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2224      	movs	r2, #36	@ 0x24
 800c374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f022 0201 	bic.w	r2, r2, #1
 800c38e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f811 	bl	800c3cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2220      	movs	r2, #32
 800c3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d108      	bne.n	800c3ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3ec:	e031      	b.n	800c452 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3ee:	2308      	movs	r3, #8
 800c3f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3f2:	2308      	movs	r3, #8
 800c3f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	0e5b      	lsrs	r3, r3, #25
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	f003 0307 	and.w	r3, r3, #7
 800c404:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	0f5b      	lsrs	r3, r3, #29
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c416:	7bbb      	ldrb	r3, [r7, #14]
 800c418:	7b3a      	ldrb	r2, [r7, #12]
 800c41a:	4911      	ldr	r1, [pc, #68]	@ (800c460 <UARTEx_SetNbDataToProcess+0x94>)
 800c41c:	5c8a      	ldrb	r2, [r1, r2]
 800c41e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c422:	7b3a      	ldrb	r2, [r7, #12]
 800c424:	490f      	ldr	r1, [pc, #60]	@ (800c464 <UARTEx_SetNbDataToProcess+0x98>)
 800c426:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c428:	fb93 f3f2 	sdiv	r3, r3, r2
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c434:	7bfb      	ldrb	r3, [r7, #15]
 800c436:	7b7a      	ldrb	r2, [r7, #13]
 800c438:	4909      	ldr	r1, [pc, #36]	@ (800c460 <UARTEx_SetNbDataToProcess+0x94>)
 800c43a:	5c8a      	ldrb	r2, [r1, r2]
 800c43c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c440:	7b7a      	ldrb	r2, [r7, #13]
 800c442:	4908      	ldr	r1, [pc, #32]	@ (800c464 <UARTEx_SetNbDataToProcess+0x98>)
 800c444:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c446:	fb93 f3f2 	sdiv	r3, r3, r2
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c452:	bf00      	nop
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	08013030 	.word	0x08013030
 800c464:	08013038 	.word	0x08013038

0800c468 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c470:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c474:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	b29b      	uxth	r3, r3
 800c482:	43db      	mvns	r3, r3
 800c484:	b29b      	uxth	r3, r3
 800c486:	4013      	ands	r3, r2
 800c488:	b29a      	uxth	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3714      	adds	r7, #20
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b085      	sub	sp, #20
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	1d3b      	adds	r3, r7, #4
 800c4a8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
	...

0800c4dc <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800c4e0:	4907      	ldr	r1, [pc, #28]	@ (800c500 <MX_FATFS_Init+0x24>)
 800c4e2:	4808      	ldr	r0, [pc, #32]	@ (800c504 <MX_FATFS_Init+0x28>)
 800c4e4:	f001 ff7a 	bl	800e3dc <FATFS_LinkDriver>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d002      	beq.n	800c4f4 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800c4ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4f2:	e003      	b.n	800c4fc <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800c4f4:	4b04      	ldr	r3, [pc, #16]	@ (800c508 <MX_FATFS_Init+0x2c>)
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800c4fa:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20001394 	.word	0x20001394
 800c504:	2000001c 	.word	0x2000001c
 800c508:	20001398 	.word	0x20001398

0800c50c <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c510:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c512:	4618      	mov	r0, r3
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	4618      	mov	r0, r3
 800c52a:	f7f5 fce3 	bl	8001ef4 <SD_disk_initialize>
 800c52e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c530:	4618      	mov	r0, r3
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	4603      	mov	r3, r0
 800c540:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800c542:	79fb      	ldrb	r3, [r7, #7]
 800c544:	4618      	mov	r0, r3
 800c546:	f7f5 fdbf 	bl	80020c8 <SD_disk_status>
 800c54a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	607a      	str	r2, [r7, #4]
 800c55e:	603b      	str	r3, [r7, #0]
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800c564:	7bf8      	ldrb	r0, [r7, #15]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	f7f5 fdc2 	bl	80020f4 <SD_disk_read>
 800c570:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	603b      	str	r3, [r7, #0]
 800c586:	4603      	mov	r3, r0
 800c588:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800c58a:	7bf8      	ldrb	r0, [r7, #15]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	68b9      	ldr	r1, [r7, #8]
 800c592:	f7f5 fe19 	bl	80021c8 <SD_disk_write>
 800c596:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	603a      	str	r2, [r7, #0]
 800c5aa:	71fb      	strb	r3, [r7, #7]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800c5b0:	79b9      	ldrb	r1, [r7, #6]
 800c5b2:	79fb      	ldrb	r3, [r7, #7]
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7f5 fe8a 	bl	80022d0 <SD_disk_ioctl>
 800c5bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c5d2:	79fb      	ldrb	r3, [r7, #7]
 800c5d4:	4a08      	ldr	r2, [pc, #32]	@ (800c5f8 <disk_status+0x30>)
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	79fa      	ldrb	r2, [r7, #7]
 800c5e0:	4905      	ldr	r1, [pc, #20]	@ (800c5f8 <disk_status+0x30>)
 800c5e2:	440a      	add	r2, r1
 800c5e4:	7a12      	ldrb	r2, [r2, #8]
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	4798      	blx	r3
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	200013c4 	.word	0x200013c4

0800c5fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c606:	2300      	movs	r3, #0
 800c608:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c60a:	79fb      	ldrb	r3, [r7, #7]
 800c60c:	4a0d      	ldr	r2, [pc, #52]	@ (800c644 <disk_initialize+0x48>)
 800c60e:	5cd3      	ldrb	r3, [r2, r3]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d111      	bne.n	800c638 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c614:	79fb      	ldrb	r3, [r7, #7]
 800c616:	4a0b      	ldr	r2, [pc, #44]	@ (800c644 <disk_initialize+0x48>)
 800c618:	2101      	movs	r1, #1
 800c61a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c61c:	79fb      	ldrb	r3, [r7, #7]
 800c61e:	4a09      	ldr	r2, [pc, #36]	@ (800c644 <disk_initialize+0x48>)
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	79fa      	ldrb	r2, [r7, #7]
 800c62a:	4906      	ldr	r1, [pc, #24]	@ (800c644 <disk_initialize+0x48>)
 800c62c:	440a      	add	r2, r1
 800c62e:	7a12      	ldrb	r2, [r2, #8]
 800c630:	4610      	mov	r0, r2
 800c632:	4798      	blx	r3
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c638:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	200013c4 	.word	0x200013c4

0800c648 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c648:	b590      	push	{r4, r7, lr}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
 800c652:	603b      	str	r3, [r7, #0]
 800c654:	4603      	mov	r3, r0
 800c656:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	4a0a      	ldr	r2, [pc, #40]	@ (800c684 <disk_read+0x3c>)
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	4413      	add	r3, r2
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	689c      	ldr	r4, [r3, #8]
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	4a07      	ldr	r2, [pc, #28]	@ (800c684 <disk_read+0x3c>)
 800c668:	4413      	add	r3, r2
 800c66a:	7a18      	ldrb	r0, [r3, #8]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	68b9      	ldr	r1, [r7, #8]
 800c672:	47a0      	blx	r4
 800c674:	4603      	mov	r3, r0
 800c676:	75fb      	strb	r3, [r7, #23]
  return res;
 800c678:	7dfb      	ldrb	r3, [r7, #23]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd90      	pop	{r4, r7, pc}
 800c682:	bf00      	nop
 800c684:	200013c4 	.word	0x200013c4

0800c688 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c688:	b590      	push	{r4, r7, lr}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	607a      	str	r2, [r7, #4]
 800c692:	603b      	str	r3, [r7, #0]
 800c694:	4603      	mov	r3, r0
 800c696:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	4a0a      	ldr	r2, [pc, #40]	@ (800c6c4 <disk_write+0x3c>)
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	4413      	add	r3, r2
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	68dc      	ldr	r4, [r3, #12]
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	4a07      	ldr	r2, [pc, #28]	@ (800c6c4 <disk_write+0x3c>)
 800c6a8:	4413      	add	r3, r2
 800c6aa:	7a18      	ldrb	r0, [r3, #8]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	47a0      	blx	r4
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	371c      	adds	r7, #28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd90      	pop	{r4, r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	200013c4 	.word	0x200013c4

0800c6c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c6d8:	89fb      	ldrh	r3, [r7, #14]
 800c6da:	021b      	lsls	r3, r3, #8
 800c6dc:	b21a      	sxth	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	b21b      	sxth	r3, r3
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	b21b      	sxth	r3, r3
 800c6e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c6ea:	89fb      	ldrh	r3, [r7, #14]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3303      	adds	r3, #3
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	021b      	lsls	r3, r3, #8
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	3202      	adds	r2, #2
 800c710:	7812      	ldrb	r2, [r2, #0]
 800c712:	4313      	orrs	r3, r2
 800c714:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	021b      	lsls	r3, r3, #8
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	3201      	adds	r2, #1
 800c71e:	7812      	ldrb	r2, [r2, #0]
 800c720:	4313      	orrs	r3, r2
 800c722:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	021b      	lsls	r3, r3, #8
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	7812      	ldrb	r2, [r2, #0]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c730:	68fb      	ldr	r3, [r7, #12]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	460b      	mov	r3, r1
 800c748:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	607a      	str	r2, [r7, #4]
 800c750:	887a      	ldrh	r2, [r7, #2]
 800c752:	b2d2      	uxtb	r2, r2
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	887b      	ldrh	r3, [r7, #2]
 800c758:	0a1b      	lsrs	r3, r3, #8
 800c75a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1c5a      	adds	r2, r3, #1
 800c760:	607a      	str	r2, [r7, #4]
 800c762:	887a      	ldrh	r2, [r7, #2]
 800c764:	b2d2      	uxtb	r2, r2
 800c766:	701a      	strb	r2, [r3, #0]
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	1c5a      	adds	r2, r3, #1
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	b2d2      	uxtb	r2, r2
 800c788:	701a      	strb	r2, [r3, #0]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	0a1b      	lsrs	r3, r3, #8
 800c78e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	607a      	str	r2, [r7, #4]
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	b2d2      	uxtb	r2, r2
 800c79a:	701a      	strb	r2, [r3, #0]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	0a1b      	lsrs	r3, r3, #8
 800c7a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	683a      	ldr	r2, [r7, #0]
 800c7aa:	b2d2      	uxtb	r2, r2
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	0a1b      	lsrs	r3, r3, #8
 800c7b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	1c5a      	adds	r2, r3, #1
 800c7b8:	607a      	str	r2, [r7, #4]
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	b2d2      	uxtb	r2, r2
 800c7be:	701a      	strb	r2, [r3, #0]
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00d      	beq.n	800c802 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c7e6:	693a      	ldr	r2, [r7, #16]
 800c7e8:	1c53      	adds	r3, r2, #1
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	1c59      	adds	r1, r3, #1
 800c7f0:	6179      	str	r1, [r7, #20]
 800c7f2:	7812      	ldrb	r2, [r2, #0]
 800c7f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	607b      	str	r3, [r7, #4]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1f1      	bne.n	800c7e6 <mem_cpy+0x1a>
	}
}
 800c802:	bf00      	nop
 800c804:	371c      	adds	r7, #28
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c80e:	b480      	push	{r7}
 800c810:	b087      	sub	sp, #28
 800c812:	af00      	add	r7, sp, #0
 800c814:	60f8      	str	r0, [r7, #12]
 800c816:	60b9      	str	r1, [r7, #8]
 800c818:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	1c5a      	adds	r2, r3, #1
 800c822:	617a      	str	r2, [r7, #20]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	b2d2      	uxtb	r2, r2
 800c828:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	607b      	str	r3, [r7, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1f3      	bne.n	800c81e <mem_set+0x10>
}
 800c836:	bf00      	nop
 800c838:	bf00      	nop
 800c83a:	371c      	adds	r7, #28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c844:	b480      	push	{r7}
 800c846:	b089      	sub	sp, #36	@ 0x24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	61fb      	str	r3, [r7, #28]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c858:	2300      	movs	r3, #0
 800c85a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	61fa      	str	r2, [r7, #28]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	4619      	mov	r1, r3
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	61ba      	str	r2, [r7, #24]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	1acb      	subs	r3, r1, r3
 800c870:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3b01      	subs	r3, #1
 800c876:	607b      	str	r3, [r7, #4]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <mem_cmp+0x40>
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d0eb      	beq.n	800c85c <mem_cmp+0x18>

	return r;
 800c884:	697b      	ldr	r3, [r7, #20]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3724      	adds	r7, #36	@ 0x24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c892:	b480      	push	{r7}
 800c894:	b083      	sub	sp, #12
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c89c:	e002      	b.n	800c8a4 <chk_chr+0x12>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	607b      	str	r3, [r7, #4]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d005      	beq.n	800c8b8 <chk_chr+0x26>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d1f2      	bne.n	800c89e <chk_chr+0xc>
	return *str;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	60bb      	str	r3, [r7, #8]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	e029      	b.n	800c930 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c8dc:	4a27      	ldr	r2, [pc, #156]	@ (800c97c <chk_lock+0xb4>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	4413      	add	r3, r2
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d01d      	beq.n	800c926 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c8ea:	4a24      	ldr	r2, [pc, #144]	@ (800c97c <chk_lock+0xb4>)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	011b      	lsls	r3, r3, #4
 800c8f0:	4413      	add	r3, r2
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d116      	bne.n	800c92a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c8fc:	4a1f      	ldr	r2, [pc, #124]	@ (800c97c <chk_lock+0xb4>)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	4413      	add	r3, r2
 800c904:	3304      	adds	r3, #4
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d10c      	bne.n	800c92a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c910:	4a1a      	ldr	r2, [pc, #104]	@ (800c97c <chk_lock+0xb4>)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	011b      	lsls	r3, r3, #4
 800c916:	4413      	add	r3, r2
 800c918:	3308      	adds	r3, #8
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c920:	429a      	cmp	r2, r3
 800c922:	d102      	bne.n	800c92a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c924:	e007      	b.n	800c936 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c926:	2301      	movs	r3, #1
 800c928:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3301      	adds	r3, #1
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d9d2      	bls.n	800c8dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d109      	bne.n	800c950 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d102      	bne.n	800c948 <chk_lock+0x80>
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d101      	bne.n	800c94c <chk_lock+0x84>
 800c948:	2300      	movs	r3, #0
 800c94a:	e010      	b.n	800c96e <chk_lock+0xa6>
 800c94c:	2312      	movs	r3, #18
 800c94e:	e00e      	b.n	800c96e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d108      	bne.n	800c968 <chk_lock+0xa0>
 800c956:	4a09      	ldr	r2, [pc, #36]	@ (800c97c <chk_lock+0xb4>)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	011b      	lsls	r3, r3, #4
 800c95c:	4413      	add	r3, r2
 800c95e:	330c      	adds	r3, #12
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c966:	d101      	bne.n	800c96c <chk_lock+0xa4>
 800c968:	2310      	movs	r3, #16
 800c96a:	e000      	b.n	800c96e <chk_lock+0xa6>
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	200013a4 	.word	0x200013a4

0800c980 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c986:	2300      	movs	r3, #0
 800c988:	607b      	str	r3, [r7, #4]
 800c98a:	e002      	b.n	800c992 <enq_lock+0x12>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3301      	adds	r3, #1
 800c990:	607b      	str	r3, [r7, #4]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d806      	bhi.n	800c9a6 <enq_lock+0x26>
 800c998:	4a09      	ldr	r2, [pc, #36]	@ (800c9c0 <enq_lock+0x40>)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	011b      	lsls	r3, r3, #4
 800c99e:	4413      	add	r3, r2
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1f2      	bne.n	800c98c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	bf14      	ite	ne
 800c9ac:	2301      	movne	r3, #1
 800c9ae:	2300      	moveq	r3, #0
 800c9b0:	b2db      	uxtb	r3, r3
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	370c      	adds	r7, #12
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	200013a4 	.word	0x200013a4

0800c9c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]
 800c9d2:	e01f      	b.n	800ca14 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c9d4:	4a41      	ldr	r2, [pc, #260]	@ (800cadc <inc_lock+0x118>)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	011b      	lsls	r3, r3, #4
 800c9da:	4413      	add	r3, r2
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d113      	bne.n	800ca0e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c9e6:	4a3d      	ldr	r2, [pc, #244]	@ (800cadc <inc_lock+0x118>)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	011b      	lsls	r3, r3, #4
 800c9ec:	4413      	add	r3, r2
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d109      	bne.n	800ca0e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c9fa:	4a38      	ldr	r2, [pc, #224]	@ (800cadc <inc_lock+0x118>)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	011b      	lsls	r3, r3, #4
 800ca00:	4413      	add	r3, r2
 800ca02:	3308      	adds	r3, #8
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d006      	beq.n	800ca1c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	3301      	adds	r3, #1
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d9dc      	bls.n	800c9d4 <inc_lock+0x10>
 800ca1a:	e000      	b.n	800ca1e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ca1c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d132      	bne.n	800ca8a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca24:	2300      	movs	r3, #0
 800ca26:	60fb      	str	r3, [r7, #12]
 800ca28:	e002      	b.n	800ca30 <inc_lock+0x6c>
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d806      	bhi.n	800ca44 <inc_lock+0x80>
 800ca36:	4a29      	ldr	r2, [pc, #164]	@ (800cadc <inc_lock+0x118>)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	4413      	add	r3, r2
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1f2      	bne.n	800ca2a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d101      	bne.n	800ca4e <inc_lock+0x8a>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e040      	b.n	800cad0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	4922      	ldr	r1, [pc, #136]	@ (800cadc <inc_lock+0x118>)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	011b      	lsls	r3, r3, #4
 800ca58:	440b      	add	r3, r1
 800ca5a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	689a      	ldr	r2, [r3, #8]
 800ca60:	491e      	ldr	r1, [pc, #120]	@ (800cadc <inc_lock+0x118>)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	011b      	lsls	r3, r3, #4
 800ca66:	440b      	add	r3, r1
 800ca68:	3304      	adds	r3, #4
 800ca6a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	695a      	ldr	r2, [r3, #20]
 800ca70:	491a      	ldr	r1, [pc, #104]	@ (800cadc <inc_lock+0x118>)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	440b      	add	r3, r1
 800ca78:	3308      	adds	r3, #8
 800ca7a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ca7c:	4a17      	ldr	r2, [pc, #92]	@ (800cadc <inc_lock+0x118>)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	011b      	lsls	r3, r3, #4
 800ca82:	4413      	add	r3, r2
 800ca84:	330c      	adds	r3, #12
 800ca86:	2200      	movs	r2, #0
 800ca88:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d009      	beq.n	800caa4 <inc_lock+0xe0>
 800ca90:	4a12      	ldr	r2, [pc, #72]	@ (800cadc <inc_lock+0x118>)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	011b      	lsls	r3, r3, #4
 800ca96:	4413      	add	r3, r2
 800ca98:	330c      	adds	r3, #12
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <inc_lock+0xe0>
 800caa0:	2300      	movs	r3, #0
 800caa2:	e015      	b.n	800cad0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d108      	bne.n	800cabc <inc_lock+0xf8>
 800caaa:	4a0c      	ldr	r2, [pc, #48]	@ (800cadc <inc_lock+0x118>)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	011b      	lsls	r3, r3, #4
 800cab0:	4413      	add	r3, r2
 800cab2:	330c      	adds	r3, #12
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	3301      	adds	r3, #1
 800cab8:	b29a      	uxth	r2, r3
 800caba:	e001      	b.n	800cac0 <inc_lock+0xfc>
 800cabc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cac0:	4906      	ldr	r1, [pc, #24]	@ (800cadc <inc_lock+0x118>)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	011b      	lsls	r3, r3, #4
 800cac6:	440b      	add	r3, r1
 800cac8:	330c      	adds	r3, #12
 800caca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3301      	adds	r3, #1
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3714      	adds	r7, #20
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	200013a4 	.word	0x200013a4

0800cae0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cae8:	2300      	movs	r3, #0
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	e010      	b.n	800cb10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800caee:	4a0d      	ldr	r2, [pc, #52]	@ (800cb24 <clear_lock+0x44>)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	011b      	lsls	r3, r3, #4
 800caf4:	4413      	add	r3, r2
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d105      	bne.n	800cb0a <clear_lock+0x2a>
 800cafe:	4a09      	ldr	r2, [pc, #36]	@ (800cb24 <clear_lock+0x44>)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	011b      	lsls	r3, r3, #4
 800cb04:	4413      	add	r3, r2
 800cb06:	2200      	movs	r2, #0
 800cb08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	60fb      	str	r3, [r7, #12]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d9eb      	bls.n	800caee <clear_lock+0xe>
	}
}
 800cb16:	bf00      	nop
 800cb18:	bf00      	nop
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	200013a4 	.word	0x200013a4

0800cb28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	78db      	ldrb	r3, [r3, #3]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d034      	beq.n	800cba6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	7858      	ldrb	r0, [r3, #1]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	f7ff fd9a 	bl	800c688 <disk_write>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	73fb      	strb	r3, [r7, #15]
 800cb5e:	e022      	b.n	800cba6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a1b      	ldr	r3, [r3, #32]
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	1ad2      	subs	r2, r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d217      	bcs.n	800cba6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	789b      	ldrb	r3, [r3, #2]
 800cb7a:	613b      	str	r3, [r7, #16]
 800cb7c:	e010      	b.n	800cba0 <sync_window+0x78>
					wsect += fs->fsize;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	4413      	add	r3, r2
 800cb86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7858      	ldrb	r0, [r3, #1]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb92:	2301      	movs	r3, #1
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	f7ff fd77 	bl	800c688 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	613b      	str	r3, [r7, #16]
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d8eb      	bhi.n	800cb7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3718      	adds	r7, #24
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d01b      	beq.n	800cc00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff ffad 	bl	800cb28 <sync_window>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d113      	bne.n	800cc00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	7858      	ldrb	r0, [r3, #1]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	f7ff fd2f 	bl	800c648 <disk_read>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d004      	beq.n	800cbfa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cbf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbf4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	3b02      	subs	r3, #2
 800cc18:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	3b02      	subs	r3, #2
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d301      	bcc.n	800cc2a <clust2sect+0x20>
 800cc26:	2300      	movs	r3, #0
 800cc28:	e008      	b.n	800cc3c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	895b      	ldrh	r3, [r3, #10]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	fb03 f202 	mul.w	r2, r3, r2
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc3a:	4413      	add	r3, r2
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d904      	bls.n	800cc68 <get_fat+0x20>
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	695b      	ldr	r3, [r3, #20]
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d302      	bcc.n	800cc6e <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc68:	2301      	movs	r3, #1
 800cc6a:	617b      	str	r3, [r7, #20]
 800cc6c:	e08e      	b.n	800cd8c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc72:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	2b03      	cmp	r3, #3
 800cc7a:	d061      	beq.n	800cd40 <get_fat+0xf8>
 800cc7c:	2b03      	cmp	r3, #3
 800cc7e:	dc7b      	bgt.n	800cd78 <get_fat+0x130>
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d002      	beq.n	800cc8a <get_fat+0x42>
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d041      	beq.n	800cd0c <get_fat+0xc4>
 800cc88:	e076      	b.n	800cd78 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	60fb      	str	r3, [r7, #12]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	085b      	lsrs	r3, r3, #1
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	4413      	add	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	6a1a      	ldr	r2, [r3, #32]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	0a5b      	lsrs	r3, r3, #9
 800cca0:	4413      	add	r3, r2
 800cca2:	4619      	mov	r1, r3
 800cca4:	6938      	ldr	r0, [r7, #16]
 800cca6:	f7ff ff83 	bl	800cbb0 <move_window>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d166      	bne.n	800cd7e <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	60fa      	str	r2, [r7, #12]
 800ccb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccc2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	6a1a      	ldr	r2, [r3, #32]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	0a5b      	lsrs	r3, r3, #9
 800cccc:	4413      	add	r3, r2
 800ccce:	4619      	mov	r1, r3
 800ccd0:	6938      	ldr	r0, [r7, #16]
 800ccd2:	f7ff ff6d 	bl	800cbb0 <move_window>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d152      	bne.n	800cd82 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	4413      	add	r3, r2
 800cce6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccea:	021b      	lsls	r3, r3, #8
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <get_fat+0xba>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	091b      	lsrs	r3, r3, #4
 800cd00:	e002      	b.n	800cd08 <get_fat+0xc0>
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd08:	617b      	str	r3, [r7, #20]
			break;
 800cd0a:	e03f      	b.n	800cd8c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	6a1a      	ldr	r2, [r3, #32]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	0a1b      	lsrs	r3, r3, #8
 800cd14:	4413      	add	r3, r2
 800cd16:	4619      	mov	r1, r3
 800cd18:	6938      	ldr	r0, [r7, #16]
 800cd1a:	f7ff ff49 	bl	800cbb0 <move_window>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d130      	bne.n	800cd86 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	005b      	lsls	r3, r3, #1
 800cd2e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cd32:	4413      	add	r3, r2
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7ff fcc7 	bl	800c6c8 <ld_word>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	617b      	str	r3, [r7, #20]
			break;
 800cd3e:	e025      	b.n	800cd8c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	6a1a      	ldr	r2, [r3, #32]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	09db      	lsrs	r3, r3, #7
 800cd48:	4413      	add	r3, r2
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	6938      	ldr	r0, [r7, #16]
 800cd4e:	f7ff ff2f 	bl	800cbb0 <move_window>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d118      	bne.n	800cd8a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cd66:	4413      	add	r3, r2
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7ff fcc5 	bl	800c6f8 <ld_dword>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cd74:	617b      	str	r3, [r7, #20]
			break;
 800cd76:	e009      	b.n	800cd8c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cd78:	2301      	movs	r3, #1
 800cd7a:	617b      	str	r3, [r7, #20]
 800cd7c:	e006      	b.n	800cd8c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd7e:	bf00      	nop
 800cd80:	e004      	b.n	800cd8c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd82:	bf00      	nop
 800cd84:	e002      	b.n	800cd8c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd86:	bf00      	nop
 800cd88:	e000      	b.n	800cd8c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd8a:	bf00      	nop
		}
	}

	return val;
 800cd8c:	697b      	ldr	r3, [r7, #20]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cd96:	b590      	push	{r4, r7, lr}
 800cd98:	b089      	sub	sp, #36	@ 0x24
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cda2:	2302      	movs	r3, #2
 800cda4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	f240 80d9 	bls.w	800cf60 <put_fat+0x1ca>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	f080 80d3 	bcs.w	800cf60 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	f000 8096 	beq.w	800cef0 <put_fat+0x15a>
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	f300 80cb 	bgt.w	800cf60 <put_fat+0x1ca>
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d002      	beq.n	800cdd4 <put_fat+0x3e>
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d06e      	beq.n	800ceb0 <put_fat+0x11a>
 800cdd2:	e0c5      	b.n	800cf60 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	61bb      	str	r3, [r7, #24]
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	085b      	lsrs	r3, r3, #1
 800cddc:	69ba      	ldr	r2, [r7, #24]
 800cdde:	4413      	add	r3, r2
 800cde0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6a1a      	ldr	r2, [r3, #32]
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	0a5b      	lsrs	r3, r3, #9
 800cdea:	4413      	add	r3, r2
 800cdec:	4619      	mov	r1, r3
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f7ff fede 	bl	800cbb0 <move_window>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdf8:	7ffb      	ldrb	r3, [r7, #31]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f040 80a9 	bne.w	800cf52 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	1c59      	adds	r1, r3, #1
 800ce0a:	61b9      	str	r1, [r7, #24]
 800ce0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce10:	4413      	add	r3, r2
 800ce12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00d      	beq.n	800ce3a <put_fat+0xa4>
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	b25b      	sxtb	r3, r3
 800ce24:	f003 030f 	and.w	r3, r3, #15
 800ce28:	b25a      	sxtb	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	011b      	lsls	r3, r3, #4
 800ce30:	b25b      	sxtb	r3, r3
 800ce32:	4313      	orrs	r3, r2
 800ce34:	b25b      	sxtb	r3, r3
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	e001      	b.n	800ce3e <put_fat+0xa8>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2201      	movs	r2, #1
 800ce46:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6a1a      	ldr	r2, [r3, #32]
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	0a5b      	lsrs	r3, r3, #9
 800ce50:	4413      	add	r3, r2
 800ce52:	4619      	mov	r1, r3
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f7ff feab 	bl	800cbb0 <move_window>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce5e:	7ffb      	ldrb	r3, [r7, #31]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d178      	bne.n	800cf56 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce70:	4413      	add	r3, r2
 800ce72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <put_fat+0xf0>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	091b      	lsrs	r3, r3, #4
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	e00e      	b.n	800cea4 <put_fat+0x10e>
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	b25b      	sxtb	r3, r3
 800ce8c:	f023 030f 	bic.w	r3, r3, #15
 800ce90:	b25a      	sxtb	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	0a1b      	lsrs	r3, r3, #8
 800ce96:	b25b      	sxtb	r3, r3
 800ce98:	f003 030f 	and.w	r3, r3, #15
 800ce9c:	b25b      	sxtb	r3, r3
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	b25b      	sxtb	r3, r3
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	70da      	strb	r2, [r3, #3]
			break;
 800ceae:	e057      	b.n	800cf60 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6a1a      	ldr	r2, [r3, #32]
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	0a1b      	lsrs	r3, r3, #8
 800ceb8:	4413      	add	r3, r2
 800ceba:	4619      	mov	r1, r3
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f7ff fe77 	bl	800cbb0 <move_window>
 800cec2:	4603      	mov	r3, r0
 800cec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cec6:	7ffb      	ldrb	r3, [r7, #31]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d146      	bne.n	800cf5a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ceda:	4413      	add	r3, r2
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	b292      	uxth	r2, r2
 800cee0:	4611      	mov	r1, r2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff fc2b 	bl	800c73e <st_word>
			fs->wflag = 1;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2201      	movs	r2, #1
 800ceec:	70da      	strb	r2, [r3, #3]
			break;
 800ceee:	e037      	b.n	800cf60 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6a1a      	ldr	r2, [r3, #32]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	09db      	lsrs	r3, r3, #7
 800cef8:	4413      	add	r3, r2
 800cefa:	4619      	mov	r1, r3
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f7ff fe57 	bl	800cbb0 <move_window>
 800cf02:	4603      	mov	r3, r0
 800cf04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf06:	7ffb      	ldrb	r3, [r7, #31]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d128      	bne.n	800cf5e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cf20:	4413      	add	r3, r2
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fbe8 	bl	800c6f8 <ld_dword>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cf2e:	4323      	orrs	r3, r4
 800cf30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cf40:	4413      	add	r3, r2
 800cf42:	6879      	ldr	r1, [r7, #4]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff fc15 	bl	800c774 <st_dword>
			fs->wflag = 1;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	70da      	strb	r2, [r3, #3]
			break;
 800cf50:	e006      	b.n	800cf60 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cf52:	bf00      	nop
 800cf54:	e004      	b.n	800cf60 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cf56:	bf00      	nop
 800cf58:	e002      	b.n	800cf60 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cf5a:	bf00      	nop
 800cf5c:	e000      	b.n	800cf60 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cf5e:	bf00      	nop
		}
	}
	return res;
 800cf60:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3724      	adds	r7, #36	@ 0x24
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd90      	pop	{r4, r7, pc}

0800cf6a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b088      	sub	sp, #32
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d904      	bls.n	800cf90 <remove_chain+0x26>
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d301      	bcc.n	800cf94 <remove_chain+0x2a>
 800cf90:	2302      	movs	r3, #2
 800cf92:	e04b      	b.n	800d02c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00c      	beq.n	800cfb4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cf9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf9e:	6879      	ldr	r1, [r7, #4]
 800cfa0:	69b8      	ldr	r0, [r7, #24]
 800cfa2:	f7ff fef8 	bl	800cd96 <put_fat>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cfaa:	7ffb      	ldrb	r3, [r7, #31]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <remove_chain+0x4a>
 800cfb0:	7ffb      	ldrb	r3, [r7, #31]
 800cfb2:	e03b      	b.n	800d02c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cfb4:	68b9      	ldr	r1, [r7, #8]
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f7ff fe46 	bl	800cc48 <get_fat>
 800cfbc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d031      	beq.n	800d028 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d101      	bne.n	800cfce <remove_chain+0x64>
 800cfca:	2302      	movs	r3, #2
 800cfcc:	e02e      	b.n	800d02c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cfd4:	d101      	bne.n	800cfda <remove_chain+0x70>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e028      	b.n	800d02c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cfda:	2200      	movs	r2, #0
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	69b8      	ldr	r0, [r7, #24]
 800cfe0:	f7ff fed9 	bl	800cd96 <put_fat>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cfe8:	7ffb      	ldrb	r3, [r7, #31]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <remove_chain+0x88>
 800cfee:	7ffb      	ldrb	r3, [r7, #31]
 800cff0:	e01c      	b.n	800d02c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	691a      	ldr	r2, [r3, #16]
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	695b      	ldr	r3, [r3, #20]
 800cffa:	3b02      	subs	r3, #2
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d20b      	bcs.n	800d018 <remove_chain+0xae>
			fs->free_clst++;
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	791b      	ldrb	r3, [r3, #4]
 800d00e:	f043 0301 	orr.w	r3, r3, #1
 800d012:	b2da      	uxtb	r2, r3
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	695b      	ldr	r3, [r3, #20]
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	429a      	cmp	r2, r3
 800d024:	d3c6      	bcc.n	800cfb4 <remove_chain+0x4a>
 800d026:	e000      	b.n	800d02a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d028:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3720      	adds	r7, #32
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b088      	sub	sp, #32
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10d      	bne.n	800d066 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d004      	beq.n	800d060 <create_chain+0x2c>
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	695b      	ldr	r3, [r3, #20]
 800d05a:	69ba      	ldr	r2, [r7, #24]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d31b      	bcc.n	800d098 <create_chain+0x64>
 800d060:	2301      	movs	r3, #1
 800d062:	61bb      	str	r3, [r7, #24]
 800d064:	e018      	b.n	800d098 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f7ff fded 	bl	800cc48 <get_fat>
 800d06e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2b01      	cmp	r3, #1
 800d074:	d801      	bhi.n	800d07a <create_chain+0x46>
 800d076:	2301      	movs	r3, #1
 800d078:	e070      	b.n	800d15c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d080:	d101      	bne.n	800d086 <create_chain+0x52>
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	e06a      	b.n	800d15c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d201      	bcs.n	800d094 <create_chain+0x60>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	e063      	b.n	800d15c <create_chain+0x128>
		scl = clst;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	695b      	ldr	r3, [r3, #20]
 800d0a6:	69fa      	ldr	r2, [r7, #28]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d307      	bcc.n	800d0bc <create_chain+0x88>
				ncl = 2;
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d0b0:	69fa      	ldr	r2, [r7, #28]
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d901      	bls.n	800d0bc <create_chain+0x88>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e04f      	b.n	800d15c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d0bc:	69f9      	ldr	r1, [r7, #28]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7ff fdc2 	bl	800cc48 <get_fat>
 800d0c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00e      	beq.n	800d0ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d003      	beq.n	800d0da <create_chain+0xa6>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0d8:	d101      	bne.n	800d0de <create_chain+0xaa>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	e03e      	b.n	800d15c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d0de:	69fa      	ldr	r2, [r7, #28]
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d1da      	bne.n	800d09c <create_chain+0x68>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	e038      	b.n	800d15c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d0ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d0ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0f0:	69f9      	ldr	r1, [r7, #28]
 800d0f2:	6938      	ldr	r0, [r7, #16]
 800d0f4:	f7ff fe4f 	bl	800cd96 <put_fat>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d109      	bne.n	800d116 <create_chain+0xe2>
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d006      	beq.n	800d116 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d108:	69fa      	ldr	r2, [r7, #28]
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	6938      	ldr	r0, [r7, #16]
 800d10e:	f7ff fe42 	bl	800cd96 <put_fat>
 800d112:	4603      	mov	r3, r0
 800d114:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d116:	7dfb      	ldrb	r3, [r7, #23]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d116      	bne.n	800d14a <create_chain+0x116>
		fs->last_clst = ncl;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	69fa      	ldr	r2, [r7, #28]
 800d120:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	691a      	ldr	r2, [r3, #16]
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	3b02      	subs	r3, #2
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d804      	bhi.n	800d13a <create_chain+0x106>
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	1e5a      	subs	r2, r3, #1
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	791b      	ldrb	r3, [r3, #4]
 800d13e:	f043 0301 	orr.w	r3, r3, #1
 800d142:	b2da      	uxtb	r2, r3
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	711a      	strb	r2, [r3, #4]
 800d148:	e007      	b.n	800d15a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d14a:	7dfb      	ldrb	r3, [r7, #23]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d102      	bne.n	800d156 <create_chain+0x122>
 800d150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d154:	e000      	b.n	800d158 <create_chain+0x124>
 800d156:	2301      	movs	r3, #1
 800d158:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d15a:	69fb      	ldr	r3, [r7, #28]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3720      	adds	r7, #32
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b086      	sub	sp, #24
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d17a:	d204      	bcs.n	800d186 <dir_sdi+0x22>
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	f003 031f 	and.w	r3, r3, #31
 800d182:	2b00      	cmp	r3, #0
 800d184:	d001      	beq.n	800d18a <dir_sdi+0x26>
		return FR_INT_ERR;
 800d186:	2302      	movs	r3, #2
 800d188:	e063      	b.n	800d252 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d106      	bne.n	800d1aa <dir_sdi+0x46>
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d902      	bls.n	800d1aa <dir_sdi+0x46>
		clst = fs->dirbase;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10c      	bne.n	800d1ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	095b      	lsrs	r3, r3, #5
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	8912      	ldrh	r2, [r2, #8]
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d301      	bcc.n	800d1c0 <dir_sdi+0x5c>
 800d1bc:	2302      	movs	r3, #2
 800d1be:	e048      	b.n	800d252 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	61da      	str	r2, [r3, #28]
 800d1c8:	e029      	b.n	800d21e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	895b      	ldrh	r3, [r3, #10]
 800d1ce:	025b      	lsls	r3, r3, #9
 800d1d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d1d2:	e019      	b.n	800d208 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6979      	ldr	r1, [r7, #20]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7ff fd35 	bl	800cc48 <get_fat>
 800d1de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1e6:	d101      	bne.n	800d1ec <dir_sdi+0x88>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e032      	b.n	800d252 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d904      	bls.n	800d1fc <dir_sdi+0x98>
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d301      	bcc.n	800d200 <dir_sdi+0x9c>
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	e028      	b.n	800d252 <dir_sdi+0xee>
			ofs -= csz;
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d2e1      	bcs.n	800d1d4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d210:	6979      	ldr	r1, [r7, #20]
 800d212:	6938      	ldr	r0, [r7, #16]
 800d214:	f7ff fcf9 	bl	800cc0a <clust2sect>
 800d218:	4602      	mov	r2, r0
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	69db      	ldr	r3, [r3, #28]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d101      	bne.n	800d230 <dir_sdi+0xcc>
 800d22c:	2302      	movs	r3, #2
 800d22e:	e010      	b.n	800d252 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	69da      	ldr	r2, [r3, #28]
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	0a5b      	lsrs	r3, r3, #9
 800d238:	441a      	add	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d24a:	441a      	add	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b086      	sub	sp, #24
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	3320      	adds	r3, #32
 800d270:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	69db      	ldr	r3, [r3, #28]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <dir_next+0x28>
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d280:	d301      	bcc.n	800d286 <dir_next+0x2c>
 800d282:	2304      	movs	r3, #4
 800d284:	e0aa      	b.n	800d3dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f040 8098 	bne.w	800d3c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	69db      	ldr	r3, [r3, #28]
 800d296:	1c5a      	adds	r2, r3, #1
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d10b      	bne.n	800d2bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	095b      	lsrs	r3, r3, #5
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	8912      	ldrh	r2, [r2, #8]
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	f0c0 8088 	bcc.w	800d3c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	61da      	str	r2, [r3, #28]
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	e08f      	b.n	800d3dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	0a5b      	lsrs	r3, r3, #9
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	8952      	ldrh	r2, [r2, #10]
 800d2c4:	3a01      	subs	r2, #1
 800d2c6:	4013      	ands	r3, r2
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d17a      	bne.n	800d3c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f7ff fcb7 	bl	800cc48 <get_fat>
 800d2da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d801      	bhi.n	800d2e6 <dir_next+0x8c>
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	e07a      	b.n	800d3dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2ec:	d101      	bne.n	800d2f2 <dir_next+0x98>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e074      	b.n	800d3dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	697a      	ldr	r2, [r7, #20]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d358      	bcc.n	800d3ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d104      	bne.n	800d30c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	61da      	str	r2, [r3, #28]
 800d308:	2304      	movs	r3, #4
 800d30a:	e067      	b.n	800d3dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	4619      	mov	r1, r3
 800d314:	4610      	mov	r0, r2
 800d316:	f7ff fe8d 	bl	800d034 <create_chain>
 800d31a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <dir_next+0xcc>
 800d322:	2307      	movs	r3, #7
 800d324:	e05a      	b.n	800d3dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d101      	bne.n	800d330 <dir_next+0xd6>
 800d32c:	2302      	movs	r3, #2
 800d32e:	e055      	b.n	800d3dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d336:	d101      	bne.n	800d33c <dir_next+0xe2>
 800d338:	2301      	movs	r3, #1
 800d33a:	e04f      	b.n	800d3dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f7ff fbf3 	bl	800cb28 <sync_window>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <dir_next+0xf2>
 800d348:	2301      	movs	r3, #1
 800d34a:	e047      	b.n	800d3dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3330      	adds	r3, #48	@ 0x30
 800d350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d354:	2100      	movs	r1, #0
 800d356:	4618      	mov	r0, r3
 800d358:	f7ff fa59 	bl	800c80e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d35c:	2300      	movs	r3, #0
 800d35e:	613b      	str	r3, [r7, #16]
 800d360:	6979      	ldr	r1, [r7, #20]
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f7ff fc51 	bl	800cc0a <clust2sect>
 800d368:	4602      	mov	r2, r0
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d36e:	e012      	b.n	800d396 <dir_next+0x13c>
						fs->wflag = 1;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2201      	movs	r2, #1
 800d374:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f7ff fbd6 	bl	800cb28 <sync_window>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <dir_next+0x12c>
 800d382:	2301      	movs	r3, #1
 800d384:	e02a      	b.n	800d3dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	3301      	adds	r3, #1
 800d38a:	613b      	str	r3, [r7, #16]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d390:	1c5a      	adds	r2, r3, #1
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	895b      	ldrh	r3, [r3, #10]
 800d39a:	461a      	mov	r2, r3
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d3e6      	bcc.n	800d370 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	1ad2      	subs	r2, r2, r3
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	697a      	ldr	r2, [r7, #20]
 800d3b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d3b4:	6979      	ldr	r1, [r7, #20]
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f7ff fc27 	bl	800cc0a <clust2sect>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d4:	441a      	add	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3718      	adds	r7, #24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7ff feb4 	bl	800d164 <dir_sdi>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d12b      	bne.n	800d45e <dir_alloc+0x7a>
		n = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	69db      	ldr	r3, [r3, #28]
 800d40e:	4619      	mov	r1, r3
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f7ff fbcd 	bl	800cbb0 <move_window>
 800d416:	4603      	mov	r3, r0
 800d418:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d11d      	bne.n	800d45c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a1b      	ldr	r3, [r3, #32]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2be5      	cmp	r3, #229	@ 0xe5
 800d428:	d004      	beq.n	800d434 <dir_alloc+0x50>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d107      	bne.n	800d444 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	3301      	adds	r3, #1
 800d438:	613b      	str	r3, [r7, #16]
 800d43a:	693a      	ldr	r2, [r7, #16]
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d102      	bne.n	800d448 <dir_alloc+0x64>
 800d442:	e00c      	b.n	800d45e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d444:	2300      	movs	r3, #0
 800d446:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d448:	2101      	movs	r1, #1
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7ff ff05 	bl	800d25a <dir_next>
 800d450:	4603      	mov	r3, r0
 800d452:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d454:	7dfb      	ldrb	r3, [r7, #23]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0d7      	beq.n	800d40a <dir_alloc+0x26>
 800d45a:	e000      	b.n	800d45e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d45c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
 800d460:	2b04      	cmp	r3, #4
 800d462:	d101      	bne.n	800d468 <dir_alloc+0x84>
 800d464:	2307      	movs	r3, #7
 800d466:	75fb      	strb	r3, [r7, #23]
	return res;
 800d468:	7dfb      	ldrb	r3, [r7, #23]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b084      	sub	sp, #16
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
 800d47a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	331a      	adds	r3, #26
 800d480:	4618      	mov	r0, r3
 800d482:	f7ff f921 	bl	800c6c8 <ld_word>
 800d486:	4603      	mov	r3, r0
 800d488:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d109      	bne.n	800d4a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	3314      	adds	r3, #20
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff f916 	bl	800c6c8 <ld_word>
 800d49c:	4603      	mov	r3, r0
 800d49e:	041b      	lsls	r3, r3, #16
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	331a      	adds	r3, #26
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	b292      	uxth	r2, r2
 800d4c4:	4611      	mov	r1, r2
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7ff f939 	bl	800c73e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d109      	bne.n	800d4e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	f103 0214 	add.w	r2, r3, #20
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	0c1b      	lsrs	r3, r3, #16
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	f7ff f92b 	bl	800c73e <st_word>
	}
}
 800d4e8:	bf00      	nop
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d4fe:	2100      	movs	r1, #0
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff fe2f 	bl	800d164 <dir_sdi>
 800d506:	4603      	mov	r3, r0
 800d508:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d50a:	7dfb      	ldrb	r3, [r7, #23]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <dir_find+0x24>
 800d510:	7dfb      	ldrb	r3, [r7, #23]
 800d512:	e03e      	b.n	800d592 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	69db      	ldr	r3, [r3, #28]
 800d518:	4619      	mov	r1, r3
 800d51a:	6938      	ldr	r0, [r7, #16]
 800d51c:	f7ff fb48 	bl	800cbb0 <move_window>
 800d520:	4603      	mov	r3, r0
 800d522:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d524:	7dfb      	ldrb	r3, [r7, #23]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d12f      	bne.n	800d58a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a1b      	ldr	r3, [r3, #32]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <dir_find+0x4e>
 800d538:	2304      	movs	r3, #4
 800d53a:	75fb      	strb	r3, [r7, #23]
 800d53c:	e028      	b.n	800d590 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	330b      	adds	r3, #11
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a1b      	ldr	r3, [r3, #32]
 800d554:	330b      	adds	r3, #11
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	f003 0308 	and.w	r3, r3, #8
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10a      	bne.n	800d576 <dir_find+0x86>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6a18      	ldr	r0, [r3, #32]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3324      	adds	r3, #36	@ 0x24
 800d568:	220b      	movs	r2, #11
 800d56a:	4619      	mov	r1, r3
 800d56c:	f7ff f96a 	bl	800c844 <mem_cmp>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00b      	beq.n	800d58e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d576:	2100      	movs	r1, #0
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7ff fe6e 	bl	800d25a <dir_next>
 800d57e:	4603      	mov	r3, r0
 800d580:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d582:	7dfb      	ldrb	r3, [r7, #23]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0c5      	beq.n	800d514 <dir_find+0x24>
 800d588:	e002      	b.n	800d590 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d58a:	bf00      	nop
 800d58c:	e000      	b.n	800d590 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d58e:	bf00      	nop

	return res;
 800d590:	7dfb      	ldrb	r3, [r7, #23]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3718      	adds	r7, #24
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b084      	sub	sp, #16
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff ff1a 	bl	800d3e4 <dir_alloc>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d11c      	bne.n	800d5f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	69db      	ldr	r3, [r3, #28]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	68b8      	ldr	r0, [r7, #8]
 800d5c2:	f7ff faf5 	bl	800cbb0 <move_window>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d111      	bne.n	800d5f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	2100      	movs	r1, #0
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff f918 	bl	800c80e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a18      	ldr	r0, [r3, #32]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	3324      	adds	r3, #36	@ 0x24
 800d5e6:	220b      	movs	r2, #11
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	f7ff f8ef 	bl	800c7cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
	...

0800d600 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b088      	sub	sp, #32
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	60fb      	str	r3, [r7, #12]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3324      	adds	r3, #36	@ 0x24
 800d614:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d616:	220b      	movs	r2, #11
 800d618:	2120      	movs	r1, #32
 800d61a:	68b8      	ldr	r0, [r7, #8]
 800d61c:	f7ff f8f7 	bl	800c80e <mem_set>
	si = i = 0; ni = 8;
 800d620:	2300      	movs	r3, #0
 800d622:	613b      	str	r3, [r7, #16]
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	61fb      	str	r3, [r7, #28]
 800d628:	2308      	movs	r3, #8
 800d62a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	1c5a      	adds	r2, r3, #1
 800d630:	61fa      	str	r2, [r7, #28]
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	4413      	add	r3, r2
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d63a:	7efb      	ldrb	r3, [r7, #27]
 800d63c:	2b20      	cmp	r3, #32
 800d63e:	d94e      	bls.n	800d6de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d640:	7efb      	ldrb	r3, [r7, #27]
 800d642:	2b2f      	cmp	r3, #47	@ 0x2f
 800d644:	d006      	beq.n	800d654 <create_name+0x54>
 800d646:	7efb      	ldrb	r3, [r7, #27]
 800d648:	2b5c      	cmp	r3, #92	@ 0x5c
 800d64a:	d110      	bne.n	800d66e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d64c:	e002      	b.n	800d654 <create_name+0x54>
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	3301      	adds	r3, #1
 800d652:	61fb      	str	r3, [r7, #28]
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	4413      	add	r3, r2
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d65e:	d0f6      	beq.n	800d64e <create_name+0x4e>
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	4413      	add	r3, r2
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	2b5c      	cmp	r3, #92	@ 0x5c
 800d66a:	d0f0      	beq.n	800d64e <create_name+0x4e>
			break;
 800d66c:	e038      	b.n	800d6e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d66e:	7efb      	ldrb	r3, [r7, #27]
 800d670:	2b2e      	cmp	r3, #46	@ 0x2e
 800d672:	d003      	beq.n	800d67c <create_name+0x7c>
 800d674:	693a      	ldr	r2, [r7, #16]
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d30c      	bcc.n	800d696 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	2b0b      	cmp	r3, #11
 800d680:	d002      	beq.n	800d688 <create_name+0x88>
 800d682:	7efb      	ldrb	r3, [r7, #27]
 800d684:	2b2e      	cmp	r3, #46	@ 0x2e
 800d686:	d001      	beq.n	800d68c <create_name+0x8c>
 800d688:	2306      	movs	r3, #6
 800d68a:	e044      	b.n	800d716 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d68c:	2308      	movs	r3, #8
 800d68e:	613b      	str	r3, [r7, #16]
 800d690:	230b      	movs	r3, #11
 800d692:	617b      	str	r3, [r7, #20]
			continue;
 800d694:	e022      	b.n	800d6dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d696:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	da04      	bge.n	800d6a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d69e:	7efb      	ldrb	r3, [r7, #27]
 800d6a0:	3b80      	subs	r3, #128	@ 0x80
 800d6a2:	4a1f      	ldr	r2, [pc, #124]	@ (800d720 <create_name+0x120>)
 800d6a4:	5cd3      	ldrb	r3, [r2, r3]
 800d6a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d6a8:	7efb      	ldrb	r3, [r7, #27]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	481d      	ldr	r0, [pc, #116]	@ (800d724 <create_name+0x124>)
 800d6ae:	f7ff f8f0 	bl	800c892 <chk_chr>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d001      	beq.n	800d6bc <create_name+0xbc>
 800d6b8:	2306      	movs	r3, #6
 800d6ba:	e02c      	b.n	800d716 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d6bc:	7efb      	ldrb	r3, [r7, #27]
 800d6be:	2b60      	cmp	r3, #96	@ 0x60
 800d6c0:	d905      	bls.n	800d6ce <create_name+0xce>
 800d6c2:	7efb      	ldrb	r3, [r7, #27]
 800d6c4:	2b7a      	cmp	r3, #122	@ 0x7a
 800d6c6:	d802      	bhi.n	800d6ce <create_name+0xce>
 800d6c8:	7efb      	ldrb	r3, [r7, #27]
 800d6ca:	3b20      	subs	r3, #32
 800d6cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	613a      	str	r2, [r7, #16]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	7efa      	ldrb	r2, [r7, #27]
 800d6da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d6dc:	e7a6      	b.n	800d62c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d6de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	441a      	add	r2, r3
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <create_name+0xf4>
 800d6f0:	2306      	movs	r3, #6
 800d6f2:	e010      	b.n	800d716 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	2be5      	cmp	r3, #229	@ 0xe5
 800d6fa:	d102      	bne.n	800d702 <create_name+0x102>
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2205      	movs	r2, #5
 800d700:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d702:	7efb      	ldrb	r3, [r7, #27]
 800d704:	2b20      	cmp	r3, #32
 800d706:	d801      	bhi.n	800d70c <create_name+0x10c>
 800d708:	2204      	movs	r2, #4
 800d70a:	e000      	b.n	800d70e <create_name+0x10e>
 800d70c:	2200      	movs	r2, #0
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	330b      	adds	r3, #11
 800d712:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d714:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d716:	4618      	mov	r0, r3
 800d718:	3720      	adds	r7, #32
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	08013040 	.word	0x08013040
 800d724:	08012fbc 	.word	0x08012fbc

0800d728 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d73c:	e002      	b.n	800d744 <follow_path+0x1c>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	3301      	adds	r3, #1
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	2b2f      	cmp	r3, #47	@ 0x2f
 800d74a:	d0f8      	beq.n	800d73e <follow_path+0x16>
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	2b5c      	cmp	r3, #92	@ 0x5c
 800d752:	d0f4      	beq.n	800d73e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	2200      	movs	r2, #0
 800d758:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	2b1f      	cmp	r3, #31
 800d760:	d80a      	bhi.n	800d778 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2280      	movs	r2, #128	@ 0x80
 800d766:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d76a:	2100      	movs	r1, #0
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7ff fcf9 	bl	800d164 <dir_sdi>
 800d772:	4603      	mov	r3, r0
 800d774:	75fb      	strb	r3, [r7, #23]
 800d776:	e043      	b.n	800d800 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d778:	463b      	mov	r3, r7
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7ff ff3f 	bl	800d600 <create_name>
 800d782:	4603      	mov	r3, r0
 800d784:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d786:	7dfb      	ldrb	r3, [r7, #23]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d134      	bne.n	800d7f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff feaf 	bl	800d4f0 <dir_find>
 800d792:	4603      	mov	r3, r0
 800d794:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d79c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00a      	beq.n	800d7ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d7a4:	7dfb      	ldrb	r3, [r7, #23]
 800d7a6:	2b04      	cmp	r3, #4
 800d7a8:	d127      	bne.n	800d7fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d7aa:	7afb      	ldrb	r3, [r7, #11]
 800d7ac:	f003 0304 	and.w	r3, r3, #4
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d122      	bne.n	800d7fa <follow_path+0xd2>
 800d7b4:	2305      	movs	r3, #5
 800d7b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d7b8:	e01f      	b.n	800d7fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d7ba:	7afb      	ldrb	r3, [r7, #11]
 800d7bc:	f003 0304 	and.w	r3, r3, #4
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d11c      	bne.n	800d7fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	799b      	ldrb	r3, [r3, #6]
 800d7c8:	f003 0310 	and.w	r3, r3, #16
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d102      	bne.n	800d7d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d7d0:	2305      	movs	r3, #5
 800d7d2:	75fb      	strb	r3, [r7, #23]
 800d7d4:	e014      	b.n	800d800 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	695b      	ldr	r3, [r3, #20]
 800d7e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7e4:	4413      	add	r3, r2
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f7ff fe42 	bl	800d472 <ld_clust>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d7f4:	e7c0      	b.n	800d778 <follow_path+0x50>
			if (res != FR_OK) break;
 800d7f6:	bf00      	nop
 800d7f8:	e002      	b.n	800d800 <follow_path+0xd8>
				break;
 800d7fa:	bf00      	nop
 800d7fc:	e000      	b.n	800d800 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d7fe:	bf00      	nop
			}
		}
	}

	return res;
 800d800:	7dfb      	ldrb	r3, [r7, #23]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3718      	adds	r7, #24
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d80a:	b480      	push	{r7}
 800d80c:	b087      	sub	sp, #28
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d816:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d031      	beq.n	800d884 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	617b      	str	r3, [r7, #20]
 800d826:	e002      	b.n	800d82e <get_ldnumber+0x24>
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	3301      	adds	r3, #1
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	2b20      	cmp	r3, #32
 800d834:	d903      	bls.n	800d83e <get_ldnumber+0x34>
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	2b3a      	cmp	r3, #58	@ 0x3a
 800d83c:	d1f4      	bne.n	800d828 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2b3a      	cmp	r3, #58	@ 0x3a
 800d844:	d11c      	bne.n	800d880 <get_ldnumber+0x76>
			tp = *path;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	1c5a      	adds	r2, r3, #1
 800d850:	60fa      	str	r2, [r7, #12]
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	3b30      	subs	r3, #48	@ 0x30
 800d856:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	2b09      	cmp	r3, #9
 800d85c:	d80e      	bhi.n	800d87c <get_ldnumber+0x72>
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	429a      	cmp	r2, r3
 800d864:	d10a      	bne.n	800d87c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d107      	bne.n	800d87c <get_ldnumber+0x72>
					vol = (int)i;
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	3301      	adds	r3, #1
 800d874:	617b      	str	r3, [r7, #20]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	697a      	ldr	r2, [r7, #20]
 800d87a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	e002      	b.n	800d886 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d880:	2300      	movs	r3, #0
 800d882:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d884:	693b      	ldr	r3, [r7, #16]
}
 800d886:	4618      	mov	r0, r3
 800d888:	371c      	adds	r7, #28
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
	...

0800d894 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	70da      	strb	r2, [r3, #3]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff f97e 	bl	800cbb0 <move_window>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <check_fs+0x2a>
 800d8ba:	2304      	movs	r3, #4
 800d8bc:	e038      	b.n	800d930 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3330      	adds	r3, #48	@ 0x30
 800d8c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fefe 	bl	800c6c8 <ld_word>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d001      	beq.n	800d8dc <check_fs+0x48>
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e029      	b.n	800d930 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d8e2:	2be9      	cmp	r3, #233	@ 0xe9
 800d8e4:	d009      	beq.n	800d8fa <check_fs+0x66>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d8ec:	2beb      	cmp	r3, #235	@ 0xeb
 800d8ee:	d11e      	bne.n	800d92e <check_fs+0x9a>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d8f6:	2b90      	cmp	r3, #144	@ 0x90
 800d8f8:	d119      	bne.n	800d92e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	3330      	adds	r3, #48	@ 0x30
 800d8fe:	3336      	adds	r3, #54	@ 0x36
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe fef9 	bl	800c6f8 <ld_dword>
 800d906:	4603      	mov	r3, r0
 800d908:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d90c:	4a0a      	ldr	r2, [pc, #40]	@ (800d938 <check_fs+0xa4>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d101      	bne.n	800d916 <check_fs+0x82>
 800d912:	2300      	movs	r3, #0
 800d914:	e00c      	b.n	800d930 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3330      	adds	r3, #48	@ 0x30
 800d91a:	3352      	adds	r3, #82	@ 0x52
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7fe feeb 	bl	800c6f8 <ld_dword>
 800d922:	4603      	mov	r3, r0
 800d924:	4a05      	ldr	r2, [pc, #20]	@ (800d93c <check_fs+0xa8>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d101      	bne.n	800d92e <check_fs+0x9a>
 800d92a:	2300      	movs	r3, #0
 800d92c:	e000      	b.n	800d930 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d92e:	2302      	movs	r3, #2
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	00544146 	.word	0x00544146
 800d93c:	33544146 	.word	0x33544146

0800d940 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b096      	sub	sp, #88	@ 0x58
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	4613      	mov	r3, r2
 800d94c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2200      	movs	r2, #0
 800d952:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f7ff ff58 	bl	800d80a <get_ldnumber>
 800d95a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d95e:	2b00      	cmp	r3, #0
 800d960:	da01      	bge.n	800d966 <find_volume+0x26>
 800d962:	230b      	movs	r3, #11
 800d964:	e22d      	b.n	800ddc2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d966:	4aa1      	ldr	r2, [pc, #644]	@ (800dbec <find_volume+0x2ac>)
 800d968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d96e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d972:	2b00      	cmp	r3, #0
 800d974:	d101      	bne.n	800d97a <find_volume+0x3a>
 800d976:	230c      	movs	r3, #12
 800d978:	e223      	b.n	800ddc2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d97e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	f023 0301 	bic.w	r3, r3, #1
 800d986:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d01a      	beq.n	800d9c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d992:	785b      	ldrb	r3, [r3, #1]
 800d994:	4618      	mov	r0, r3
 800d996:	f7fe fe17 	bl	800c5c8 <disk_status>
 800d99a:	4603      	mov	r3, r0
 800d99c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d9a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9a4:	f003 0301 	and.w	r3, r3, #1
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10c      	bne.n	800d9c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d9ac:	79fb      	ldrb	r3, [r7, #7]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d007      	beq.n	800d9c2 <find_volume+0x82>
 800d9b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9b6:	f003 0304 	and.w	r3, r3, #4
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d9be:	230a      	movs	r3, #10
 800d9c0:	e1ff      	b.n	800ddc2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	e1fd      	b.n	800ddc2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d6:	785b      	ldrb	r3, [r3, #1]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe fe0f 	bl	800c5fc <disk_initialize>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d9e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e1e6      	b.n	800ddc2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d9f4:	79fb      	ldrb	r3, [r7, #7]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <find_volume+0xca>
 800d9fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9fe:	f003 0304 	and.w	r3, r3, #4
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800da06:	230a      	movs	r3, #10
 800da08:	e1db      	b.n	800ddc2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800da0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800da10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800da12:	f7ff ff3f 	bl	800d894 <check_fs>
 800da16:	4603      	mov	r3, r0
 800da18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800da1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da20:	2b02      	cmp	r3, #2
 800da22:	d149      	bne.n	800dab8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da24:	2300      	movs	r3, #0
 800da26:	643b      	str	r3, [r7, #64]	@ 0x40
 800da28:	e01e      	b.n	800da68 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800da2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da32:	011b      	lsls	r3, r3, #4
 800da34:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800da38:	4413      	add	r3, r2
 800da3a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3e:	3304      	adds	r3, #4
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d006      	beq.n	800da54 <find_volume+0x114>
 800da46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da48:	3308      	adds	r3, #8
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe fe54 	bl	800c6f8 <ld_dword>
 800da50:	4602      	mov	r2, r0
 800da52:	e000      	b.n	800da56 <find_volume+0x116>
 800da54:	2200      	movs	r2, #0
 800da56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	3358      	adds	r3, #88	@ 0x58
 800da5c:	443b      	add	r3, r7
 800da5e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da64:	3301      	adds	r3, #1
 800da66:	643b      	str	r3, [r7, #64]	@ 0x40
 800da68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d9dd      	bls.n	800da2a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800da6e:	2300      	movs	r3, #0
 800da70:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800da72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <find_volume+0x13e>
 800da78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da7a:	3b01      	subs	r3, #1
 800da7c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800da7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da80:	009b      	lsls	r3, r3, #2
 800da82:	3358      	adds	r3, #88	@ 0x58
 800da84:	443b      	add	r3, r7
 800da86:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800da8a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800da8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d005      	beq.n	800da9e <find_volume+0x15e>
 800da92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800da94:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800da96:	f7ff fefd 	bl	800d894 <check_fs>
 800da9a:	4603      	mov	r3, r0
 800da9c:	e000      	b.n	800daa0 <find_volume+0x160>
 800da9e:	2303      	movs	r3, #3
 800daa0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800daa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d905      	bls.n	800dab8 <find_volume+0x178>
 800daac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daae:	3301      	adds	r3, #1
 800dab0:	643b      	str	r3, [r7, #64]	@ 0x40
 800dab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dab4:	2b03      	cmp	r3, #3
 800dab6:	d9e2      	bls.n	800da7e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dab8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dabc:	2b04      	cmp	r3, #4
 800dabe:	d101      	bne.n	800dac4 <find_volume+0x184>
 800dac0:	2301      	movs	r3, #1
 800dac2:	e17e      	b.n	800ddc2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dac4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d901      	bls.n	800dad0 <find_volume+0x190>
 800dacc:	230d      	movs	r3, #13
 800dace:	e178      	b.n	800ddc2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad2:	3330      	adds	r3, #48	@ 0x30
 800dad4:	330b      	adds	r3, #11
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fe fdf6 	bl	800c6c8 <ld_word>
 800dadc:	4603      	mov	r3, r0
 800dade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dae2:	d001      	beq.n	800dae8 <find_volume+0x1a8>
 800dae4:	230d      	movs	r3, #13
 800dae6:	e16c      	b.n	800ddc2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daea:	3330      	adds	r3, #48	@ 0x30
 800daec:	3316      	adds	r3, #22
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fe fdea 	bl	800c6c8 <ld_word>
 800daf4:	4603      	mov	r3, r0
 800daf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800daf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <find_volume+0x1cc>
 800dafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db00:	3330      	adds	r3, #48	@ 0x30
 800db02:	3324      	adds	r3, #36	@ 0x24
 800db04:	4618      	mov	r0, r3
 800db06:	f7fe fdf7 	bl	800c6f8 <ld_dword>
 800db0a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800db0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800db10:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800db12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db14:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800db18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800db1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1e:	789b      	ldrb	r3, [r3, #2]
 800db20:	2b01      	cmp	r3, #1
 800db22:	d005      	beq.n	800db30 <find_volume+0x1f0>
 800db24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db26:	789b      	ldrb	r3, [r3, #2]
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d001      	beq.n	800db30 <find_volume+0x1f0>
 800db2c:	230d      	movs	r3, #13
 800db2e:	e148      	b.n	800ddc2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800db30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db32:	789b      	ldrb	r3, [r3, #2]
 800db34:	461a      	mov	r2, r3
 800db36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db38:	fb02 f303 	mul.w	r3, r2, r3
 800db3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800db3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db44:	461a      	mov	r2, r3
 800db46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800db4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db4c:	895b      	ldrh	r3, [r3, #10]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d008      	beq.n	800db64 <find_volume+0x224>
 800db52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db54:	895b      	ldrh	r3, [r3, #10]
 800db56:	461a      	mov	r2, r3
 800db58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5a:	895b      	ldrh	r3, [r3, #10]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	4013      	ands	r3, r2
 800db60:	2b00      	cmp	r3, #0
 800db62:	d001      	beq.n	800db68 <find_volume+0x228>
 800db64:	230d      	movs	r3, #13
 800db66:	e12c      	b.n	800ddc2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800db68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6a:	3330      	adds	r3, #48	@ 0x30
 800db6c:	3311      	adds	r3, #17
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe fdaa 	bl	800c6c8 <ld_word>
 800db74:	4603      	mov	r3, r0
 800db76:	461a      	mov	r2, r3
 800db78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800db7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7e:	891b      	ldrh	r3, [r3, #8]
 800db80:	f003 030f 	and.w	r3, r3, #15
 800db84:	b29b      	uxth	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d001      	beq.n	800db8e <find_volume+0x24e>
 800db8a:	230d      	movs	r3, #13
 800db8c:	e119      	b.n	800ddc2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800db8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db90:	3330      	adds	r3, #48	@ 0x30
 800db92:	3313      	adds	r3, #19
 800db94:	4618      	mov	r0, r3
 800db96:	f7fe fd97 	bl	800c6c8 <ld_word>
 800db9a:	4603      	mov	r3, r0
 800db9c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800db9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d106      	bne.n	800dbb2 <find_volume+0x272>
 800dba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba6:	3330      	adds	r3, #48	@ 0x30
 800dba8:	3320      	adds	r3, #32
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe fda4 	bl	800c6f8 <ld_dword>
 800dbb0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	3330      	adds	r3, #48	@ 0x30
 800dbb6:	330e      	adds	r3, #14
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fe fd85 	bl	800c6c8 <ld_word>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dbc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d101      	bne.n	800dbcc <find_volume+0x28c>
 800dbc8:	230d      	movs	r3, #13
 800dbca:	e0fa      	b.n	800ddc2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dbcc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dbce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbd0:	4413      	add	r3, r2
 800dbd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbd4:	8912      	ldrh	r2, [r2, #8]
 800dbd6:	0912      	lsrs	r2, r2, #4
 800dbd8:	b292      	uxth	r2, r2
 800dbda:	4413      	add	r3, r2
 800dbdc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dbde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d204      	bcs.n	800dbf0 <find_volume+0x2b0>
 800dbe6:	230d      	movs	r3, #13
 800dbe8:	e0eb      	b.n	800ddc2 <find_volume+0x482>
 800dbea:	bf00      	nop
 800dbec:	2000139c 	.word	0x2000139c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dbf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbf8:	8952      	ldrh	r2, [r2, #10]
 800dbfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbfe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d101      	bne.n	800dc0a <find_volume+0x2ca>
 800dc06:	230d      	movs	r3, #13
 800dc08:	e0db      	b.n	800ddc2 <find_volume+0x482>
		fmt = FS_FAT32;
 800dc0a:	2303      	movs	r3, #3
 800dc0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc12:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d802      	bhi.n	800dc20 <find_volume+0x2e0>
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc22:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d802      	bhi.n	800dc30 <find_volume+0x2f0>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc32:	1c9a      	adds	r2, r3, #2
 800dc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc36:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc3c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dc3e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dc40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc42:	441a      	add	r2, r3
 800dc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc46:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dc48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc4c:	441a      	add	r2, r3
 800dc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc50:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800dc52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d11e      	bne.n	800dc98 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5c:	3330      	adds	r3, #48	@ 0x30
 800dc5e:	332a      	adds	r3, #42	@ 0x2a
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fe fd31 	bl	800c6c8 <ld_word>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d001      	beq.n	800dc70 <find_volume+0x330>
 800dc6c:	230d      	movs	r3, #13
 800dc6e:	e0a8      	b.n	800ddc2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc72:	891b      	ldrh	r3, [r3, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <find_volume+0x33c>
 800dc78:	230d      	movs	r3, #13
 800dc7a:	e0a2      	b.n	800ddc2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7e:	3330      	adds	r3, #48	@ 0x30
 800dc80:	332c      	adds	r3, #44	@ 0x2c
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fe fd38 	bl	800c6f8 <ld_dword>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc8c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc90:	695b      	ldr	r3, [r3, #20]
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc96:	e01f      	b.n	800dcd8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9a:	891b      	ldrh	r3, [r3, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <find_volume+0x364>
 800dca0:	230d      	movs	r3, #13
 800dca2:	e08e      	b.n	800ddc2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca6:	6a1a      	ldr	r2, [r3, #32]
 800dca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcaa:	441a      	add	r2, r3
 800dcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcae:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dcb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d103      	bne.n	800dcc0 <find_volume+0x380>
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcba:	695b      	ldr	r3, [r3, #20]
 800dcbc:	005b      	lsls	r3, r3, #1
 800dcbe:	e00a      	b.n	800dcd6 <find_volume+0x396>
 800dcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc2:	695a      	ldr	r2, [r3, #20]
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	005b      	lsls	r3, r3, #1
 800dcc8:	4413      	add	r3, r2
 800dcca:	085a      	lsrs	r2, r3, #1
 800dccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcce:	695b      	ldr	r3, [r3, #20]
 800dcd0:	f003 0301 	and.w	r3, r3, #1
 800dcd4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dcd6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcda:	699a      	ldr	r2, [r3, #24]
 800dcdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcde:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800dce2:	0a5b      	lsrs	r3, r3, #9
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d201      	bcs.n	800dcec <find_volume+0x3ac>
 800dce8:	230d      	movs	r3, #13
 800dcea:	e06a      	b.n	800ddc2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dcf2:	611a      	str	r2, [r3, #16]
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf6:	691a      	ldr	r2, [r3, #16]
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800dcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfe:	2280      	movs	r2, #128	@ 0x80
 800dd00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dd02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	d149      	bne.n	800dd9e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0c:	3330      	adds	r3, #48	@ 0x30
 800dd0e:	3330      	adds	r3, #48	@ 0x30
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe fcd9 	bl	800c6c8 <ld_word>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d140      	bne.n	800dd9e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dd1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd1e:	3301      	adds	r3, #1
 800dd20:	4619      	mov	r1, r3
 800dd22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd24:	f7fe ff44 	bl	800cbb0 <move_window>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d137      	bne.n	800dd9e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd30:	2200      	movs	r2, #0
 800dd32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd36:	3330      	adds	r3, #48	@ 0x30
 800dd38:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fe fcc3 	bl	800c6c8 <ld_word>
 800dd42:	4603      	mov	r3, r0
 800dd44:	461a      	mov	r2, r3
 800dd46:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d127      	bne.n	800dd9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd50:	3330      	adds	r3, #48	@ 0x30
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe fcd0 	bl	800c6f8 <ld_dword>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	4a1c      	ldr	r2, [pc, #112]	@ (800ddcc <find_volume+0x48c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d11e      	bne.n	800dd9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd62:	3330      	adds	r3, #48	@ 0x30
 800dd64:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fe fcc5 	bl	800c6f8 <ld_dword>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	4a17      	ldr	r2, [pc, #92]	@ (800ddd0 <find_volume+0x490>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d113      	bne.n	800dd9e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd78:	3330      	adds	r3, #48	@ 0x30
 800dd7a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fe fcba 	bl	800c6f8 <ld_dword>
 800dd84:	4602      	mov	r2, r0
 800dd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd88:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd8c:	3330      	adds	r3, #48	@ 0x30
 800dd8e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fe fcb0 	bl	800c6f8 <ld_dword>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800dda4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dda6:	4b0b      	ldr	r3, [pc, #44]	@ (800ddd4 <find_volume+0x494>)
 800dda8:	881b      	ldrh	r3, [r3, #0]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	4b09      	ldr	r3, [pc, #36]	@ (800ddd4 <find_volume+0x494>)
 800ddb0:	801a      	strh	r2, [r3, #0]
 800ddb2:	4b08      	ldr	r3, [pc, #32]	@ (800ddd4 <find_volume+0x494>)
 800ddb4:	881a      	ldrh	r2, [r3, #0]
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ddba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ddbc:	f7fe fe90 	bl	800cae0 <clear_lock>
#endif
	return FR_OK;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3758      	adds	r7, #88	@ 0x58
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	41615252 	.word	0x41615252
 800ddd0:	61417272 	.word	0x61417272
 800ddd4:	200013a0 	.word	0x200013a0

0800ddd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b088      	sub	sp, #32
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	4613      	mov	r3, r2
 800dde4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ddea:	f107 0310 	add.w	r3, r7, #16
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff fd0b 	bl	800d80a <get_ldnumber>
 800ddf4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	da01      	bge.n	800de00 <f_mount+0x28>
 800ddfc:	230b      	movs	r3, #11
 800ddfe:	e02b      	b.n	800de58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800de00:	4a17      	ldr	r2, [pc, #92]	@ (800de60 <f_mount+0x88>)
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d005      	beq.n	800de1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800de10:	69b8      	ldr	r0, [r7, #24]
 800de12:	f7fe fe65 	bl	800cae0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	2200      	movs	r2, #0
 800de1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d002      	beq.n	800de28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	490d      	ldr	r1, [pc, #52]	@ (800de60 <f_mount+0x88>)
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <f_mount+0x66>
 800de38:	79fb      	ldrb	r3, [r7, #7]
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d001      	beq.n	800de42 <f_mount+0x6a>
 800de3e:	2300      	movs	r3, #0
 800de40:	e00a      	b.n	800de58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800de42:	f107 010c 	add.w	r1, r7, #12
 800de46:	f107 0308 	add.w	r3, r7, #8
 800de4a:	2200      	movs	r2, #0
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7ff fd77 	bl	800d940 <find_volume>
 800de52:	4603      	mov	r3, r0
 800de54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de56:	7dfb      	ldrb	r3, [r7, #23]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3720      	adds	r7, #32
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	2000139c 	.word	0x2000139c

0800de64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b098      	sub	sp, #96	@ 0x60
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	4613      	mov	r3, r2
 800de70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d101      	bne.n	800de7c <f_open+0x18>
 800de78:	2309      	movs	r3, #9
 800de7a:	e1a9      	b.n	800e1d0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de7c:	79fb      	ldrb	r3, [r7, #7]
 800de7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800de84:	79fa      	ldrb	r2, [r7, #7]
 800de86:	f107 0110 	add.w	r1, r7, #16
 800de8a:	f107 0308 	add.w	r3, r7, #8
 800de8e:	4618      	mov	r0, r3
 800de90:	f7ff fd56 	bl	800d940 <find_volume>
 800de94:	4603      	mov	r3, r0
 800de96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800de9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f040 818d 	bne.w	800e1be <f_open+0x35a>
		dj.obj.fs = fs;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	f107 0314 	add.w	r3, r7, #20
 800deae:	4611      	mov	r1, r2
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7ff fc39 	bl	800d728 <follow_path>
 800deb6:	4603      	mov	r3, r0
 800deb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800debc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d118      	bne.n	800def6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dec4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dec8:	b25b      	sxtb	r3, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	da03      	bge.n	800ded6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dece:	2306      	movs	r3, #6
 800ded0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ded4:	e00f      	b.n	800def6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	bf8c      	ite	hi
 800dedc:	2301      	movhi	r3, #1
 800dede:	2300      	movls	r3, #0
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	461a      	mov	r2, r3
 800dee4:	f107 0314 	add.w	r3, r7, #20
 800dee8:	4611      	mov	r1, r2
 800deea:	4618      	mov	r0, r3
 800deec:	f7fe fcec 	bl	800c8c8 <chk_lock>
 800def0:	4603      	mov	r3, r0
 800def2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800def6:	79fb      	ldrb	r3, [r7, #7]
 800def8:	f003 031c 	and.w	r3, r3, #28
 800defc:	2b00      	cmp	r3, #0
 800defe:	d07f      	beq.n	800e000 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800df00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800df04:	2b00      	cmp	r3, #0
 800df06:	d017      	beq.n	800df38 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800df08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800df0c:	2b04      	cmp	r3, #4
 800df0e:	d10e      	bne.n	800df2e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800df10:	f7fe fd36 	bl	800c980 <enq_lock>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d006      	beq.n	800df28 <f_open+0xc4>
 800df1a:	f107 0314 	add.w	r3, r7, #20
 800df1e:	4618      	mov	r0, r3
 800df20:	f7ff fb3b 	bl	800d59a <dir_register>
 800df24:	4603      	mov	r3, r0
 800df26:	e000      	b.n	800df2a <f_open+0xc6>
 800df28:	2312      	movs	r3, #18
 800df2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800df2e:	79fb      	ldrb	r3, [r7, #7]
 800df30:	f043 0308 	orr.w	r3, r3, #8
 800df34:	71fb      	strb	r3, [r7, #7]
 800df36:	e010      	b.n	800df5a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df38:	7ebb      	ldrb	r3, [r7, #26]
 800df3a:	f003 0311 	and.w	r3, r3, #17
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d003      	beq.n	800df4a <f_open+0xe6>
					res = FR_DENIED;
 800df42:	2307      	movs	r3, #7
 800df44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800df48:	e007      	b.n	800df5a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <f_open+0xf6>
 800df54:	2308      	movs	r3, #8
 800df56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d168      	bne.n	800e034 <f_open+0x1d0>
 800df62:	79fb      	ldrb	r3, [r7, #7]
 800df64:	f003 0308 	and.w	r3, r3, #8
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d063      	beq.n	800e034 <f_open+0x1d0>
				dw = GET_FATTIME();
 800df6c:	f7fe face 	bl	800c50c <get_fattime>
 800df70:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800df72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df74:	330e      	adds	r3, #14
 800df76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df78:	4618      	mov	r0, r3
 800df7a:	f7fe fbfb 	bl	800c774 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df80:	3316      	adds	r3, #22
 800df82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe fbf5 	bl	800c774 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df8c:	330b      	adds	r3, #11
 800df8e:	2220      	movs	r2, #32
 800df90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df96:	4611      	mov	r1, r2
 800df98:	4618      	mov	r0, r3
 800df9a:	f7ff fa6a 	bl	800d472 <ld_clust>
 800df9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7ff fa82 	bl	800d4b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dfac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfae:	331c      	adds	r3, #28
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fe fbde 	bl	800c774 <st_dword>
					fs->wflag = 1;
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dfbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d037      	beq.n	800e034 <f_open+0x1d0>
						dw = fs->winsect;
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dfca:	f107 0314 	add.w	r3, r7, #20
 800dfce:	2200      	movs	r2, #0
 800dfd0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe ffc9 	bl	800cf6a <remove_chain>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800dfde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d126      	bne.n	800e034 <f_open+0x1d0>
							res = move_window(fs, dw);
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fe fde0 	bl	800cbb0 <move_window>
 800dff0:	4603      	mov	r3, r0
 800dff2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dffa:	3a01      	subs	r2, #1
 800dffc:	60da      	str	r2, [r3, #12]
 800dffe:	e019      	b.n	800e034 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e000:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e004:	2b00      	cmp	r3, #0
 800e006:	d115      	bne.n	800e034 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e008:	7ebb      	ldrb	r3, [r7, #26]
 800e00a:	f003 0310 	and.w	r3, r3, #16
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d003      	beq.n	800e01a <f_open+0x1b6>
					res = FR_NO_FILE;
 800e012:	2304      	movs	r3, #4
 800e014:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e018:	e00c      	b.n	800e034 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e01a:	79fb      	ldrb	r3, [r7, #7]
 800e01c:	f003 0302 	and.w	r3, r3, #2
 800e020:	2b00      	cmp	r3, #0
 800e022:	d007      	beq.n	800e034 <f_open+0x1d0>
 800e024:	7ebb      	ldrb	r3, [r7, #26]
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d002      	beq.n	800e034 <f_open+0x1d0>
						res = FR_DENIED;
 800e02e:	2307      	movs	r3, #7
 800e030:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e034:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d126      	bne.n	800e08a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	f003 0308 	and.w	r3, r3, #8
 800e042:	2b00      	cmp	r3, #0
 800e044:	d003      	beq.n	800e04e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e046:	79fb      	ldrb	r3, [r7, #7]
 800e048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e04c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e056:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	bf8c      	ite	hi
 800e062:	2301      	movhi	r3, #1
 800e064:	2300      	movls	r3, #0
 800e066:	b2db      	uxtb	r3, r3
 800e068:	461a      	mov	r2, r3
 800e06a:	f107 0314 	add.w	r3, r7, #20
 800e06e:	4611      	mov	r1, r2
 800e070:	4618      	mov	r0, r3
 800e072:	f7fe fca7 	bl	800c9c4 <inc_lock>
 800e076:	4602      	mov	r2, r0
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d102      	bne.n	800e08a <f_open+0x226>
 800e084:	2302      	movs	r3, #2
 800e086:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e08a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f040 8095 	bne.w	800e1be <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e098:	4611      	mov	r1, r2
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff f9e9 	bl	800d472 <ld_clust>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0a8:	331c      	adds	r3, #28
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7fe fb24 	bl	800c6f8 <ld_dword>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	88da      	ldrh	r2, [r3, #6]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	79fa      	ldrb	r2, [r7, #7]
 800e0ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	3330      	adds	r3, #48	@ 0x30
 800e0e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fe fb8e 	bl	800c80e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e0f2:	79fb      	ldrb	r3, [r7, #7]
 800e0f4:	f003 0320 	and.w	r3, r3, #32
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d060      	beq.n	800e1be <f_open+0x35a>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d05c      	beq.n	800e1be <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	68da      	ldr	r2, [r3, #12]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	895b      	ldrh	r3, [r3, #10]
 800e110:	025b      	lsls	r3, r3, #9
 800e112:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e120:	e016      	b.n	800e150 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e126:	4618      	mov	r0, r3
 800e128:	f7fe fd8e 	bl	800cc48 <get_fat>
 800e12c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e12e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e130:	2b01      	cmp	r3, #1
 800e132:	d802      	bhi.n	800e13a <f_open+0x2d6>
 800e134:	2302      	movs	r3, #2
 800e136:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e13a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e13c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e140:	d102      	bne.n	800e148 <f_open+0x2e4>
 800e142:	2301      	movs	r3, #1
 800e144:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e148:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e14a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e150:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e154:	2b00      	cmp	r3, #0
 800e156:	d103      	bne.n	800e160 <f_open+0x2fc>
 800e158:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e15a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d8e0      	bhi.n	800e122 <f_open+0x2be>
				}
				fp->clust = clst;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e164:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e166:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d127      	bne.n	800e1be <f_open+0x35a>
 800e16e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e174:	2b00      	cmp	r3, #0
 800e176:	d022      	beq.n	800e1be <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fe fd44 	bl	800cc0a <clust2sect>
 800e182:	6478      	str	r0, [r7, #68]	@ 0x44
 800e184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e186:	2b00      	cmp	r3, #0
 800e188:	d103      	bne.n	800e192 <f_open+0x32e>
						res = FR_INT_ERR;
 800e18a:	2302      	movs	r3, #2
 800e18c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e190:	e015      	b.n	800e1be <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e194:	0a5a      	lsrs	r2, r3, #9
 800e196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e198:	441a      	add	r2, r3
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	7858      	ldrb	r0, [r3, #1]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6a1a      	ldr	r2, [r3, #32]
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	f7fe fa4b 	bl	800c648 <disk_read>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <f_open+0x35a>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e1be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d002      	beq.n	800e1cc <f_open+0x368>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e1cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3760      	adds	r7, #96	@ 0x60
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b092      	sub	sp, #72	@ 0x48
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e1e4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e1e8:	f107 030c 	add.w	r3, r7, #12
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7ff fba6 	bl	800d940 <find_volume>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800e1fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f040 8099 	bne.w	800e336 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20c:	691a      	ldr	r2, [r3, #16]
 800e20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e210:	695b      	ldr	r3, [r3, #20]
 800e212:	3b02      	subs	r3, #2
 800e214:	429a      	cmp	r2, r3
 800e216:	d804      	bhi.n	800e222 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e21a:	691a      	ldr	r2, [r3, #16]
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	601a      	str	r2, [r3, #0]
 800e220:	e089      	b.n	800e336 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d128      	bne.n	800e280 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e22e:	2302      	movs	r3, #2
 800e230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e234:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800e236:	f107 0314 	add.w	r3, r7, #20
 800e23a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fe fd03 	bl	800cc48 <get_fat>
 800e242:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e246:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e24a:	d103      	bne.n	800e254 <f_getfree+0x7c>
 800e24c:	2301      	movs	r3, #1
 800e24e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e252:	e063      	b.n	800e31c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e256:	2b01      	cmp	r3, #1
 800e258:	d103      	bne.n	800e262 <f_getfree+0x8a>
 800e25a:	2302      	movs	r3, #2
 800e25c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e260:	e05c      	b.n	800e31c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800e262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e264:	2b00      	cmp	r3, #0
 800e266:	d102      	bne.n	800e26e <f_getfree+0x96>
 800e268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e26a:	3301      	adds	r3, #1
 800e26c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800e26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e270:	3301      	adds	r3, #1
 800e272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e276:	695b      	ldr	r3, [r3, #20]
 800e278:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d3db      	bcc.n	800e236 <f_getfree+0x5e>
 800e27e:	e04d      	b.n	800e31c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e282:	695b      	ldr	r3, [r3, #20]
 800e284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e290:	2300      	movs	r3, #0
 800e292:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800e294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e296:	2b00      	cmp	r3, #0
 800e298:	d113      	bne.n	800e2c2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800e29a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	1c5a      	adds	r2, r3, #1
 800e2a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	f7fe fc84 	bl	800cbb0 <move_window>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800e2ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d131      	bne.n	800e31a <f_getfree+0x142>
							p = fs->win;
 800e2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b8:	3330      	adds	r3, #48	@ 0x30
 800e2ba:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800e2bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e2c0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800e2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	d10f      	bne.n	800e2ea <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800e2ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e2cc:	f7fe f9fc 	bl	800c6c8 <ld_word>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d102      	bne.n	800e2dc <f_getfree+0x104>
 800e2d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2d8:	3301      	adds	r3, #1
 800e2da:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	3302      	adds	r3, #2
 800e2e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2e4:	3b02      	subs	r3, #2
 800e2e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2e8:	e010      	b.n	800e30c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e2ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e2ec:	f7fe fa04 	bl	800c6f8 <ld_dword>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d102      	bne.n	800e300 <f_getfree+0x128>
 800e2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800e300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e302:	3304      	adds	r3, #4
 800e304:	633b      	str	r3, [r7, #48]	@ 0x30
 800e306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e308:	3b04      	subs	r3, #4
 800e30a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800e30c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e30e:	3b01      	subs	r3, #1
 800e310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1bd      	bne.n	800e294 <f_getfree+0xbc>
 800e318:	e000      	b.n	800e31c <f_getfree+0x144>
							if (res != FR_OK) break;
 800e31a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e320:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e326:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32a:	791a      	ldrb	r2, [r3, #4]
 800e32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32e:	f042 0201 	orr.w	r2, r2, #1
 800e332:	b2d2      	uxtb	r2, r2
 800e334:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e336:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3748      	adds	r7, #72	@ 0x48
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
	...

0800e344 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e344:	b480      	push	{r7}
 800e346:	b087      	sub	sp, #28
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	4613      	mov	r3, r2
 800e350:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e352:	2301      	movs	r3, #1
 800e354:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e356:	2300      	movs	r3, #0
 800e358:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e35a:	4b1f      	ldr	r3, [pc, #124]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e35c:	7a5b      	ldrb	r3, [r3, #9]
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	2b00      	cmp	r3, #0
 800e362:	d131      	bne.n	800e3c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e364:	4b1c      	ldr	r3, [pc, #112]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e366:	7a5b      	ldrb	r3, [r3, #9]
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	461a      	mov	r2, r3
 800e36c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e36e:	2100      	movs	r1, #0
 800e370:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e372:	4b19      	ldr	r3, [pc, #100]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e374:	7a5b      	ldrb	r3, [r3, #9]
 800e376:	b2db      	uxtb	r3, r3
 800e378:	4a17      	ldr	r2, [pc, #92]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e382:	4b15      	ldr	r3, [pc, #84]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e384:	7a5b      	ldrb	r3, [r3, #9]
 800e386:	b2db      	uxtb	r3, r3
 800e388:	461a      	mov	r2, r3
 800e38a:	4b13      	ldr	r3, [pc, #76]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e38c:	4413      	add	r3, r2
 800e38e:	79fa      	ldrb	r2, [r7, #7]
 800e390:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e392:	4b11      	ldr	r3, [pc, #68]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e394:	7a5b      	ldrb	r3, [r3, #9]
 800e396:	b2db      	uxtb	r3, r3
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	b2d1      	uxtb	r1, r2
 800e39c:	4a0e      	ldr	r2, [pc, #56]	@ (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e39e:	7251      	strb	r1, [r2, #9]
 800e3a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e3a2:	7dbb      	ldrb	r3, [r7, #22]
 800e3a4:	3330      	adds	r3, #48	@ 0x30
 800e3a6:	b2da      	uxtb	r2, r3
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	223a      	movs	r2, #58	@ 0x3a
 800e3b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	3302      	adds	r3, #2
 800e3b8:	222f      	movs	r2, #47	@ 0x2f
 800e3ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	3303      	adds	r3, #3
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e3c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	371c      	adds	r7, #28
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	200013c4 	.word	0x200013c4

0800e3dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f7ff ffaa 	bl	800e344 <FATFS_LinkDriverEx>
 800e3f0:	4603      	mov	r3, r0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <atoi>:
 800e3fa:	220a      	movs	r2, #10
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	f001 bf09 	b.w	8010214 <strtol>

0800e402 <__cvt>:
 800e402:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e406:	ec57 6b10 	vmov	r6, r7, d0
 800e40a:	2f00      	cmp	r7, #0
 800e40c:	460c      	mov	r4, r1
 800e40e:	4619      	mov	r1, r3
 800e410:	463b      	mov	r3, r7
 800e412:	bfbb      	ittet	lt
 800e414:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e418:	461f      	movlt	r7, r3
 800e41a:	2300      	movge	r3, #0
 800e41c:	232d      	movlt	r3, #45	@ 0x2d
 800e41e:	700b      	strb	r3, [r1, #0]
 800e420:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e422:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e426:	4691      	mov	r9, r2
 800e428:	f023 0820 	bic.w	r8, r3, #32
 800e42c:	bfbc      	itt	lt
 800e42e:	4632      	movlt	r2, r6
 800e430:	4616      	movlt	r6, r2
 800e432:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e436:	d005      	beq.n	800e444 <__cvt+0x42>
 800e438:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e43c:	d100      	bne.n	800e440 <__cvt+0x3e>
 800e43e:	3401      	adds	r4, #1
 800e440:	2102      	movs	r1, #2
 800e442:	e000      	b.n	800e446 <__cvt+0x44>
 800e444:	2103      	movs	r1, #3
 800e446:	ab03      	add	r3, sp, #12
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	ab02      	add	r3, sp, #8
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	ec47 6b10 	vmov	d0, r6, r7
 800e452:	4653      	mov	r3, sl
 800e454:	4622      	mov	r2, r4
 800e456:	f002 f90b 	bl	8010670 <_dtoa_r>
 800e45a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e45e:	4605      	mov	r5, r0
 800e460:	d119      	bne.n	800e496 <__cvt+0x94>
 800e462:	f019 0f01 	tst.w	r9, #1
 800e466:	d00e      	beq.n	800e486 <__cvt+0x84>
 800e468:	eb00 0904 	add.w	r9, r0, r4
 800e46c:	2200      	movs	r2, #0
 800e46e:	2300      	movs	r3, #0
 800e470:	4630      	mov	r0, r6
 800e472:	4639      	mov	r1, r7
 800e474:	f7f2 fb50 	bl	8000b18 <__aeabi_dcmpeq>
 800e478:	b108      	cbz	r0, 800e47e <__cvt+0x7c>
 800e47a:	f8cd 900c 	str.w	r9, [sp, #12]
 800e47e:	2230      	movs	r2, #48	@ 0x30
 800e480:	9b03      	ldr	r3, [sp, #12]
 800e482:	454b      	cmp	r3, r9
 800e484:	d31e      	bcc.n	800e4c4 <__cvt+0xc2>
 800e486:	9b03      	ldr	r3, [sp, #12]
 800e488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e48a:	1b5b      	subs	r3, r3, r5
 800e48c:	4628      	mov	r0, r5
 800e48e:	6013      	str	r3, [r2, #0]
 800e490:	b004      	add	sp, #16
 800e492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e496:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e49a:	eb00 0904 	add.w	r9, r0, r4
 800e49e:	d1e5      	bne.n	800e46c <__cvt+0x6a>
 800e4a0:	7803      	ldrb	r3, [r0, #0]
 800e4a2:	2b30      	cmp	r3, #48	@ 0x30
 800e4a4:	d10a      	bne.n	800e4bc <__cvt+0xba>
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	4639      	mov	r1, r7
 800e4ae:	f7f2 fb33 	bl	8000b18 <__aeabi_dcmpeq>
 800e4b2:	b918      	cbnz	r0, 800e4bc <__cvt+0xba>
 800e4b4:	f1c4 0401 	rsb	r4, r4, #1
 800e4b8:	f8ca 4000 	str.w	r4, [sl]
 800e4bc:	f8da 3000 	ldr.w	r3, [sl]
 800e4c0:	4499      	add	r9, r3
 800e4c2:	e7d3      	b.n	800e46c <__cvt+0x6a>
 800e4c4:	1c59      	adds	r1, r3, #1
 800e4c6:	9103      	str	r1, [sp, #12]
 800e4c8:	701a      	strb	r2, [r3, #0]
 800e4ca:	e7d9      	b.n	800e480 <__cvt+0x7e>

0800e4cc <__exponent>:
 800e4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4ce:	2900      	cmp	r1, #0
 800e4d0:	bfba      	itte	lt
 800e4d2:	4249      	neglt	r1, r1
 800e4d4:	232d      	movlt	r3, #45	@ 0x2d
 800e4d6:	232b      	movge	r3, #43	@ 0x2b
 800e4d8:	2909      	cmp	r1, #9
 800e4da:	7002      	strb	r2, [r0, #0]
 800e4dc:	7043      	strb	r3, [r0, #1]
 800e4de:	dd29      	ble.n	800e534 <__exponent+0x68>
 800e4e0:	f10d 0307 	add.w	r3, sp, #7
 800e4e4:	461d      	mov	r5, r3
 800e4e6:	270a      	movs	r7, #10
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	fbb1 f6f7 	udiv	r6, r1, r7
 800e4ee:	fb07 1416 	mls	r4, r7, r6, r1
 800e4f2:	3430      	adds	r4, #48	@ 0x30
 800e4f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	2c63      	cmp	r4, #99	@ 0x63
 800e4fc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e500:	4631      	mov	r1, r6
 800e502:	dcf1      	bgt.n	800e4e8 <__exponent+0x1c>
 800e504:	3130      	adds	r1, #48	@ 0x30
 800e506:	1e94      	subs	r4, r2, #2
 800e508:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e50c:	1c41      	adds	r1, r0, #1
 800e50e:	4623      	mov	r3, r4
 800e510:	42ab      	cmp	r3, r5
 800e512:	d30a      	bcc.n	800e52a <__exponent+0x5e>
 800e514:	f10d 0309 	add.w	r3, sp, #9
 800e518:	1a9b      	subs	r3, r3, r2
 800e51a:	42ac      	cmp	r4, r5
 800e51c:	bf88      	it	hi
 800e51e:	2300      	movhi	r3, #0
 800e520:	3302      	adds	r3, #2
 800e522:	4403      	add	r3, r0
 800e524:	1a18      	subs	r0, r3, r0
 800e526:	b003      	add	sp, #12
 800e528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e52a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e52e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e532:	e7ed      	b.n	800e510 <__exponent+0x44>
 800e534:	2330      	movs	r3, #48	@ 0x30
 800e536:	3130      	adds	r1, #48	@ 0x30
 800e538:	7083      	strb	r3, [r0, #2]
 800e53a:	70c1      	strb	r1, [r0, #3]
 800e53c:	1d03      	adds	r3, r0, #4
 800e53e:	e7f1      	b.n	800e524 <__exponent+0x58>

0800e540 <_printf_float>:
 800e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e544:	b08d      	sub	sp, #52	@ 0x34
 800e546:	460c      	mov	r4, r1
 800e548:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e54c:	4616      	mov	r6, r2
 800e54e:	461f      	mov	r7, r3
 800e550:	4605      	mov	r5, r0
 800e552:	f001 ff81 	bl	8010458 <_localeconv_r>
 800e556:	6803      	ldr	r3, [r0, #0]
 800e558:	9304      	str	r3, [sp, #16]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7f1 feb0 	bl	80002c0 <strlen>
 800e560:	2300      	movs	r3, #0
 800e562:	930a      	str	r3, [sp, #40]	@ 0x28
 800e564:	f8d8 3000 	ldr.w	r3, [r8]
 800e568:	9005      	str	r0, [sp, #20]
 800e56a:	3307      	adds	r3, #7
 800e56c:	f023 0307 	bic.w	r3, r3, #7
 800e570:	f103 0208 	add.w	r2, r3, #8
 800e574:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e578:	f8d4 b000 	ldr.w	fp, [r4]
 800e57c:	f8c8 2000 	str.w	r2, [r8]
 800e580:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e584:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e588:	9307      	str	r3, [sp, #28]
 800e58a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e58e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e596:	4b9c      	ldr	r3, [pc, #624]	@ (800e808 <_printf_float+0x2c8>)
 800e598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e59c:	f7f2 faee 	bl	8000b7c <__aeabi_dcmpun>
 800e5a0:	bb70      	cbnz	r0, 800e600 <_printf_float+0xc0>
 800e5a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5a6:	4b98      	ldr	r3, [pc, #608]	@ (800e808 <_printf_float+0x2c8>)
 800e5a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5ac:	f7f2 fac8 	bl	8000b40 <__aeabi_dcmple>
 800e5b0:	bb30      	cbnz	r0, 800e600 <_printf_float+0xc0>
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	4640      	mov	r0, r8
 800e5b8:	4649      	mov	r1, r9
 800e5ba:	f7f2 fab7 	bl	8000b2c <__aeabi_dcmplt>
 800e5be:	b110      	cbz	r0, 800e5c6 <_printf_float+0x86>
 800e5c0:	232d      	movs	r3, #45	@ 0x2d
 800e5c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5c6:	4a91      	ldr	r2, [pc, #580]	@ (800e80c <_printf_float+0x2cc>)
 800e5c8:	4b91      	ldr	r3, [pc, #580]	@ (800e810 <_printf_float+0x2d0>)
 800e5ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e5ce:	bf94      	ite	ls
 800e5d0:	4690      	movls	r8, r2
 800e5d2:	4698      	movhi	r8, r3
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	6123      	str	r3, [r4, #16]
 800e5d8:	f02b 0304 	bic.w	r3, fp, #4
 800e5dc:	6023      	str	r3, [r4, #0]
 800e5de:	f04f 0900 	mov.w	r9, #0
 800e5e2:	9700      	str	r7, [sp, #0]
 800e5e4:	4633      	mov	r3, r6
 800e5e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f000 fa84 	bl	800eaf8 <_printf_common>
 800e5f0:	3001      	adds	r0, #1
 800e5f2:	f040 808d 	bne.w	800e710 <_printf_float+0x1d0>
 800e5f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5fa:	b00d      	add	sp, #52	@ 0x34
 800e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e600:	4642      	mov	r2, r8
 800e602:	464b      	mov	r3, r9
 800e604:	4640      	mov	r0, r8
 800e606:	4649      	mov	r1, r9
 800e608:	f7f2 fab8 	bl	8000b7c <__aeabi_dcmpun>
 800e60c:	b140      	cbz	r0, 800e620 <_printf_float+0xe0>
 800e60e:	464b      	mov	r3, r9
 800e610:	2b00      	cmp	r3, #0
 800e612:	bfbc      	itt	lt
 800e614:	232d      	movlt	r3, #45	@ 0x2d
 800e616:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e61a:	4a7e      	ldr	r2, [pc, #504]	@ (800e814 <_printf_float+0x2d4>)
 800e61c:	4b7e      	ldr	r3, [pc, #504]	@ (800e818 <_printf_float+0x2d8>)
 800e61e:	e7d4      	b.n	800e5ca <_printf_float+0x8a>
 800e620:	6863      	ldr	r3, [r4, #4]
 800e622:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e626:	9206      	str	r2, [sp, #24]
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	d13b      	bne.n	800e6a4 <_printf_float+0x164>
 800e62c:	2306      	movs	r3, #6
 800e62e:	6063      	str	r3, [r4, #4]
 800e630:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e634:	2300      	movs	r3, #0
 800e636:	6022      	str	r2, [r4, #0]
 800e638:	9303      	str	r3, [sp, #12]
 800e63a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e63c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e640:	ab09      	add	r3, sp, #36	@ 0x24
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	6861      	ldr	r1, [r4, #4]
 800e646:	ec49 8b10 	vmov	d0, r8, r9
 800e64a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e64e:	4628      	mov	r0, r5
 800e650:	f7ff fed7 	bl	800e402 <__cvt>
 800e654:	9b06      	ldr	r3, [sp, #24]
 800e656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e658:	2b47      	cmp	r3, #71	@ 0x47
 800e65a:	4680      	mov	r8, r0
 800e65c:	d129      	bne.n	800e6b2 <_printf_float+0x172>
 800e65e:	1cc8      	adds	r0, r1, #3
 800e660:	db02      	blt.n	800e668 <_printf_float+0x128>
 800e662:	6863      	ldr	r3, [r4, #4]
 800e664:	4299      	cmp	r1, r3
 800e666:	dd41      	ble.n	800e6ec <_printf_float+0x1ac>
 800e668:	f1aa 0a02 	sub.w	sl, sl, #2
 800e66c:	fa5f fa8a 	uxtb.w	sl, sl
 800e670:	3901      	subs	r1, #1
 800e672:	4652      	mov	r2, sl
 800e674:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e678:	9109      	str	r1, [sp, #36]	@ 0x24
 800e67a:	f7ff ff27 	bl	800e4cc <__exponent>
 800e67e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e680:	1813      	adds	r3, r2, r0
 800e682:	2a01      	cmp	r2, #1
 800e684:	4681      	mov	r9, r0
 800e686:	6123      	str	r3, [r4, #16]
 800e688:	dc02      	bgt.n	800e690 <_printf_float+0x150>
 800e68a:	6822      	ldr	r2, [r4, #0]
 800e68c:	07d2      	lsls	r2, r2, #31
 800e68e:	d501      	bpl.n	800e694 <_printf_float+0x154>
 800e690:	3301      	adds	r3, #1
 800e692:	6123      	str	r3, [r4, #16]
 800e694:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d0a2      	beq.n	800e5e2 <_printf_float+0xa2>
 800e69c:	232d      	movs	r3, #45	@ 0x2d
 800e69e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6a2:	e79e      	b.n	800e5e2 <_printf_float+0xa2>
 800e6a4:	9a06      	ldr	r2, [sp, #24]
 800e6a6:	2a47      	cmp	r2, #71	@ 0x47
 800e6a8:	d1c2      	bne.n	800e630 <_printf_float+0xf0>
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1c0      	bne.n	800e630 <_printf_float+0xf0>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e7bd      	b.n	800e62e <_printf_float+0xee>
 800e6b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e6b6:	d9db      	bls.n	800e670 <_printf_float+0x130>
 800e6b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e6bc:	d118      	bne.n	800e6f0 <_printf_float+0x1b0>
 800e6be:	2900      	cmp	r1, #0
 800e6c0:	6863      	ldr	r3, [r4, #4]
 800e6c2:	dd0b      	ble.n	800e6dc <_printf_float+0x19c>
 800e6c4:	6121      	str	r1, [r4, #16]
 800e6c6:	b913      	cbnz	r3, 800e6ce <_printf_float+0x18e>
 800e6c8:	6822      	ldr	r2, [r4, #0]
 800e6ca:	07d0      	lsls	r0, r2, #31
 800e6cc:	d502      	bpl.n	800e6d4 <_printf_float+0x194>
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	440b      	add	r3, r1
 800e6d2:	6123      	str	r3, [r4, #16]
 800e6d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e6d6:	f04f 0900 	mov.w	r9, #0
 800e6da:	e7db      	b.n	800e694 <_printf_float+0x154>
 800e6dc:	b913      	cbnz	r3, 800e6e4 <_printf_float+0x1a4>
 800e6de:	6822      	ldr	r2, [r4, #0]
 800e6e0:	07d2      	lsls	r2, r2, #31
 800e6e2:	d501      	bpl.n	800e6e8 <_printf_float+0x1a8>
 800e6e4:	3302      	adds	r3, #2
 800e6e6:	e7f4      	b.n	800e6d2 <_printf_float+0x192>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e7f2      	b.n	800e6d2 <_printf_float+0x192>
 800e6ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e6f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6f2:	4299      	cmp	r1, r3
 800e6f4:	db05      	blt.n	800e702 <_printf_float+0x1c2>
 800e6f6:	6823      	ldr	r3, [r4, #0]
 800e6f8:	6121      	str	r1, [r4, #16]
 800e6fa:	07d8      	lsls	r0, r3, #31
 800e6fc:	d5ea      	bpl.n	800e6d4 <_printf_float+0x194>
 800e6fe:	1c4b      	adds	r3, r1, #1
 800e700:	e7e7      	b.n	800e6d2 <_printf_float+0x192>
 800e702:	2900      	cmp	r1, #0
 800e704:	bfd4      	ite	le
 800e706:	f1c1 0202 	rsble	r2, r1, #2
 800e70a:	2201      	movgt	r2, #1
 800e70c:	4413      	add	r3, r2
 800e70e:	e7e0      	b.n	800e6d2 <_printf_float+0x192>
 800e710:	6823      	ldr	r3, [r4, #0]
 800e712:	055a      	lsls	r2, r3, #21
 800e714:	d407      	bmi.n	800e726 <_printf_float+0x1e6>
 800e716:	6923      	ldr	r3, [r4, #16]
 800e718:	4642      	mov	r2, r8
 800e71a:	4631      	mov	r1, r6
 800e71c:	4628      	mov	r0, r5
 800e71e:	47b8      	blx	r7
 800e720:	3001      	adds	r0, #1
 800e722:	d12b      	bne.n	800e77c <_printf_float+0x23c>
 800e724:	e767      	b.n	800e5f6 <_printf_float+0xb6>
 800e726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e72a:	f240 80dd 	bls.w	800e8e8 <_printf_float+0x3a8>
 800e72e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e732:	2200      	movs	r2, #0
 800e734:	2300      	movs	r3, #0
 800e736:	f7f2 f9ef 	bl	8000b18 <__aeabi_dcmpeq>
 800e73a:	2800      	cmp	r0, #0
 800e73c:	d033      	beq.n	800e7a6 <_printf_float+0x266>
 800e73e:	4a37      	ldr	r2, [pc, #220]	@ (800e81c <_printf_float+0x2dc>)
 800e740:	2301      	movs	r3, #1
 800e742:	4631      	mov	r1, r6
 800e744:	4628      	mov	r0, r5
 800e746:	47b8      	blx	r7
 800e748:	3001      	adds	r0, #1
 800e74a:	f43f af54 	beq.w	800e5f6 <_printf_float+0xb6>
 800e74e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e752:	4543      	cmp	r3, r8
 800e754:	db02      	blt.n	800e75c <_printf_float+0x21c>
 800e756:	6823      	ldr	r3, [r4, #0]
 800e758:	07d8      	lsls	r0, r3, #31
 800e75a:	d50f      	bpl.n	800e77c <_printf_float+0x23c>
 800e75c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e760:	4631      	mov	r1, r6
 800e762:	4628      	mov	r0, r5
 800e764:	47b8      	blx	r7
 800e766:	3001      	adds	r0, #1
 800e768:	f43f af45 	beq.w	800e5f6 <_printf_float+0xb6>
 800e76c:	f04f 0900 	mov.w	r9, #0
 800e770:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e774:	f104 0a1a 	add.w	sl, r4, #26
 800e778:	45c8      	cmp	r8, r9
 800e77a:	dc09      	bgt.n	800e790 <_printf_float+0x250>
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	079b      	lsls	r3, r3, #30
 800e780:	f100 8103 	bmi.w	800e98a <_printf_float+0x44a>
 800e784:	68e0      	ldr	r0, [r4, #12]
 800e786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e788:	4298      	cmp	r0, r3
 800e78a:	bfb8      	it	lt
 800e78c:	4618      	movlt	r0, r3
 800e78e:	e734      	b.n	800e5fa <_printf_float+0xba>
 800e790:	2301      	movs	r3, #1
 800e792:	4652      	mov	r2, sl
 800e794:	4631      	mov	r1, r6
 800e796:	4628      	mov	r0, r5
 800e798:	47b8      	blx	r7
 800e79a:	3001      	adds	r0, #1
 800e79c:	f43f af2b 	beq.w	800e5f6 <_printf_float+0xb6>
 800e7a0:	f109 0901 	add.w	r9, r9, #1
 800e7a4:	e7e8      	b.n	800e778 <_printf_float+0x238>
 800e7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	dc39      	bgt.n	800e820 <_printf_float+0x2e0>
 800e7ac:	4a1b      	ldr	r2, [pc, #108]	@ (800e81c <_printf_float+0x2dc>)
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4631      	mov	r1, r6
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	47b8      	blx	r7
 800e7b6:	3001      	adds	r0, #1
 800e7b8:	f43f af1d 	beq.w	800e5f6 <_printf_float+0xb6>
 800e7bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e7c0:	ea59 0303 	orrs.w	r3, r9, r3
 800e7c4:	d102      	bne.n	800e7cc <_printf_float+0x28c>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	07d9      	lsls	r1, r3, #31
 800e7ca:	d5d7      	bpl.n	800e77c <_printf_float+0x23c>
 800e7cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7d0:	4631      	mov	r1, r6
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	47b8      	blx	r7
 800e7d6:	3001      	adds	r0, #1
 800e7d8:	f43f af0d 	beq.w	800e5f6 <_printf_float+0xb6>
 800e7dc:	f04f 0a00 	mov.w	sl, #0
 800e7e0:	f104 0b1a 	add.w	fp, r4, #26
 800e7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e6:	425b      	negs	r3, r3
 800e7e8:	4553      	cmp	r3, sl
 800e7ea:	dc01      	bgt.n	800e7f0 <_printf_float+0x2b0>
 800e7ec:	464b      	mov	r3, r9
 800e7ee:	e793      	b.n	800e718 <_printf_float+0x1d8>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	465a      	mov	r2, fp
 800e7f4:	4631      	mov	r1, r6
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	47b8      	blx	r7
 800e7fa:	3001      	adds	r0, #1
 800e7fc:	f43f aefb 	beq.w	800e5f6 <_printf_float+0xb6>
 800e800:	f10a 0a01 	add.w	sl, sl, #1
 800e804:	e7ee      	b.n	800e7e4 <_printf_float+0x2a4>
 800e806:	bf00      	nop
 800e808:	7fefffff 	.word	0x7fefffff
 800e80c:	080130c0 	.word	0x080130c0
 800e810:	080130c4 	.word	0x080130c4
 800e814:	080130c8 	.word	0x080130c8
 800e818:	080130cc 	.word	0x080130cc
 800e81c:	080130d0 	.word	0x080130d0
 800e820:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e822:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e826:	4553      	cmp	r3, sl
 800e828:	bfa8      	it	ge
 800e82a:	4653      	movge	r3, sl
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	4699      	mov	r9, r3
 800e830:	dc36      	bgt.n	800e8a0 <_printf_float+0x360>
 800e832:	f04f 0b00 	mov.w	fp, #0
 800e836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e83a:	f104 021a 	add.w	r2, r4, #26
 800e83e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e840:	9306      	str	r3, [sp, #24]
 800e842:	eba3 0309 	sub.w	r3, r3, r9
 800e846:	455b      	cmp	r3, fp
 800e848:	dc31      	bgt.n	800e8ae <_printf_float+0x36e>
 800e84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84c:	459a      	cmp	sl, r3
 800e84e:	dc3a      	bgt.n	800e8c6 <_printf_float+0x386>
 800e850:	6823      	ldr	r3, [r4, #0]
 800e852:	07da      	lsls	r2, r3, #31
 800e854:	d437      	bmi.n	800e8c6 <_printf_float+0x386>
 800e856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e858:	ebaa 0903 	sub.w	r9, sl, r3
 800e85c:	9b06      	ldr	r3, [sp, #24]
 800e85e:	ebaa 0303 	sub.w	r3, sl, r3
 800e862:	4599      	cmp	r9, r3
 800e864:	bfa8      	it	ge
 800e866:	4699      	movge	r9, r3
 800e868:	f1b9 0f00 	cmp.w	r9, #0
 800e86c:	dc33      	bgt.n	800e8d6 <_printf_float+0x396>
 800e86e:	f04f 0800 	mov.w	r8, #0
 800e872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e876:	f104 0b1a 	add.w	fp, r4, #26
 800e87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e87c:	ebaa 0303 	sub.w	r3, sl, r3
 800e880:	eba3 0309 	sub.w	r3, r3, r9
 800e884:	4543      	cmp	r3, r8
 800e886:	f77f af79 	ble.w	800e77c <_printf_float+0x23c>
 800e88a:	2301      	movs	r3, #1
 800e88c:	465a      	mov	r2, fp
 800e88e:	4631      	mov	r1, r6
 800e890:	4628      	mov	r0, r5
 800e892:	47b8      	blx	r7
 800e894:	3001      	adds	r0, #1
 800e896:	f43f aeae 	beq.w	800e5f6 <_printf_float+0xb6>
 800e89a:	f108 0801 	add.w	r8, r8, #1
 800e89e:	e7ec      	b.n	800e87a <_printf_float+0x33a>
 800e8a0:	4642      	mov	r2, r8
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	47b8      	blx	r7
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	d1c2      	bne.n	800e832 <_printf_float+0x2f2>
 800e8ac:	e6a3      	b.n	800e5f6 <_printf_float+0xb6>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	9206      	str	r2, [sp, #24]
 800e8b6:	47b8      	blx	r7
 800e8b8:	3001      	adds	r0, #1
 800e8ba:	f43f ae9c 	beq.w	800e5f6 <_printf_float+0xb6>
 800e8be:	9a06      	ldr	r2, [sp, #24]
 800e8c0:	f10b 0b01 	add.w	fp, fp, #1
 800e8c4:	e7bb      	b.n	800e83e <_printf_float+0x2fe>
 800e8c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8ca:	4631      	mov	r1, r6
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	47b8      	blx	r7
 800e8d0:	3001      	adds	r0, #1
 800e8d2:	d1c0      	bne.n	800e856 <_printf_float+0x316>
 800e8d4:	e68f      	b.n	800e5f6 <_printf_float+0xb6>
 800e8d6:	9a06      	ldr	r2, [sp, #24]
 800e8d8:	464b      	mov	r3, r9
 800e8da:	4442      	add	r2, r8
 800e8dc:	4631      	mov	r1, r6
 800e8de:	4628      	mov	r0, r5
 800e8e0:	47b8      	blx	r7
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	d1c3      	bne.n	800e86e <_printf_float+0x32e>
 800e8e6:	e686      	b.n	800e5f6 <_printf_float+0xb6>
 800e8e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e8ec:	f1ba 0f01 	cmp.w	sl, #1
 800e8f0:	dc01      	bgt.n	800e8f6 <_printf_float+0x3b6>
 800e8f2:	07db      	lsls	r3, r3, #31
 800e8f4:	d536      	bpl.n	800e964 <_printf_float+0x424>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	4642      	mov	r2, r8
 800e8fa:	4631      	mov	r1, r6
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	47b8      	blx	r7
 800e900:	3001      	adds	r0, #1
 800e902:	f43f ae78 	beq.w	800e5f6 <_printf_float+0xb6>
 800e906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e90a:	4631      	mov	r1, r6
 800e90c:	4628      	mov	r0, r5
 800e90e:	47b8      	blx	r7
 800e910:	3001      	adds	r0, #1
 800e912:	f43f ae70 	beq.w	800e5f6 <_printf_float+0xb6>
 800e916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e91a:	2200      	movs	r2, #0
 800e91c:	2300      	movs	r3, #0
 800e91e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e922:	f7f2 f8f9 	bl	8000b18 <__aeabi_dcmpeq>
 800e926:	b9c0      	cbnz	r0, 800e95a <_printf_float+0x41a>
 800e928:	4653      	mov	r3, sl
 800e92a:	f108 0201 	add.w	r2, r8, #1
 800e92e:	4631      	mov	r1, r6
 800e930:	4628      	mov	r0, r5
 800e932:	47b8      	blx	r7
 800e934:	3001      	adds	r0, #1
 800e936:	d10c      	bne.n	800e952 <_printf_float+0x412>
 800e938:	e65d      	b.n	800e5f6 <_printf_float+0xb6>
 800e93a:	2301      	movs	r3, #1
 800e93c:	465a      	mov	r2, fp
 800e93e:	4631      	mov	r1, r6
 800e940:	4628      	mov	r0, r5
 800e942:	47b8      	blx	r7
 800e944:	3001      	adds	r0, #1
 800e946:	f43f ae56 	beq.w	800e5f6 <_printf_float+0xb6>
 800e94a:	f108 0801 	add.w	r8, r8, #1
 800e94e:	45d0      	cmp	r8, sl
 800e950:	dbf3      	blt.n	800e93a <_printf_float+0x3fa>
 800e952:	464b      	mov	r3, r9
 800e954:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e958:	e6df      	b.n	800e71a <_printf_float+0x1da>
 800e95a:	f04f 0800 	mov.w	r8, #0
 800e95e:	f104 0b1a 	add.w	fp, r4, #26
 800e962:	e7f4      	b.n	800e94e <_printf_float+0x40e>
 800e964:	2301      	movs	r3, #1
 800e966:	4642      	mov	r2, r8
 800e968:	e7e1      	b.n	800e92e <_printf_float+0x3ee>
 800e96a:	2301      	movs	r3, #1
 800e96c:	464a      	mov	r2, r9
 800e96e:	4631      	mov	r1, r6
 800e970:	4628      	mov	r0, r5
 800e972:	47b8      	blx	r7
 800e974:	3001      	adds	r0, #1
 800e976:	f43f ae3e 	beq.w	800e5f6 <_printf_float+0xb6>
 800e97a:	f108 0801 	add.w	r8, r8, #1
 800e97e:	68e3      	ldr	r3, [r4, #12]
 800e980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e982:	1a5b      	subs	r3, r3, r1
 800e984:	4543      	cmp	r3, r8
 800e986:	dcf0      	bgt.n	800e96a <_printf_float+0x42a>
 800e988:	e6fc      	b.n	800e784 <_printf_float+0x244>
 800e98a:	f04f 0800 	mov.w	r8, #0
 800e98e:	f104 0919 	add.w	r9, r4, #25
 800e992:	e7f4      	b.n	800e97e <_printf_float+0x43e>

0800e994 <malloc>:
 800e994:	4b02      	ldr	r3, [pc, #8]	@ (800e9a0 <malloc+0xc>)
 800e996:	4601      	mov	r1, r0
 800e998:	6818      	ldr	r0, [r3, #0]
 800e99a:	f000 b82d 	b.w	800e9f8 <_malloc_r>
 800e99e:	bf00      	nop
 800e9a0:	200001a8 	.word	0x200001a8

0800e9a4 <free>:
 800e9a4:	4b02      	ldr	r3, [pc, #8]	@ (800e9b0 <free+0xc>)
 800e9a6:	4601      	mov	r1, r0
 800e9a8:	6818      	ldr	r0, [r3, #0]
 800e9aa:	f002 bc25 	b.w	80111f8 <_free_r>
 800e9ae:	bf00      	nop
 800e9b0:	200001a8 	.word	0x200001a8

0800e9b4 <sbrk_aligned>:
 800e9b4:	b570      	push	{r4, r5, r6, lr}
 800e9b6:	4e0f      	ldr	r6, [pc, #60]	@ (800e9f4 <sbrk_aligned+0x40>)
 800e9b8:	460c      	mov	r4, r1
 800e9ba:	6831      	ldr	r1, [r6, #0]
 800e9bc:	4605      	mov	r5, r0
 800e9be:	b911      	cbnz	r1, 800e9c6 <sbrk_aligned+0x12>
 800e9c0:	f001 fd4e 	bl	8010460 <_sbrk_r>
 800e9c4:	6030      	str	r0, [r6, #0]
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	f001 fd49 	bl	8010460 <_sbrk_r>
 800e9ce:	1c43      	adds	r3, r0, #1
 800e9d0:	d103      	bne.n	800e9da <sbrk_aligned+0x26>
 800e9d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	bd70      	pop	{r4, r5, r6, pc}
 800e9da:	1cc4      	adds	r4, r0, #3
 800e9dc:	f024 0403 	bic.w	r4, r4, #3
 800e9e0:	42a0      	cmp	r0, r4
 800e9e2:	d0f8      	beq.n	800e9d6 <sbrk_aligned+0x22>
 800e9e4:	1a21      	subs	r1, r4, r0
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f001 fd3a 	bl	8010460 <_sbrk_r>
 800e9ec:	3001      	adds	r0, #1
 800e9ee:	d1f2      	bne.n	800e9d6 <sbrk_aligned+0x22>
 800e9f0:	e7ef      	b.n	800e9d2 <sbrk_aligned+0x1e>
 800e9f2:	bf00      	nop
 800e9f4:	200013d0 	.word	0x200013d0

0800e9f8 <_malloc_r>:
 800e9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9fc:	1ccd      	adds	r5, r1, #3
 800e9fe:	f025 0503 	bic.w	r5, r5, #3
 800ea02:	3508      	adds	r5, #8
 800ea04:	2d0c      	cmp	r5, #12
 800ea06:	bf38      	it	cc
 800ea08:	250c      	movcc	r5, #12
 800ea0a:	2d00      	cmp	r5, #0
 800ea0c:	4606      	mov	r6, r0
 800ea0e:	db01      	blt.n	800ea14 <_malloc_r+0x1c>
 800ea10:	42a9      	cmp	r1, r5
 800ea12:	d904      	bls.n	800ea1e <_malloc_r+0x26>
 800ea14:	230c      	movs	r3, #12
 800ea16:	6033      	str	r3, [r6, #0]
 800ea18:	2000      	movs	r0, #0
 800ea1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eaf4 <_malloc_r+0xfc>
 800ea22:	f000 fc3f 	bl	800f2a4 <__malloc_lock>
 800ea26:	f8d8 3000 	ldr.w	r3, [r8]
 800ea2a:	461c      	mov	r4, r3
 800ea2c:	bb44      	cbnz	r4, 800ea80 <_malloc_r+0x88>
 800ea2e:	4629      	mov	r1, r5
 800ea30:	4630      	mov	r0, r6
 800ea32:	f7ff ffbf 	bl	800e9b4 <sbrk_aligned>
 800ea36:	1c43      	adds	r3, r0, #1
 800ea38:	4604      	mov	r4, r0
 800ea3a:	d158      	bne.n	800eaee <_malloc_r+0xf6>
 800ea3c:	f8d8 4000 	ldr.w	r4, [r8]
 800ea40:	4627      	mov	r7, r4
 800ea42:	2f00      	cmp	r7, #0
 800ea44:	d143      	bne.n	800eace <_malloc_r+0xd6>
 800ea46:	2c00      	cmp	r4, #0
 800ea48:	d04b      	beq.n	800eae2 <_malloc_r+0xea>
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	4630      	mov	r0, r6
 800ea50:	eb04 0903 	add.w	r9, r4, r3
 800ea54:	f001 fd04 	bl	8010460 <_sbrk_r>
 800ea58:	4581      	cmp	r9, r0
 800ea5a:	d142      	bne.n	800eae2 <_malloc_r+0xea>
 800ea5c:	6821      	ldr	r1, [r4, #0]
 800ea5e:	1a6d      	subs	r5, r5, r1
 800ea60:	4629      	mov	r1, r5
 800ea62:	4630      	mov	r0, r6
 800ea64:	f7ff ffa6 	bl	800e9b4 <sbrk_aligned>
 800ea68:	3001      	adds	r0, #1
 800ea6a:	d03a      	beq.n	800eae2 <_malloc_r+0xea>
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	442b      	add	r3, r5
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	f8d8 3000 	ldr.w	r3, [r8]
 800ea76:	685a      	ldr	r2, [r3, #4]
 800ea78:	bb62      	cbnz	r2, 800ead4 <_malloc_r+0xdc>
 800ea7a:	f8c8 7000 	str.w	r7, [r8]
 800ea7e:	e00f      	b.n	800eaa0 <_malloc_r+0xa8>
 800ea80:	6822      	ldr	r2, [r4, #0]
 800ea82:	1b52      	subs	r2, r2, r5
 800ea84:	d420      	bmi.n	800eac8 <_malloc_r+0xd0>
 800ea86:	2a0b      	cmp	r2, #11
 800ea88:	d917      	bls.n	800eaba <_malloc_r+0xc2>
 800ea8a:	1961      	adds	r1, r4, r5
 800ea8c:	42a3      	cmp	r3, r4
 800ea8e:	6025      	str	r5, [r4, #0]
 800ea90:	bf18      	it	ne
 800ea92:	6059      	strne	r1, [r3, #4]
 800ea94:	6863      	ldr	r3, [r4, #4]
 800ea96:	bf08      	it	eq
 800ea98:	f8c8 1000 	streq.w	r1, [r8]
 800ea9c:	5162      	str	r2, [r4, r5]
 800ea9e:	604b      	str	r3, [r1, #4]
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f000 fc05 	bl	800f2b0 <__malloc_unlock>
 800eaa6:	f104 000b 	add.w	r0, r4, #11
 800eaaa:	1d23      	adds	r3, r4, #4
 800eaac:	f020 0007 	bic.w	r0, r0, #7
 800eab0:	1ac2      	subs	r2, r0, r3
 800eab2:	bf1c      	itt	ne
 800eab4:	1a1b      	subne	r3, r3, r0
 800eab6:	50a3      	strne	r3, [r4, r2]
 800eab8:	e7af      	b.n	800ea1a <_malloc_r+0x22>
 800eaba:	6862      	ldr	r2, [r4, #4]
 800eabc:	42a3      	cmp	r3, r4
 800eabe:	bf0c      	ite	eq
 800eac0:	f8c8 2000 	streq.w	r2, [r8]
 800eac4:	605a      	strne	r2, [r3, #4]
 800eac6:	e7eb      	b.n	800eaa0 <_malloc_r+0xa8>
 800eac8:	4623      	mov	r3, r4
 800eaca:	6864      	ldr	r4, [r4, #4]
 800eacc:	e7ae      	b.n	800ea2c <_malloc_r+0x34>
 800eace:	463c      	mov	r4, r7
 800ead0:	687f      	ldr	r7, [r7, #4]
 800ead2:	e7b6      	b.n	800ea42 <_malloc_r+0x4a>
 800ead4:	461a      	mov	r2, r3
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	42a3      	cmp	r3, r4
 800eada:	d1fb      	bne.n	800ead4 <_malloc_r+0xdc>
 800eadc:	2300      	movs	r3, #0
 800eade:	6053      	str	r3, [r2, #4]
 800eae0:	e7de      	b.n	800eaa0 <_malloc_r+0xa8>
 800eae2:	230c      	movs	r3, #12
 800eae4:	6033      	str	r3, [r6, #0]
 800eae6:	4630      	mov	r0, r6
 800eae8:	f000 fbe2 	bl	800f2b0 <__malloc_unlock>
 800eaec:	e794      	b.n	800ea18 <_malloc_r+0x20>
 800eaee:	6005      	str	r5, [r0, #0]
 800eaf0:	e7d6      	b.n	800eaa0 <_malloc_r+0xa8>
 800eaf2:	bf00      	nop
 800eaf4:	200013d4 	.word	0x200013d4

0800eaf8 <_printf_common>:
 800eaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eafc:	4616      	mov	r6, r2
 800eafe:	4698      	mov	r8, r3
 800eb00:	688a      	ldr	r2, [r1, #8]
 800eb02:	690b      	ldr	r3, [r1, #16]
 800eb04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	bfb8      	it	lt
 800eb0c:	4613      	movlt	r3, r2
 800eb0e:	6033      	str	r3, [r6, #0]
 800eb10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb14:	4607      	mov	r7, r0
 800eb16:	460c      	mov	r4, r1
 800eb18:	b10a      	cbz	r2, 800eb1e <_printf_common+0x26>
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	6033      	str	r3, [r6, #0]
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	0699      	lsls	r1, r3, #26
 800eb22:	bf42      	ittt	mi
 800eb24:	6833      	ldrmi	r3, [r6, #0]
 800eb26:	3302      	addmi	r3, #2
 800eb28:	6033      	strmi	r3, [r6, #0]
 800eb2a:	6825      	ldr	r5, [r4, #0]
 800eb2c:	f015 0506 	ands.w	r5, r5, #6
 800eb30:	d106      	bne.n	800eb40 <_printf_common+0x48>
 800eb32:	f104 0a19 	add.w	sl, r4, #25
 800eb36:	68e3      	ldr	r3, [r4, #12]
 800eb38:	6832      	ldr	r2, [r6, #0]
 800eb3a:	1a9b      	subs	r3, r3, r2
 800eb3c:	42ab      	cmp	r3, r5
 800eb3e:	dc26      	bgt.n	800eb8e <_printf_common+0x96>
 800eb40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb44:	6822      	ldr	r2, [r4, #0]
 800eb46:	3b00      	subs	r3, #0
 800eb48:	bf18      	it	ne
 800eb4a:	2301      	movne	r3, #1
 800eb4c:	0692      	lsls	r2, r2, #26
 800eb4e:	d42b      	bmi.n	800eba8 <_printf_common+0xb0>
 800eb50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb54:	4641      	mov	r1, r8
 800eb56:	4638      	mov	r0, r7
 800eb58:	47c8      	blx	r9
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	d01e      	beq.n	800eb9c <_printf_common+0xa4>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	6922      	ldr	r2, [r4, #16]
 800eb62:	f003 0306 	and.w	r3, r3, #6
 800eb66:	2b04      	cmp	r3, #4
 800eb68:	bf02      	ittt	eq
 800eb6a:	68e5      	ldreq	r5, [r4, #12]
 800eb6c:	6833      	ldreq	r3, [r6, #0]
 800eb6e:	1aed      	subeq	r5, r5, r3
 800eb70:	68a3      	ldr	r3, [r4, #8]
 800eb72:	bf0c      	ite	eq
 800eb74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb78:	2500      	movne	r5, #0
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	bfc4      	itt	gt
 800eb7e:	1a9b      	subgt	r3, r3, r2
 800eb80:	18ed      	addgt	r5, r5, r3
 800eb82:	2600      	movs	r6, #0
 800eb84:	341a      	adds	r4, #26
 800eb86:	42b5      	cmp	r5, r6
 800eb88:	d11a      	bne.n	800ebc0 <_printf_common+0xc8>
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	e008      	b.n	800eba0 <_printf_common+0xa8>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	4652      	mov	r2, sl
 800eb92:	4641      	mov	r1, r8
 800eb94:	4638      	mov	r0, r7
 800eb96:	47c8      	blx	r9
 800eb98:	3001      	adds	r0, #1
 800eb9a:	d103      	bne.n	800eba4 <_printf_common+0xac>
 800eb9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba4:	3501      	adds	r5, #1
 800eba6:	e7c6      	b.n	800eb36 <_printf_common+0x3e>
 800eba8:	18e1      	adds	r1, r4, r3
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	2030      	movs	r0, #48	@ 0x30
 800ebae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebb2:	4422      	add	r2, r4
 800ebb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebbc:	3302      	adds	r3, #2
 800ebbe:	e7c7      	b.n	800eb50 <_printf_common+0x58>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	4622      	mov	r2, r4
 800ebc4:	4641      	mov	r1, r8
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	47c8      	blx	r9
 800ebca:	3001      	adds	r0, #1
 800ebcc:	d0e6      	beq.n	800eb9c <_printf_common+0xa4>
 800ebce:	3601      	adds	r6, #1
 800ebd0:	e7d9      	b.n	800eb86 <_printf_common+0x8e>
	...

0800ebd4 <_printf_i>:
 800ebd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd8:	7e0f      	ldrb	r7, [r1, #24]
 800ebda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebdc:	2f78      	cmp	r7, #120	@ 0x78
 800ebde:	4691      	mov	r9, r2
 800ebe0:	4680      	mov	r8, r0
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	469a      	mov	sl, r3
 800ebe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebea:	d807      	bhi.n	800ebfc <_printf_i+0x28>
 800ebec:	2f62      	cmp	r7, #98	@ 0x62
 800ebee:	d80a      	bhi.n	800ec06 <_printf_i+0x32>
 800ebf0:	2f00      	cmp	r7, #0
 800ebf2:	f000 80d2 	beq.w	800ed9a <_printf_i+0x1c6>
 800ebf6:	2f58      	cmp	r7, #88	@ 0x58
 800ebf8:	f000 80b9 	beq.w	800ed6e <_printf_i+0x19a>
 800ebfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec04:	e03a      	b.n	800ec7c <_printf_i+0xa8>
 800ec06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec0a:	2b15      	cmp	r3, #21
 800ec0c:	d8f6      	bhi.n	800ebfc <_printf_i+0x28>
 800ec0e:	a101      	add	r1, pc, #4	@ (adr r1, 800ec14 <_printf_i+0x40>)
 800ec10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec14:	0800ec6d 	.word	0x0800ec6d
 800ec18:	0800ec81 	.word	0x0800ec81
 800ec1c:	0800ebfd 	.word	0x0800ebfd
 800ec20:	0800ebfd 	.word	0x0800ebfd
 800ec24:	0800ebfd 	.word	0x0800ebfd
 800ec28:	0800ebfd 	.word	0x0800ebfd
 800ec2c:	0800ec81 	.word	0x0800ec81
 800ec30:	0800ebfd 	.word	0x0800ebfd
 800ec34:	0800ebfd 	.word	0x0800ebfd
 800ec38:	0800ebfd 	.word	0x0800ebfd
 800ec3c:	0800ebfd 	.word	0x0800ebfd
 800ec40:	0800ed81 	.word	0x0800ed81
 800ec44:	0800ecab 	.word	0x0800ecab
 800ec48:	0800ed3b 	.word	0x0800ed3b
 800ec4c:	0800ebfd 	.word	0x0800ebfd
 800ec50:	0800ebfd 	.word	0x0800ebfd
 800ec54:	0800eda3 	.word	0x0800eda3
 800ec58:	0800ebfd 	.word	0x0800ebfd
 800ec5c:	0800ecab 	.word	0x0800ecab
 800ec60:	0800ebfd 	.word	0x0800ebfd
 800ec64:	0800ebfd 	.word	0x0800ebfd
 800ec68:	0800ed43 	.word	0x0800ed43
 800ec6c:	6833      	ldr	r3, [r6, #0]
 800ec6e:	1d1a      	adds	r2, r3, #4
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6032      	str	r2, [r6, #0]
 800ec74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e09d      	b.n	800edbc <_printf_i+0x1e8>
 800ec80:	6833      	ldr	r3, [r6, #0]
 800ec82:	6820      	ldr	r0, [r4, #0]
 800ec84:	1d19      	adds	r1, r3, #4
 800ec86:	6031      	str	r1, [r6, #0]
 800ec88:	0606      	lsls	r6, r0, #24
 800ec8a:	d501      	bpl.n	800ec90 <_printf_i+0xbc>
 800ec8c:	681d      	ldr	r5, [r3, #0]
 800ec8e:	e003      	b.n	800ec98 <_printf_i+0xc4>
 800ec90:	0645      	lsls	r5, r0, #25
 800ec92:	d5fb      	bpl.n	800ec8c <_printf_i+0xb8>
 800ec94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	da03      	bge.n	800eca4 <_printf_i+0xd0>
 800ec9c:	232d      	movs	r3, #45	@ 0x2d
 800ec9e:	426d      	negs	r5, r5
 800eca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eca4:	4859      	ldr	r0, [pc, #356]	@ (800ee0c <_printf_i+0x238>)
 800eca6:	230a      	movs	r3, #10
 800eca8:	e011      	b.n	800ecce <_printf_i+0xfa>
 800ecaa:	6821      	ldr	r1, [r4, #0]
 800ecac:	6833      	ldr	r3, [r6, #0]
 800ecae:	0608      	lsls	r0, r1, #24
 800ecb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecb4:	d402      	bmi.n	800ecbc <_printf_i+0xe8>
 800ecb6:	0649      	lsls	r1, r1, #25
 800ecb8:	bf48      	it	mi
 800ecba:	b2ad      	uxthmi	r5, r5
 800ecbc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecbe:	4853      	ldr	r0, [pc, #332]	@ (800ee0c <_printf_i+0x238>)
 800ecc0:	6033      	str	r3, [r6, #0]
 800ecc2:	bf14      	ite	ne
 800ecc4:	230a      	movne	r3, #10
 800ecc6:	2308      	moveq	r3, #8
 800ecc8:	2100      	movs	r1, #0
 800ecca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ecce:	6866      	ldr	r6, [r4, #4]
 800ecd0:	60a6      	str	r6, [r4, #8]
 800ecd2:	2e00      	cmp	r6, #0
 800ecd4:	bfa2      	ittt	ge
 800ecd6:	6821      	ldrge	r1, [r4, #0]
 800ecd8:	f021 0104 	bicge.w	r1, r1, #4
 800ecdc:	6021      	strge	r1, [r4, #0]
 800ecde:	b90d      	cbnz	r5, 800ece4 <_printf_i+0x110>
 800ece0:	2e00      	cmp	r6, #0
 800ece2:	d04b      	beq.n	800ed7c <_printf_i+0x1a8>
 800ece4:	4616      	mov	r6, r2
 800ece6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecea:	fb03 5711 	mls	r7, r3, r1, r5
 800ecee:	5dc7      	ldrb	r7, [r0, r7]
 800ecf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecf4:	462f      	mov	r7, r5
 800ecf6:	42bb      	cmp	r3, r7
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	d9f4      	bls.n	800ece6 <_printf_i+0x112>
 800ecfc:	2b08      	cmp	r3, #8
 800ecfe:	d10b      	bne.n	800ed18 <_printf_i+0x144>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	07df      	lsls	r7, r3, #31
 800ed04:	d508      	bpl.n	800ed18 <_printf_i+0x144>
 800ed06:	6923      	ldr	r3, [r4, #16]
 800ed08:	6861      	ldr	r1, [r4, #4]
 800ed0a:	4299      	cmp	r1, r3
 800ed0c:	bfde      	ittt	le
 800ed0e:	2330      	movle	r3, #48	@ 0x30
 800ed10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ed18:	1b92      	subs	r2, r2, r6
 800ed1a:	6122      	str	r2, [r4, #16]
 800ed1c:	f8cd a000 	str.w	sl, [sp]
 800ed20:	464b      	mov	r3, r9
 800ed22:	aa03      	add	r2, sp, #12
 800ed24:	4621      	mov	r1, r4
 800ed26:	4640      	mov	r0, r8
 800ed28:	f7ff fee6 	bl	800eaf8 <_printf_common>
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	d14a      	bne.n	800edc6 <_printf_i+0x1f2>
 800ed30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed34:	b004      	add	sp, #16
 800ed36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	f043 0320 	orr.w	r3, r3, #32
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	4833      	ldr	r0, [pc, #204]	@ (800ee10 <_printf_i+0x23c>)
 800ed44:	2778      	movs	r7, #120	@ 0x78
 800ed46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	6831      	ldr	r1, [r6, #0]
 800ed4e:	061f      	lsls	r7, r3, #24
 800ed50:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed54:	d402      	bmi.n	800ed5c <_printf_i+0x188>
 800ed56:	065f      	lsls	r7, r3, #25
 800ed58:	bf48      	it	mi
 800ed5a:	b2ad      	uxthmi	r5, r5
 800ed5c:	6031      	str	r1, [r6, #0]
 800ed5e:	07d9      	lsls	r1, r3, #31
 800ed60:	bf44      	itt	mi
 800ed62:	f043 0320 	orrmi.w	r3, r3, #32
 800ed66:	6023      	strmi	r3, [r4, #0]
 800ed68:	b11d      	cbz	r5, 800ed72 <_printf_i+0x19e>
 800ed6a:	2310      	movs	r3, #16
 800ed6c:	e7ac      	b.n	800ecc8 <_printf_i+0xf4>
 800ed6e:	4827      	ldr	r0, [pc, #156]	@ (800ee0c <_printf_i+0x238>)
 800ed70:	e7e9      	b.n	800ed46 <_printf_i+0x172>
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	f023 0320 	bic.w	r3, r3, #32
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	e7f6      	b.n	800ed6a <_printf_i+0x196>
 800ed7c:	4616      	mov	r6, r2
 800ed7e:	e7bd      	b.n	800ecfc <_printf_i+0x128>
 800ed80:	6833      	ldr	r3, [r6, #0]
 800ed82:	6825      	ldr	r5, [r4, #0]
 800ed84:	6961      	ldr	r1, [r4, #20]
 800ed86:	1d18      	adds	r0, r3, #4
 800ed88:	6030      	str	r0, [r6, #0]
 800ed8a:	062e      	lsls	r6, r5, #24
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	d501      	bpl.n	800ed94 <_printf_i+0x1c0>
 800ed90:	6019      	str	r1, [r3, #0]
 800ed92:	e002      	b.n	800ed9a <_printf_i+0x1c6>
 800ed94:	0668      	lsls	r0, r5, #25
 800ed96:	d5fb      	bpl.n	800ed90 <_printf_i+0x1bc>
 800ed98:	8019      	strh	r1, [r3, #0]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	6123      	str	r3, [r4, #16]
 800ed9e:	4616      	mov	r6, r2
 800eda0:	e7bc      	b.n	800ed1c <_printf_i+0x148>
 800eda2:	6833      	ldr	r3, [r6, #0]
 800eda4:	1d1a      	adds	r2, r3, #4
 800eda6:	6032      	str	r2, [r6, #0]
 800eda8:	681e      	ldr	r6, [r3, #0]
 800edaa:	6862      	ldr	r2, [r4, #4]
 800edac:	2100      	movs	r1, #0
 800edae:	4630      	mov	r0, r6
 800edb0:	f7f1 fa36 	bl	8000220 <memchr>
 800edb4:	b108      	cbz	r0, 800edba <_printf_i+0x1e6>
 800edb6:	1b80      	subs	r0, r0, r6
 800edb8:	6060      	str	r0, [r4, #4]
 800edba:	6863      	ldr	r3, [r4, #4]
 800edbc:	6123      	str	r3, [r4, #16]
 800edbe:	2300      	movs	r3, #0
 800edc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edc4:	e7aa      	b.n	800ed1c <_printf_i+0x148>
 800edc6:	6923      	ldr	r3, [r4, #16]
 800edc8:	4632      	mov	r2, r6
 800edca:	4649      	mov	r1, r9
 800edcc:	4640      	mov	r0, r8
 800edce:	47d0      	blx	sl
 800edd0:	3001      	adds	r0, #1
 800edd2:	d0ad      	beq.n	800ed30 <_printf_i+0x15c>
 800edd4:	6823      	ldr	r3, [r4, #0]
 800edd6:	079b      	lsls	r3, r3, #30
 800edd8:	d413      	bmi.n	800ee02 <_printf_i+0x22e>
 800edda:	68e0      	ldr	r0, [r4, #12]
 800eddc:	9b03      	ldr	r3, [sp, #12]
 800edde:	4298      	cmp	r0, r3
 800ede0:	bfb8      	it	lt
 800ede2:	4618      	movlt	r0, r3
 800ede4:	e7a6      	b.n	800ed34 <_printf_i+0x160>
 800ede6:	2301      	movs	r3, #1
 800ede8:	4632      	mov	r2, r6
 800edea:	4649      	mov	r1, r9
 800edec:	4640      	mov	r0, r8
 800edee:	47d0      	blx	sl
 800edf0:	3001      	adds	r0, #1
 800edf2:	d09d      	beq.n	800ed30 <_printf_i+0x15c>
 800edf4:	3501      	adds	r5, #1
 800edf6:	68e3      	ldr	r3, [r4, #12]
 800edf8:	9903      	ldr	r1, [sp, #12]
 800edfa:	1a5b      	subs	r3, r3, r1
 800edfc:	42ab      	cmp	r3, r5
 800edfe:	dcf2      	bgt.n	800ede6 <_printf_i+0x212>
 800ee00:	e7eb      	b.n	800edda <_printf_i+0x206>
 800ee02:	2500      	movs	r5, #0
 800ee04:	f104 0619 	add.w	r6, r4, #25
 800ee08:	e7f5      	b.n	800edf6 <_printf_i+0x222>
 800ee0a:	bf00      	nop
 800ee0c:	080130d2 	.word	0x080130d2
 800ee10:	080130e3 	.word	0x080130e3

0800ee14 <_scanf_float>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	b087      	sub	sp, #28
 800ee1a:	4617      	mov	r7, r2
 800ee1c:	9303      	str	r3, [sp, #12]
 800ee1e:	688b      	ldr	r3, [r1, #8]
 800ee20:	1e5a      	subs	r2, r3, #1
 800ee22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ee26:	bf81      	itttt	hi
 800ee28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ee2c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ee30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ee34:	608b      	strhi	r3, [r1, #8]
 800ee36:	680b      	ldr	r3, [r1, #0]
 800ee38:	460a      	mov	r2, r1
 800ee3a:	f04f 0500 	mov.w	r5, #0
 800ee3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ee42:	f842 3b1c 	str.w	r3, [r2], #28
 800ee46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee4a:	4680      	mov	r8, r0
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	bf98      	it	ls
 800ee50:	f04f 0b00 	movls.w	fp, #0
 800ee54:	9201      	str	r2, [sp, #4]
 800ee56:	4616      	mov	r6, r2
 800ee58:	46aa      	mov	sl, r5
 800ee5a:	46a9      	mov	r9, r5
 800ee5c:	9502      	str	r5, [sp, #8]
 800ee5e:	68a2      	ldr	r2, [r4, #8]
 800ee60:	b152      	cbz	r2, 800ee78 <_scanf_float+0x64>
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	2b4e      	cmp	r3, #78	@ 0x4e
 800ee68:	d864      	bhi.n	800ef34 <_scanf_float+0x120>
 800ee6a:	2b40      	cmp	r3, #64	@ 0x40
 800ee6c:	d83c      	bhi.n	800eee8 <_scanf_float+0xd4>
 800ee6e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ee72:	b2c8      	uxtb	r0, r1
 800ee74:	280e      	cmp	r0, #14
 800ee76:	d93a      	bls.n	800eeee <_scanf_float+0xda>
 800ee78:	f1b9 0f00 	cmp.w	r9, #0
 800ee7c:	d003      	beq.n	800ee86 <_scanf_float+0x72>
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ee8a:	f1ba 0f01 	cmp.w	sl, #1
 800ee8e:	f200 8117 	bhi.w	800f0c0 <_scanf_float+0x2ac>
 800ee92:	9b01      	ldr	r3, [sp, #4]
 800ee94:	429e      	cmp	r6, r3
 800ee96:	f200 8108 	bhi.w	800f0aa <_scanf_float+0x296>
 800ee9a:	2001      	movs	r0, #1
 800ee9c:	b007      	add	sp, #28
 800ee9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eea6:	2a0d      	cmp	r2, #13
 800eea8:	d8e6      	bhi.n	800ee78 <_scanf_float+0x64>
 800eeaa:	a101      	add	r1, pc, #4	@ (adr r1, 800eeb0 <_scanf_float+0x9c>)
 800eeac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eeb0:	0800eff7 	.word	0x0800eff7
 800eeb4:	0800ee79 	.word	0x0800ee79
 800eeb8:	0800ee79 	.word	0x0800ee79
 800eebc:	0800ee79 	.word	0x0800ee79
 800eec0:	0800f057 	.word	0x0800f057
 800eec4:	0800f02f 	.word	0x0800f02f
 800eec8:	0800ee79 	.word	0x0800ee79
 800eecc:	0800ee79 	.word	0x0800ee79
 800eed0:	0800f005 	.word	0x0800f005
 800eed4:	0800ee79 	.word	0x0800ee79
 800eed8:	0800ee79 	.word	0x0800ee79
 800eedc:	0800ee79 	.word	0x0800ee79
 800eee0:	0800ee79 	.word	0x0800ee79
 800eee4:	0800efbd 	.word	0x0800efbd
 800eee8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800eeec:	e7db      	b.n	800eea6 <_scanf_float+0x92>
 800eeee:	290e      	cmp	r1, #14
 800eef0:	d8c2      	bhi.n	800ee78 <_scanf_float+0x64>
 800eef2:	a001      	add	r0, pc, #4	@ (adr r0, 800eef8 <_scanf_float+0xe4>)
 800eef4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eef8:	0800efad 	.word	0x0800efad
 800eefc:	0800ee79 	.word	0x0800ee79
 800ef00:	0800efad 	.word	0x0800efad
 800ef04:	0800f043 	.word	0x0800f043
 800ef08:	0800ee79 	.word	0x0800ee79
 800ef0c:	0800ef55 	.word	0x0800ef55
 800ef10:	0800ef93 	.word	0x0800ef93
 800ef14:	0800ef93 	.word	0x0800ef93
 800ef18:	0800ef93 	.word	0x0800ef93
 800ef1c:	0800ef93 	.word	0x0800ef93
 800ef20:	0800ef93 	.word	0x0800ef93
 800ef24:	0800ef93 	.word	0x0800ef93
 800ef28:	0800ef93 	.word	0x0800ef93
 800ef2c:	0800ef93 	.word	0x0800ef93
 800ef30:	0800ef93 	.word	0x0800ef93
 800ef34:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef36:	d809      	bhi.n	800ef4c <_scanf_float+0x138>
 800ef38:	2b60      	cmp	r3, #96	@ 0x60
 800ef3a:	d8b2      	bhi.n	800eea2 <_scanf_float+0x8e>
 800ef3c:	2b54      	cmp	r3, #84	@ 0x54
 800ef3e:	d07b      	beq.n	800f038 <_scanf_float+0x224>
 800ef40:	2b59      	cmp	r3, #89	@ 0x59
 800ef42:	d199      	bne.n	800ee78 <_scanf_float+0x64>
 800ef44:	2d07      	cmp	r5, #7
 800ef46:	d197      	bne.n	800ee78 <_scanf_float+0x64>
 800ef48:	2508      	movs	r5, #8
 800ef4a:	e02c      	b.n	800efa6 <_scanf_float+0x192>
 800ef4c:	2b74      	cmp	r3, #116	@ 0x74
 800ef4e:	d073      	beq.n	800f038 <_scanf_float+0x224>
 800ef50:	2b79      	cmp	r3, #121	@ 0x79
 800ef52:	e7f6      	b.n	800ef42 <_scanf_float+0x12e>
 800ef54:	6821      	ldr	r1, [r4, #0]
 800ef56:	05c8      	lsls	r0, r1, #23
 800ef58:	d51b      	bpl.n	800ef92 <_scanf_float+0x17e>
 800ef5a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ef5e:	6021      	str	r1, [r4, #0]
 800ef60:	f109 0901 	add.w	r9, r9, #1
 800ef64:	f1bb 0f00 	cmp.w	fp, #0
 800ef68:	d003      	beq.n	800ef72 <_scanf_float+0x15e>
 800ef6a:	3201      	adds	r2, #1
 800ef6c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800ef70:	60a2      	str	r2, [r4, #8]
 800ef72:	68a3      	ldr	r3, [r4, #8]
 800ef74:	3b01      	subs	r3, #1
 800ef76:	60a3      	str	r3, [r4, #8]
 800ef78:	6923      	ldr	r3, [r4, #16]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	6123      	str	r3, [r4, #16]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	3b01      	subs	r3, #1
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	607b      	str	r3, [r7, #4]
 800ef86:	f340 8087 	ble.w	800f098 <_scanf_float+0x284>
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	603b      	str	r3, [r7, #0]
 800ef90:	e765      	b.n	800ee5e <_scanf_float+0x4a>
 800ef92:	eb1a 0105 	adds.w	r1, sl, r5
 800ef96:	f47f af6f 	bne.w	800ee78 <_scanf_float+0x64>
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800efa0:	6022      	str	r2, [r4, #0]
 800efa2:	460d      	mov	r5, r1
 800efa4:	468a      	mov	sl, r1
 800efa6:	f806 3b01 	strb.w	r3, [r6], #1
 800efaa:	e7e2      	b.n	800ef72 <_scanf_float+0x15e>
 800efac:	6822      	ldr	r2, [r4, #0]
 800efae:	0610      	lsls	r0, r2, #24
 800efb0:	f57f af62 	bpl.w	800ee78 <_scanf_float+0x64>
 800efb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800efb8:	6022      	str	r2, [r4, #0]
 800efba:	e7f4      	b.n	800efa6 <_scanf_float+0x192>
 800efbc:	f1ba 0f00 	cmp.w	sl, #0
 800efc0:	d10e      	bne.n	800efe0 <_scanf_float+0x1cc>
 800efc2:	f1b9 0f00 	cmp.w	r9, #0
 800efc6:	d10e      	bne.n	800efe6 <_scanf_float+0x1d2>
 800efc8:	6822      	ldr	r2, [r4, #0]
 800efca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800efce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800efd2:	d108      	bne.n	800efe6 <_scanf_float+0x1d2>
 800efd4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800efd8:	6022      	str	r2, [r4, #0]
 800efda:	f04f 0a01 	mov.w	sl, #1
 800efde:	e7e2      	b.n	800efa6 <_scanf_float+0x192>
 800efe0:	f1ba 0f02 	cmp.w	sl, #2
 800efe4:	d055      	beq.n	800f092 <_scanf_float+0x27e>
 800efe6:	2d01      	cmp	r5, #1
 800efe8:	d002      	beq.n	800eff0 <_scanf_float+0x1dc>
 800efea:	2d04      	cmp	r5, #4
 800efec:	f47f af44 	bne.w	800ee78 <_scanf_float+0x64>
 800eff0:	3501      	adds	r5, #1
 800eff2:	b2ed      	uxtb	r5, r5
 800eff4:	e7d7      	b.n	800efa6 <_scanf_float+0x192>
 800eff6:	f1ba 0f01 	cmp.w	sl, #1
 800effa:	f47f af3d 	bne.w	800ee78 <_scanf_float+0x64>
 800effe:	f04f 0a02 	mov.w	sl, #2
 800f002:	e7d0      	b.n	800efa6 <_scanf_float+0x192>
 800f004:	b97d      	cbnz	r5, 800f026 <_scanf_float+0x212>
 800f006:	f1b9 0f00 	cmp.w	r9, #0
 800f00a:	f47f af38 	bne.w	800ee7e <_scanf_float+0x6a>
 800f00e:	6822      	ldr	r2, [r4, #0]
 800f010:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f014:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f018:	f040 8108 	bne.w	800f22c <_scanf_float+0x418>
 800f01c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f020:	6022      	str	r2, [r4, #0]
 800f022:	2501      	movs	r5, #1
 800f024:	e7bf      	b.n	800efa6 <_scanf_float+0x192>
 800f026:	2d03      	cmp	r5, #3
 800f028:	d0e2      	beq.n	800eff0 <_scanf_float+0x1dc>
 800f02a:	2d05      	cmp	r5, #5
 800f02c:	e7de      	b.n	800efec <_scanf_float+0x1d8>
 800f02e:	2d02      	cmp	r5, #2
 800f030:	f47f af22 	bne.w	800ee78 <_scanf_float+0x64>
 800f034:	2503      	movs	r5, #3
 800f036:	e7b6      	b.n	800efa6 <_scanf_float+0x192>
 800f038:	2d06      	cmp	r5, #6
 800f03a:	f47f af1d 	bne.w	800ee78 <_scanf_float+0x64>
 800f03e:	2507      	movs	r5, #7
 800f040:	e7b1      	b.n	800efa6 <_scanf_float+0x192>
 800f042:	6822      	ldr	r2, [r4, #0]
 800f044:	0591      	lsls	r1, r2, #22
 800f046:	f57f af17 	bpl.w	800ee78 <_scanf_float+0x64>
 800f04a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f04e:	6022      	str	r2, [r4, #0]
 800f050:	f8cd 9008 	str.w	r9, [sp, #8]
 800f054:	e7a7      	b.n	800efa6 <_scanf_float+0x192>
 800f056:	6822      	ldr	r2, [r4, #0]
 800f058:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f05c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f060:	d006      	beq.n	800f070 <_scanf_float+0x25c>
 800f062:	0550      	lsls	r0, r2, #21
 800f064:	f57f af08 	bpl.w	800ee78 <_scanf_float+0x64>
 800f068:	f1b9 0f00 	cmp.w	r9, #0
 800f06c:	f000 80de 	beq.w	800f22c <_scanf_float+0x418>
 800f070:	0591      	lsls	r1, r2, #22
 800f072:	bf58      	it	pl
 800f074:	9902      	ldrpl	r1, [sp, #8]
 800f076:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f07a:	bf58      	it	pl
 800f07c:	eba9 0101 	subpl.w	r1, r9, r1
 800f080:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f084:	bf58      	it	pl
 800f086:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f08a:	6022      	str	r2, [r4, #0]
 800f08c:	f04f 0900 	mov.w	r9, #0
 800f090:	e789      	b.n	800efa6 <_scanf_float+0x192>
 800f092:	f04f 0a03 	mov.w	sl, #3
 800f096:	e786      	b.n	800efa6 <_scanf_float+0x192>
 800f098:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f09c:	4639      	mov	r1, r7
 800f09e:	4640      	mov	r0, r8
 800f0a0:	4798      	blx	r3
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	f43f aedb 	beq.w	800ee5e <_scanf_float+0x4a>
 800f0a8:	e6e6      	b.n	800ee78 <_scanf_float+0x64>
 800f0aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0b2:	463a      	mov	r2, r7
 800f0b4:	4640      	mov	r0, r8
 800f0b6:	4798      	blx	r3
 800f0b8:	6923      	ldr	r3, [r4, #16]
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	6123      	str	r3, [r4, #16]
 800f0be:	e6e8      	b.n	800ee92 <_scanf_float+0x7e>
 800f0c0:	1e6b      	subs	r3, r5, #1
 800f0c2:	2b06      	cmp	r3, #6
 800f0c4:	d824      	bhi.n	800f110 <_scanf_float+0x2fc>
 800f0c6:	2d02      	cmp	r5, #2
 800f0c8:	d836      	bhi.n	800f138 <_scanf_float+0x324>
 800f0ca:	9b01      	ldr	r3, [sp, #4]
 800f0cc:	429e      	cmp	r6, r3
 800f0ce:	f67f aee4 	bls.w	800ee9a <_scanf_float+0x86>
 800f0d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0da:	463a      	mov	r2, r7
 800f0dc:	4640      	mov	r0, r8
 800f0de:	4798      	blx	r3
 800f0e0:	6923      	ldr	r3, [r4, #16]
 800f0e2:	3b01      	subs	r3, #1
 800f0e4:	6123      	str	r3, [r4, #16]
 800f0e6:	e7f0      	b.n	800f0ca <_scanf_float+0x2b6>
 800f0e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f0f0:	463a      	mov	r2, r7
 800f0f2:	4640      	mov	r0, r8
 800f0f4:	4798      	blx	r3
 800f0f6:	6923      	ldr	r3, [r4, #16]
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	6123      	str	r3, [r4, #16]
 800f0fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f100:	fa5f fa8a 	uxtb.w	sl, sl
 800f104:	f1ba 0f02 	cmp.w	sl, #2
 800f108:	d1ee      	bne.n	800f0e8 <_scanf_float+0x2d4>
 800f10a:	3d03      	subs	r5, #3
 800f10c:	b2ed      	uxtb	r5, r5
 800f10e:	1b76      	subs	r6, r6, r5
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	05da      	lsls	r2, r3, #23
 800f114:	d530      	bpl.n	800f178 <_scanf_float+0x364>
 800f116:	055b      	lsls	r3, r3, #21
 800f118:	d511      	bpl.n	800f13e <_scanf_float+0x32a>
 800f11a:	9b01      	ldr	r3, [sp, #4]
 800f11c:	429e      	cmp	r6, r3
 800f11e:	f67f aebc 	bls.w	800ee9a <_scanf_float+0x86>
 800f122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f12a:	463a      	mov	r2, r7
 800f12c:	4640      	mov	r0, r8
 800f12e:	4798      	blx	r3
 800f130:	6923      	ldr	r3, [r4, #16]
 800f132:	3b01      	subs	r3, #1
 800f134:	6123      	str	r3, [r4, #16]
 800f136:	e7f0      	b.n	800f11a <_scanf_float+0x306>
 800f138:	46aa      	mov	sl, r5
 800f13a:	46b3      	mov	fp, r6
 800f13c:	e7de      	b.n	800f0fc <_scanf_float+0x2e8>
 800f13e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f142:	6923      	ldr	r3, [r4, #16]
 800f144:	2965      	cmp	r1, #101	@ 0x65
 800f146:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f14a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800f14e:	6123      	str	r3, [r4, #16]
 800f150:	d00c      	beq.n	800f16c <_scanf_float+0x358>
 800f152:	2945      	cmp	r1, #69	@ 0x45
 800f154:	d00a      	beq.n	800f16c <_scanf_float+0x358>
 800f156:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f15a:	463a      	mov	r2, r7
 800f15c:	4640      	mov	r0, r8
 800f15e:	4798      	blx	r3
 800f160:	6923      	ldr	r3, [r4, #16]
 800f162:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f166:	3b01      	subs	r3, #1
 800f168:	1eb5      	subs	r5, r6, #2
 800f16a:	6123      	str	r3, [r4, #16]
 800f16c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f170:	463a      	mov	r2, r7
 800f172:	4640      	mov	r0, r8
 800f174:	4798      	blx	r3
 800f176:	462e      	mov	r6, r5
 800f178:	6822      	ldr	r2, [r4, #0]
 800f17a:	f012 0210 	ands.w	r2, r2, #16
 800f17e:	d001      	beq.n	800f184 <_scanf_float+0x370>
 800f180:	2000      	movs	r0, #0
 800f182:	e68b      	b.n	800ee9c <_scanf_float+0x88>
 800f184:	7032      	strb	r2, [r6, #0]
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f18c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f190:	d11c      	bne.n	800f1cc <_scanf_float+0x3b8>
 800f192:	9b02      	ldr	r3, [sp, #8]
 800f194:	454b      	cmp	r3, r9
 800f196:	eba3 0209 	sub.w	r2, r3, r9
 800f19a:	d123      	bne.n	800f1e4 <_scanf_float+0x3d0>
 800f19c:	9901      	ldr	r1, [sp, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	f000 ff51 	bl	8010048 <_strtod_r>
 800f1a6:	9b03      	ldr	r3, [sp, #12]
 800f1a8:	6821      	ldr	r1, [r4, #0]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f011 0f02 	tst.w	r1, #2
 800f1b0:	ec57 6b10 	vmov	r6, r7, d0
 800f1b4:	f103 0204 	add.w	r2, r3, #4
 800f1b8:	d01f      	beq.n	800f1fa <_scanf_float+0x3e6>
 800f1ba:	9903      	ldr	r1, [sp, #12]
 800f1bc:	600a      	str	r2, [r1, #0]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	e9c3 6700 	strd	r6, r7, [r3]
 800f1c4:	68e3      	ldr	r3, [r4, #12]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	60e3      	str	r3, [r4, #12]
 800f1ca:	e7d9      	b.n	800f180 <_scanf_float+0x36c>
 800f1cc:	9b04      	ldr	r3, [sp, #16]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d0e4      	beq.n	800f19c <_scanf_float+0x388>
 800f1d2:	9905      	ldr	r1, [sp, #20]
 800f1d4:	230a      	movs	r3, #10
 800f1d6:	3101      	adds	r1, #1
 800f1d8:	4640      	mov	r0, r8
 800f1da:	f001 f819 	bl	8010210 <_strtol_r>
 800f1de:	9b04      	ldr	r3, [sp, #16]
 800f1e0:	9e05      	ldr	r6, [sp, #20]
 800f1e2:	1ac2      	subs	r2, r0, r3
 800f1e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f1e8:	429e      	cmp	r6, r3
 800f1ea:	bf28      	it	cs
 800f1ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f1f0:	4910      	ldr	r1, [pc, #64]	@ (800f234 <_scanf_float+0x420>)
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f000 f862 	bl	800f2bc <siprintf>
 800f1f8:	e7d0      	b.n	800f19c <_scanf_float+0x388>
 800f1fa:	f011 0f04 	tst.w	r1, #4
 800f1fe:	9903      	ldr	r1, [sp, #12]
 800f200:	600a      	str	r2, [r1, #0]
 800f202:	d1dc      	bne.n	800f1be <_scanf_float+0x3aa>
 800f204:	681d      	ldr	r5, [r3, #0]
 800f206:	4632      	mov	r2, r6
 800f208:	463b      	mov	r3, r7
 800f20a:	4630      	mov	r0, r6
 800f20c:	4639      	mov	r1, r7
 800f20e:	f7f1 fcb5 	bl	8000b7c <__aeabi_dcmpun>
 800f212:	b128      	cbz	r0, 800f220 <_scanf_float+0x40c>
 800f214:	4808      	ldr	r0, [pc, #32]	@ (800f238 <_scanf_float+0x424>)
 800f216:	f001 f97f 	bl	8010518 <nanf>
 800f21a:	ed85 0a00 	vstr	s0, [r5]
 800f21e:	e7d1      	b.n	800f1c4 <_scanf_float+0x3b0>
 800f220:	4630      	mov	r0, r6
 800f222:	4639      	mov	r1, r7
 800f224:	f7f1 fd08 	bl	8000c38 <__aeabi_d2f>
 800f228:	6028      	str	r0, [r5, #0]
 800f22a:	e7cb      	b.n	800f1c4 <_scanf_float+0x3b0>
 800f22c:	f04f 0900 	mov.w	r9, #0
 800f230:	e629      	b.n	800ee86 <_scanf_float+0x72>
 800f232:	bf00      	nop
 800f234:	080130f4 	.word	0x080130f4
 800f238:	08013305 	.word	0x08013305

0800f23c <sniprintf>:
 800f23c:	b40c      	push	{r2, r3}
 800f23e:	b530      	push	{r4, r5, lr}
 800f240:	4b17      	ldr	r3, [pc, #92]	@ (800f2a0 <sniprintf+0x64>)
 800f242:	1e0c      	subs	r4, r1, #0
 800f244:	681d      	ldr	r5, [r3, #0]
 800f246:	b09d      	sub	sp, #116	@ 0x74
 800f248:	da08      	bge.n	800f25c <sniprintf+0x20>
 800f24a:	238b      	movs	r3, #139	@ 0x8b
 800f24c:	602b      	str	r3, [r5, #0]
 800f24e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f252:	b01d      	add	sp, #116	@ 0x74
 800f254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f258:	b002      	add	sp, #8
 800f25a:	4770      	bx	lr
 800f25c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f260:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f264:	bf14      	ite	ne
 800f266:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f26a:	4623      	moveq	r3, r4
 800f26c:	9304      	str	r3, [sp, #16]
 800f26e:	9307      	str	r3, [sp, #28]
 800f270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f274:	9002      	str	r0, [sp, #8]
 800f276:	9006      	str	r0, [sp, #24]
 800f278:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f27c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f27e:	ab21      	add	r3, sp, #132	@ 0x84
 800f280:	a902      	add	r1, sp, #8
 800f282:	4628      	mov	r0, r5
 800f284:	9301      	str	r3, [sp, #4]
 800f286:	f002 fb95 	bl	80119b4 <_svfiprintf_r>
 800f28a:	1c43      	adds	r3, r0, #1
 800f28c:	bfbc      	itt	lt
 800f28e:	238b      	movlt	r3, #139	@ 0x8b
 800f290:	602b      	strlt	r3, [r5, #0]
 800f292:	2c00      	cmp	r4, #0
 800f294:	d0dd      	beq.n	800f252 <sniprintf+0x16>
 800f296:	9b02      	ldr	r3, [sp, #8]
 800f298:	2200      	movs	r2, #0
 800f29a:	701a      	strb	r2, [r3, #0]
 800f29c:	e7d9      	b.n	800f252 <sniprintf+0x16>
 800f29e:	bf00      	nop
 800f2a0:	200001a8 	.word	0x200001a8

0800f2a4 <__malloc_lock>:
 800f2a4:	4801      	ldr	r0, [pc, #4]	@ (800f2ac <__malloc_lock+0x8>)
 800f2a6:	f001 b916 	b.w	80104d6 <__retarget_lock_acquire_recursive>
 800f2aa:	bf00      	nop
 800f2ac:	20001514 	.word	0x20001514

0800f2b0 <__malloc_unlock>:
 800f2b0:	4801      	ldr	r0, [pc, #4]	@ (800f2b8 <__malloc_unlock+0x8>)
 800f2b2:	f001 b911 	b.w	80104d8 <__retarget_lock_release_recursive>
 800f2b6:	bf00      	nop
 800f2b8:	20001514 	.word	0x20001514

0800f2bc <siprintf>:
 800f2bc:	b40e      	push	{r1, r2, r3}
 800f2be:	b500      	push	{lr}
 800f2c0:	b09c      	sub	sp, #112	@ 0x70
 800f2c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800f2c4:	9002      	str	r0, [sp, #8]
 800f2c6:	9006      	str	r0, [sp, #24]
 800f2c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f2cc:	4809      	ldr	r0, [pc, #36]	@ (800f2f4 <siprintf+0x38>)
 800f2ce:	9107      	str	r1, [sp, #28]
 800f2d0:	9104      	str	r1, [sp, #16]
 800f2d2:	4909      	ldr	r1, [pc, #36]	@ (800f2f8 <siprintf+0x3c>)
 800f2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2d8:	9105      	str	r1, [sp, #20]
 800f2da:	6800      	ldr	r0, [r0, #0]
 800f2dc:	9301      	str	r3, [sp, #4]
 800f2de:	a902      	add	r1, sp, #8
 800f2e0:	f002 fb68 	bl	80119b4 <_svfiprintf_r>
 800f2e4:	9b02      	ldr	r3, [sp, #8]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	701a      	strb	r2, [r3, #0]
 800f2ea:	b01c      	add	sp, #112	@ 0x70
 800f2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2f0:	b003      	add	sp, #12
 800f2f2:	4770      	bx	lr
 800f2f4:	200001a8 	.word	0x200001a8
 800f2f8:	ffff0208 	.word	0xffff0208

0800f2fc <std>:
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	b510      	push	{r4, lr}
 800f300:	4604      	mov	r4, r0
 800f302:	e9c0 3300 	strd	r3, r3, [r0]
 800f306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f30a:	6083      	str	r3, [r0, #8]
 800f30c:	8181      	strh	r1, [r0, #12]
 800f30e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f310:	81c2      	strh	r2, [r0, #14]
 800f312:	6183      	str	r3, [r0, #24]
 800f314:	4619      	mov	r1, r3
 800f316:	2208      	movs	r2, #8
 800f318:	305c      	adds	r0, #92	@ 0x5c
 800f31a:	f001 f895 	bl	8010448 <memset>
 800f31e:	4b0d      	ldr	r3, [pc, #52]	@ (800f354 <std+0x58>)
 800f320:	6263      	str	r3, [r4, #36]	@ 0x24
 800f322:	4b0d      	ldr	r3, [pc, #52]	@ (800f358 <std+0x5c>)
 800f324:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f326:	4b0d      	ldr	r3, [pc, #52]	@ (800f35c <std+0x60>)
 800f328:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f32a:	4b0d      	ldr	r3, [pc, #52]	@ (800f360 <std+0x64>)
 800f32c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f32e:	4b0d      	ldr	r3, [pc, #52]	@ (800f364 <std+0x68>)
 800f330:	6224      	str	r4, [r4, #32]
 800f332:	429c      	cmp	r4, r3
 800f334:	d006      	beq.n	800f344 <std+0x48>
 800f336:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f33a:	4294      	cmp	r4, r2
 800f33c:	d002      	beq.n	800f344 <std+0x48>
 800f33e:	33d0      	adds	r3, #208	@ 0xd0
 800f340:	429c      	cmp	r4, r3
 800f342:	d105      	bne.n	800f350 <std+0x54>
 800f344:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f34c:	f001 b8c2 	b.w	80104d4 <__retarget_lock_init_recursive>
 800f350:	bd10      	pop	{r4, pc}
 800f352:	bf00      	nop
 800f354:	0801268d 	.word	0x0801268d
 800f358:	080126af 	.word	0x080126af
 800f35c:	080126e7 	.word	0x080126e7
 800f360:	0801270b 	.word	0x0801270b
 800f364:	200013d8 	.word	0x200013d8

0800f368 <stdio_exit_handler>:
 800f368:	4a02      	ldr	r2, [pc, #8]	@ (800f374 <stdio_exit_handler+0xc>)
 800f36a:	4903      	ldr	r1, [pc, #12]	@ (800f378 <stdio_exit_handler+0x10>)
 800f36c:	4803      	ldr	r0, [pc, #12]	@ (800f37c <stdio_exit_handler+0x14>)
 800f36e:	f000 bf5b 	b.w	8010228 <_fwalk_sglue>
 800f372:	bf00      	nop
 800f374:	20000030 	.word	0x20000030
 800f378:	08011cd9 	.word	0x08011cd9
 800f37c:	200001ac 	.word	0x200001ac

0800f380 <cleanup_stdio>:
 800f380:	6841      	ldr	r1, [r0, #4]
 800f382:	4b0c      	ldr	r3, [pc, #48]	@ (800f3b4 <cleanup_stdio+0x34>)
 800f384:	4299      	cmp	r1, r3
 800f386:	b510      	push	{r4, lr}
 800f388:	4604      	mov	r4, r0
 800f38a:	d001      	beq.n	800f390 <cleanup_stdio+0x10>
 800f38c:	f002 fca4 	bl	8011cd8 <_fflush_r>
 800f390:	68a1      	ldr	r1, [r4, #8]
 800f392:	4b09      	ldr	r3, [pc, #36]	@ (800f3b8 <cleanup_stdio+0x38>)
 800f394:	4299      	cmp	r1, r3
 800f396:	d002      	beq.n	800f39e <cleanup_stdio+0x1e>
 800f398:	4620      	mov	r0, r4
 800f39a:	f002 fc9d 	bl	8011cd8 <_fflush_r>
 800f39e:	68e1      	ldr	r1, [r4, #12]
 800f3a0:	4b06      	ldr	r3, [pc, #24]	@ (800f3bc <cleanup_stdio+0x3c>)
 800f3a2:	4299      	cmp	r1, r3
 800f3a4:	d004      	beq.n	800f3b0 <cleanup_stdio+0x30>
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3ac:	f002 bc94 	b.w	8011cd8 <_fflush_r>
 800f3b0:	bd10      	pop	{r4, pc}
 800f3b2:	bf00      	nop
 800f3b4:	200013d8 	.word	0x200013d8
 800f3b8:	20001440 	.word	0x20001440
 800f3bc:	200014a8 	.word	0x200014a8

0800f3c0 <global_stdio_init.part.0>:
 800f3c0:	b510      	push	{r4, lr}
 800f3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f3f0 <global_stdio_init.part.0+0x30>)
 800f3c4:	4c0b      	ldr	r4, [pc, #44]	@ (800f3f4 <global_stdio_init.part.0+0x34>)
 800f3c6:	4a0c      	ldr	r2, [pc, #48]	@ (800f3f8 <global_stdio_init.part.0+0x38>)
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	2104      	movs	r1, #4
 800f3d0:	f7ff ff94 	bl	800f2fc <std>
 800f3d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f3d8:	2201      	movs	r2, #1
 800f3da:	2109      	movs	r1, #9
 800f3dc:	f7ff ff8e 	bl	800f2fc <std>
 800f3e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3ea:	2112      	movs	r1, #18
 800f3ec:	f7ff bf86 	b.w	800f2fc <std>
 800f3f0:	20001510 	.word	0x20001510
 800f3f4:	200013d8 	.word	0x200013d8
 800f3f8:	0800f369 	.word	0x0800f369

0800f3fc <__sfp_lock_acquire>:
 800f3fc:	4801      	ldr	r0, [pc, #4]	@ (800f404 <__sfp_lock_acquire+0x8>)
 800f3fe:	f001 b86a 	b.w	80104d6 <__retarget_lock_acquire_recursive>
 800f402:	bf00      	nop
 800f404:	20001515 	.word	0x20001515

0800f408 <__sfp_lock_release>:
 800f408:	4801      	ldr	r0, [pc, #4]	@ (800f410 <__sfp_lock_release+0x8>)
 800f40a:	f001 b865 	b.w	80104d8 <__retarget_lock_release_recursive>
 800f40e:	bf00      	nop
 800f410:	20001515 	.word	0x20001515

0800f414 <__sinit>:
 800f414:	b510      	push	{r4, lr}
 800f416:	4604      	mov	r4, r0
 800f418:	f7ff fff0 	bl	800f3fc <__sfp_lock_acquire>
 800f41c:	6a23      	ldr	r3, [r4, #32]
 800f41e:	b11b      	cbz	r3, 800f428 <__sinit+0x14>
 800f420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f424:	f7ff bff0 	b.w	800f408 <__sfp_lock_release>
 800f428:	4b04      	ldr	r3, [pc, #16]	@ (800f43c <__sinit+0x28>)
 800f42a:	6223      	str	r3, [r4, #32]
 800f42c:	4b04      	ldr	r3, [pc, #16]	@ (800f440 <__sinit+0x2c>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d1f5      	bne.n	800f420 <__sinit+0xc>
 800f434:	f7ff ffc4 	bl	800f3c0 <global_stdio_init.part.0>
 800f438:	e7f2      	b.n	800f420 <__sinit+0xc>
 800f43a:	bf00      	nop
 800f43c:	0800f381 	.word	0x0800f381
 800f440:	20001510 	.word	0x20001510

0800f444 <sulp>:
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	4604      	mov	r4, r0
 800f448:	460d      	mov	r5, r1
 800f44a:	ec45 4b10 	vmov	d0, r4, r5
 800f44e:	4616      	mov	r6, r2
 800f450:	f002 ffde 	bl	8012410 <__ulp>
 800f454:	ec51 0b10 	vmov	r0, r1, d0
 800f458:	b17e      	cbz	r6, 800f47a <sulp+0x36>
 800f45a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f45e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f462:	2b00      	cmp	r3, #0
 800f464:	dd09      	ble.n	800f47a <sulp+0x36>
 800f466:	051b      	lsls	r3, r3, #20
 800f468:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f46c:	2400      	movs	r4, #0
 800f46e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f472:	4622      	mov	r2, r4
 800f474:	462b      	mov	r3, r5
 800f476:	f7f1 f8e7 	bl	8000648 <__aeabi_dmul>
 800f47a:	ec41 0b10 	vmov	d0, r0, r1
 800f47e:	bd70      	pop	{r4, r5, r6, pc}

0800f480 <_strtod_l>:
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	b09f      	sub	sp, #124	@ 0x7c
 800f486:	460c      	mov	r4, r1
 800f488:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f48a:	2200      	movs	r2, #0
 800f48c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f48e:	9005      	str	r0, [sp, #20]
 800f490:	f04f 0a00 	mov.w	sl, #0
 800f494:	f04f 0b00 	mov.w	fp, #0
 800f498:	460a      	mov	r2, r1
 800f49a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f49c:	7811      	ldrb	r1, [r2, #0]
 800f49e:	292b      	cmp	r1, #43	@ 0x2b
 800f4a0:	d04a      	beq.n	800f538 <_strtod_l+0xb8>
 800f4a2:	d838      	bhi.n	800f516 <_strtod_l+0x96>
 800f4a4:	290d      	cmp	r1, #13
 800f4a6:	d832      	bhi.n	800f50e <_strtod_l+0x8e>
 800f4a8:	2908      	cmp	r1, #8
 800f4aa:	d832      	bhi.n	800f512 <_strtod_l+0x92>
 800f4ac:	2900      	cmp	r1, #0
 800f4ae:	d03b      	beq.n	800f528 <_strtod_l+0xa8>
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f4b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f4b6:	782a      	ldrb	r2, [r5, #0]
 800f4b8:	2a30      	cmp	r2, #48	@ 0x30
 800f4ba:	f040 80b3 	bne.w	800f624 <_strtod_l+0x1a4>
 800f4be:	786a      	ldrb	r2, [r5, #1]
 800f4c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f4c4:	2a58      	cmp	r2, #88	@ 0x58
 800f4c6:	d16e      	bne.n	800f5a6 <_strtod_l+0x126>
 800f4c8:	9302      	str	r3, [sp, #8]
 800f4ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800f4d0:	9300      	str	r3, [sp, #0]
 800f4d2:	4a8e      	ldr	r2, [pc, #568]	@ (800f70c <_strtod_l+0x28c>)
 800f4d4:	9805      	ldr	r0, [sp, #20]
 800f4d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f4d8:	a919      	add	r1, sp, #100	@ 0x64
 800f4da:	f001 ff3f 	bl	801135c <__gethex>
 800f4de:	f010 060f 	ands.w	r6, r0, #15
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	d005      	beq.n	800f4f2 <_strtod_l+0x72>
 800f4e6:	2e06      	cmp	r6, #6
 800f4e8:	d128      	bne.n	800f53c <_strtod_l+0xbc>
 800f4ea:	3501      	adds	r5, #1
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800f4f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f040 858e 	bne.w	8010016 <_strtod_l+0xb96>
 800f4fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4fc:	b1cb      	cbz	r3, 800f532 <_strtod_l+0xb2>
 800f4fe:	4652      	mov	r2, sl
 800f500:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f504:	ec43 2b10 	vmov	d0, r2, r3
 800f508:	b01f      	add	sp, #124	@ 0x7c
 800f50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f50e:	2920      	cmp	r1, #32
 800f510:	d1ce      	bne.n	800f4b0 <_strtod_l+0x30>
 800f512:	3201      	adds	r2, #1
 800f514:	e7c1      	b.n	800f49a <_strtod_l+0x1a>
 800f516:	292d      	cmp	r1, #45	@ 0x2d
 800f518:	d1ca      	bne.n	800f4b0 <_strtod_l+0x30>
 800f51a:	2101      	movs	r1, #1
 800f51c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f51e:	1c51      	adds	r1, r2, #1
 800f520:	9119      	str	r1, [sp, #100]	@ 0x64
 800f522:	7852      	ldrb	r2, [r2, #1]
 800f524:	2a00      	cmp	r2, #0
 800f526:	d1c5      	bne.n	800f4b4 <_strtod_l+0x34>
 800f528:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f52a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f040 8570 	bne.w	8010012 <_strtod_l+0xb92>
 800f532:	4652      	mov	r2, sl
 800f534:	465b      	mov	r3, fp
 800f536:	e7e5      	b.n	800f504 <_strtod_l+0x84>
 800f538:	2100      	movs	r1, #0
 800f53a:	e7ef      	b.n	800f51c <_strtod_l+0x9c>
 800f53c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f53e:	b13a      	cbz	r2, 800f550 <_strtod_l+0xd0>
 800f540:	2135      	movs	r1, #53	@ 0x35
 800f542:	a81c      	add	r0, sp, #112	@ 0x70
 800f544:	f003 f85e 	bl	8012604 <__copybits>
 800f548:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f54a:	9805      	ldr	r0, [sp, #20]
 800f54c:	f002 fc2c 	bl	8011da8 <_Bfree>
 800f550:	3e01      	subs	r6, #1
 800f552:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f554:	2e04      	cmp	r6, #4
 800f556:	d806      	bhi.n	800f566 <_strtod_l+0xe6>
 800f558:	e8df f006 	tbb	[pc, r6]
 800f55c:	201d0314 	.word	0x201d0314
 800f560:	14          	.byte	0x14
 800f561:	00          	.byte	0x00
 800f562:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f566:	05e1      	lsls	r1, r4, #23
 800f568:	bf48      	it	mi
 800f56a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f56e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f572:	0d1b      	lsrs	r3, r3, #20
 800f574:	051b      	lsls	r3, r3, #20
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1bb      	bne.n	800f4f2 <_strtod_l+0x72>
 800f57a:	f000 ff81 	bl	8010480 <__errno>
 800f57e:	2322      	movs	r3, #34	@ 0x22
 800f580:	6003      	str	r3, [r0, #0]
 800f582:	e7b6      	b.n	800f4f2 <_strtod_l+0x72>
 800f584:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f588:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f58c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f590:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f594:	e7e7      	b.n	800f566 <_strtod_l+0xe6>
 800f596:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f714 <_strtod_l+0x294>
 800f59a:	e7e4      	b.n	800f566 <_strtod_l+0xe6>
 800f59c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f5a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f5a4:	e7df      	b.n	800f566 <_strtod_l+0xe6>
 800f5a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5a8:	1c5a      	adds	r2, r3, #1
 800f5aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800f5ac:	785b      	ldrb	r3, [r3, #1]
 800f5ae:	2b30      	cmp	r3, #48	@ 0x30
 800f5b0:	d0f9      	beq.n	800f5a6 <_strtod_l+0x126>
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d09d      	beq.n	800f4f2 <_strtod_l+0x72>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f5be:	2300      	movs	r3, #0
 800f5c0:	9308      	str	r3, [sp, #32]
 800f5c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5c4:	461f      	mov	r7, r3
 800f5c6:	220a      	movs	r2, #10
 800f5c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f5ca:	7805      	ldrb	r5, [r0, #0]
 800f5cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f5d0:	b2d9      	uxtb	r1, r3
 800f5d2:	2909      	cmp	r1, #9
 800f5d4:	d928      	bls.n	800f628 <_strtod_l+0x1a8>
 800f5d6:	494e      	ldr	r1, [pc, #312]	@ (800f710 <_strtod_l+0x290>)
 800f5d8:	2201      	movs	r2, #1
 800f5da:	f000 feb0 	bl	801033e <strncmp>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d032      	beq.n	800f648 <_strtod_l+0x1c8>
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	462a      	mov	r2, r5
 800f5e6:	4681      	mov	r9, r0
 800f5e8:	463d      	mov	r5, r7
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2a65      	cmp	r2, #101	@ 0x65
 800f5ee:	d001      	beq.n	800f5f4 <_strtod_l+0x174>
 800f5f0:	2a45      	cmp	r2, #69	@ 0x45
 800f5f2:	d114      	bne.n	800f61e <_strtod_l+0x19e>
 800f5f4:	b91d      	cbnz	r5, 800f5fe <_strtod_l+0x17e>
 800f5f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5f8:	4302      	orrs	r2, r0
 800f5fa:	d095      	beq.n	800f528 <_strtod_l+0xa8>
 800f5fc:	2500      	movs	r5, #0
 800f5fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f600:	1c62      	adds	r2, r4, #1
 800f602:	9219      	str	r2, [sp, #100]	@ 0x64
 800f604:	7862      	ldrb	r2, [r4, #1]
 800f606:	2a2b      	cmp	r2, #43	@ 0x2b
 800f608:	d077      	beq.n	800f6fa <_strtod_l+0x27a>
 800f60a:	2a2d      	cmp	r2, #45	@ 0x2d
 800f60c:	d07b      	beq.n	800f706 <_strtod_l+0x286>
 800f60e:	f04f 0c00 	mov.w	ip, #0
 800f612:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f616:	2909      	cmp	r1, #9
 800f618:	f240 8082 	bls.w	800f720 <_strtod_l+0x2a0>
 800f61c:	9419      	str	r4, [sp, #100]	@ 0x64
 800f61e:	f04f 0800 	mov.w	r8, #0
 800f622:	e0a2      	b.n	800f76a <_strtod_l+0x2ea>
 800f624:	2300      	movs	r3, #0
 800f626:	e7c7      	b.n	800f5b8 <_strtod_l+0x138>
 800f628:	2f08      	cmp	r7, #8
 800f62a:	bfd5      	itete	le
 800f62c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f62e:	9908      	ldrgt	r1, [sp, #32]
 800f630:	fb02 3301 	mlale	r3, r2, r1, r3
 800f634:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f638:	f100 0001 	add.w	r0, r0, #1
 800f63c:	bfd4      	ite	le
 800f63e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f640:	9308      	strgt	r3, [sp, #32]
 800f642:	3701      	adds	r7, #1
 800f644:	9019      	str	r0, [sp, #100]	@ 0x64
 800f646:	e7bf      	b.n	800f5c8 <_strtod_l+0x148>
 800f648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f64a:	1c5a      	adds	r2, r3, #1
 800f64c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f64e:	785a      	ldrb	r2, [r3, #1]
 800f650:	b37f      	cbz	r7, 800f6b2 <_strtod_l+0x232>
 800f652:	4681      	mov	r9, r0
 800f654:	463d      	mov	r5, r7
 800f656:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f65a:	2b09      	cmp	r3, #9
 800f65c:	d912      	bls.n	800f684 <_strtod_l+0x204>
 800f65e:	2301      	movs	r3, #1
 800f660:	e7c4      	b.n	800f5ec <_strtod_l+0x16c>
 800f662:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f664:	1c5a      	adds	r2, r3, #1
 800f666:	9219      	str	r2, [sp, #100]	@ 0x64
 800f668:	785a      	ldrb	r2, [r3, #1]
 800f66a:	3001      	adds	r0, #1
 800f66c:	2a30      	cmp	r2, #48	@ 0x30
 800f66e:	d0f8      	beq.n	800f662 <_strtod_l+0x1e2>
 800f670:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f674:	2b08      	cmp	r3, #8
 800f676:	f200 84d3 	bhi.w	8010020 <_strtod_l+0xba0>
 800f67a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f67c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f67e:	4681      	mov	r9, r0
 800f680:	2000      	movs	r0, #0
 800f682:	4605      	mov	r5, r0
 800f684:	3a30      	subs	r2, #48	@ 0x30
 800f686:	f100 0301 	add.w	r3, r0, #1
 800f68a:	d02a      	beq.n	800f6e2 <_strtod_l+0x262>
 800f68c:	4499      	add	r9, r3
 800f68e:	eb00 0c05 	add.w	ip, r0, r5
 800f692:	462b      	mov	r3, r5
 800f694:	210a      	movs	r1, #10
 800f696:	4563      	cmp	r3, ip
 800f698:	d10d      	bne.n	800f6b6 <_strtod_l+0x236>
 800f69a:	1c69      	adds	r1, r5, #1
 800f69c:	4401      	add	r1, r0
 800f69e:	4428      	add	r0, r5
 800f6a0:	2808      	cmp	r0, #8
 800f6a2:	dc16      	bgt.n	800f6d2 <_strtod_l+0x252>
 800f6a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f6a6:	230a      	movs	r3, #10
 800f6a8:	fb03 2300 	mla	r3, r3, r0, r2
 800f6ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e018      	b.n	800f6e4 <_strtod_l+0x264>
 800f6b2:	4638      	mov	r0, r7
 800f6b4:	e7da      	b.n	800f66c <_strtod_l+0x1ec>
 800f6b6:	2b08      	cmp	r3, #8
 800f6b8:	f103 0301 	add.w	r3, r3, #1
 800f6bc:	dc03      	bgt.n	800f6c6 <_strtod_l+0x246>
 800f6be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f6c0:	434e      	muls	r6, r1
 800f6c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800f6c4:	e7e7      	b.n	800f696 <_strtod_l+0x216>
 800f6c6:	2b10      	cmp	r3, #16
 800f6c8:	bfde      	ittt	le
 800f6ca:	9e08      	ldrle	r6, [sp, #32]
 800f6cc:	434e      	mulle	r6, r1
 800f6ce:	9608      	strle	r6, [sp, #32]
 800f6d0:	e7e1      	b.n	800f696 <_strtod_l+0x216>
 800f6d2:	280f      	cmp	r0, #15
 800f6d4:	dceb      	bgt.n	800f6ae <_strtod_l+0x22e>
 800f6d6:	9808      	ldr	r0, [sp, #32]
 800f6d8:	230a      	movs	r3, #10
 800f6da:	fb03 2300 	mla	r3, r3, r0, r2
 800f6de:	9308      	str	r3, [sp, #32]
 800f6e0:	e7e5      	b.n	800f6ae <_strtod_l+0x22e>
 800f6e2:	4629      	mov	r1, r5
 800f6e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f6e6:	1c50      	adds	r0, r2, #1
 800f6e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800f6ea:	7852      	ldrb	r2, [r2, #1]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	460d      	mov	r5, r1
 800f6f0:	e7b1      	b.n	800f656 <_strtod_l+0x1d6>
 800f6f2:	f04f 0900 	mov.w	r9, #0
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e77d      	b.n	800f5f6 <_strtod_l+0x176>
 800f6fa:	f04f 0c00 	mov.w	ip, #0
 800f6fe:	1ca2      	adds	r2, r4, #2
 800f700:	9219      	str	r2, [sp, #100]	@ 0x64
 800f702:	78a2      	ldrb	r2, [r4, #2]
 800f704:	e785      	b.n	800f612 <_strtod_l+0x192>
 800f706:	f04f 0c01 	mov.w	ip, #1
 800f70a:	e7f8      	b.n	800f6fe <_strtod_l+0x27e>
 800f70c:	08013110 	.word	0x08013110
 800f710:	080130f9 	.word	0x080130f9
 800f714:	7ff00000 	.word	0x7ff00000
 800f718:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f71a:	1c51      	adds	r1, r2, #1
 800f71c:	9119      	str	r1, [sp, #100]	@ 0x64
 800f71e:	7852      	ldrb	r2, [r2, #1]
 800f720:	2a30      	cmp	r2, #48	@ 0x30
 800f722:	d0f9      	beq.n	800f718 <_strtod_l+0x298>
 800f724:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f728:	2908      	cmp	r1, #8
 800f72a:	f63f af78 	bhi.w	800f61e <_strtod_l+0x19e>
 800f72e:	3a30      	subs	r2, #48	@ 0x30
 800f730:	920e      	str	r2, [sp, #56]	@ 0x38
 800f732:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f734:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f736:	f04f 080a 	mov.w	r8, #10
 800f73a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f73c:	1c56      	adds	r6, r2, #1
 800f73e:	9619      	str	r6, [sp, #100]	@ 0x64
 800f740:	7852      	ldrb	r2, [r2, #1]
 800f742:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f746:	f1be 0f09 	cmp.w	lr, #9
 800f74a:	d939      	bls.n	800f7c0 <_strtod_l+0x340>
 800f74c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f74e:	1a76      	subs	r6, r6, r1
 800f750:	2e08      	cmp	r6, #8
 800f752:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f756:	dc03      	bgt.n	800f760 <_strtod_l+0x2e0>
 800f758:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f75a:	4588      	cmp	r8, r1
 800f75c:	bfa8      	it	ge
 800f75e:	4688      	movge	r8, r1
 800f760:	f1bc 0f00 	cmp.w	ip, #0
 800f764:	d001      	beq.n	800f76a <_strtod_l+0x2ea>
 800f766:	f1c8 0800 	rsb	r8, r8, #0
 800f76a:	2d00      	cmp	r5, #0
 800f76c:	d14e      	bne.n	800f80c <_strtod_l+0x38c>
 800f76e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f770:	4308      	orrs	r0, r1
 800f772:	f47f aebe 	bne.w	800f4f2 <_strtod_l+0x72>
 800f776:	2b00      	cmp	r3, #0
 800f778:	f47f aed6 	bne.w	800f528 <_strtod_l+0xa8>
 800f77c:	2a69      	cmp	r2, #105	@ 0x69
 800f77e:	d028      	beq.n	800f7d2 <_strtod_l+0x352>
 800f780:	dc25      	bgt.n	800f7ce <_strtod_l+0x34e>
 800f782:	2a49      	cmp	r2, #73	@ 0x49
 800f784:	d025      	beq.n	800f7d2 <_strtod_l+0x352>
 800f786:	2a4e      	cmp	r2, #78	@ 0x4e
 800f788:	f47f aece 	bne.w	800f528 <_strtod_l+0xa8>
 800f78c:	499b      	ldr	r1, [pc, #620]	@ (800f9fc <_strtod_l+0x57c>)
 800f78e:	a819      	add	r0, sp, #100	@ 0x64
 800f790:	f002 f806 	bl	80117a0 <__match>
 800f794:	2800      	cmp	r0, #0
 800f796:	f43f aec7 	beq.w	800f528 <_strtod_l+0xa8>
 800f79a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	2b28      	cmp	r3, #40	@ 0x28
 800f7a0:	d12e      	bne.n	800f800 <_strtod_l+0x380>
 800f7a2:	4997      	ldr	r1, [pc, #604]	@ (800fa00 <_strtod_l+0x580>)
 800f7a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800f7a6:	a819      	add	r0, sp, #100	@ 0x64
 800f7a8:	f002 f80e 	bl	80117c8 <__hexnan>
 800f7ac:	2805      	cmp	r0, #5
 800f7ae:	d127      	bne.n	800f800 <_strtod_l+0x380>
 800f7b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f7b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f7b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f7ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f7be:	e698      	b.n	800f4f2 <_strtod_l+0x72>
 800f7c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f7c2:	fb08 2101 	mla	r1, r8, r1, r2
 800f7c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f7ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7cc:	e7b5      	b.n	800f73a <_strtod_l+0x2ba>
 800f7ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800f7d0:	e7da      	b.n	800f788 <_strtod_l+0x308>
 800f7d2:	498c      	ldr	r1, [pc, #560]	@ (800fa04 <_strtod_l+0x584>)
 800f7d4:	a819      	add	r0, sp, #100	@ 0x64
 800f7d6:	f001 ffe3 	bl	80117a0 <__match>
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	f43f aea4 	beq.w	800f528 <_strtod_l+0xa8>
 800f7e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7e2:	4989      	ldr	r1, [pc, #548]	@ (800fa08 <_strtod_l+0x588>)
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	a819      	add	r0, sp, #100	@ 0x64
 800f7e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f7ea:	f001 ffd9 	bl	80117a0 <__match>
 800f7ee:	b910      	cbnz	r0, 800f7f6 <_strtod_l+0x376>
 800f7f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f7f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fa18 <_strtod_l+0x598>
 800f7fa:	f04f 0a00 	mov.w	sl, #0
 800f7fe:	e678      	b.n	800f4f2 <_strtod_l+0x72>
 800f800:	4882      	ldr	r0, [pc, #520]	@ (800fa0c <_strtod_l+0x58c>)
 800f802:	f000 fe81 	bl	8010508 <nan>
 800f806:	ec5b ab10 	vmov	sl, fp, d0
 800f80a:	e672      	b.n	800f4f2 <_strtod_l+0x72>
 800f80c:	eba8 0309 	sub.w	r3, r8, r9
 800f810:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f812:	9309      	str	r3, [sp, #36]	@ 0x24
 800f814:	2f00      	cmp	r7, #0
 800f816:	bf08      	it	eq
 800f818:	462f      	moveq	r7, r5
 800f81a:	2d10      	cmp	r5, #16
 800f81c:	462c      	mov	r4, r5
 800f81e:	bfa8      	it	ge
 800f820:	2410      	movge	r4, #16
 800f822:	f7f0 fe97 	bl	8000554 <__aeabi_ui2d>
 800f826:	2d09      	cmp	r5, #9
 800f828:	4682      	mov	sl, r0
 800f82a:	468b      	mov	fp, r1
 800f82c:	dc13      	bgt.n	800f856 <_strtod_l+0x3d6>
 800f82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f830:	2b00      	cmp	r3, #0
 800f832:	f43f ae5e 	beq.w	800f4f2 <_strtod_l+0x72>
 800f836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f838:	dd78      	ble.n	800f92c <_strtod_l+0x4ac>
 800f83a:	2b16      	cmp	r3, #22
 800f83c:	dc5f      	bgt.n	800f8fe <_strtod_l+0x47e>
 800f83e:	4974      	ldr	r1, [pc, #464]	@ (800fa10 <_strtod_l+0x590>)
 800f840:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f848:	4652      	mov	r2, sl
 800f84a:	465b      	mov	r3, fp
 800f84c:	f7f0 fefc 	bl	8000648 <__aeabi_dmul>
 800f850:	4682      	mov	sl, r0
 800f852:	468b      	mov	fp, r1
 800f854:	e64d      	b.n	800f4f2 <_strtod_l+0x72>
 800f856:	4b6e      	ldr	r3, [pc, #440]	@ (800fa10 <_strtod_l+0x590>)
 800f858:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f85c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f860:	f7f0 fef2 	bl	8000648 <__aeabi_dmul>
 800f864:	4682      	mov	sl, r0
 800f866:	9808      	ldr	r0, [sp, #32]
 800f868:	468b      	mov	fp, r1
 800f86a:	f7f0 fe73 	bl	8000554 <__aeabi_ui2d>
 800f86e:	4602      	mov	r2, r0
 800f870:	460b      	mov	r3, r1
 800f872:	4650      	mov	r0, sl
 800f874:	4659      	mov	r1, fp
 800f876:	f7f0 fd31 	bl	80002dc <__adddf3>
 800f87a:	2d0f      	cmp	r5, #15
 800f87c:	4682      	mov	sl, r0
 800f87e:	468b      	mov	fp, r1
 800f880:	ddd5      	ble.n	800f82e <_strtod_l+0x3ae>
 800f882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f884:	1b2c      	subs	r4, r5, r4
 800f886:	441c      	add	r4, r3
 800f888:	2c00      	cmp	r4, #0
 800f88a:	f340 8096 	ble.w	800f9ba <_strtod_l+0x53a>
 800f88e:	f014 030f 	ands.w	r3, r4, #15
 800f892:	d00a      	beq.n	800f8aa <_strtod_l+0x42a>
 800f894:	495e      	ldr	r1, [pc, #376]	@ (800fa10 <_strtod_l+0x590>)
 800f896:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f89a:	4652      	mov	r2, sl
 800f89c:	465b      	mov	r3, fp
 800f89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8a2:	f7f0 fed1 	bl	8000648 <__aeabi_dmul>
 800f8a6:	4682      	mov	sl, r0
 800f8a8:	468b      	mov	fp, r1
 800f8aa:	f034 040f 	bics.w	r4, r4, #15
 800f8ae:	d073      	beq.n	800f998 <_strtod_l+0x518>
 800f8b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f8b4:	dd48      	ble.n	800f948 <_strtod_l+0x4c8>
 800f8b6:	2400      	movs	r4, #0
 800f8b8:	46a0      	mov	r8, r4
 800f8ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800f8bc:	46a1      	mov	r9, r4
 800f8be:	9a05      	ldr	r2, [sp, #20]
 800f8c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fa18 <_strtod_l+0x598>
 800f8c4:	2322      	movs	r3, #34	@ 0x22
 800f8c6:	6013      	str	r3, [r2, #0]
 800f8c8:	f04f 0a00 	mov.w	sl, #0
 800f8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f43f ae0f 	beq.w	800f4f2 <_strtod_l+0x72>
 800f8d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8d6:	9805      	ldr	r0, [sp, #20]
 800f8d8:	f002 fa66 	bl	8011da8 <_Bfree>
 800f8dc:	9805      	ldr	r0, [sp, #20]
 800f8de:	4649      	mov	r1, r9
 800f8e0:	f002 fa62 	bl	8011da8 <_Bfree>
 800f8e4:	9805      	ldr	r0, [sp, #20]
 800f8e6:	4641      	mov	r1, r8
 800f8e8:	f002 fa5e 	bl	8011da8 <_Bfree>
 800f8ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8ee:	9805      	ldr	r0, [sp, #20]
 800f8f0:	f002 fa5a 	bl	8011da8 <_Bfree>
 800f8f4:	9805      	ldr	r0, [sp, #20]
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	f002 fa56 	bl	8011da8 <_Bfree>
 800f8fc:	e5f9      	b.n	800f4f2 <_strtod_l+0x72>
 800f8fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f900:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f904:	4293      	cmp	r3, r2
 800f906:	dbbc      	blt.n	800f882 <_strtod_l+0x402>
 800f908:	4c41      	ldr	r4, [pc, #260]	@ (800fa10 <_strtod_l+0x590>)
 800f90a:	f1c5 050f 	rsb	r5, r5, #15
 800f90e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f912:	4652      	mov	r2, sl
 800f914:	465b      	mov	r3, fp
 800f916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f91a:	f7f0 fe95 	bl	8000648 <__aeabi_dmul>
 800f91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f920:	1b5d      	subs	r5, r3, r5
 800f922:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f926:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f92a:	e78f      	b.n	800f84c <_strtod_l+0x3cc>
 800f92c:	3316      	adds	r3, #22
 800f92e:	dba8      	blt.n	800f882 <_strtod_l+0x402>
 800f930:	4b37      	ldr	r3, [pc, #220]	@ (800fa10 <_strtod_l+0x590>)
 800f932:	eba9 0808 	sub.w	r8, r9, r8
 800f936:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f93a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f93e:	4650      	mov	r0, sl
 800f940:	4659      	mov	r1, fp
 800f942:	f7f0 ffab 	bl	800089c <__aeabi_ddiv>
 800f946:	e783      	b.n	800f850 <_strtod_l+0x3d0>
 800f948:	4b32      	ldr	r3, [pc, #200]	@ (800fa14 <_strtod_l+0x594>)
 800f94a:	9308      	str	r3, [sp, #32]
 800f94c:	2300      	movs	r3, #0
 800f94e:	1124      	asrs	r4, r4, #4
 800f950:	4650      	mov	r0, sl
 800f952:	4659      	mov	r1, fp
 800f954:	461e      	mov	r6, r3
 800f956:	2c01      	cmp	r4, #1
 800f958:	dc21      	bgt.n	800f99e <_strtod_l+0x51e>
 800f95a:	b10b      	cbz	r3, 800f960 <_strtod_l+0x4e0>
 800f95c:	4682      	mov	sl, r0
 800f95e:	468b      	mov	fp, r1
 800f960:	492c      	ldr	r1, [pc, #176]	@ (800fa14 <_strtod_l+0x594>)
 800f962:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f966:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f96a:	4652      	mov	r2, sl
 800f96c:	465b      	mov	r3, fp
 800f96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f972:	f7f0 fe69 	bl	8000648 <__aeabi_dmul>
 800f976:	4b28      	ldr	r3, [pc, #160]	@ (800fa18 <_strtod_l+0x598>)
 800f978:	460a      	mov	r2, r1
 800f97a:	400b      	ands	r3, r1
 800f97c:	4927      	ldr	r1, [pc, #156]	@ (800fa1c <_strtod_l+0x59c>)
 800f97e:	428b      	cmp	r3, r1
 800f980:	4682      	mov	sl, r0
 800f982:	d898      	bhi.n	800f8b6 <_strtod_l+0x436>
 800f984:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f988:	428b      	cmp	r3, r1
 800f98a:	bf86      	itte	hi
 800f98c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fa20 <_strtod_l+0x5a0>
 800f990:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f994:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f998:	2300      	movs	r3, #0
 800f99a:	9308      	str	r3, [sp, #32]
 800f99c:	e07a      	b.n	800fa94 <_strtod_l+0x614>
 800f99e:	07e2      	lsls	r2, r4, #31
 800f9a0:	d505      	bpl.n	800f9ae <_strtod_l+0x52e>
 800f9a2:	9b08      	ldr	r3, [sp, #32]
 800f9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a8:	f7f0 fe4e 	bl	8000648 <__aeabi_dmul>
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	9a08      	ldr	r2, [sp, #32]
 800f9b0:	3208      	adds	r2, #8
 800f9b2:	3601      	adds	r6, #1
 800f9b4:	1064      	asrs	r4, r4, #1
 800f9b6:	9208      	str	r2, [sp, #32]
 800f9b8:	e7cd      	b.n	800f956 <_strtod_l+0x4d6>
 800f9ba:	d0ed      	beq.n	800f998 <_strtod_l+0x518>
 800f9bc:	4264      	negs	r4, r4
 800f9be:	f014 020f 	ands.w	r2, r4, #15
 800f9c2:	d00a      	beq.n	800f9da <_strtod_l+0x55a>
 800f9c4:	4b12      	ldr	r3, [pc, #72]	@ (800fa10 <_strtod_l+0x590>)
 800f9c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9ca:	4650      	mov	r0, sl
 800f9cc:	4659      	mov	r1, fp
 800f9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d2:	f7f0 ff63 	bl	800089c <__aeabi_ddiv>
 800f9d6:	4682      	mov	sl, r0
 800f9d8:	468b      	mov	fp, r1
 800f9da:	1124      	asrs	r4, r4, #4
 800f9dc:	d0dc      	beq.n	800f998 <_strtod_l+0x518>
 800f9de:	2c1f      	cmp	r4, #31
 800f9e0:	dd20      	ble.n	800fa24 <_strtod_l+0x5a4>
 800f9e2:	2400      	movs	r4, #0
 800f9e4:	46a0      	mov	r8, r4
 800f9e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800f9e8:	46a1      	mov	r9, r4
 800f9ea:	9a05      	ldr	r2, [sp, #20]
 800f9ec:	2322      	movs	r3, #34	@ 0x22
 800f9ee:	f04f 0a00 	mov.w	sl, #0
 800f9f2:	f04f 0b00 	mov.w	fp, #0
 800f9f6:	6013      	str	r3, [r2, #0]
 800f9f8:	e768      	b.n	800f8cc <_strtod_l+0x44c>
 800f9fa:	bf00      	nop
 800f9fc:	080130cd 	.word	0x080130cd
 800fa00:	080130fc 	.word	0x080130fc
 800fa04:	080130c5 	.word	0x080130c5
 800fa08:	08013309 	.word	0x08013309
 800fa0c:	08013305 	.word	0x08013305
 800fa10:	08013480 	.word	0x08013480
 800fa14:	08013458 	.word	0x08013458
 800fa18:	7ff00000 	.word	0x7ff00000
 800fa1c:	7ca00000 	.word	0x7ca00000
 800fa20:	7fefffff 	.word	0x7fefffff
 800fa24:	f014 0310 	ands.w	r3, r4, #16
 800fa28:	bf18      	it	ne
 800fa2a:	236a      	movne	r3, #106	@ 0x6a
 800fa2c:	4ea9      	ldr	r6, [pc, #676]	@ (800fcd4 <_strtod_l+0x854>)
 800fa2e:	9308      	str	r3, [sp, #32]
 800fa30:	4650      	mov	r0, sl
 800fa32:	4659      	mov	r1, fp
 800fa34:	2300      	movs	r3, #0
 800fa36:	07e2      	lsls	r2, r4, #31
 800fa38:	d504      	bpl.n	800fa44 <_strtod_l+0x5c4>
 800fa3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fa3e:	f7f0 fe03 	bl	8000648 <__aeabi_dmul>
 800fa42:	2301      	movs	r3, #1
 800fa44:	1064      	asrs	r4, r4, #1
 800fa46:	f106 0608 	add.w	r6, r6, #8
 800fa4a:	d1f4      	bne.n	800fa36 <_strtod_l+0x5b6>
 800fa4c:	b10b      	cbz	r3, 800fa52 <_strtod_l+0x5d2>
 800fa4e:	4682      	mov	sl, r0
 800fa50:	468b      	mov	fp, r1
 800fa52:	9b08      	ldr	r3, [sp, #32]
 800fa54:	b1b3      	cbz	r3, 800fa84 <_strtod_l+0x604>
 800fa56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fa5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	4659      	mov	r1, fp
 800fa62:	dd0f      	ble.n	800fa84 <_strtod_l+0x604>
 800fa64:	2b1f      	cmp	r3, #31
 800fa66:	dd55      	ble.n	800fb14 <_strtod_l+0x694>
 800fa68:	2b34      	cmp	r3, #52	@ 0x34
 800fa6a:	bfde      	ittt	le
 800fa6c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800fa70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fa74:	4093      	lslle	r3, r2
 800fa76:	f04f 0a00 	mov.w	sl, #0
 800fa7a:	bfcc      	ite	gt
 800fa7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fa80:	ea03 0b01 	andle.w	fp, r3, r1
 800fa84:	2200      	movs	r2, #0
 800fa86:	2300      	movs	r3, #0
 800fa88:	4650      	mov	r0, sl
 800fa8a:	4659      	mov	r1, fp
 800fa8c:	f7f1 f844 	bl	8000b18 <__aeabi_dcmpeq>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d1a6      	bne.n	800f9e2 <_strtod_l+0x562>
 800fa94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fa9a:	9805      	ldr	r0, [sp, #20]
 800fa9c:	462b      	mov	r3, r5
 800fa9e:	463a      	mov	r2, r7
 800faa0:	f002 f9ea 	bl	8011e78 <__s2b>
 800faa4:	900a      	str	r0, [sp, #40]	@ 0x28
 800faa6:	2800      	cmp	r0, #0
 800faa8:	f43f af05 	beq.w	800f8b6 <_strtod_l+0x436>
 800faac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800faae:	2a00      	cmp	r2, #0
 800fab0:	eba9 0308 	sub.w	r3, r9, r8
 800fab4:	bfa8      	it	ge
 800fab6:	2300      	movge	r3, #0
 800fab8:	9312      	str	r3, [sp, #72]	@ 0x48
 800faba:	2400      	movs	r4, #0
 800fabc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fac0:	9316      	str	r3, [sp, #88]	@ 0x58
 800fac2:	46a0      	mov	r8, r4
 800fac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fac6:	9805      	ldr	r0, [sp, #20]
 800fac8:	6859      	ldr	r1, [r3, #4]
 800faca:	f002 f92d 	bl	8011d28 <_Balloc>
 800face:	4681      	mov	r9, r0
 800fad0:	2800      	cmp	r0, #0
 800fad2:	f43f aef4 	beq.w	800f8be <_strtod_l+0x43e>
 800fad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fad8:	691a      	ldr	r2, [r3, #16]
 800fada:	3202      	adds	r2, #2
 800fadc:	f103 010c 	add.w	r1, r3, #12
 800fae0:	0092      	lsls	r2, r2, #2
 800fae2:	300c      	adds	r0, #12
 800fae4:	f000 fcf9 	bl	80104da <memcpy>
 800fae8:	ec4b ab10 	vmov	d0, sl, fp
 800faec:	9805      	ldr	r0, [sp, #20]
 800faee:	aa1c      	add	r2, sp, #112	@ 0x70
 800faf0:	a91b      	add	r1, sp, #108	@ 0x6c
 800faf2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800faf6:	f002 fcfb 	bl	80124f0 <__d2b>
 800fafa:	901a      	str	r0, [sp, #104]	@ 0x68
 800fafc:	2800      	cmp	r0, #0
 800fafe:	f43f aede 	beq.w	800f8be <_strtod_l+0x43e>
 800fb02:	9805      	ldr	r0, [sp, #20]
 800fb04:	2101      	movs	r1, #1
 800fb06:	f002 fa4d 	bl	8011fa4 <__i2b>
 800fb0a:	4680      	mov	r8, r0
 800fb0c:	b948      	cbnz	r0, 800fb22 <_strtod_l+0x6a2>
 800fb0e:	f04f 0800 	mov.w	r8, #0
 800fb12:	e6d4      	b.n	800f8be <_strtod_l+0x43e>
 800fb14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb18:	fa02 f303 	lsl.w	r3, r2, r3
 800fb1c:	ea03 0a0a 	and.w	sl, r3, sl
 800fb20:	e7b0      	b.n	800fa84 <_strtod_l+0x604>
 800fb22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fb24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fb26:	2d00      	cmp	r5, #0
 800fb28:	bfab      	itete	ge
 800fb2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fb2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fb2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fb30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fb32:	bfac      	ite	ge
 800fb34:	18ef      	addge	r7, r5, r3
 800fb36:	1b5e      	sublt	r6, r3, r5
 800fb38:	9b08      	ldr	r3, [sp, #32]
 800fb3a:	1aed      	subs	r5, r5, r3
 800fb3c:	4415      	add	r5, r2
 800fb3e:	4b66      	ldr	r3, [pc, #408]	@ (800fcd8 <_strtod_l+0x858>)
 800fb40:	3d01      	subs	r5, #1
 800fb42:	429d      	cmp	r5, r3
 800fb44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fb48:	da50      	bge.n	800fbec <_strtod_l+0x76c>
 800fb4a:	1b5b      	subs	r3, r3, r5
 800fb4c:	2b1f      	cmp	r3, #31
 800fb4e:	eba2 0203 	sub.w	r2, r2, r3
 800fb52:	f04f 0101 	mov.w	r1, #1
 800fb56:	dc3d      	bgt.n	800fbd4 <_strtod_l+0x754>
 800fb58:	fa01 f303 	lsl.w	r3, r1, r3
 800fb5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb5e:	2300      	movs	r3, #0
 800fb60:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb62:	18bd      	adds	r5, r7, r2
 800fb64:	9b08      	ldr	r3, [sp, #32]
 800fb66:	42af      	cmp	r7, r5
 800fb68:	4416      	add	r6, r2
 800fb6a:	441e      	add	r6, r3
 800fb6c:	463b      	mov	r3, r7
 800fb6e:	bfa8      	it	ge
 800fb70:	462b      	movge	r3, r5
 800fb72:	42b3      	cmp	r3, r6
 800fb74:	bfa8      	it	ge
 800fb76:	4633      	movge	r3, r6
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	bfc2      	ittt	gt
 800fb7c:	1aed      	subgt	r5, r5, r3
 800fb7e:	1af6      	subgt	r6, r6, r3
 800fb80:	1aff      	subgt	r7, r7, r3
 800fb82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	dd16      	ble.n	800fbb6 <_strtod_l+0x736>
 800fb88:	4641      	mov	r1, r8
 800fb8a:	9805      	ldr	r0, [sp, #20]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	f002 fac9 	bl	8012124 <__pow5mult>
 800fb92:	4680      	mov	r8, r0
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d0ba      	beq.n	800fb0e <_strtod_l+0x68e>
 800fb98:	4601      	mov	r1, r0
 800fb9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fb9c:	9805      	ldr	r0, [sp, #20]
 800fb9e:	f002 fa17 	bl	8011fd0 <__multiply>
 800fba2:	900e      	str	r0, [sp, #56]	@ 0x38
 800fba4:	2800      	cmp	r0, #0
 800fba6:	f43f ae8a 	beq.w	800f8be <_strtod_l+0x43e>
 800fbaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fbac:	9805      	ldr	r0, [sp, #20]
 800fbae:	f002 f8fb 	bl	8011da8 <_Bfree>
 800fbb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800fbb6:	2d00      	cmp	r5, #0
 800fbb8:	dc1d      	bgt.n	800fbf6 <_strtod_l+0x776>
 800fbba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	dd23      	ble.n	800fc08 <_strtod_l+0x788>
 800fbc0:	4649      	mov	r1, r9
 800fbc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fbc4:	9805      	ldr	r0, [sp, #20]
 800fbc6:	f002 faad 	bl	8012124 <__pow5mult>
 800fbca:	4681      	mov	r9, r0
 800fbcc:	b9e0      	cbnz	r0, 800fc08 <_strtod_l+0x788>
 800fbce:	f04f 0900 	mov.w	r9, #0
 800fbd2:	e674      	b.n	800f8be <_strtod_l+0x43e>
 800fbd4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fbd8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fbdc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fbe0:	35e2      	adds	r5, #226	@ 0xe2
 800fbe2:	fa01 f305 	lsl.w	r3, r1, r5
 800fbe6:	9310      	str	r3, [sp, #64]	@ 0x40
 800fbe8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fbea:	e7ba      	b.n	800fb62 <_strtod_l+0x6e2>
 800fbec:	2300      	movs	r3, #0
 800fbee:	9310      	str	r3, [sp, #64]	@ 0x40
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fbf4:	e7b5      	b.n	800fb62 <_strtod_l+0x6e2>
 800fbf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fbf8:	9805      	ldr	r0, [sp, #20]
 800fbfa:	462a      	mov	r2, r5
 800fbfc:	f002 faec 	bl	80121d8 <__lshift>
 800fc00:	901a      	str	r0, [sp, #104]	@ 0x68
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d1d9      	bne.n	800fbba <_strtod_l+0x73a>
 800fc06:	e65a      	b.n	800f8be <_strtod_l+0x43e>
 800fc08:	2e00      	cmp	r6, #0
 800fc0a:	dd07      	ble.n	800fc1c <_strtod_l+0x79c>
 800fc0c:	4649      	mov	r1, r9
 800fc0e:	9805      	ldr	r0, [sp, #20]
 800fc10:	4632      	mov	r2, r6
 800fc12:	f002 fae1 	bl	80121d8 <__lshift>
 800fc16:	4681      	mov	r9, r0
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	d0d8      	beq.n	800fbce <_strtod_l+0x74e>
 800fc1c:	2f00      	cmp	r7, #0
 800fc1e:	dd08      	ble.n	800fc32 <_strtod_l+0x7b2>
 800fc20:	4641      	mov	r1, r8
 800fc22:	9805      	ldr	r0, [sp, #20]
 800fc24:	463a      	mov	r2, r7
 800fc26:	f002 fad7 	bl	80121d8 <__lshift>
 800fc2a:	4680      	mov	r8, r0
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	f43f ae46 	beq.w	800f8be <_strtod_l+0x43e>
 800fc32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fc34:	9805      	ldr	r0, [sp, #20]
 800fc36:	464a      	mov	r2, r9
 800fc38:	f002 fb56 	bl	80122e8 <__mdiff>
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	f43f ae3d 	beq.w	800f8be <_strtod_l+0x43e>
 800fc44:	68c3      	ldr	r3, [r0, #12]
 800fc46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc48:	2300      	movs	r3, #0
 800fc4a:	60c3      	str	r3, [r0, #12]
 800fc4c:	4641      	mov	r1, r8
 800fc4e:	f002 fb2f 	bl	80122b0 <__mcmp>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	da46      	bge.n	800fce4 <_strtod_l+0x864>
 800fc56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc58:	ea53 030a 	orrs.w	r3, r3, sl
 800fc5c:	d16c      	bne.n	800fd38 <_strtod_l+0x8b8>
 800fc5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d168      	bne.n	800fd38 <_strtod_l+0x8b8>
 800fc66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fc6a:	0d1b      	lsrs	r3, r3, #20
 800fc6c:	051b      	lsls	r3, r3, #20
 800fc6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fc72:	d961      	bls.n	800fd38 <_strtod_l+0x8b8>
 800fc74:	6963      	ldr	r3, [r4, #20]
 800fc76:	b913      	cbnz	r3, 800fc7e <_strtod_l+0x7fe>
 800fc78:	6923      	ldr	r3, [r4, #16]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	dd5c      	ble.n	800fd38 <_strtod_l+0x8b8>
 800fc7e:	4621      	mov	r1, r4
 800fc80:	2201      	movs	r2, #1
 800fc82:	9805      	ldr	r0, [sp, #20]
 800fc84:	f002 faa8 	bl	80121d8 <__lshift>
 800fc88:	4641      	mov	r1, r8
 800fc8a:	4604      	mov	r4, r0
 800fc8c:	f002 fb10 	bl	80122b0 <__mcmp>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	dd51      	ble.n	800fd38 <_strtod_l+0x8b8>
 800fc94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fc98:	9a08      	ldr	r2, [sp, #32]
 800fc9a:	0d1b      	lsrs	r3, r3, #20
 800fc9c:	051b      	lsls	r3, r3, #20
 800fc9e:	2a00      	cmp	r2, #0
 800fca0:	d06b      	beq.n	800fd7a <_strtod_l+0x8fa>
 800fca2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fca6:	d868      	bhi.n	800fd7a <_strtod_l+0x8fa>
 800fca8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fcac:	f67f ae9d 	bls.w	800f9ea <_strtod_l+0x56a>
 800fcb0:	4b0a      	ldr	r3, [pc, #40]	@ (800fcdc <_strtod_l+0x85c>)
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	4659      	mov	r1, fp
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f7f0 fcc6 	bl	8000648 <__aeabi_dmul>
 800fcbc:	4b08      	ldr	r3, [pc, #32]	@ (800fce0 <_strtod_l+0x860>)
 800fcbe:	400b      	ands	r3, r1
 800fcc0:	4682      	mov	sl, r0
 800fcc2:	468b      	mov	fp, r1
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f47f ae05 	bne.w	800f8d4 <_strtod_l+0x454>
 800fcca:	9a05      	ldr	r2, [sp, #20]
 800fccc:	2322      	movs	r3, #34	@ 0x22
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	e600      	b.n	800f8d4 <_strtod_l+0x454>
 800fcd2:	bf00      	nop
 800fcd4:	08013128 	.word	0x08013128
 800fcd8:	fffffc02 	.word	0xfffffc02
 800fcdc:	39500000 	.word	0x39500000
 800fce0:	7ff00000 	.word	0x7ff00000
 800fce4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fce8:	d165      	bne.n	800fdb6 <_strtod_l+0x936>
 800fcea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fcec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcf0:	b35a      	cbz	r2, 800fd4a <_strtod_l+0x8ca>
 800fcf2:	4a9f      	ldr	r2, [pc, #636]	@ (800ff70 <_strtod_l+0xaf0>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d12b      	bne.n	800fd50 <_strtod_l+0x8d0>
 800fcf8:	9b08      	ldr	r3, [sp, #32]
 800fcfa:	4651      	mov	r1, sl
 800fcfc:	b303      	cbz	r3, 800fd40 <_strtod_l+0x8c0>
 800fcfe:	4b9d      	ldr	r3, [pc, #628]	@ (800ff74 <_strtod_l+0xaf4>)
 800fd00:	465a      	mov	r2, fp
 800fd02:	4013      	ands	r3, r2
 800fd04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fd08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fd0c:	d81b      	bhi.n	800fd46 <_strtod_l+0x8c6>
 800fd0e:	0d1b      	lsrs	r3, r3, #20
 800fd10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fd14:	fa02 f303 	lsl.w	r3, r2, r3
 800fd18:	4299      	cmp	r1, r3
 800fd1a:	d119      	bne.n	800fd50 <_strtod_l+0x8d0>
 800fd1c:	4b96      	ldr	r3, [pc, #600]	@ (800ff78 <_strtod_l+0xaf8>)
 800fd1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d102      	bne.n	800fd2a <_strtod_l+0x8aa>
 800fd24:	3101      	adds	r1, #1
 800fd26:	f43f adca 	beq.w	800f8be <_strtod_l+0x43e>
 800fd2a:	4b92      	ldr	r3, [pc, #584]	@ (800ff74 <_strtod_l+0xaf4>)
 800fd2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd2e:	401a      	ands	r2, r3
 800fd30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fd34:	f04f 0a00 	mov.w	sl, #0
 800fd38:	9b08      	ldr	r3, [sp, #32]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1b8      	bne.n	800fcb0 <_strtod_l+0x830>
 800fd3e:	e5c9      	b.n	800f8d4 <_strtod_l+0x454>
 800fd40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd44:	e7e8      	b.n	800fd18 <_strtod_l+0x898>
 800fd46:	4613      	mov	r3, r2
 800fd48:	e7e6      	b.n	800fd18 <_strtod_l+0x898>
 800fd4a:	ea53 030a 	orrs.w	r3, r3, sl
 800fd4e:	d0a1      	beq.n	800fc94 <_strtod_l+0x814>
 800fd50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd52:	b1db      	cbz	r3, 800fd8c <_strtod_l+0x90c>
 800fd54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd56:	4213      	tst	r3, r2
 800fd58:	d0ee      	beq.n	800fd38 <_strtod_l+0x8b8>
 800fd5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd5c:	9a08      	ldr	r2, [sp, #32]
 800fd5e:	4650      	mov	r0, sl
 800fd60:	4659      	mov	r1, fp
 800fd62:	b1bb      	cbz	r3, 800fd94 <_strtod_l+0x914>
 800fd64:	f7ff fb6e 	bl	800f444 <sulp>
 800fd68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd6c:	ec53 2b10 	vmov	r2, r3, d0
 800fd70:	f7f0 fab4 	bl	80002dc <__adddf3>
 800fd74:	4682      	mov	sl, r0
 800fd76:	468b      	mov	fp, r1
 800fd78:	e7de      	b.n	800fd38 <_strtod_l+0x8b8>
 800fd7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fd7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fd82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fd86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fd8a:	e7d5      	b.n	800fd38 <_strtod_l+0x8b8>
 800fd8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fd8e:	ea13 0f0a 	tst.w	r3, sl
 800fd92:	e7e1      	b.n	800fd58 <_strtod_l+0x8d8>
 800fd94:	f7ff fb56 	bl	800f444 <sulp>
 800fd98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd9c:	ec53 2b10 	vmov	r2, r3, d0
 800fda0:	f7f0 fa9a 	bl	80002d8 <__aeabi_dsub>
 800fda4:	2200      	movs	r2, #0
 800fda6:	2300      	movs	r3, #0
 800fda8:	4682      	mov	sl, r0
 800fdaa:	468b      	mov	fp, r1
 800fdac:	f7f0 feb4 	bl	8000b18 <__aeabi_dcmpeq>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	d0c1      	beq.n	800fd38 <_strtod_l+0x8b8>
 800fdb4:	e619      	b.n	800f9ea <_strtod_l+0x56a>
 800fdb6:	4641      	mov	r1, r8
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f002 fbf1 	bl	80125a0 <__ratio>
 800fdbe:	ec57 6b10 	vmov	r6, r7, d0
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fdc8:	4630      	mov	r0, r6
 800fdca:	4639      	mov	r1, r7
 800fdcc:	f7f0 feb8 	bl	8000b40 <__aeabi_dcmple>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d06f      	beq.n	800feb4 <_strtod_l+0xa34>
 800fdd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d17a      	bne.n	800fed0 <_strtod_l+0xa50>
 800fdda:	f1ba 0f00 	cmp.w	sl, #0
 800fdde:	d158      	bne.n	800fe92 <_strtod_l+0xa12>
 800fde0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fde2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d15a      	bne.n	800fea0 <_strtod_l+0xa20>
 800fdea:	4b64      	ldr	r3, [pc, #400]	@ (800ff7c <_strtod_l+0xafc>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	4630      	mov	r0, r6
 800fdf0:	4639      	mov	r1, r7
 800fdf2:	f7f0 fe9b 	bl	8000b2c <__aeabi_dcmplt>
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d159      	bne.n	800feae <_strtod_l+0xa2e>
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	4639      	mov	r1, r7
 800fdfe:	4b60      	ldr	r3, [pc, #384]	@ (800ff80 <_strtod_l+0xb00>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	f7f0 fc21 	bl	8000648 <__aeabi_dmul>
 800fe06:	4606      	mov	r6, r0
 800fe08:	460f      	mov	r7, r1
 800fe0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fe0e:	9606      	str	r6, [sp, #24]
 800fe10:	9307      	str	r3, [sp, #28]
 800fe12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fe16:	4d57      	ldr	r5, [pc, #348]	@ (800ff74 <_strtod_l+0xaf4>)
 800fe18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fe1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe1e:	401d      	ands	r5, r3
 800fe20:	4b58      	ldr	r3, [pc, #352]	@ (800ff84 <_strtod_l+0xb04>)
 800fe22:	429d      	cmp	r5, r3
 800fe24:	f040 80b2 	bne.w	800ff8c <_strtod_l+0xb0c>
 800fe28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fe2e:	ec4b ab10 	vmov	d0, sl, fp
 800fe32:	f002 faed 	bl	8012410 <__ulp>
 800fe36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fe3a:	ec51 0b10 	vmov	r0, r1, d0
 800fe3e:	f7f0 fc03 	bl	8000648 <__aeabi_dmul>
 800fe42:	4652      	mov	r2, sl
 800fe44:	465b      	mov	r3, fp
 800fe46:	f7f0 fa49 	bl	80002dc <__adddf3>
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4949      	ldr	r1, [pc, #292]	@ (800ff74 <_strtod_l+0xaf4>)
 800fe4e:	4a4e      	ldr	r2, [pc, #312]	@ (800ff88 <_strtod_l+0xb08>)
 800fe50:	4019      	ands	r1, r3
 800fe52:	4291      	cmp	r1, r2
 800fe54:	4682      	mov	sl, r0
 800fe56:	d942      	bls.n	800fede <_strtod_l+0xa5e>
 800fe58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fe5a:	4b47      	ldr	r3, [pc, #284]	@ (800ff78 <_strtod_l+0xaf8>)
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d103      	bne.n	800fe68 <_strtod_l+0x9e8>
 800fe60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe62:	3301      	adds	r3, #1
 800fe64:	f43f ad2b 	beq.w	800f8be <_strtod_l+0x43e>
 800fe68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ff78 <_strtod_l+0xaf8>
 800fe6c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fe70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe72:	9805      	ldr	r0, [sp, #20]
 800fe74:	f001 ff98 	bl	8011da8 <_Bfree>
 800fe78:	9805      	ldr	r0, [sp, #20]
 800fe7a:	4649      	mov	r1, r9
 800fe7c:	f001 ff94 	bl	8011da8 <_Bfree>
 800fe80:	9805      	ldr	r0, [sp, #20]
 800fe82:	4641      	mov	r1, r8
 800fe84:	f001 ff90 	bl	8011da8 <_Bfree>
 800fe88:	9805      	ldr	r0, [sp, #20]
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	f001 ff8c 	bl	8011da8 <_Bfree>
 800fe90:	e618      	b.n	800fac4 <_strtod_l+0x644>
 800fe92:	f1ba 0f01 	cmp.w	sl, #1
 800fe96:	d103      	bne.n	800fea0 <_strtod_l+0xa20>
 800fe98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	f43f ada5 	beq.w	800f9ea <_strtod_l+0x56a>
 800fea0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ff50 <_strtod_l+0xad0>
 800fea4:	4f35      	ldr	r7, [pc, #212]	@ (800ff7c <_strtod_l+0xafc>)
 800fea6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800feaa:	2600      	movs	r6, #0
 800feac:	e7b1      	b.n	800fe12 <_strtod_l+0x992>
 800feae:	4f34      	ldr	r7, [pc, #208]	@ (800ff80 <_strtod_l+0xb00>)
 800feb0:	2600      	movs	r6, #0
 800feb2:	e7aa      	b.n	800fe0a <_strtod_l+0x98a>
 800feb4:	4b32      	ldr	r3, [pc, #200]	@ (800ff80 <_strtod_l+0xb00>)
 800feb6:	4630      	mov	r0, r6
 800feb8:	4639      	mov	r1, r7
 800feba:	2200      	movs	r2, #0
 800febc:	f7f0 fbc4 	bl	8000648 <__aeabi_dmul>
 800fec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fec2:	4606      	mov	r6, r0
 800fec4:	460f      	mov	r7, r1
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d09f      	beq.n	800fe0a <_strtod_l+0x98a>
 800feca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fece:	e7a0      	b.n	800fe12 <_strtod_l+0x992>
 800fed0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ff58 <_strtod_l+0xad8>
 800fed4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fed8:	ec57 6b17 	vmov	r6, r7, d7
 800fedc:	e799      	b.n	800fe12 <_strtod_l+0x992>
 800fede:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fee2:	9b08      	ldr	r3, [sp, #32]
 800fee4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d1c1      	bne.n	800fe70 <_strtod_l+0x9f0>
 800feec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fef0:	0d1b      	lsrs	r3, r3, #20
 800fef2:	051b      	lsls	r3, r3, #20
 800fef4:	429d      	cmp	r5, r3
 800fef6:	d1bb      	bne.n	800fe70 <_strtod_l+0x9f0>
 800fef8:	4630      	mov	r0, r6
 800fefa:	4639      	mov	r1, r7
 800fefc:	f7f0 ff04 	bl	8000d08 <__aeabi_d2lz>
 800ff00:	f7f0 fb74 	bl	80005ec <__aeabi_l2d>
 800ff04:	4602      	mov	r2, r0
 800ff06:	460b      	mov	r3, r1
 800ff08:	4630      	mov	r0, r6
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	f7f0 f9e4 	bl	80002d8 <__aeabi_dsub>
 800ff10:	460b      	mov	r3, r1
 800ff12:	4602      	mov	r2, r0
 800ff14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ff18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ff1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff1e:	ea46 060a 	orr.w	r6, r6, sl
 800ff22:	431e      	orrs	r6, r3
 800ff24:	d06f      	beq.n	8010006 <_strtod_l+0xb86>
 800ff26:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff60 <_strtod_l+0xae0>)
 800ff28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2c:	f7f0 fdfe 	bl	8000b2c <__aeabi_dcmplt>
 800ff30:	2800      	cmp	r0, #0
 800ff32:	f47f accf 	bne.w	800f8d4 <_strtod_l+0x454>
 800ff36:	a30c      	add	r3, pc, #48	@ (adr r3, 800ff68 <_strtod_l+0xae8>)
 800ff38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff40:	f7f0 fe12 	bl	8000b68 <__aeabi_dcmpgt>
 800ff44:	2800      	cmp	r0, #0
 800ff46:	d093      	beq.n	800fe70 <_strtod_l+0x9f0>
 800ff48:	e4c4      	b.n	800f8d4 <_strtod_l+0x454>
 800ff4a:	bf00      	nop
 800ff4c:	f3af 8000 	nop.w
 800ff50:	00000000 	.word	0x00000000
 800ff54:	bff00000 	.word	0xbff00000
 800ff58:	00000000 	.word	0x00000000
 800ff5c:	3ff00000 	.word	0x3ff00000
 800ff60:	94a03595 	.word	0x94a03595
 800ff64:	3fdfffff 	.word	0x3fdfffff
 800ff68:	35afe535 	.word	0x35afe535
 800ff6c:	3fe00000 	.word	0x3fe00000
 800ff70:	000fffff 	.word	0x000fffff
 800ff74:	7ff00000 	.word	0x7ff00000
 800ff78:	7fefffff 	.word	0x7fefffff
 800ff7c:	3ff00000 	.word	0x3ff00000
 800ff80:	3fe00000 	.word	0x3fe00000
 800ff84:	7fe00000 	.word	0x7fe00000
 800ff88:	7c9fffff 	.word	0x7c9fffff
 800ff8c:	9b08      	ldr	r3, [sp, #32]
 800ff8e:	b323      	cbz	r3, 800ffda <_strtod_l+0xb5a>
 800ff90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ff94:	d821      	bhi.n	800ffda <_strtod_l+0xb5a>
 800ff96:	a328      	add	r3, pc, #160	@ (adr r3, 8010038 <_strtod_l+0xbb8>)
 800ff98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	f7f0 fdce 	bl	8000b40 <__aeabi_dcmple>
 800ffa4:	b1a0      	cbz	r0, 800ffd0 <_strtod_l+0xb50>
 800ffa6:	4639      	mov	r1, r7
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f7f0 fe25 	bl	8000bf8 <__aeabi_d2uiz>
 800ffae:	2801      	cmp	r0, #1
 800ffb0:	bf38      	it	cc
 800ffb2:	2001      	movcc	r0, #1
 800ffb4:	f7f0 face 	bl	8000554 <__aeabi_ui2d>
 800ffb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffba:	4606      	mov	r6, r0
 800ffbc:	460f      	mov	r7, r1
 800ffbe:	b9fb      	cbnz	r3, 8010000 <_strtod_l+0xb80>
 800ffc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ffc4:	9014      	str	r0, [sp, #80]	@ 0x50
 800ffc6:	9315      	str	r3, [sp, #84]	@ 0x54
 800ffc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ffcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ffd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ffd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ffd6:	1b5b      	subs	r3, r3, r5
 800ffd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ffda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ffde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ffe2:	f002 fa15 	bl	8012410 <__ulp>
 800ffe6:	4650      	mov	r0, sl
 800ffe8:	ec53 2b10 	vmov	r2, r3, d0
 800ffec:	4659      	mov	r1, fp
 800ffee:	f7f0 fb2b 	bl	8000648 <__aeabi_dmul>
 800fff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fff6:	f7f0 f971 	bl	80002dc <__adddf3>
 800fffa:	4682      	mov	sl, r0
 800fffc:	468b      	mov	fp, r1
 800fffe:	e770      	b.n	800fee2 <_strtod_l+0xa62>
 8010000:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010004:	e7e0      	b.n	800ffc8 <_strtod_l+0xb48>
 8010006:	a30e      	add	r3, pc, #56	@ (adr r3, 8010040 <_strtod_l+0xbc0>)
 8010008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000c:	f7f0 fd8e 	bl	8000b2c <__aeabi_dcmplt>
 8010010:	e798      	b.n	800ff44 <_strtod_l+0xac4>
 8010012:	2300      	movs	r3, #0
 8010014:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010016:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010018:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801001a:	6013      	str	r3, [r2, #0]
 801001c:	f7ff ba6d 	b.w	800f4fa <_strtod_l+0x7a>
 8010020:	2a65      	cmp	r2, #101	@ 0x65
 8010022:	f43f ab66 	beq.w	800f6f2 <_strtod_l+0x272>
 8010026:	2a45      	cmp	r2, #69	@ 0x45
 8010028:	f43f ab63 	beq.w	800f6f2 <_strtod_l+0x272>
 801002c:	2301      	movs	r3, #1
 801002e:	f7ff bb9e 	b.w	800f76e <_strtod_l+0x2ee>
 8010032:	bf00      	nop
 8010034:	f3af 8000 	nop.w
 8010038:	ffc00000 	.word	0xffc00000
 801003c:	41dfffff 	.word	0x41dfffff
 8010040:	94a03595 	.word	0x94a03595
 8010044:	3fcfffff 	.word	0x3fcfffff

08010048 <_strtod_r>:
 8010048:	4b01      	ldr	r3, [pc, #4]	@ (8010050 <_strtod_r+0x8>)
 801004a:	f7ff ba19 	b.w	800f480 <_strtod_l>
 801004e:	bf00      	nop
 8010050:	2000003c 	.word	0x2000003c

08010054 <strtof>:
 8010054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010058:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8010118 <strtof+0xc4>
 801005c:	4b29      	ldr	r3, [pc, #164]	@ (8010104 <strtof+0xb0>)
 801005e:	460a      	mov	r2, r1
 8010060:	ed2d 8b02 	vpush	{d8}
 8010064:	4601      	mov	r1, r0
 8010066:	f8d8 0000 	ldr.w	r0, [r8]
 801006a:	f7ff fa09 	bl	800f480 <_strtod_l>
 801006e:	ec55 4b10 	vmov	r4, r5, d0
 8010072:	4622      	mov	r2, r4
 8010074:	462b      	mov	r3, r5
 8010076:	4620      	mov	r0, r4
 8010078:	4629      	mov	r1, r5
 801007a:	f7f0 fd7f 	bl	8000b7c <__aeabi_dcmpun>
 801007e:	b190      	cbz	r0, 80100a6 <strtof+0x52>
 8010080:	2d00      	cmp	r5, #0
 8010082:	4821      	ldr	r0, [pc, #132]	@ (8010108 <strtof+0xb4>)
 8010084:	da09      	bge.n	801009a <strtof+0x46>
 8010086:	f000 fa47 	bl	8010518 <nanf>
 801008a:	eeb1 8a40 	vneg.f32	s16, s0
 801008e:	eeb0 0a48 	vmov.f32	s0, s16
 8010092:	ecbd 8b02 	vpop	{d8}
 8010096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009a:	ecbd 8b02 	vpop	{d8}
 801009e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100a2:	f000 ba39 	b.w	8010518 <nanf>
 80100a6:	4620      	mov	r0, r4
 80100a8:	4629      	mov	r1, r5
 80100aa:	f7f0 fdc5 	bl	8000c38 <__aeabi_d2f>
 80100ae:	ee08 0a10 	vmov	s16, r0
 80100b2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801010c <strtof+0xb8>
 80100b6:	eeb0 7ac8 	vabs.f32	s14, s16
 80100ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80100be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c2:	dd11      	ble.n	80100e8 <strtof+0x94>
 80100c4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80100c8:	4b11      	ldr	r3, [pc, #68]	@ (8010110 <strtof+0xbc>)
 80100ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100ce:	4620      	mov	r0, r4
 80100d0:	4639      	mov	r1, r7
 80100d2:	f7f0 fd53 	bl	8000b7c <__aeabi_dcmpun>
 80100d6:	b980      	cbnz	r0, 80100fa <strtof+0xa6>
 80100d8:	4b0d      	ldr	r3, [pc, #52]	@ (8010110 <strtof+0xbc>)
 80100da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100de:	4620      	mov	r0, r4
 80100e0:	4639      	mov	r1, r7
 80100e2:	f7f0 fd2d 	bl	8000b40 <__aeabi_dcmple>
 80100e6:	b940      	cbnz	r0, 80100fa <strtof+0xa6>
 80100e8:	ee18 3a10 	vmov	r3, s16
 80100ec:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80100f0:	d1cd      	bne.n	801008e <strtof+0x3a>
 80100f2:	4b08      	ldr	r3, [pc, #32]	@ (8010114 <strtof+0xc0>)
 80100f4:	402b      	ands	r3, r5
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d0c9      	beq.n	801008e <strtof+0x3a>
 80100fa:	f8d8 3000 	ldr.w	r3, [r8]
 80100fe:	2222      	movs	r2, #34	@ 0x22
 8010100:	601a      	str	r2, [r3, #0]
 8010102:	e7c4      	b.n	801008e <strtof+0x3a>
 8010104:	2000003c 	.word	0x2000003c
 8010108:	08013305 	.word	0x08013305
 801010c:	7f7fffff 	.word	0x7f7fffff
 8010110:	7fefffff 	.word	0x7fefffff
 8010114:	7ff00000 	.word	0x7ff00000
 8010118:	200001a8 	.word	0x200001a8

0801011c <_strtol_l.constprop.0>:
 801011c:	2b24      	cmp	r3, #36	@ 0x24
 801011e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010122:	4686      	mov	lr, r0
 8010124:	4690      	mov	r8, r2
 8010126:	d801      	bhi.n	801012c <_strtol_l.constprop.0+0x10>
 8010128:	2b01      	cmp	r3, #1
 801012a:	d106      	bne.n	801013a <_strtol_l.constprop.0+0x1e>
 801012c:	f000 f9a8 	bl	8010480 <__errno>
 8010130:	2316      	movs	r3, #22
 8010132:	6003      	str	r3, [r0, #0]
 8010134:	2000      	movs	r0, #0
 8010136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801013a:	4834      	ldr	r0, [pc, #208]	@ (801020c <_strtol_l.constprop.0+0xf0>)
 801013c:	460d      	mov	r5, r1
 801013e:	462a      	mov	r2, r5
 8010140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010144:	5d06      	ldrb	r6, [r0, r4]
 8010146:	f016 0608 	ands.w	r6, r6, #8
 801014a:	d1f8      	bne.n	801013e <_strtol_l.constprop.0+0x22>
 801014c:	2c2d      	cmp	r4, #45	@ 0x2d
 801014e:	d12d      	bne.n	80101ac <_strtol_l.constprop.0+0x90>
 8010150:	782c      	ldrb	r4, [r5, #0]
 8010152:	2601      	movs	r6, #1
 8010154:	1c95      	adds	r5, r2, #2
 8010156:	f033 0210 	bics.w	r2, r3, #16
 801015a:	d109      	bne.n	8010170 <_strtol_l.constprop.0+0x54>
 801015c:	2c30      	cmp	r4, #48	@ 0x30
 801015e:	d12a      	bne.n	80101b6 <_strtol_l.constprop.0+0x9a>
 8010160:	782a      	ldrb	r2, [r5, #0]
 8010162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010166:	2a58      	cmp	r2, #88	@ 0x58
 8010168:	d125      	bne.n	80101b6 <_strtol_l.constprop.0+0x9a>
 801016a:	786c      	ldrb	r4, [r5, #1]
 801016c:	2310      	movs	r3, #16
 801016e:	3502      	adds	r5, #2
 8010170:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010174:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010178:	2200      	movs	r2, #0
 801017a:	fbbc f9f3 	udiv	r9, ip, r3
 801017e:	4610      	mov	r0, r2
 8010180:	fb03 ca19 	mls	sl, r3, r9, ip
 8010184:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010188:	2f09      	cmp	r7, #9
 801018a:	d81b      	bhi.n	80101c4 <_strtol_l.constprop.0+0xa8>
 801018c:	463c      	mov	r4, r7
 801018e:	42a3      	cmp	r3, r4
 8010190:	dd27      	ble.n	80101e2 <_strtol_l.constprop.0+0xc6>
 8010192:	1c57      	adds	r7, r2, #1
 8010194:	d007      	beq.n	80101a6 <_strtol_l.constprop.0+0x8a>
 8010196:	4581      	cmp	r9, r0
 8010198:	d320      	bcc.n	80101dc <_strtol_l.constprop.0+0xc0>
 801019a:	d101      	bne.n	80101a0 <_strtol_l.constprop.0+0x84>
 801019c:	45a2      	cmp	sl, r4
 801019e:	db1d      	blt.n	80101dc <_strtol_l.constprop.0+0xc0>
 80101a0:	fb00 4003 	mla	r0, r0, r3, r4
 80101a4:	2201      	movs	r2, #1
 80101a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101aa:	e7eb      	b.n	8010184 <_strtol_l.constprop.0+0x68>
 80101ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80101ae:	bf04      	itt	eq
 80101b0:	782c      	ldrbeq	r4, [r5, #0]
 80101b2:	1c95      	addeq	r5, r2, #2
 80101b4:	e7cf      	b.n	8010156 <_strtol_l.constprop.0+0x3a>
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1da      	bne.n	8010170 <_strtol_l.constprop.0+0x54>
 80101ba:	2c30      	cmp	r4, #48	@ 0x30
 80101bc:	bf0c      	ite	eq
 80101be:	2308      	moveq	r3, #8
 80101c0:	230a      	movne	r3, #10
 80101c2:	e7d5      	b.n	8010170 <_strtol_l.constprop.0+0x54>
 80101c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80101c8:	2f19      	cmp	r7, #25
 80101ca:	d801      	bhi.n	80101d0 <_strtol_l.constprop.0+0xb4>
 80101cc:	3c37      	subs	r4, #55	@ 0x37
 80101ce:	e7de      	b.n	801018e <_strtol_l.constprop.0+0x72>
 80101d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80101d4:	2f19      	cmp	r7, #25
 80101d6:	d804      	bhi.n	80101e2 <_strtol_l.constprop.0+0xc6>
 80101d8:	3c57      	subs	r4, #87	@ 0x57
 80101da:	e7d8      	b.n	801018e <_strtol_l.constprop.0+0x72>
 80101dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80101e0:	e7e1      	b.n	80101a6 <_strtol_l.constprop.0+0x8a>
 80101e2:	1c53      	adds	r3, r2, #1
 80101e4:	d108      	bne.n	80101f8 <_strtol_l.constprop.0+0xdc>
 80101e6:	2322      	movs	r3, #34	@ 0x22
 80101e8:	f8ce 3000 	str.w	r3, [lr]
 80101ec:	4660      	mov	r0, ip
 80101ee:	f1b8 0f00 	cmp.w	r8, #0
 80101f2:	d0a0      	beq.n	8010136 <_strtol_l.constprop.0+0x1a>
 80101f4:	1e69      	subs	r1, r5, #1
 80101f6:	e006      	b.n	8010206 <_strtol_l.constprop.0+0xea>
 80101f8:	b106      	cbz	r6, 80101fc <_strtol_l.constprop.0+0xe0>
 80101fa:	4240      	negs	r0, r0
 80101fc:	f1b8 0f00 	cmp.w	r8, #0
 8010200:	d099      	beq.n	8010136 <_strtol_l.constprop.0+0x1a>
 8010202:	2a00      	cmp	r2, #0
 8010204:	d1f6      	bne.n	80101f4 <_strtol_l.constprop.0+0xd8>
 8010206:	f8c8 1000 	str.w	r1, [r8]
 801020a:	e794      	b.n	8010136 <_strtol_l.constprop.0+0x1a>
 801020c:	080131ca 	.word	0x080131ca

08010210 <_strtol_r>:
 8010210:	f7ff bf84 	b.w	801011c <_strtol_l.constprop.0>

08010214 <strtol>:
 8010214:	4613      	mov	r3, r2
 8010216:	460a      	mov	r2, r1
 8010218:	4601      	mov	r1, r0
 801021a:	4802      	ldr	r0, [pc, #8]	@ (8010224 <strtol+0x10>)
 801021c:	6800      	ldr	r0, [r0, #0]
 801021e:	f7ff bf7d 	b.w	801011c <_strtol_l.constprop.0>
 8010222:	bf00      	nop
 8010224:	200001a8 	.word	0x200001a8

08010228 <_fwalk_sglue>:
 8010228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801022c:	4607      	mov	r7, r0
 801022e:	4688      	mov	r8, r1
 8010230:	4614      	mov	r4, r2
 8010232:	2600      	movs	r6, #0
 8010234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010238:	f1b9 0901 	subs.w	r9, r9, #1
 801023c:	d505      	bpl.n	801024a <_fwalk_sglue+0x22>
 801023e:	6824      	ldr	r4, [r4, #0]
 8010240:	2c00      	cmp	r4, #0
 8010242:	d1f7      	bne.n	8010234 <_fwalk_sglue+0xc>
 8010244:	4630      	mov	r0, r6
 8010246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801024a:	89ab      	ldrh	r3, [r5, #12]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d907      	bls.n	8010260 <_fwalk_sglue+0x38>
 8010250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010254:	3301      	adds	r3, #1
 8010256:	d003      	beq.n	8010260 <_fwalk_sglue+0x38>
 8010258:	4629      	mov	r1, r5
 801025a:	4638      	mov	r0, r7
 801025c:	47c0      	blx	r8
 801025e:	4306      	orrs	r6, r0
 8010260:	3568      	adds	r5, #104	@ 0x68
 8010262:	e7e9      	b.n	8010238 <_fwalk_sglue+0x10>

08010264 <_puts_r>:
 8010264:	6a03      	ldr	r3, [r0, #32]
 8010266:	b570      	push	{r4, r5, r6, lr}
 8010268:	6884      	ldr	r4, [r0, #8]
 801026a:	4605      	mov	r5, r0
 801026c:	460e      	mov	r6, r1
 801026e:	b90b      	cbnz	r3, 8010274 <_puts_r+0x10>
 8010270:	f7ff f8d0 	bl	800f414 <__sinit>
 8010274:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010276:	07db      	lsls	r3, r3, #31
 8010278:	d405      	bmi.n	8010286 <_puts_r+0x22>
 801027a:	89a3      	ldrh	r3, [r4, #12]
 801027c:	0598      	lsls	r0, r3, #22
 801027e:	d402      	bmi.n	8010286 <_puts_r+0x22>
 8010280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010282:	f000 f928 	bl	80104d6 <__retarget_lock_acquire_recursive>
 8010286:	89a3      	ldrh	r3, [r4, #12]
 8010288:	0719      	lsls	r1, r3, #28
 801028a:	d502      	bpl.n	8010292 <_puts_r+0x2e>
 801028c:	6923      	ldr	r3, [r4, #16]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d135      	bne.n	80102fe <_puts_r+0x9a>
 8010292:	4621      	mov	r1, r4
 8010294:	4628      	mov	r0, r5
 8010296:	f002 fabb 	bl	8012810 <__swsetup_r>
 801029a:	b380      	cbz	r0, 80102fe <_puts_r+0x9a>
 801029c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80102a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102a2:	07da      	lsls	r2, r3, #31
 80102a4:	d405      	bmi.n	80102b2 <_puts_r+0x4e>
 80102a6:	89a3      	ldrh	r3, [r4, #12]
 80102a8:	059b      	lsls	r3, r3, #22
 80102aa:	d402      	bmi.n	80102b2 <_puts_r+0x4e>
 80102ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102ae:	f000 f913 	bl	80104d8 <__retarget_lock_release_recursive>
 80102b2:	4628      	mov	r0, r5
 80102b4:	bd70      	pop	{r4, r5, r6, pc}
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	da04      	bge.n	80102c4 <_puts_r+0x60>
 80102ba:	69a2      	ldr	r2, [r4, #24]
 80102bc:	429a      	cmp	r2, r3
 80102be:	dc17      	bgt.n	80102f0 <_puts_r+0x8c>
 80102c0:	290a      	cmp	r1, #10
 80102c2:	d015      	beq.n	80102f0 <_puts_r+0x8c>
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	1c5a      	adds	r2, r3, #1
 80102c8:	6022      	str	r2, [r4, #0]
 80102ca:	7019      	strb	r1, [r3, #0]
 80102cc:	68a3      	ldr	r3, [r4, #8]
 80102ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80102d2:	3b01      	subs	r3, #1
 80102d4:	60a3      	str	r3, [r4, #8]
 80102d6:	2900      	cmp	r1, #0
 80102d8:	d1ed      	bne.n	80102b6 <_puts_r+0x52>
 80102da:	2b00      	cmp	r3, #0
 80102dc:	da11      	bge.n	8010302 <_puts_r+0x9e>
 80102de:	4622      	mov	r2, r4
 80102e0:	210a      	movs	r1, #10
 80102e2:	4628      	mov	r0, r5
 80102e4:	f002 fa56 	bl	8012794 <__swbuf_r>
 80102e8:	3001      	adds	r0, #1
 80102ea:	d0d7      	beq.n	801029c <_puts_r+0x38>
 80102ec:	250a      	movs	r5, #10
 80102ee:	e7d7      	b.n	80102a0 <_puts_r+0x3c>
 80102f0:	4622      	mov	r2, r4
 80102f2:	4628      	mov	r0, r5
 80102f4:	f002 fa4e 	bl	8012794 <__swbuf_r>
 80102f8:	3001      	adds	r0, #1
 80102fa:	d1e7      	bne.n	80102cc <_puts_r+0x68>
 80102fc:	e7ce      	b.n	801029c <_puts_r+0x38>
 80102fe:	3e01      	subs	r6, #1
 8010300:	e7e4      	b.n	80102cc <_puts_r+0x68>
 8010302:	6823      	ldr	r3, [r4, #0]
 8010304:	1c5a      	adds	r2, r3, #1
 8010306:	6022      	str	r2, [r4, #0]
 8010308:	220a      	movs	r2, #10
 801030a:	701a      	strb	r2, [r3, #0]
 801030c:	e7ee      	b.n	80102ec <_puts_r+0x88>
	...

08010310 <puts>:
 8010310:	4b02      	ldr	r3, [pc, #8]	@ (801031c <puts+0xc>)
 8010312:	4601      	mov	r1, r0
 8010314:	6818      	ldr	r0, [r3, #0]
 8010316:	f7ff bfa5 	b.w	8010264 <_puts_r>
 801031a:	bf00      	nop
 801031c:	200001a8 	.word	0x200001a8

08010320 <strcat>:
 8010320:	b510      	push	{r4, lr}
 8010322:	4602      	mov	r2, r0
 8010324:	7814      	ldrb	r4, [r2, #0]
 8010326:	4613      	mov	r3, r2
 8010328:	3201      	adds	r2, #1
 801032a:	2c00      	cmp	r4, #0
 801032c:	d1fa      	bne.n	8010324 <strcat+0x4>
 801032e:	3b01      	subs	r3, #1
 8010330:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010334:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010338:	2a00      	cmp	r2, #0
 801033a:	d1f9      	bne.n	8010330 <strcat+0x10>
 801033c:	bd10      	pop	{r4, pc}

0801033e <strncmp>:
 801033e:	b510      	push	{r4, lr}
 8010340:	b16a      	cbz	r2, 801035e <strncmp+0x20>
 8010342:	3901      	subs	r1, #1
 8010344:	1884      	adds	r4, r0, r2
 8010346:	f810 2b01 	ldrb.w	r2, [r0], #1
 801034a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801034e:	429a      	cmp	r2, r3
 8010350:	d103      	bne.n	801035a <strncmp+0x1c>
 8010352:	42a0      	cmp	r0, r4
 8010354:	d001      	beq.n	801035a <strncmp+0x1c>
 8010356:	2a00      	cmp	r2, #0
 8010358:	d1f5      	bne.n	8010346 <strncmp+0x8>
 801035a:	1ad0      	subs	r0, r2, r3
 801035c:	bd10      	pop	{r4, pc}
 801035e:	4610      	mov	r0, r2
 8010360:	e7fc      	b.n	801035c <strncmp+0x1e>
	...

08010364 <strtok>:
 8010364:	4b16      	ldr	r3, [pc, #88]	@ (80103c0 <strtok+0x5c>)
 8010366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801036a:	681f      	ldr	r7, [r3, #0]
 801036c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801036e:	4605      	mov	r5, r0
 8010370:	460e      	mov	r6, r1
 8010372:	b9ec      	cbnz	r4, 80103b0 <strtok+0x4c>
 8010374:	2050      	movs	r0, #80	@ 0x50
 8010376:	f7fe fb0d 	bl	800e994 <malloc>
 801037a:	4602      	mov	r2, r0
 801037c:	6478      	str	r0, [r7, #68]	@ 0x44
 801037e:	b920      	cbnz	r0, 801038a <strtok+0x26>
 8010380:	4b10      	ldr	r3, [pc, #64]	@ (80103c4 <strtok+0x60>)
 8010382:	4811      	ldr	r0, [pc, #68]	@ (80103c8 <strtok+0x64>)
 8010384:	215b      	movs	r1, #91	@ 0x5b
 8010386:	f000 f8cd 	bl	8010524 <__assert_func>
 801038a:	e9c0 4400 	strd	r4, r4, [r0]
 801038e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010392:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010396:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801039a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801039e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80103a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80103a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80103aa:	6184      	str	r4, [r0, #24]
 80103ac:	7704      	strb	r4, [r0, #28]
 80103ae:	6244      	str	r4, [r0, #36]	@ 0x24
 80103b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80103b2:	4631      	mov	r1, r6
 80103b4:	4628      	mov	r0, r5
 80103b6:	2301      	movs	r3, #1
 80103b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103bc:	f000 b806 	b.w	80103cc <__strtok_r>
 80103c0:	200001a8 	.word	0x200001a8
 80103c4:	08013150 	.word	0x08013150
 80103c8:	08013167 	.word	0x08013167

080103cc <__strtok_r>:
 80103cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ce:	4604      	mov	r4, r0
 80103d0:	b908      	cbnz	r0, 80103d6 <__strtok_r+0xa>
 80103d2:	6814      	ldr	r4, [r2, #0]
 80103d4:	b144      	cbz	r4, 80103e8 <__strtok_r+0x1c>
 80103d6:	4620      	mov	r0, r4
 80103d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80103dc:	460f      	mov	r7, r1
 80103de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80103e2:	b91e      	cbnz	r6, 80103ec <__strtok_r+0x20>
 80103e4:	b965      	cbnz	r5, 8010400 <__strtok_r+0x34>
 80103e6:	6015      	str	r5, [r2, #0]
 80103e8:	2000      	movs	r0, #0
 80103ea:	e005      	b.n	80103f8 <__strtok_r+0x2c>
 80103ec:	42b5      	cmp	r5, r6
 80103ee:	d1f6      	bne.n	80103de <__strtok_r+0x12>
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d1f0      	bne.n	80103d6 <__strtok_r+0xa>
 80103f4:	6014      	str	r4, [r2, #0]
 80103f6:	7003      	strb	r3, [r0, #0]
 80103f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103fa:	461c      	mov	r4, r3
 80103fc:	e00c      	b.n	8010418 <__strtok_r+0x4c>
 80103fe:	b915      	cbnz	r5, 8010406 <__strtok_r+0x3a>
 8010400:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010404:	460e      	mov	r6, r1
 8010406:	f816 5b01 	ldrb.w	r5, [r6], #1
 801040a:	42ab      	cmp	r3, r5
 801040c:	d1f7      	bne.n	80103fe <__strtok_r+0x32>
 801040e:	2b00      	cmp	r3, #0
 8010410:	d0f3      	beq.n	80103fa <__strtok_r+0x2e>
 8010412:	2300      	movs	r3, #0
 8010414:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010418:	6014      	str	r4, [r2, #0]
 801041a:	e7ed      	b.n	80103f8 <__strtok_r+0x2c>

0801041c <strstr>:
 801041c:	780a      	ldrb	r2, [r1, #0]
 801041e:	b570      	push	{r4, r5, r6, lr}
 8010420:	b96a      	cbnz	r2, 801043e <strstr+0x22>
 8010422:	bd70      	pop	{r4, r5, r6, pc}
 8010424:	429a      	cmp	r2, r3
 8010426:	d109      	bne.n	801043c <strstr+0x20>
 8010428:	460c      	mov	r4, r1
 801042a:	4605      	mov	r5, r0
 801042c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010430:	2b00      	cmp	r3, #0
 8010432:	d0f6      	beq.n	8010422 <strstr+0x6>
 8010434:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010438:	429e      	cmp	r6, r3
 801043a:	d0f7      	beq.n	801042c <strstr+0x10>
 801043c:	3001      	adds	r0, #1
 801043e:	7803      	ldrb	r3, [r0, #0]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d1ef      	bne.n	8010424 <strstr+0x8>
 8010444:	4618      	mov	r0, r3
 8010446:	e7ec      	b.n	8010422 <strstr+0x6>

08010448 <memset>:
 8010448:	4402      	add	r2, r0
 801044a:	4603      	mov	r3, r0
 801044c:	4293      	cmp	r3, r2
 801044e:	d100      	bne.n	8010452 <memset+0xa>
 8010450:	4770      	bx	lr
 8010452:	f803 1b01 	strb.w	r1, [r3], #1
 8010456:	e7f9      	b.n	801044c <memset+0x4>

08010458 <_localeconv_r>:
 8010458:	4800      	ldr	r0, [pc, #0]	@ (801045c <_localeconv_r+0x4>)
 801045a:	4770      	bx	lr
 801045c:	2000012c 	.word	0x2000012c

08010460 <_sbrk_r>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4d06      	ldr	r5, [pc, #24]	@ (801047c <_sbrk_r+0x1c>)
 8010464:	2300      	movs	r3, #0
 8010466:	4604      	mov	r4, r0
 8010468:	4608      	mov	r0, r1
 801046a:	602b      	str	r3, [r5, #0]
 801046c:	f7f3 fb8c 	bl	8003b88 <_sbrk>
 8010470:	1c43      	adds	r3, r0, #1
 8010472:	d102      	bne.n	801047a <_sbrk_r+0x1a>
 8010474:	682b      	ldr	r3, [r5, #0]
 8010476:	b103      	cbz	r3, 801047a <_sbrk_r+0x1a>
 8010478:	6023      	str	r3, [r4, #0]
 801047a:	bd38      	pop	{r3, r4, r5, pc}
 801047c:	20001518 	.word	0x20001518

08010480 <__errno>:
 8010480:	4b01      	ldr	r3, [pc, #4]	@ (8010488 <__errno+0x8>)
 8010482:	6818      	ldr	r0, [r3, #0]
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop
 8010488:	200001a8 	.word	0x200001a8

0801048c <__libc_init_array>:
 801048c:	b570      	push	{r4, r5, r6, lr}
 801048e:	4d0d      	ldr	r5, [pc, #52]	@ (80104c4 <__libc_init_array+0x38>)
 8010490:	4c0d      	ldr	r4, [pc, #52]	@ (80104c8 <__libc_init_array+0x3c>)
 8010492:	1b64      	subs	r4, r4, r5
 8010494:	10a4      	asrs	r4, r4, #2
 8010496:	2600      	movs	r6, #0
 8010498:	42a6      	cmp	r6, r4
 801049a:	d109      	bne.n	80104b0 <__libc_init_array+0x24>
 801049c:	4d0b      	ldr	r5, [pc, #44]	@ (80104cc <__libc_init_array+0x40>)
 801049e:	4c0c      	ldr	r4, [pc, #48]	@ (80104d0 <__libc_init_array+0x44>)
 80104a0:	f002 fca6 	bl	8012df0 <_init>
 80104a4:	1b64      	subs	r4, r4, r5
 80104a6:	10a4      	asrs	r4, r4, #2
 80104a8:	2600      	movs	r6, #0
 80104aa:	42a6      	cmp	r6, r4
 80104ac:	d105      	bne.n	80104ba <__libc_init_array+0x2e>
 80104ae:	bd70      	pop	{r4, r5, r6, pc}
 80104b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80104b4:	4798      	blx	r3
 80104b6:	3601      	adds	r6, #1
 80104b8:	e7ee      	b.n	8010498 <__libc_init_array+0xc>
 80104ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80104be:	4798      	blx	r3
 80104c0:	3601      	adds	r6, #1
 80104c2:	e7f2      	b.n	80104aa <__libc_init_array+0x1e>
 80104c4:	08013550 	.word	0x08013550
 80104c8:	08013550 	.word	0x08013550
 80104cc:	08013550 	.word	0x08013550
 80104d0:	08013554 	.word	0x08013554

080104d4 <__retarget_lock_init_recursive>:
 80104d4:	4770      	bx	lr

080104d6 <__retarget_lock_acquire_recursive>:
 80104d6:	4770      	bx	lr

080104d8 <__retarget_lock_release_recursive>:
 80104d8:	4770      	bx	lr

080104da <memcpy>:
 80104da:	440a      	add	r2, r1
 80104dc:	4291      	cmp	r1, r2
 80104de:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80104e2:	d100      	bne.n	80104e6 <memcpy+0xc>
 80104e4:	4770      	bx	lr
 80104e6:	b510      	push	{r4, lr}
 80104e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104f0:	4291      	cmp	r1, r2
 80104f2:	d1f9      	bne.n	80104e8 <memcpy+0xe>
 80104f4:	bd10      	pop	{r4, pc}

080104f6 <strcpy>:
 80104f6:	4603      	mov	r3, r0
 80104f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104fc:	f803 2b01 	strb.w	r2, [r3], #1
 8010500:	2a00      	cmp	r2, #0
 8010502:	d1f9      	bne.n	80104f8 <strcpy+0x2>
 8010504:	4770      	bx	lr
	...

08010508 <nan>:
 8010508:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010510 <nan+0x8>
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop
 8010510:	00000000 	.word	0x00000000
 8010514:	7ff80000 	.word	0x7ff80000

08010518 <nanf>:
 8010518:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010520 <nanf+0x8>
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	7fc00000 	.word	0x7fc00000

08010524 <__assert_func>:
 8010524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010526:	4614      	mov	r4, r2
 8010528:	461a      	mov	r2, r3
 801052a:	4b09      	ldr	r3, [pc, #36]	@ (8010550 <__assert_func+0x2c>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4605      	mov	r5, r0
 8010530:	68d8      	ldr	r0, [r3, #12]
 8010532:	b954      	cbnz	r4, 801054a <__assert_func+0x26>
 8010534:	4b07      	ldr	r3, [pc, #28]	@ (8010554 <__assert_func+0x30>)
 8010536:	461c      	mov	r4, r3
 8010538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801053c:	9100      	str	r1, [sp, #0]
 801053e:	462b      	mov	r3, r5
 8010540:	4905      	ldr	r1, [pc, #20]	@ (8010558 <__assert_func+0x34>)
 8010542:	f002 f8e7 	bl	8012714 <fiprintf>
 8010546:	f002 faab 	bl	8012aa0 <abort>
 801054a:	4b04      	ldr	r3, [pc, #16]	@ (801055c <__assert_func+0x38>)
 801054c:	e7f4      	b.n	8010538 <__assert_func+0x14>
 801054e:	bf00      	nop
 8010550:	200001a8 	.word	0x200001a8
 8010554:	08013305 	.word	0x08013305
 8010558:	080132d7 	.word	0x080132d7
 801055c:	080132ca 	.word	0x080132ca

08010560 <quorem>:
 8010560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010564:	6903      	ldr	r3, [r0, #16]
 8010566:	690c      	ldr	r4, [r1, #16]
 8010568:	42a3      	cmp	r3, r4
 801056a:	4607      	mov	r7, r0
 801056c:	db7e      	blt.n	801066c <quorem+0x10c>
 801056e:	3c01      	subs	r4, #1
 8010570:	f101 0814 	add.w	r8, r1, #20
 8010574:	00a3      	lsls	r3, r4, #2
 8010576:	f100 0514 	add.w	r5, r0, #20
 801057a:	9300      	str	r3, [sp, #0]
 801057c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010580:	9301      	str	r3, [sp, #4]
 8010582:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801058a:	3301      	adds	r3, #1
 801058c:	429a      	cmp	r2, r3
 801058e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010592:	fbb2 f6f3 	udiv	r6, r2, r3
 8010596:	d32e      	bcc.n	80105f6 <quorem+0x96>
 8010598:	f04f 0a00 	mov.w	sl, #0
 801059c:	46c4      	mov	ip, r8
 801059e:	46ae      	mov	lr, r5
 80105a0:	46d3      	mov	fp, sl
 80105a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80105a6:	b298      	uxth	r0, r3
 80105a8:	fb06 a000 	mla	r0, r6, r0, sl
 80105ac:	0c02      	lsrs	r2, r0, #16
 80105ae:	0c1b      	lsrs	r3, r3, #16
 80105b0:	fb06 2303 	mla	r3, r6, r3, r2
 80105b4:	f8de 2000 	ldr.w	r2, [lr]
 80105b8:	b280      	uxth	r0, r0
 80105ba:	b292      	uxth	r2, r2
 80105bc:	1a12      	subs	r2, r2, r0
 80105be:	445a      	add	r2, fp
 80105c0:	f8de 0000 	ldr.w	r0, [lr]
 80105c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80105ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80105d2:	b292      	uxth	r2, r2
 80105d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80105d8:	45e1      	cmp	r9, ip
 80105da:	f84e 2b04 	str.w	r2, [lr], #4
 80105de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80105e2:	d2de      	bcs.n	80105a2 <quorem+0x42>
 80105e4:	9b00      	ldr	r3, [sp, #0]
 80105e6:	58eb      	ldr	r3, [r5, r3]
 80105e8:	b92b      	cbnz	r3, 80105f6 <quorem+0x96>
 80105ea:	9b01      	ldr	r3, [sp, #4]
 80105ec:	3b04      	subs	r3, #4
 80105ee:	429d      	cmp	r5, r3
 80105f0:	461a      	mov	r2, r3
 80105f2:	d32f      	bcc.n	8010654 <quorem+0xf4>
 80105f4:	613c      	str	r4, [r7, #16]
 80105f6:	4638      	mov	r0, r7
 80105f8:	f001 fe5a 	bl	80122b0 <__mcmp>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	db25      	blt.n	801064c <quorem+0xec>
 8010600:	4629      	mov	r1, r5
 8010602:	2000      	movs	r0, #0
 8010604:	f858 2b04 	ldr.w	r2, [r8], #4
 8010608:	f8d1 c000 	ldr.w	ip, [r1]
 801060c:	fa1f fe82 	uxth.w	lr, r2
 8010610:	fa1f f38c 	uxth.w	r3, ip
 8010614:	eba3 030e 	sub.w	r3, r3, lr
 8010618:	4403      	add	r3, r0
 801061a:	0c12      	lsrs	r2, r2, #16
 801061c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010620:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010624:	b29b      	uxth	r3, r3
 8010626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801062a:	45c1      	cmp	r9, r8
 801062c:	f841 3b04 	str.w	r3, [r1], #4
 8010630:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010634:	d2e6      	bcs.n	8010604 <quorem+0xa4>
 8010636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801063a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801063e:	b922      	cbnz	r2, 801064a <quorem+0xea>
 8010640:	3b04      	subs	r3, #4
 8010642:	429d      	cmp	r5, r3
 8010644:	461a      	mov	r2, r3
 8010646:	d30b      	bcc.n	8010660 <quorem+0x100>
 8010648:	613c      	str	r4, [r7, #16]
 801064a:	3601      	adds	r6, #1
 801064c:	4630      	mov	r0, r6
 801064e:	b003      	add	sp, #12
 8010650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010654:	6812      	ldr	r2, [r2, #0]
 8010656:	3b04      	subs	r3, #4
 8010658:	2a00      	cmp	r2, #0
 801065a:	d1cb      	bne.n	80105f4 <quorem+0x94>
 801065c:	3c01      	subs	r4, #1
 801065e:	e7c6      	b.n	80105ee <quorem+0x8e>
 8010660:	6812      	ldr	r2, [r2, #0]
 8010662:	3b04      	subs	r3, #4
 8010664:	2a00      	cmp	r2, #0
 8010666:	d1ef      	bne.n	8010648 <quorem+0xe8>
 8010668:	3c01      	subs	r4, #1
 801066a:	e7ea      	b.n	8010642 <quorem+0xe2>
 801066c:	2000      	movs	r0, #0
 801066e:	e7ee      	b.n	801064e <quorem+0xee>

08010670 <_dtoa_r>:
 8010670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010674:	69c7      	ldr	r7, [r0, #28]
 8010676:	b099      	sub	sp, #100	@ 0x64
 8010678:	ed8d 0b02 	vstr	d0, [sp, #8]
 801067c:	ec55 4b10 	vmov	r4, r5, d0
 8010680:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010682:	9109      	str	r1, [sp, #36]	@ 0x24
 8010684:	4683      	mov	fp, r0
 8010686:	920e      	str	r2, [sp, #56]	@ 0x38
 8010688:	9313      	str	r3, [sp, #76]	@ 0x4c
 801068a:	b97f      	cbnz	r7, 80106ac <_dtoa_r+0x3c>
 801068c:	2010      	movs	r0, #16
 801068e:	f7fe f981 	bl	800e994 <malloc>
 8010692:	4602      	mov	r2, r0
 8010694:	f8cb 001c 	str.w	r0, [fp, #28]
 8010698:	b920      	cbnz	r0, 80106a4 <_dtoa_r+0x34>
 801069a:	4ba7      	ldr	r3, [pc, #668]	@ (8010938 <_dtoa_r+0x2c8>)
 801069c:	21ef      	movs	r1, #239	@ 0xef
 801069e:	48a7      	ldr	r0, [pc, #668]	@ (801093c <_dtoa_r+0x2cc>)
 80106a0:	f7ff ff40 	bl	8010524 <__assert_func>
 80106a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80106a8:	6007      	str	r7, [r0, #0]
 80106aa:	60c7      	str	r7, [r0, #12]
 80106ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80106b0:	6819      	ldr	r1, [r3, #0]
 80106b2:	b159      	cbz	r1, 80106cc <_dtoa_r+0x5c>
 80106b4:	685a      	ldr	r2, [r3, #4]
 80106b6:	604a      	str	r2, [r1, #4]
 80106b8:	2301      	movs	r3, #1
 80106ba:	4093      	lsls	r3, r2
 80106bc:	608b      	str	r3, [r1, #8]
 80106be:	4658      	mov	r0, fp
 80106c0:	f001 fb72 	bl	8011da8 <_Bfree>
 80106c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80106c8:	2200      	movs	r2, #0
 80106ca:	601a      	str	r2, [r3, #0]
 80106cc:	1e2b      	subs	r3, r5, #0
 80106ce:	bfb9      	ittee	lt
 80106d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80106d4:	9303      	strlt	r3, [sp, #12]
 80106d6:	2300      	movge	r3, #0
 80106d8:	6033      	strge	r3, [r6, #0]
 80106da:	9f03      	ldr	r7, [sp, #12]
 80106dc:	4b98      	ldr	r3, [pc, #608]	@ (8010940 <_dtoa_r+0x2d0>)
 80106de:	bfbc      	itt	lt
 80106e0:	2201      	movlt	r2, #1
 80106e2:	6032      	strlt	r2, [r6, #0]
 80106e4:	43bb      	bics	r3, r7
 80106e6:	d112      	bne.n	801070e <_dtoa_r+0x9e>
 80106e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80106ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80106ee:	6013      	str	r3, [r2, #0]
 80106f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80106f4:	4323      	orrs	r3, r4
 80106f6:	f000 854d 	beq.w	8011194 <_dtoa_r+0xb24>
 80106fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80106fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010954 <_dtoa_r+0x2e4>
 8010700:	2b00      	cmp	r3, #0
 8010702:	f000 854f 	beq.w	80111a4 <_dtoa_r+0xb34>
 8010706:	f10a 0303 	add.w	r3, sl, #3
 801070a:	f000 bd49 	b.w	80111a0 <_dtoa_r+0xb30>
 801070e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010712:	2200      	movs	r2, #0
 8010714:	ec51 0b17 	vmov	r0, r1, d7
 8010718:	2300      	movs	r3, #0
 801071a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801071e:	f7f0 f9fb 	bl	8000b18 <__aeabi_dcmpeq>
 8010722:	4680      	mov	r8, r0
 8010724:	b158      	cbz	r0, 801073e <_dtoa_r+0xce>
 8010726:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010728:	2301      	movs	r3, #1
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801072e:	b113      	cbz	r3, 8010736 <_dtoa_r+0xc6>
 8010730:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010732:	4b84      	ldr	r3, [pc, #528]	@ (8010944 <_dtoa_r+0x2d4>)
 8010734:	6013      	str	r3, [r2, #0]
 8010736:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010958 <_dtoa_r+0x2e8>
 801073a:	f000 bd33 	b.w	80111a4 <_dtoa_r+0xb34>
 801073e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010742:	aa16      	add	r2, sp, #88	@ 0x58
 8010744:	a917      	add	r1, sp, #92	@ 0x5c
 8010746:	4658      	mov	r0, fp
 8010748:	f001 fed2 	bl	80124f0 <__d2b>
 801074c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010750:	4681      	mov	r9, r0
 8010752:	2e00      	cmp	r6, #0
 8010754:	d077      	beq.n	8010846 <_dtoa_r+0x1d6>
 8010756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010758:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801075c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010764:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010768:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801076c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010770:	4619      	mov	r1, r3
 8010772:	2200      	movs	r2, #0
 8010774:	4b74      	ldr	r3, [pc, #464]	@ (8010948 <_dtoa_r+0x2d8>)
 8010776:	f7ef fdaf 	bl	80002d8 <__aeabi_dsub>
 801077a:	a369      	add	r3, pc, #420	@ (adr r3, 8010920 <_dtoa_r+0x2b0>)
 801077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010780:	f7ef ff62 	bl	8000648 <__aeabi_dmul>
 8010784:	a368      	add	r3, pc, #416	@ (adr r3, 8010928 <_dtoa_r+0x2b8>)
 8010786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078a:	f7ef fda7 	bl	80002dc <__adddf3>
 801078e:	4604      	mov	r4, r0
 8010790:	4630      	mov	r0, r6
 8010792:	460d      	mov	r5, r1
 8010794:	f7ef feee 	bl	8000574 <__aeabi_i2d>
 8010798:	a365      	add	r3, pc, #404	@ (adr r3, 8010930 <_dtoa_r+0x2c0>)
 801079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079e:	f7ef ff53 	bl	8000648 <__aeabi_dmul>
 80107a2:	4602      	mov	r2, r0
 80107a4:	460b      	mov	r3, r1
 80107a6:	4620      	mov	r0, r4
 80107a8:	4629      	mov	r1, r5
 80107aa:	f7ef fd97 	bl	80002dc <__adddf3>
 80107ae:	4604      	mov	r4, r0
 80107b0:	460d      	mov	r5, r1
 80107b2:	f7f0 f9f9 	bl	8000ba8 <__aeabi_d2iz>
 80107b6:	2200      	movs	r2, #0
 80107b8:	4607      	mov	r7, r0
 80107ba:	2300      	movs	r3, #0
 80107bc:	4620      	mov	r0, r4
 80107be:	4629      	mov	r1, r5
 80107c0:	f7f0 f9b4 	bl	8000b2c <__aeabi_dcmplt>
 80107c4:	b140      	cbz	r0, 80107d8 <_dtoa_r+0x168>
 80107c6:	4638      	mov	r0, r7
 80107c8:	f7ef fed4 	bl	8000574 <__aeabi_i2d>
 80107cc:	4622      	mov	r2, r4
 80107ce:	462b      	mov	r3, r5
 80107d0:	f7f0 f9a2 	bl	8000b18 <__aeabi_dcmpeq>
 80107d4:	b900      	cbnz	r0, 80107d8 <_dtoa_r+0x168>
 80107d6:	3f01      	subs	r7, #1
 80107d8:	2f16      	cmp	r7, #22
 80107da:	d851      	bhi.n	8010880 <_dtoa_r+0x210>
 80107dc:	4b5b      	ldr	r3, [pc, #364]	@ (801094c <_dtoa_r+0x2dc>)
 80107de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80107e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107ea:	f7f0 f99f 	bl	8000b2c <__aeabi_dcmplt>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d048      	beq.n	8010884 <_dtoa_r+0x214>
 80107f2:	3f01      	subs	r7, #1
 80107f4:	2300      	movs	r3, #0
 80107f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80107f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80107fa:	1b9b      	subs	r3, r3, r6
 80107fc:	1e5a      	subs	r2, r3, #1
 80107fe:	bf44      	itt	mi
 8010800:	f1c3 0801 	rsbmi	r8, r3, #1
 8010804:	2300      	movmi	r3, #0
 8010806:	9208      	str	r2, [sp, #32]
 8010808:	bf54      	ite	pl
 801080a:	f04f 0800 	movpl.w	r8, #0
 801080e:	9308      	strmi	r3, [sp, #32]
 8010810:	2f00      	cmp	r7, #0
 8010812:	db39      	blt.n	8010888 <_dtoa_r+0x218>
 8010814:	9b08      	ldr	r3, [sp, #32]
 8010816:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010818:	443b      	add	r3, r7
 801081a:	9308      	str	r3, [sp, #32]
 801081c:	2300      	movs	r3, #0
 801081e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010822:	2b09      	cmp	r3, #9
 8010824:	d864      	bhi.n	80108f0 <_dtoa_r+0x280>
 8010826:	2b05      	cmp	r3, #5
 8010828:	bfc4      	itt	gt
 801082a:	3b04      	subgt	r3, #4
 801082c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801082e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010830:	f1a3 0302 	sub.w	r3, r3, #2
 8010834:	bfcc      	ite	gt
 8010836:	2400      	movgt	r4, #0
 8010838:	2401      	movle	r4, #1
 801083a:	2b03      	cmp	r3, #3
 801083c:	d863      	bhi.n	8010906 <_dtoa_r+0x296>
 801083e:	e8df f003 	tbb	[pc, r3]
 8010842:	372a      	.short	0x372a
 8010844:	5535      	.short	0x5535
 8010846:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801084a:	441e      	add	r6, r3
 801084c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010850:	2b20      	cmp	r3, #32
 8010852:	bfc1      	itttt	gt
 8010854:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010858:	409f      	lslgt	r7, r3
 801085a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801085e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010862:	bfd6      	itet	le
 8010864:	f1c3 0320 	rsble	r3, r3, #32
 8010868:	ea47 0003 	orrgt.w	r0, r7, r3
 801086c:	fa04 f003 	lslle.w	r0, r4, r3
 8010870:	f7ef fe70 	bl	8000554 <__aeabi_ui2d>
 8010874:	2201      	movs	r2, #1
 8010876:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801087a:	3e01      	subs	r6, #1
 801087c:	9214      	str	r2, [sp, #80]	@ 0x50
 801087e:	e777      	b.n	8010770 <_dtoa_r+0x100>
 8010880:	2301      	movs	r3, #1
 8010882:	e7b8      	b.n	80107f6 <_dtoa_r+0x186>
 8010884:	9012      	str	r0, [sp, #72]	@ 0x48
 8010886:	e7b7      	b.n	80107f8 <_dtoa_r+0x188>
 8010888:	427b      	negs	r3, r7
 801088a:	930a      	str	r3, [sp, #40]	@ 0x28
 801088c:	2300      	movs	r3, #0
 801088e:	eba8 0807 	sub.w	r8, r8, r7
 8010892:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010894:	e7c4      	b.n	8010820 <_dtoa_r+0x1b0>
 8010896:	2300      	movs	r3, #0
 8010898:	930b      	str	r3, [sp, #44]	@ 0x2c
 801089a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801089c:	2b00      	cmp	r3, #0
 801089e:	dc35      	bgt.n	801090c <_dtoa_r+0x29c>
 80108a0:	2301      	movs	r3, #1
 80108a2:	9300      	str	r3, [sp, #0]
 80108a4:	9307      	str	r3, [sp, #28]
 80108a6:	461a      	mov	r2, r3
 80108a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80108aa:	e00b      	b.n	80108c4 <_dtoa_r+0x254>
 80108ac:	2301      	movs	r3, #1
 80108ae:	e7f3      	b.n	8010898 <_dtoa_r+0x228>
 80108b0:	2300      	movs	r3, #0
 80108b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108b6:	18fb      	adds	r3, r7, r3
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	3301      	adds	r3, #1
 80108bc:	2b01      	cmp	r3, #1
 80108be:	9307      	str	r3, [sp, #28]
 80108c0:	bfb8      	it	lt
 80108c2:	2301      	movlt	r3, #1
 80108c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80108c8:	2100      	movs	r1, #0
 80108ca:	2204      	movs	r2, #4
 80108cc:	f102 0514 	add.w	r5, r2, #20
 80108d0:	429d      	cmp	r5, r3
 80108d2:	d91f      	bls.n	8010914 <_dtoa_r+0x2a4>
 80108d4:	6041      	str	r1, [r0, #4]
 80108d6:	4658      	mov	r0, fp
 80108d8:	f001 fa26 	bl	8011d28 <_Balloc>
 80108dc:	4682      	mov	sl, r0
 80108de:	2800      	cmp	r0, #0
 80108e0:	d13c      	bne.n	801095c <_dtoa_r+0x2ec>
 80108e2:	4b1b      	ldr	r3, [pc, #108]	@ (8010950 <_dtoa_r+0x2e0>)
 80108e4:	4602      	mov	r2, r0
 80108e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80108ea:	e6d8      	b.n	801069e <_dtoa_r+0x2e>
 80108ec:	2301      	movs	r3, #1
 80108ee:	e7e0      	b.n	80108b2 <_dtoa_r+0x242>
 80108f0:	2401      	movs	r4, #1
 80108f2:	2300      	movs	r3, #0
 80108f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80108f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80108f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	9307      	str	r3, [sp, #28]
 8010900:	2200      	movs	r2, #0
 8010902:	2312      	movs	r3, #18
 8010904:	e7d0      	b.n	80108a8 <_dtoa_r+0x238>
 8010906:	2301      	movs	r3, #1
 8010908:	930b      	str	r3, [sp, #44]	@ 0x2c
 801090a:	e7f5      	b.n	80108f8 <_dtoa_r+0x288>
 801090c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	9307      	str	r3, [sp, #28]
 8010912:	e7d7      	b.n	80108c4 <_dtoa_r+0x254>
 8010914:	3101      	adds	r1, #1
 8010916:	0052      	lsls	r2, r2, #1
 8010918:	e7d8      	b.n	80108cc <_dtoa_r+0x25c>
 801091a:	bf00      	nop
 801091c:	f3af 8000 	nop.w
 8010920:	636f4361 	.word	0x636f4361
 8010924:	3fd287a7 	.word	0x3fd287a7
 8010928:	8b60c8b3 	.word	0x8b60c8b3
 801092c:	3fc68a28 	.word	0x3fc68a28
 8010930:	509f79fb 	.word	0x509f79fb
 8010934:	3fd34413 	.word	0x3fd34413
 8010938:	08013150 	.word	0x08013150
 801093c:	08013313 	.word	0x08013313
 8010940:	7ff00000 	.word	0x7ff00000
 8010944:	080130d1 	.word	0x080130d1
 8010948:	3ff80000 	.word	0x3ff80000
 801094c:	08013480 	.word	0x08013480
 8010950:	0801336b 	.word	0x0801336b
 8010954:	0801330f 	.word	0x0801330f
 8010958:	080130d0 	.word	0x080130d0
 801095c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010960:	6018      	str	r0, [r3, #0]
 8010962:	9b07      	ldr	r3, [sp, #28]
 8010964:	2b0e      	cmp	r3, #14
 8010966:	f200 80a4 	bhi.w	8010ab2 <_dtoa_r+0x442>
 801096a:	2c00      	cmp	r4, #0
 801096c:	f000 80a1 	beq.w	8010ab2 <_dtoa_r+0x442>
 8010970:	2f00      	cmp	r7, #0
 8010972:	dd33      	ble.n	80109dc <_dtoa_r+0x36c>
 8010974:	4bad      	ldr	r3, [pc, #692]	@ (8010c2c <_dtoa_r+0x5bc>)
 8010976:	f007 020f 	and.w	r2, r7, #15
 801097a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801097e:	ed93 7b00 	vldr	d7, [r3]
 8010982:	05f8      	lsls	r0, r7, #23
 8010984:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010988:	ea4f 1427 	mov.w	r4, r7, asr #4
 801098c:	d516      	bpl.n	80109bc <_dtoa_r+0x34c>
 801098e:	4ba8      	ldr	r3, [pc, #672]	@ (8010c30 <_dtoa_r+0x5c0>)
 8010990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010994:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010998:	f7ef ff80 	bl	800089c <__aeabi_ddiv>
 801099c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109a0:	f004 040f 	and.w	r4, r4, #15
 80109a4:	2603      	movs	r6, #3
 80109a6:	4da2      	ldr	r5, [pc, #648]	@ (8010c30 <_dtoa_r+0x5c0>)
 80109a8:	b954      	cbnz	r4, 80109c0 <_dtoa_r+0x350>
 80109aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109b2:	f7ef ff73 	bl	800089c <__aeabi_ddiv>
 80109b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109ba:	e028      	b.n	8010a0e <_dtoa_r+0x39e>
 80109bc:	2602      	movs	r6, #2
 80109be:	e7f2      	b.n	80109a6 <_dtoa_r+0x336>
 80109c0:	07e1      	lsls	r1, r4, #31
 80109c2:	d508      	bpl.n	80109d6 <_dtoa_r+0x366>
 80109c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80109cc:	f7ef fe3c 	bl	8000648 <__aeabi_dmul>
 80109d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109d4:	3601      	adds	r6, #1
 80109d6:	1064      	asrs	r4, r4, #1
 80109d8:	3508      	adds	r5, #8
 80109da:	e7e5      	b.n	80109a8 <_dtoa_r+0x338>
 80109dc:	f000 80d2 	beq.w	8010b84 <_dtoa_r+0x514>
 80109e0:	427c      	negs	r4, r7
 80109e2:	4b92      	ldr	r3, [pc, #584]	@ (8010c2c <_dtoa_r+0x5bc>)
 80109e4:	4d92      	ldr	r5, [pc, #584]	@ (8010c30 <_dtoa_r+0x5c0>)
 80109e6:	f004 020f 	and.w	r2, r4, #15
 80109ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80109f6:	f7ef fe27 	bl	8000648 <__aeabi_dmul>
 80109fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109fe:	1124      	asrs	r4, r4, #4
 8010a00:	2300      	movs	r3, #0
 8010a02:	2602      	movs	r6, #2
 8010a04:	2c00      	cmp	r4, #0
 8010a06:	f040 80b2 	bne.w	8010b6e <_dtoa_r+0x4fe>
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d1d3      	bne.n	80109b6 <_dtoa_r+0x346>
 8010a0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f000 80b7 	beq.w	8010b88 <_dtoa_r+0x518>
 8010a1a:	4b86      	ldr	r3, [pc, #536]	@ (8010c34 <_dtoa_r+0x5c4>)
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	4620      	mov	r0, r4
 8010a20:	4629      	mov	r1, r5
 8010a22:	f7f0 f883 	bl	8000b2c <__aeabi_dcmplt>
 8010a26:	2800      	cmp	r0, #0
 8010a28:	f000 80ae 	beq.w	8010b88 <_dtoa_r+0x518>
 8010a2c:	9b07      	ldr	r3, [sp, #28]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f000 80aa 	beq.w	8010b88 <_dtoa_r+0x518>
 8010a34:	9b00      	ldr	r3, [sp, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	dd37      	ble.n	8010aaa <_dtoa_r+0x43a>
 8010a3a:	1e7b      	subs	r3, r7, #1
 8010a3c:	9304      	str	r3, [sp, #16]
 8010a3e:	4620      	mov	r0, r4
 8010a40:	4b7d      	ldr	r3, [pc, #500]	@ (8010c38 <_dtoa_r+0x5c8>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	4629      	mov	r1, r5
 8010a46:	f7ef fdff 	bl	8000648 <__aeabi_dmul>
 8010a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a4e:	9c00      	ldr	r4, [sp, #0]
 8010a50:	3601      	adds	r6, #1
 8010a52:	4630      	mov	r0, r6
 8010a54:	f7ef fd8e 	bl	8000574 <__aeabi_i2d>
 8010a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a5c:	f7ef fdf4 	bl	8000648 <__aeabi_dmul>
 8010a60:	4b76      	ldr	r3, [pc, #472]	@ (8010c3c <_dtoa_r+0x5cc>)
 8010a62:	2200      	movs	r2, #0
 8010a64:	f7ef fc3a 	bl	80002dc <__adddf3>
 8010a68:	4605      	mov	r5, r0
 8010a6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010a6e:	2c00      	cmp	r4, #0
 8010a70:	f040 808d 	bne.w	8010b8e <_dtoa_r+0x51e>
 8010a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a78:	4b71      	ldr	r3, [pc, #452]	@ (8010c40 <_dtoa_r+0x5d0>)
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	f7ef fc2c 	bl	80002d8 <__aeabi_dsub>
 8010a80:	4602      	mov	r2, r0
 8010a82:	460b      	mov	r3, r1
 8010a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010a88:	462a      	mov	r2, r5
 8010a8a:	4633      	mov	r3, r6
 8010a8c:	f7f0 f86c 	bl	8000b68 <__aeabi_dcmpgt>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	f040 828b 	bne.w	8010fac <_dtoa_r+0x93c>
 8010a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a9a:	462a      	mov	r2, r5
 8010a9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010aa0:	f7f0 f844 	bl	8000b2c <__aeabi_dcmplt>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	f040 8128 	bne.w	8010cfa <_dtoa_r+0x68a>
 8010aaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010aae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010ab2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	f2c0 815a 	blt.w	8010d6e <_dtoa_r+0x6fe>
 8010aba:	2f0e      	cmp	r7, #14
 8010abc:	f300 8157 	bgt.w	8010d6e <_dtoa_r+0x6fe>
 8010ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8010c2c <_dtoa_r+0x5bc>)
 8010ac2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010ac6:	ed93 7b00 	vldr	d7, [r3]
 8010aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	ed8d 7b00 	vstr	d7, [sp]
 8010ad2:	da03      	bge.n	8010adc <_dtoa_r+0x46c>
 8010ad4:	9b07      	ldr	r3, [sp, #28]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f340 8101 	ble.w	8010cde <_dtoa_r+0x66e>
 8010adc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010ae0:	4656      	mov	r6, sl
 8010ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	4629      	mov	r1, r5
 8010aea:	f7ef fed7 	bl	800089c <__aeabi_ddiv>
 8010aee:	f7f0 f85b 	bl	8000ba8 <__aeabi_d2iz>
 8010af2:	4680      	mov	r8, r0
 8010af4:	f7ef fd3e 	bl	8000574 <__aeabi_i2d>
 8010af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010afc:	f7ef fda4 	bl	8000648 <__aeabi_dmul>
 8010b00:	4602      	mov	r2, r0
 8010b02:	460b      	mov	r3, r1
 8010b04:	4620      	mov	r0, r4
 8010b06:	4629      	mov	r1, r5
 8010b08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010b0c:	f7ef fbe4 	bl	80002d8 <__aeabi_dsub>
 8010b10:	f806 4b01 	strb.w	r4, [r6], #1
 8010b14:	9d07      	ldr	r5, [sp, #28]
 8010b16:	eba6 040a 	sub.w	r4, r6, sl
 8010b1a:	42a5      	cmp	r5, r4
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	460b      	mov	r3, r1
 8010b20:	f040 8117 	bne.w	8010d52 <_dtoa_r+0x6e2>
 8010b24:	f7ef fbda 	bl	80002dc <__adddf3>
 8010b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	460d      	mov	r5, r1
 8010b30:	f7f0 f81a 	bl	8000b68 <__aeabi_dcmpgt>
 8010b34:	2800      	cmp	r0, #0
 8010b36:	f040 80f9 	bne.w	8010d2c <_dtoa_r+0x6bc>
 8010b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b3e:	4620      	mov	r0, r4
 8010b40:	4629      	mov	r1, r5
 8010b42:	f7ef ffe9 	bl	8000b18 <__aeabi_dcmpeq>
 8010b46:	b118      	cbz	r0, 8010b50 <_dtoa_r+0x4e0>
 8010b48:	f018 0f01 	tst.w	r8, #1
 8010b4c:	f040 80ee 	bne.w	8010d2c <_dtoa_r+0x6bc>
 8010b50:	4649      	mov	r1, r9
 8010b52:	4658      	mov	r0, fp
 8010b54:	f001 f928 	bl	8011da8 <_Bfree>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	7033      	strb	r3, [r6, #0]
 8010b5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010b5e:	3701      	adds	r7, #1
 8010b60:	601f      	str	r7, [r3, #0]
 8010b62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f000 831d 	beq.w	80111a4 <_dtoa_r+0xb34>
 8010b6a:	601e      	str	r6, [r3, #0]
 8010b6c:	e31a      	b.n	80111a4 <_dtoa_r+0xb34>
 8010b6e:	07e2      	lsls	r2, r4, #31
 8010b70:	d505      	bpl.n	8010b7e <_dtoa_r+0x50e>
 8010b72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010b76:	f7ef fd67 	bl	8000648 <__aeabi_dmul>
 8010b7a:	3601      	adds	r6, #1
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	1064      	asrs	r4, r4, #1
 8010b80:	3508      	adds	r5, #8
 8010b82:	e73f      	b.n	8010a04 <_dtoa_r+0x394>
 8010b84:	2602      	movs	r6, #2
 8010b86:	e742      	b.n	8010a0e <_dtoa_r+0x39e>
 8010b88:	9c07      	ldr	r4, [sp, #28]
 8010b8a:	9704      	str	r7, [sp, #16]
 8010b8c:	e761      	b.n	8010a52 <_dtoa_r+0x3e2>
 8010b8e:	4b27      	ldr	r3, [pc, #156]	@ (8010c2c <_dtoa_r+0x5bc>)
 8010b90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010b92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b9a:	4454      	add	r4, sl
 8010b9c:	2900      	cmp	r1, #0
 8010b9e:	d053      	beq.n	8010c48 <_dtoa_r+0x5d8>
 8010ba0:	4928      	ldr	r1, [pc, #160]	@ (8010c44 <_dtoa_r+0x5d4>)
 8010ba2:	2000      	movs	r0, #0
 8010ba4:	f7ef fe7a 	bl	800089c <__aeabi_ddiv>
 8010ba8:	4633      	mov	r3, r6
 8010baa:	462a      	mov	r2, r5
 8010bac:	f7ef fb94 	bl	80002d8 <__aeabi_dsub>
 8010bb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010bb4:	4656      	mov	r6, sl
 8010bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bba:	f7ef fff5 	bl	8000ba8 <__aeabi_d2iz>
 8010bbe:	4605      	mov	r5, r0
 8010bc0:	f7ef fcd8 	bl	8000574 <__aeabi_i2d>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bcc:	f7ef fb84 	bl	80002d8 <__aeabi_dsub>
 8010bd0:	3530      	adds	r5, #48	@ 0x30
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010bda:	f806 5b01 	strb.w	r5, [r6], #1
 8010bde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010be2:	f7ef ffa3 	bl	8000b2c <__aeabi_dcmplt>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d171      	bne.n	8010cce <_dtoa_r+0x65e>
 8010bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bee:	4911      	ldr	r1, [pc, #68]	@ (8010c34 <_dtoa_r+0x5c4>)
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	f7ef fb71 	bl	80002d8 <__aeabi_dsub>
 8010bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010bfa:	f7ef ff97 	bl	8000b2c <__aeabi_dcmplt>
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	f040 8095 	bne.w	8010d2e <_dtoa_r+0x6be>
 8010c04:	42a6      	cmp	r6, r4
 8010c06:	f43f af50 	beq.w	8010aaa <_dtoa_r+0x43a>
 8010c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8010c38 <_dtoa_r+0x5c8>)
 8010c10:	2200      	movs	r2, #0
 8010c12:	f7ef fd19 	bl	8000648 <__aeabi_dmul>
 8010c16:	4b08      	ldr	r3, [pc, #32]	@ (8010c38 <_dtoa_r+0x5c8>)
 8010c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c22:	f7ef fd11 	bl	8000648 <__aeabi_dmul>
 8010c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c2a:	e7c4      	b.n	8010bb6 <_dtoa_r+0x546>
 8010c2c:	08013480 	.word	0x08013480
 8010c30:	08013458 	.word	0x08013458
 8010c34:	3ff00000 	.word	0x3ff00000
 8010c38:	40240000 	.word	0x40240000
 8010c3c:	401c0000 	.word	0x401c0000
 8010c40:	40140000 	.word	0x40140000
 8010c44:	3fe00000 	.word	0x3fe00000
 8010c48:	4631      	mov	r1, r6
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f7ef fcfc 	bl	8000648 <__aeabi_dmul>
 8010c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010c54:	9415      	str	r4, [sp, #84]	@ 0x54
 8010c56:	4656      	mov	r6, sl
 8010c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c5c:	f7ef ffa4 	bl	8000ba8 <__aeabi_d2iz>
 8010c60:	4605      	mov	r5, r0
 8010c62:	f7ef fc87 	bl	8000574 <__aeabi_i2d>
 8010c66:	4602      	mov	r2, r0
 8010c68:	460b      	mov	r3, r1
 8010c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c6e:	f7ef fb33 	bl	80002d8 <__aeabi_dsub>
 8010c72:	3530      	adds	r5, #48	@ 0x30
 8010c74:	f806 5b01 	strb.w	r5, [r6], #1
 8010c78:	4602      	mov	r2, r0
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	42a6      	cmp	r6, r4
 8010c7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c82:	f04f 0200 	mov.w	r2, #0
 8010c86:	d124      	bne.n	8010cd2 <_dtoa_r+0x662>
 8010c88:	4bac      	ldr	r3, [pc, #688]	@ (8010f3c <_dtoa_r+0x8cc>)
 8010c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010c8e:	f7ef fb25 	bl	80002dc <__adddf3>
 8010c92:	4602      	mov	r2, r0
 8010c94:	460b      	mov	r3, r1
 8010c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c9a:	f7ef ff65 	bl	8000b68 <__aeabi_dcmpgt>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d145      	bne.n	8010d2e <_dtoa_r+0x6be>
 8010ca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010ca6:	49a5      	ldr	r1, [pc, #660]	@ (8010f3c <_dtoa_r+0x8cc>)
 8010ca8:	2000      	movs	r0, #0
 8010caa:	f7ef fb15 	bl	80002d8 <__aeabi_dsub>
 8010cae:	4602      	mov	r2, r0
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cb6:	f7ef ff39 	bl	8000b2c <__aeabi_dcmplt>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	f43f aef5 	beq.w	8010aaa <_dtoa_r+0x43a>
 8010cc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010cc2:	1e73      	subs	r3, r6, #1
 8010cc4:	9315      	str	r3, [sp, #84]	@ 0x54
 8010cc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cca:	2b30      	cmp	r3, #48	@ 0x30
 8010ccc:	d0f8      	beq.n	8010cc0 <_dtoa_r+0x650>
 8010cce:	9f04      	ldr	r7, [sp, #16]
 8010cd0:	e73e      	b.n	8010b50 <_dtoa_r+0x4e0>
 8010cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8010f40 <_dtoa_r+0x8d0>)
 8010cd4:	f7ef fcb8 	bl	8000648 <__aeabi_dmul>
 8010cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cdc:	e7bc      	b.n	8010c58 <_dtoa_r+0x5e8>
 8010cde:	d10c      	bne.n	8010cfa <_dtoa_r+0x68a>
 8010ce0:	4b98      	ldr	r3, [pc, #608]	@ (8010f44 <_dtoa_r+0x8d4>)
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ce8:	f7ef fcae 	bl	8000648 <__aeabi_dmul>
 8010cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf0:	f7ef ff30 	bl	8000b54 <__aeabi_dcmpge>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	f000 8157 	beq.w	8010fa8 <_dtoa_r+0x938>
 8010cfa:	2400      	movs	r4, #0
 8010cfc:	4625      	mov	r5, r4
 8010cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d00:	43db      	mvns	r3, r3
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	4656      	mov	r6, sl
 8010d06:	2700      	movs	r7, #0
 8010d08:	4621      	mov	r1, r4
 8010d0a:	4658      	mov	r0, fp
 8010d0c:	f001 f84c 	bl	8011da8 <_Bfree>
 8010d10:	2d00      	cmp	r5, #0
 8010d12:	d0dc      	beq.n	8010cce <_dtoa_r+0x65e>
 8010d14:	b12f      	cbz	r7, 8010d22 <_dtoa_r+0x6b2>
 8010d16:	42af      	cmp	r7, r5
 8010d18:	d003      	beq.n	8010d22 <_dtoa_r+0x6b2>
 8010d1a:	4639      	mov	r1, r7
 8010d1c:	4658      	mov	r0, fp
 8010d1e:	f001 f843 	bl	8011da8 <_Bfree>
 8010d22:	4629      	mov	r1, r5
 8010d24:	4658      	mov	r0, fp
 8010d26:	f001 f83f 	bl	8011da8 <_Bfree>
 8010d2a:	e7d0      	b.n	8010cce <_dtoa_r+0x65e>
 8010d2c:	9704      	str	r7, [sp, #16]
 8010d2e:	4633      	mov	r3, r6
 8010d30:	461e      	mov	r6, r3
 8010d32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d36:	2a39      	cmp	r2, #57	@ 0x39
 8010d38:	d107      	bne.n	8010d4a <_dtoa_r+0x6da>
 8010d3a:	459a      	cmp	sl, r3
 8010d3c:	d1f8      	bne.n	8010d30 <_dtoa_r+0x6c0>
 8010d3e:	9a04      	ldr	r2, [sp, #16]
 8010d40:	3201      	adds	r2, #1
 8010d42:	9204      	str	r2, [sp, #16]
 8010d44:	2230      	movs	r2, #48	@ 0x30
 8010d46:	f88a 2000 	strb.w	r2, [sl]
 8010d4a:	781a      	ldrb	r2, [r3, #0]
 8010d4c:	3201      	adds	r2, #1
 8010d4e:	701a      	strb	r2, [r3, #0]
 8010d50:	e7bd      	b.n	8010cce <_dtoa_r+0x65e>
 8010d52:	4b7b      	ldr	r3, [pc, #492]	@ (8010f40 <_dtoa_r+0x8d0>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	f7ef fc77 	bl	8000648 <__aeabi_dmul>
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	4604      	mov	r4, r0
 8010d60:	460d      	mov	r5, r1
 8010d62:	f7ef fed9 	bl	8000b18 <__aeabi_dcmpeq>
 8010d66:	2800      	cmp	r0, #0
 8010d68:	f43f aebb 	beq.w	8010ae2 <_dtoa_r+0x472>
 8010d6c:	e6f0      	b.n	8010b50 <_dtoa_r+0x4e0>
 8010d6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010d70:	2a00      	cmp	r2, #0
 8010d72:	f000 80db 	beq.w	8010f2c <_dtoa_r+0x8bc>
 8010d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d78:	2a01      	cmp	r2, #1
 8010d7a:	f300 80bf 	bgt.w	8010efc <_dtoa_r+0x88c>
 8010d7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010d80:	2a00      	cmp	r2, #0
 8010d82:	f000 80b7 	beq.w	8010ef4 <_dtoa_r+0x884>
 8010d86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010d8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010d8c:	4646      	mov	r6, r8
 8010d8e:	9a08      	ldr	r2, [sp, #32]
 8010d90:	2101      	movs	r1, #1
 8010d92:	441a      	add	r2, r3
 8010d94:	4658      	mov	r0, fp
 8010d96:	4498      	add	r8, r3
 8010d98:	9208      	str	r2, [sp, #32]
 8010d9a:	f001 f903 	bl	8011fa4 <__i2b>
 8010d9e:	4605      	mov	r5, r0
 8010da0:	b15e      	cbz	r6, 8010dba <_dtoa_r+0x74a>
 8010da2:	9b08      	ldr	r3, [sp, #32]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	dd08      	ble.n	8010dba <_dtoa_r+0x74a>
 8010da8:	42b3      	cmp	r3, r6
 8010daa:	9a08      	ldr	r2, [sp, #32]
 8010dac:	bfa8      	it	ge
 8010dae:	4633      	movge	r3, r6
 8010db0:	eba8 0803 	sub.w	r8, r8, r3
 8010db4:	1af6      	subs	r6, r6, r3
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	9308      	str	r3, [sp, #32]
 8010dba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dbc:	b1f3      	cbz	r3, 8010dfc <_dtoa_r+0x78c>
 8010dbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 80b7 	beq.w	8010f34 <_dtoa_r+0x8c4>
 8010dc6:	b18c      	cbz	r4, 8010dec <_dtoa_r+0x77c>
 8010dc8:	4629      	mov	r1, r5
 8010dca:	4622      	mov	r2, r4
 8010dcc:	4658      	mov	r0, fp
 8010dce:	f001 f9a9 	bl	8012124 <__pow5mult>
 8010dd2:	464a      	mov	r2, r9
 8010dd4:	4601      	mov	r1, r0
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	4658      	mov	r0, fp
 8010dda:	f001 f8f9 	bl	8011fd0 <__multiply>
 8010dde:	4649      	mov	r1, r9
 8010de0:	9004      	str	r0, [sp, #16]
 8010de2:	4658      	mov	r0, fp
 8010de4:	f000 ffe0 	bl	8011da8 <_Bfree>
 8010de8:	9b04      	ldr	r3, [sp, #16]
 8010dea:	4699      	mov	r9, r3
 8010dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dee:	1b1a      	subs	r2, r3, r4
 8010df0:	d004      	beq.n	8010dfc <_dtoa_r+0x78c>
 8010df2:	4649      	mov	r1, r9
 8010df4:	4658      	mov	r0, fp
 8010df6:	f001 f995 	bl	8012124 <__pow5mult>
 8010dfa:	4681      	mov	r9, r0
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	4658      	mov	r0, fp
 8010e00:	f001 f8d0 	bl	8011fa4 <__i2b>
 8010e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e06:	4604      	mov	r4, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f000 81cf 	beq.w	80111ac <_dtoa_r+0xb3c>
 8010e0e:	461a      	mov	r2, r3
 8010e10:	4601      	mov	r1, r0
 8010e12:	4658      	mov	r0, fp
 8010e14:	f001 f986 	bl	8012124 <__pow5mult>
 8010e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e1a:	2b01      	cmp	r3, #1
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	f300 8095 	bgt.w	8010f4c <_dtoa_r+0x8dc>
 8010e22:	9b02      	ldr	r3, [sp, #8]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f040 8087 	bne.w	8010f38 <_dtoa_r+0x8c8>
 8010e2a:	9b03      	ldr	r3, [sp, #12]
 8010e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f040 8089 	bne.w	8010f48 <_dtoa_r+0x8d8>
 8010e36:	9b03      	ldr	r3, [sp, #12]
 8010e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e3c:	0d1b      	lsrs	r3, r3, #20
 8010e3e:	051b      	lsls	r3, r3, #20
 8010e40:	b12b      	cbz	r3, 8010e4e <_dtoa_r+0x7de>
 8010e42:	9b08      	ldr	r3, [sp, #32]
 8010e44:	3301      	adds	r3, #1
 8010e46:	9308      	str	r3, [sp, #32]
 8010e48:	f108 0801 	add.w	r8, r8, #1
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f000 81b0 	beq.w	80111b8 <_dtoa_r+0xb48>
 8010e58:	6923      	ldr	r3, [r4, #16]
 8010e5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e5e:	6918      	ldr	r0, [r3, #16]
 8010e60:	f001 f854 	bl	8011f0c <__hi0bits>
 8010e64:	f1c0 0020 	rsb	r0, r0, #32
 8010e68:	9b08      	ldr	r3, [sp, #32]
 8010e6a:	4418      	add	r0, r3
 8010e6c:	f010 001f 	ands.w	r0, r0, #31
 8010e70:	d077      	beq.n	8010f62 <_dtoa_r+0x8f2>
 8010e72:	f1c0 0320 	rsb	r3, r0, #32
 8010e76:	2b04      	cmp	r3, #4
 8010e78:	dd6b      	ble.n	8010f52 <_dtoa_r+0x8e2>
 8010e7a:	9b08      	ldr	r3, [sp, #32]
 8010e7c:	f1c0 001c 	rsb	r0, r0, #28
 8010e80:	4403      	add	r3, r0
 8010e82:	4480      	add	r8, r0
 8010e84:	4406      	add	r6, r0
 8010e86:	9308      	str	r3, [sp, #32]
 8010e88:	f1b8 0f00 	cmp.w	r8, #0
 8010e8c:	dd05      	ble.n	8010e9a <_dtoa_r+0x82a>
 8010e8e:	4649      	mov	r1, r9
 8010e90:	4642      	mov	r2, r8
 8010e92:	4658      	mov	r0, fp
 8010e94:	f001 f9a0 	bl	80121d8 <__lshift>
 8010e98:	4681      	mov	r9, r0
 8010e9a:	9b08      	ldr	r3, [sp, #32]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	dd05      	ble.n	8010eac <_dtoa_r+0x83c>
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	4658      	mov	r0, fp
 8010ea6:	f001 f997 	bl	80121d8 <__lshift>
 8010eaa:	4604      	mov	r4, r0
 8010eac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d059      	beq.n	8010f66 <_dtoa_r+0x8f6>
 8010eb2:	4621      	mov	r1, r4
 8010eb4:	4648      	mov	r0, r9
 8010eb6:	f001 f9fb 	bl	80122b0 <__mcmp>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	da53      	bge.n	8010f66 <_dtoa_r+0x8f6>
 8010ebe:	1e7b      	subs	r3, r7, #1
 8010ec0:	9304      	str	r3, [sp, #16]
 8010ec2:	4649      	mov	r1, r9
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	220a      	movs	r2, #10
 8010ec8:	4658      	mov	r0, fp
 8010eca:	f000 ff8f 	bl	8011dec <__multadd>
 8010ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ed0:	4681      	mov	r9, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f000 8172 	beq.w	80111bc <_dtoa_r+0xb4c>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	4629      	mov	r1, r5
 8010edc:	220a      	movs	r2, #10
 8010ede:	4658      	mov	r0, fp
 8010ee0:	f000 ff84 	bl	8011dec <__multadd>
 8010ee4:	9b00      	ldr	r3, [sp, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	4605      	mov	r5, r0
 8010eea:	dc67      	bgt.n	8010fbc <_dtoa_r+0x94c>
 8010eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eee:	2b02      	cmp	r3, #2
 8010ef0:	dc41      	bgt.n	8010f76 <_dtoa_r+0x906>
 8010ef2:	e063      	b.n	8010fbc <_dtoa_r+0x94c>
 8010ef4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010ef6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010efa:	e746      	b.n	8010d8a <_dtoa_r+0x71a>
 8010efc:	9b07      	ldr	r3, [sp, #28]
 8010efe:	1e5c      	subs	r4, r3, #1
 8010f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f02:	42a3      	cmp	r3, r4
 8010f04:	bfbf      	itttt	lt
 8010f06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010f08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010f0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010f0c:	1ae3      	sublt	r3, r4, r3
 8010f0e:	bfb4      	ite	lt
 8010f10:	18d2      	addlt	r2, r2, r3
 8010f12:	1b1c      	subge	r4, r3, r4
 8010f14:	9b07      	ldr	r3, [sp, #28]
 8010f16:	bfbc      	itt	lt
 8010f18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010f1a:	2400      	movlt	r4, #0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	bfb5      	itete	lt
 8010f20:	eba8 0603 	sublt.w	r6, r8, r3
 8010f24:	9b07      	ldrge	r3, [sp, #28]
 8010f26:	2300      	movlt	r3, #0
 8010f28:	4646      	movge	r6, r8
 8010f2a:	e730      	b.n	8010d8e <_dtoa_r+0x71e>
 8010f2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010f2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010f30:	4646      	mov	r6, r8
 8010f32:	e735      	b.n	8010da0 <_dtoa_r+0x730>
 8010f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f36:	e75c      	b.n	8010df2 <_dtoa_r+0x782>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	e788      	b.n	8010e4e <_dtoa_r+0x7de>
 8010f3c:	3fe00000 	.word	0x3fe00000
 8010f40:	40240000 	.word	0x40240000
 8010f44:	40140000 	.word	0x40140000
 8010f48:	9b02      	ldr	r3, [sp, #8]
 8010f4a:	e780      	b.n	8010e4e <_dtoa_r+0x7de>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f50:	e782      	b.n	8010e58 <_dtoa_r+0x7e8>
 8010f52:	d099      	beq.n	8010e88 <_dtoa_r+0x818>
 8010f54:	9a08      	ldr	r2, [sp, #32]
 8010f56:	331c      	adds	r3, #28
 8010f58:	441a      	add	r2, r3
 8010f5a:	4498      	add	r8, r3
 8010f5c:	441e      	add	r6, r3
 8010f5e:	9208      	str	r2, [sp, #32]
 8010f60:	e792      	b.n	8010e88 <_dtoa_r+0x818>
 8010f62:	4603      	mov	r3, r0
 8010f64:	e7f6      	b.n	8010f54 <_dtoa_r+0x8e4>
 8010f66:	9b07      	ldr	r3, [sp, #28]
 8010f68:	9704      	str	r7, [sp, #16]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dc20      	bgt.n	8010fb0 <_dtoa_r+0x940>
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	dd1e      	ble.n	8010fb4 <_dtoa_r+0x944>
 8010f76:	9b00      	ldr	r3, [sp, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	f47f aec0 	bne.w	8010cfe <_dtoa_r+0x68e>
 8010f7e:	4621      	mov	r1, r4
 8010f80:	2205      	movs	r2, #5
 8010f82:	4658      	mov	r0, fp
 8010f84:	f000 ff32 	bl	8011dec <__multadd>
 8010f88:	4601      	mov	r1, r0
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	4648      	mov	r0, r9
 8010f8e:	f001 f98f 	bl	80122b0 <__mcmp>
 8010f92:	2800      	cmp	r0, #0
 8010f94:	f77f aeb3 	ble.w	8010cfe <_dtoa_r+0x68e>
 8010f98:	4656      	mov	r6, sl
 8010f9a:	2331      	movs	r3, #49	@ 0x31
 8010f9c:	f806 3b01 	strb.w	r3, [r6], #1
 8010fa0:	9b04      	ldr	r3, [sp, #16]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	9304      	str	r3, [sp, #16]
 8010fa6:	e6ae      	b.n	8010d06 <_dtoa_r+0x696>
 8010fa8:	9c07      	ldr	r4, [sp, #28]
 8010faa:	9704      	str	r7, [sp, #16]
 8010fac:	4625      	mov	r5, r4
 8010fae:	e7f3      	b.n	8010f98 <_dtoa_r+0x928>
 8010fb0:	9b07      	ldr	r3, [sp, #28]
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f000 8104 	beq.w	80111c4 <_dtoa_r+0xb54>
 8010fbc:	2e00      	cmp	r6, #0
 8010fbe:	dd05      	ble.n	8010fcc <_dtoa_r+0x95c>
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	4632      	mov	r2, r6
 8010fc4:	4658      	mov	r0, fp
 8010fc6:	f001 f907 	bl	80121d8 <__lshift>
 8010fca:	4605      	mov	r5, r0
 8010fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d05a      	beq.n	8011088 <_dtoa_r+0xa18>
 8010fd2:	6869      	ldr	r1, [r5, #4]
 8010fd4:	4658      	mov	r0, fp
 8010fd6:	f000 fea7 	bl	8011d28 <_Balloc>
 8010fda:	4606      	mov	r6, r0
 8010fdc:	b928      	cbnz	r0, 8010fea <_dtoa_r+0x97a>
 8010fde:	4b84      	ldr	r3, [pc, #528]	@ (80111f0 <_dtoa_r+0xb80>)
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010fe6:	f7ff bb5a 	b.w	801069e <_dtoa_r+0x2e>
 8010fea:	692a      	ldr	r2, [r5, #16]
 8010fec:	3202      	adds	r2, #2
 8010fee:	0092      	lsls	r2, r2, #2
 8010ff0:	f105 010c 	add.w	r1, r5, #12
 8010ff4:	300c      	adds	r0, #12
 8010ff6:	f7ff fa70 	bl	80104da <memcpy>
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	4631      	mov	r1, r6
 8010ffe:	4658      	mov	r0, fp
 8011000:	f001 f8ea 	bl	80121d8 <__lshift>
 8011004:	f10a 0301 	add.w	r3, sl, #1
 8011008:	9307      	str	r3, [sp, #28]
 801100a:	9b00      	ldr	r3, [sp, #0]
 801100c:	4453      	add	r3, sl
 801100e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011010:	9b02      	ldr	r3, [sp, #8]
 8011012:	f003 0301 	and.w	r3, r3, #1
 8011016:	462f      	mov	r7, r5
 8011018:	930a      	str	r3, [sp, #40]	@ 0x28
 801101a:	4605      	mov	r5, r0
 801101c:	9b07      	ldr	r3, [sp, #28]
 801101e:	4621      	mov	r1, r4
 8011020:	3b01      	subs	r3, #1
 8011022:	4648      	mov	r0, r9
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	f7ff fa9b 	bl	8010560 <quorem>
 801102a:	4639      	mov	r1, r7
 801102c:	9002      	str	r0, [sp, #8]
 801102e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011032:	4648      	mov	r0, r9
 8011034:	f001 f93c 	bl	80122b0 <__mcmp>
 8011038:	462a      	mov	r2, r5
 801103a:	9008      	str	r0, [sp, #32]
 801103c:	4621      	mov	r1, r4
 801103e:	4658      	mov	r0, fp
 8011040:	f001 f952 	bl	80122e8 <__mdiff>
 8011044:	68c2      	ldr	r2, [r0, #12]
 8011046:	4606      	mov	r6, r0
 8011048:	bb02      	cbnz	r2, 801108c <_dtoa_r+0xa1c>
 801104a:	4601      	mov	r1, r0
 801104c:	4648      	mov	r0, r9
 801104e:	f001 f92f 	bl	80122b0 <__mcmp>
 8011052:	4602      	mov	r2, r0
 8011054:	4631      	mov	r1, r6
 8011056:	4658      	mov	r0, fp
 8011058:	920e      	str	r2, [sp, #56]	@ 0x38
 801105a:	f000 fea5 	bl	8011da8 <_Bfree>
 801105e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011062:	9e07      	ldr	r6, [sp, #28]
 8011064:	ea43 0102 	orr.w	r1, r3, r2
 8011068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801106a:	4319      	orrs	r1, r3
 801106c:	d110      	bne.n	8011090 <_dtoa_r+0xa20>
 801106e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011072:	d029      	beq.n	80110c8 <_dtoa_r+0xa58>
 8011074:	9b08      	ldr	r3, [sp, #32]
 8011076:	2b00      	cmp	r3, #0
 8011078:	dd02      	ble.n	8011080 <_dtoa_r+0xa10>
 801107a:	9b02      	ldr	r3, [sp, #8]
 801107c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011080:	9b00      	ldr	r3, [sp, #0]
 8011082:	f883 8000 	strb.w	r8, [r3]
 8011086:	e63f      	b.n	8010d08 <_dtoa_r+0x698>
 8011088:	4628      	mov	r0, r5
 801108a:	e7bb      	b.n	8011004 <_dtoa_r+0x994>
 801108c:	2201      	movs	r2, #1
 801108e:	e7e1      	b.n	8011054 <_dtoa_r+0x9e4>
 8011090:	9b08      	ldr	r3, [sp, #32]
 8011092:	2b00      	cmp	r3, #0
 8011094:	db04      	blt.n	80110a0 <_dtoa_r+0xa30>
 8011096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011098:	430b      	orrs	r3, r1
 801109a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801109c:	430b      	orrs	r3, r1
 801109e:	d120      	bne.n	80110e2 <_dtoa_r+0xa72>
 80110a0:	2a00      	cmp	r2, #0
 80110a2:	dded      	ble.n	8011080 <_dtoa_r+0xa10>
 80110a4:	4649      	mov	r1, r9
 80110a6:	2201      	movs	r2, #1
 80110a8:	4658      	mov	r0, fp
 80110aa:	f001 f895 	bl	80121d8 <__lshift>
 80110ae:	4621      	mov	r1, r4
 80110b0:	4681      	mov	r9, r0
 80110b2:	f001 f8fd 	bl	80122b0 <__mcmp>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	dc03      	bgt.n	80110c2 <_dtoa_r+0xa52>
 80110ba:	d1e1      	bne.n	8011080 <_dtoa_r+0xa10>
 80110bc:	f018 0f01 	tst.w	r8, #1
 80110c0:	d0de      	beq.n	8011080 <_dtoa_r+0xa10>
 80110c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80110c6:	d1d8      	bne.n	801107a <_dtoa_r+0xa0a>
 80110c8:	9a00      	ldr	r2, [sp, #0]
 80110ca:	2339      	movs	r3, #57	@ 0x39
 80110cc:	7013      	strb	r3, [r2, #0]
 80110ce:	4633      	mov	r3, r6
 80110d0:	461e      	mov	r6, r3
 80110d2:	3b01      	subs	r3, #1
 80110d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80110d8:	2a39      	cmp	r2, #57	@ 0x39
 80110da:	d052      	beq.n	8011182 <_dtoa_r+0xb12>
 80110dc:	3201      	adds	r2, #1
 80110de:	701a      	strb	r2, [r3, #0]
 80110e0:	e612      	b.n	8010d08 <_dtoa_r+0x698>
 80110e2:	2a00      	cmp	r2, #0
 80110e4:	dd07      	ble.n	80110f6 <_dtoa_r+0xa86>
 80110e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80110ea:	d0ed      	beq.n	80110c8 <_dtoa_r+0xa58>
 80110ec:	9a00      	ldr	r2, [sp, #0]
 80110ee:	f108 0301 	add.w	r3, r8, #1
 80110f2:	7013      	strb	r3, [r2, #0]
 80110f4:	e608      	b.n	8010d08 <_dtoa_r+0x698>
 80110f6:	9b07      	ldr	r3, [sp, #28]
 80110f8:	9a07      	ldr	r2, [sp, #28]
 80110fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80110fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011100:	4293      	cmp	r3, r2
 8011102:	d028      	beq.n	8011156 <_dtoa_r+0xae6>
 8011104:	4649      	mov	r1, r9
 8011106:	2300      	movs	r3, #0
 8011108:	220a      	movs	r2, #10
 801110a:	4658      	mov	r0, fp
 801110c:	f000 fe6e 	bl	8011dec <__multadd>
 8011110:	42af      	cmp	r7, r5
 8011112:	4681      	mov	r9, r0
 8011114:	f04f 0300 	mov.w	r3, #0
 8011118:	f04f 020a 	mov.w	r2, #10
 801111c:	4639      	mov	r1, r7
 801111e:	4658      	mov	r0, fp
 8011120:	d107      	bne.n	8011132 <_dtoa_r+0xac2>
 8011122:	f000 fe63 	bl	8011dec <__multadd>
 8011126:	4607      	mov	r7, r0
 8011128:	4605      	mov	r5, r0
 801112a:	9b07      	ldr	r3, [sp, #28]
 801112c:	3301      	adds	r3, #1
 801112e:	9307      	str	r3, [sp, #28]
 8011130:	e774      	b.n	801101c <_dtoa_r+0x9ac>
 8011132:	f000 fe5b 	bl	8011dec <__multadd>
 8011136:	4629      	mov	r1, r5
 8011138:	4607      	mov	r7, r0
 801113a:	2300      	movs	r3, #0
 801113c:	220a      	movs	r2, #10
 801113e:	4658      	mov	r0, fp
 8011140:	f000 fe54 	bl	8011dec <__multadd>
 8011144:	4605      	mov	r5, r0
 8011146:	e7f0      	b.n	801112a <_dtoa_r+0xaba>
 8011148:	9b00      	ldr	r3, [sp, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	bfcc      	ite	gt
 801114e:	461e      	movgt	r6, r3
 8011150:	2601      	movle	r6, #1
 8011152:	4456      	add	r6, sl
 8011154:	2700      	movs	r7, #0
 8011156:	4649      	mov	r1, r9
 8011158:	2201      	movs	r2, #1
 801115a:	4658      	mov	r0, fp
 801115c:	f001 f83c 	bl	80121d8 <__lshift>
 8011160:	4621      	mov	r1, r4
 8011162:	4681      	mov	r9, r0
 8011164:	f001 f8a4 	bl	80122b0 <__mcmp>
 8011168:	2800      	cmp	r0, #0
 801116a:	dcb0      	bgt.n	80110ce <_dtoa_r+0xa5e>
 801116c:	d102      	bne.n	8011174 <_dtoa_r+0xb04>
 801116e:	f018 0f01 	tst.w	r8, #1
 8011172:	d1ac      	bne.n	80110ce <_dtoa_r+0xa5e>
 8011174:	4633      	mov	r3, r6
 8011176:	461e      	mov	r6, r3
 8011178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801117c:	2a30      	cmp	r2, #48	@ 0x30
 801117e:	d0fa      	beq.n	8011176 <_dtoa_r+0xb06>
 8011180:	e5c2      	b.n	8010d08 <_dtoa_r+0x698>
 8011182:	459a      	cmp	sl, r3
 8011184:	d1a4      	bne.n	80110d0 <_dtoa_r+0xa60>
 8011186:	9b04      	ldr	r3, [sp, #16]
 8011188:	3301      	adds	r3, #1
 801118a:	9304      	str	r3, [sp, #16]
 801118c:	2331      	movs	r3, #49	@ 0x31
 801118e:	f88a 3000 	strb.w	r3, [sl]
 8011192:	e5b9      	b.n	8010d08 <_dtoa_r+0x698>
 8011194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011196:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80111f4 <_dtoa_r+0xb84>
 801119a:	b11b      	cbz	r3, 80111a4 <_dtoa_r+0xb34>
 801119c:	f10a 0308 	add.w	r3, sl, #8
 80111a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80111a2:	6013      	str	r3, [r2, #0]
 80111a4:	4650      	mov	r0, sl
 80111a6:	b019      	add	sp, #100	@ 0x64
 80111a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	f77f ae37 	ble.w	8010e22 <_dtoa_r+0x7b2>
 80111b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80111b8:	2001      	movs	r0, #1
 80111ba:	e655      	b.n	8010e68 <_dtoa_r+0x7f8>
 80111bc:	9b00      	ldr	r3, [sp, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f77f aed6 	ble.w	8010f70 <_dtoa_r+0x900>
 80111c4:	4656      	mov	r6, sl
 80111c6:	4621      	mov	r1, r4
 80111c8:	4648      	mov	r0, r9
 80111ca:	f7ff f9c9 	bl	8010560 <quorem>
 80111ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80111d2:	f806 8b01 	strb.w	r8, [r6], #1
 80111d6:	9b00      	ldr	r3, [sp, #0]
 80111d8:	eba6 020a 	sub.w	r2, r6, sl
 80111dc:	4293      	cmp	r3, r2
 80111de:	ddb3      	ble.n	8011148 <_dtoa_r+0xad8>
 80111e0:	4649      	mov	r1, r9
 80111e2:	2300      	movs	r3, #0
 80111e4:	220a      	movs	r2, #10
 80111e6:	4658      	mov	r0, fp
 80111e8:	f000 fe00 	bl	8011dec <__multadd>
 80111ec:	4681      	mov	r9, r0
 80111ee:	e7ea      	b.n	80111c6 <_dtoa_r+0xb56>
 80111f0:	0801336b 	.word	0x0801336b
 80111f4:	08013306 	.word	0x08013306

080111f8 <_free_r>:
 80111f8:	b538      	push	{r3, r4, r5, lr}
 80111fa:	4605      	mov	r5, r0
 80111fc:	2900      	cmp	r1, #0
 80111fe:	d041      	beq.n	8011284 <_free_r+0x8c>
 8011200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011204:	1f0c      	subs	r4, r1, #4
 8011206:	2b00      	cmp	r3, #0
 8011208:	bfb8      	it	lt
 801120a:	18e4      	addlt	r4, r4, r3
 801120c:	f7fe f84a 	bl	800f2a4 <__malloc_lock>
 8011210:	4a1d      	ldr	r2, [pc, #116]	@ (8011288 <_free_r+0x90>)
 8011212:	6813      	ldr	r3, [r2, #0]
 8011214:	b933      	cbnz	r3, 8011224 <_free_r+0x2c>
 8011216:	6063      	str	r3, [r4, #4]
 8011218:	6014      	str	r4, [r2, #0]
 801121a:	4628      	mov	r0, r5
 801121c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011220:	f7fe b846 	b.w	800f2b0 <__malloc_unlock>
 8011224:	42a3      	cmp	r3, r4
 8011226:	d908      	bls.n	801123a <_free_r+0x42>
 8011228:	6820      	ldr	r0, [r4, #0]
 801122a:	1821      	adds	r1, r4, r0
 801122c:	428b      	cmp	r3, r1
 801122e:	bf01      	itttt	eq
 8011230:	6819      	ldreq	r1, [r3, #0]
 8011232:	685b      	ldreq	r3, [r3, #4]
 8011234:	1809      	addeq	r1, r1, r0
 8011236:	6021      	streq	r1, [r4, #0]
 8011238:	e7ed      	b.n	8011216 <_free_r+0x1e>
 801123a:	461a      	mov	r2, r3
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	b10b      	cbz	r3, 8011244 <_free_r+0x4c>
 8011240:	42a3      	cmp	r3, r4
 8011242:	d9fa      	bls.n	801123a <_free_r+0x42>
 8011244:	6811      	ldr	r1, [r2, #0]
 8011246:	1850      	adds	r0, r2, r1
 8011248:	42a0      	cmp	r0, r4
 801124a:	d10b      	bne.n	8011264 <_free_r+0x6c>
 801124c:	6820      	ldr	r0, [r4, #0]
 801124e:	4401      	add	r1, r0
 8011250:	1850      	adds	r0, r2, r1
 8011252:	4283      	cmp	r3, r0
 8011254:	6011      	str	r1, [r2, #0]
 8011256:	d1e0      	bne.n	801121a <_free_r+0x22>
 8011258:	6818      	ldr	r0, [r3, #0]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	6053      	str	r3, [r2, #4]
 801125e:	4408      	add	r0, r1
 8011260:	6010      	str	r0, [r2, #0]
 8011262:	e7da      	b.n	801121a <_free_r+0x22>
 8011264:	d902      	bls.n	801126c <_free_r+0x74>
 8011266:	230c      	movs	r3, #12
 8011268:	602b      	str	r3, [r5, #0]
 801126a:	e7d6      	b.n	801121a <_free_r+0x22>
 801126c:	6820      	ldr	r0, [r4, #0]
 801126e:	1821      	adds	r1, r4, r0
 8011270:	428b      	cmp	r3, r1
 8011272:	bf04      	itt	eq
 8011274:	6819      	ldreq	r1, [r3, #0]
 8011276:	685b      	ldreq	r3, [r3, #4]
 8011278:	6063      	str	r3, [r4, #4]
 801127a:	bf04      	itt	eq
 801127c:	1809      	addeq	r1, r1, r0
 801127e:	6021      	streq	r1, [r4, #0]
 8011280:	6054      	str	r4, [r2, #4]
 8011282:	e7ca      	b.n	801121a <_free_r+0x22>
 8011284:	bd38      	pop	{r3, r4, r5, pc}
 8011286:	bf00      	nop
 8011288:	200013d4 	.word	0x200013d4

0801128c <rshift>:
 801128c:	6903      	ldr	r3, [r0, #16]
 801128e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011296:	ea4f 1261 	mov.w	r2, r1, asr #5
 801129a:	f100 0414 	add.w	r4, r0, #20
 801129e:	dd45      	ble.n	801132c <rshift+0xa0>
 80112a0:	f011 011f 	ands.w	r1, r1, #31
 80112a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80112a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80112ac:	d10c      	bne.n	80112c8 <rshift+0x3c>
 80112ae:	f100 0710 	add.w	r7, r0, #16
 80112b2:	4629      	mov	r1, r5
 80112b4:	42b1      	cmp	r1, r6
 80112b6:	d334      	bcc.n	8011322 <rshift+0x96>
 80112b8:	1a9b      	subs	r3, r3, r2
 80112ba:	009b      	lsls	r3, r3, #2
 80112bc:	1eea      	subs	r2, r5, #3
 80112be:	4296      	cmp	r6, r2
 80112c0:	bf38      	it	cc
 80112c2:	2300      	movcc	r3, #0
 80112c4:	4423      	add	r3, r4
 80112c6:	e015      	b.n	80112f4 <rshift+0x68>
 80112c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80112cc:	f1c1 0820 	rsb	r8, r1, #32
 80112d0:	40cf      	lsrs	r7, r1
 80112d2:	f105 0e04 	add.w	lr, r5, #4
 80112d6:	46a1      	mov	r9, r4
 80112d8:	4576      	cmp	r6, lr
 80112da:	46f4      	mov	ip, lr
 80112dc:	d815      	bhi.n	801130a <rshift+0x7e>
 80112de:	1a9a      	subs	r2, r3, r2
 80112e0:	0092      	lsls	r2, r2, #2
 80112e2:	3a04      	subs	r2, #4
 80112e4:	3501      	adds	r5, #1
 80112e6:	42ae      	cmp	r6, r5
 80112e8:	bf38      	it	cc
 80112ea:	2200      	movcc	r2, #0
 80112ec:	18a3      	adds	r3, r4, r2
 80112ee:	50a7      	str	r7, [r4, r2]
 80112f0:	b107      	cbz	r7, 80112f4 <rshift+0x68>
 80112f2:	3304      	adds	r3, #4
 80112f4:	1b1a      	subs	r2, r3, r4
 80112f6:	42a3      	cmp	r3, r4
 80112f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80112fc:	bf08      	it	eq
 80112fe:	2300      	moveq	r3, #0
 8011300:	6102      	str	r2, [r0, #16]
 8011302:	bf08      	it	eq
 8011304:	6143      	streq	r3, [r0, #20]
 8011306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801130a:	f8dc c000 	ldr.w	ip, [ip]
 801130e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011312:	ea4c 0707 	orr.w	r7, ip, r7
 8011316:	f849 7b04 	str.w	r7, [r9], #4
 801131a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801131e:	40cf      	lsrs	r7, r1
 8011320:	e7da      	b.n	80112d8 <rshift+0x4c>
 8011322:	f851 cb04 	ldr.w	ip, [r1], #4
 8011326:	f847 cf04 	str.w	ip, [r7, #4]!
 801132a:	e7c3      	b.n	80112b4 <rshift+0x28>
 801132c:	4623      	mov	r3, r4
 801132e:	e7e1      	b.n	80112f4 <rshift+0x68>

08011330 <__hexdig_fun>:
 8011330:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011334:	2b09      	cmp	r3, #9
 8011336:	d802      	bhi.n	801133e <__hexdig_fun+0xe>
 8011338:	3820      	subs	r0, #32
 801133a:	b2c0      	uxtb	r0, r0
 801133c:	4770      	bx	lr
 801133e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011342:	2b05      	cmp	r3, #5
 8011344:	d801      	bhi.n	801134a <__hexdig_fun+0x1a>
 8011346:	3847      	subs	r0, #71	@ 0x47
 8011348:	e7f7      	b.n	801133a <__hexdig_fun+0xa>
 801134a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801134e:	2b05      	cmp	r3, #5
 8011350:	d801      	bhi.n	8011356 <__hexdig_fun+0x26>
 8011352:	3827      	subs	r0, #39	@ 0x27
 8011354:	e7f1      	b.n	801133a <__hexdig_fun+0xa>
 8011356:	2000      	movs	r0, #0
 8011358:	4770      	bx	lr
	...

0801135c <__gethex>:
 801135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011360:	b085      	sub	sp, #20
 8011362:	468a      	mov	sl, r1
 8011364:	9302      	str	r3, [sp, #8]
 8011366:	680b      	ldr	r3, [r1, #0]
 8011368:	9001      	str	r0, [sp, #4]
 801136a:	4690      	mov	r8, r2
 801136c:	1c9c      	adds	r4, r3, #2
 801136e:	46a1      	mov	r9, r4
 8011370:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011374:	2830      	cmp	r0, #48	@ 0x30
 8011376:	d0fa      	beq.n	801136e <__gethex+0x12>
 8011378:	eba9 0303 	sub.w	r3, r9, r3
 801137c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011380:	f7ff ffd6 	bl	8011330 <__hexdig_fun>
 8011384:	4605      	mov	r5, r0
 8011386:	2800      	cmp	r0, #0
 8011388:	d168      	bne.n	801145c <__gethex+0x100>
 801138a:	49a0      	ldr	r1, [pc, #640]	@ (801160c <__gethex+0x2b0>)
 801138c:	2201      	movs	r2, #1
 801138e:	4648      	mov	r0, r9
 8011390:	f7fe ffd5 	bl	801033e <strncmp>
 8011394:	4607      	mov	r7, r0
 8011396:	2800      	cmp	r0, #0
 8011398:	d167      	bne.n	801146a <__gethex+0x10e>
 801139a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801139e:	4626      	mov	r6, r4
 80113a0:	f7ff ffc6 	bl	8011330 <__hexdig_fun>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d062      	beq.n	801146e <__gethex+0x112>
 80113a8:	4623      	mov	r3, r4
 80113aa:	7818      	ldrb	r0, [r3, #0]
 80113ac:	2830      	cmp	r0, #48	@ 0x30
 80113ae:	4699      	mov	r9, r3
 80113b0:	f103 0301 	add.w	r3, r3, #1
 80113b4:	d0f9      	beq.n	80113aa <__gethex+0x4e>
 80113b6:	f7ff ffbb 	bl	8011330 <__hexdig_fun>
 80113ba:	fab0 f580 	clz	r5, r0
 80113be:	096d      	lsrs	r5, r5, #5
 80113c0:	f04f 0b01 	mov.w	fp, #1
 80113c4:	464a      	mov	r2, r9
 80113c6:	4616      	mov	r6, r2
 80113c8:	3201      	adds	r2, #1
 80113ca:	7830      	ldrb	r0, [r6, #0]
 80113cc:	f7ff ffb0 	bl	8011330 <__hexdig_fun>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d1f8      	bne.n	80113c6 <__gethex+0x6a>
 80113d4:	498d      	ldr	r1, [pc, #564]	@ (801160c <__gethex+0x2b0>)
 80113d6:	2201      	movs	r2, #1
 80113d8:	4630      	mov	r0, r6
 80113da:	f7fe ffb0 	bl	801033e <strncmp>
 80113de:	2800      	cmp	r0, #0
 80113e0:	d13f      	bne.n	8011462 <__gethex+0x106>
 80113e2:	b944      	cbnz	r4, 80113f6 <__gethex+0x9a>
 80113e4:	1c74      	adds	r4, r6, #1
 80113e6:	4622      	mov	r2, r4
 80113e8:	4616      	mov	r6, r2
 80113ea:	3201      	adds	r2, #1
 80113ec:	7830      	ldrb	r0, [r6, #0]
 80113ee:	f7ff ff9f 	bl	8011330 <__hexdig_fun>
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d1f8      	bne.n	80113e8 <__gethex+0x8c>
 80113f6:	1ba4      	subs	r4, r4, r6
 80113f8:	00a7      	lsls	r7, r4, #2
 80113fa:	7833      	ldrb	r3, [r6, #0]
 80113fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011400:	2b50      	cmp	r3, #80	@ 0x50
 8011402:	d13e      	bne.n	8011482 <__gethex+0x126>
 8011404:	7873      	ldrb	r3, [r6, #1]
 8011406:	2b2b      	cmp	r3, #43	@ 0x2b
 8011408:	d033      	beq.n	8011472 <__gethex+0x116>
 801140a:	2b2d      	cmp	r3, #45	@ 0x2d
 801140c:	d034      	beq.n	8011478 <__gethex+0x11c>
 801140e:	1c71      	adds	r1, r6, #1
 8011410:	2400      	movs	r4, #0
 8011412:	7808      	ldrb	r0, [r1, #0]
 8011414:	f7ff ff8c 	bl	8011330 <__hexdig_fun>
 8011418:	1e43      	subs	r3, r0, #1
 801141a:	b2db      	uxtb	r3, r3
 801141c:	2b18      	cmp	r3, #24
 801141e:	d830      	bhi.n	8011482 <__gethex+0x126>
 8011420:	f1a0 0210 	sub.w	r2, r0, #16
 8011424:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011428:	f7ff ff82 	bl	8011330 <__hexdig_fun>
 801142c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8011430:	fa5f fc8c 	uxtb.w	ip, ip
 8011434:	f1bc 0f18 	cmp.w	ip, #24
 8011438:	f04f 030a 	mov.w	r3, #10
 801143c:	d91e      	bls.n	801147c <__gethex+0x120>
 801143e:	b104      	cbz	r4, 8011442 <__gethex+0xe6>
 8011440:	4252      	negs	r2, r2
 8011442:	4417      	add	r7, r2
 8011444:	f8ca 1000 	str.w	r1, [sl]
 8011448:	b1ed      	cbz	r5, 8011486 <__gethex+0x12a>
 801144a:	f1bb 0f00 	cmp.w	fp, #0
 801144e:	bf0c      	ite	eq
 8011450:	2506      	moveq	r5, #6
 8011452:	2500      	movne	r5, #0
 8011454:	4628      	mov	r0, r5
 8011456:	b005      	add	sp, #20
 8011458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801145c:	2500      	movs	r5, #0
 801145e:	462c      	mov	r4, r5
 8011460:	e7b0      	b.n	80113c4 <__gethex+0x68>
 8011462:	2c00      	cmp	r4, #0
 8011464:	d1c7      	bne.n	80113f6 <__gethex+0x9a>
 8011466:	4627      	mov	r7, r4
 8011468:	e7c7      	b.n	80113fa <__gethex+0x9e>
 801146a:	464e      	mov	r6, r9
 801146c:	462f      	mov	r7, r5
 801146e:	2501      	movs	r5, #1
 8011470:	e7c3      	b.n	80113fa <__gethex+0x9e>
 8011472:	2400      	movs	r4, #0
 8011474:	1cb1      	adds	r1, r6, #2
 8011476:	e7cc      	b.n	8011412 <__gethex+0xb6>
 8011478:	2401      	movs	r4, #1
 801147a:	e7fb      	b.n	8011474 <__gethex+0x118>
 801147c:	fb03 0002 	mla	r0, r3, r2, r0
 8011480:	e7ce      	b.n	8011420 <__gethex+0xc4>
 8011482:	4631      	mov	r1, r6
 8011484:	e7de      	b.n	8011444 <__gethex+0xe8>
 8011486:	eba6 0309 	sub.w	r3, r6, r9
 801148a:	3b01      	subs	r3, #1
 801148c:	4629      	mov	r1, r5
 801148e:	2b07      	cmp	r3, #7
 8011490:	dc0a      	bgt.n	80114a8 <__gethex+0x14c>
 8011492:	9801      	ldr	r0, [sp, #4]
 8011494:	f000 fc48 	bl	8011d28 <_Balloc>
 8011498:	4604      	mov	r4, r0
 801149a:	b940      	cbnz	r0, 80114ae <__gethex+0x152>
 801149c:	4b5c      	ldr	r3, [pc, #368]	@ (8011610 <__gethex+0x2b4>)
 801149e:	4602      	mov	r2, r0
 80114a0:	21e4      	movs	r1, #228	@ 0xe4
 80114a2:	485c      	ldr	r0, [pc, #368]	@ (8011614 <__gethex+0x2b8>)
 80114a4:	f7ff f83e 	bl	8010524 <__assert_func>
 80114a8:	3101      	adds	r1, #1
 80114aa:	105b      	asrs	r3, r3, #1
 80114ac:	e7ef      	b.n	801148e <__gethex+0x132>
 80114ae:	f100 0a14 	add.w	sl, r0, #20
 80114b2:	2300      	movs	r3, #0
 80114b4:	4655      	mov	r5, sl
 80114b6:	469b      	mov	fp, r3
 80114b8:	45b1      	cmp	r9, r6
 80114ba:	d337      	bcc.n	801152c <__gethex+0x1d0>
 80114bc:	f845 bb04 	str.w	fp, [r5], #4
 80114c0:	eba5 050a 	sub.w	r5, r5, sl
 80114c4:	10ad      	asrs	r5, r5, #2
 80114c6:	6125      	str	r5, [r4, #16]
 80114c8:	4658      	mov	r0, fp
 80114ca:	f000 fd1f 	bl	8011f0c <__hi0bits>
 80114ce:	016d      	lsls	r5, r5, #5
 80114d0:	f8d8 6000 	ldr.w	r6, [r8]
 80114d4:	1a2d      	subs	r5, r5, r0
 80114d6:	42b5      	cmp	r5, r6
 80114d8:	dd54      	ble.n	8011584 <__gethex+0x228>
 80114da:	1bad      	subs	r5, r5, r6
 80114dc:	4629      	mov	r1, r5
 80114de:	4620      	mov	r0, r4
 80114e0:	f001 f8b3 	bl	801264a <__any_on>
 80114e4:	4681      	mov	r9, r0
 80114e6:	b178      	cbz	r0, 8011508 <__gethex+0x1ac>
 80114e8:	1e6b      	subs	r3, r5, #1
 80114ea:	1159      	asrs	r1, r3, #5
 80114ec:	f003 021f 	and.w	r2, r3, #31
 80114f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80114f4:	f04f 0901 	mov.w	r9, #1
 80114f8:	fa09 f202 	lsl.w	r2, r9, r2
 80114fc:	420a      	tst	r2, r1
 80114fe:	d003      	beq.n	8011508 <__gethex+0x1ac>
 8011500:	454b      	cmp	r3, r9
 8011502:	dc36      	bgt.n	8011572 <__gethex+0x216>
 8011504:	f04f 0902 	mov.w	r9, #2
 8011508:	4629      	mov	r1, r5
 801150a:	4620      	mov	r0, r4
 801150c:	f7ff febe 	bl	801128c <rshift>
 8011510:	442f      	add	r7, r5
 8011512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011516:	42bb      	cmp	r3, r7
 8011518:	da42      	bge.n	80115a0 <__gethex+0x244>
 801151a:	9801      	ldr	r0, [sp, #4]
 801151c:	4621      	mov	r1, r4
 801151e:	f000 fc43 	bl	8011da8 <_Bfree>
 8011522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011524:	2300      	movs	r3, #0
 8011526:	6013      	str	r3, [r2, #0]
 8011528:	25a3      	movs	r5, #163	@ 0xa3
 801152a:	e793      	b.n	8011454 <__gethex+0xf8>
 801152c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011530:	2a2e      	cmp	r2, #46	@ 0x2e
 8011532:	d012      	beq.n	801155a <__gethex+0x1fe>
 8011534:	2b20      	cmp	r3, #32
 8011536:	d104      	bne.n	8011542 <__gethex+0x1e6>
 8011538:	f845 bb04 	str.w	fp, [r5], #4
 801153c:	f04f 0b00 	mov.w	fp, #0
 8011540:	465b      	mov	r3, fp
 8011542:	7830      	ldrb	r0, [r6, #0]
 8011544:	9303      	str	r3, [sp, #12]
 8011546:	f7ff fef3 	bl	8011330 <__hexdig_fun>
 801154a:	9b03      	ldr	r3, [sp, #12]
 801154c:	f000 000f 	and.w	r0, r0, #15
 8011550:	4098      	lsls	r0, r3
 8011552:	ea4b 0b00 	orr.w	fp, fp, r0
 8011556:	3304      	adds	r3, #4
 8011558:	e7ae      	b.n	80114b8 <__gethex+0x15c>
 801155a:	45b1      	cmp	r9, r6
 801155c:	d8ea      	bhi.n	8011534 <__gethex+0x1d8>
 801155e:	492b      	ldr	r1, [pc, #172]	@ (801160c <__gethex+0x2b0>)
 8011560:	9303      	str	r3, [sp, #12]
 8011562:	2201      	movs	r2, #1
 8011564:	4630      	mov	r0, r6
 8011566:	f7fe feea 	bl	801033e <strncmp>
 801156a:	9b03      	ldr	r3, [sp, #12]
 801156c:	2800      	cmp	r0, #0
 801156e:	d1e1      	bne.n	8011534 <__gethex+0x1d8>
 8011570:	e7a2      	b.n	80114b8 <__gethex+0x15c>
 8011572:	1ea9      	subs	r1, r5, #2
 8011574:	4620      	mov	r0, r4
 8011576:	f001 f868 	bl	801264a <__any_on>
 801157a:	2800      	cmp	r0, #0
 801157c:	d0c2      	beq.n	8011504 <__gethex+0x1a8>
 801157e:	f04f 0903 	mov.w	r9, #3
 8011582:	e7c1      	b.n	8011508 <__gethex+0x1ac>
 8011584:	da09      	bge.n	801159a <__gethex+0x23e>
 8011586:	1b75      	subs	r5, r6, r5
 8011588:	4621      	mov	r1, r4
 801158a:	9801      	ldr	r0, [sp, #4]
 801158c:	462a      	mov	r2, r5
 801158e:	f000 fe23 	bl	80121d8 <__lshift>
 8011592:	1b7f      	subs	r7, r7, r5
 8011594:	4604      	mov	r4, r0
 8011596:	f100 0a14 	add.w	sl, r0, #20
 801159a:	f04f 0900 	mov.w	r9, #0
 801159e:	e7b8      	b.n	8011512 <__gethex+0x1b6>
 80115a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80115a4:	42bd      	cmp	r5, r7
 80115a6:	dd6f      	ble.n	8011688 <__gethex+0x32c>
 80115a8:	1bed      	subs	r5, r5, r7
 80115aa:	42ae      	cmp	r6, r5
 80115ac:	dc34      	bgt.n	8011618 <__gethex+0x2bc>
 80115ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80115b2:	2b02      	cmp	r3, #2
 80115b4:	d022      	beq.n	80115fc <__gethex+0x2a0>
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d024      	beq.n	8011604 <__gethex+0x2a8>
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d115      	bne.n	80115ea <__gethex+0x28e>
 80115be:	42ae      	cmp	r6, r5
 80115c0:	d113      	bne.n	80115ea <__gethex+0x28e>
 80115c2:	2e01      	cmp	r6, #1
 80115c4:	d10b      	bne.n	80115de <__gethex+0x282>
 80115c6:	9a02      	ldr	r2, [sp, #8]
 80115c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115cc:	6013      	str	r3, [r2, #0]
 80115ce:	2301      	movs	r3, #1
 80115d0:	6123      	str	r3, [r4, #16]
 80115d2:	f8ca 3000 	str.w	r3, [sl]
 80115d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115d8:	2562      	movs	r5, #98	@ 0x62
 80115da:	601c      	str	r4, [r3, #0]
 80115dc:	e73a      	b.n	8011454 <__gethex+0xf8>
 80115de:	1e71      	subs	r1, r6, #1
 80115e0:	4620      	mov	r0, r4
 80115e2:	f001 f832 	bl	801264a <__any_on>
 80115e6:	2800      	cmp	r0, #0
 80115e8:	d1ed      	bne.n	80115c6 <__gethex+0x26a>
 80115ea:	9801      	ldr	r0, [sp, #4]
 80115ec:	4621      	mov	r1, r4
 80115ee:	f000 fbdb 	bl	8011da8 <_Bfree>
 80115f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115f4:	2300      	movs	r3, #0
 80115f6:	6013      	str	r3, [r2, #0]
 80115f8:	2550      	movs	r5, #80	@ 0x50
 80115fa:	e72b      	b.n	8011454 <__gethex+0xf8>
 80115fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1f3      	bne.n	80115ea <__gethex+0x28e>
 8011602:	e7e0      	b.n	80115c6 <__gethex+0x26a>
 8011604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1dd      	bne.n	80115c6 <__gethex+0x26a>
 801160a:	e7ee      	b.n	80115ea <__gethex+0x28e>
 801160c:	080130f9 	.word	0x080130f9
 8011610:	0801336b 	.word	0x0801336b
 8011614:	0801337c 	.word	0x0801337c
 8011618:	1e6f      	subs	r7, r5, #1
 801161a:	f1b9 0f00 	cmp.w	r9, #0
 801161e:	d130      	bne.n	8011682 <__gethex+0x326>
 8011620:	b127      	cbz	r7, 801162c <__gethex+0x2d0>
 8011622:	4639      	mov	r1, r7
 8011624:	4620      	mov	r0, r4
 8011626:	f001 f810 	bl	801264a <__any_on>
 801162a:	4681      	mov	r9, r0
 801162c:	117a      	asrs	r2, r7, #5
 801162e:	2301      	movs	r3, #1
 8011630:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011634:	f007 071f 	and.w	r7, r7, #31
 8011638:	40bb      	lsls	r3, r7
 801163a:	4213      	tst	r3, r2
 801163c:	4629      	mov	r1, r5
 801163e:	4620      	mov	r0, r4
 8011640:	bf18      	it	ne
 8011642:	f049 0902 	orrne.w	r9, r9, #2
 8011646:	f7ff fe21 	bl	801128c <rshift>
 801164a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801164e:	1b76      	subs	r6, r6, r5
 8011650:	2502      	movs	r5, #2
 8011652:	f1b9 0f00 	cmp.w	r9, #0
 8011656:	d047      	beq.n	80116e8 <__gethex+0x38c>
 8011658:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801165c:	2b02      	cmp	r3, #2
 801165e:	d015      	beq.n	801168c <__gethex+0x330>
 8011660:	2b03      	cmp	r3, #3
 8011662:	d017      	beq.n	8011694 <__gethex+0x338>
 8011664:	2b01      	cmp	r3, #1
 8011666:	d109      	bne.n	801167c <__gethex+0x320>
 8011668:	f019 0f02 	tst.w	r9, #2
 801166c:	d006      	beq.n	801167c <__gethex+0x320>
 801166e:	f8da 3000 	ldr.w	r3, [sl]
 8011672:	ea49 0903 	orr.w	r9, r9, r3
 8011676:	f019 0f01 	tst.w	r9, #1
 801167a:	d10e      	bne.n	801169a <__gethex+0x33e>
 801167c:	f045 0510 	orr.w	r5, r5, #16
 8011680:	e032      	b.n	80116e8 <__gethex+0x38c>
 8011682:	f04f 0901 	mov.w	r9, #1
 8011686:	e7d1      	b.n	801162c <__gethex+0x2d0>
 8011688:	2501      	movs	r5, #1
 801168a:	e7e2      	b.n	8011652 <__gethex+0x2f6>
 801168c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801168e:	f1c3 0301 	rsb	r3, r3, #1
 8011692:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011696:	2b00      	cmp	r3, #0
 8011698:	d0f0      	beq.n	801167c <__gethex+0x320>
 801169a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801169e:	f104 0314 	add.w	r3, r4, #20
 80116a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80116a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80116aa:	f04f 0c00 	mov.w	ip, #0
 80116ae:	4618      	mov	r0, r3
 80116b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80116b8:	d01b      	beq.n	80116f2 <__gethex+0x396>
 80116ba:	3201      	adds	r2, #1
 80116bc:	6002      	str	r2, [r0, #0]
 80116be:	2d02      	cmp	r5, #2
 80116c0:	f104 0314 	add.w	r3, r4, #20
 80116c4:	d13c      	bne.n	8011740 <__gethex+0x3e4>
 80116c6:	f8d8 2000 	ldr.w	r2, [r8]
 80116ca:	3a01      	subs	r2, #1
 80116cc:	42b2      	cmp	r2, r6
 80116ce:	d109      	bne.n	80116e4 <__gethex+0x388>
 80116d0:	1171      	asrs	r1, r6, #5
 80116d2:	2201      	movs	r2, #1
 80116d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80116d8:	f006 061f 	and.w	r6, r6, #31
 80116dc:	fa02 f606 	lsl.w	r6, r2, r6
 80116e0:	421e      	tst	r6, r3
 80116e2:	d13a      	bne.n	801175a <__gethex+0x3fe>
 80116e4:	f045 0520 	orr.w	r5, r5, #32
 80116e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116ea:	601c      	str	r4, [r3, #0]
 80116ec:	9b02      	ldr	r3, [sp, #8]
 80116ee:	601f      	str	r7, [r3, #0]
 80116f0:	e6b0      	b.n	8011454 <__gethex+0xf8>
 80116f2:	4299      	cmp	r1, r3
 80116f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80116f8:	d8d9      	bhi.n	80116ae <__gethex+0x352>
 80116fa:	68a3      	ldr	r3, [r4, #8]
 80116fc:	459b      	cmp	fp, r3
 80116fe:	db17      	blt.n	8011730 <__gethex+0x3d4>
 8011700:	6861      	ldr	r1, [r4, #4]
 8011702:	9801      	ldr	r0, [sp, #4]
 8011704:	3101      	adds	r1, #1
 8011706:	f000 fb0f 	bl	8011d28 <_Balloc>
 801170a:	4681      	mov	r9, r0
 801170c:	b918      	cbnz	r0, 8011716 <__gethex+0x3ba>
 801170e:	4b1a      	ldr	r3, [pc, #104]	@ (8011778 <__gethex+0x41c>)
 8011710:	4602      	mov	r2, r0
 8011712:	2184      	movs	r1, #132	@ 0x84
 8011714:	e6c5      	b.n	80114a2 <__gethex+0x146>
 8011716:	6922      	ldr	r2, [r4, #16]
 8011718:	3202      	adds	r2, #2
 801171a:	f104 010c 	add.w	r1, r4, #12
 801171e:	0092      	lsls	r2, r2, #2
 8011720:	300c      	adds	r0, #12
 8011722:	f7fe feda 	bl	80104da <memcpy>
 8011726:	4621      	mov	r1, r4
 8011728:	9801      	ldr	r0, [sp, #4]
 801172a:	f000 fb3d 	bl	8011da8 <_Bfree>
 801172e:	464c      	mov	r4, r9
 8011730:	6923      	ldr	r3, [r4, #16]
 8011732:	1c5a      	adds	r2, r3, #1
 8011734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011738:	6122      	str	r2, [r4, #16]
 801173a:	2201      	movs	r2, #1
 801173c:	615a      	str	r2, [r3, #20]
 801173e:	e7be      	b.n	80116be <__gethex+0x362>
 8011740:	6922      	ldr	r2, [r4, #16]
 8011742:	455a      	cmp	r2, fp
 8011744:	dd0b      	ble.n	801175e <__gethex+0x402>
 8011746:	2101      	movs	r1, #1
 8011748:	4620      	mov	r0, r4
 801174a:	f7ff fd9f 	bl	801128c <rshift>
 801174e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011752:	3701      	adds	r7, #1
 8011754:	42bb      	cmp	r3, r7
 8011756:	f6ff aee0 	blt.w	801151a <__gethex+0x1be>
 801175a:	2501      	movs	r5, #1
 801175c:	e7c2      	b.n	80116e4 <__gethex+0x388>
 801175e:	f016 061f 	ands.w	r6, r6, #31
 8011762:	d0fa      	beq.n	801175a <__gethex+0x3fe>
 8011764:	4453      	add	r3, sl
 8011766:	f1c6 0620 	rsb	r6, r6, #32
 801176a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801176e:	f000 fbcd 	bl	8011f0c <__hi0bits>
 8011772:	42b0      	cmp	r0, r6
 8011774:	dbe7      	blt.n	8011746 <__gethex+0x3ea>
 8011776:	e7f0      	b.n	801175a <__gethex+0x3fe>
 8011778:	0801336b 	.word	0x0801336b

0801177c <L_shift>:
 801177c:	f1c2 0208 	rsb	r2, r2, #8
 8011780:	0092      	lsls	r2, r2, #2
 8011782:	b570      	push	{r4, r5, r6, lr}
 8011784:	f1c2 0620 	rsb	r6, r2, #32
 8011788:	6843      	ldr	r3, [r0, #4]
 801178a:	6804      	ldr	r4, [r0, #0]
 801178c:	fa03 f506 	lsl.w	r5, r3, r6
 8011790:	432c      	orrs	r4, r5
 8011792:	40d3      	lsrs	r3, r2
 8011794:	6004      	str	r4, [r0, #0]
 8011796:	f840 3f04 	str.w	r3, [r0, #4]!
 801179a:	4288      	cmp	r0, r1
 801179c:	d3f4      	bcc.n	8011788 <L_shift+0xc>
 801179e:	bd70      	pop	{r4, r5, r6, pc}

080117a0 <__match>:
 80117a0:	b530      	push	{r4, r5, lr}
 80117a2:	6803      	ldr	r3, [r0, #0]
 80117a4:	3301      	adds	r3, #1
 80117a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117aa:	b914      	cbnz	r4, 80117b2 <__match+0x12>
 80117ac:	6003      	str	r3, [r0, #0]
 80117ae:	2001      	movs	r0, #1
 80117b0:	bd30      	pop	{r4, r5, pc}
 80117b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80117ba:	2d19      	cmp	r5, #25
 80117bc:	bf98      	it	ls
 80117be:	3220      	addls	r2, #32
 80117c0:	42a2      	cmp	r2, r4
 80117c2:	d0f0      	beq.n	80117a6 <__match+0x6>
 80117c4:	2000      	movs	r0, #0
 80117c6:	e7f3      	b.n	80117b0 <__match+0x10>

080117c8 <__hexnan>:
 80117c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117cc:	680b      	ldr	r3, [r1, #0]
 80117ce:	6801      	ldr	r1, [r0, #0]
 80117d0:	115e      	asrs	r6, r3, #5
 80117d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80117d6:	f013 031f 	ands.w	r3, r3, #31
 80117da:	b087      	sub	sp, #28
 80117dc:	bf18      	it	ne
 80117de:	3604      	addne	r6, #4
 80117e0:	2500      	movs	r5, #0
 80117e2:	1f37      	subs	r7, r6, #4
 80117e4:	4682      	mov	sl, r0
 80117e6:	4690      	mov	r8, r2
 80117e8:	9301      	str	r3, [sp, #4]
 80117ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80117ee:	46b9      	mov	r9, r7
 80117f0:	463c      	mov	r4, r7
 80117f2:	9502      	str	r5, [sp, #8]
 80117f4:	46ab      	mov	fp, r5
 80117f6:	784a      	ldrb	r2, [r1, #1]
 80117f8:	1c4b      	adds	r3, r1, #1
 80117fa:	9303      	str	r3, [sp, #12]
 80117fc:	b342      	cbz	r2, 8011850 <__hexnan+0x88>
 80117fe:	4610      	mov	r0, r2
 8011800:	9105      	str	r1, [sp, #20]
 8011802:	9204      	str	r2, [sp, #16]
 8011804:	f7ff fd94 	bl	8011330 <__hexdig_fun>
 8011808:	2800      	cmp	r0, #0
 801180a:	d151      	bne.n	80118b0 <__hexnan+0xe8>
 801180c:	9a04      	ldr	r2, [sp, #16]
 801180e:	9905      	ldr	r1, [sp, #20]
 8011810:	2a20      	cmp	r2, #32
 8011812:	d818      	bhi.n	8011846 <__hexnan+0x7e>
 8011814:	9b02      	ldr	r3, [sp, #8]
 8011816:	459b      	cmp	fp, r3
 8011818:	dd13      	ble.n	8011842 <__hexnan+0x7a>
 801181a:	454c      	cmp	r4, r9
 801181c:	d206      	bcs.n	801182c <__hexnan+0x64>
 801181e:	2d07      	cmp	r5, #7
 8011820:	dc04      	bgt.n	801182c <__hexnan+0x64>
 8011822:	462a      	mov	r2, r5
 8011824:	4649      	mov	r1, r9
 8011826:	4620      	mov	r0, r4
 8011828:	f7ff ffa8 	bl	801177c <L_shift>
 801182c:	4544      	cmp	r4, r8
 801182e:	d952      	bls.n	80118d6 <__hexnan+0x10e>
 8011830:	2300      	movs	r3, #0
 8011832:	f1a4 0904 	sub.w	r9, r4, #4
 8011836:	f844 3c04 	str.w	r3, [r4, #-4]
 801183a:	f8cd b008 	str.w	fp, [sp, #8]
 801183e:	464c      	mov	r4, r9
 8011840:	461d      	mov	r5, r3
 8011842:	9903      	ldr	r1, [sp, #12]
 8011844:	e7d7      	b.n	80117f6 <__hexnan+0x2e>
 8011846:	2a29      	cmp	r2, #41	@ 0x29
 8011848:	d157      	bne.n	80118fa <__hexnan+0x132>
 801184a:	3102      	adds	r1, #2
 801184c:	f8ca 1000 	str.w	r1, [sl]
 8011850:	f1bb 0f00 	cmp.w	fp, #0
 8011854:	d051      	beq.n	80118fa <__hexnan+0x132>
 8011856:	454c      	cmp	r4, r9
 8011858:	d206      	bcs.n	8011868 <__hexnan+0xa0>
 801185a:	2d07      	cmp	r5, #7
 801185c:	dc04      	bgt.n	8011868 <__hexnan+0xa0>
 801185e:	462a      	mov	r2, r5
 8011860:	4649      	mov	r1, r9
 8011862:	4620      	mov	r0, r4
 8011864:	f7ff ff8a 	bl	801177c <L_shift>
 8011868:	4544      	cmp	r4, r8
 801186a:	d936      	bls.n	80118da <__hexnan+0x112>
 801186c:	f1a8 0204 	sub.w	r2, r8, #4
 8011870:	4623      	mov	r3, r4
 8011872:	f853 1b04 	ldr.w	r1, [r3], #4
 8011876:	f842 1f04 	str.w	r1, [r2, #4]!
 801187a:	429f      	cmp	r7, r3
 801187c:	d2f9      	bcs.n	8011872 <__hexnan+0xaa>
 801187e:	1b3b      	subs	r3, r7, r4
 8011880:	f023 0303 	bic.w	r3, r3, #3
 8011884:	3304      	adds	r3, #4
 8011886:	3401      	adds	r4, #1
 8011888:	3e03      	subs	r6, #3
 801188a:	42b4      	cmp	r4, r6
 801188c:	bf88      	it	hi
 801188e:	2304      	movhi	r3, #4
 8011890:	4443      	add	r3, r8
 8011892:	2200      	movs	r2, #0
 8011894:	f843 2b04 	str.w	r2, [r3], #4
 8011898:	429f      	cmp	r7, r3
 801189a:	d2fb      	bcs.n	8011894 <__hexnan+0xcc>
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	b91b      	cbnz	r3, 80118a8 <__hexnan+0xe0>
 80118a0:	4547      	cmp	r7, r8
 80118a2:	d128      	bne.n	80118f6 <__hexnan+0x12e>
 80118a4:	2301      	movs	r3, #1
 80118a6:	603b      	str	r3, [r7, #0]
 80118a8:	2005      	movs	r0, #5
 80118aa:	b007      	add	sp, #28
 80118ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b0:	3501      	adds	r5, #1
 80118b2:	2d08      	cmp	r5, #8
 80118b4:	f10b 0b01 	add.w	fp, fp, #1
 80118b8:	dd06      	ble.n	80118c8 <__hexnan+0x100>
 80118ba:	4544      	cmp	r4, r8
 80118bc:	d9c1      	bls.n	8011842 <__hexnan+0x7a>
 80118be:	2300      	movs	r3, #0
 80118c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80118c4:	2501      	movs	r5, #1
 80118c6:	3c04      	subs	r4, #4
 80118c8:	6822      	ldr	r2, [r4, #0]
 80118ca:	f000 000f 	and.w	r0, r0, #15
 80118ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80118d2:	6020      	str	r0, [r4, #0]
 80118d4:	e7b5      	b.n	8011842 <__hexnan+0x7a>
 80118d6:	2508      	movs	r5, #8
 80118d8:	e7b3      	b.n	8011842 <__hexnan+0x7a>
 80118da:	9b01      	ldr	r3, [sp, #4]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d0dd      	beq.n	801189c <__hexnan+0xd4>
 80118e0:	f1c3 0320 	rsb	r3, r3, #32
 80118e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80118e8:	40da      	lsrs	r2, r3
 80118ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80118ee:	4013      	ands	r3, r2
 80118f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80118f4:	e7d2      	b.n	801189c <__hexnan+0xd4>
 80118f6:	3f04      	subs	r7, #4
 80118f8:	e7d0      	b.n	801189c <__hexnan+0xd4>
 80118fa:	2004      	movs	r0, #4
 80118fc:	e7d5      	b.n	80118aa <__hexnan+0xe2>

080118fe <__ssputs_r>:
 80118fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011902:	688e      	ldr	r6, [r1, #8]
 8011904:	461f      	mov	r7, r3
 8011906:	42be      	cmp	r6, r7
 8011908:	680b      	ldr	r3, [r1, #0]
 801190a:	4682      	mov	sl, r0
 801190c:	460c      	mov	r4, r1
 801190e:	4690      	mov	r8, r2
 8011910:	d82d      	bhi.n	801196e <__ssputs_r+0x70>
 8011912:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011916:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801191a:	d026      	beq.n	801196a <__ssputs_r+0x6c>
 801191c:	6965      	ldr	r5, [r4, #20]
 801191e:	6909      	ldr	r1, [r1, #16]
 8011920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011924:	eba3 0901 	sub.w	r9, r3, r1
 8011928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801192c:	1c7b      	adds	r3, r7, #1
 801192e:	444b      	add	r3, r9
 8011930:	106d      	asrs	r5, r5, #1
 8011932:	429d      	cmp	r5, r3
 8011934:	bf38      	it	cc
 8011936:	461d      	movcc	r5, r3
 8011938:	0553      	lsls	r3, r2, #21
 801193a:	d527      	bpl.n	801198c <__ssputs_r+0x8e>
 801193c:	4629      	mov	r1, r5
 801193e:	f7fd f85b 	bl	800e9f8 <_malloc_r>
 8011942:	4606      	mov	r6, r0
 8011944:	b360      	cbz	r0, 80119a0 <__ssputs_r+0xa2>
 8011946:	6921      	ldr	r1, [r4, #16]
 8011948:	464a      	mov	r2, r9
 801194a:	f7fe fdc6 	bl	80104da <memcpy>
 801194e:	89a3      	ldrh	r3, [r4, #12]
 8011950:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011958:	81a3      	strh	r3, [r4, #12]
 801195a:	6126      	str	r6, [r4, #16]
 801195c:	6165      	str	r5, [r4, #20]
 801195e:	444e      	add	r6, r9
 8011960:	eba5 0509 	sub.w	r5, r5, r9
 8011964:	6026      	str	r6, [r4, #0]
 8011966:	60a5      	str	r5, [r4, #8]
 8011968:	463e      	mov	r6, r7
 801196a:	42be      	cmp	r6, r7
 801196c:	d900      	bls.n	8011970 <__ssputs_r+0x72>
 801196e:	463e      	mov	r6, r7
 8011970:	6820      	ldr	r0, [r4, #0]
 8011972:	4632      	mov	r2, r6
 8011974:	4641      	mov	r1, r8
 8011976:	f001 f810 	bl	801299a <memmove>
 801197a:	68a3      	ldr	r3, [r4, #8]
 801197c:	1b9b      	subs	r3, r3, r6
 801197e:	60a3      	str	r3, [r4, #8]
 8011980:	6823      	ldr	r3, [r4, #0]
 8011982:	4433      	add	r3, r6
 8011984:	6023      	str	r3, [r4, #0]
 8011986:	2000      	movs	r0, #0
 8011988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801198c:	462a      	mov	r2, r5
 801198e:	f000 fed3 	bl	8012738 <_realloc_r>
 8011992:	4606      	mov	r6, r0
 8011994:	2800      	cmp	r0, #0
 8011996:	d1e0      	bne.n	801195a <__ssputs_r+0x5c>
 8011998:	6921      	ldr	r1, [r4, #16]
 801199a:	4650      	mov	r0, sl
 801199c:	f7ff fc2c 	bl	80111f8 <_free_r>
 80119a0:	230c      	movs	r3, #12
 80119a2:	f8ca 3000 	str.w	r3, [sl]
 80119a6:	89a3      	ldrh	r3, [r4, #12]
 80119a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119ac:	81a3      	strh	r3, [r4, #12]
 80119ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80119b2:	e7e9      	b.n	8011988 <__ssputs_r+0x8a>

080119b4 <_svfiprintf_r>:
 80119b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b8:	4698      	mov	r8, r3
 80119ba:	898b      	ldrh	r3, [r1, #12]
 80119bc:	061b      	lsls	r3, r3, #24
 80119be:	b09d      	sub	sp, #116	@ 0x74
 80119c0:	4607      	mov	r7, r0
 80119c2:	460d      	mov	r5, r1
 80119c4:	4614      	mov	r4, r2
 80119c6:	d510      	bpl.n	80119ea <_svfiprintf_r+0x36>
 80119c8:	690b      	ldr	r3, [r1, #16]
 80119ca:	b973      	cbnz	r3, 80119ea <_svfiprintf_r+0x36>
 80119cc:	2140      	movs	r1, #64	@ 0x40
 80119ce:	f7fd f813 	bl	800e9f8 <_malloc_r>
 80119d2:	6028      	str	r0, [r5, #0]
 80119d4:	6128      	str	r0, [r5, #16]
 80119d6:	b930      	cbnz	r0, 80119e6 <_svfiprintf_r+0x32>
 80119d8:	230c      	movs	r3, #12
 80119da:	603b      	str	r3, [r7, #0]
 80119dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80119e0:	b01d      	add	sp, #116	@ 0x74
 80119e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e6:	2340      	movs	r3, #64	@ 0x40
 80119e8:	616b      	str	r3, [r5, #20]
 80119ea:	2300      	movs	r3, #0
 80119ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80119ee:	2320      	movs	r3, #32
 80119f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80119f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80119f8:	2330      	movs	r3, #48	@ 0x30
 80119fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011b98 <_svfiprintf_r+0x1e4>
 80119fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a02:	f04f 0901 	mov.w	r9, #1
 8011a06:	4623      	mov	r3, r4
 8011a08:	469a      	mov	sl, r3
 8011a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a0e:	b10a      	cbz	r2, 8011a14 <_svfiprintf_r+0x60>
 8011a10:	2a25      	cmp	r2, #37	@ 0x25
 8011a12:	d1f9      	bne.n	8011a08 <_svfiprintf_r+0x54>
 8011a14:	ebba 0b04 	subs.w	fp, sl, r4
 8011a18:	d00b      	beq.n	8011a32 <_svfiprintf_r+0x7e>
 8011a1a:	465b      	mov	r3, fp
 8011a1c:	4622      	mov	r2, r4
 8011a1e:	4629      	mov	r1, r5
 8011a20:	4638      	mov	r0, r7
 8011a22:	f7ff ff6c 	bl	80118fe <__ssputs_r>
 8011a26:	3001      	adds	r0, #1
 8011a28:	f000 80a7 	beq.w	8011b7a <_svfiprintf_r+0x1c6>
 8011a2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a2e:	445a      	add	r2, fp
 8011a30:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a32:	f89a 3000 	ldrb.w	r3, [sl]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	f000 809f 	beq.w	8011b7a <_svfiprintf_r+0x1c6>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a46:	f10a 0a01 	add.w	sl, sl, #1
 8011a4a:	9304      	str	r3, [sp, #16]
 8011a4c:	9307      	str	r3, [sp, #28]
 8011a4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a52:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a54:	4654      	mov	r4, sl
 8011a56:	2205      	movs	r2, #5
 8011a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a5c:	484e      	ldr	r0, [pc, #312]	@ (8011b98 <_svfiprintf_r+0x1e4>)
 8011a5e:	f7ee fbdf 	bl	8000220 <memchr>
 8011a62:	9a04      	ldr	r2, [sp, #16]
 8011a64:	b9d8      	cbnz	r0, 8011a9e <_svfiprintf_r+0xea>
 8011a66:	06d0      	lsls	r0, r2, #27
 8011a68:	bf44      	itt	mi
 8011a6a:	2320      	movmi	r3, #32
 8011a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a70:	0711      	lsls	r1, r2, #28
 8011a72:	bf44      	itt	mi
 8011a74:	232b      	movmi	r3, #43	@ 0x2b
 8011a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a80:	d015      	beq.n	8011aae <_svfiprintf_r+0xfa>
 8011a82:	9a07      	ldr	r2, [sp, #28]
 8011a84:	4654      	mov	r4, sl
 8011a86:	2000      	movs	r0, #0
 8011a88:	f04f 0c0a 	mov.w	ip, #10
 8011a8c:	4621      	mov	r1, r4
 8011a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a92:	3b30      	subs	r3, #48	@ 0x30
 8011a94:	2b09      	cmp	r3, #9
 8011a96:	d94b      	bls.n	8011b30 <_svfiprintf_r+0x17c>
 8011a98:	b1b0      	cbz	r0, 8011ac8 <_svfiprintf_r+0x114>
 8011a9a:	9207      	str	r2, [sp, #28]
 8011a9c:	e014      	b.n	8011ac8 <_svfiprintf_r+0x114>
 8011a9e:	eba0 0308 	sub.w	r3, r0, r8
 8011aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	9304      	str	r3, [sp, #16]
 8011aaa:	46a2      	mov	sl, r4
 8011aac:	e7d2      	b.n	8011a54 <_svfiprintf_r+0xa0>
 8011aae:	9b03      	ldr	r3, [sp, #12]
 8011ab0:	1d19      	adds	r1, r3, #4
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	9103      	str	r1, [sp, #12]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	bfbb      	ittet	lt
 8011aba:	425b      	neglt	r3, r3
 8011abc:	f042 0202 	orrlt.w	r2, r2, #2
 8011ac0:	9307      	strge	r3, [sp, #28]
 8011ac2:	9307      	strlt	r3, [sp, #28]
 8011ac4:	bfb8      	it	lt
 8011ac6:	9204      	strlt	r2, [sp, #16]
 8011ac8:	7823      	ldrb	r3, [r4, #0]
 8011aca:	2b2e      	cmp	r3, #46	@ 0x2e
 8011acc:	d10a      	bne.n	8011ae4 <_svfiprintf_r+0x130>
 8011ace:	7863      	ldrb	r3, [r4, #1]
 8011ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ad2:	d132      	bne.n	8011b3a <_svfiprintf_r+0x186>
 8011ad4:	9b03      	ldr	r3, [sp, #12]
 8011ad6:	1d1a      	adds	r2, r3, #4
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	9203      	str	r2, [sp, #12]
 8011adc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ae0:	3402      	adds	r4, #2
 8011ae2:	9305      	str	r3, [sp, #20]
 8011ae4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011ba8 <_svfiprintf_r+0x1f4>
 8011ae8:	7821      	ldrb	r1, [r4, #0]
 8011aea:	2203      	movs	r2, #3
 8011aec:	4650      	mov	r0, sl
 8011aee:	f7ee fb97 	bl	8000220 <memchr>
 8011af2:	b138      	cbz	r0, 8011b04 <_svfiprintf_r+0x150>
 8011af4:	9b04      	ldr	r3, [sp, #16]
 8011af6:	eba0 000a 	sub.w	r0, r0, sl
 8011afa:	2240      	movs	r2, #64	@ 0x40
 8011afc:	4082      	lsls	r2, r0
 8011afe:	4313      	orrs	r3, r2
 8011b00:	3401      	adds	r4, #1
 8011b02:	9304      	str	r3, [sp, #16]
 8011b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b08:	4824      	ldr	r0, [pc, #144]	@ (8011b9c <_svfiprintf_r+0x1e8>)
 8011b0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b0e:	2206      	movs	r2, #6
 8011b10:	f7ee fb86 	bl	8000220 <memchr>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d036      	beq.n	8011b86 <_svfiprintf_r+0x1d2>
 8011b18:	4b21      	ldr	r3, [pc, #132]	@ (8011ba0 <_svfiprintf_r+0x1ec>)
 8011b1a:	bb1b      	cbnz	r3, 8011b64 <_svfiprintf_r+0x1b0>
 8011b1c:	9b03      	ldr	r3, [sp, #12]
 8011b1e:	3307      	adds	r3, #7
 8011b20:	f023 0307 	bic.w	r3, r3, #7
 8011b24:	3308      	adds	r3, #8
 8011b26:	9303      	str	r3, [sp, #12]
 8011b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b2a:	4433      	add	r3, r6
 8011b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b2e:	e76a      	b.n	8011a06 <_svfiprintf_r+0x52>
 8011b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b34:	460c      	mov	r4, r1
 8011b36:	2001      	movs	r0, #1
 8011b38:	e7a8      	b.n	8011a8c <_svfiprintf_r+0xd8>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	3401      	adds	r4, #1
 8011b3e:	9305      	str	r3, [sp, #20]
 8011b40:	4619      	mov	r1, r3
 8011b42:	f04f 0c0a 	mov.w	ip, #10
 8011b46:	4620      	mov	r0, r4
 8011b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b4c:	3a30      	subs	r2, #48	@ 0x30
 8011b4e:	2a09      	cmp	r2, #9
 8011b50:	d903      	bls.n	8011b5a <_svfiprintf_r+0x1a6>
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d0c6      	beq.n	8011ae4 <_svfiprintf_r+0x130>
 8011b56:	9105      	str	r1, [sp, #20]
 8011b58:	e7c4      	b.n	8011ae4 <_svfiprintf_r+0x130>
 8011b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b5e:	4604      	mov	r4, r0
 8011b60:	2301      	movs	r3, #1
 8011b62:	e7f0      	b.n	8011b46 <_svfiprintf_r+0x192>
 8011b64:	ab03      	add	r3, sp, #12
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	462a      	mov	r2, r5
 8011b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8011ba4 <_svfiprintf_r+0x1f0>)
 8011b6c:	a904      	add	r1, sp, #16
 8011b6e:	4638      	mov	r0, r7
 8011b70:	f7fc fce6 	bl	800e540 <_printf_float>
 8011b74:	1c42      	adds	r2, r0, #1
 8011b76:	4606      	mov	r6, r0
 8011b78:	d1d6      	bne.n	8011b28 <_svfiprintf_r+0x174>
 8011b7a:	89ab      	ldrh	r3, [r5, #12]
 8011b7c:	065b      	lsls	r3, r3, #25
 8011b7e:	f53f af2d 	bmi.w	80119dc <_svfiprintf_r+0x28>
 8011b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b84:	e72c      	b.n	80119e0 <_svfiprintf_r+0x2c>
 8011b86:	ab03      	add	r3, sp, #12
 8011b88:	9300      	str	r3, [sp, #0]
 8011b8a:	462a      	mov	r2, r5
 8011b8c:	4b05      	ldr	r3, [pc, #20]	@ (8011ba4 <_svfiprintf_r+0x1f0>)
 8011b8e:	a904      	add	r1, sp, #16
 8011b90:	4638      	mov	r0, r7
 8011b92:	f7fd f81f 	bl	800ebd4 <_printf_i>
 8011b96:	e7ed      	b.n	8011b74 <_svfiprintf_r+0x1c0>
 8011b98:	080133dc 	.word	0x080133dc
 8011b9c:	080133e6 	.word	0x080133e6
 8011ba0:	0800e541 	.word	0x0800e541
 8011ba4:	080118ff 	.word	0x080118ff
 8011ba8:	080133e2 	.word	0x080133e2

08011bac <__ascii_mbtowc>:
 8011bac:	b082      	sub	sp, #8
 8011bae:	b901      	cbnz	r1, 8011bb2 <__ascii_mbtowc+0x6>
 8011bb0:	a901      	add	r1, sp, #4
 8011bb2:	b142      	cbz	r2, 8011bc6 <__ascii_mbtowc+0x1a>
 8011bb4:	b14b      	cbz	r3, 8011bca <__ascii_mbtowc+0x1e>
 8011bb6:	7813      	ldrb	r3, [r2, #0]
 8011bb8:	600b      	str	r3, [r1, #0]
 8011bba:	7812      	ldrb	r2, [r2, #0]
 8011bbc:	1e10      	subs	r0, r2, #0
 8011bbe:	bf18      	it	ne
 8011bc0:	2001      	movne	r0, #1
 8011bc2:	b002      	add	sp, #8
 8011bc4:	4770      	bx	lr
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	e7fb      	b.n	8011bc2 <__ascii_mbtowc+0x16>
 8011bca:	f06f 0001 	mvn.w	r0, #1
 8011bce:	e7f8      	b.n	8011bc2 <__ascii_mbtowc+0x16>

08011bd0 <__sflush_r>:
 8011bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd8:	0716      	lsls	r6, r2, #28
 8011bda:	4605      	mov	r5, r0
 8011bdc:	460c      	mov	r4, r1
 8011bde:	d454      	bmi.n	8011c8a <__sflush_r+0xba>
 8011be0:	684b      	ldr	r3, [r1, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	dc02      	bgt.n	8011bec <__sflush_r+0x1c>
 8011be6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	dd48      	ble.n	8011c7e <__sflush_r+0xae>
 8011bec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bee:	2e00      	cmp	r6, #0
 8011bf0:	d045      	beq.n	8011c7e <__sflush_r+0xae>
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011bf8:	682f      	ldr	r7, [r5, #0]
 8011bfa:	6a21      	ldr	r1, [r4, #32]
 8011bfc:	602b      	str	r3, [r5, #0]
 8011bfe:	d030      	beq.n	8011c62 <__sflush_r+0x92>
 8011c00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c02:	89a3      	ldrh	r3, [r4, #12]
 8011c04:	0759      	lsls	r1, r3, #29
 8011c06:	d505      	bpl.n	8011c14 <__sflush_r+0x44>
 8011c08:	6863      	ldr	r3, [r4, #4]
 8011c0a:	1ad2      	subs	r2, r2, r3
 8011c0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011c0e:	b10b      	cbz	r3, 8011c14 <__sflush_r+0x44>
 8011c10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c12:	1ad2      	subs	r2, r2, r3
 8011c14:	2300      	movs	r3, #0
 8011c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c18:	6a21      	ldr	r1, [r4, #32]
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	47b0      	blx	r6
 8011c1e:	1c43      	adds	r3, r0, #1
 8011c20:	89a3      	ldrh	r3, [r4, #12]
 8011c22:	d106      	bne.n	8011c32 <__sflush_r+0x62>
 8011c24:	6829      	ldr	r1, [r5, #0]
 8011c26:	291d      	cmp	r1, #29
 8011c28:	d82b      	bhi.n	8011c82 <__sflush_r+0xb2>
 8011c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8011cd4 <__sflush_r+0x104>)
 8011c2c:	410a      	asrs	r2, r1
 8011c2e:	07d6      	lsls	r6, r2, #31
 8011c30:	d427      	bmi.n	8011c82 <__sflush_r+0xb2>
 8011c32:	2200      	movs	r2, #0
 8011c34:	6062      	str	r2, [r4, #4]
 8011c36:	04d9      	lsls	r1, r3, #19
 8011c38:	6922      	ldr	r2, [r4, #16]
 8011c3a:	6022      	str	r2, [r4, #0]
 8011c3c:	d504      	bpl.n	8011c48 <__sflush_r+0x78>
 8011c3e:	1c42      	adds	r2, r0, #1
 8011c40:	d101      	bne.n	8011c46 <__sflush_r+0x76>
 8011c42:	682b      	ldr	r3, [r5, #0]
 8011c44:	b903      	cbnz	r3, 8011c48 <__sflush_r+0x78>
 8011c46:	6560      	str	r0, [r4, #84]	@ 0x54
 8011c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c4a:	602f      	str	r7, [r5, #0]
 8011c4c:	b1b9      	cbz	r1, 8011c7e <__sflush_r+0xae>
 8011c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c52:	4299      	cmp	r1, r3
 8011c54:	d002      	beq.n	8011c5c <__sflush_r+0x8c>
 8011c56:	4628      	mov	r0, r5
 8011c58:	f7ff face 	bl	80111f8 <_free_r>
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c60:	e00d      	b.n	8011c7e <__sflush_r+0xae>
 8011c62:	2301      	movs	r3, #1
 8011c64:	4628      	mov	r0, r5
 8011c66:	47b0      	blx	r6
 8011c68:	4602      	mov	r2, r0
 8011c6a:	1c50      	adds	r0, r2, #1
 8011c6c:	d1c9      	bne.n	8011c02 <__sflush_r+0x32>
 8011c6e:	682b      	ldr	r3, [r5, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d0c6      	beq.n	8011c02 <__sflush_r+0x32>
 8011c74:	2b1d      	cmp	r3, #29
 8011c76:	d001      	beq.n	8011c7c <__sflush_r+0xac>
 8011c78:	2b16      	cmp	r3, #22
 8011c7a:	d11e      	bne.n	8011cba <__sflush_r+0xea>
 8011c7c:	602f      	str	r7, [r5, #0]
 8011c7e:	2000      	movs	r0, #0
 8011c80:	e022      	b.n	8011cc8 <__sflush_r+0xf8>
 8011c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c86:	b21b      	sxth	r3, r3
 8011c88:	e01b      	b.n	8011cc2 <__sflush_r+0xf2>
 8011c8a:	690f      	ldr	r7, [r1, #16]
 8011c8c:	2f00      	cmp	r7, #0
 8011c8e:	d0f6      	beq.n	8011c7e <__sflush_r+0xae>
 8011c90:	0793      	lsls	r3, r2, #30
 8011c92:	680e      	ldr	r6, [r1, #0]
 8011c94:	bf08      	it	eq
 8011c96:	694b      	ldreq	r3, [r1, #20]
 8011c98:	600f      	str	r7, [r1, #0]
 8011c9a:	bf18      	it	ne
 8011c9c:	2300      	movne	r3, #0
 8011c9e:	eba6 0807 	sub.w	r8, r6, r7
 8011ca2:	608b      	str	r3, [r1, #8]
 8011ca4:	f1b8 0f00 	cmp.w	r8, #0
 8011ca8:	dde9      	ble.n	8011c7e <__sflush_r+0xae>
 8011caa:	6a21      	ldr	r1, [r4, #32]
 8011cac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011cae:	4643      	mov	r3, r8
 8011cb0:	463a      	mov	r2, r7
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	47b0      	blx	r6
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	dc08      	bgt.n	8011ccc <__sflush_r+0xfc>
 8011cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cc2:	81a3      	strh	r3, [r4, #12]
 8011cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ccc:	4407      	add	r7, r0
 8011cce:	eba8 0800 	sub.w	r8, r8, r0
 8011cd2:	e7e7      	b.n	8011ca4 <__sflush_r+0xd4>
 8011cd4:	dfbffffe 	.word	0xdfbffffe

08011cd8 <_fflush_r>:
 8011cd8:	b538      	push	{r3, r4, r5, lr}
 8011cda:	690b      	ldr	r3, [r1, #16]
 8011cdc:	4605      	mov	r5, r0
 8011cde:	460c      	mov	r4, r1
 8011ce0:	b913      	cbnz	r3, 8011ce8 <_fflush_r+0x10>
 8011ce2:	2500      	movs	r5, #0
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	b118      	cbz	r0, 8011cf2 <_fflush_r+0x1a>
 8011cea:	6a03      	ldr	r3, [r0, #32]
 8011cec:	b90b      	cbnz	r3, 8011cf2 <_fflush_r+0x1a>
 8011cee:	f7fd fb91 	bl	800f414 <__sinit>
 8011cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d0f3      	beq.n	8011ce2 <_fflush_r+0xa>
 8011cfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011cfc:	07d0      	lsls	r0, r2, #31
 8011cfe:	d404      	bmi.n	8011d0a <_fflush_r+0x32>
 8011d00:	0599      	lsls	r1, r3, #22
 8011d02:	d402      	bmi.n	8011d0a <_fflush_r+0x32>
 8011d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d06:	f7fe fbe6 	bl	80104d6 <__retarget_lock_acquire_recursive>
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	f7ff ff5f 	bl	8011bd0 <__sflush_r>
 8011d12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011d14:	07da      	lsls	r2, r3, #31
 8011d16:	4605      	mov	r5, r0
 8011d18:	d4e4      	bmi.n	8011ce4 <_fflush_r+0xc>
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	059b      	lsls	r3, r3, #22
 8011d1e:	d4e1      	bmi.n	8011ce4 <_fflush_r+0xc>
 8011d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d22:	f7fe fbd9 	bl	80104d8 <__retarget_lock_release_recursive>
 8011d26:	e7dd      	b.n	8011ce4 <_fflush_r+0xc>

08011d28 <_Balloc>:
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	69c6      	ldr	r6, [r0, #28]
 8011d2c:	4604      	mov	r4, r0
 8011d2e:	460d      	mov	r5, r1
 8011d30:	b976      	cbnz	r6, 8011d50 <_Balloc+0x28>
 8011d32:	2010      	movs	r0, #16
 8011d34:	f7fc fe2e 	bl	800e994 <malloc>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	61e0      	str	r0, [r4, #28]
 8011d3c:	b920      	cbnz	r0, 8011d48 <_Balloc+0x20>
 8011d3e:	4b18      	ldr	r3, [pc, #96]	@ (8011da0 <_Balloc+0x78>)
 8011d40:	4818      	ldr	r0, [pc, #96]	@ (8011da4 <_Balloc+0x7c>)
 8011d42:	216b      	movs	r1, #107	@ 0x6b
 8011d44:	f7fe fbee 	bl	8010524 <__assert_func>
 8011d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d4c:	6006      	str	r6, [r0, #0]
 8011d4e:	60c6      	str	r6, [r0, #12]
 8011d50:	69e6      	ldr	r6, [r4, #28]
 8011d52:	68f3      	ldr	r3, [r6, #12]
 8011d54:	b183      	cbz	r3, 8011d78 <_Balloc+0x50>
 8011d56:	69e3      	ldr	r3, [r4, #28]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d5e:	b9b8      	cbnz	r0, 8011d90 <_Balloc+0x68>
 8011d60:	2101      	movs	r1, #1
 8011d62:	fa01 f605 	lsl.w	r6, r1, r5
 8011d66:	1d72      	adds	r2, r6, #5
 8011d68:	0092      	lsls	r2, r2, #2
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f000 fe9f 	bl	8012aae <_calloc_r>
 8011d70:	b160      	cbz	r0, 8011d8c <_Balloc+0x64>
 8011d72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d76:	e00e      	b.n	8011d96 <_Balloc+0x6e>
 8011d78:	2221      	movs	r2, #33	@ 0x21
 8011d7a:	2104      	movs	r1, #4
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f000 fe96 	bl	8012aae <_calloc_r>
 8011d82:	69e3      	ldr	r3, [r4, #28]
 8011d84:	60f0      	str	r0, [r6, #12]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1e4      	bne.n	8011d56 <_Balloc+0x2e>
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	bd70      	pop	{r4, r5, r6, pc}
 8011d90:	6802      	ldr	r2, [r0, #0]
 8011d92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d96:	2300      	movs	r3, #0
 8011d98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d9c:	e7f7      	b.n	8011d8e <_Balloc+0x66>
 8011d9e:	bf00      	nop
 8011da0:	08013150 	.word	0x08013150
 8011da4:	080133ed 	.word	0x080133ed

08011da8 <_Bfree>:
 8011da8:	b570      	push	{r4, r5, r6, lr}
 8011daa:	69c6      	ldr	r6, [r0, #28]
 8011dac:	4605      	mov	r5, r0
 8011dae:	460c      	mov	r4, r1
 8011db0:	b976      	cbnz	r6, 8011dd0 <_Bfree+0x28>
 8011db2:	2010      	movs	r0, #16
 8011db4:	f7fc fdee 	bl	800e994 <malloc>
 8011db8:	4602      	mov	r2, r0
 8011dba:	61e8      	str	r0, [r5, #28]
 8011dbc:	b920      	cbnz	r0, 8011dc8 <_Bfree+0x20>
 8011dbe:	4b09      	ldr	r3, [pc, #36]	@ (8011de4 <_Bfree+0x3c>)
 8011dc0:	4809      	ldr	r0, [pc, #36]	@ (8011de8 <_Bfree+0x40>)
 8011dc2:	218f      	movs	r1, #143	@ 0x8f
 8011dc4:	f7fe fbae 	bl	8010524 <__assert_func>
 8011dc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011dcc:	6006      	str	r6, [r0, #0]
 8011dce:	60c6      	str	r6, [r0, #12]
 8011dd0:	b13c      	cbz	r4, 8011de2 <_Bfree+0x3a>
 8011dd2:	69eb      	ldr	r3, [r5, #28]
 8011dd4:	6862      	ldr	r2, [r4, #4]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ddc:	6021      	str	r1, [r4, #0]
 8011dde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011de2:	bd70      	pop	{r4, r5, r6, pc}
 8011de4:	08013150 	.word	0x08013150
 8011de8:	080133ed 	.word	0x080133ed

08011dec <__multadd>:
 8011dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df0:	690d      	ldr	r5, [r1, #16]
 8011df2:	4607      	mov	r7, r0
 8011df4:	460c      	mov	r4, r1
 8011df6:	461e      	mov	r6, r3
 8011df8:	f101 0c14 	add.w	ip, r1, #20
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	f8dc 3000 	ldr.w	r3, [ip]
 8011e02:	b299      	uxth	r1, r3
 8011e04:	fb02 6101 	mla	r1, r2, r1, r6
 8011e08:	0c1e      	lsrs	r6, r3, #16
 8011e0a:	0c0b      	lsrs	r3, r1, #16
 8011e0c:	fb02 3306 	mla	r3, r2, r6, r3
 8011e10:	b289      	uxth	r1, r1
 8011e12:	3001      	adds	r0, #1
 8011e14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011e18:	4285      	cmp	r5, r0
 8011e1a:	f84c 1b04 	str.w	r1, [ip], #4
 8011e1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011e22:	dcec      	bgt.n	8011dfe <__multadd+0x12>
 8011e24:	b30e      	cbz	r6, 8011e6a <__multadd+0x7e>
 8011e26:	68a3      	ldr	r3, [r4, #8]
 8011e28:	42ab      	cmp	r3, r5
 8011e2a:	dc19      	bgt.n	8011e60 <__multadd+0x74>
 8011e2c:	6861      	ldr	r1, [r4, #4]
 8011e2e:	4638      	mov	r0, r7
 8011e30:	3101      	adds	r1, #1
 8011e32:	f7ff ff79 	bl	8011d28 <_Balloc>
 8011e36:	4680      	mov	r8, r0
 8011e38:	b928      	cbnz	r0, 8011e46 <__multadd+0x5a>
 8011e3a:	4602      	mov	r2, r0
 8011e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8011e70 <__multadd+0x84>)
 8011e3e:	480d      	ldr	r0, [pc, #52]	@ (8011e74 <__multadd+0x88>)
 8011e40:	21ba      	movs	r1, #186	@ 0xba
 8011e42:	f7fe fb6f 	bl	8010524 <__assert_func>
 8011e46:	6922      	ldr	r2, [r4, #16]
 8011e48:	3202      	adds	r2, #2
 8011e4a:	f104 010c 	add.w	r1, r4, #12
 8011e4e:	0092      	lsls	r2, r2, #2
 8011e50:	300c      	adds	r0, #12
 8011e52:	f7fe fb42 	bl	80104da <memcpy>
 8011e56:	4621      	mov	r1, r4
 8011e58:	4638      	mov	r0, r7
 8011e5a:	f7ff ffa5 	bl	8011da8 <_Bfree>
 8011e5e:	4644      	mov	r4, r8
 8011e60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e64:	3501      	adds	r5, #1
 8011e66:	615e      	str	r6, [r3, #20]
 8011e68:	6125      	str	r5, [r4, #16]
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e70:	0801336b 	.word	0x0801336b
 8011e74:	080133ed 	.word	0x080133ed

08011e78 <__s2b>:
 8011e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e7c:	460c      	mov	r4, r1
 8011e7e:	4615      	mov	r5, r2
 8011e80:	461f      	mov	r7, r3
 8011e82:	2209      	movs	r2, #9
 8011e84:	3308      	adds	r3, #8
 8011e86:	4606      	mov	r6, r0
 8011e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	2201      	movs	r2, #1
 8011e90:	429a      	cmp	r2, r3
 8011e92:	db09      	blt.n	8011ea8 <__s2b+0x30>
 8011e94:	4630      	mov	r0, r6
 8011e96:	f7ff ff47 	bl	8011d28 <_Balloc>
 8011e9a:	b940      	cbnz	r0, 8011eae <__s2b+0x36>
 8011e9c:	4602      	mov	r2, r0
 8011e9e:	4b19      	ldr	r3, [pc, #100]	@ (8011f04 <__s2b+0x8c>)
 8011ea0:	4819      	ldr	r0, [pc, #100]	@ (8011f08 <__s2b+0x90>)
 8011ea2:	21d3      	movs	r1, #211	@ 0xd3
 8011ea4:	f7fe fb3e 	bl	8010524 <__assert_func>
 8011ea8:	0052      	lsls	r2, r2, #1
 8011eaa:	3101      	adds	r1, #1
 8011eac:	e7f0      	b.n	8011e90 <__s2b+0x18>
 8011eae:	9b08      	ldr	r3, [sp, #32]
 8011eb0:	6143      	str	r3, [r0, #20]
 8011eb2:	2d09      	cmp	r5, #9
 8011eb4:	f04f 0301 	mov.w	r3, #1
 8011eb8:	6103      	str	r3, [r0, #16]
 8011eba:	dd16      	ble.n	8011eea <__s2b+0x72>
 8011ebc:	f104 0909 	add.w	r9, r4, #9
 8011ec0:	46c8      	mov	r8, r9
 8011ec2:	442c      	add	r4, r5
 8011ec4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011ec8:	4601      	mov	r1, r0
 8011eca:	3b30      	subs	r3, #48	@ 0x30
 8011ecc:	220a      	movs	r2, #10
 8011ece:	4630      	mov	r0, r6
 8011ed0:	f7ff ff8c 	bl	8011dec <__multadd>
 8011ed4:	45a0      	cmp	r8, r4
 8011ed6:	d1f5      	bne.n	8011ec4 <__s2b+0x4c>
 8011ed8:	f1a5 0408 	sub.w	r4, r5, #8
 8011edc:	444c      	add	r4, r9
 8011ede:	1b2d      	subs	r5, r5, r4
 8011ee0:	1963      	adds	r3, r4, r5
 8011ee2:	42bb      	cmp	r3, r7
 8011ee4:	db04      	blt.n	8011ef0 <__s2b+0x78>
 8011ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eea:	340a      	adds	r4, #10
 8011eec:	2509      	movs	r5, #9
 8011eee:	e7f6      	b.n	8011ede <__s2b+0x66>
 8011ef0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ef4:	4601      	mov	r1, r0
 8011ef6:	3b30      	subs	r3, #48	@ 0x30
 8011ef8:	220a      	movs	r2, #10
 8011efa:	4630      	mov	r0, r6
 8011efc:	f7ff ff76 	bl	8011dec <__multadd>
 8011f00:	e7ee      	b.n	8011ee0 <__s2b+0x68>
 8011f02:	bf00      	nop
 8011f04:	0801336b 	.word	0x0801336b
 8011f08:	080133ed 	.word	0x080133ed

08011f0c <__hi0bits>:
 8011f0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011f10:	4603      	mov	r3, r0
 8011f12:	bf36      	itet	cc
 8011f14:	0403      	lslcc	r3, r0, #16
 8011f16:	2000      	movcs	r0, #0
 8011f18:	2010      	movcc	r0, #16
 8011f1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011f1e:	bf3c      	itt	cc
 8011f20:	021b      	lslcc	r3, r3, #8
 8011f22:	3008      	addcc	r0, #8
 8011f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011f28:	bf3c      	itt	cc
 8011f2a:	011b      	lslcc	r3, r3, #4
 8011f2c:	3004      	addcc	r0, #4
 8011f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f32:	bf3c      	itt	cc
 8011f34:	009b      	lslcc	r3, r3, #2
 8011f36:	3002      	addcc	r0, #2
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	db05      	blt.n	8011f48 <__hi0bits+0x3c>
 8011f3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011f40:	f100 0001 	add.w	r0, r0, #1
 8011f44:	bf08      	it	eq
 8011f46:	2020      	moveq	r0, #32
 8011f48:	4770      	bx	lr

08011f4a <__lo0bits>:
 8011f4a:	6803      	ldr	r3, [r0, #0]
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	f013 0007 	ands.w	r0, r3, #7
 8011f52:	d00b      	beq.n	8011f6c <__lo0bits+0x22>
 8011f54:	07d9      	lsls	r1, r3, #31
 8011f56:	d421      	bmi.n	8011f9c <__lo0bits+0x52>
 8011f58:	0798      	lsls	r0, r3, #30
 8011f5a:	bf49      	itett	mi
 8011f5c:	085b      	lsrmi	r3, r3, #1
 8011f5e:	089b      	lsrpl	r3, r3, #2
 8011f60:	2001      	movmi	r0, #1
 8011f62:	6013      	strmi	r3, [r2, #0]
 8011f64:	bf5c      	itt	pl
 8011f66:	6013      	strpl	r3, [r2, #0]
 8011f68:	2002      	movpl	r0, #2
 8011f6a:	4770      	bx	lr
 8011f6c:	b299      	uxth	r1, r3
 8011f6e:	b909      	cbnz	r1, 8011f74 <__lo0bits+0x2a>
 8011f70:	0c1b      	lsrs	r3, r3, #16
 8011f72:	2010      	movs	r0, #16
 8011f74:	b2d9      	uxtb	r1, r3
 8011f76:	b909      	cbnz	r1, 8011f7c <__lo0bits+0x32>
 8011f78:	3008      	adds	r0, #8
 8011f7a:	0a1b      	lsrs	r3, r3, #8
 8011f7c:	0719      	lsls	r1, r3, #28
 8011f7e:	bf04      	itt	eq
 8011f80:	091b      	lsreq	r3, r3, #4
 8011f82:	3004      	addeq	r0, #4
 8011f84:	0799      	lsls	r1, r3, #30
 8011f86:	bf04      	itt	eq
 8011f88:	089b      	lsreq	r3, r3, #2
 8011f8a:	3002      	addeq	r0, #2
 8011f8c:	07d9      	lsls	r1, r3, #31
 8011f8e:	d403      	bmi.n	8011f98 <__lo0bits+0x4e>
 8011f90:	085b      	lsrs	r3, r3, #1
 8011f92:	f100 0001 	add.w	r0, r0, #1
 8011f96:	d003      	beq.n	8011fa0 <__lo0bits+0x56>
 8011f98:	6013      	str	r3, [r2, #0]
 8011f9a:	4770      	bx	lr
 8011f9c:	2000      	movs	r0, #0
 8011f9e:	4770      	bx	lr
 8011fa0:	2020      	movs	r0, #32
 8011fa2:	4770      	bx	lr

08011fa4 <__i2b>:
 8011fa4:	b510      	push	{r4, lr}
 8011fa6:	460c      	mov	r4, r1
 8011fa8:	2101      	movs	r1, #1
 8011faa:	f7ff febd 	bl	8011d28 <_Balloc>
 8011fae:	4602      	mov	r2, r0
 8011fb0:	b928      	cbnz	r0, 8011fbe <__i2b+0x1a>
 8011fb2:	4b05      	ldr	r3, [pc, #20]	@ (8011fc8 <__i2b+0x24>)
 8011fb4:	4805      	ldr	r0, [pc, #20]	@ (8011fcc <__i2b+0x28>)
 8011fb6:	f240 1145 	movw	r1, #325	@ 0x145
 8011fba:	f7fe fab3 	bl	8010524 <__assert_func>
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	6144      	str	r4, [r0, #20]
 8011fc2:	6103      	str	r3, [r0, #16]
 8011fc4:	bd10      	pop	{r4, pc}
 8011fc6:	bf00      	nop
 8011fc8:	0801336b 	.word	0x0801336b
 8011fcc:	080133ed 	.word	0x080133ed

08011fd0 <__multiply>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	4614      	mov	r4, r2
 8011fd6:	690a      	ldr	r2, [r1, #16]
 8011fd8:	6923      	ldr	r3, [r4, #16]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	bfa8      	it	ge
 8011fde:	4623      	movge	r3, r4
 8011fe0:	460f      	mov	r7, r1
 8011fe2:	bfa4      	itt	ge
 8011fe4:	460c      	movge	r4, r1
 8011fe6:	461f      	movge	r7, r3
 8011fe8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011fec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011ff0:	68a3      	ldr	r3, [r4, #8]
 8011ff2:	6861      	ldr	r1, [r4, #4]
 8011ff4:	eb0a 0609 	add.w	r6, sl, r9
 8011ff8:	42b3      	cmp	r3, r6
 8011ffa:	b085      	sub	sp, #20
 8011ffc:	bfb8      	it	lt
 8011ffe:	3101      	addlt	r1, #1
 8012000:	f7ff fe92 	bl	8011d28 <_Balloc>
 8012004:	b930      	cbnz	r0, 8012014 <__multiply+0x44>
 8012006:	4602      	mov	r2, r0
 8012008:	4b44      	ldr	r3, [pc, #272]	@ (801211c <__multiply+0x14c>)
 801200a:	4845      	ldr	r0, [pc, #276]	@ (8012120 <__multiply+0x150>)
 801200c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012010:	f7fe fa88 	bl	8010524 <__assert_func>
 8012014:	f100 0514 	add.w	r5, r0, #20
 8012018:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801201c:	462b      	mov	r3, r5
 801201e:	2200      	movs	r2, #0
 8012020:	4543      	cmp	r3, r8
 8012022:	d321      	bcc.n	8012068 <__multiply+0x98>
 8012024:	f107 0114 	add.w	r1, r7, #20
 8012028:	f104 0214 	add.w	r2, r4, #20
 801202c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012030:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012034:	9302      	str	r3, [sp, #8]
 8012036:	1b13      	subs	r3, r2, r4
 8012038:	3b15      	subs	r3, #21
 801203a:	f023 0303 	bic.w	r3, r3, #3
 801203e:	3304      	adds	r3, #4
 8012040:	f104 0715 	add.w	r7, r4, #21
 8012044:	42ba      	cmp	r2, r7
 8012046:	bf38      	it	cc
 8012048:	2304      	movcc	r3, #4
 801204a:	9301      	str	r3, [sp, #4]
 801204c:	9b02      	ldr	r3, [sp, #8]
 801204e:	9103      	str	r1, [sp, #12]
 8012050:	428b      	cmp	r3, r1
 8012052:	d80c      	bhi.n	801206e <__multiply+0x9e>
 8012054:	2e00      	cmp	r6, #0
 8012056:	dd03      	ble.n	8012060 <__multiply+0x90>
 8012058:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801205c:	2b00      	cmp	r3, #0
 801205e:	d05b      	beq.n	8012118 <__multiply+0x148>
 8012060:	6106      	str	r6, [r0, #16]
 8012062:	b005      	add	sp, #20
 8012064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012068:	f843 2b04 	str.w	r2, [r3], #4
 801206c:	e7d8      	b.n	8012020 <__multiply+0x50>
 801206e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012072:	f1ba 0f00 	cmp.w	sl, #0
 8012076:	d024      	beq.n	80120c2 <__multiply+0xf2>
 8012078:	f104 0e14 	add.w	lr, r4, #20
 801207c:	46a9      	mov	r9, r5
 801207e:	f04f 0c00 	mov.w	ip, #0
 8012082:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012086:	f8d9 3000 	ldr.w	r3, [r9]
 801208a:	fa1f fb87 	uxth.w	fp, r7
 801208e:	b29b      	uxth	r3, r3
 8012090:	fb0a 330b 	mla	r3, sl, fp, r3
 8012094:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012098:	f8d9 7000 	ldr.w	r7, [r9]
 801209c:	4463      	add	r3, ip
 801209e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80120a2:	fb0a c70b 	mla	r7, sl, fp, ip
 80120a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80120aa:	b29b      	uxth	r3, r3
 80120ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80120b0:	4572      	cmp	r2, lr
 80120b2:	f849 3b04 	str.w	r3, [r9], #4
 80120b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80120ba:	d8e2      	bhi.n	8012082 <__multiply+0xb2>
 80120bc:	9b01      	ldr	r3, [sp, #4]
 80120be:	f845 c003 	str.w	ip, [r5, r3]
 80120c2:	9b03      	ldr	r3, [sp, #12]
 80120c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80120c8:	3104      	adds	r1, #4
 80120ca:	f1b9 0f00 	cmp.w	r9, #0
 80120ce:	d021      	beq.n	8012114 <__multiply+0x144>
 80120d0:	682b      	ldr	r3, [r5, #0]
 80120d2:	f104 0c14 	add.w	ip, r4, #20
 80120d6:	46ae      	mov	lr, r5
 80120d8:	f04f 0a00 	mov.w	sl, #0
 80120dc:	f8bc b000 	ldrh.w	fp, [ip]
 80120e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80120e4:	fb09 770b 	mla	r7, r9, fp, r7
 80120e8:	4457      	add	r7, sl
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80120f0:	f84e 3b04 	str.w	r3, [lr], #4
 80120f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80120f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80120fc:	f8be 3000 	ldrh.w	r3, [lr]
 8012100:	fb09 330a 	mla	r3, r9, sl, r3
 8012104:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012108:	4562      	cmp	r2, ip
 801210a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801210e:	d8e5      	bhi.n	80120dc <__multiply+0x10c>
 8012110:	9f01      	ldr	r7, [sp, #4]
 8012112:	51eb      	str	r3, [r5, r7]
 8012114:	3504      	adds	r5, #4
 8012116:	e799      	b.n	801204c <__multiply+0x7c>
 8012118:	3e01      	subs	r6, #1
 801211a:	e79b      	b.n	8012054 <__multiply+0x84>
 801211c:	0801336b 	.word	0x0801336b
 8012120:	080133ed 	.word	0x080133ed

08012124 <__pow5mult>:
 8012124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012128:	4615      	mov	r5, r2
 801212a:	f012 0203 	ands.w	r2, r2, #3
 801212e:	4607      	mov	r7, r0
 8012130:	460e      	mov	r6, r1
 8012132:	d007      	beq.n	8012144 <__pow5mult+0x20>
 8012134:	4c25      	ldr	r4, [pc, #148]	@ (80121cc <__pow5mult+0xa8>)
 8012136:	3a01      	subs	r2, #1
 8012138:	2300      	movs	r3, #0
 801213a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801213e:	f7ff fe55 	bl	8011dec <__multadd>
 8012142:	4606      	mov	r6, r0
 8012144:	10ad      	asrs	r5, r5, #2
 8012146:	d03d      	beq.n	80121c4 <__pow5mult+0xa0>
 8012148:	69fc      	ldr	r4, [r7, #28]
 801214a:	b97c      	cbnz	r4, 801216c <__pow5mult+0x48>
 801214c:	2010      	movs	r0, #16
 801214e:	f7fc fc21 	bl	800e994 <malloc>
 8012152:	4602      	mov	r2, r0
 8012154:	61f8      	str	r0, [r7, #28]
 8012156:	b928      	cbnz	r0, 8012164 <__pow5mult+0x40>
 8012158:	4b1d      	ldr	r3, [pc, #116]	@ (80121d0 <__pow5mult+0xac>)
 801215a:	481e      	ldr	r0, [pc, #120]	@ (80121d4 <__pow5mult+0xb0>)
 801215c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012160:	f7fe f9e0 	bl	8010524 <__assert_func>
 8012164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012168:	6004      	str	r4, [r0, #0]
 801216a:	60c4      	str	r4, [r0, #12]
 801216c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012174:	b94c      	cbnz	r4, 801218a <__pow5mult+0x66>
 8012176:	f240 2171 	movw	r1, #625	@ 0x271
 801217a:	4638      	mov	r0, r7
 801217c:	f7ff ff12 	bl	8011fa4 <__i2b>
 8012180:	2300      	movs	r3, #0
 8012182:	f8c8 0008 	str.w	r0, [r8, #8]
 8012186:	4604      	mov	r4, r0
 8012188:	6003      	str	r3, [r0, #0]
 801218a:	f04f 0900 	mov.w	r9, #0
 801218e:	07eb      	lsls	r3, r5, #31
 8012190:	d50a      	bpl.n	80121a8 <__pow5mult+0x84>
 8012192:	4631      	mov	r1, r6
 8012194:	4622      	mov	r2, r4
 8012196:	4638      	mov	r0, r7
 8012198:	f7ff ff1a 	bl	8011fd0 <__multiply>
 801219c:	4631      	mov	r1, r6
 801219e:	4680      	mov	r8, r0
 80121a0:	4638      	mov	r0, r7
 80121a2:	f7ff fe01 	bl	8011da8 <_Bfree>
 80121a6:	4646      	mov	r6, r8
 80121a8:	106d      	asrs	r5, r5, #1
 80121aa:	d00b      	beq.n	80121c4 <__pow5mult+0xa0>
 80121ac:	6820      	ldr	r0, [r4, #0]
 80121ae:	b938      	cbnz	r0, 80121c0 <__pow5mult+0x9c>
 80121b0:	4622      	mov	r2, r4
 80121b2:	4621      	mov	r1, r4
 80121b4:	4638      	mov	r0, r7
 80121b6:	f7ff ff0b 	bl	8011fd0 <__multiply>
 80121ba:	6020      	str	r0, [r4, #0]
 80121bc:	f8c0 9000 	str.w	r9, [r0]
 80121c0:	4604      	mov	r4, r0
 80121c2:	e7e4      	b.n	801218e <__pow5mult+0x6a>
 80121c4:	4630      	mov	r0, r6
 80121c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121ca:	bf00      	nop
 80121cc:	08013448 	.word	0x08013448
 80121d0:	08013150 	.word	0x08013150
 80121d4:	080133ed 	.word	0x080133ed

080121d8 <__lshift>:
 80121d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121dc:	460c      	mov	r4, r1
 80121de:	6849      	ldr	r1, [r1, #4]
 80121e0:	6923      	ldr	r3, [r4, #16]
 80121e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80121e6:	68a3      	ldr	r3, [r4, #8]
 80121e8:	4607      	mov	r7, r0
 80121ea:	4691      	mov	r9, r2
 80121ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80121f0:	f108 0601 	add.w	r6, r8, #1
 80121f4:	42b3      	cmp	r3, r6
 80121f6:	db0b      	blt.n	8012210 <__lshift+0x38>
 80121f8:	4638      	mov	r0, r7
 80121fa:	f7ff fd95 	bl	8011d28 <_Balloc>
 80121fe:	4605      	mov	r5, r0
 8012200:	b948      	cbnz	r0, 8012216 <__lshift+0x3e>
 8012202:	4602      	mov	r2, r0
 8012204:	4b28      	ldr	r3, [pc, #160]	@ (80122a8 <__lshift+0xd0>)
 8012206:	4829      	ldr	r0, [pc, #164]	@ (80122ac <__lshift+0xd4>)
 8012208:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801220c:	f7fe f98a 	bl	8010524 <__assert_func>
 8012210:	3101      	adds	r1, #1
 8012212:	005b      	lsls	r3, r3, #1
 8012214:	e7ee      	b.n	80121f4 <__lshift+0x1c>
 8012216:	2300      	movs	r3, #0
 8012218:	f100 0114 	add.w	r1, r0, #20
 801221c:	f100 0210 	add.w	r2, r0, #16
 8012220:	4618      	mov	r0, r3
 8012222:	4553      	cmp	r3, sl
 8012224:	db33      	blt.n	801228e <__lshift+0xb6>
 8012226:	6920      	ldr	r0, [r4, #16]
 8012228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801222c:	f104 0314 	add.w	r3, r4, #20
 8012230:	f019 091f 	ands.w	r9, r9, #31
 8012234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801223c:	d02b      	beq.n	8012296 <__lshift+0xbe>
 801223e:	f1c9 0e20 	rsb	lr, r9, #32
 8012242:	468a      	mov	sl, r1
 8012244:	2200      	movs	r2, #0
 8012246:	6818      	ldr	r0, [r3, #0]
 8012248:	fa00 f009 	lsl.w	r0, r0, r9
 801224c:	4310      	orrs	r0, r2
 801224e:	f84a 0b04 	str.w	r0, [sl], #4
 8012252:	f853 2b04 	ldr.w	r2, [r3], #4
 8012256:	459c      	cmp	ip, r3
 8012258:	fa22 f20e 	lsr.w	r2, r2, lr
 801225c:	d8f3      	bhi.n	8012246 <__lshift+0x6e>
 801225e:	ebac 0304 	sub.w	r3, ip, r4
 8012262:	3b15      	subs	r3, #21
 8012264:	f023 0303 	bic.w	r3, r3, #3
 8012268:	3304      	adds	r3, #4
 801226a:	f104 0015 	add.w	r0, r4, #21
 801226e:	4584      	cmp	ip, r0
 8012270:	bf38      	it	cc
 8012272:	2304      	movcc	r3, #4
 8012274:	50ca      	str	r2, [r1, r3]
 8012276:	b10a      	cbz	r2, 801227c <__lshift+0xa4>
 8012278:	f108 0602 	add.w	r6, r8, #2
 801227c:	3e01      	subs	r6, #1
 801227e:	4638      	mov	r0, r7
 8012280:	612e      	str	r6, [r5, #16]
 8012282:	4621      	mov	r1, r4
 8012284:	f7ff fd90 	bl	8011da8 <_Bfree>
 8012288:	4628      	mov	r0, r5
 801228a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801228e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012292:	3301      	adds	r3, #1
 8012294:	e7c5      	b.n	8012222 <__lshift+0x4a>
 8012296:	3904      	subs	r1, #4
 8012298:	f853 2b04 	ldr.w	r2, [r3], #4
 801229c:	f841 2f04 	str.w	r2, [r1, #4]!
 80122a0:	459c      	cmp	ip, r3
 80122a2:	d8f9      	bhi.n	8012298 <__lshift+0xc0>
 80122a4:	e7ea      	b.n	801227c <__lshift+0xa4>
 80122a6:	bf00      	nop
 80122a8:	0801336b 	.word	0x0801336b
 80122ac:	080133ed 	.word	0x080133ed

080122b0 <__mcmp>:
 80122b0:	690a      	ldr	r2, [r1, #16]
 80122b2:	4603      	mov	r3, r0
 80122b4:	6900      	ldr	r0, [r0, #16]
 80122b6:	1a80      	subs	r0, r0, r2
 80122b8:	b530      	push	{r4, r5, lr}
 80122ba:	d10e      	bne.n	80122da <__mcmp+0x2a>
 80122bc:	3314      	adds	r3, #20
 80122be:	3114      	adds	r1, #20
 80122c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80122c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80122c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80122cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80122d0:	4295      	cmp	r5, r2
 80122d2:	d003      	beq.n	80122dc <__mcmp+0x2c>
 80122d4:	d205      	bcs.n	80122e2 <__mcmp+0x32>
 80122d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122da:	bd30      	pop	{r4, r5, pc}
 80122dc:	42a3      	cmp	r3, r4
 80122de:	d3f3      	bcc.n	80122c8 <__mcmp+0x18>
 80122e0:	e7fb      	b.n	80122da <__mcmp+0x2a>
 80122e2:	2001      	movs	r0, #1
 80122e4:	e7f9      	b.n	80122da <__mcmp+0x2a>
	...

080122e8 <__mdiff>:
 80122e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ec:	4689      	mov	r9, r1
 80122ee:	4606      	mov	r6, r0
 80122f0:	4611      	mov	r1, r2
 80122f2:	4648      	mov	r0, r9
 80122f4:	4614      	mov	r4, r2
 80122f6:	f7ff ffdb 	bl	80122b0 <__mcmp>
 80122fa:	1e05      	subs	r5, r0, #0
 80122fc:	d112      	bne.n	8012324 <__mdiff+0x3c>
 80122fe:	4629      	mov	r1, r5
 8012300:	4630      	mov	r0, r6
 8012302:	f7ff fd11 	bl	8011d28 <_Balloc>
 8012306:	4602      	mov	r2, r0
 8012308:	b928      	cbnz	r0, 8012316 <__mdiff+0x2e>
 801230a:	4b3f      	ldr	r3, [pc, #252]	@ (8012408 <__mdiff+0x120>)
 801230c:	f240 2137 	movw	r1, #567	@ 0x237
 8012310:	483e      	ldr	r0, [pc, #248]	@ (801240c <__mdiff+0x124>)
 8012312:	f7fe f907 	bl	8010524 <__assert_func>
 8012316:	2301      	movs	r3, #1
 8012318:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801231c:	4610      	mov	r0, r2
 801231e:	b003      	add	sp, #12
 8012320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012324:	bfbc      	itt	lt
 8012326:	464b      	movlt	r3, r9
 8012328:	46a1      	movlt	r9, r4
 801232a:	4630      	mov	r0, r6
 801232c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012330:	bfba      	itte	lt
 8012332:	461c      	movlt	r4, r3
 8012334:	2501      	movlt	r5, #1
 8012336:	2500      	movge	r5, #0
 8012338:	f7ff fcf6 	bl	8011d28 <_Balloc>
 801233c:	4602      	mov	r2, r0
 801233e:	b918      	cbnz	r0, 8012348 <__mdiff+0x60>
 8012340:	4b31      	ldr	r3, [pc, #196]	@ (8012408 <__mdiff+0x120>)
 8012342:	f240 2145 	movw	r1, #581	@ 0x245
 8012346:	e7e3      	b.n	8012310 <__mdiff+0x28>
 8012348:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801234c:	6926      	ldr	r6, [r4, #16]
 801234e:	60c5      	str	r5, [r0, #12]
 8012350:	f109 0310 	add.w	r3, r9, #16
 8012354:	f109 0514 	add.w	r5, r9, #20
 8012358:	f104 0e14 	add.w	lr, r4, #20
 801235c:	f100 0b14 	add.w	fp, r0, #20
 8012360:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012364:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012368:	9301      	str	r3, [sp, #4]
 801236a:	46d9      	mov	r9, fp
 801236c:	f04f 0c00 	mov.w	ip, #0
 8012370:	9b01      	ldr	r3, [sp, #4]
 8012372:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012376:	f853 af04 	ldr.w	sl, [r3, #4]!
 801237a:	9301      	str	r3, [sp, #4]
 801237c:	fa1f f38a 	uxth.w	r3, sl
 8012380:	4619      	mov	r1, r3
 8012382:	b283      	uxth	r3, r0
 8012384:	1acb      	subs	r3, r1, r3
 8012386:	0c00      	lsrs	r0, r0, #16
 8012388:	4463      	add	r3, ip
 801238a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801238e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012392:	b29b      	uxth	r3, r3
 8012394:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012398:	4576      	cmp	r6, lr
 801239a:	f849 3b04 	str.w	r3, [r9], #4
 801239e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80123a2:	d8e5      	bhi.n	8012370 <__mdiff+0x88>
 80123a4:	1b33      	subs	r3, r6, r4
 80123a6:	3b15      	subs	r3, #21
 80123a8:	f023 0303 	bic.w	r3, r3, #3
 80123ac:	3415      	adds	r4, #21
 80123ae:	3304      	adds	r3, #4
 80123b0:	42a6      	cmp	r6, r4
 80123b2:	bf38      	it	cc
 80123b4:	2304      	movcc	r3, #4
 80123b6:	441d      	add	r5, r3
 80123b8:	445b      	add	r3, fp
 80123ba:	461e      	mov	r6, r3
 80123bc:	462c      	mov	r4, r5
 80123be:	4544      	cmp	r4, r8
 80123c0:	d30e      	bcc.n	80123e0 <__mdiff+0xf8>
 80123c2:	f108 0103 	add.w	r1, r8, #3
 80123c6:	1b49      	subs	r1, r1, r5
 80123c8:	f021 0103 	bic.w	r1, r1, #3
 80123cc:	3d03      	subs	r5, #3
 80123ce:	45a8      	cmp	r8, r5
 80123d0:	bf38      	it	cc
 80123d2:	2100      	movcc	r1, #0
 80123d4:	440b      	add	r3, r1
 80123d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123da:	b191      	cbz	r1, 8012402 <__mdiff+0x11a>
 80123dc:	6117      	str	r7, [r2, #16]
 80123de:	e79d      	b.n	801231c <__mdiff+0x34>
 80123e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80123e4:	46e6      	mov	lr, ip
 80123e6:	0c08      	lsrs	r0, r1, #16
 80123e8:	fa1c fc81 	uxtah	ip, ip, r1
 80123ec:	4471      	add	r1, lr
 80123ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80123f2:	b289      	uxth	r1, r1
 80123f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80123f8:	f846 1b04 	str.w	r1, [r6], #4
 80123fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012400:	e7dd      	b.n	80123be <__mdiff+0xd6>
 8012402:	3f01      	subs	r7, #1
 8012404:	e7e7      	b.n	80123d6 <__mdiff+0xee>
 8012406:	bf00      	nop
 8012408:	0801336b 	.word	0x0801336b
 801240c:	080133ed 	.word	0x080133ed

08012410 <__ulp>:
 8012410:	b082      	sub	sp, #8
 8012412:	ed8d 0b00 	vstr	d0, [sp]
 8012416:	9a01      	ldr	r2, [sp, #4]
 8012418:	4b0f      	ldr	r3, [pc, #60]	@ (8012458 <__ulp+0x48>)
 801241a:	4013      	ands	r3, r2
 801241c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012420:	2b00      	cmp	r3, #0
 8012422:	dc08      	bgt.n	8012436 <__ulp+0x26>
 8012424:	425b      	negs	r3, r3
 8012426:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801242a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801242e:	da04      	bge.n	801243a <__ulp+0x2a>
 8012430:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012434:	4113      	asrs	r3, r2
 8012436:	2200      	movs	r2, #0
 8012438:	e008      	b.n	801244c <__ulp+0x3c>
 801243a:	f1a2 0314 	sub.w	r3, r2, #20
 801243e:	2b1e      	cmp	r3, #30
 8012440:	bfda      	itte	le
 8012442:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012446:	40da      	lsrle	r2, r3
 8012448:	2201      	movgt	r2, #1
 801244a:	2300      	movs	r3, #0
 801244c:	4619      	mov	r1, r3
 801244e:	4610      	mov	r0, r2
 8012450:	ec41 0b10 	vmov	d0, r0, r1
 8012454:	b002      	add	sp, #8
 8012456:	4770      	bx	lr
 8012458:	7ff00000 	.word	0x7ff00000

0801245c <__b2d>:
 801245c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012460:	6906      	ldr	r6, [r0, #16]
 8012462:	f100 0814 	add.w	r8, r0, #20
 8012466:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801246a:	1f37      	subs	r7, r6, #4
 801246c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012470:	4610      	mov	r0, r2
 8012472:	f7ff fd4b 	bl	8011f0c <__hi0bits>
 8012476:	f1c0 0320 	rsb	r3, r0, #32
 801247a:	280a      	cmp	r0, #10
 801247c:	600b      	str	r3, [r1, #0]
 801247e:	491b      	ldr	r1, [pc, #108]	@ (80124ec <__b2d+0x90>)
 8012480:	dc15      	bgt.n	80124ae <__b2d+0x52>
 8012482:	f1c0 0c0b 	rsb	ip, r0, #11
 8012486:	fa22 f30c 	lsr.w	r3, r2, ip
 801248a:	45b8      	cmp	r8, r7
 801248c:	ea43 0501 	orr.w	r5, r3, r1
 8012490:	bf34      	ite	cc
 8012492:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012496:	2300      	movcs	r3, #0
 8012498:	3015      	adds	r0, #21
 801249a:	fa02 f000 	lsl.w	r0, r2, r0
 801249e:	fa23 f30c 	lsr.w	r3, r3, ip
 80124a2:	4303      	orrs	r3, r0
 80124a4:	461c      	mov	r4, r3
 80124a6:	ec45 4b10 	vmov	d0, r4, r5
 80124aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ae:	45b8      	cmp	r8, r7
 80124b0:	bf3a      	itte	cc
 80124b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80124b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80124ba:	2300      	movcs	r3, #0
 80124bc:	380b      	subs	r0, #11
 80124be:	d012      	beq.n	80124e6 <__b2d+0x8a>
 80124c0:	f1c0 0120 	rsb	r1, r0, #32
 80124c4:	fa23 f401 	lsr.w	r4, r3, r1
 80124c8:	4082      	lsls	r2, r0
 80124ca:	4322      	orrs	r2, r4
 80124cc:	4547      	cmp	r7, r8
 80124ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80124d2:	bf8c      	ite	hi
 80124d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80124d8:	2200      	movls	r2, #0
 80124da:	4083      	lsls	r3, r0
 80124dc:	40ca      	lsrs	r2, r1
 80124de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80124e2:	4313      	orrs	r3, r2
 80124e4:	e7de      	b.n	80124a4 <__b2d+0x48>
 80124e6:	ea42 0501 	orr.w	r5, r2, r1
 80124ea:	e7db      	b.n	80124a4 <__b2d+0x48>
 80124ec:	3ff00000 	.word	0x3ff00000

080124f0 <__d2b>:
 80124f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80124f4:	460f      	mov	r7, r1
 80124f6:	2101      	movs	r1, #1
 80124f8:	ec59 8b10 	vmov	r8, r9, d0
 80124fc:	4616      	mov	r6, r2
 80124fe:	f7ff fc13 	bl	8011d28 <_Balloc>
 8012502:	4604      	mov	r4, r0
 8012504:	b930      	cbnz	r0, 8012514 <__d2b+0x24>
 8012506:	4602      	mov	r2, r0
 8012508:	4b23      	ldr	r3, [pc, #140]	@ (8012598 <__d2b+0xa8>)
 801250a:	4824      	ldr	r0, [pc, #144]	@ (801259c <__d2b+0xac>)
 801250c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012510:	f7fe f808 	bl	8010524 <__assert_func>
 8012514:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801251c:	b10d      	cbz	r5, 8012522 <__d2b+0x32>
 801251e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012522:	9301      	str	r3, [sp, #4]
 8012524:	f1b8 0300 	subs.w	r3, r8, #0
 8012528:	d023      	beq.n	8012572 <__d2b+0x82>
 801252a:	4668      	mov	r0, sp
 801252c:	9300      	str	r3, [sp, #0]
 801252e:	f7ff fd0c 	bl	8011f4a <__lo0bits>
 8012532:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012536:	b1d0      	cbz	r0, 801256e <__d2b+0x7e>
 8012538:	f1c0 0320 	rsb	r3, r0, #32
 801253c:	fa02 f303 	lsl.w	r3, r2, r3
 8012540:	430b      	orrs	r3, r1
 8012542:	40c2      	lsrs	r2, r0
 8012544:	6163      	str	r3, [r4, #20]
 8012546:	9201      	str	r2, [sp, #4]
 8012548:	9b01      	ldr	r3, [sp, #4]
 801254a:	61a3      	str	r3, [r4, #24]
 801254c:	2b00      	cmp	r3, #0
 801254e:	bf0c      	ite	eq
 8012550:	2201      	moveq	r2, #1
 8012552:	2202      	movne	r2, #2
 8012554:	6122      	str	r2, [r4, #16]
 8012556:	b1a5      	cbz	r5, 8012582 <__d2b+0x92>
 8012558:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801255c:	4405      	add	r5, r0
 801255e:	603d      	str	r5, [r7, #0]
 8012560:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012564:	6030      	str	r0, [r6, #0]
 8012566:	4620      	mov	r0, r4
 8012568:	b003      	add	sp, #12
 801256a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801256e:	6161      	str	r1, [r4, #20]
 8012570:	e7ea      	b.n	8012548 <__d2b+0x58>
 8012572:	a801      	add	r0, sp, #4
 8012574:	f7ff fce9 	bl	8011f4a <__lo0bits>
 8012578:	9b01      	ldr	r3, [sp, #4]
 801257a:	6163      	str	r3, [r4, #20]
 801257c:	3020      	adds	r0, #32
 801257e:	2201      	movs	r2, #1
 8012580:	e7e8      	b.n	8012554 <__d2b+0x64>
 8012582:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012586:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801258a:	6038      	str	r0, [r7, #0]
 801258c:	6918      	ldr	r0, [r3, #16]
 801258e:	f7ff fcbd 	bl	8011f0c <__hi0bits>
 8012592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012596:	e7e5      	b.n	8012564 <__d2b+0x74>
 8012598:	0801336b 	.word	0x0801336b
 801259c:	080133ed 	.word	0x080133ed

080125a0 <__ratio>:
 80125a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a4:	b085      	sub	sp, #20
 80125a6:	e9cd 1000 	strd	r1, r0, [sp]
 80125aa:	a902      	add	r1, sp, #8
 80125ac:	f7ff ff56 	bl	801245c <__b2d>
 80125b0:	9800      	ldr	r0, [sp, #0]
 80125b2:	a903      	add	r1, sp, #12
 80125b4:	ec55 4b10 	vmov	r4, r5, d0
 80125b8:	f7ff ff50 	bl	801245c <__b2d>
 80125bc:	9b01      	ldr	r3, [sp, #4]
 80125be:	6919      	ldr	r1, [r3, #16]
 80125c0:	9b00      	ldr	r3, [sp, #0]
 80125c2:	691b      	ldr	r3, [r3, #16]
 80125c4:	1ac9      	subs	r1, r1, r3
 80125c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80125ca:	1a9b      	subs	r3, r3, r2
 80125cc:	ec5b ab10 	vmov	sl, fp, d0
 80125d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	bfce      	itee	gt
 80125d8:	462a      	movgt	r2, r5
 80125da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80125de:	465a      	movle	r2, fp
 80125e0:	462f      	mov	r7, r5
 80125e2:	46d9      	mov	r9, fp
 80125e4:	bfcc      	ite	gt
 80125e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80125ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80125ee:	464b      	mov	r3, r9
 80125f0:	4652      	mov	r2, sl
 80125f2:	4620      	mov	r0, r4
 80125f4:	4639      	mov	r1, r7
 80125f6:	f7ee f951 	bl	800089c <__aeabi_ddiv>
 80125fa:	ec41 0b10 	vmov	d0, r0, r1
 80125fe:	b005      	add	sp, #20
 8012600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012604 <__copybits>:
 8012604:	3901      	subs	r1, #1
 8012606:	b570      	push	{r4, r5, r6, lr}
 8012608:	1149      	asrs	r1, r1, #5
 801260a:	6914      	ldr	r4, [r2, #16]
 801260c:	3101      	adds	r1, #1
 801260e:	f102 0314 	add.w	r3, r2, #20
 8012612:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012616:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801261a:	1f05      	subs	r5, r0, #4
 801261c:	42a3      	cmp	r3, r4
 801261e:	d30c      	bcc.n	801263a <__copybits+0x36>
 8012620:	1aa3      	subs	r3, r4, r2
 8012622:	3b11      	subs	r3, #17
 8012624:	f023 0303 	bic.w	r3, r3, #3
 8012628:	3211      	adds	r2, #17
 801262a:	42a2      	cmp	r2, r4
 801262c:	bf88      	it	hi
 801262e:	2300      	movhi	r3, #0
 8012630:	4418      	add	r0, r3
 8012632:	2300      	movs	r3, #0
 8012634:	4288      	cmp	r0, r1
 8012636:	d305      	bcc.n	8012644 <__copybits+0x40>
 8012638:	bd70      	pop	{r4, r5, r6, pc}
 801263a:	f853 6b04 	ldr.w	r6, [r3], #4
 801263e:	f845 6f04 	str.w	r6, [r5, #4]!
 8012642:	e7eb      	b.n	801261c <__copybits+0x18>
 8012644:	f840 3b04 	str.w	r3, [r0], #4
 8012648:	e7f4      	b.n	8012634 <__copybits+0x30>

0801264a <__any_on>:
 801264a:	f100 0214 	add.w	r2, r0, #20
 801264e:	6900      	ldr	r0, [r0, #16]
 8012650:	114b      	asrs	r3, r1, #5
 8012652:	4298      	cmp	r0, r3
 8012654:	b510      	push	{r4, lr}
 8012656:	db11      	blt.n	801267c <__any_on+0x32>
 8012658:	dd0a      	ble.n	8012670 <__any_on+0x26>
 801265a:	f011 011f 	ands.w	r1, r1, #31
 801265e:	d007      	beq.n	8012670 <__any_on+0x26>
 8012660:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012664:	fa24 f001 	lsr.w	r0, r4, r1
 8012668:	fa00 f101 	lsl.w	r1, r0, r1
 801266c:	428c      	cmp	r4, r1
 801266e:	d10b      	bne.n	8012688 <__any_on+0x3e>
 8012670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012674:	4293      	cmp	r3, r2
 8012676:	d803      	bhi.n	8012680 <__any_on+0x36>
 8012678:	2000      	movs	r0, #0
 801267a:	bd10      	pop	{r4, pc}
 801267c:	4603      	mov	r3, r0
 801267e:	e7f7      	b.n	8012670 <__any_on+0x26>
 8012680:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012684:	2900      	cmp	r1, #0
 8012686:	d0f5      	beq.n	8012674 <__any_on+0x2a>
 8012688:	2001      	movs	r0, #1
 801268a:	e7f6      	b.n	801267a <__any_on+0x30>

0801268c <__sread>:
 801268c:	b510      	push	{r4, lr}
 801268e:	460c      	mov	r4, r1
 8012690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012694:	f000 f9e0 	bl	8012a58 <_read_r>
 8012698:	2800      	cmp	r0, #0
 801269a:	bfab      	itete	ge
 801269c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801269e:	89a3      	ldrhlt	r3, [r4, #12]
 80126a0:	181b      	addge	r3, r3, r0
 80126a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80126a6:	bfac      	ite	ge
 80126a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80126aa:	81a3      	strhlt	r3, [r4, #12]
 80126ac:	bd10      	pop	{r4, pc}

080126ae <__swrite>:
 80126ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126b2:	461f      	mov	r7, r3
 80126b4:	898b      	ldrh	r3, [r1, #12]
 80126b6:	05db      	lsls	r3, r3, #23
 80126b8:	4605      	mov	r5, r0
 80126ba:	460c      	mov	r4, r1
 80126bc:	4616      	mov	r6, r2
 80126be:	d505      	bpl.n	80126cc <__swrite+0x1e>
 80126c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126c4:	2302      	movs	r3, #2
 80126c6:	2200      	movs	r2, #0
 80126c8:	f000 f9b4 	bl	8012a34 <_lseek_r>
 80126cc:	89a3      	ldrh	r3, [r4, #12]
 80126ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80126d6:	81a3      	strh	r3, [r4, #12]
 80126d8:	4632      	mov	r2, r6
 80126da:	463b      	mov	r3, r7
 80126dc:	4628      	mov	r0, r5
 80126de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126e2:	f000 b9cb 	b.w	8012a7c <_write_r>

080126e6 <__sseek>:
 80126e6:	b510      	push	{r4, lr}
 80126e8:	460c      	mov	r4, r1
 80126ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126ee:	f000 f9a1 	bl	8012a34 <_lseek_r>
 80126f2:	1c43      	adds	r3, r0, #1
 80126f4:	89a3      	ldrh	r3, [r4, #12]
 80126f6:	bf15      	itete	ne
 80126f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80126fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80126fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012702:	81a3      	strheq	r3, [r4, #12]
 8012704:	bf18      	it	ne
 8012706:	81a3      	strhne	r3, [r4, #12]
 8012708:	bd10      	pop	{r4, pc}

0801270a <__sclose>:
 801270a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801270e:	f000 b95f 	b.w	80129d0 <_close_r>
	...

08012714 <fiprintf>:
 8012714:	b40e      	push	{r1, r2, r3}
 8012716:	b503      	push	{r0, r1, lr}
 8012718:	4601      	mov	r1, r0
 801271a:	ab03      	add	r3, sp, #12
 801271c:	4805      	ldr	r0, [pc, #20]	@ (8012734 <fiprintf+0x20>)
 801271e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012722:	6800      	ldr	r0, [r0, #0]
 8012724:	9301      	str	r3, [sp, #4]
 8012726:	f000 f9ff 	bl	8012b28 <_vfiprintf_r>
 801272a:	b002      	add	sp, #8
 801272c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012730:	b003      	add	sp, #12
 8012732:	4770      	bx	lr
 8012734:	200001a8 	.word	0x200001a8

08012738 <_realloc_r>:
 8012738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801273c:	4680      	mov	r8, r0
 801273e:	4615      	mov	r5, r2
 8012740:	460c      	mov	r4, r1
 8012742:	b921      	cbnz	r1, 801274e <_realloc_r+0x16>
 8012744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012748:	4611      	mov	r1, r2
 801274a:	f7fc b955 	b.w	800e9f8 <_malloc_r>
 801274e:	b92a      	cbnz	r2, 801275c <_realloc_r+0x24>
 8012750:	f7fe fd52 	bl	80111f8 <_free_r>
 8012754:	2400      	movs	r4, #0
 8012756:	4620      	mov	r0, r4
 8012758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801275c:	f000 fafc 	bl	8012d58 <_malloc_usable_size_r>
 8012760:	4285      	cmp	r5, r0
 8012762:	4606      	mov	r6, r0
 8012764:	d802      	bhi.n	801276c <_realloc_r+0x34>
 8012766:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801276a:	d8f4      	bhi.n	8012756 <_realloc_r+0x1e>
 801276c:	4629      	mov	r1, r5
 801276e:	4640      	mov	r0, r8
 8012770:	f7fc f942 	bl	800e9f8 <_malloc_r>
 8012774:	4607      	mov	r7, r0
 8012776:	2800      	cmp	r0, #0
 8012778:	d0ec      	beq.n	8012754 <_realloc_r+0x1c>
 801277a:	42b5      	cmp	r5, r6
 801277c:	462a      	mov	r2, r5
 801277e:	4621      	mov	r1, r4
 8012780:	bf28      	it	cs
 8012782:	4632      	movcs	r2, r6
 8012784:	f7fd fea9 	bl	80104da <memcpy>
 8012788:	4621      	mov	r1, r4
 801278a:	4640      	mov	r0, r8
 801278c:	f7fe fd34 	bl	80111f8 <_free_r>
 8012790:	463c      	mov	r4, r7
 8012792:	e7e0      	b.n	8012756 <_realloc_r+0x1e>

08012794 <__swbuf_r>:
 8012794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012796:	460e      	mov	r6, r1
 8012798:	4614      	mov	r4, r2
 801279a:	4605      	mov	r5, r0
 801279c:	b118      	cbz	r0, 80127a6 <__swbuf_r+0x12>
 801279e:	6a03      	ldr	r3, [r0, #32]
 80127a0:	b90b      	cbnz	r3, 80127a6 <__swbuf_r+0x12>
 80127a2:	f7fc fe37 	bl	800f414 <__sinit>
 80127a6:	69a3      	ldr	r3, [r4, #24]
 80127a8:	60a3      	str	r3, [r4, #8]
 80127aa:	89a3      	ldrh	r3, [r4, #12]
 80127ac:	071a      	lsls	r2, r3, #28
 80127ae:	d501      	bpl.n	80127b4 <__swbuf_r+0x20>
 80127b0:	6923      	ldr	r3, [r4, #16]
 80127b2:	b943      	cbnz	r3, 80127c6 <__swbuf_r+0x32>
 80127b4:	4621      	mov	r1, r4
 80127b6:	4628      	mov	r0, r5
 80127b8:	f000 f82a 	bl	8012810 <__swsetup_r>
 80127bc:	b118      	cbz	r0, 80127c6 <__swbuf_r+0x32>
 80127be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80127c2:	4638      	mov	r0, r7
 80127c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127c6:	6823      	ldr	r3, [r4, #0]
 80127c8:	6922      	ldr	r2, [r4, #16]
 80127ca:	1a98      	subs	r0, r3, r2
 80127cc:	6963      	ldr	r3, [r4, #20]
 80127ce:	b2f6      	uxtb	r6, r6
 80127d0:	4283      	cmp	r3, r0
 80127d2:	4637      	mov	r7, r6
 80127d4:	dc05      	bgt.n	80127e2 <__swbuf_r+0x4e>
 80127d6:	4621      	mov	r1, r4
 80127d8:	4628      	mov	r0, r5
 80127da:	f7ff fa7d 	bl	8011cd8 <_fflush_r>
 80127de:	2800      	cmp	r0, #0
 80127e0:	d1ed      	bne.n	80127be <__swbuf_r+0x2a>
 80127e2:	68a3      	ldr	r3, [r4, #8]
 80127e4:	3b01      	subs	r3, #1
 80127e6:	60a3      	str	r3, [r4, #8]
 80127e8:	6823      	ldr	r3, [r4, #0]
 80127ea:	1c5a      	adds	r2, r3, #1
 80127ec:	6022      	str	r2, [r4, #0]
 80127ee:	701e      	strb	r6, [r3, #0]
 80127f0:	6962      	ldr	r2, [r4, #20]
 80127f2:	1c43      	adds	r3, r0, #1
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d004      	beq.n	8012802 <__swbuf_r+0x6e>
 80127f8:	89a3      	ldrh	r3, [r4, #12]
 80127fa:	07db      	lsls	r3, r3, #31
 80127fc:	d5e1      	bpl.n	80127c2 <__swbuf_r+0x2e>
 80127fe:	2e0a      	cmp	r6, #10
 8012800:	d1df      	bne.n	80127c2 <__swbuf_r+0x2e>
 8012802:	4621      	mov	r1, r4
 8012804:	4628      	mov	r0, r5
 8012806:	f7ff fa67 	bl	8011cd8 <_fflush_r>
 801280a:	2800      	cmp	r0, #0
 801280c:	d0d9      	beq.n	80127c2 <__swbuf_r+0x2e>
 801280e:	e7d6      	b.n	80127be <__swbuf_r+0x2a>

08012810 <__swsetup_r>:
 8012810:	b538      	push	{r3, r4, r5, lr}
 8012812:	4b29      	ldr	r3, [pc, #164]	@ (80128b8 <__swsetup_r+0xa8>)
 8012814:	4605      	mov	r5, r0
 8012816:	6818      	ldr	r0, [r3, #0]
 8012818:	460c      	mov	r4, r1
 801281a:	b118      	cbz	r0, 8012824 <__swsetup_r+0x14>
 801281c:	6a03      	ldr	r3, [r0, #32]
 801281e:	b90b      	cbnz	r3, 8012824 <__swsetup_r+0x14>
 8012820:	f7fc fdf8 	bl	800f414 <__sinit>
 8012824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012828:	0719      	lsls	r1, r3, #28
 801282a:	d422      	bmi.n	8012872 <__swsetup_r+0x62>
 801282c:	06da      	lsls	r2, r3, #27
 801282e:	d407      	bmi.n	8012840 <__swsetup_r+0x30>
 8012830:	2209      	movs	r2, #9
 8012832:	602a      	str	r2, [r5, #0]
 8012834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012838:	81a3      	strh	r3, [r4, #12]
 801283a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801283e:	e033      	b.n	80128a8 <__swsetup_r+0x98>
 8012840:	0758      	lsls	r0, r3, #29
 8012842:	d512      	bpl.n	801286a <__swsetup_r+0x5a>
 8012844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012846:	b141      	cbz	r1, 801285a <__swsetup_r+0x4a>
 8012848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801284c:	4299      	cmp	r1, r3
 801284e:	d002      	beq.n	8012856 <__swsetup_r+0x46>
 8012850:	4628      	mov	r0, r5
 8012852:	f7fe fcd1 	bl	80111f8 <_free_r>
 8012856:	2300      	movs	r3, #0
 8012858:	6363      	str	r3, [r4, #52]	@ 0x34
 801285a:	89a3      	ldrh	r3, [r4, #12]
 801285c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012860:	81a3      	strh	r3, [r4, #12]
 8012862:	2300      	movs	r3, #0
 8012864:	6063      	str	r3, [r4, #4]
 8012866:	6923      	ldr	r3, [r4, #16]
 8012868:	6023      	str	r3, [r4, #0]
 801286a:	89a3      	ldrh	r3, [r4, #12]
 801286c:	f043 0308 	orr.w	r3, r3, #8
 8012870:	81a3      	strh	r3, [r4, #12]
 8012872:	6923      	ldr	r3, [r4, #16]
 8012874:	b94b      	cbnz	r3, 801288a <__swsetup_r+0x7a>
 8012876:	89a3      	ldrh	r3, [r4, #12]
 8012878:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801287c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012880:	d003      	beq.n	801288a <__swsetup_r+0x7a>
 8012882:	4621      	mov	r1, r4
 8012884:	4628      	mov	r0, r5
 8012886:	f000 f84c 	bl	8012922 <__smakebuf_r>
 801288a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801288e:	f013 0201 	ands.w	r2, r3, #1
 8012892:	d00a      	beq.n	80128aa <__swsetup_r+0x9a>
 8012894:	2200      	movs	r2, #0
 8012896:	60a2      	str	r2, [r4, #8]
 8012898:	6962      	ldr	r2, [r4, #20]
 801289a:	4252      	negs	r2, r2
 801289c:	61a2      	str	r2, [r4, #24]
 801289e:	6922      	ldr	r2, [r4, #16]
 80128a0:	b942      	cbnz	r2, 80128b4 <__swsetup_r+0xa4>
 80128a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80128a6:	d1c5      	bne.n	8012834 <__swsetup_r+0x24>
 80128a8:	bd38      	pop	{r3, r4, r5, pc}
 80128aa:	0799      	lsls	r1, r3, #30
 80128ac:	bf58      	it	pl
 80128ae:	6962      	ldrpl	r2, [r4, #20]
 80128b0:	60a2      	str	r2, [r4, #8]
 80128b2:	e7f4      	b.n	801289e <__swsetup_r+0x8e>
 80128b4:	2000      	movs	r0, #0
 80128b6:	e7f7      	b.n	80128a8 <__swsetup_r+0x98>
 80128b8:	200001a8 	.word	0x200001a8

080128bc <__ascii_wctomb>:
 80128bc:	4603      	mov	r3, r0
 80128be:	4608      	mov	r0, r1
 80128c0:	b141      	cbz	r1, 80128d4 <__ascii_wctomb+0x18>
 80128c2:	2aff      	cmp	r2, #255	@ 0xff
 80128c4:	d904      	bls.n	80128d0 <__ascii_wctomb+0x14>
 80128c6:	228a      	movs	r2, #138	@ 0x8a
 80128c8:	601a      	str	r2, [r3, #0]
 80128ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80128ce:	4770      	bx	lr
 80128d0:	700a      	strb	r2, [r1, #0]
 80128d2:	2001      	movs	r0, #1
 80128d4:	4770      	bx	lr

080128d6 <__swhatbuf_r>:
 80128d6:	b570      	push	{r4, r5, r6, lr}
 80128d8:	460c      	mov	r4, r1
 80128da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128de:	2900      	cmp	r1, #0
 80128e0:	b096      	sub	sp, #88	@ 0x58
 80128e2:	4615      	mov	r5, r2
 80128e4:	461e      	mov	r6, r3
 80128e6:	da0d      	bge.n	8012904 <__swhatbuf_r+0x2e>
 80128e8:	89a3      	ldrh	r3, [r4, #12]
 80128ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80128ee:	f04f 0100 	mov.w	r1, #0
 80128f2:	bf14      	ite	ne
 80128f4:	2340      	movne	r3, #64	@ 0x40
 80128f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80128fa:	2000      	movs	r0, #0
 80128fc:	6031      	str	r1, [r6, #0]
 80128fe:	602b      	str	r3, [r5, #0]
 8012900:	b016      	add	sp, #88	@ 0x58
 8012902:	bd70      	pop	{r4, r5, r6, pc}
 8012904:	466a      	mov	r2, sp
 8012906:	f000 f873 	bl	80129f0 <_fstat_r>
 801290a:	2800      	cmp	r0, #0
 801290c:	dbec      	blt.n	80128e8 <__swhatbuf_r+0x12>
 801290e:	9901      	ldr	r1, [sp, #4]
 8012910:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012914:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012918:	4259      	negs	r1, r3
 801291a:	4159      	adcs	r1, r3
 801291c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012920:	e7eb      	b.n	80128fa <__swhatbuf_r+0x24>

08012922 <__smakebuf_r>:
 8012922:	898b      	ldrh	r3, [r1, #12]
 8012924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012926:	079d      	lsls	r5, r3, #30
 8012928:	4606      	mov	r6, r0
 801292a:	460c      	mov	r4, r1
 801292c:	d507      	bpl.n	801293e <__smakebuf_r+0x1c>
 801292e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012932:	6023      	str	r3, [r4, #0]
 8012934:	6123      	str	r3, [r4, #16]
 8012936:	2301      	movs	r3, #1
 8012938:	6163      	str	r3, [r4, #20]
 801293a:	b003      	add	sp, #12
 801293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801293e:	ab01      	add	r3, sp, #4
 8012940:	466a      	mov	r2, sp
 8012942:	f7ff ffc8 	bl	80128d6 <__swhatbuf_r>
 8012946:	9f00      	ldr	r7, [sp, #0]
 8012948:	4605      	mov	r5, r0
 801294a:	4639      	mov	r1, r7
 801294c:	4630      	mov	r0, r6
 801294e:	f7fc f853 	bl	800e9f8 <_malloc_r>
 8012952:	b948      	cbnz	r0, 8012968 <__smakebuf_r+0x46>
 8012954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012958:	059a      	lsls	r2, r3, #22
 801295a:	d4ee      	bmi.n	801293a <__smakebuf_r+0x18>
 801295c:	f023 0303 	bic.w	r3, r3, #3
 8012960:	f043 0302 	orr.w	r3, r3, #2
 8012964:	81a3      	strh	r3, [r4, #12]
 8012966:	e7e2      	b.n	801292e <__smakebuf_r+0xc>
 8012968:	89a3      	ldrh	r3, [r4, #12]
 801296a:	6020      	str	r0, [r4, #0]
 801296c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012970:	81a3      	strh	r3, [r4, #12]
 8012972:	9b01      	ldr	r3, [sp, #4]
 8012974:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012978:	b15b      	cbz	r3, 8012992 <__smakebuf_r+0x70>
 801297a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801297e:	4630      	mov	r0, r6
 8012980:	f000 f848 	bl	8012a14 <_isatty_r>
 8012984:	b128      	cbz	r0, 8012992 <__smakebuf_r+0x70>
 8012986:	89a3      	ldrh	r3, [r4, #12]
 8012988:	f023 0303 	bic.w	r3, r3, #3
 801298c:	f043 0301 	orr.w	r3, r3, #1
 8012990:	81a3      	strh	r3, [r4, #12]
 8012992:	89a3      	ldrh	r3, [r4, #12]
 8012994:	431d      	orrs	r5, r3
 8012996:	81a5      	strh	r5, [r4, #12]
 8012998:	e7cf      	b.n	801293a <__smakebuf_r+0x18>

0801299a <memmove>:
 801299a:	4288      	cmp	r0, r1
 801299c:	b510      	push	{r4, lr}
 801299e:	eb01 0402 	add.w	r4, r1, r2
 80129a2:	d902      	bls.n	80129aa <memmove+0x10>
 80129a4:	4284      	cmp	r4, r0
 80129a6:	4623      	mov	r3, r4
 80129a8:	d807      	bhi.n	80129ba <memmove+0x20>
 80129aa:	1e43      	subs	r3, r0, #1
 80129ac:	42a1      	cmp	r1, r4
 80129ae:	d008      	beq.n	80129c2 <memmove+0x28>
 80129b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129b8:	e7f8      	b.n	80129ac <memmove+0x12>
 80129ba:	4402      	add	r2, r0
 80129bc:	4601      	mov	r1, r0
 80129be:	428a      	cmp	r2, r1
 80129c0:	d100      	bne.n	80129c4 <memmove+0x2a>
 80129c2:	bd10      	pop	{r4, pc}
 80129c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80129c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129cc:	e7f7      	b.n	80129be <memmove+0x24>
	...

080129d0 <_close_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	4d06      	ldr	r5, [pc, #24]	@ (80129ec <_close_r+0x1c>)
 80129d4:	2300      	movs	r3, #0
 80129d6:	4604      	mov	r4, r0
 80129d8:	4608      	mov	r0, r1
 80129da:	602b      	str	r3, [r5, #0]
 80129dc:	f7f1 f8a0 	bl	8003b20 <_close>
 80129e0:	1c43      	adds	r3, r0, #1
 80129e2:	d102      	bne.n	80129ea <_close_r+0x1a>
 80129e4:	682b      	ldr	r3, [r5, #0]
 80129e6:	b103      	cbz	r3, 80129ea <_close_r+0x1a>
 80129e8:	6023      	str	r3, [r4, #0]
 80129ea:	bd38      	pop	{r3, r4, r5, pc}
 80129ec:	20001518 	.word	0x20001518

080129f0 <_fstat_r>:
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	4d07      	ldr	r5, [pc, #28]	@ (8012a10 <_fstat_r+0x20>)
 80129f4:	2300      	movs	r3, #0
 80129f6:	4604      	mov	r4, r0
 80129f8:	4608      	mov	r0, r1
 80129fa:	4611      	mov	r1, r2
 80129fc:	602b      	str	r3, [r5, #0]
 80129fe:	f7f1 f89b 	bl	8003b38 <_fstat>
 8012a02:	1c43      	adds	r3, r0, #1
 8012a04:	d102      	bne.n	8012a0c <_fstat_r+0x1c>
 8012a06:	682b      	ldr	r3, [r5, #0]
 8012a08:	b103      	cbz	r3, 8012a0c <_fstat_r+0x1c>
 8012a0a:	6023      	str	r3, [r4, #0]
 8012a0c:	bd38      	pop	{r3, r4, r5, pc}
 8012a0e:	bf00      	nop
 8012a10:	20001518 	.word	0x20001518

08012a14 <_isatty_r>:
 8012a14:	b538      	push	{r3, r4, r5, lr}
 8012a16:	4d06      	ldr	r5, [pc, #24]	@ (8012a30 <_isatty_r+0x1c>)
 8012a18:	2300      	movs	r3, #0
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	4608      	mov	r0, r1
 8012a1e:	602b      	str	r3, [r5, #0]
 8012a20:	f7f1 f89a 	bl	8003b58 <_isatty>
 8012a24:	1c43      	adds	r3, r0, #1
 8012a26:	d102      	bne.n	8012a2e <_isatty_r+0x1a>
 8012a28:	682b      	ldr	r3, [r5, #0]
 8012a2a:	b103      	cbz	r3, 8012a2e <_isatty_r+0x1a>
 8012a2c:	6023      	str	r3, [r4, #0]
 8012a2e:	bd38      	pop	{r3, r4, r5, pc}
 8012a30:	20001518 	.word	0x20001518

08012a34 <_lseek_r>:
 8012a34:	b538      	push	{r3, r4, r5, lr}
 8012a36:	4d07      	ldr	r5, [pc, #28]	@ (8012a54 <_lseek_r+0x20>)
 8012a38:	4604      	mov	r4, r0
 8012a3a:	4608      	mov	r0, r1
 8012a3c:	4611      	mov	r1, r2
 8012a3e:	2200      	movs	r2, #0
 8012a40:	602a      	str	r2, [r5, #0]
 8012a42:	461a      	mov	r2, r3
 8012a44:	f7f1 f893 	bl	8003b6e <_lseek>
 8012a48:	1c43      	adds	r3, r0, #1
 8012a4a:	d102      	bne.n	8012a52 <_lseek_r+0x1e>
 8012a4c:	682b      	ldr	r3, [r5, #0]
 8012a4e:	b103      	cbz	r3, 8012a52 <_lseek_r+0x1e>
 8012a50:	6023      	str	r3, [r4, #0]
 8012a52:	bd38      	pop	{r3, r4, r5, pc}
 8012a54:	20001518 	.word	0x20001518

08012a58 <_read_r>:
 8012a58:	b538      	push	{r3, r4, r5, lr}
 8012a5a:	4d07      	ldr	r5, [pc, #28]	@ (8012a78 <_read_r+0x20>)
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	4608      	mov	r0, r1
 8012a60:	4611      	mov	r1, r2
 8012a62:	2200      	movs	r2, #0
 8012a64:	602a      	str	r2, [r5, #0]
 8012a66:	461a      	mov	r2, r3
 8012a68:	f7f1 f821 	bl	8003aae <_read>
 8012a6c:	1c43      	adds	r3, r0, #1
 8012a6e:	d102      	bne.n	8012a76 <_read_r+0x1e>
 8012a70:	682b      	ldr	r3, [r5, #0]
 8012a72:	b103      	cbz	r3, 8012a76 <_read_r+0x1e>
 8012a74:	6023      	str	r3, [r4, #0]
 8012a76:	bd38      	pop	{r3, r4, r5, pc}
 8012a78:	20001518 	.word	0x20001518

08012a7c <_write_r>:
 8012a7c:	b538      	push	{r3, r4, r5, lr}
 8012a7e:	4d07      	ldr	r5, [pc, #28]	@ (8012a9c <_write_r+0x20>)
 8012a80:	4604      	mov	r4, r0
 8012a82:	4608      	mov	r0, r1
 8012a84:	4611      	mov	r1, r2
 8012a86:	2200      	movs	r2, #0
 8012a88:	602a      	str	r2, [r5, #0]
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	f7f1 f82c 	bl	8003ae8 <_write>
 8012a90:	1c43      	adds	r3, r0, #1
 8012a92:	d102      	bne.n	8012a9a <_write_r+0x1e>
 8012a94:	682b      	ldr	r3, [r5, #0]
 8012a96:	b103      	cbz	r3, 8012a9a <_write_r+0x1e>
 8012a98:	6023      	str	r3, [r4, #0]
 8012a9a:	bd38      	pop	{r3, r4, r5, pc}
 8012a9c:	20001518 	.word	0x20001518

08012aa0 <abort>:
 8012aa0:	b508      	push	{r3, lr}
 8012aa2:	2006      	movs	r0, #6
 8012aa4:	f000 f988 	bl	8012db8 <raise>
 8012aa8:	2001      	movs	r0, #1
 8012aaa:	f7f0 fff5 	bl	8003a98 <_exit>

08012aae <_calloc_r>:
 8012aae:	b570      	push	{r4, r5, r6, lr}
 8012ab0:	fba1 5402 	umull	r5, r4, r1, r2
 8012ab4:	b93c      	cbnz	r4, 8012ac6 <_calloc_r+0x18>
 8012ab6:	4629      	mov	r1, r5
 8012ab8:	f7fb ff9e 	bl	800e9f8 <_malloc_r>
 8012abc:	4606      	mov	r6, r0
 8012abe:	b928      	cbnz	r0, 8012acc <_calloc_r+0x1e>
 8012ac0:	2600      	movs	r6, #0
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	bd70      	pop	{r4, r5, r6, pc}
 8012ac6:	220c      	movs	r2, #12
 8012ac8:	6002      	str	r2, [r0, #0]
 8012aca:	e7f9      	b.n	8012ac0 <_calloc_r+0x12>
 8012acc:	462a      	mov	r2, r5
 8012ace:	4621      	mov	r1, r4
 8012ad0:	f7fd fcba 	bl	8010448 <memset>
 8012ad4:	e7f5      	b.n	8012ac2 <_calloc_r+0x14>

08012ad6 <__sfputc_r>:
 8012ad6:	6893      	ldr	r3, [r2, #8]
 8012ad8:	3b01      	subs	r3, #1
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	b410      	push	{r4}
 8012ade:	6093      	str	r3, [r2, #8]
 8012ae0:	da08      	bge.n	8012af4 <__sfputc_r+0x1e>
 8012ae2:	6994      	ldr	r4, [r2, #24]
 8012ae4:	42a3      	cmp	r3, r4
 8012ae6:	db01      	blt.n	8012aec <__sfputc_r+0x16>
 8012ae8:	290a      	cmp	r1, #10
 8012aea:	d103      	bne.n	8012af4 <__sfputc_r+0x1e>
 8012aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012af0:	f7ff be50 	b.w	8012794 <__swbuf_r>
 8012af4:	6813      	ldr	r3, [r2, #0]
 8012af6:	1c58      	adds	r0, r3, #1
 8012af8:	6010      	str	r0, [r2, #0]
 8012afa:	7019      	strb	r1, [r3, #0]
 8012afc:	4608      	mov	r0, r1
 8012afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <__sfputs_r>:
 8012b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b06:	4606      	mov	r6, r0
 8012b08:	460f      	mov	r7, r1
 8012b0a:	4614      	mov	r4, r2
 8012b0c:	18d5      	adds	r5, r2, r3
 8012b0e:	42ac      	cmp	r4, r5
 8012b10:	d101      	bne.n	8012b16 <__sfputs_r+0x12>
 8012b12:	2000      	movs	r0, #0
 8012b14:	e007      	b.n	8012b26 <__sfputs_r+0x22>
 8012b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b1a:	463a      	mov	r2, r7
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	f7ff ffda 	bl	8012ad6 <__sfputc_r>
 8012b22:	1c43      	adds	r3, r0, #1
 8012b24:	d1f3      	bne.n	8012b0e <__sfputs_r+0xa>
 8012b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b28 <_vfiprintf_r>:
 8012b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	460d      	mov	r5, r1
 8012b2e:	b09d      	sub	sp, #116	@ 0x74
 8012b30:	4614      	mov	r4, r2
 8012b32:	4698      	mov	r8, r3
 8012b34:	4606      	mov	r6, r0
 8012b36:	b118      	cbz	r0, 8012b40 <_vfiprintf_r+0x18>
 8012b38:	6a03      	ldr	r3, [r0, #32]
 8012b3a:	b90b      	cbnz	r3, 8012b40 <_vfiprintf_r+0x18>
 8012b3c:	f7fc fc6a 	bl	800f414 <__sinit>
 8012b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b42:	07d9      	lsls	r1, r3, #31
 8012b44:	d405      	bmi.n	8012b52 <_vfiprintf_r+0x2a>
 8012b46:	89ab      	ldrh	r3, [r5, #12]
 8012b48:	059a      	lsls	r2, r3, #22
 8012b4a:	d402      	bmi.n	8012b52 <_vfiprintf_r+0x2a>
 8012b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b4e:	f7fd fcc2 	bl	80104d6 <__retarget_lock_acquire_recursive>
 8012b52:	89ab      	ldrh	r3, [r5, #12]
 8012b54:	071b      	lsls	r3, r3, #28
 8012b56:	d501      	bpl.n	8012b5c <_vfiprintf_r+0x34>
 8012b58:	692b      	ldr	r3, [r5, #16]
 8012b5a:	b99b      	cbnz	r3, 8012b84 <_vfiprintf_r+0x5c>
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	4630      	mov	r0, r6
 8012b60:	f7ff fe56 	bl	8012810 <__swsetup_r>
 8012b64:	b170      	cbz	r0, 8012b84 <_vfiprintf_r+0x5c>
 8012b66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b68:	07dc      	lsls	r4, r3, #31
 8012b6a:	d504      	bpl.n	8012b76 <_vfiprintf_r+0x4e>
 8012b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b70:	b01d      	add	sp, #116	@ 0x74
 8012b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b76:	89ab      	ldrh	r3, [r5, #12]
 8012b78:	0598      	lsls	r0, r3, #22
 8012b7a:	d4f7      	bmi.n	8012b6c <_vfiprintf_r+0x44>
 8012b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b7e:	f7fd fcab 	bl	80104d8 <__retarget_lock_release_recursive>
 8012b82:	e7f3      	b.n	8012b6c <_vfiprintf_r+0x44>
 8012b84:	2300      	movs	r3, #0
 8012b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b88:	2320      	movs	r3, #32
 8012b8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b92:	2330      	movs	r3, #48	@ 0x30
 8012b94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012d44 <_vfiprintf_r+0x21c>
 8012b98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b9c:	f04f 0901 	mov.w	r9, #1
 8012ba0:	4623      	mov	r3, r4
 8012ba2:	469a      	mov	sl, r3
 8012ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ba8:	b10a      	cbz	r2, 8012bae <_vfiprintf_r+0x86>
 8012baa:	2a25      	cmp	r2, #37	@ 0x25
 8012bac:	d1f9      	bne.n	8012ba2 <_vfiprintf_r+0x7a>
 8012bae:	ebba 0b04 	subs.w	fp, sl, r4
 8012bb2:	d00b      	beq.n	8012bcc <_vfiprintf_r+0xa4>
 8012bb4:	465b      	mov	r3, fp
 8012bb6:	4622      	mov	r2, r4
 8012bb8:	4629      	mov	r1, r5
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f7ff ffa2 	bl	8012b04 <__sfputs_r>
 8012bc0:	3001      	adds	r0, #1
 8012bc2:	f000 80a7 	beq.w	8012d14 <_vfiprintf_r+0x1ec>
 8012bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bc8:	445a      	add	r2, fp
 8012bca:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f000 809f 	beq.w	8012d14 <_vfiprintf_r+0x1ec>
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012be0:	f10a 0a01 	add.w	sl, sl, #1
 8012be4:	9304      	str	r3, [sp, #16]
 8012be6:	9307      	str	r3, [sp, #28]
 8012be8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012bec:	931a      	str	r3, [sp, #104]	@ 0x68
 8012bee:	4654      	mov	r4, sl
 8012bf0:	2205      	movs	r2, #5
 8012bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bf6:	4853      	ldr	r0, [pc, #332]	@ (8012d44 <_vfiprintf_r+0x21c>)
 8012bf8:	f7ed fb12 	bl	8000220 <memchr>
 8012bfc:	9a04      	ldr	r2, [sp, #16]
 8012bfe:	b9d8      	cbnz	r0, 8012c38 <_vfiprintf_r+0x110>
 8012c00:	06d1      	lsls	r1, r2, #27
 8012c02:	bf44      	itt	mi
 8012c04:	2320      	movmi	r3, #32
 8012c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c0a:	0713      	lsls	r3, r2, #28
 8012c0c:	bf44      	itt	mi
 8012c0e:	232b      	movmi	r3, #43	@ 0x2b
 8012c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c14:	f89a 3000 	ldrb.w	r3, [sl]
 8012c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c1a:	d015      	beq.n	8012c48 <_vfiprintf_r+0x120>
 8012c1c:	9a07      	ldr	r2, [sp, #28]
 8012c1e:	4654      	mov	r4, sl
 8012c20:	2000      	movs	r0, #0
 8012c22:	f04f 0c0a 	mov.w	ip, #10
 8012c26:	4621      	mov	r1, r4
 8012c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c2c:	3b30      	subs	r3, #48	@ 0x30
 8012c2e:	2b09      	cmp	r3, #9
 8012c30:	d94b      	bls.n	8012cca <_vfiprintf_r+0x1a2>
 8012c32:	b1b0      	cbz	r0, 8012c62 <_vfiprintf_r+0x13a>
 8012c34:	9207      	str	r2, [sp, #28]
 8012c36:	e014      	b.n	8012c62 <_vfiprintf_r+0x13a>
 8012c38:	eba0 0308 	sub.w	r3, r0, r8
 8012c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8012c40:	4313      	orrs	r3, r2
 8012c42:	9304      	str	r3, [sp, #16]
 8012c44:	46a2      	mov	sl, r4
 8012c46:	e7d2      	b.n	8012bee <_vfiprintf_r+0xc6>
 8012c48:	9b03      	ldr	r3, [sp, #12]
 8012c4a:	1d19      	adds	r1, r3, #4
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	9103      	str	r1, [sp, #12]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	bfbb      	ittet	lt
 8012c54:	425b      	neglt	r3, r3
 8012c56:	f042 0202 	orrlt.w	r2, r2, #2
 8012c5a:	9307      	strge	r3, [sp, #28]
 8012c5c:	9307      	strlt	r3, [sp, #28]
 8012c5e:	bfb8      	it	lt
 8012c60:	9204      	strlt	r2, [sp, #16]
 8012c62:	7823      	ldrb	r3, [r4, #0]
 8012c64:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c66:	d10a      	bne.n	8012c7e <_vfiprintf_r+0x156>
 8012c68:	7863      	ldrb	r3, [r4, #1]
 8012c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c6c:	d132      	bne.n	8012cd4 <_vfiprintf_r+0x1ac>
 8012c6e:	9b03      	ldr	r3, [sp, #12]
 8012c70:	1d1a      	adds	r2, r3, #4
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	9203      	str	r2, [sp, #12]
 8012c76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c7a:	3402      	adds	r4, #2
 8012c7c:	9305      	str	r3, [sp, #20]
 8012c7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012d54 <_vfiprintf_r+0x22c>
 8012c82:	7821      	ldrb	r1, [r4, #0]
 8012c84:	2203      	movs	r2, #3
 8012c86:	4650      	mov	r0, sl
 8012c88:	f7ed faca 	bl	8000220 <memchr>
 8012c8c:	b138      	cbz	r0, 8012c9e <_vfiprintf_r+0x176>
 8012c8e:	9b04      	ldr	r3, [sp, #16]
 8012c90:	eba0 000a 	sub.w	r0, r0, sl
 8012c94:	2240      	movs	r2, #64	@ 0x40
 8012c96:	4082      	lsls	r2, r0
 8012c98:	4313      	orrs	r3, r2
 8012c9a:	3401      	adds	r4, #1
 8012c9c:	9304      	str	r3, [sp, #16]
 8012c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca2:	4829      	ldr	r0, [pc, #164]	@ (8012d48 <_vfiprintf_r+0x220>)
 8012ca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ca8:	2206      	movs	r2, #6
 8012caa:	f7ed fab9 	bl	8000220 <memchr>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d03f      	beq.n	8012d32 <_vfiprintf_r+0x20a>
 8012cb2:	4b26      	ldr	r3, [pc, #152]	@ (8012d4c <_vfiprintf_r+0x224>)
 8012cb4:	bb1b      	cbnz	r3, 8012cfe <_vfiprintf_r+0x1d6>
 8012cb6:	9b03      	ldr	r3, [sp, #12]
 8012cb8:	3307      	adds	r3, #7
 8012cba:	f023 0307 	bic.w	r3, r3, #7
 8012cbe:	3308      	adds	r3, #8
 8012cc0:	9303      	str	r3, [sp, #12]
 8012cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cc4:	443b      	add	r3, r7
 8012cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cc8:	e76a      	b.n	8012ba0 <_vfiprintf_r+0x78>
 8012cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cce:	460c      	mov	r4, r1
 8012cd0:	2001      	movs	r0, #1
 8012cd2:	e7a8      	b.n	8012c26 <_vfiprintf_r+0xfe>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	3401      	adds	r4, #1
 8012cd8:	9305      	str	r3, [sp, #20]
 8012cda:	4619      	mov	r1, r3
 8012cdc:	f04f 0c0a 	mov.w	ip, #10
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ce6:	3a30      	subs	r2, #48	@ 0x30
 8012ce8:	2a09      	cmp	r2, #9
 8012cea:	d903      	bls.n	8012cf4 <_vfiprintf_r+0x1cc>
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d0c6      	beq.n	8012c7e <_vfiprintf_r+0x156>
 8012cf0:	9105      	str	r1, [sp, #20]
 8012cf2:	e7c4      	b.n	8012c7e <_vfiprintf_r+0x156>
 8012cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e7f0      	b.n	8012ce0 <_vfiprintf_r+0x1b8>
 8012cfe:	ab03      	add	r3, sp, #12
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	462a      	mov	r2, r5
 8012d04:	4b12      	ldr	r3, [pc, #72]	@ (8012d50 <_vfiprintf_r+0x228>)
 8012d06:	a904      	add	r1, sp, #16
 8012d08:	4630      	mov	r0, r6
 8012d0a:	f7fb fc19 	bl	800e540 <_printf_float>
 8012d0e:	4607      	mov	r7, r0
 8012d10:	1c78      	adds	r0, r7, #1
 8012d12:	d1d6      	bne.n	8012cc2 <_vfiprintf_r+0x19a>
 8012d14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d16:	07d9      	lsls	r1, r3, #31
 8012d18:	d405      	bmi.n	8012d26 <_vfiprintf_r+0x1fe>
 8012d1a:	89ab      	ldrh	r3, [r5, #12]
 8012d1c:	059a      	lsls	r2, r3, #22
 8012d1e:	d402      	bmi.n	8012d26 <_vfiprintf_r+0x1fe>
 8012d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d22:	f7fd fbd9 	bl	80104d8 <__retarget_lock_release_recursive>
 8012d26:	89ab      	ldrh	r3, [r5, #12]
 8012d28:	065b      	lsls	r3, r3, #25
 8012d2a:	f53f af1f 	bmi.w	8012b6c <_vfiprintf_r+0x44>
 8012d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d30:	e71e      	b.n	8012b70 <_vfiprintf_r+0x48>
 8012d32:	ab03      	add	r3, sp, #12
 8012d34:	9300      	str	r3, [sp, #0]
 8012d36:	462a      	mov	r2, r5
 8012d38:	4b05      	ldr	r3, [pc, #20]	@ (8012d50 <_vfiprintf_r+0x228>)
 8012d3a:	a904      	add	r1, sp, #16
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	f7fb ff49 	bl	800ebd4 <_printf_i>
 8012d42:	e7e4      	b.n	8012d0e <_vfiprintf_r+0x1e6>
 8012d44:	080133dc 	.word	0x080133dc
 8012d48:	080133e6 	.word	0x080133e6
 8012d4c:	0800e541 	.word	0x0800e541
 8012d50:	08012b05 	.word	0x08012b05
 8012d54:	080133e2 	.word	0x080133e2

08012d58 <_malloc_usable_size_r>:
 8012d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d5c:	1f18      	subs	r0, r3, #4
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	bfbc      	itt	lt
 8012d62:	580b      	ldrlt	r3, [r1, r0]
 8012d64:	18c0      	addlt	r0, r0, r3
 8012d66:	4770      	bx	lr

08012d68 <_raise_r>:
 8012d68:	291f      	cmp	r1, #31
 8012d6a:	b538      	push	{r3, r4, r5, lr}
 8012d6c:	4605      	mov	r5, r0
 8012d6e:	460c      	mov	r4, r1
 8012d70:	d904      	bls.n	8012d7c <_raise_r+0x14>
 8012d72:	2316      	movs	r3, #22
 8012d74:	6003      	str	r3, [r0, #0]
 8012d76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d7a:	bd38      	pop	{r3, r4, r5, pc}
 8012d7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012d7e:	b112      	cbz	r2, 8012d86 <_raise_r+0x1e>
 8012d80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d84:	b94b      	cbnz	r3, 8012d9a <_raise_r+0x32>
 8012d86:	4628      	mov	r0, r5
 8012d88:	f000 f830 	bl	8012dec <_getpid_r>
 8012d8c:	4622      	mov	r2, r4
 8012d8e:	4601      	mov	r1, r0
 8012d90:	4628      	mov	r0, r5
 8012d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d96:	f000 b817 	b.w	8012dc8 <_kill_r>
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d00a      	beq.n	8012db4 <_raise_r+0x4c>
 8012d9e:	1c59      	adds	r1, r3, #1
 8012da0:	d103      	bne.n	8012daa <_raise_r+0x42>
 8012da2:	2316      	movs	r3, #22
 8012da4:	6003      	str	r3, [r0, #0]
 8012da6:	2001      	movs	r0, #1
 8012da8:	e7e7      	b.n	8012d7a <_raise_r+0x12>
 8012daa:	2100      	movs	r1, #0
 8012dac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012db0:	4620      	mov	r0, r4
 8012db2:	4798      	blx	r3
 8012db4:	2000      	movs	r0, #0
 8012db6:	e7e0      	b.n	8012d7a <_raise_r+0x12>

08012db8 <raise>:
 8012db8:	4b02      	ldr	r3, [pc, #8]	@ (8012dc4 <raise+0xc>)
 8012dba:	4601      	mov	r1, r0
 8012dbc:	6818      	ldr	r0, [r3, #0]
 8012dbe:	f7ff bfd3 	b.w	8012d68 <_raise_r>
 8012dc2:	bf00      	nop
 8012dc4:	200001a8 	.word	0x200001a8

08012dc8 <_kill_r>:
 8012dc8:	b538      	push	{r3, r4, r5, lr}
 8012dca:	4d07      	ldr	r5, [pc, #28]	@ (8012de8 <_kill_r+0x20>)
 8012dcc:	2300      	movs	r3, #0
 8012dce:	4604      	mov	r4, r0
 8012dd0:	4608      	mov	r0, r1
 8012dd2:	4611      	mov	r1, r2
 8012dd4:	602b      	str	r3, [r5, #0]
 8012dd6:	f7f0 fe4f 	bl	8003a78 <_kill>
 8012dda:	1c43      	adds	r3, r0, #1
 8012ddc:	d102      	bne.n	8012de4 <_kill_r+0x1c>
 8012dde:	682b      	ldr	r3, [r5, #0]
 8012de0:	b103      	cbz	r3, 8012de4 <_kill_r+0x1c>
 8012de2:	6023      	str	r3, [r4, #0]
 8012de4:	bd38      	pop	{r3, r4, r5, pc}
 8012de6:	bf00      	nop
 8012de8:	20001518 	.word	0x20001518

08012dec <_getpid_r>:
 8012dec:	f7f0 be3c 	b.w	8003a68 <_getpid>

08012df0 <_init>:
 8012df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df2:	bf00      	nop
 8012df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012df6:	bc08      	pop	{r3}
 8012df8:	469e      	mov	lr, r3
 8012dfa:	4770      	bx	lr

08012dfc <_fini>:
 8012dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dfe:	bf00      	nop
 8012e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e02:	bc08      	pop	{r3}
 8012e04:	469e      	mov	lr, r3
 8012e06:	4770      	bx	lr
